
c:/Users/mligh/OneDrive/Particle/ArgonClock/argonclock/target/1.5.2/argon/argonclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010240  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e4260  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e1f0  000e4264  0002e1f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000510  2003e2e0  2003e2e0  0003e2e0  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e4354  000e4354  00034354  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e437c  000e437c  0003437c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010dcbf  00000000  00000000  00034380  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012f4b  00000000  00000000  0014203f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000256ef  00000000  00000000  00154f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002ca8  00000000  00000000  0017a679  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005270  00000000  00000000  0017d321  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003724b  00000000  00000000  00182591  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002dc09  00000000  00000000  001b97dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010824e  00000000  00000000  001e73e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eb3c  00000000  00000000  002ef634  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00d fb86 	bl	e1742 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00d fb8b 	bl	e1758 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1f0 	.word	0x2003e1f0
   d404c:	000e4264 	.word	0x000e4264
   d4050:	2003e2e0 	.word	0x2003e2e0
   d4054:	2003e2e0 	.word	0x2003e2e0
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f00b f98f 	bl	df380 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e4260 	.word	0x000e4260
   d4084:	000e4224 	.word	0x000e4224

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f008 bde0 	b.w	dcc4c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f008 feeb 	bl	dce68 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f00b b935 	b.w	df304 <_post_loop>

000d409a <_Znwj>:
   d409a:	f00a bb61 	b.w	de760 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f00a bb5f 	b.w	de760 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f00a bb65 	b.w	de770 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f00a bb63 	b.w	de770 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
   d40ba:	0000      	movs	r0, r0
   d40bc:	0000      	movs	r0, r0
	...

000d40c0 <_Z9myHandlerPKcS0_>:
void fillStrip(int start, int end, int R, int G, int B){
    for(i = start; i <= end; i++){
        strip.setPixelColor(i, R, G, B);
    }
}
void myHandler(const char *event, const char *data) {
   d40c0:	b5f0      	push	{r4, r5, r6, r7, lr}
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
   d40c2:	4f6b      	ldr	r7, [pc, #428]	; (d4270 <_Z9myHandlerPKcS0_+0x1b0>)
void fillStrip(int start, int end, int R, int G, int B){
    for(i = start; i <= end; i++){
        strip.setPixelColor(i, R, G, B);
    }
}
void myHandler(const char *event, const char *data) {
   d40c4:	b085      	sub	sp, #20
   d40c6:	460e      	mov	r6, r1
   d40c8:	1c8d      	adds	r5, r1, #2
   d40ca:	460c      	mov	r4, r1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   d40cc:	4630      	mov	r0, r6
   d40ce:	f00d fba0 	bl	e1812 <strlen>
   d40d2:	1ba3      	subs	r3, r4, r6
   d40d4:	4298      	cmp	r0, r3
   d40d6:	d962      	bls.n	d419e <_Z9myHandlerPKcS0_+0xde>
    {
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
   d40d8:	f814 3b01 	ldrb.w	r3, [r4], #1
   d40dc:	2b74      	cmp	r3, #116	; 0x74
   d40de:	d11e      	bne.n	d411e <_Z9myHandlerPKcS0_+0x5e>
   d40e0:	7823      	ldrb	r3, [r4, #0]
   d40e2:	2b65      	cmp	r3, #101	; 0x65
   d40e4:	d13f      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d40e6:	782b      	ldrb	r3, [r5, #0]
   d40e8:	2b6d      	cmp	r3, #109	; 0x6d
   d40ea:	d13c      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d40ec:	786b      	ldrb	r3, [r5, #1]
   d40ee:	2b70      	cmp	r3, #112	; 0x70
   d40f0:	d139      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d40f2:	78e3      	ldrb	r3, [r4, #3]
   d40f4:	2b22      	cmp	r3, #34	; 0x22
   d40f6:	d136      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
            tempdata[0] = data[j+6];
   d40f8:	7963      	ldrb	r3, [r4, #5]
   d40fa:	f88d 3008 	strb.w	r3, [sp, #8]
            tempdata[1] = data[j+7];
   d40fe:	79a3      	ldrb	r3, [r4, #6]
   d4100:	f88d 3009 	strb.w	r3, [sp, #9]
            tempdata[2] = data[j+8];
   d4104:	79e3      	ldrb	r3, [r4, #7]
   d4106:	f88d 300a 	strb.w	r3, [sp, #10]
            tempdata[3] = data[j+9];
   d410a:	7a23      	ldrb	r3, [r4, #8]
   d410c:	f88d 300b 	strb.w	r3, [sp, #11]
            tempdata[4] = data[j+10];
   d4110:	7a63      	ldrb	r3, [r4, #9]
   d4112:	f88d 300c 	strb.w	r3, [sp, #12]
            tempdata[5] = data[j+11];
   d4116:	7aa3      	ldrb	r3, [r4, #10]
   d4118:	f88d 300d 	strb.w	r3, [sp, #13]
   d411c:	e023      	b.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
        }
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
   d411e:	2b68      	cmp	r3, #104	; 0x68
   d4120:	d114      	bne.n	d414c <_Z9myHandlerPKcS0_+0x8c>
   d4122:	7823      	ldrb	r3, [r4, #0]
   d4124:	2b75      	cmp	r3, #117	; 0x75
   d4126:	d11e      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d4128:	782b      	ldrb	r3, [r5, #0]
   d412a:	2b6d      	cmp	r3, #109	; 0x6d
   d412c:	d11b      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d412e:	786b      	ldrb	r3, [r5, #1]
   d4130:	2b69      	cmp	r3, #105	; 0x69
   d4132:	d118      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
            humdata[0] = data[j+10];
   d4134:	7a63      	ldrb	r3, [r4, #9]
   d4136:	f88d 3000 	strb.w	r3, [sp]
            humdata[1] = data[j+11];
   d413a:	7aa3      	ldrb	r3, [r4, #10]
   d413c:	f88d 3001 	strb.w	r3, [sp, #1]
            if(data[j+12] == '0')
   d4140:	7ae3      	ldrb	r3, [r4, #11]
   d4142:	2b30      	cmp	r3, #48	; 0x30
   d4144:	d10f      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
            {
                humdata[2] = data[j+12];
   d4146:	f88d 3002 	strb.w	r3, [sp, #2]
   d414a:	e00c      	b.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
   d414c:	2b69      	cmp	r3, #105	; 0x69
   d414e:	d10a      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d4150:	7823      	ldrb	r3, [r4, #0]
   d4152:	2b63      	cmp	r3, #99	; 0x63
   d4154:	d107      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d4156:	782b      	ldrb	r3, [r5, #0]
   d4158:	2b6f      	cmp	r3, #111	; 0x6f
   d415a:	d104      	bne.n	d4166 <_Z9myHandlerPKcS0_+0xa6>
   d415c:	786b      	ldrb	r3, [r5, #1]
   d415e:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
   d4160:	bf04      	itt	eq
   d4162:	7a23      	ldrbeq	r3, [r4, #8]
   d4164:	703b      	strbeq	r3, [r7, #0]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
   d4166:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   d416a:	2b5b      	cmp	r3, #91	; 0x5b
   d416c:	d115      	bne.n	d419a <_Z9myHandlerPKcS0_+0xda>
   d416e:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   d4172:	2b7b      	cmp	r3, #123	; 0x7b
   d4174:	d111      	bne.n	d419a <_Z9myHandlerPKcS0_+0xda>
   d4176:	7823      	ldrb	r3, [r4, #0]
   d4178:	2b22      	cmp	r3, #34	; 0x22
   d417a:	d10e      	bne.n	d419a <_Z9myHandlerPKcS0_+0xda>
   d417c:	782b      	ldrb	r3, [r5, #0]
   d417e:	2b69      	cmp	r3, #105	; 0x69
   d4180:	d10b      	bne.n	d419a <_Z9myHandlerPKcS0_+0xda>
   d4182:	786b      	ldrb	r3, [r5, #1]
   d4184:	2b64      	cmp	r3, #100	; 0x64
   d4186:	d108      	bne.n	d419a <_Z9myHandlerPKcS0_+0xda>
            cdata[0] = data[j+6];
   d4188:	7963      	ldrb	r3, [r4, #5]
   d418a:	f88d 3004 	strb.w	r3, [sp, #4]
            cdata[1] = data[j+7];
   d418e:	79a3      	ldrb	r3, [r4, #6]
   d4190:	f88d 3005 	strb.w	r3, [sp, #5]
            cdata[2] = data[j+8];
   d4194:	79e3      	ldrb	r3, [r4, #7]
   d4196:	f88d 3006 	strb.w	r3, [sp, #6]
   d419a:	3501      	adds	r5, #1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   d419c:	e796      	b.n	d40cc <_Z9myHandlerPKcS0_+0xc>
            cdata[0] = data[j+6];
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    if(humdata[0] > '0' && humdata[0] < '9'){
   d419e:	f89d 3000 	ldrb.w	r3, [sp]
   d41a2:	3b31      	subs	r3, #49	; 0x31
   d41a4:	2b07      	cmp	r3, #7
   d41a6:	d80f      	bhi.n	d41c8 <_Z9myHandlerPKcS0_+0x108>
        humidity = atof(humdata);
   d41a8:	4668      	mov	r0, sp
   d41aa:	f00d f9ad 	bl	e1508 <atof>
   d41ae:	ec51 0b10 	vmov	r0, r1, d0
   d41b2:	f00d f911 	bl	e13d8 <__aeabi_d2iz>
        HC1 = humidity/10;
   d41b6:	492f      	ldr	r1, [pc, #188]	; (d4274 <_Z9myHandlerPKcS0_+0x1b4>)
   d41b8:	220a      	movs	r2, #10
   d41ba:	fb90 f3f2 	sdiv	r3, r0, r2
   d41be:	600b      	str	r3, [r1, #0]
        HC2 = humidity%10;
   d41c0:	fb02 0313 	mls	r3, r2, r3, r0
   d41c4:	4a2c      	ldr	r2, [pc, #176]	; (d4278 <_Z9myHandlerPKcS0_+0x1b8>)
   d41c6:	6013      	str	r3, [r2, #0]
    }
    if(cdata[0] > '0' && cdata[0] < '9'){
   d41c8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d41cc:	3b31      	subs	r3, #49	; 0x31
   d41ce:	2b07      	cmp	r3, #7
   d41d0:	d808      	bhi.n	d41e4 <_Z9myHandlerPKcS0_+0x124>
        cid = atof(cdata);
   d41d2:	a801      	add	r0, sp, #4
   d41d4:	f00d f998 	bl	e1508 <atof>
   d41d8:	ec51 0b10 	vmov	r0, r1, d0
   d41dc:	f00d f8fc 	bl	e13d8 <__aeabi_d2iz>
   d41e0:	4b26      	ldr	r3, [pc, #152]	; (d427c <_Z9myHandlerPKcS0_+0x1bc>)
   d41e2:	6018      	str	r0, [r3, #0]
    }
    if(tempdata[0] > '0' && tempdata[0] < '9'){
   d41e4:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d41e8:	3b31      	subs	r3, #49	; 0x31
   d41ea:	2b07      	cmp	r3, #7
   d41ec:	d82e      	bhi.n	d424c <_Z9myHandlerPKcS0_+0x18c>
        tempK = atof(tempdata);
   d41ee:	a802      	add	r0, sp, #8
   d41f0:	f00d f98a 	bl	e1508 <atof>
        tempC = tempK-273.15;
        tempF = (tempC*1.8)+32;
        TFahr = (int)tempF;
   d41f4:	ec51 0b10 	vmov	r0, r1, d0
   d41f8:	f00d f936 	bl	e1468 <__aeabi_d2f>
   d41fc:	f00c fdfe 	bl	e0dfc <__aeabi_f2d>
   d4200:	a317      	add	r3, pc, #92	; (adr r3, d4260 <_Z9myHandlerPKcS0_+0x1a0>)
   d4202:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4206:	f00c fc99 	bl	e0b3c <__aeabi_dsub>
   d420a:	f00d f92d 	bl	e1468 <__aeabi_d2f>
   d420e:	f00c fdf5 	bl	e0dfc <__aeabi_f2d>
   d4212:	a315      	add	r3, pc, #84	; (adr r3, d4268 <_Z9myHandlerPKcS0_+0x1a8>)
   d4214:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4218:	f00c fe44 	bl	e0ea4 <__aeabi_dmul>
   d421c:	2200      	movs	r2, #0
   d421e:	4b18      	ldr	r3, [pc, #96]	; (d4280 <_Z9myHandlerPKcS0_+0x1c0>)
   d4220:	f00c fc8e 	bl	e0b40 <__adddf3>
   d4224:	f00d f920 	bl	e1468 <__aeabi_d2f>
   d4228:	ee07 0a90 	vmov	s15, r0
   d422c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4230:	4b14      	ldr	r3, [pc, #80]	; (d4284 <_Z9myHandlerPKcS0_+0x1c4>)
        TC1 = TFahr/10;
   d4232:	4915      	ldr	r1, [pc, #84]	; (d4288 <_Z9myHandlerPKcS0_+0x1c8>)
    }
    if(tempdata[0] > '0' && tempdata[0] < '9'){
        tempK = atof(tempdata);
        tempC = tempK-273.15;
        tempF = (tempC*1.8)+32;
        TFahr = (int)tempF;
   d4234:	edc3 7a00 	vstr	s15, [r3]
   d4238:	ee17 0a90 	vmov	r0, s15
        TC1 = TFahr/10;
   d423c:	220a      	movs	r2, #10
   d423e:	fb90 f3f2 	sdiv	r3, r0, r2
   d4242:	600b      	str	r3, [r1, #0]
        TC2 = TFahr%10;
   d4244:	fb02 0313 	mls	r3, r2, r3, r0
   d4248:	4a10      	ldr	r2, [pc, #64]	; (d428c <_Z9myHandlerPKcS0_+0x1cc>)
   d424a:	6013      	str	r3, [r2, #0]
    }
    strip.show();
   d424c:	4810      	ldr	r0, [pc, #64]	; (d4290 <_Z9myHandlerPKcS0_+0x1d0>)
   d424e:	f009 fd61 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
    delay(10);
   d4252:	200a      	movs	r0, #10
   d4254:	f00a ffe4 	bl	df220 <delay>
}
   d4258:	b005      	add	sp, #20
   d425a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d425c:	f3af 8000 	nop.w
   d4260:	66666666 	.word	0x66666666
   d4264:	40711266 	.word	0x40711266
   d4268:	cccccccd 	.word	0xcccccccd
   d426c:	3ffccccc 	.word	0x3ffccccc
   d4270:	2003e360 	.word	0x2003e360
   d4274:	2003e2ec 	.word	0x2003e2ec
   d4278:	2003e340 	.word	0x2003e340
   d427c:	2003e2e8 	.word	0x2003e2e8
   d4280:	40400000 	.word	0x40400000
   d4284:	2003e354 	.word	0x2003e354
   d4288:	2003e2f4 	.word	0x2003e2f4
   d428c:	2003e34c 	.word	0x2003e34c
   d4290:	2003e328 	.word	0x2003e328

000d4294 <_Z8mshHdlr2PKcS0_>:
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d4294:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d4296:	4c0f      	ldr	r4, [pc, #60]	; (d42d4 <_Z8mshHdlr2PKcS0_+0x40>)
   d4298:	2300      	movs	r3, #0
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d429a:	460d      	mov	r5, r1
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d429c:	6023      	str	r3, [r4, #0]
   d429e:	4628      	mov	r0, r5
   d42a0:	f00d fab7 	bl	e1812 <strlen>
   d42a4:	6823      	ldr	r3, [r4, #0]
   d42a6:	4298      	cmp	r0, r3
   d42a8:	d90f      	bls.n	d42ca <_Z8mshHdlr2PKcS0_+0x36>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
   d42aa:	5cea      	ldrb	r2, [r5, r3]
   d42ac:	2a75      	cmp	r2, #117	; 0x75
   d42ae:	d109      	bne.n	d42c4 <_Z8mshHdlr2PKcS0_+0x30>
   d42b0:	18ea      	adds	r2, r5, r3
   d42b2:	7851      	ldrb	r1, [r2, #1]
   d42b4:	296c      	cmp	r1, #108	; 0x6c
   d42b6:	d105      	bne.n	d42c4 <_Z8mshHdlr2PKcS0_+0x30>
   d42b8:	7891      	ldrb	r1, [r2, #2]
   d42ba:	2974      	cmp	r1, #116	; 0x74
            dat[0] = data[i+5];
   d42bc:	bf04      	itt	eq
   d42be:	7952      	ldrbeq	r2, [r2, #5]
   d42c0:	f88d 2004 	strbeq.w	r2, [sp, #4]
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d42c4:	3301      	adds	r3, #1
   d42c6:	6023      	str	r3, [r4, #0]
   d42c8:	e7e9      	b.n	d429e <_Z8mshHdlr2PKcS0_+0xa>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
            dat[0] = data[i+5];
        }
    }
    lmpmode = atof(dat);
   d42ca:	a801      	add	r0, sp, #4
   d42cc:	f00d f91c 	bl	e1508 <atof>
    else{
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
   d42d0:	b003      	add	sp, #12
   d42d2:	bd30      	pop	{r4, r5, pc}
   d42d4:	2003e33c 	.word	0x2003e33c

000d42d8 <_Z9itHandlerPKcS0_>:
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d42d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    for(j=0;j<strlen(data);j++){
   d42da:	4c27      	ldr	r4, [pc, #156]	; (d4378 <_Z9itHandlerPKcS0_+0xa0>)
   d42dc:	2300      	movs	r3, #0
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d42de:	460d      	mov	r5, r1
    for(j=0;j<strlen(data);j++){
   d42e0:	6023      	str	r3, [r4, #0]
   d42e2:	4628      	mov	r0, r5
   d42e4:	f00d fa95 	bl	e1812 <strlen>
   d42e8:	6823      	ldr	r3, [r4, #0]
   d42ea:	4298      	cmp	r0, r3
   d42ec:	d93c      	bls.n	d4368 <_Z9itHandlerPKcS0_+0x90>
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d42ee:	5cea      	ldrb	r2, [r5, r3]
   d42f0:	2a6c      	cmp	r2, #108	; 0x6c
   d42f2:	d115      	bne.n	d4320 <_Z9itHandlerPKcS0_+0x48>
   d42f4:	442b      	add	r3, r5
   d42f6:	785a      	ldrb	r2, [r3, #1]
   d42f8:	2a75      	cmp	r2, #117	; 0x75
   d42fa:	d111      	bne.n	d4320 <_Z9itHandlerPKcS0_+0x48>
   d42fc:	789a      	ldrb	r2, [r3, #2]
   d42fe:	2a65      	cmp	r2, #101	; 0x65
   d4300:	d10e      	bne.n	d4320 <_Z9itHandlerPKcS0_+0x48>
   d4302:	78da      	ldrb	r2, [r3, #3]
   d4304:	2a22      	cmp	r2, #34	; 0x22
   d4306:	d10b      	bne.n	d4320 <_Z9itHandlerPKcS0_+0x48>
   d4308:	791a      	ldrb	r2, [r3, #4]
   d430a:	2a3a      	cmp	r2, #58	; 0x3a
   d430c:	d108      	bne.n	d4320 <_Z9itHandlerPKcS0_+0x48>
   d430e:	795a      	ldrb	r2, [r3, #5]
   d4310:	2a22      	cmp	r2, #34	; 0x22
            tempdat[0] = data[j+6];
   d4312:	bf01      	itttt	eq
   d4314:	799a      	ldrbeq	r2, [r3, #6]
            tempdat[1] = data[j+7];
   d4316:	79db      	ldrbeq	r3, [r3, #7]
    for(j=0;j<strlen(data);j++){
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            tempdat[0] = data[j+6];
   d4318:	f88d 2004 	strbeq.w	r2, [sp, #4]
            tempdat[1] = data[j+7];
   d431c:	f88d 3005 	strbeq.w	r3, [sp, #5]
            //tempdat[2] = data[j+8];
            //tempdat[3] = data[j+9];
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
   d4320:	a801      	add	r0, sp, #4
   d4322:	f00d f8f1 	bl	e1508 <atof>
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
   d4326:	2200      	movs	r2, #0
   d4328:	ec51 0b10 	vmov	r0, r1, d0
   d432c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d4330:	f00c fc04 	bl	e0b3c <__aeabi_dsub>
   d4334:	f00d f898 	bl	e1468 <__aeabi_d2f>
   d4338:	f00c fd60 	bl	e0dfc <__aeabi_f2d>
   d433c:	a30c      	add	r3, pc, #48	; (adr r3, d4370 <_Z9itHandlerPKcS0_+0x98>)
   d433e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4342:	f00c fdaf 	bl	e0ea4 <__aeabi_dmul>
   d4346:	4b0d      	ldr	r3, [pc, #52]	; (d437c <_Z9itHandlerPKcS0_+0xa4>)
   d4348:	2200      	movs	r2, #0
   d434a:	f00c fbf9 	bl	e0b40 <__adddf3>
   d434e:	f00d f88b 	bl	e1468 <__aeabi_d2f>
   d4352:	ee07 0a90 	vmov	s15, r0
   d4356:	4b0a      	ldr	r3, [pc, #40]	; (d4380 <_Z9itHandlerPKcS0_+0xa8>)
   d4358:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d435c:	edc3 7a00 	vstr	s15, [r3]
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d4360:	6823      	ldr	r3, [r4, #0]
   d4362:	3301      	adds	r3, #1
   d4364:	6023      	str	r3, [r4, #0]
   d4366:	e7bc      	b.n	d42e2 <_Z9itHandlerPKcS0_+0xa>
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   d4368:	b003      	add	sp, #12
   d436a:	bd30      	pop	{r4, r5, pc}
   d436c:	f3af 8000 	nop.w
   d4370:	cccccccd 	.word	0xcccccccd
   d4374:	3ffccccc 	.word	0x3ffccccc
   d4378:	2003e310 	.word	0x2003e310
   d437c:	40400000 	.word	0x40400000
   d4380:	2003e344 	.word	0x2003e344

000d4384 <_Z10myHandler2PKcS0_>:
        TC2 = TFahr%10;
    }
    strip.show();
    delay(10);
}
void myHandler2(const char *event, const char *data) {
   d4384:	b510      	push	{r4, lr}
   d4386:	460c      	mov	r4, r1
    if(strcmp(data,"mode0")==0)
   d4388:	4620      	mov	r0, r4
   d438a:	4912      	ldr	r1, [pc, #72]	; (d43d4 <_Z10myHandler2PKcS0_+0x50>)
   d438c:	f00d fa14 	bl	e17b8 <strcmp>
   d4390:	b978      	cbnz	r0, d43b2 <_Z10myHandler2PKcS0_+0x2e>
    {
        if(analogRead(A4) > bound)
   d4392:	200f      	movs	r0, #15
   d4394:	f00c f9f7 	bl	e0786 <analogRead>
   d4398:	4b0f      	ldr	r3, [pc, #60]	; (d43d8 <_Z10myHandler2PKcS0_+0x54>)
   d439a:	681b      	ldr	r3, [r3, #0]
   d439c:	4298      	cmp	r0, r3
   d439e:	dd08      	ble.n	d43b2 <_Z10myHandler2PKcS0_+0x2e>
        {
            strip.clear();
   d43a0:	480e      	ldr	r0, [pc, #56]	; (d43dc <_Z10myHandler2PKcS0_+0x58>)
   d43a2:	f009 fe88 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
            scan = 2;
   d43a6:	4b0e      	ldr	r3, [pc, #56]	; (d43e0 <_Z10myHandler2PKcS0_+0x5c>)
   d43a8:	2202      	movs	r2, #2
   d43aa:	601a      	str	r2, [r3, #0]
            dmode = 1;
   d43ac:	4b0d      	ldr	r3, [pc, #52]	; (d43e4 <_Z10myHandler2PKcS0_+0x60>)
   d43ae:	2201      	movs	r2, #1
   d43b0:	601a      	str	r2, [r3, #0]
        }
    }
    if(strcmp(data,"mode1")==0)
   d43b2:	490d      	ldr	r1, [pc, #52]	; (d43e8 <_Z10myHandler2PKcS0_+0x64>)
   d43b4:	4620      	mov	r0, r4
   d43b6:	f00d f9ff 	bl	e17b8 <strcmp>
   d43ba:	b948      	cbnz	r0, d43d0 <_Z10myHandler2PKcS0_+0x4c>
    {
        if(analogRead(A4) > bound)
   d43bc:	200f      	movs	r0, #15
   d43be:	f00c f9e2 	bl	e0786 <analogRead>
   d43c2:	4b05      	ldr	r3, [pc, #20]	; (d43d8 <_Z10myHandler2PKcS0_+0x54>)
   d43c4:	681b      	ldr	r3, [r3, #0]
   d43c6:	4298      	cmp	r0, r3
        {
            dmode = 2;
   d43c8:	bfc2      	ittt	gt
   d43ca:	4b06      	ldrgt	r3, [pc, #24]	; (d43e4 <_Z10myHandler2PKcS0_+0x60>)
   d43cc:	2202      	movgt	r2, #2
   d43ce:	601a      	strgt	r2, [r3, #0]
   d43d0:	bd10      	pop	{r4, pc}
   d43d2:	bf00      	nop
   d43d4:	000e3a30 	.word	0x000e3a30
   d43d8:	2003e358 	.word	0x2003e358
   d43dc:	2003e328 	.word	0x2003e328
   d43e0:	2003e308 	.word	0x2003e308
   d43e4:	2003e320 	.word	0x2003e320
   d43e8:	000e3a36 	.word	0x000e3a36

000d43ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d43ec:	b510      	push	{r4, lr}
   d43ee:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d43f0:	6800      	ldr	r0, [r0, #0]
   d43f2:	b108      	cbz	r0, d43f8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d43f4:	f00a f9bc 	bl	de770 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d43f8:	4620      	mov	r0, r4
   d43fa:	bd10      	pop	{r4, pc}

000d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>:
     * @note The periodic functionality is not available for the Spark Core.
     */
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
   d43fc:	b513      	push	{r0, r1, r4, lr}
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d43fe:	2400      	movs	r4, #0
   d4400:	4613      	mov	r3, r2
   d4402:	9401      	str	r4, [sp, #4]
   d4404:	9400      	str	r4, [sp, #0]
   d4406:	4622      	mov	r2, r4
   d4408:	f00a f98a 	bl	de720 <spark_subscribe>
    }
   d440c:	b002      	add	sp, #8
   d440e:	bd10      	pop	{r4, pc}

000d4410 <_ZN11EEPROMClass4readEi.isra.10>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4410:	f009 bf18 	b.w	de244 <HAL_EEPROM_Read>

000d4414 <_Z10co2HandlerPKcS0_>:
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d4414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for(j=0;j<strlen(data);j++){
   d4418:	4d51      	ldr	r5, [pc, #324]	; (d4560 <_Z10co2HandlerPKcS0_+0x14c>)
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d441a:	f8df 915c 	ldr.w	r9, [pc, #348]	; d4578 <_Z10co2HandlerPKcS0_+0x164>
   d441e:	f8df a144 	ldr.w	sl, [pc, #324]	; d4564 <_Z10co2HandlerPKcS0_+0x150>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d4422:	2300      	movs	r3, #0
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d4424:	b085      	sub	sp, #20
   d4426:	460e      	mov	r6, r1
    for(j=0;j<strlen(data);j++){
   d4428:	602b      	str	r3, [r5, #0]
   d442a:	4630      	mov	r0, r6
   d442c:	f00d f9f1 	bl	e1812 <strlen>
   d4430:	682b      	ldr	r3, [r5, #0]
   d4432:	4298      	cmp	r0, r3
   d4434:	f240 8090 	bls.w	d4558 <_Z10co2HandlerPKcS0_+0x144>
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d4438:	5cf2      	ldrb	r2, [r6, r3]
   d443a:	2a6c      	cmp	r2, #108	; 0x6c
   d443c:	d11b      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
   d443e:	4433      	add	r3, r6
   d4440:	785a      	ldrb	r2, [r3, #1]
   d4442:	2a75      	cmp	r2, #117	; 0x75
   d4444:	d117      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
   d4446:	789a      	ldrb	r2, [r3, #2]
   d4448:	2a65      	cmp	r2, #101	; 0x65
   d444a:	d114      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
   d444c:	78da      	ldrb	r2, [r3, #3]
   d444e:	2a22      	cmp	r2, #34	; 0x22
   d4450:	d111      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
   d4452:	791a      	ldrb	r2, [r3, #4]
   d4454:	2a3a      	cmp	r2, #58	; 0x3a
   d4456:	d10e      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
   d4458:	795a      	ldrb	r2, [r3, #5]
   d445a:	2a22      	cmp	r2, #34	; 0x22
   d445c:	d10b      	bne.n	d4476 <_Z10co2HandlerPKcS0_+0x62>
            codat[0] = data[j+6];
   d445e:	799a      	ldrb	r2, [r3, #6]
   d4460:	f88d 200c 	strb.w	r2, [sp, #12]
            codat[1] = data[j+7];
   d4464:	79da      	ldrb	r2, [r3, #7]
   d4466:	f88d 200d 	strb.w	r2, [sp, #13]
            codat[2] = data[j+8];
   d446a:	7a1a      	ldrb	r2, [r3, #8]
            codat[3] = data[j+9];
   d446c:	7a5b      	ldrb	r3, [r3, #9]
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            codat[0] = data[j+6];
            codat[1] = data[j+7];
            codat[2] = data[j+8];
   d446e:	f88d 200e 	strb.w	r2, [sp, #14]
            codat[3] = data[j+9];
   d4472:	f88d 300f 	strb.w	r3, [sp, #15]
        }
        codata = atof(codat);
   d4476:	a803      	add	r0, sp, #12
   d4478:	f00d f846 	bl	e1508 <atof>
        ico2 = (int)codata;
   d447c:	ec51 0b10 	vmov	r0, r1, d0
   d4480:	f00c fff2 	bl	e1468 <__aeabi_d2f>
   d4484:	ee07 0a90 	vmov	s15, r0
   d4488:	4b36      	ldr	r3, [pc, #216]	; (d4564 <_Z10co2HandlerPKcS0_+0x150>)
   d448a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d448e:	200f      	movs	r0, #15
            codat[1] = data[j+7];
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
   d4490:	edc3 7a00 	vstr	s15, [r3]
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d4494:	f00c f977 	bl	e0786 <analogRead>
   d4498:	f8d9 3000 	ldr.w	r3, [r9]
   d449c:	4298      	cmp	r0, r3
   d449e:	da1c      	bge.n	d44da <_Z10co2HandlerPKcS0_+0xc6>
   d44a0:	f00c f988 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   d44a4:	2003      	movs	r0, #3
   d44a6:	f7ff ffb3 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   d44aa:	2801      	cmp	r0, #1
   d44ac:	d115      	bne.n	d44da <_Z10co2HandlerPKcS0_+0xc6>
   d44ae:	e018      	b.n	d44e2 <_Z10co2HandlerPKcS0_+0xce>
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d44b0:	4b2d      	ldr	r3, [pc, #180]	; (d4568 <_Z10co2HandlerPKcS0_+0x154>)
                if(i>248 && i<256){
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
   d44b2:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d457c <_Z10co2HandlerPKcS0_+0x168>
   d44b6:	4f2d      	ldr	r7, [pc, #180]	; (d456c <_Z10co2HandlerPKcS0_+0x158>)
   d44b8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d4580 <_Z10co2HandlerPKcS0_+0x16c>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d44bc:	22f8      	movs	r2, #248	; 0xf8
   d44be:	601a      	str	r2, [r3, #0]
   d44c0:	6821      	ldr	r1, [r4, #0]
   d44c2:	f8da 3000 	ldr.w	r3, [sl]
   d44c6:	f240 22ee 	movw	r2, #750	; 0x2ee
   d44ca:	fb93 f3f2 	sdiv	r3, r3, r2
   d44ce:	33f7      	adds	r3, #247	; 0xf7
   d44d0:	428b      	cmp	r3, r1
   d44d2:	da1b      	bge.n	d450c <_Z10co2HandlerPKcS0_+0xf8>
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
                    }
                }
            }
            strip.show();
   d44d4:	4826      	ldr	r0, [pc, #152]	; (d4570 <_Z10co2HandlerPKcS0_+0x15c>)
   d44d6:	f009 fc1d 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d44da:	682b      	ldr	r3, [r5, #0]
   d44dc:	3301      	adds	r3, #1
   d44de:	602b      	str	r3, [r5, #0]
   d44e0:	e7a3      	b.n	d442a <_Z10co2HandlerPKcS0_+0x16>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d44e2:	4c21      	ldr	r4, [pc, #132]	; (d4568 <_Z10co2HandlerPKcS0_+0x154>)
   d44e4:	23f8      	movs	r3, #248	; 0xf8
   d44e6:	6023      	str	r3, [r4, #0]
   d44e8:	4627      	mov	r7, r4
                strip.setPixelColor(i,0,0,0);
   d44ea:	f04f 0800 	mov.w	r8, #0
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d44ee:	6821      	ldr	r1, [r4, #0]
   d44f0:	29ff      	cmp	r1, #255	; 0xff
   d44f2:	dcdd      	bgt.n	d44b0 <_Z10co2HandlerPKcS0_+0x9c>
                strip.setPixelColor(i,0,0,0);
   d44f4:	2300      	movs	r3, #0
   d44f6:	461a      	mov	r2, r3
   d44f8:	f8cd 8000 	str.w	r8, [sp]
   d44fc:	b289      	uxth	r1, r1
   d44fe:	481c      	ldr	r0, [pc, #112]	; (d4570 <_Z10co2HandlerPKcS0_+0x15c>)
   d4500:	f009 fdaa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d4504:	683b      	ldr	r3, [r7, #0]
   d4506:	3301      	adds	r3, #1
   d4508:	603b      	str	r3, [r7, #0]
   d450a:	e7f0      	b.n	d44ee <_Z10co2HandlerPKcS0_+0xda>
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
                if(i>248 && i<256){
   d450c:	f1a1 03f9 	sub.w	r3, r1, #249	; 0xf9
   d4510:	2b06      	cmp	r3, #6
   d4512:	d80a      	bhi.n	d452a <_Z10co2HandlerPKcS0_+0x116>
                    strip.setPixelColor(i,rclock,gclock,bclock);
   d4514:	4817      	ldr	r0, [pc, #92]	; (d4574 <_Z10co2HandlerPKcS0_+0x160>)
   d4516:	783b      	ldrb	r3, [r7, #0]
   d4518:	7800      	ldrb	r0, [r0, #0]
   d451a:	f898 2000 	ldrb.w	r2, [r8]
   d451e:	9000      	str	r0, [sp, #0]
   d4520:	b289      	uxth	r1, r1
   d4522:	4813      	ldr	r0, [pc, #76]	; (d4570 <_Z10co2HandlerPKcS0_+0x15c>)
   d4524:	f009 fd98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d4528:	e012      	b.n	d4550 <_Z10co2HandlerPKcS0_+0x13c>
                }
                else if(i==248)
   d452a:	29f8      	cmp	r1, #248	; 0xf8
   d452c:	d110      	bne.n	d4550 <_Z10co2HandlerPKcS0_+0x13c>
                {
                    if(TFahr < 33){
   d452e:	f8db 3000 	ldr.w	r3, [fp]
   d4532:	4810      	ldr	r0, [pc, #64]	; (d4574 <_Z10co2HandlerPKcS0_+0x160>)
   d4534:	2b20      	cmp	r3, #32
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d4536:	bfd6      	itet	le
   d4538:	7802      	ldrble	r2, [r0, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d453a:	7800      	ldrbgt	r0, [r0, #0]
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d453c:	f898 0000 	ldrble.w	r0, [r8]
   d4540:	783b      	ldrb	r3, [r7, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d4542:	bfc8      	it	gt
   d4544:	f898 2000 	ldrbgt.w	r2, [r8]
   d4548:	9000      	str	r0, [sp, #0]
   d454a:	4809      	ldr	r0, [pc, #36]	; (d4570 <_Z10co2HandlerPKcS0_+0x15c>)
   d454c:	f009 fd84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d4550:	6823      	ldr	r3, [r4, #0]
   d4552:	3301      	adds	r3, #1
   d4554:	6023      	str	r3, [r4, #0]
   d4556:	e7b3      	b.n	d44c0 <_Z10co2HandlerPKcS0_+0xac>
                }
            }
            strip.show();
        }
    }
}
   d4558:	b005      	add	sp, #20
   d455a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d455e:	bf00      	nop
   d4560:	2003e310 	.word	0x2003e310
   d4564:	2003e304 	.word	0x2003e304
   d4568:	2003e33c 	.word	0x2003e33c
   d456c:	2003e314 	.word	0x2003e314
   d4570:	2003e328 	.word	0x2003e328
   d4574:	2003e35c 	.word	0x2003e35c
   d4578:	2003e358 	.word	0x2003e358
   d457c:	2003e354 	.word	0x2003e354
   d4580:	2003e350 	.word	0x2003e350

000d4584 <_ZN11EEPROMClass5writeEih.isra.11>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4584:	f009 be66 	b.w	de254 <HAL_EEPROM_Write>

000d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4588:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d458a:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d458e:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4590:	f88d 3000 	strb.w	r3, [sp]
   d4594:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d4596:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d4598:	f00b f860 	bl	df65c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d459c:	4628      	mov	r0, r5
   d459e:	b003      	add	sp, #12
   d45a0:	bd30      	pop	{r4, r5, pc}
	...

000d45a4 <_Z3numiiiii>:
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
    delay(50);
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d45a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d45a8:	b085      	sub	sp, #20
   d45aa:	461e      	mov	r6, r3
if(num == 1)
   d45ac:	2801      	cmp	r0, #1
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
    delay(50);
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d45ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d45b0:	9303      	str	r3, [sp, #12]
   d45b2:	460c      	mov	r4, r1
   d45b4:	4615      	mov	r5, r2
if(num == 1)
   d45b6:	f040 819b 	bne.w	d48f0 <_Z3numiiiii+0x34c>
{
    if((pix/8)%2 == 1)
   d45ba:	4bcb      	ldr	r3, [pc, #812]	; (d48e8 <_Z3numiiiii+0x344>)
   d45bc:	2708      	movs	r7, #8
   d45be:	fb91 f7f7 	sdiv	r7, r1, r7
   d45c2:	403b      	ands	r3, r7
   d45c4:	2b00      	cmp	r3, #0
   d45c6:	bfbe      	ittt	lt
   d45c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d45cc:	f063 0301 	ornlt	r3, r3, #1
   d45d0:	3301      	addlt	r3, #1
   d45d2:	2b01      	cmp	r3, #1
   d45d4:	f040 80d0 	bne.w	d4778 <_Z3numiiiii+0x1d4>
    {
        strip.setPixelColor(pix+23,R,G,B);
   d45d8:	fa1f f881 	uxth.w	r8, r1
   d45dc:	fa5f f982 	uxtb.w	r9, r2
   d45e0:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d45e4:	48c1      	ldr	r0, [pc, #772]	; (d48ec <_Z3numiiiii+0x348>)
   d45e6:	f8cd b000 	str.w	fp, [sp]
   d45ea:	fa5f fa86 	uxtb.w	sl, r6
   d45ee:	f108 0117 	add.w	r1, r8, #23
   d45f2:	464a      	mov	r2, r9
   d45f4:	4653      	mov	r3, sl
   d45f6:	b289      	uxth	r1, r1
   d45f8:	f009 fd2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d45fc:	f108 0111 	add.w	r1, r8, #17
   d4600:	464a      	mov	r2, r9
   d4602:	4653      	mov	r3, sl
   d4604:	b289      	uxth	r1, r1
   d4606:	48b9      	ldr	r0, [pc, #740]	; (d48ec <_Z3numiiiii+0x348>)
   d4608:	f8cd b000 	str.w	fp, [sp]
   d460c:	f009 fd24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4610:	f108 0112 	add.w	r1, r8, #18
   d4614:	464a      	mov	r2, r9
   d4616:	4653      	mov	r3, sl
   d4618:	b289      	uxth	r1, r1
   d461a:	48b4      	ldr	r0, [pc, #720]	; (d48ec <_Z3numiiiii+0x348>)
   d461c:	f8cd b000 	str.w	fp, [sp]
   d4620:	f009 fd1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4624:	f108 0113 	add.w	r1, r8, #19
   d4628:	464a      	mov	r2, r9
   d462a:	4653      	mov	r3, sl
   d462c:	b289      	uxth	r1, r1
   d462e:	48af      	ldr	r0, [pc, #700]	; (d48ec <_Z3numiiiii+0x348>)
   d4630:	f8cd b000 	str.w	fp, [sp]
   d4634:	f009 fd10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4638:	f108 0114 	add.w	r1, r8, #20
   d463c:	464a      	mov	r2, r9
   d463e:	4653      	mov	r3, sl
   d4640:	b289      	uxth	r1, r1
   d4642:	48aa      	ldr	r0, [pc, #680]	; (d48ec <_Z3numiiiii+0x348>)
   d4644:	f8cd b000 	str.w	fp, [sp]
   d4648:	f009 fd06 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d464c:	f108 0115 	add.w	r1, r8, #21
   d4650:	464a      	mov	r2, r9
   d4652:	4653      	mov	r3, sl
   d4654:	b289      	uxth	r1, r1
   d4656:	48a5      	ldr	r0, [pc, #660]	; (d48ec <_Z3numiiiii+0x348>)
   d4658:	f8cd b000 	str.w	fp, [sp]
   d465c:	f009 fcfc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4660:	f108 0116 	add.w	r1, r8, #22
   d4664:	464a      	mov	r2, r9
   d4666:	4653      	mov	r3, sl
        
        strip.setPixelColor(pix,0,0,0);
   d4668:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
   d466c:	b289      	uxth	r1, r1
   d466e:	489f      	ldr	r0, [pc, #636]	; (d48ec <_Z3numiiiii+0x348>)
   d4670:	f8cd b000 	str.w	fp, [sp]
   d4674:	f009 fcf0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d4678:	464b      	mov	r3, r9
   d467a:	464a      	mov	r2, r9
   d467c:	4641      	mov	r1, r8
   d467e:	489b      	ldr	r0, [pc, #620]	; (d48ec <_Z3numiiiii+0x348>)
   d4680:	f8cd 9000 	str.w	r9, [sp]
   d4684:	f009 fce8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d4688:	f108 0101 	add.w	r1, r8, #1
   d468c:	464b      	mov	r3, r9
   d468e:	464a      	mov	r2, r9
   d4690:	b289      	uxth	r1, r1
   d4692:	4896      	ldr	r0, [pc, #600]	; (d48ec <_Z3numiiiii+0x348>)
   d4694:	f8cd 9000 	str.w	r9, [sp]
   d4698:	f009 fcde 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d469c:	f108 0110 	add.w	r1, r8, #16
   d46a0:	464b      	mov	r3, r9
   d46a2:	464a      	mov	r2, r9
   d46a4:	b289      	uxth	r1, r1
   d46a6:	4891      	ldr	r0, [pc, #580]	; (d48ec <_Z3numiiiii+0x348>)
   d46a8:	f8cd 9000 	str.w	r9, [sp]
   d46ac:	f009 fcd4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,0,0,0);
   d46b0:	f108 31ff 	add.w	r1, r8, #4294967295
   d46b4:	464b      	mov	r3, r9
   d46b6:	464a      	mov	r2, r9
   d46b8:	b289      	uxth	r1, r1
   d46ba:	488c      	ldr	r0, [pc, #560]	; (d48ec <_Z3numiiiii+0x348>)
   d46bc:	f8cd 9000 	str.w	r9, [sp]
   d46c0:	f009 fcca 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d46c4:	f1a8 0102 	sub.w	r1, r8, #2
   d46c8:	464b      	mov	r3, r9
   d46ca:	464a      	mov	r2, r9
   d46cc:	b289      	uxth	r1, r1
   d46ce:	4887      	ldr	r0, [pc, #540]	; (d48ec <_Z3numiiiii+0x348>)
   d46d0:	f8cd 9000 	str.w	r9, [sp]
   d46d4:	f009 fcc0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d46d8:	f1a8 0103 	sub.w	r1, r8, #3
   d46dc:	464b      	mov	r3, r9
   d46de:	464a      	mov	r2, r9
   d46e0:	b289      	uxth	r1, r1
   d46e2:	4882      	ldr	r0, [pc, #520]	; (d48ec <_Z3numiiiii+0x348>)
   d46e4:	f8cd 9000 	str.w	r9, [sp]
   d46e8:	f009 fcb6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d46ec:	f1a8 0104 	sub.w	r1, r8, #4
   d46f0:	464b      	mov	r3, r9
   d46f2:	464a      	mov	r2, r9
   d46f4:	b289      	uxth	r1, r1
   d46f6:	487d      	ldr	r0, [pc, #500]	; (d48ec <_Z3numiiiii+0x348>)
   d46f8:	f8cd 9000 	str.w	r9, [sp]
   d46fc:	f009 fcac 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4700:	f1a8 0105 	sub.w	r1, r8, #5
   d4704:	464b      	mov	r3, r9
   d4706:	464a      	mov	r2, r9
   d4708:	b289      	uxth	r1, r1
   d470a:	4878      	ldr	r0, [pc, #480]	; (d48ec <_Z3numiiiii+0x348>)
   d470c:	f8cd 9000 	str.w	r9, [sp]
   d4710:	f009 fca2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d4714:	f1a8 0106 	sub.w	r1, r8, #6
   d4718:	464b      	mov	r3, r9
   d471a:	464a      	mov	r2, r9
   d471c:	b289      	uxth	r1, r1
   d471e:	4873      	ldr	r0, [pc, #460]	; (d48ec <_Z3numiiiii+0x348>)
   d4720:	f8cd 9000 	str.w	r9, [sp]
   d4724:	f009 fc98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d4728:	f108 0107 	add.w	r1, r8, #7
   d472c:	464b      	mov	r3, r9
   d472e:	464a      	mov	r2, r9
   d4730:	b289      	uxth	r1, r1
   d4732:	486e      	ldr	r0, [pc, #440]	; (d48ec <_Z3numiiiii+0x348>)
   d4734:	f8cd 9000 	str.w	r9, [sp]
   d4738:	f009 fc8e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d473c:	f108 010a 	add.w	r1, r8, #10
   d4740:	464b      	mov	r3, r9
   d4742:	464a      	mov	r2, r9
   d4744:	b289      	uxth	r1, r1
   d4746:	4869      	ldr	r0, [pc, #420]	; (d48ec <_Z3numiiiii+0x348>)
   d4748:	f8cd 9000 	str.w	r9, [sp]
   d474c:	f009 fc84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4750:	f108 0104 	add.w	r1, r8, #4
   d4754:	464b      	mov	r3, r9
   d4756:	464a      	mov	r2, r9
   d4758:	b289      	uxth	r1, r1
   d475a:	4864      	ldr	r0, [pc, #400]	; (d48ec <_Z3numiiiii+0x348>)
   d475c:	f8cd 9000 	str.w	r9, [sp]
   d4760:	f009 fc7a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d4764:	f108 010d 	add.w	r1, r8, #13
   d4768:	f8cd 9000 	str.w	r9, [sp]
   d476c:	464b      	mov	r3, r9
   d476e:	464a      	mov	r2, r9
   d4770:	b289      	uxth	r1, r1
   d4772:	485e      	ldr	r0, [pc, #376]	; (d48ec <_Z3numiiiii+0x348>)
   d4774:	f009 fc70 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4778:	f017 0701 	ands.w	r7, r7, #1
   d477c:	f041 873e 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix+25,R,G,B);
   d4780:	b2a4      	uxth	r4, r4
   d4782:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4786:	4859      	ldr	r0, [pc, #356]	; (d48ec <_Z3numiiiii+0x348>)
   d4788:	f8cd 8000 	str.w	r8, [sp]
   d478c:	b2ed      	uxtb	r5, r5
   d478e:	b2f6      	uxtb	r6, r6
   d4790:	f104 0119 	add.w	r1, r4, #25
   d4794:	4633      	mov	r3, r6
   d4796:	462a      	mov	r2, r5
   d4798:	b289      	uxth	r1, r1
   d479a:	f009 fc5d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d479e:	f104 011a 	add.w	r1, r4, #26
   d47a2:	4633      	mov	r3, r6
   d47a4:	462a      	mov	r2, r5
   d47a6:	b289      	uxth	r1, r1
   d47a8:	4850      	ldr	r0, [pc, #320]	; (d48ec <_Z3numiiiii+0x348>)
   d47aa:	f8cd 8000 	str.w	r8, [sp]
   d47ae:	f009 fc53 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d47b2:	f104 011b 	add.w	r1, r4, #27
   d47b6:	4633      	mov	r3, r6
   d47b8:	462a      	mov	r2, r5
   d47ba:	b289      	uxth	r1, r1
   d47bc:	484b      	ldr	r0, [pc, #300]	; (d48ec <_Z3numiiiii+0x348>)
   d47be:	f8cd 8000 	str.w	r8, [sp]
   d47c2:	f009 fc49 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d47c6:	f104 011c 	add.w	r1, r4, #28
   d47ca:	4633      	mov	r3, r6
   d47cc:	462a      	mov	r2, r5
   d47ce:	b289      	uxth	r1, r1
   d47d0:	4846      	ldr	r0, [pc, #280]	; (d48ec <_Z3numiiiii+0x348>)
   d47d2:	f8cd 8000 	str.w	r8, [sp]
   d47d6:	f009 fc3f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d47da:	f104 011d 	add.w	r1, r4, #29
   d47de:	4633      	mov	r3, r6
   d47e0:	462a      	mov	r2, r5
   d47e2:	b289      	uxth	r1, r1
   d47e4:	4841      	ldr	r0, [pc, #260]	; (d48ec <_Z3numiiiii+0x348>)
   d47e6:	f8cd 8000 	str.w	r8, [sp]
   d47ea:	f009 fc35 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d47ee:	f104 011e 	add.w	r1, r4, #30
   d47f2:	4633      	mov	r3, r6
   d47f4:	462a      	mov	r2, r5
   d47f6:	b289      	uxth	r1, r1
   d47f8:	483c      	ldr	r0, [pc, #240]	; (d48ec <_Z3numiiiii+0x348>)
   d47fa:	f8cd 8000 	str.w	r8, [sp]
   d47fe:	f009 fc2b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4802:	f104 011f 	add.w	r1, r4, #31
   d4806:	4633      	mov	r3, r6
   d4808:	462a      	mov	r2, r5
   d480a:	b289      	uxth	r1, r1
   d480c:	4837      	ldr	r0, [pc, #220]	; (d48ec <_Z3numiiiii+0x348>)
   d480e:	f8cd 8000 	str.w	r8, [sp]
   d4812:	f009 fc21 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d4816:	463b      	mov	r3, r7
   d4818:	463a      	mov	r2, r7
   d481a:	4621      	mov	r1, r4
   d481c:	4833      	ldr	r0, [pc, #204]	; (d48ec <_Z3numiiiii+0x348>)
   d481e:	9700      	str	r7, [sp, #0]
   d4820:	f009 fc1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d4824:	1c61      	adds	r1, r4, #1
   d4826:	463b      	mov	r3, r7
   d4828:	463a      	mov	r2, r7
   d482a:	b289      	uxth	r1, r1
   d482c:	482f      	ldr	r0, [pc, #188]	; (d48ec <_Z3numiiiii+0x348>)
   d482e:	9700      	str	r7, [sp, #0]
   d4830:	f009 fc12 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4834:	1ca1      	adds	r1, r4, #2
   d4836:	463b      	mov	r3, r7
   d4838:	463a      	mov	r2, r7
   d483a:	b289      	uxth	r1, r1
   d483c:	482b      	ldr	r0, [pc, #172]	; (d48ec <_Z3numiiiii+0x348>)
   d483e:	9700      	str	r7, [sp, #0]
   d4840:	f009 fc0a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d4844:	1ce1      	adds	r1, r4, #3
   d4846:	463b      	mov	r3, r7
   d4848:	463a      	mov	r2, r7
   d484a:	b289      	uxth	r1, r1
   d484c:	4827      	ldr	r0, [pc, #156]	; (d48ec <_Z3numiiiii+0x348>)
   d484e:	9700      	str	r7, [sp, #0]
   d4850:	f009 fc02 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4854:	1d21      	adds	r1, r4, #4
   d4856:	463b      	mov	r3, r7
   d4858:	463a      	mov	r2, r7
   d485a:	b289      	uxth	r1, r1
   d485c:	4823      	ldr	r0, [pc, #140]	; (d48ec <_Z3numiiiii+0x348>)
   d485e:	9700      	str	r7, [sp, #0]
   d4860:	f009 fbfa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d4864:	1d61      	adds	r1, r4, #5
   d4866:	463b      	mov	r3, r7
   d4868:	463a      	mov	r2, r7
   d486a:	b289      	uxth	r1, r1
   d486c:	481f      	ldr	r0, [pc, #124]	; (d48ec <_Z3numiiiii+0x348>)
   d486e:	9700      	str	r7, [sp, #0]
   d4870:	f009 fbf2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d4874:	1da1      	adds	r1, r4, #6
   d4876:	463b      	mov	r3, r7
   d4878:	463a      	mov	r2, r7
   d487a:	b289      	uxth	r1, r1
   d487c:	481b      	ldr	r0, [pc, #108]	; (d48ec <_Z3numiiiii+0x348>)
   d487e:	9700      	str	r7, [sp, #0]
   d4880:	f009 fbea 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d4884:	f104 0109 	add.w	r1, r4, #9
   d4888:	463b      	mov	r3, r7
   d488a:	463a      	mov	r2, r7
   d488c:	b289      	uxth	r1, r1
   d488e:	4817      	ldr	r0, [pc, #92]	; (d48ec <_Z3numiiiii+0x348>)
   d4890:	9700      	str	r7, [sp, #0]
   d4892:	f009 fbe1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d4896:	f104 0116 	add.w	r1, r4, #22
   d489a:	463b      	mov	r3, r7
   d489c:	463a      	mov	r2, r7
   d489e:	b289      	uxth	r1, r1
   d48a0:	4812      	ldr	r0, [pc, #72]	; (d48ec <_Z3numiiiii+0x348>)
   d48a2:	9700      	str	r7, [sp, #0]
   d48a4:	f009 fbd8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d48a8:	f104 010f 	add.w	r1, r4, #15
   d48ac:	463b      	mov	r3, r7
   d48ae:	463a      	mov	r2, r7
   d48b0:	b289      	uxth	r1, r1
   d48b2:	480e      	ldr	r0, [pc, #56]	; (d48ec <_Z3numiiiii+0x348>)
   d48b4:	9700      	str	r7, [sp, #0]
   d48b6:	f009 fbcf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d48ba:	f104 0110 	add.w	r1, r4, #16
   d48be:	463b      	mov	r3, r7
   d48c0:	463a      	mov	r2, r7
   d48c2:	b289      	uxth	r1, r1
   d48c4:	4809      	ldr	r0, [pc, #36]	; (d48ec <_Z3numiiiii+0x348>)
   d48c6:	9700      	str	r7, [sp, #0]
   d48c8:	f009 fbc6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,0,0,0);
   d48cc:	f104 010c 	add.w	r1, r4, #12
   d48d0:	b289      	uxth	r1, r1
   d48d2:	9700      	str	r7, [sp, #0]
   d48d4:	463b      	mov	r3, r7
   d48d6:	463a      	mov	r2, r7
   d48d8:	4804      	ldr	r0, [pc, #16]	; (d48ec <_Z3numiiiii+0x348>)
   d48da:	f009 fbbd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d48de:	f104 0113 	add.w	r1, r4, #19
   d48e2:	f000 bce3 	b.w	d52ac <_Z3numiiiii+0xd08>
   d48e6:	bf00      	nop
   d48e8:	80000001 	.word	0x80000001
   d48ec:	2003e328 	.word	0x2003e328
    }
}
if(num == 2)
   d48f0:	2802      	cmp	r0, #2
   d48f2:	f040 819b 	bne.w	d4c2c <_Z3numiiiii+0x688>
{
    if((pix/8)%2 == 1)
   d48f6:	4bcb      	ldr	r3, [pc, #812]	; (d4c24 <_Z3numiiiii+0x680>)
   d48f8:	f04f 0a08 	mov.w	sl, #8
   d48fc:	fb91 fafa 	sdiv	sl, r1, sl
   d4900:	ea0a 0303 	and.w	r3, sl, r3
   d4904:	2b00      	cmp	r3, #0
   d4906:	bfbe      	ittt	lt
   d4908:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d490c:	f063 0301 	ornlt	r3, r3, #1
   d4910:	3301      	addlt	r3, #1
   d4912:	2b01      	cmp	r3, #1
   d4914:	f040 80c6 	bne.w	d4aa4 <_Z3numiiiii+0x500>
    {
        strip.setPixelColor(pix,R,G,B);
   d4918:	b28f      	uxth	r7, r1
   d491a:	fa5f f882 	uxtb.w	r8, r2
   d491e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4922:	48c1      	ldr	r0, [pc, #772]	; (d4c28 <_Z3numiiiii+0x684>)
   d4924:	f8cd b000 	str.w	fp, [sp]
   d4928:	fa5f f986 	uxtb.w	r9, r6
   d492c:	4642      	mov	r2, r8
   d492e:	464b      	mov	r3, r9
   d4930:	4639      	mov	r1, r7
   d4932:	f009 fb91 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4936:	1c79      	adds	r1, r7, #1
   d4938:	4642      	mov	r2, r8
   d493a:	464b      	mov	r3, r9
   d493c:	b289      	uxth	r1, r1
   d493e:	48ba      	ldr	r0, [pc, #744]	; (d4c28 <_Z3numiiiii+0x684>)
   d4940:	f8cd b000 	str.w	fp, [sp]
   d4944:	f009 fb88 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4948:	f107 0110 	add.w	r1, r7, #16
   d494c:	4642      	mov	r2, r8
   d494e:	464b      	mov	r3, r9
   d4950:	b289      	uxth	r1, r1
   d4952:	48b5      	ldr	r0, [pc, #724]	; (d4c28 <_Z3numiiiii+0x684>)
   d4954:	f8cd b000 	str.w	fp, [sp]
   d4958:	f009 fb7e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d495c:	f107 0111 	add.w	r1, r7, #17
   d4960:	4642      	mov	r2, r8
   d4962:	464b      	mov	r3, r9
   d4964:	b289      	uxth	r1, r1
   d4966:	48b0      	ldr	r0, [pc, #704]	; (d4c28 <_Z3numiiiii+0x684>)
   d4968:	f8cd b000 	str.w	fp, [sp]
   d496c:	f009 fb74 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4970:	f107 0112 	add.w	r1, r7, #18
   d4974:	4642      	mov	r2, r8
   d4976:	464b      	mov	r3, r9
   d4978:	b289      	uxth	r1, r1
   d497a:	48ab      	ldr	r0, [pc, #684]	; (d4c28 <_Z3numiiiii+0x684>)
   d497c:	f8cd b000 	str.w	fp, [sp]
   d4980:	f009 fb6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4984:	f107 0113 	add.w	r1, r7, #19
   d4988:	4642      	mov	r2, r8
   d498a:	464b      	mov	r3, r9
   d498c:	b289      	uxth	r1, r1
   d498e:	48a6      	ldr	r0, [pc, #664]	; (d4c28 <_Z3numiiiii+0x684>)
   d4990:	f8cd b000 	str.w	fp, [sp]
   d4994:	f009 fb60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4998:	f107 0114 	add.w	r1, r7, #20
   d499c:	4642      	mov	r2, r8
   d499e:	464b      	mov	r3, r9
   d49a0:	b289      	uxth	r1, r1
   d49a2:	48a1      	ldr	r0, [pc, #644]	; (d4c28 <_Z3numiiiii+0x684>)
   d49a4:	f8cd b000 	str.w	fp, [sp]
   d49a8:	f009 fb56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d49ac:	f107 010d 	add.w	r1, r7, #13
   d49b0:	4642      	mov	r2, r8
   d49b2:	464b      	mov	r3, r9
   d49b4:	b289      	uxth	r1, r1
   d49b6:	489c      	ldr	r0, [pc, #624]	; (d4c28 <_Z3numiiiii+0x684>)
   d49b8:	f8cd b000 	str.w	fp, [sp]
   d49bc:	f009 fb4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d49c0:	1d39      	adds	r1, r7, #4
   d49c2:	4642      	mov	r2, r8
   d49c4:	464b      	mov	r3, r9
   d49c6:	b289      	uxth	r1, r1
   d49c8:	4897      	ldr	r0, [pc, #604]	; (d4c28 <_Z3numiiiii+0x684>)
   d49ca:	f8cd b000 	str.w	fp, [sp]
   d49ce:	f009 fb43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d49d2:	1ef9      	subs	r1, r7, #3
   d49d4:	4642      	mov	r2, r8
   d49d6:	464b      	mov	r3, r9
   d49d8:	b289      	uxth	r1, r1
   d49da:	4893      	ldr	r0, [pc, #588]	; (d4c28 <_Z3numiiiii+0x684>)
   d49dc:	f8cd b000 	str.w	fp, [sp]
   d49e0:	f009 fb3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d49e4:	1f39      	subs	r1, r7, #4
   d49e6:	4642      	mov	r2, r8
   d49e8:	464b      	mov	r3, r9
   d49ea:	b289      	uxth	r1, r1
   d49ec:	488e      	ldr	r0, [pc, #568]	; (d4c28 <_Z3numiiiii+0x684>)
   d49ee:	f8cd b000 	str.w	fp, [sp]
   d49f2:	f009 fb31 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d49f6:	1f79      	subs	r1, r7, #5
   d49f8:	4642      	mov	r2, r8
   d49fa:	464b      	mov	r3, r9
   d49fc:	b289      	uxth	r1, r1
   d49fe:	488a      	ldr	r0, [pc, #552]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a00:	f8cd b000 	str.w	fp, [sp]
   d4a04:	f009 fb28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4a08:	1fb9      	subs	r1, r7, #6
   d4a0a:	4642      	mov	r2, r8
   d4a0c:	464b      	mov	r3, r9
   d4a0e:	b289      	uxth	r1, r1
   d4a10:	4885      	ldr	r0, [pc, #532]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a12:	f8cd b000 	str.w	fp, [sp]
   d4a16:	f009 fb1f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d4a1a:	1df9      	adds	r1, r7, #7
   d4a1c:	4642      	mov	r2, r8
   d4a1e:	464b      	mov	r3, r9
   d4a20:	b289      	uxth	r1, r1
   d4a22:	4881      	ldr	r0, [pc, #516]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a24:	f8cd b000 	str.w	fp, [sp]
   d4a28:	f009 fb16 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d4a2c:	f107 010a 	add.w	r1, r7, #10
   d4a30:	4642      	mov	r2, r8
   d4a32:	464b      	mov	r3, r9
   d4a34:	b289      	uxth	r1, r1
   d4a36:	487c      	ldr	r0, [pc, #496]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a38:	f8cd b000 	str.w	fp, [sp]
   d4a3c:	f009 fb0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4a40:	f107 0117 	add.w	r1, r7, #23
   d4a44:	4642      	mov	r2, r8
   d4a46:	464b      	mov	r3, r9
   d4a48:	b289      	uxth	r1, r1
   d4a4a:	4877      	ldr	r0, [pc, #476]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a4c:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4a50:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix-4,R,G,B);
        strip.setPixelColor(pix-5,R,G,B);
        strip.setPixelColor(pix-6,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d4a54:	f009 fb00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4a58:	1e79      	subs	r1, r7, #1
   d4a5a:	4643      	mov	r3, r8
   d4a5c:	4642      	mov	r2, r8
   d4a5e:	b289      	uxth	r1, r1
   d4a60:	4871      	ldr	r0, [pc, #452]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a62:	f8cd 8000 	str.w	r8, [sp]
   d4a66:	f009 faf7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d4a6a:	1eb9      	subs	r1, r7, #2
   d4a6c:	4643      	mov	r3, r8
   d4a6e:	4642      	mov	r2, r8
   d4a70:	b289      	uxth	r1, r1
   d4a72:	486d      	ldr	r0, [pc, #436]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a74:	f8cd 8000 	str.w	r8, [sp]
   d4a78:	f009 faee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d4a7c:	f107 0116 	add.w	r1, r7, #22
   d4a80:	4643      	mov	r3, r8
   d4a82:	4642      	mov	r2, r8
   d4a84:	b289      	uxth	r1, r1
   d4a86:	4868      	ldr	r0, [pc, #416]	; (d4c28 <_Z3numiiiii+0x684>)
   d4a88:	f8cd 8000 	str.w	r8, [sp]
   d4a8c:	f009 fae4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,0,0,0);
   d4a90:	f107 0115 	add.w	r1, r7, #21
   d4a94:	f8cd 8000 	str.w	r8, [sp]
   d4a98:	4643      	mov	r3, r8
   d4a9a:	4642      	mov	r2, r8
   d4a9c:	b289      	uxth	r1, r1
   d4a9e:	4862      	ldr	r0, [pc, #392]	; (d4c28 <_Z3numiiiii+0x684>)
   d4aa0:	f009 fada 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4aa4:	f01a 0701 	ands.w	r7, sl, #1
   d4aa8:	f041 85a8 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4aac:	b2a4      	uxth	r4, r4
   d4aae:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4ab2:	485d      	ldr	r0, [pc, #372]	; (d4c28 <_Z3numiiiii+0x684>)
   d4ab4:	f8cd 8000 	str.w	r8, [sp]
   d4ab8:	b2ed      	uxtb	r5, r5
   d4aba:	b2f6      	uxtb	r6, r6
   d4abc:	4633      	mov	r3, r6
   d4abe:	462a      	mov	r2, r5
   d4ac0:	4621      	mov	r1, r4
   d4ac2:	f009 fac9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d4ac6:	f104 010f 	add.w	r1, r4, #15
   d4aca:	4633      	mov	r3, r6
   d4acc:	462a      	mov	r2, r5
   d4ace:	b289      	uxth	r1, r1
   d4ad0:	4855      	ldr	r0, [pc, #340]	; (d4c28 <_Z3numiiiii+0x684>)
   d4ad2:	f8cd 8000 	str.w	r8, [sp]
   d4ad6:	f009 fabf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4ada:	f104 0110 	add.w	r1, r4, #16
   d4ade:	4633      	mov	r3, r6
   d4ae0:	462a      	mov	r2, r5
   d4ae2:	b289      	uxth	r1, r1
   d4ae4:	4850      	ldr	r0, [pc, #320]	; (d4c28 <_Z3numiiiii+0x684>)
   d4ae6:	f8cd 8000 	str.w	r8, [sp]
   d4aea:	f009 fab5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4aee:	1ce1      	adds	r1, r4, #3
   d4af0:	4633      	mov	r3, r6
   d4af2:	462a      	mov	r2, r5
   d4af4:	b289      	uxth	r1, r1
   d4af6:	484c      	ldr	r0, [pc, #304]	; (d4c28 <_Z3numiiiii+0x684>)
   d4af8:	f8cd 8000 	str.w	r8, [sp]
   d4afc:	f009 faac 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4b00:	1d21      	adds	r1, r4, #4
   d4b02:	4633      	mov	r3, r6
   d4b04:	462a      	mov	r2, r5
   d4b06:	b289      	uxth	r1, r1
   d4b08:	4847      	ldr	r0, [pc, #284]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b0a:	f8cd 8000 	str.w	r8, [sp]
   d4b0e:	f009 faa3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d4b12:	1d61      	adds	r1, r4, #5
   d4b14:	4633      	mov	r3, r6
   d4b16:	462a      	mov	r2, r5
   d4b18:	b289      	uxth	r1, r1
   d4b1a:	4843      	ldr	r0, [pc, #268]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b1c:	f8cd 8000 	str.w	r8, [sp]
   d4b20:	f009 fa9a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4b24:	1da1      	adds	r1, r4, #6
   d4b26:	4633      	mov	r3, r6
   d4b28:	462a      	mov	r2, r5
   d4b2a:	b289      	uxth	r1, r1
   d4b2c:	483e      	ldr	r0, [pc, #248]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b2e:	f8cd 8000 	str.w	r8, [sp]
   d4b32:	f009 fa91 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4b36:	f104 011f 	add.w	r1, r4, #31
   d4b3a:	4633      	mov	r3, r6
   d4b3c:	462a      	mov	r2, r5
   d4b3e:	b289      	uxth	r1, r1
   d4b40:	4839      	ldr	r0, [pc, #228]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b42:	f8cd 8000 	str.w	r8, [sp]
   d4b46:	f009 fa87 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d4b4a:	f104 011e 	add.w	r1, r4, #30
   d4b4e:	4633      	mov	r3, r6
   d4b50:	462a      	mov	r2, r5
   d4b52:	b289      	uxth	r1, r1
   d4b54:	4834      	ldr	r0, [pc, #208]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b56:	f8cd 8000 	str.w	r8, [sp]
   d4b5a:	f009 fa7d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d4b5e:	f104 011d 	add.w	r1, r4, #29
   d4b62:	4633      	mov	r3, r6
   d4b64:	462a      	mov	r2, r5
   d4b66:	b289      	uxth	r1, r1
   d4b68:	482f      	ldr	r0, [pc, #188]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b6a:	f8cd 8000 	str.w	r8, [sp]
   d4b6e:	f009 fa73 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d4b72:	f104 011c 	add.w	r1, r4, #28
   d4b76:	4633      	mov	r3, r6
   d4b78:	462a      	mov	r2, r5
   d4b7a:	b289      	uxth	r1, r1
   d4b7c:	482a      	ldr	r0, [pc, #168]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b7e:	f8cd 8000 	str.w	r8, [sp]
   d4b82:	f009 fa69 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4b86:	f104 010c 	add.w	r1, r4, #12
   d4b8a:	4633      	mov	r3, r6
   d4b8c:	462a      	mov	r2, r5
   d4b8e:	b289      	uxth	r1, r1
   d4b90:	4825      	ldr	r0, [pc, #148]	; (d4c28 <_Z3numiiiii+0x684>)
   d4b92:	f8cd 8000 	str.w	r8, [sp]
   d4b96:	f009 fa5f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4b9a:	f104 0113 	add.w	r1, r4, #19
   d4b9e:	4633      	mov	r3, r6
   d4ba0:	462a      	mov	r2, r5
   d4ba2:	b289      	uxth	r1, r1
   d4ba4:	4820      	ldr	r0, [pc, #128]	; (d4c28 <_Z3numiiiii+0x684>)
   d4ba6:	f8cd 8000 	str.w	r8, [sp]
   d4baa:	f009 fa55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d4bae:	f104 0109 	add.w	r1, r4, #9
   d4bb2:	4633      	mov	r3, r6
   d4bb4:	462a      	mov	r2, r5
   d4bb6:	b289      	uxth	r1, r1
   d4bb8:	481b      	ldr	r0, [pc, #108]	; (d4c28 <_Z3numiiiii+0x684>)
   d4bba:	f8cd 8000 	str.w	r8, [sp]
   d4bbe:	f009 fa4b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4bc2:	f104 0116 	add.w	r1, r4, #22
   d4bc6:	4633      	mov	r3, r6
   d4bc8:	462a      	mov	r2, r5
   d4bca:	b289      	uxth	r1, r1
   d4bcc:	4816      	ldr	r0, [pc, #88]	; (d4c28 <_Z3numiiiii+0x684>)
   d4bce:	f8cd 8000 	str.w	r8, [sp]
   d4bd2:	f009 fa41 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4bd6:	f104 0119 	add.w	r1, r4, #25
   d4bda:	4633      	mov	r3, r6
   d4bdc:	462a      	mov	r2, r5
   d4bde:	b289      	uxth	r1, r1
   d4be0:	4811      	ldr	r0, [pc, #68]	; (d4c28 <_Z3numiiiii+0x684>)
   d4be2:	f8cd 8000 	str.w	r8, [sp]
   d4be6:	f009 fa37 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4bea:	1c61      	adds	r1, r4, #1
   d4bec:	463b      	mov	r3, r7
   d4bee:	463a      	mov	r2, r7
   d4bf0:	b289      	uxth	r1, r1
   d4bf2:	480d      	ldr	r0, [pc, #52]	; (d4c28 <_Z3numiiiii+0x684>)
   d4bf4:	9700      	str	r7, [sp, #0]
   d4bf6:	f009 fa2f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4bfa:	1ca1      	adds	r1, r4, #2
   d4bfc:	463b      	mov	r3, r7
   d4bfe:	463a      	mov	r2, r7
   d4c00:	b289      	uxth	r1, r1
   d4c02:	4809      	ldr	r0, [pc, #36]	; (d4c28 <_Z3numiiiii+0x684>)
   d4c04:	9700      	str	r7, [sp, #0]
   d4c06:	f009 fa27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,0,0,0);
   d4c0a:	f104 011a 	add.w	r1, r4, #26
   d4c0e:	b289      	uxth	r1, r1
   d4c10:	9700      	str	r7, [sp, #0]
   d4c12:	463b      	mov	r3, r7
   d4c14:	463a      	mov	r2, r7
   d4c16:	4804      	ldr	r0, [pc, #16]	; (d4c28 <_Z3numiiiii+0x684>)
   d4c18:	f009 fa1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,0,0,0);
   d4c1c:	f104 011b 	add.w	r1, r4, #27
   d4c20:	e344      	b.n	d52ac <_Z3numiiiii+0xd08>
   d4c22:	bf00      	nop
   d4c24:	80000001 	.word	0x80000001
   d4c28:	2003e328 	.word	0x2003e328
    }
}
if(num == 3)
   d4c2c:	2803      	cmp	r0, #3
   d4c2e:	f040 819b 	bne.w	d4f68 <_Z3numiiiii+0x9c4>
{
    if((pix/8)%2 == 1)
   d4c32:	4bcb      	ldr	r3, [pc, #812]	; (d4f60 <_Z3numiiiii+0x9bc>)
   d4c34:	f04f 0a08 	mov.w	sl, #8
   d4c38:	fb91 fafa 	sdiv	sl, r1, sl
   d4c3c:	ea0a 0303 	and.w	r3, sl, r3
   d4c40:	2b00      	cmp	r3, #0
   d4c42:	bfbe      	ittt	lt
   d4c44:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4c48:	f063 0301 	ornlt	r3, r3, #1
   d4c4c:	3301      	addlt	r3, #1
   d4c4e:	2b01      	cmp	r3, #1
   d4c50:	f040 80c6 	bne.w	d4de0 <_Z3numiiiii+0x83c>
    {
        strip.setPixelColor(pix,R,G,B);
   d4c54:	b28f      	uxth	r7, r1
   d4c56:	fa5f f882 	uxtb.w	r8, r2
   d4c5a:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4c5e:	48c1      	ldr	r0, [pc, #772]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4c60:	f8cd b000 	str.w	fp, [sp]
   d4c64:	fa5f f986 	uxtb.w	r9, r6
   d4c68:	4642      	mov	r2, r8
   d4c6a:	464b      	mov	r3, r9
   d4c6c:	4639      	mov	r1, r7
   d4c6e:	f009 f9f3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4c72:	1c79      	adds	r1, r7, #1
   d4c74:	4642      	mov	r2, r8
   d4c76:	464b      	mov	r3, r9
   d4c78:	b289      	uxth	r1, r1
   d4c7a:	48ba      	ldr	r0, [pc, #744]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4c7c:	f8cd b000 	str.w	fp, [sp]
   d4c80:	f009 f9ea 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4c84:	f107 0110 	add.w	r1, r7, #16
   d4c88:	4642      	mov	r2, r8
   d4c8a:	464b      	mov	r3, r9
   d4c8c:	b289      	uxth	r1, r1
   d4c8e:	48b5      	ldr	r0, [pc, #724]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4c90:	f8cd b000 	str.w	fp, [sp]
   d4c94:	f009 f9e0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4c98:	f107 0112 	add.w	r1, r7, #18
   d4c9c:	4642      	mov	r2, r8
   d4c9e:	464b      	mov	r3, r9
   d4ca0:	b289      	uxth	r1, r1
   d4ca2:	48b0      	ldr	r0, [pc, #704]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ca4:	f8cd b000 	str.w	fp, [sp]
   d4ca8:	f009 f9d6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4cac:	f107 0113 	add.w	r1, r7, #19
   d4cb0:	4642      	mov	r2, r8
   d4cb2:	464b      	mov	r3, r9
   d4cb4:	b289      	uxth	r1, r1
   d4cb6:	48ab      	ldr	r0, [pc, #684]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4cb8:	f8cd b000 	str.w	fp, [sp]
   d4cbc:	f009 f9cc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d4cc0:	f107 0115 	add.w	r1, r7, #21
   d4cc4:	4642      	mov	r2, r8
   d4cc6:	464b      	mov	r3, r9
   d4cc8:	b289      	uxth	r1, r1
   d4cca:	48a6      	ldr	r0, [pc, #664]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ccc:	f8cd b000 	str.w	fp, [sp]
   d4cd0:	f009 f9c2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4cd4:	f107 0116 	add.w	r1, r7, #22
   d4cd8:	4642      	mov	r2, r8
   d4cda:	464b      	mov	r3, r9
   d4cdc:	b289      	uxth	r1, r1
   d4cde:	48a1      	ldr	r0, [pc, #644]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ce0:	f8cd b000 	str.w	fp, [sp]
   d4ce4:	f009 f9b8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4ce8:	1ef9      	subs	r1, r7, #3
   d4cea:	4642      	mov	r2, r8
   d4cec:	464b      	mov	r3, r9
   d4cee:	b289      	uxth	r1, r1
   d4cf0:	489c      	ldr	r0, [pc, #624]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4cf2:	f8cd b000 	str.w	fp, [sp]
   d4cf6:	f009 f9af 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4cfa:	1fb9      	subs	r1, r7, #6
   d4cfc:	4642      	mov	r2, r8
   d4cfe:	464b      	mov	r3, r9
   d4d00:	b289      	uxth	r1, r1
   d4d02:	4898      	ldr	r0, [pc, #608]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d04:	f8cd b000 	str.w	fp, [sp]
   d4d08:	f009 f9a6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4d0c:	1d39      	adds	r1, r7, #4
   d4d0e:	4642      	mov	r2, r8
   d4d10:	464b      	mov	r3, r9
   d4d12:	b289      	uxth	r1, r1
   d4d14:	4893      	ldr	r0, [pc, #588]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d16:	f8cd b000 	str.w	fp, [sp]
   d4d1a:	f009 f99d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d4d1e:	1df9      	adds	r1, r7, #7
   d4d20:	4642      	mov	r2, r8
   d4d22:	464b      	mov	r3, r9
   d4d24:	b289      	uxth	r1, r1
   d4d26:	488f      	ldr	r0, [pc, #572]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d28:	f8cd b000 	str.w	fp, [sp]
   d4d2c:	f009 f994 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4d30:	f107 010d 	add.w	r1, r7, #13
   d4d34:	4642      	mov	r2, r8
   d4d36:	464b      	mov	r3, r9
   d4d38:	b289      	uxth	r1, r1
   d4d3a:	488a      	ldr	r0, [pc, #552]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d3c:	f8cd b000 	str.w	fp, [sp]
   d4d40:	f009 f98a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d4d44:	f107 010a 	add.w	r1, r7, #10
   d4d48:	4642      	mov	r2, r8
   d4d4a:	464b      	mov	r3, r9
   d4d4c:	b289      	uxth	r1, r1
   d4d4e:	4885      	ldr	r0, [pc, #532]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d50:	f8cd b000 	str.w	fp, [sp]
   d4d54:	f009 f980 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d4d58:	f107 0111 	add.w	r1, r7, #17
   d4d5c:	4642      	mov	r2, r8
   d4d5e:	464b      	mov	r3, r9
   d4d60:	b289      	uxth	r1, r1
   d4d62:	4880      	ldr	r0, [pc, #512]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d64:	f8cd b000 	str.w	fp, [sp]
   d4d68:	f009 f976 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4d6c:	f107 0117 	add.w	r1, r7, #23
   d4d70:	4642      	mov	r2, r8
   d4d72:	464b      	mov	r3, r9
   d4d74:	b289      	uxth	r1, r1
   d4d76:	487b      	ldr	r0, [pc, #492]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d78:	f8cd b000 	str.w	fp, [sp]
   d4d7c:	f009 f96c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4d80:	f107 0114 	add.w	r1, r7, #20
   d4d84:	4642      	mov	r2, r8
   d4d86:	464b      	mov	r3, r9
   d4d88:	b289      	uxth	r1, r1
   d4d8a:	4876      	ldr	r0, [pc, #472]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4d8c:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4d90:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
   d4d94:	f009 f960 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4d98:	1e79      	subs	r1, r7, #1
   d4d9a:	4643      	mov	r3, r8
   d4d9c:	4642      	mov	r2, r8
   d4d9e:	b289      	uxth	r1, r1
   d4da0:	4870      	ldr	r0, [pc, #448]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4da2:	f8cd 8000 	str.w	r8, [sp]
   d4da6:	f009 f957 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d4daa:	1eb9      	subs	r1, r7, #2
   d4dac:	4643      	mov	r3, r8
   d4dae:	4642      	mov	r2, r8
   d4db0:	b289      	uxth	r1, r1
   d4db2:	486c      	ldr	r0, [pc, #432]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4db4:	f8cd 8000 	str.w	r8, [sp]
   d4db8:	f009 f94e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d4dbc:	1f39      	subs	r1, r7, #4
   d4dbe:	4643      	mov	r3, r8
   d4dc0:	4642      	mov	r2, r8
   d4dc2:	b289      	uxth	r1, r1
   d4dc4:	4867      	ldr	r0, [pc, #412]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4dc6:	f8cd 8000 	str.w	r8, [sp]
   d4dca:	f009 f945 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4dce:	1f79      	subs	r1, r7, #5
   d4dd0:	f8cd 8000 	str.w	r8, [sp]
   d4dd4:	4643      	mov	r3, r8
   d4dd6:	4642      	mov	r2, r8
   d4dd8:	b289      	uxth	r1, r1
   d4dda:	4862      	ldr	r0, [pc, #392]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ddc:	f009 f93c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4de0:	f01a 0701 	ands.w	r7, sl, #1
   d4de4:	f041 840a 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4de8:	b2a4      	uxth	r4, r4
   d4dea:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4dee:	485d      	ldr	r0, [pc, #372]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4df0:	f8cd 8000 	str.w	r8, [sp]
   d4df4:	b2ed      	uxtb	r5, r5
   d4df6:	b2f6      	uxtb	r6, r6
   d4df8:	4633      	mov	r3, r6
   d4dfa:	462a      	mov	r2, r5
   d4dfc:	4621      	mov	r1, r4
   d4dfe:	f009 f92b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d4e02:	f104 010f 	add.w	r1, r4, #15
   d4e06:	4633      	mov	r3, r6
   d4e08:	462a      	mov	r2, r5
   d4e0a:	b289      	uxth	r1, r1
   d4e0c:	4855      	ldr	r0, [pc, #340]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e0e:	f8cd 8000 	str.w	r8, [sp]
   d4e12:	f009 f921 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4e16:	f104 0110 	add.w	r1, r4, #16
   d4e1a:	4633      	mov	r3, r6
   d4e1c:	462a      	mov	r2, r5
   d4e1e:	b289      	uxth	r1, r1
   d4e20:	4850      	ldr	r0, [pc, #320]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e22:	f8cd 8000 	str.w	r8, [sp]
   d4e26:	f009 f917 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d4e2a:	f104 011e 	add.w	r1, r4, #30
   d4e2e:	4633      	mov	r3, r6
   d4e30:	462a      	mov	r2, r5
   d4e32:	b289      	uxth	r1, r1
   d4e34:	484b      	ldr	r0, [pc, #300]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e36:	f8cd 8000 	str.w	r8, [sp]
   d4e3a:	f009 f90d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d4e3e:	f104 011d 	add.w	r1, r4, #29
   d4e42:	4633      	mov	r3, r6
   d4e44:	462a      	mov	r2, r5
   d4e46:	b289      	uxth	r1, r1
   d4e48:	4846      	ldr	r0, [pc, #280]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e4a:	f8cd 8000 	str.w	r8, [sp]
   d4e4e:	f009 f903 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4e52:	1ce1      	adds	r1, r4, #3
   d4e54:	4633      	mov	r3, r6
   d4e56:	462a      	mov	r2, r5
   d4e58:	b289      	uxth	r1, r1
   d4e5a:	4842      	ldr	r0, [pc, #264]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e5c:	f8cd 8000 	str.w	r8, [sp]
   d4e60:	f009 f8fa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4e64:	f104 010c 	add.w	r1, r4, #12
   d4e68:	4633      	mov	r3, r6
   d4e6a:	462a      	mov	r2, r5
   d4e6c:	b289      	uxth	r1, r1
   d4e6e:	483d      	ldr	r0, [pc, #244]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e70:	f8cd 8000 	str.w	r8, [sp]
   d4e74:	f009 f8f0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4e78:	f104 0113 	add.w	r1, r4, #19
   d4e7c:	4633      	mov	r3, r6
   d4e7e:	462a      	mov	r2, r5
   d4e80:	b289      	uxth	r1, r1
   d4e82:	4838      	ldr	r0, [pc, #224]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e84:	f8cd 8000 	str.w	r8, [sp]
   d4e88:	f009 f8e6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d4e8c:	f104 011b 	add.w	r1, r4, #27
   d4e90:	4633      	mov	r3, r6
   d4e92:	462a      	mov	r2, r5
   d4e94:	b289      	uxth	r1, r1
   d4e96:	4833      	ldr	r0, [pc, #204]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4e98:	f8cd 8000 	str.w	r8, [sp]
   d4e9c:	f009 f8dc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d4ea0:	f104 011a 	add.w	r1, r4, #26
   d4ea4:	4633      	mov	r3, r6
   d4ea6:	462a      	mov	r2, r5
   d4ea8:	b289      	uxth	r1, r1
   d4eaa:	482e      	ldr	r0, [pc, #184]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4eac:	f8cd 8000 	str.w	r8, [sp]
   d4eb0:	f009 f8d2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4eb4:	1da1      	adds	r1, r4, #6
   d4eb6:	4633      	mov	r3, r6
   d4eb8:	462a      	mov	r2, r5
   d4eba:	b289      	uxth	r1, r1
   d4ebc:	4829      	ldr	r0, [pc, #164]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ebe:	f8cd 8000 	str.w	r8, [sp]
   d4ec2:	f009 f8c9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d4ec6:	f104 0109 	add.w	r1, r4, #9
   d4eca:	4633      	mov	r3, r6
   d4ecc:	462a      	mov	r2, r5
   d4ece:	b289      	uxth	r1, r1
   d4ed0:	4824      	ldr	r0, [pc, #144]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ed2:	f8cd 8000 	str.w	r8, [sp]
   d4ed6:	f009 f8bf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4eda:	f104 0116 	add.w	r1, r4, #22
   d4ede:	4633      	mov	r3, r6
   d4ee0:	462a      	mov	r2, r5
   d4ee2:	b289      	uxth	r1, r1
   d4ee4:	481f      	ldr	r0, [pc, #124]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4ee6:	f8cd 8000 	str.w	r8, [sp]
   d4eea:	f009 f8b5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4eee:	f104 011f 	add.w	r1, r4, #31
   d4ef2:	4633      	mov	r3, r6
   d4ef4:	462a      	mov	r2, r5
   d4ef6:	b289      	uxth	r1, r1
   d4ef8:	481a      	ldr	r0, [pc, #104]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4efa:	f8cd 8000 	str.w	r8, [sp]
   d4efe:	f009 f8ab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4f02:	f104 0119 	add.w	r1, r4, #25
   d4f06:	4633      	mov	r3, r6
   d4f08:	462a      	mov	r2, r5
   d4f0a:	b289      	uxth	r1, r1
   d4f0c:	4815      	ldr	r0, [pc, #84]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4f0e:	f8cd 8000 	str.w	r8, [sp]
   d4f12:	f009 f8a1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d4f16:	f104 011c 	add.w	r1, r4, #28
   d4f1a:	4633      	mov	r3, r6
   d4f1c:	462a      	mov	r2, r5
   d4f1e:	b289      	uxth	r1, r1
   d4f20:	4810      	ldr	r0, [pc, #64]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4f22:	f8cd 8000 	str.w	r8, [sp]
   d4f26:	f009 f897 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4f2a:	1c61      	adds	r1, r4, #1
   d4f2c:	463b      	mov	r3, r7
   d4f2e:	463a      	mov	r2, r7
   d4f30:	b289      	uxth	r1, r1
   d4f32:	480c      	ldr	r0, [pc, #48]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4f34:	9700      	str	r7, [sp, #0]
   d4f36:	f009 f88f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4f3a:	1ca1      	adds	r1, r4, #2
   d4f3c:	463b      	mov	r3, r7
   d4f3e:	463a      	mov	r2, r7
   d4f40:	b289      	uxth	r1, r1
   d4f42:	4808      	ldr	r0, [pc, #32]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4f44:	9700      	str	r7, [sp, #0]
   d4f46:	f009 f887 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4f4a:	1d21      	adds	r1, r4, #4
   d4f4c:	b289      	uxth	r1, r1
   d4f4e:	9700      	str	r7, [sp, #0]
   d4f50:	463b      	mov	r3, r7
   d4f52:	463a      	mov	r2, r7
   d4f54:	4803      	ldr	r0, [pc, #12]	; (d4f64 <_Z3numiiiii+0x9c0>)
   d4f56:	f009 f87f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d4f5a:	1d61      	adds	r1, r4, #5
   d4f5c:	e1a6      	b.n	d52ac <_Z3numiiiii+0xd08>
   d4f5e:	bf00      	nop
   d4f60:	80000001 	.word	0x80000001
   d4f64:	2003e328 	.word	0x2003e328
    }
}
if(num == 4)
   d4f68:	2804      	cmp	r0, #4
   d4f6a:	f040 81a8 	bne.w	d52be <_Z3numiiiii+0xd1a>
{
    if((pix/8)%2 == 1)
   d4f6e:	4bcd      	ldr	r3, [pc, #820]	; (d52a4 <_Z3numiiiii+0xd00>)
   d4f70:	2708      	movs	r7, #8
   d4f72:	fb94 f7f7 	sdiv	r7, r4, r7
   d4f76:	403b      	ands	r3, r7
   d4f78:	2b00      	cmp	r3, #0
   d4f7a:	bfbe      	ittt	lt
   d4f7c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4f80:	f063 0301 	ornlt	r3, r3, #1
   d4f84:	3301      	addlt	r3, #1
   d4f86:	2b01      	cmp	r3, #1
   d4f88:	f040 80d0 	bne.w	d512c <_Z3numiiiii+0xb88>
    {
        strip.setPixelColor(pix,R,G,B);
   d4f8c:	fa1f f884 	uxth.w	r8, r4
   d4f90:	fa5f f985 	uxtb.w	r9, r5
   d4f94:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4f98:	48c3      	ldr	r0, [pc, #780]	; (d52a8 <_Z3numiiiii+0xd04>)
   d4f9a:	f8cd b000 	str.w	fp, [sp]
   d4f9e:	fa5f fa86 	uxtb.w	sl, r6
   d4fa2:	464a      	mov	r2, r9
   d4fa4:	4653      	mov	r3, sl
   d4fa6:	4641      	mov	r1, r8
   d4fa8:	f009 f856 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d4fac:	f108 31ff 	add.w	r1, r8, #4294967295
   d4fb0:	464a      	mov	r2, r9
   d4fb2:	4653      	mov	r3, sl
   d4fb4:	b289      	uxth	r1, r1
   d4fb6:	48bc      	ldr	r0, [pc, #752]	; (d52a8 <_Z3numiiiii+0xd04>)
   d4fb8:	f8cd b000 	str.w	fp, [sp]
   d4fbc:	f009 f84c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d4fc0:	f1a8 0102 	sub.w	r1, r8, #2
   d4fc4:	464a      	mov	r2, r9
   d4fc6:	4653      	mov	r3, sl
   d4fc8:	b289      	uxth	r1, r1
   d4fca:	48b7      	ldr	r0, [pc, #732]	; (d52a8 <_Z3numiiiii+0xd04>)
   d4fcc:	f8cd b000 	str.w	fp, [sp]
   d4fd0:	f009 f842 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4fd4:	f1a8 0103 	sub.w	r1, r8, #3
   d4fd8:	464a      	mov	r2, r9
   d4fda:	4653      	mov	r3, sl
   d4fdc:	b289      	uxth	r1, r1
   d4fde:	48b2      	ldr	r0, [pc, #712]	; (d52a8 <_Z3numiiiii+0xd04>)
   d4fe0:	f8cd b000 	str.w	fp, [sp]
   d4fe4:	f009 f838 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4fe8:	f108 0104 	add.w	r1, r8, #4
   d4fec:	464a      	mov	r2, r9
   d4fee:	4653      	mov	r3, sl
   d4ff0:	b289      	uxth	r1, r1
   d4ff2:	48ad      	ldr	r0, [pc, #692]	; (d52a8 <_Z3numiiiii+0xd04>)
   d4ff4:	f8cd b000 	str.w	fp, [sp]
   d4ff8:	f009 f82e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4ffc:	f108 010d 	add.w	r1, r8, #13
   d5000:	464a      	mov	r2, r9
   d5002:	4653      	mov	r3, sl
   d5004:	b289      	uxth	r1, r1
   d5006:	48a8      	ldr	r0, [pc, #672]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5008:	f8cd b000 	str.w	fp, [sp]
   d500c:	f009 f824 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5010:	f108 0111 	add.w	r1, r8, #17
   d5014:	464a      	mov	r2, r9
   d5016:	4653      	mov	r3, sl
   d5018:	b289      	uxth	r1, r1
   d501a:	48a3      	ldr	r0, [pc, #652]	; (d52a8 <_Z3numiiiii+0xd04>)
   d501c:	f8cd b000 	str.w	fp, [sp]
   d5020:	f009 f81a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5024:	f108 0112 	add.w	r1, r8, #18
   d5028:	464a      	mov	r2, r9
   d502a:	4653      	mov	r3, sl
   d502c:	b289      	uxth	r1, r1
   d502e:	489e      	ldr	r0, [pc, #632]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5030:	f8cd b000 	str.w	fp, [sp]
   d5034:	f009 f810 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5038:	f108 0113 	add.w	r1, r8, #19
   d503c:	464a      	mov	r2, r9
   d503e:	4653      	mov	r3, sl
   d5040:	b289      	uxth	r1, r1
   d5042:	4899      	ldr	r0, [pc, #612]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5044:	f8cd b000 	str.w	fp, [sp]
   d5048:	f009 f806 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d504c:	f108 0114 	add.w	r1, r8, #20
   d5050:	464a      	mov	r2, r9
   d5052:	4653      	mov	r3, sl
   d5054:	b289      	uxth	r1, r1
   d5056:	4894      	ldr	r0, [pc, #592]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5058:	f8cd b000 	str.w	fp, [sp]
   d505c:	f008 fffc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5060:	f108 0115 	add.w	r1, r8, #21
   d5064:	464a      	mov	r2, r9
   d5066:	4653      	mov	r3, sl
   d5068:	b289      	uxth	r1, r1
   d506a:	488f      	ldr	r0, [pc, #572]	; (d52a8 <_Z3numiiiii+0xd04>)
   d506c:	f8cd b000 	str.w	fp, [sp]
   d5070:	f008 fff2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5074:	f108 0116 	add.w	r1, r8, #22
   d5078:	464a      	mov	r2, r9
   d507a:	4653      	mov	r3, sl
   d507c:	b289      	uxth	r1, r1
   d507e:	488a      	ldr	r0, [pc, #552]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5080:	f8cd b000 	str.w	fp, [sp]
   d5084:	f008 ffe8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5088:	f108 0117 	add.w	r1, r8, #23
   d508c:	464a      	mov	r2, r9
   d508e:	4653      	mov	r3, sl
   d5090:	b289      	uxth	r1, r1
   d5092:	4885      	ldr	r0, [pc, #532]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5094:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix+1,0,0,0);
   d5098:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d509c:	f008 ffdc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d50a0:	f108 0101 	add.w	r1, r8, #1
   d50a4:	464b      	mov	r3, r9
   d50a6:	464a      	mov	r2, r9
   d50a8:	b289      	uxth	r1, r1
   d50aa:	487f      	ldr	r0, [pc, #508]	; (d52a8 <_Z3numiiiii+0xd04>)
   d50ac:	f8cd 9000 	str.w	r9, [sp]
   d50b0:	f008 ffd2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d50b4:	f108 0110 	add.w	r1, r8, #16
   d50b8:	464b      	mov	r3, r9
   d50ba:	464a      	mov	r2, r9
   d50bc:	b289      	uxth	r1, r1
   d50be:	487a      	ldr	r0, [pc, #488]	; (d52a8 <_Z3numiiiii+0xd04>)
   d50c0:	f8cd 9000 	str.w	r9, [sp]
   d50c4:	f008 ffc8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d50c8:	f1a8 0104 	sub.w	r1, r8, #4
   d50cc:	464b      	mov	r3, r9
   d50ce:	464a      	mov	r2, r9
   d50d0:	b289      	uxth	r1, r1
   d50d2:	4875      	ldr	r0, [pc, #468]	; (d52a8 <_Z3numiiiii+0xd04>)
   d50d4:	f8cd 9000 	str.w	r9, [sp]
   d50d8:	f008 ffbe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d50dc:	f1a8 0105 	sub.w	r1, r8, #5
   d50e0:	464b      	mov	r3, r9
   d50e2:	464a      	mov	r2, r9
   d50e4:	b289      	uxth	r1, r1
   d50e6:	4870      	ldr	r0, [pc, #448]	; (d52a8 <_Z3numiiiii+0xd04>)
   d50e8:	f8cd 9000 	str.w	r9, [sp]
   d50ec:	f008 ffb4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d50f0:	f1a8 0106 	sub.w	r1, r8, #6
   d50f4:	464b      	mov	r3, r9
   d50f6:	464a      	mov	r2, r9
   d50f8:	b289      	uxth	r1, r1
   d50fa:	486b      	ldr	r0, [pc, #428]	; (d52a8 <_Z3numiiiii+0xd04>)
   d50fc:	f8cd 9000 	str.w	r9, [sp]
   d5100:	f008 ffaa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d5104:	f108 0107 	add.w	r1, r8, #7
   d5108:	464b      	mov	r3, r9
   d510a:	464a      	mov	r2, r9
   d510c:	b289      	uxth	r1, r1
   d510e:	4866      	ldr	r0, [pc, #408]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5110:	f8cd 9000 	str.w	r9, [sp]
   d5114:	f008 ffa0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d5118:	f108 010a 	add.w	r1, r8, #10
   d511c:	f8cd 9000 	str.w	r9, [sp]
   d5120:	464b      	mov	r3, r9
   d5122:	464a      	mov	r2, r9
   d5124:	b289      	uxth	r1, r1
   d5126:	4860      	ldr	r0, [pc, #384]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5128:	f008 ff96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d512c:	f017 0701 	ands.w	r7, r7, #1
   d5130:	f041 8264 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5134:	b2a4      	uxth	r4, r4
   d5136:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d513a:	485b      	ldr	r0, [pc, #364]	; (d52a8 <_Z3numiiiii+0xd04>)
   d513c:	f8cd 8000 	str.w	r8, [sp]
   d5140:	b2ed      	uxtb	r5, r5
   d5142:	b2f6      	uxtb	r6, r6
   d5144:	4633      	mov	r3, r6
   d5146:	462a      	mov	r2, r5
   d5148:	4621      	mov	r1, r4
   d514a:	f008 ff85 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d514e:	1c61      	adds	r1, r4, #1
   d5150:	4633      	mov	r3, r6
   d5152:	462a      	mov	r2, r5
   d5154:	b289      	uxth	r1, r1
   d5156:	4854      	ldr	r0, [pc, #336]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5158:	f8cd 8000 	str.w	r8, [sp]
   d515c:	f008 ff7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5160:	1ca1      	adds	r1, r4, #2
   d5162:	4633      	mov	r3, r6
   d5164:	462a      	mov	r2, r5
   d5166:	b289      	uxth	r1, r1
   d5168:	484f      	ldr	r0, [pc, #316]	; (d52a8 <_Z3numiiiii+0xd04>)
   d516a:	f8cd 8000 	str.w	r8, [sp]
   d516e:	f008 ff73 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5172:	1ce1      	adds	r1, r4, #3
   d5174:	4633      	mov	r3, r6
   d5176:	462a      	mov	r2, r5
   d5178:	b289      	uxth	r1, r1
   d517a:	484b      	ldr	r0, [pc, #300]	; (d52a8 <_Z3numiiiii+0xd04>)
   d517c:	f8cd 8000 	str.w	r8, [sp]
   d5180:	f008 ff6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5184:	f104 010c 	add.w	r1, r4, #12
   d5188:	4633      	mov	r3, r6
   d518a:	462a      	mov	r2, r5
   d518c:	b289      	uxth	r1, r1
   d518e:	4846      	ldr	r0, [pc, #280]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5190:	f8cd 8000 	str.w	r8, [sp]
   d5194:	f008 ff60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5198:	f104 0113 	add.w	r1, r4, #19
   d519c:	4633      	mov	r3, r6
   d519e:	462a      	mov	r2, r5
   d51a0:	b289      	uxth	r1, r1
   d51a2:	4841      	ldr	r0, [pc, #260]	; (d52a8 <_Z3numiiiii+0xd04>)
   d51a4:	f8cd 8000 	str.w	r8, [sp]
   d51a8:	f008 ff56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d51ac:	f104 011f 	add.w	r1, r4, #31
   d51b0:	4633      	mov	r3, r6
   d51b2:	462a      	mov	r2, r5
   d51b4:	b289      	uxth	r1, r1
   d51b6:	483c      	ldr	r0, [pc, #240]	; (d52a8 <_Z3numiiiii+0xd04>)
   d51b8:	f8cd 8000 	str.w	r8, [sp]
   d51bc:	f008 ff4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d51c0:	f104 011e 	add.w	r1, r4, #30
   d51c4:	4633      	mov	r3, r6
   d51c6:	462a      	mov	r2, r5
   d51c8:	b289      	uxth	r1, r1
   d51ca:	4837      	ldr	r0, [pc, #220]	; (d52a8 <_Z3numiiiii+0xd04>)
   d51cc:	f8cd 8000 	str.w	r8, [sp]
   d51d0:	f008 ff42 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d51d4:	f104 011d 	add.w	r1, r4, #29
   d51d8:	4633      	mov	r3, r6
   d51da:	462a      	mov	r2, r5
   d51dc:	b289      	uxth	r1, r1
   d51de:	4832      	ldr	r0, [pc, #200]	; (d52a8 <_Z3numiiiii+0xd04>)
   d51e0:	f8cd 8000 	str.w	r8, [sp]
   d51e4:	f008 ff38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d51e8:	f104 011c 	add.w	r1, r4, #28
   d51ec:	4633      	mov	r3, r6
   d51ee:	462a      	mov	r2, r5
   d51f0:	b289      	uxth	r1, r1
   d51f2:	482d      	ldr	r0, [pc, #180]	; (d52a8 <_Z3numiiiii+0xd04>)
   d51f4:	f8cd 8000 	str.w	r8, [sp]
   d51f8:	f008 ff2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d51fc:	f104 011b 	add.w	r1, r4, #27
   d5200:	4633      	mov	r3, r6
   d5202:	462a      	mov	r2, r5
   d5204:	b289      	uxth	r1, r1
   d5206:	4828      	ldr	r0, [pc, #160]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5208:	f8cd 8000 	str.w	r8, [sp]
   d520c:	f008 ff24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5210:	f104 011a 	add.w	r1, r4, #26
   d5214:	4633      	mov	r3, r6
   d5216:	462a      	mov	r2, r5
   d5218:	b289      	uxth	r1, r1
   d521a:	4823      	ldr	r0, [pc, #140]	; (d52a8 <_Z3numiiiii+0xd04>)
   d521c:	f8cd 8000 	str.w	r8, [sp]
   d5220:	f008 ff1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5224:	f104 0119 	add.w	r1, r4, #25
   d5228:	4633      	mov	r3, r6
   d522a:	462a      	mov	r2, r5
   d522c:	b289      	uxth	r1, r1
   d522e:	481e      	ldr	r0, [pc, #120]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5230:	f8cd 8000 	str.w	r8, [sp]
   d5234:	f008 ff10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5238:	1d21      	adds	r1, r4, #4
   d523a:	463b      	mov	r3, r7
   d523c:	463a      	mov	r2, r7
   d523e:	b289      	uxth	r1, r1
   d5240:	4819      	ldr	r0, [pc, #100]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5242:	9700      	str	r7, [sp, #0]
   d5244:	f008 ff08 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5248:	1d61      	adds	r1, r4, #5
   d524a:	463b      	mov	r3, r7
   d524c:	463a      	mov	r2, r7
   d524e:	b289      	uxth	r1, r1
   d5250:	4815      	ldr	r0, [pc, #84]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5252:	9700      	str	r7, [sp, #0]
   d5254:	f008 ff00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5258:	1da1      	adds	r1, r4, #6
   d525a:	463b      	mov	r3, r7
   d525c:	463a      	mov	r2, r7
   d525e:	b289      	uxth	r1, r1
   d5260:	4811      	ldr	r0, [pc, #68]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5262:	9700      	str	r7, [sp, #0]
   d5264:	f008 fef8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d5268:	f104 0109 	add.w	r1, r4, #9
   d526c:	463b      	mov	r3, r7
   d526e:	463a      	mov	r2, r7
   d5270:	b289      	uxth	r1, r1
   d5272:	480d      	ldr	r0, [pc, #52]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5274:	9700      	str	r7, [sp, #0]
   d5276:	f008 feef 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d527a:	f104 0116 	add.w	r1, r4, #22
   d527e:	463b      	mov	r3, r7
   d5280:	463a      	mov	r2, r7
   d5282:	b289      	uxth	r1, r1
   d5284:	4808      	ldr	r0, [pc, #32]	; (d52a8 <_Z3numiiiii+0xd04>)
   d5286:	9700      	str	r7, [sp, #0]
   d5288:	f008 fee6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d528c:	f104 010f 	add.w	r1, r4, #15
   d5290:	b289      	uxth	r1, r1
   d5292:	9700      	str	r7, [sp, #0]
   d5294:	463b      	mov	r3, r7
   d5296:	463a      	mov	r2, r7
   d5298:	4803      	ldr	r0, [pc, #12]	; (d52a8 <_Z3numiiiii+0xd04>)
   d529a:	f008 fedd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d529e:	f104 0110 	add.w	r1, r4, #16
   d52a2:	e003      	b.n	d52ac <_Z3numiiiii+0xd08>
   d52a4:	80000001 	.word	0x80000001
   d52a8:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+6,R,G,B);
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
        strip.setPixelColor(pix+29,0,0,0);
        strip.setPixelColor(pix+30,0,0,0);
   d52ac:	9700      	str	r7, [sp, #0]
   d52ae:	463b      	mov	r3, r7
   d52b0:	463a      	mov	r2, r7
   d52b2:	b289      	uxth	r1, r1
   d52b4:	48ce      	ldr	r0, [pc, #824]	; (d55f0 <_Z3numiiiii+0x104c>)
   d52b6:	f008 fecf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d52ba:	f001 b99f 	b.w	d65fc <_Z3numiiiii+0x2058>
        strip.setPixelColor(pix+16,0,0,0);
        
        
    }
}
if(num == 5)
   d52be:	2805      	cmp	r0, #5
   d52c0:	f040 819a 	bne.w	d55f8 <_Z3numiiiii+0x1054>
{
    if((pix/8)%2 == 1)
   d52c4:	4bcb      	ldr	r3, [pc, #812]	; (d55f4 <_Z3numiiiii+0x1050>)
   d52c6:	f04f 0a08 	mov.w	sl, #8
   d52ca:	fb94 fafa 	sdiv	sl, r4, sl
   d52ce:	ea0a 0303 	and.w	r3, sl, r3
   d52d2:	2b00      	cmp	r3, #0
   d52d4:	bfbe      	ittt	lt
   d52d6:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d52da:	f063 0301 	ornlt	r3, r3, #1
   d52de:	3301      	addlt	r3, #1
   d52e0:	2b01      	cmp	r3, #1
   d52e2:	f040 80c6 	bne.w	d5472 <_Z3numiiiii+0xece>
    {
        strip.setPixelColor(pix,R,G,B);
   d52e6:	b2a7      	uxth	r7, r4
   d52e8:	fa5f f885 	uxtb.w	r8, r5
   d52ec:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d52f0:	48bf      	ldr	r0, [pc, #764]	; (d55f0 <_Z3numiiiii+0x104c>)
   d52f2:	f8cd b000 	str.w	fp, [sp]
   d52f6:	fa5f f986 	uxtb.w	r9, r6
   d52fa:	4642      	mov	r2, r8
   d52fc:	464b      	mov	r3, r9
   d52fe:	4639      	mov	r1, r7
   d5300:	f008 feaa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5304:	1c79      	adds	r1, r7, #1
   d5306:	4642      	mov	r2, r8
   d5308:	464b      	mov	r3, r9
   d530a:	b289      	uxth	r1, r1
   d530c:	48b8      	ldr	r0, [pc, #736]	; (d55f0 <_Z3numiiiii+0x104c>)
   d530e:	f8cd b000 	str.w	fp, [sp]
   d5312:	f008 fea1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5316:	f107 0110 	add.w	r1, r7, #16
   d531a:	4642      	mov	r2, r8
   d531c:	464b      	mov	r3, r9
   d531e:	b289      	uxth	r1, r1
   d5320:	48b3      	ldr	r0, [pc, #716]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5322:	f8cd b000 	str.w	fp, [sp]
   d5326:	f008 fe97 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d532a:	f107 0111 	add.w	r1, r7, #17
   d532e:	4642      	mov	r2, r8
   d5330:	464b      	mov	r3, r9
   d5332:	b289      	uxth	r1, r1
   d5334:	48ae      	ldr	r0, [pc, #696]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5336:	f8cd b000 	str.w	fp, [sp]
   d533a:	f008 fe8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d533e:	1e79      	subs	r1, r7, #1
   d5340:	4642      	mov	r2, r8
   d5342:	464b      	mov	r3, r9
   d5344:	b289      	uxth	r1, r1
   d5346:	48aa      	ldr	r0, [pc, #680]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5348:	f8cd b000 	str.w	fp, [sp]
   d534c:	f008 fe84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5350:	1eb9      	subs	r1, r7, #2
   d5352:	4642      	mov	r2, r8
   d5354:	464b      	mov	r3, r9
   d5356:	b289      	uxth	r1, r1
   d5358:	48a5      	ldr	r0, [pc, #660]	; (d55f0 <_Z3numiiiii+0x104c>)
   d535a:	f8cd b000 	str.w	fp, [sp]
   d535e:	f008 fe7b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5362:	1ef9      	subs	r1, r7, #3
   d5364:	4642      	mov	r2, r8
   d5366:	464b      	mov	r3, r9
   d5368:	b289      	uxth	r1, r1
   d536a:	48a1      	ldr	r0, [pc, #644]	; (d55f0 <_Z3numiiiii+0x104c>)
   d536c:	f8cd b000 	str.w	fp, [sp]
   d5370:	f008 fe72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5374:	1fb9      	subs	r1, r7, #6
   d5376:	4642      	mov	r2, r8
   d5378:	464b      	mov	r3, r9
   d537a:	b289      	uxth	r1, r1
   d537c:	489c      	ldr	r0, [pc, #624]	; (d55f0 <_Z3numiiiii+0x104c>)
   d537e:	f8cd b000 	str.w	fp, [sp]
   d5382:	f008 fe69 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5386:	1d39      	adds	r1, r7, #4
   d5388:	4642      	mov	r2, r8
   d538a:	464b      	mov	r3, r9
   d538c:	b289      	uxth	r1, r1
   d538e:	4898      	ldr	r0, [pc, #608]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5390:	f8cd b000 	str.w	fp, [sp]
   d5394:	f008 fe60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d5398:	f107 010d 	add.w	r1, r7, #13
   d539c:	4642      	mov	r2, r8
   d539e:	464b      	mov	r3, r9
   d53a0:	b289      	uxth	r1, r1
   d53a2:	4893      	ldr	r0, [pc, #588]	; (d55f0 <_Z3numiiiii+0x104c>)
   d53a4:	f8cd b000 	str.w	fp, [sp]
   d53a8:	f008 fe56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d53ac:	f107 0114 	add.w	r1, r7, #20
   d53b0:	4642      	mov	r2, r8
   d53b2:	464b      	mov	r3, r9
   d53b4:	b289      	uxth	r1, r1
   d53b6:	488e      	ldr	r0, [pc, #568]	; (d55f0 <_Z3numiiiii+0x104c>)
   d53b8:	f8cd b000 	str.w	fp, [sp]
   d53bc:	f008 fe4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d53c0:	f107 0115 	add.w	r1, r7, #21
   d53c4:	4642      	mov	r2, r8
   d53c6:	464b      	mov	r3, r9
   d53c8:	b289      	uxth	r1, r1
   d53ca:	4889      	ldr	r0, [pc, #548]	; (d55f0 <_Z3numiiiii+0x104c>)
   d53cc:	f8cd b000 	str.w	fp, [sp]
   d53d0:	f008 fe42 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d53d4:	f107 0116 	add.w	r1, r7, #22
   d53d8:	4642      	mov	r2, r8
   d53da:	464b      	mov	r3, r9
   d53dc:	b289      	uxth	r1, r1
   d53de:	4884      	ldr	r0, [pc, #528]	; (d55f0 <_Z3numiiiii+0x104c>)
   d53e0:	f8cd b000 	str.w	fp, [sp]
   d53e4:	f008 fe38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d53e8:	f107 0117 	add.w	r1, r7, #23
   d53ec:	4642      	mov	r2, r8
   d53ee:	464b      	mov	r3, r9
   d53f0:	b289      	uxth	r1, r1
   d53f2:	487f      	ldr	r0, [pc, #508]	; (d55f0 <_Z3numiiiii+0x104c>)
   d53f4:	f8cd b000 	str.w	fp, [sp]
   d53f8:	f008 fe2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d53fc:	f107 010a 	add.w	r1, r7, #10
   d5400:	4642      	mov	r2, r8
   d5402:	464b      	mov	r3, r9
   d5404:	b289      	uxth	r1, r1
   d5406:	487a      	ldr	r0, [pc, #488]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5408:	f8cd b000 	str.w	fp, [sp]
   d540c:	f008 fe24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5410:	1df9      	adds	r1, r7, #7
   d5412:	4642      	mov	r2, r8
   d5414:	464b      	mov	r3, r9
   d5416:	b289      	uxth	r1, r1
   d5418:	4875      	ldr	r0, [pc, #468]	; (d55f0 <_Z3numiiiii+0x104c>)
   d541a:	f8cd b000 	str.w	fp, [sp]

        strip.setPixelColor(pix-4,0,0,0);
   d541e:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
   d5422:	f008 fe19 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>

        strip.setPixelColor(pix-4,0,0,0);
   d5426:	1f39      	subs	r1, r7, #4
   d5428:	4643      	mov	r3, r8
   d542a:	4642      	mov	r2, r8
   d542c:	b289      	uxth	r1, r1
   d542e:	4870      	ldr	r0, [pc, #448]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5430:	f8cd 8000 	str.w	r8, [sp]
   d5434:	f008 fe10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5438:	1f79      	subs	r1, r7, #5
   d543a:	4643      	mov	r3, r8
   d543c:	4642      	mov	r2, r8
   d543e:	b289      	uxth	r1, r1
   d5440:	486b      	ldr	r0, [pc, #428]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5442:	f8cd 8000 	str.w	r8, [sp]
   d5446:	f008 fe07 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d544a:	f107 0113 	add.w	r1, r7, #19
   d544e:	4643      	mov	r3, r8
   d5450:	4642      	mov	r2, r8
   d5452:	b289      	uxth	r1, r1
   d5454:	4866      	ldr	r0, [pc, #408]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5456:	f8cd 8000 	str.w	r8, [sp]
   d545a:	f008 fdfd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d545e:	f107 0112 	add.w	r1, r7, #18
   d5462:	f8cd 8000 	str.w	r8, [sp]
   d5466:	4643      	mov	r3, r8
   d5468:	4642      	mov	r2, r8
   d546a:	b289      	uxth	r1, r1
   d546c:	4860      	ldr	r0, [pc, #384]	; (d55f0 <_Z3numiiiii+0x104c>)
   d546e:	f008 fdf3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5472:	f01a 0701 	ands.w	r7, sl, #1
   d5476:	f041 80c1 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d547a:	b2a4      	uxth	r4, r4
   d547c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5480:	485b      	ldr	r0, [pc, #364]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5482:	f8cd 8000 	str.w	r8, [sp]
   d5486:	b2ed      	uxtb	r5, r5
   d5488:	b2f6      	uxtb	r6, r6
   d548a:	4633      	mov	r3, r6
   d548c:	462a      	mov	r2, r5
   d548e:	4621      	mov	r1, r4
   d5490:	f008 fde2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5494:	f104 010f 	add.w	r1, r4, #15
   d5498:	4633      	mov	r3, r6
   d549a:	462a      	mov	r2, r5
   d549c:	b289      	uxth	r1, r1
   d549e:	4854      	ldr	r0, [pc, #336]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54a0:	f8cd 8000 	str.w	r8, [sp]
   d54a4:	f008 fdd8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d54a8:	f104 0110 	add.w	r1, r4, #16
   d54ac:	4633      	mov	r3, r6
   d54ae:	462a      	mov	r2, r5
   d54b0:	b289      	uxth	r1, r1
   d54b2:	484f      	ldr	r0, [pc, #316]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54b4:	f8cd 8000 	str.w	r8, [sp]
   d54b8:	f008 fdce 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d54bc:	f104 011f 	add.w	r1, r4, #31
   d54c0:	4633      	mov	r3, r6
   d54c2:	462a      	mov	r2, r5
   d54c4:	b289      	uxth	r1, r1
   d54c6:	484a      	ldr	r0, [pc, #296]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54c8:	f8cd 8000 	str.w	r8, [sp]
   d54cc:	f008 fdc4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d54d0:	1c61      	adds	r1, r4, #1
   d54d2:	4633      	mov	r3, r6
   d54d4:	462a      	mov	r2, r5
   d54d6:	b289      	uxth	r1, r1
   d54d8:	4845      	ldr	r0, [pc, #276]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54da:	f8cd 8000 	str.w	r8, [sp]
   d54de:	f008 fdbb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d54e2:	1ca1      	adds	r1, r4, #2
   d54e4:	4633      	mov	r3, r6
   d54e6:	462a      	mov	r2, r5
   d54e8:	b289      	uxth	r1, r1
   d54ea:	4841      	ldr	r0, [pc, #260]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54ec:	f8cd 8000 	str.w	r8, [sp]
   d54f0:	f008 fdb2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d54f4:	1ce1      	adds	r1, r4, #3
   d54f6:	4633      	mov	r3, r6
   d54f8:	462a      	mov	r2, r5
   d54fa:	b289      	uxth	r1, r1
   d54fc:	483c      	ldr	r0, [pc, #240]	; (d55f0 <_Z3numiiiii+0x104c>)
   d54fe:	f8cd 8000 	str.w	r8, [sp]
   d5502:	f008 fda9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5506:	f104 010c 	add.w	r1, r4, #12
   d550a:	4633      	mov	r3, r6
   d550c:	462a      	mov	r2, r5
   d550e:	b289      	uxth	r1, r1
   d5510:	4837      	ldr	r0, [pc, #220]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5512:	f8cd 8000 	str.w	r8, [sp]
   d5516:	f008 fd9f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d551a:	f104 0113 	add.w	r1, r4, #19
   d551e:	4633      	mov	r3, r6
   d5520:	462a      	mov	r2, r5
   d5522:	b289      	uxth	r1, r1
   d5524:	4832      	ldr	r0, [pc, #200]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5526:	f8cd 8000 	str.w	r8, [sp]
   d552a:	f008 fd95 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d552e:	f104 011c 	add.w	r1, r4, #28
   d5532:	4633      	mov	r3, r6
   d5534:	462a      	mov	r2, r5
   d5536:	b289      	uxth	r1, r1
   d5538:	482d      	ldr	r0, [pc, #180]	; (d55f0 <_Z3numiiiii+0x104c>)
   d553a:	f8cd 8000 	str.w	r8, [sp]
   d553e:	f008 fd8b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5542:	f104 011b 	add.w	r1, r4, #27
   d5546:	4633      	mov	r3, r6
   d5548:	462a      	mov	r2, r5
   d554a:	b289      	uxth	r1, r1
   d554c:	4828      	ldr	r0, [pc, #160]	; (d55f0 <_Z3numiiiii+0x104c>)
   d554e:	f8cd 8000 	str.w	r8, [sp]
   d5552:	f008 fd81 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5556:	f104 011a 	add.w	r1, r4, #26
   d555a:	4633      	mov	r3, r6
   d555c:	462a      	mov	r2, r5
   d555e:	b289      	uxth	r1, r1
   d5560:	4823      	ldr	r0, [pc, #140]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5562:	f8cd 8000 	str.w	r8, [sp]
   d5566:	f008 fd77 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d556a:	f104 0119 	add.w	r1, r4, #25
   d556e:	4633      	mov	r3, r6
   d5570:	462a      	mov	r2, r5
   d5572:	b289      	uxth	r1, r1
   d5574:	481e      	ldr	r0, [pc, #120]	; (d55f0 <_Z3numiiiii+0x104c>)
   d5576:	f8cd 8000 	str.w	r8, [sp]
   d557a:	f008 fd6d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d557e:	f104 0116 	add.w	r1, r4, #22
   d5582:	4633      	mov	r3, r6
   d5584:	462a      	mov	r2, r5
   d5586:	b289      	uxth	r1, r1
   d5588:	4819      	ldr	r0, [pc, #100]	; (d55f0 <_Z3numiiiii+0x104c>)
   d558a:	f8cd 8000 	str.w	r8, [sp]
   d558e:	f008 fd63 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d5592:	f104 0109 	add.w	r1, r4, #9
   d5596:	4633      	mov	r3, r6
   d5598:	462a      	mov	r2, r5
   d559a:	b289      	uxth	r1, r1
   d559c:	4814      	ldr	r0, [pc, #80]	; (d55f0 <_Z3numiiiii+0x104c>)
   d559e:	f8cd 8000 	str.w	r8, [sp]
   d55a2:	f008 fd59 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d55a6:	1da1      	adds	r1, r4, #6
   d55a8:	4633      	mov	r3, r6
   d55aa:	462a      	mov	r2, r5
   d55ac:	b289      	uxth	r1, r1
   d55ae:	4810      	ldr	r0, [pc, #64]	; (d55f0 <_Z3numiiiii+0x104c>)
   d55b0:	f8cd 8000 	str.w	r8, [sp]
   d55b4:	f008 fd50 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d55b8:	1d21      	adds	r1, r4, #4
   d55ba:	463b      	mov	r3, r7
   d55bc:	463a      	mov	r2, r7
   d55be:	b289      	uxth	r1, r1
   d55c0:	480b      	ldr	r0, [pc, #44]	; (d55f0 <_Z3numiiiii+0x104c>)
   d55c2:	9700      	str	r7, [sp, #0]
   d55c4:	f008 fd48 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d55c8:	1d61      	adds	r1, r4, #5
   d55ca:	463b      	mov	r3, r7
   d55cc:	463a      	mov	r2, r7
   d55ce:	b289      	uxth	r1, r1
   d55d0:	4807      	ldr	r0, [pc, #28]	; (d55f0 <_Z3numiiiii+0x104c>)
   d55d2:	9700      	str	r7, [sp, #0]
   d55d4:	f008 fd40 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,0,0,0);
   d55d8:	f104 011d 	add.w	r1, r4, #29
   d55dc:	b289      	uxth	r1, r1
   d55de:	9700      	str	r7, [sp, #0]
   d55e0:	463b      	mov	r3, r7
   d55e2:	463a      	mov	r2, r7
   d55e4:	4802      	ldr	r0, [pc, #8]	; (d55f0 <_Z3numiiiii+0x104c>)
   d55e6:	f008 fd37 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d55ea:	f104 011e 	add.w	r1, r4, #30
   d55ee:	e65d      	b.n	d52ac <_Z3numiiiii+0xd08>
   d55f0:	2003e328 	.word	0x2003e328
   d55f4:	80000001 	.word	0x80000001
    }
}
if(num == 6)
   d55f8:	2806      	cmp	r0, #6
   d55fa:	f040 819d 	bne.w	d5938 <_Z3numiiiii+0x1394>
{
    if((pix/8)%2 == 1)
   d55fe:	4bcc      	ldr	r3, [pc, #816]	; (d5930 <_Z3numiiiii+0x138c>)
   d5600:	f04f 0b08 	mov.w	fp, #8
   d5604:	fb94 fbfb 	sdiv	fp, r4, fp
   d5608:	ea0b 0303 	and.w	r3, fp, r3
   d560c:	2b00      	cmp	r3, #0
   d560e:	bfbe      	ittt	lt
   d5610:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5614:	f063 0301 	ornlt	r3, r3, #1
   d5618:	3301      	addlt	r3, #1
   d561a:	2b01      	cmp	r3, #1
   d561c:	f040 80c6 	bne.w	d57ac <_Z3numiiiii+0x1208>
    {
        strip.setPixelColor(pix,R,G,B);
   d5620:	b2a7      	uxth	r7, r4
   d5622:	fa5f f885 	uxtb.w	r8, r5
   d5626:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d562a:	48c2      	ldr	r0, [pc, #776]	; (d5934 <_Z3numiiiii+0x1390>)
   d562c:	f8cd a000 	str.w	sl, [sp]
   d5630:	fa5f f986 	uxtb.w	r9, r6
   d5634:	4642      	mov	r2, r8
   d5636:	464b      	mov	r3, r9
   d5638:	4639      	mov	r1, r7
   d563a:	f008 fd0d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d563e:	1c79      	adds	r1, r7, #1
   d5640:	4642      	mov	r2, r8
   d5642:	464b      	mov	r3, r9
   d5644:	b289      	uxth	r1, r1
   d5646:	48bb      	ldr	r0, [pc, #748]	; (d5934 <_Z3numiiiii+0x1390>)
   d5648:	f8cd a000 	str.w	sl, [sp]
   d564c:	f008 fd04 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5650:	f107 0110 	add.w	r1, r7, #16
   d5654:	4642      	mov	r2, r8
   d5656:	464b      	mov	r3, r9
   d5658:	b289      	uxth	r1, r1
   d565a:	48b6      	ldr	r0, [pc, #728]	; (d5934 <_Z3numiiiii+0x1390>)
   d565c:	f8cd a000 	str.w	sl, [sp]
   d5660:	f008 fcfa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5664:	f107 0111 	add.w	r1, r7, #17
   d5668:	4642      	mov	r2, r8
   d566a:	464b      	mov	r3, r9
   d566c:	b289      	uxth	r1, r1
   d566e:	48b1      	ldr	r0, [pc, #708]	; (d5934 <_Z3numiiiii+0x1390>)
   d5670:	f8cd a000 	str.w	sl, [sp]
   d5674:	f008 fcf0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d5678:	1e79      	subs	r1, r7, #1
   d567a:	4642      	mov	r2, r8
   d567c:	464b      	mov	r3, r9
   d567e:	b289      	uxth	r1, r1
   d5680:	48ac      	ldr	r0, [pc, #688]	; (d5934 <_Z3numiiiii+0x1390>)
   d5682:	f8cd a000 	str.w	sl, [sp]
   d5686:	f008 fce7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d568a:	1eb9      	subs	r1, r7, #2
   d568c:	4642      	mov	r2, r8
   d568e:	464b      	mov	r3, r9
   d5690:	b289      	uxth	r1, r1
   d5692:	48a8      	ldr	r0, [pc, #672]	; (d5934 <_Z3numiiiii+0x1390>)
   d5694:	f8cd a000 	str.w	sl, [sp]
   d5698:	f008 fcde 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d569c:	1ef9      	subs	r1, r7, #3
   d569e:	4642      	mov	r2, r8
   d56a0:	464b      	mov	r3, r9
   d56a2:	b289      	uxth	r1, r1
   d56a4:	48a3      	ldr	r0, [pc, #652]	; (d5934 <_Z3numiiiii+0x1390>)
   d56a6:	f8cd a000 	str.w	sl, [sp]
   d56aa:	f008 fcd5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d56ae:	1f39      	subs	r1, r7, #4
   d56b0:	4642      	mov	r2, r8
   d56b2:	464b      	mov	r3, r9
   d56b4:	b289      	uxth	r1, r1
   d56b6:	489f      	ldr	r0, [pc, #636]	; (d5934 <_Z3numiiiii+0x1390>)
   d56b8:	f8cd a000 	str.w	sl, [sp]
   d56bc:	f008 fccc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d56c0:	1f79      	subs	r1, r7, #5
   d56c2:	4642      	mov	r2, r8
   d56c4:	464b      	mov	r3, r9
   d56c6:	b289      	uxth	r1, r1
   d56c8:	489a      	ldr	r0, [pc, #616]	; (d5934 <_Z3numiiiii+0x1390>)
   d56ca:	f8cd a000 	str.w	sl, [sp]
   d56ce:	f008 fcc3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d56d2:	1fb9      	subs	r1, r7, #6
   d56d4:	4642      	mov	r2, r8
   d56d6:	464b      	mov	r3, r9
   d56d8:	b289      	uxth	r1, r1
   d56da:	4896      	ldr	r0, [pc, #600]	; (d5934 <_Z3numiiiii+0x1390>)
   d56dc:	f8cd a000 	str.w	sl, [sp]
   d56e0:	f008 fcba 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d56e4:	1df9      	adds	r1, r7, #7
   d56e6:	4642      	mov	r2, r8
   d56e8:	464b      	mov	r3, r9
   d56ea:	b289      	uxth	r1, r1
   d56ec:	4891      	ldr	r0, [pc, #580]	; (d5934 <_Z3numiiiii+0x1390>)
   d56ee:	f8cd a000 	str.w	sl, [sp]
   d56f2:	f008 fcb1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d56f6:	f107 010a 	add.w	r1, r7, #10
   d56fa:	4642      	mov	r2, r8
   d56fc:	464b      	mov	r3, r9
   d56fe:	b289      	uxth	r1, r1
   d5700:	488c      	ldr	r0, [pc, #560]	; (d5934 <_Z3numiiiii+0x1390>)
   d5702:	f8cd a000 	str.w	sl, [sp]
   d5706:	f008 fca7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d570a:	f107 0117 	add.w	r1, r7, #23
   d570e:	4642      	mov	r2, r8
   d5710:	464b      	mov	r3, r9
   d5712:	b289      	uxth	r1, r1
   d5714:	4887      	ldr	r0, [pc, #540]	; (d5934 <_Z3numiiiii+0x1390>)
   d5716:	f8cd a000 	str.w	sl, [sp]
   d571a:	f008 fc9d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d571e:	f107 0116 	add.w	r1, r7, #22
   d5722:	4642      	mov	r2, r8
   d5724:	464b      	mov	r3, r9
   d5726:	b289      	uxth	r1, r1
   d5728:	4882      	ldr	r0, [pc, #520]	; (d5934 <_Z3numiiiii+0x1390>)
   d572a:	f8cd a000 	str.w	sl, [sp]
   d572e:	f008 fc93 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5732:	f107 0115 	add.w	r1, r7, #21
   d5736:	4642      	mov	r2, r8
   d5738:	464b      	mov	r3, r9
   d573a:	b289      	uxth	r1, r1
   d573c:	487d      	ldr	r0, [pc, #500]	; (d5934 <_Z3numiiiii+0x1390>)
   d573e:	f8cd a000 	str.w	sl, [sp]
   d5742:	f008 fc89 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5746:	f107 0114 	add.w	r1, r7, #20
   d574a:	4642      	mov	r2, r8
   d574c:	464b      	mov	r3, r9
   d574e:	b289      	uxth	r1, r1
   d5750:	4878      	ldr	r0, [pc, #480]	; (d5934 <_Z3numiiiii+0x1390>)
   d5752:	f8cd a000 	str.w	sl, [sp]
   d5756:	f008 fc7f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d575a:	1d39      	adds	r1, r7, #4
   d575c:	4642      	mov	r2, r8
   d575e:	464b      	mov	r3, r9
   d5760:	b289      	uxth	r1, r1
   d5762:	4874      	ldr	r0, [pc, #464]	; (d5934 <_Z3numiiiii+0x1390>)
   d5764:	f8cd a000 	str.w	sl, [sp]
   d5768:	f008 fc76 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d576c:	f107 010d 	add.w	r1, r7, #13
   d5770:	4642      	mov	r2, r8
   d5772:	464b      	mov	r3, r9
   d5774:	b289      	uxth	r1, r1
   d5776:	486f      	ldr	r0, [pc, #444]	; (d5934 <_Z3numiiiii+0x1390>)
   d5778:	f8cd a000 	str.w	sl, [sp]
   d577c:	f008 fc6c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+19,0,0,0);
   d5780:	f04f 0800 	mov.w	r8, #0
   d5784:	f107 0113 	add.w	r1, r7, #19
   d5788:	4643      	mov	r3, r8
   d578a:	4642      	mov	r2, r8
   d578c:	b289      	uxth	r1, r1
   d578e:	4869      	ldr	r0, [pc, #420]	; (d5934 <_Z3numiiiii+0x1390>)
   d5790:	f8cd 8000 	str.w	r8, [sp]
   d5794:	f008 fc60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d5798:	f107 0112 	add.w	r1, r7, #18
   d579c:	f8cd 8000 	str.w	r8, [sp]
   d57a0:	4643      	mov	r3, r8
   d57a2:	4642      	mov	r2, r8
   d57a4:	b289      	uxth	r1, r1
   d57a6:	4863      	ldr	r0, [pc, #396]	; (d5934 <_Z3numiiiii+0x1390>)
   d57a8:	f008 fc56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d57ac:	f01b 0701 	ands.w	r7, fp, #1
   d57b0:	f040 8724 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d57b4:	b2a4      	uxth	r4, r4
   d57b6:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d57ba:	485e      	ldr	r0, [pc, #376]	; (d5934 <_Z3numiiiii+0x1390>)
   d57bc:	f8cd 8000 	str.w	r8, [sp]
   d57c0:	b2ed      	uxtb	r5, r5
   d57c2:	b2f6      	uxtb	r6, r6
   d57c4:	4633      	mov	r3, r6
   d57c6:	462a      	mov	r2, r5
   d57c8:	4621      	mov	r1, r4
   d57ca:	f008 fc45 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d57ce:	f104 010f 	add.w	r1, r4, #15
   d57d2:	4633      	mov	r3, r6
   d57d4:	462a      	mov	r2, r5
   d57d6:	b289      	uxth	r1, r1
   d57d8:	4856      	ldr	r0, [pc, #344]	; (d5934 <_Z3numiiiii+0x1390>)
   d57da:	f8cd 8000 	str.w	r8, [sp]
   d57de:	f008 fc3b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d57e2:	f104 0110 	add.w	r1, r4, #16
   d57e6:	4633      	mov	r3, r6
   d57e8:	462a      	mov	r2, r5
   d57ea:	b289      	uxth	r1, r1
   d57ec:	4851      	ldr	r0, [pc, #324]	; (d5934 <_Z3numiiiii+0x1390>)
   d57ee:	f8cd 8000 	str.w	r8, [sp]
   d57f2:	f008 fc31 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d57f6:	f104 011f 	add.w	r1, r4, #31
   d57fa:	4633      	mov	r3, r6
   d57fc:	462a      	mov	r2, r5
   d57fe:	b289      	uxth	r1, r1
   d5800:	484c      	ldr	r0, [pc, #304]	; (d5934 <_Z3numiiiii+0x1390>)
   d5802:	f8cd 8000 	str.w	r8, [sp]
   d5806:	f008 fc27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d580a:	1c61      	adds	r1, r4, #1
   d580c:	4633      	mov	r3, r6
   d580e:	462a      	mov	r2, r5
   d5810:	b289      	uxth	r1, r1
   d5812:	4848      	ldr	r0, [pc, #288]	; (d5934 <_Z3numiiiii+0x1390>)
   d5814:	f8cd 8000 	str.w	r8, [sp]
   d5818:	f008 fc1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d581c:	1ca1      	adds	r1, r4, #2
   d581e:	4633      	mov	r3, r6
   d5820:	462a      	mov	r2, r5
   d5822:	b289      	uxth	r1, r1
   d5824:	4843      	ldr	r0, [pc, #268]	; (d5934 <_Z3numiiiii+0x1390>)
   d5826:	f8cd 8000 	str.w	r8, [sp]
   d582a:	f008 fc15 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d582e:	1ce1      	adds	r1, r4, #3
   d5830:	4633      	mov	r3, r6
   d5832:	462a      	mov	r2, r5
   d5834:	b289      	uxth	r1, r1
   d5836:	483f      	ldr	r0, [pc, #252]	; (d5934 <_Z3numiiiii+0x1390>)
   d5838:	f8cd 8000 	str.w	r8, [sp]
   d583c:	f008 fc0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5840:	1d21      	adds	r1, r4, #4
   d5842:	4633      	mov	r3, r6
   d5844:	462a      	mov	r2, r5
   d5846:	b289      	uxth	r1, r1
   d5848:	483a      	ldr	r0, [pc, #232]	; (d5934 <_Z3numiiiii+0x1390>)
   d584a:	f8cd 8000 	str.w	r8, [sp]
   d584e:	f008 fc03 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d5852:	1d61      	adds	r1, r4, #5
   d5854:	4633      	mov	r3, r6
   d5856:	462a      	mov	r2, r5
   d5858:	b289      	uxth	r1, r1
   d585a:	4836      	ldr	r0, [pc, #216]	; (d5934 <_Z3numiiiii+0x1390>)
   d585c:	f8cd 8000 	str.w	r8, [sp]
   d5860:	f008 fbfa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d5864:	1da1      	adds	r1, r4, #6
   d5866:	4633      	mov	r3, r6
   d5868:	462a      	mov	r2, r5
   d586a:	b289      	uxth	r1, r1
   d586c:	4831      	ldr	r0, [pc, #196]	; (d5934 <_Z3numiiiii+0x1390>)
   d586e:	f8cd 8000 	str.w	r8, [sp]
   d5872:	f008 fbf1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d5876:	f104 0109 	add.w	r1, r4, #9
   d587a:	4633      	mov	r3, r6
   d587c:	462a      	mov	r2, r5
   d587e:	b289      	uxth	r1, r1
   d5880:	482c      	ldr	r0, [pc, #176]	; (d5934 <_Z3numiiiii+0x1390>)
   d5882:	f8cd 8000 	str.w	r8, [sp]
   d5886:	f008 fbe7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d588a:	f104 0116 	add.w	r1, r4, #22
   d588e:	4633      	mov	r3, r6
   d5890:	462a      	mov	r2, r5
   d5892:	b289      	uxth	r1, r1
   d5894:	4827      	ldr	r0, [pc, #156]	; (d5934 <_Z3numiiiii+0x1390>)
   d5896:	f8cd 8000 	str.w	r8, [sp]
   d589a:	f008 fbdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d589e:	f104 0119 	add.w	r1, r4, #25
   d58a2:	4633      	mov	r3, r6
   d58a4:	462a      	mov	r2, r5
   d58a6:	b289      	uxth	r1, r1
   d58a8:	4822      	ldr	r0, [pc, #136]	; (d5934 <_Z3numiiiii+0x1390>)
   d58aa:	f8cd 8000 	str.w	r8, [sp]
   d58ae:	f008 fbd3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d58b2:	f104 011a 	add.w	r1, r4, #26
   d58b6:	4633      	mov	r3, r6
   d58b8:	462a      	mov	r2, r5
   d58ba:	b289      	uxth	r1, r1
   d58bc:	481d      	ldr	r0, [pc, #116]	; (d5934 <_Z3numiiiii+0x1390>)
   d58be:	f8cd 8000 	str.w	r8, [sp]
   d58c2:	f008 fbc9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d58c6:	f104 011b 	add.w	r1, r4, #27
   d58ca:	4633      	mov	r3, r6
   d58cc:	462a      	mov	r2, r5
   d58ce:	b289      	uxth	r1, r1
   d58d0:	4818      	ldr	r0, [pc, #96]	; (d5934 <_Z3numiiiii+0x1390>)
   d58d2:	f8cd 8000 	str.w	r8, [sp]
   d58d6:	f008 fbbf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d58da:	f104 011c 	add.w	r1, r4, #28
   d58de:	4633      	mov	r3, r6
   d58e0:	462a      	mov	r2, r5
   d58e2:	b289      	uxth	r1, r1
   d58e4:	4813      	ldr	r0, [pc, #76]	; (d5934 <_Z3numiiiii+0x1390>)
   d58e6:	f8cd 8000 	str.w	r8, [sp]
   d58ea:	f008 fbb5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d58ee:	f104 0113 	add.w	r1, r4, #19
   d58f2:	4633      	mov	r3, r6
   d58f4:	462a      	mov	r2, r5
   d58f6:	b289      	uxth	r1, r1
   d58f8:	480e      	ldr	r0, [pc, #56]	; (d5934 <_Z3numiiiii+0x1390>)
   d58fa:	f8cd 8000 	str.w	r8, [sp]
   d58fe:	f008 fbab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5902:	f104 010c 	add.w	r1, r4, #12
   d5906:	4633      	mov	r3, r6
   d5908:	462a      	mov	r2, r5
   d590a:	b289      	uxth	r1, r1
   d590c:	4809      	ldr	r0, [pc, #36]	; (d5934 <_Z3numiiiii+0x1390>)
   d590e:	f8cd 8000 	str.w	r8, [sp]
   d5912:	f008 fba1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+29,0,0,0);
   d5916:	f104 011d 	add.w	r1, r4, #29
   d591a:	b289      	uxth	r1, r1
   d591c:	9700      	str	r7, [sp, #0]
   d591e:	463b      	mov	r3, r7
   d5920:	463a      	mov	r2, r7
   d5922:	4804      	ldr	r0, [pc, #16]	; (d5934 <_Z3numiiiii+0x1390>)
   d5924:	f008 fb98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d5928:	f104 011e 	add.w	r1, r4, #30
   d592c:	e1a4      	b.n	d5c78 <_Z3numiiiii+0x16d4>
   d592e:	bf00      	nop
   d5930:	80000001 	.word	0x80000001
   d5934:	2003e328 	.word	0x2003e328
    }
}
if(num == 7)
   d5938:	2807      	cmp	r0, #7
   d593a:	f000 81ab 	beq.w	d5c94 <_Z3numiiiii+0x16f0>
        strip.setPixelColor(pix+22,0,0,0);
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
   d593e:	2808      	cmp	r0, #8
   d5940:	f000 84d6 	beq.w	d62f0 <_Z3numiiiii+0x1d4c>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
    }
}
if(num == 9)
   d5944:	2809      	cmp	r0, #9
   d5946:	f040 8333 	bne.w	d5fb0 <_Z3numiiiii+0x1a0c>
{
    if((pix/8)%2 == 1)
   d594a:	4bd0      	ldr	r3, [pc, #832]	; (d5c8c <_Z3numiiiii+0x16e8>)
   d594c:	f04f 0b08 	mov.w	fp, #8
   d5950:	fb94 fbfb 	sdiv	fp, r4, fp
   d5954:	ea0b 0303 	and.w	r3, fp, r3
   d5958:	2b00      	cmp	r3, #0
   d595a:	bfbe      	ittt	lt
   d595c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5960:	f063 0301 	ornlt	r3, r3, #1
   d5964:	3301      	addlt	r3, #1
   d5966:	2b01      	cmp	r3, #1
   d5968:	f040 80c6 	bne.w	d5af8 <_Z3numiiiii+0x1554>
    {
        strip.setPixelColor(pix,R,G,B);
   d596c:	b2a7      	uxth	r7, r4
   d596e:	fa5f f885 	uxtb.w	r8, r5
   d5972:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d5976:	48c6      	ldr	r0, [pc, #792]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5978:	f8cd a000 	str.w	sl, [sp]
   d597c:	fa5f f986 	uxtb.w	r9, r6
   d5980:	4642      	mov	r2, r8
   d5982:	464b      	mov	r3, r9
   d5984:	4639      	mov	r1, r7
   d5986:	f008 fb67 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d598a:	1c79      	adds	r1, r7, #1
   d598c:	4642      	mov	r2, r8
   d598e:	464b      	mov	r3, r9
   d5990:	b289      	uxth	r1, r1
   d5992:	48bf      	ldr	r0, [pc, #764]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5994:	f8cd a000 	str.w	sl, [sp]
   d5998:	f008 fb5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d599c:	f107 0110 	add.w	r1, r7, #16
   d59a0:	4642      	mov	r2, r8
   d59a2:	464b      	mov	r3, r9
   d59a4:	b289      	uxth	r1, r1
   d59a6:	48ba      	ldr	r0, [pc, #744]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d59a8:	f8cd a000 	str.w	sl, [sp]
   d59ac:	f008 fb54 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d59b0:	f107 0111 	add.w	r1, r7, #17
   d59b4:	4642      	mov	r2, r8
   d59b6:	464b      	mov	r3, r9
   d59b8:	b289      	uxth	r1, r1
   d59ba:	48b5      	ldr	r0, [pc, #724]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d59bc:	f8cd a000 	str.w	sl, [sp]
   d59c0:	f008 fb4a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d59c4:	1e79      	subs	r1, r7, #1
   d59c6:	4642      	mov	r2, r8
   d59c8:	464b      	mov	r3, r9
   d59ca:	b289      	uxth	r1, r1
   d59cc:	48b0      	ldr	r0, [pc, #704]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d59ce:	f8cd a000 	str.w	sl, [sp]
   d59d2:	f008 fb41 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d59d6:	1eb9      	subs	r1, r7, #2
   d59d8:	4642      	mov	r2, r8
   d59da:	464b      	mov	r3, r9
   d59dc:	b289      	uxth	r1, r1
   d59de:	48ac      	ldr	r0, [pc, #688]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d59e0:	f8cd a000 	str.w	sl, [sp]
   d59e4:	f008 fb38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d59e8:	1ef9      	subs	r1, r7, #3
   d59ea:	4642      	mov	r2, r8
   d59ec:	464b      	mov	r3, r9
   d59ee:	b289      	uxth	r1, r1
   d59f0:	48a7      	ldr	r0, [pc, #668]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d59f2:	f8cd a000 	str.w	sl, [sp]
   d59f6:	f008 fb2f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d59fa:	f107 0117 	add.w	r1, r7, #23
   d59fe:	4642      	mov	r2, r8
   d5a00:	464b      	mov	r3, r9
   d5a02:	b289      	uxth	r1, r1
   d5a04:	48a2      	ldr	r0, [pc, #648]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a06:	f8cd a000 	str.w	sl, [sp]
   d5a0a:	f008 fb25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5a0e:	f107 0116 	add.w	r1, r7, #22
   d5a12:	4642      	mov	r2, r8
   d5a14:	464b      	mov	r3, r9
   d5a16:	b289      	uxth	r1, r1
   d5a18:	489d      	ldr	r0, [pc, #628]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a1a:	f8cd a000 	str.w	sl, [sp]
   d5a1e:	f008 fb1b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5a22:	f107 0115 	add.w	r1, r7, #21
   d5a26:	4642      	mov	r2, r8
   d5a28:	464b      	mov	r3, r9
   d5a2a:	b289      	uxth	r1, r1
   d5a2c:	4898      	ldr	r0, [pc, #608]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a2e:	f8cd a000 	str.w	sl, [sp]
   d5a32:	f008 fb11 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5a36:	f107 0114 	add.w	r1, r7, #20
   d5a3a:	4642      	mov	r2, r8
   d5a3c:	464b      	mov	r3, r9
   d5a3e:	b289      	uxth	r1, r1
   d5a40:	4893      	ldr	r0, [pc, #588]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a42:	f8cd a000 	str.w	sl, [sp]
   d5a46:	f008 fb07 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5a4a:	f107 0113 	add.w	r1, r7, #19
   d5a4e:	4642      	mov	r2, r8
   d5a50:	464b      	mov	r3, r9
   d5a52:	b289      	uxth	r1, r1
   d5a54:	488e      	ldr	r0, [pc, #568]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a56:	f8cd a000 	str.w	sl, [sp]
   d5a5a:	f008 fafd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5a5e:	f107 0112 	add.w	r1, r7, #18
   d5a62:	4642      	mov	r2, r8
   d5a64:	464b      	mov	r3, r9
   d5a66:	b289      	uxth	r1, r1
   d5a68:	4889      	ldr	r0, [pc, #548]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a6a:	f8cd a000 	str.w	sl, [sp]
   d5a6e:	f008 faf3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5a72:	1d39      	adds	r1, r7, #4
   d5a74:	4642      	mov	r2, r8
   d5a76:	464b      	mov	r3, r9
   d5a78:	b289      	uxth	r1, r1
   d5a7a:	4885      	ldr	r0, [pc, #532]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a7c:	f8cd a000 	str.w	sl, [sp]
   d5a80:	f008 faea 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d5a84:	f107 010d 	add.w	r1, r7, #13
   d5a88:	4642      	mov	r2, r8
   d5a8a:	464b      	mov	r3, r9
   d5a8c:	b289      	uxth	r1, r1
   d5a8e:	4880      	ldr	r0, [pc, #512]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5a90:	f8cd a000 	str.w	sl, [sp]
   d5a94:	f008 fae0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5a98:	1fb9      	subs	r1, r7, #6
   d5a9a:	4642      	mov	r2, r8
   d5a9c:	464b      	mov	r3, r9
   d5a9e:	b289      	uxth	r1, r1
   d5aa0:	487b      	ldr	r0, [pc, #492]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5aa2:	f8cd a000 	str.w	sl, [sp]
   d5aa6:	f008 fad7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5aaa:	1df9      	adds	r1, r7, #7
   d5aac:	4642      	mov	r2, r8
   d5aae:	464b      	mov	r3, r9
   d5ab0:	b289      	uxth	r1, r1
   d5ab2:	4877      	ldr	r0, [pc, #476]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5ab4:	f8cd a000 	str.w	sl, [sp]
   d5ab8:	f008 face 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d5abc:	f107 010a 	add.w	r1, r7, #10
   d5ac0:	4642      	mov	r2, r8
   d5ac2:	464b      	mov	r3, r9
   d5ac4:	b289      	uxth	r1, r1
   d5ac6:	4872      	ldr	r0, [pc, #456]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5ac8:	f8cd a000 	str.w	sl, [sp]
   d5acc:	f008 fac4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-4,0,0,0);
   d5ad0:	f04f 0800 	mov.w	r8, #0
   d5ad4:	1f39      	subs	r1, r7, #4
   d5ad6:	4643      	mov	r3, r8
   d5ad8:	4642      	mov	r2, r8
   d5ada:	b289      	uxth	r1, r1
   d5adc:	486c      	ldr	r0, [pc, #432]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5ade:	f8cd 8000 	str.w	r8, [sp]
   d5ae2:	f008 fab9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5ae6:	1f79      	subs	r1, r7, #5
   d5ae8:	f8cd 8000 	str.w	r8, [sp]
   d5aec:	4643      	mov	r3, r8
   d5aee:	4642      	mov	r2, r8
   d5af0:	b289      	uxth	r1, r1
   d5af2:	4867      	ldr	r0, [pc, #412]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5af4:	f008 fab0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5af8:	f01b 0701 	ands.w	r7, fp, #1
   d5afc:	f040 857e 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5b00:	b2a4      	uxth	r4, r4
   d5b02:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5b06:	4862      	ldr	r0, [pc, #392]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b08:	f8cd 8000 	str.w	r8, [sp]
   d5b0c:	b2ed      	uxtb	r5, r5
   d5b0e:	b2f6      	uxtb	r6, r6
   d5b10:	4633      	mov	r3, r6
   d5b12:	462a      	mov	r2, r5
   d5b14:	4621      	mov	r1, r4
   d5b16:	f008 fa9f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5b1a:	1c61      	adds	r1, r4, #1
   d5b1c:	4633      	mov	r3, r6
   d5b1e:	462a      	mov	r2, r5
   d5b20:	b289      	uxth	r1, r1
   d5b22:	485b      	ldr	r0, [pc, #364]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b24:	f8cd 8000 	str.w	r8, [sp]
   d5b28:	f008 fa96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5b2c:	1ca1      	adds	r1, r4, #2
   d5b2e:	4633      	mov	r3, r6
   d5b30:	462a      	mov	r2, r5
   d5b32:	b289      	uxth	r1, r1
   d5b34:	4856      	ldr	r0, [pc, #344]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b36:	f8cd 8000 	str.w	r8, [sp]
   d5b3a:	f008 fa8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5b3e:	1ce1      	adds	r1, r4, #3
   d5b40:	4633      	mov	r3, r6
   d5b42:	462a      	mov	r2, r5
   d5b44:	b289      	uxth	r1, r1
   d5b46:	4852      	ldr	r0, [pc, #328]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b48:	f8cd 8000 	str.w	r8, [sp]
   d5b4c:	f008 fa84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5b50:	f104 0119 	add.w	r1, r4, #25
   d5b54:	4633      	mov	r3, r6
   d5b56:	462a      	mov	r2, r5
   d5b58:	b289      	uxth	r1, r1
   d5b5a:	484d      	ldr	r0, [pc, #308]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b5c:	f8cd 8000 	str.w	r8, [sp]
   d5b60:	f008 fa7a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5b64:	f104 011a 	add.w	r1, r4, #26
   d5b68:	4633      	mov	r3, r6
   d5b6a:	462a      	mov	r2, r5
   d5b6c:	b289      	uxth	r1, r1
   d5b6e:	4848      	ldr	r0, [pc, #288]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b70:	f8cd 8000 	str.w	r8, [sp]
   d5b74:	f008 fa70 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5b78:	f104 011b 	add.w	r1, r4, #27
   d5b7c:	4633      	mov	r3, r6
   d5b7e:	462a      	mov	r2, r5
   d5b80:	b289      	uxth	r1, r1
   d5b82:	4843      	ldr	r0, [pc, #268]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b84:	f8cd 8000 	str.w	r8, [sp]
   d5b88:	f008 fa66 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5b8c:	f104 011c 	add.w	r1, r4, #28
   d5b90:	4633      	mov	r3, r6
   d5b92:	462a      	mov	r2, r5
   d5b94:	b289      	uxth	r1, r1
   d5b96:	483e      	ldr	r0, [pc, #248]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5b98:	f8cd 8000 	str.w	r8, [sp]
   d5b9c:	f008 fa5c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5ba0:	f104 011d 	add.w	r1, r4, #29
   d5ba4:	4633      	mov	r3, r6
   d5ba6:	462a      	mov	r2, r5
   d5ba8:	b289      	uxth	r1, r1
   d5baa:	4839      	ldr	r0, [pc, #228]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5bac:	f8cd 8000 	str.w	r8, [sp]
   d5bb0:	f008 fa52 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d5bb4:	f104 011e 	add.w	r1, r4, #30
   d5bb8:	4633      	mov	r3, r6
   d5bba:	462a      	mov	r2, r5
   d5bbc:	b289      	uxth	r1, r1
   d5bbe:	4834      	ldr	r0, [pc, #208]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5bc0:	f8cd 8000 	str.w	r8, [sp]
   d5bc4:	f008 fa48 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5bc8:	f104 011f 	add.w	r1, r4, #31
   d5bcc:	4633      	mov	r3, r6
   d5bce:	462a      	mov	r2, r5
   d5bd0:	b289      	uxth	r1, r1
   d5bd2:	482f      	ldr	r0, [pc, #188]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5bd4:	f8cd 8000 	str.w	r8, [sp]
   d5bd8:	f008 fa3e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5bdc:	f104 010f 	add.w	r1, r4, #15
   d5be0:	4633      	mov	r3, r6
   d5be2:	462a      	mov	r2, r5
   d5be4:	b289      	uxth	r1, r1
   d5be6:	482a      	ldr	r0, [pc, #168]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5be8:	f8cd 8000 	str.w	r8, [sp]
   d5bec:	f008 fa34 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5bf0:	f104 0110 	add.w	r1, r4, #16
   d5bf4:	4633      	mov	r3, r6
   d5bf6:	462a      	mov	r2, r5
   d5bf8:	b289      	uxth	r1, r1
   d5bfa:	4825      	ldr	r0, [pc, #148]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5bfc:	f8cd 8000 	str.w	r8, [sp]
   d5c00:	f008 fa2a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5c04:	f104 010c 	add.w	r1, r4, #12
   d5c08:	4633      	mov	r3, r6
   d5c0a:	462a      	mov	r2, r5
   d5c0c:	b289      	uxth	r1, r1
   d5c0e:	4820      	ldr	r0, [pc, #128]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c10:	f8cd 8000 	str.w	r8, [sp]
   d5c14:	f008 fa20 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5c18:	f104 0113 	add.w	r1, r4, #19
   d5c1c:	4633      	mov	r3, r6
   d5c1e:	462a      	mov	r2, r5
   d5c20:	b289      	uxth	r1, r1
   d5c22:	481b      	ldr	r0, [pc, #108]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c24:	f8cd 8000 	str.w	r8, [sp]
   d5c28:	f008 fa16 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d5c2c:	1da1      	adds	r1, r4, #6
   d5c2e:	4633      	mov	r3, r6
   d5c30:	462a      	mov	r2, r5
   d5c32:	b289      	uxth	r1, r1
   d5c34:	4816      	ldr	r0, [pc, #88]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c36:	f8cd 8000 	str.w	r8, [sp]
   d5c3a:	f008 fa0d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d5c3e:	f104 0109 	add.w	r1, r4, #9
   d5c42:	4633      	mov	r3, r6
   d5c44:	462a      	mov	r2, r5
   d5c46:	b289      	uxth	r1, r1
   d5c48:	4811      	ldr	r0, [pc, #68]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c4a:	f8cd 8000 	str.w	r8, [sp]
   d5c4e:	f008 fa03 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5c52:	f104 0116 	add.w	r1, r4, #22
   d5c56:	4633      	mov	r3, r6
   d5c58:	462a      	mov	r2, r5
   d5c5a:	b289      	uxth	r1, r1
   d5c5c:	480c      	ldr	r0, [pc, #48]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c5e:	f8cd 8000 	str.w	r8, [sp]
   d5c62:	f008 f9f9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5c66:	1d21      	adds	r1, r4, #4
   d5c68:	b289      	uxth	r1, r1
   d5c6a:	9700      	str	r7, [sp, #0]
   d5c6c:	463b      	mov	r3, r7
   d5c6e:	463a      	mov	r2, r7
   d5c70:	4807      	ldr	r0, [pc, #28]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c72:	f008 f9f1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5c76:	1d61      	adds	r1, r4, #5
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5c78:	970e      	str	r7, [sp, #56]	; 0x38
   d5c7a:	463b      	mov	r3, r7
   d5c7c:	463a      	mov	r2, r7
   d5c7e:	4804      	ldr	r0, [pc, #16]	; (d5c90 <_Z3numiiiii+0x16ec>)
   d5c80:	b289      	uxth	r1, r1
    }
}
}                           
   d5c82:	b005      	add	sp, #20
   d5c84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5c88:	f008 b9e6 	b.w	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d5c8c:	80000001 	.word	0x80000001
   d5c90:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+30,0,0,0);
    }
}
if(num == 7)
{
    if((pix/8)%2 == 1)
   d5c94:	4bc4      	ldr	r3, [pc, #784]	; (d5fa8 <_Z3numiiiii+0x1a04>)
   d5c96:	2708      	movs	r7, #8
   d5c98:	fb94 f7f7 	sdiv	r7, r4, r7
   d5c9c:	403b      	ands	r3, r7
   d5c9e:	2b00      	cmp	r3, #0
   d5ca0:	bfbe      	ittt	lt
   d5ca2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5ca6:	f063 0301 	ornlt	r3, r3, #1
   d5caa:	3301      	addlt	r3, #1
   d5cac:	2b01      	cmp	r3, #1
   d5cae:	f040 80d0 	bne.w	d5e52 <_Z3numiiiii+0x18ae>
    {
        strip.setPixelColor(pix,R,G,B);
   d5cb2:	fa1f f884 	uxth.w	r8, r4
   d5cb6:	fa5f f985 	uxtb.w	r9, r5
   d5cba:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d5cbe:	48bb      	ldr	r0, [pc, #748]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5cc0:	f8cd b000 	str.w	fp, [sp]
   d5cc4:	fa5f fa86 	uxtb.w	sl, r6
   d5cc8:	464a      	mov	r2, r9
   d5cca:	4653      	mov	r3, sl
   d5ccc:	4641      	mov	r1, r8
   d5cce:	f008 f9c3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5cd2:	f108 0101 	add.w	r1, r8, #1
   d5cd6:	464a      	mov	r2, r9
   d5cd8:	4653      	mov	r3, sl
   d5cda:	b289      	uxth	r1, r1
   d5cdc:	48b3      	ldr	r0, [pc, #716]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5cde:	f8cd b000 	str.w	fp, [sp]
   d5ce2:	f008 f9b9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5ce6:	f108 0110 	add.w	r1, r8, #16
   d5cea:	464a      	mov	r2, r9
   d5cec:	4653      	mov	r3, sl
   d5cee:	b289      	uxth	r1, r1
   d5cf0:	48ae      	ldr	r0, [pc, #696]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5cf2:	f8cd b000 	str.w	fp, [sp]
   d5cf6:	f008 f9af 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5cfa:	f108 0111 	add.w	r1, r8, #17
   d5cfe:	464a      	mov	r2, r9
   d5d00:	4653      	mov	r3, sl
   d5d02:	b289      	uxth	r1, r1
   d5d04:	48a9      	ldr	r0, [pc, #676]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d06:	f8cd b000 	str.w	fp, [sp]
   d5d0a:	f008 f9a5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5d0e:	f108 0117 	add.w	r1, r8, #23
   d5d12:	464a      	mov	r2, r9
   d5d14:	4653      	mov	r3, sl
   d5d16:	b289      	uxth	r1, r1
   d5d18:	48a4      	ldr	r0, [pc, #656]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d1a:	f8cd b000 	str.w	fp, [sp]
   d5d1e:	f008 f99b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5d22:	f108 0116 	add.w	r1, r8, #22
   d5d26:	464a      	mov	r2, r9
   d5d28:	4653      	mov	r3, sl
   d5d2a:	b289      	uxth	r1, r1
   d5d2c:	489f      	ldr	r0, [pc, #636]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d2e:	f8cd b000 	str.w	fp, [sp]
   d5d32:	f008 f991 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5d36:	f108 0115 	add.w	r1, r8, #21
   d5d3a:	464a      	mov	r2, r9
   d5d3c:	4653      	mov	r3, sl
   d5d3e:	b289      	uxth	r1, r1
   d5d40:	489a      	ldr	r0, [pc, #616]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d42:	f8cd b000 	str.w	fp, [sp]
   d5d46:	f008 f987 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5d4a:	f108 0114 	add.w	r1, r8, #20
   d5d4e:	464a      	mov	r2, r9
   d5d50:	4653      	mov	r3, sl
   d5d52:	b289      	uxth	r1, r1
   d5d54:	4895      	ldr	r0, [pc, #596]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d56:	f8cd b000 	str.w	fp, [sp]
   d5d5a:	f008 f97d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5d5e:	f108 0113 	add.w	r1, r8, #19
   d5d62:	464a      	mov	r2, r9
   d5d64:	4653      	mov	r3, sl
   d5d66:	b289      	uxth	r1, r1
   d5d68:	4890      	ldr	r0, [pc, #576]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d6a:	f8cd b000 	str.w	fp, [sp]
   d5d6e:	f008 f973 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5d72:	f108 0112 	add.w	r1, r8, #18
   d5d76:	464a      	mov	r2, r9
   d5d78:	4653      	mov	r3, sl
   d5d7a:	b289      	uxth	r1, r1
   d5d7c:	488b      	ldr	r0, [pc, #556]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d7e:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d5d82:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d5d86:	f008 f967 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d5d8a:	f108 31ff 	add.w	r1, r8, #4294967295
   d5d8e:	464b      	mov	r3, r9
   d5d90:	464a      	mov	r2, r9
   d5d92:	b289      	uxth	r1, r1
   d5d94:	4885      	ldr	r0, [pc, #532]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5d96:	f8cd 9000 	str.w	r9, [sp]
   d5d9a:	f008 f95d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d5d9e:	f1a8 0102 	sub.w	r1, r8, #2
   d5da2:	464b      	mov	r3, r9
   d5da4:	464a      	mov	r2, r9
   d5da6:	b289      	uxth	r1, r1
   d5da8:	4880      	ldr	r0, [pc, #512]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5daa:	f8cd 9000 	str.w	r9, [sp]
   d5dae:	f008 f953 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d5db2:	f1a8 0103 	sub.w	r1, r8, #3
   d5db6:	464b      	mov	r3, r9
   d5db8:	464a      	mov	r2, r9
   d5dba:	b289      	uxth	r1, r1
   d5dbc:	487b      	ldr	r0, [pc, #492]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5dbe:	f8cd 9000 	str.w	r9, [sp]
   d5dc2:	f008 f949 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d5dc6:	f1a8 0104 	sub.w	r1, r8, #4
   d5dca:	464b      	mov	r3, r9
   d5dcc:	464a      	mov	r2, r9
   d5dce:	b289      	uxth	r1, r1
   d5dd0:	4876      	ldr	r0, [pc, #472]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5dd2:	f8cd 9000 	str.w	r9, [sp]
   d5dd6:	f008 f93f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5dda:	f1a8 0105 	sub.w	r1, r8, #5
   d5dde:	464b      	mov	r3, r9
   d5de0:	464a      	mov	r2, r9
   d5de2:	b289      	uxth	r1, r1
   d5de4:	4871      	ldr	r0, [pc, #452]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5de6:	f8cd 9000 	str.w	r9, [sp]
   d5dea:	f008 f935 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d5dee:	f1a8 0106 	sub.w	r1, r8, #6
   d5df2:	464b      	mov	r3, r9
   d5df4:	464a      	mov	r2, r9
   d5df6:	b289      	uxth	r1, r1
   d5df8:	486c      	ldr	r0, [pc, #432]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5dfa:	f8cd 9000 	str.w	r9, [sp]
   d5dfe:	f008 f92b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d5e02:	f108 0107 	add.w	r1, r8, #7
   d5e06:	464b      	mov	r3, r9
   d5e08:	464a      	mov	r2, r9
   d5e0a:	b289      	uxth	r1, r1
   d5e0c:	4867      	ldr	r0, [pc, #412]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e0e:	f8cd 9000 	str.w	r9, [sp]
   d5e12:	f008 f921 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d5e16:	f108 010a 	add.w	r1, r8, #10
   d5e1a:	464b      	mov	r3, r9
   d5e1c:	464a      	mov	r2, r9
   d5e1e:	b289      	uxth	r1, r1
   d5e20:	4862      	ldr	r0, [pc, #392]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e22:	f8cd 9000 	str.w	r9, [sp]
   d5e26:	f008 f917 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5e2a:	f108 0104 	add.w	r1, r8, #4
   d5e2e:	464b      	mov	r3, r9
   d5e30:	464a      	mov	r2, r9
   d5e32:	b289      	uxth	r1, r1
   d5e34:	485d      	ldr	r0, [pc, #372]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e36:	f8cd 9000 	str.w	r9, [sp]
   d5e3a:	f008 f90d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d5e3e:	f108 010d 	add.w	r1, r8, #13
   d5e42:	f8cd 9000 	str.w	r9, [sp]
   d5e46:	464b      	mov	r3, r9
   d5e48:	464a      	mov	r2, r9
   d5e4a:	b289      	uxth	r1, r1
   d5e4c:	4857      	ldr	r0, [pc, #348]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e4e:	f008 f903 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5e52:	f017 0701 	ands.w	r7, r7, #1
   d5e56:	f040 83d1 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5e5a:	b2a4      	uxth	r4, r4
   d5e5c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5e60:	4852      	ldr	r0, [pc, #328]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e62:	f8cd 8000 	str.w	r8, [sp]
   d5e66:	b2ed      	uxtb	r5, r5
   d5e68:	b2f6      	uxtb	r6, r6
   d5e6a:	4633      	mov	r3, r6
   d5e6c:	462a      	mov	r2, r5
   d5e6e:	4621      	mov	r1, r4
   d5e70:	f008 f8f2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5e74:	f104 010f 	add.w	r1, r4, #15
   d5e78:	4633      	mov	r3, r6
   d5e7a:	462a      	mov	r2, r5
   d5e7c:	b289      	uxth	r1, r1
   d5e7e:	484b      	ldr	r0, [pc, #300]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e80:	f8cd 8000 	str.w	r8, [sp]
   d5e84:	f008 f8e8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5e88:	f104 0110 	add.w	r1, r4, #16
   d5e8c:	4633      	mov	r3, r6
   d5e8e:	462a      	mov	r2, r5
   d5e90:	b289      	uxth	r1, r1
   d5e92:	4846      	ldr	r0, [pc, #280]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5e94:	f8cd 8000 	str.w	r8, [sp]
   d5e98:	f008 f8de 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5e9c:	f104 011f 	add.w	r1, r4, #31
   d5ea0:	4633      	mov	r3, r6
   d5ea2:	462a      	mov	r2, r5
   d5ea4:	b289      	uxth	r1, r1
   d5ea6:	4841      	ldr	r0, [pc, #260]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5ea8:	f8cd 8000 	str.w	r8, [sp]
   d5eac:	f008 f8d4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d5eb0:	f104 011e 	add.w	r1, r4, #30
   d5eb4:	4633      	mov	r3, r6
   d5eb6:	462a      	mov	r2, r5
   d5eb8:	b289      	uxth	r1, r1
   d5eba:	483c      	ldr	r0, [pc, #240]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5ebc:	f8cd 8000 	str.w	r8, [sp]
   d5ec0:	f008 f8ca 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5ec4:	f104 011d 	add.w	r1, r4, #29
   d5ec8:	4633      	mov	r3, r6
   d5eca:	462a      	mov	r2, r5
   d5ecc:	b289      	uxth	r1, r1
   d5ece:	4837      	ldr	r0, [pc, #220]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5ed0:	f8cd 8000 	str.w	r8, [sp]
   d5ed4:	f008 f8c0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5ed8:	f104 011c 	add.w	r1, r4, #28
   d5edc:	4633      	mov	r3, r6
   d5ede:	462a      	mov	r2, r5
   d5ee0:	b289      	uxth	r1, r1
   d5ee2:	4832      	ldr	r0, [pc, #200]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5ee4:	f8cd 8000 	str.w	r8, [sp]
   d5ee8:	f008 f8b6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5eec:	f104 011b 	add.w	r1, r4, #27
   d5ef0:	4633      	mov	r3, r6
   d5ef2:	462a      	mov	r2, r5
   d5ef4:	b289      	uxth	r1, r1
   d5ef6:	482d      	ldr	r0, [pc, #180]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5ef8:	f8cd 8000 	str.w	r8, [sp]
   d5efc:	f008 f8ac 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5f00:	f104 011a 	add.w	r1, r4, #26
   d5f04:	4633      	mov	r3, r6
   d5f06:	462a      	mov	r2, r5
   d5f08:	b289      	uxth	r1, r1
   d5f0a:	4828      	ldr	r0, [pc, #160]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f0c:	f8cd 8000 	str.w	r8, [sp]
   d5f10:	f008 f8a2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5f14:	f104 0119 	add.w	r1, r4, #25
   d5f18:	4633      	mov	r3, r6
   d5f1a:	462a      	mov	r2, r5
   d5f1c:	b289      	uxth	r1, r1
   d5f1e:	4823      	ldr	r0, [pc, #140]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f20:	f8cd 8000 	str.w	r8, [sp]
   d5f24:	f008 f898 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d5f28:	1c61      	adds	r1, r4, #1
   d5f2a:	463b      	mov	r3, r7
   d5f2c:	463a      	mov	r2, r7
   d5f2e:	b289      	uxth	r1, r1
   d5f30:	481e      	ldr	r0, [pc, #120]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f32:	9700      	str	r7, [sp, #0]
   d5f34:	f008 f890 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d5f38:	1ca1      	adds	r1, r4, #2
   d5f3a:	463b      	mov	r3, r7
   d5f3c:	463a      	mov	r2, r7
   d5f3e:	b289      	uxth	r1, r1
   d5f40:	481a      	ldr	r0, [pc, #104]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f42:	9700      	str	r7, [sp, #0]
   d5f44:	f008 f888 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d5f48:	1ce1      	adds	r1, r4, #3
   d5f4a:	463b      	mov	r3, r7
   d5f4c:	463a      	mov	r2, r7
   d5f4e:	b289      	uxth	r1, r1
   d5f50:	4816      	ldr	r0, [pc, #88]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f52:	9700      	str	r7, [sp, #0]
   d5f54:	f008 f880 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5f58:	1d21      	adds	r1, r4, #4
   d5f5a:	463b      	mov	r3, r7
   d5f5c:	463a      	mov	r2, r7
   d5f5e:	b289      	uxth	r1, r1
   d5f60:	4812      	ldr	r0, [pc, #72]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f62:	9700      	str	r7, [sp, #0]
   d5f64:	f008 f878 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5f68:	1d61      	adds	r1, r4, #5
   d5f6a:	463b      	mov	r3, r7
   d5f6c:	463a      	mov	r2, r7
   d5f6e:	b289      	uxth	r1, r1
   d5f70:	480e      	ldr	r0, [pc, #56]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f72:	9700      	str	r7, [sp, #0]
   d5f74:	f008 f870 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5f78:	1da1      	adds	r1, r4, #6
   d5f7a:	463b      	mov	r3, r7
   d5f7c:	463a      	mov	r2, r7
   d5f7e:	b289      	uxth	r1, r1
   d5f80:	480a      	ldr	r0, [pc, #40]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f82:	9700      	str	r7, [sp, #0]
   d5f84:	f008 f868 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d5f88:	f104 0109 	add.w	r1, r4, #9
   d5f8c:	463b      	mov	r3, r7
   d5f8e:	463a      	mov	r2, r7
   d5f90:	b289      	uxth	r1, r1
   d5f92:	9700      	str	r7, [sp, #0]
   d5f94:	4805      	ldr	r0, [pc, #20]	; (d5fac <_Z3numiiiii+0x1a08>)
   d5f96:	f008 f85f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d5f9a:	f104 0116 	add.w	r1, r4, #22
   d5f9e:	9700      	str	r7, [sp, #0]
   d5fa0:	463b      	mov	r3, r7
   d5fa2:	463a      	mov	r2, r7
   d5fa4:	e18f      	b.n	d62c6 <_Z3numiiiii+0x1d22>
   d5fa6:	bf00      	nop
   d5fa8:	80000001 	.word	0x80000001
   d5fac:	2003e328 	.word	0x2003e328
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
    }
}
if(num == 0)
   d5fb0:	2800      	cmp	r0, #0
   d5fb2:	f040 8323 	bne.w	d65fc <_Z3numiiiii+0x2058>
{
    if((pix/8)%2 == 1)
   d5fb6:	4bcc      	ldr	r3, [pc, #816]	; (d62e8 <_Z3numiiiii+0x1d44>)
   d5fb8:	f04f 0b08 	mov.w	fp, #8
   d5fbc:	fb94 fbfb 	sdiv	fp, r4, fp
   d5fc0:	ea0b 0303 	and.w	r3, fp, r3
   d5fc4:	2b00      	cmp	r3, #0
   d5fc6:	bfbe      	ittt	lt
   d5fc8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5fcc:	f063 0301 	ornlt	r3, r3, #1
   d5fd0:	3301      	addlt	r3, #1
   d5fd2:	2b01      	cmp	r3, #1
   d5fd4:	f040 80c6 	bne.w	d6164 <_Z3numiiiii+0x1bc0>
    {
        strip.setPixelColor(pix,R,G,B);
   d5fd8:	b2a7      	uxth	r7, r4
   d5fda:	fa5f f885 	uxtb.w	r8, r5
   d5fde:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d5fe2:	48c2      	ldr	r0, [pc, #776]	; (d62ec <_Z3numiiiii+0x1d48>)
   d5fe4:	f8cd a000 	str.w	sl, [sp]
   d5fe8:	fa5f f986 	uxtb.w	r9, r6
   d5fec:	4642      	mov	r2, r8
   d5fee:	464b      	mov	r3, r9
   d5ff0:	4639      	mov	r1, r7
   d5ff2:	f008 f831 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d5ff6:	1e79      	subs	r1, r7, #1
   d5ff8:	4642      	mov	r2, r8
   d5ffa:	464b      	mov	r3, r9
   d5ffc:	b289      	uxth	r1, r1
   d5ffe:	48bb      	ldr	r0, [pc, #748]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6000:	f8cd a000 	str.w	sl, [sp]
   d6004:	f008 f828 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d6008:	1eb9      	subs	r1, r7, #2
   d600a:	4642      	mov	r2, r8
   d600c:	464b      	mov	r3, r9
   d600e:	b289      	uxth	r1, r1
   d6010:	48b6      	ldr	r0, [pc, #728]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6012:	f8cd a000 	str.w	sl, [sp]
   d6016:	f008 f81f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d601a:	1ef9      	subs	r1, r7, #3
   d601c:	4642      	mov	r2, r8
   d601e:	464b      	mov	r3, r9
   d6020:	b289      	uxth	r1, r1
   d6022:	48b2      	ldr	r0, [pc, #712]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6024:	f8cd a000 	str.w	sl, [sp]
   d6028:	f008 f816 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d602c:	1f39      	subs	r1, r7, #4
   d602e:	4642      	mov	r2, r8
   d6030:	464b      	mov	r3, r9
   d6032:	b289      	uxth	r1, r1
   d6034:	48ad      	ldr	r0, [pc, #692]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6036:	f8cd a000 	str.w	sl, [sp]
   d603a:	f008 f80d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d603e:	1f79      	subs	r1, r7, #5
   d6040:	4642      	mov	r2, r8
   d6042:	464b      	mov	r3, r9
   d6044:	b289      	uxth	r1, r1
   d6046:	48a9      	ldr	r0, [pc, #676]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6048:	f8cd a000 	str.w	sl, [sp]
   d604c:	f008 f804 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d6050:	1fb9      	subs	r1, r7, #6
   d6052:	4642      	mov	r2, r8
   d6054:	464b      	mov	r3, r9
   d6056:	b289      	uxth	r1, r1
   d6058:	48a4      	ldr	r0, [pc, #656]	; (d62ec <_Z3numiiiii+0x1d48>)
   d605a:	f8cd a000 	str.w	sl, [sp]
   d605e:	f007 fffb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d6062:	1c79      	adds	r1, r7, #1
   d6064:	4642      	mov	r2, r8
   d6066:	464b      	mov	r3, r9
   d6068:	b289      	uxth	r1, r1
   d606a:	48a0      	ldr	r0, [pc, #640]	; (d62ec <_Z3numiiiii+0x1d48>)
   d606c:	f8cd a000 	str.w	sl, [sp]
   d6070:	f007 fff2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d6074:	1df9      	adds	r1, r7, #7
   d6076:	4642      	mov	r2, r8
   d6078:	464b      	mov	r3, r9
   d607a:	b289      	uxth	r1, r1
   d607c:	489b      	ldr	r0, [pc, #620]	; (d62ec <_Z3numiiiii+0x1d48>)
   d607e:	f8cd a000 	str.w	sl, [sp]
   d6082:	f007 ffe9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d6086:	f107 0110 	add.w	r1, r7, #16
   d608a:	4642      	mov	r2, r8
   d608c:	464b      	mov	r3, r9
   d608e:	b289      	uxth	r1, r1
   d6090:	4896      	ldr	r0, [pc, #600]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6092:	f8cd a000 	str.w	sl, [sp]
   d6096:	f007 ffdf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d609a:	f107 010a 	add.w	r1, r7, #10
   d609e:	4642      	mov	r2, r8
   d60a0:	464b      	mov	r3, r9
   d60a2:	b289      	uxth	r1, r1
   d60a4:	4891      	ldr	r0, [pc, #580]	; (d62ec <_Z3numiiiii+0x1d48>)
   d60a6:	f8cd a000 	str.w	sl, [sp]
   d60aa:	f007 ffd5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d60ae:	f107 0111 	add.w	r1, r7, #17
   d60b2:	4642      	mov	r2, r8
   d60b4:	464b      	mov	r3, r9
   d60b6:	b289      	uxth	r1, r1
   d60b8:	488c      	ldr	r0, [pc, #560]	; (d62ec <_Z3numiiiii+0x1d48>)
   d60ba:	f8cd a000 	str.w	sl, [sp]
   d60be:	f007 ffcb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d60c2:	f107 0112 	add.w	r1, r7, #18
   d60c6:	4642      	mov	r2, r8
   d60c8:	464b      	mov	r3, r9
   d60ca:	b289      	uxth	r1, r1
   d60cc:	4887      	ldr	r0, [pc, #540]	; (d62ec <_Z3numiiiii+0x1d48>)
   d60ce:	f8cd a000 	str.w	sl, [sp]
   d60d2:	f007 ffc1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d60d6:	f107 0113 	add.w	r1, r7, #19
   d60da:	4642      	mov	r2, r8
   d60dc:	464b      	mov	r3, r9
   d60de:	b289      	uxth	r1, r1
   d60e0:	4882      	ldr	r0, [pc, #520]	; (d62ec <_Z3numiiiii+0x1d48>)
   d60e2:	f8cd a000 	str.w	sl, [sp]
   d60e6:	f007 ffb7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d60ea:	f107 0114 	add.w	r1, r7, #20
   d60ee:	4642      	mov	r2, r8
   d60f0:	464b      	mov	r3, r9
   d60f2:	b289      	uxth	r1, r1
   d60f4:	487d      	ldr	r0, [pc, #500]	; (d62ec <_Z3numiiiii+0x1d48>)
   d60f6:	f8cd a000 	str.w	sl, [sp]
   d60fa:	f007 ffad 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d60fe:	f107 0115 	add.w	r1, r7, #21
   d6102:	4642      	mov	r2, r8
   d6104:	464b      	mov	r3, r9
   d6106:	b289      	uxth	r1, r1
   d6108:	4878      	ldr	r0, [pc, #480]	; (d62ec <_Z3numiiiii+0x1d48>)
   d610a:	f8cd a000 	str.w	sl, [sp]
   d610e:	f007 ffa3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6112:	f107 0116 	add.w	r1, r7, #22
   d6116:	4642      	mov	r2, r8
   d6118:	464b      	mov	r3, r9
   d611a:	b289      	uxth	r1, r1
   d611c:	4873      	ldr	r0, [pc, #460]	; (d62ec <_Z3numiiiii+0x1d48>)
   d611e:	f8cd a000 	str.w	sl, [sp]
   d6122:	f007 ff99 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d6126:	f107 0117 	add.w	r1, r7, #23
   d612a:	4642      	mov	r2, r8
   d612c:	464b      	mov	r3, r9
   d612e:	b289      	uxth	r1, r1
   d6130:	486e      	ldr	r0, [pc, #440]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6132:	f8cd a000 	str.w	sl, [sp]
   d6136:	f007 ff8f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d613a:	f04f 0800 	mov.w	r8, #0
   d613e:	1d39      	adds	r1, r7, #4
   d6140:	4643      	mov	r3, r8
   d6142:	4642      	mov	r2, r8
   d6144:	b289      	uxth	r1, r1
   d6146:	4869      	ldr	r0, [pc, #420]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6148:	f8cd 8000 	str.w	r8, [sp]
   d614c:	f007 ff84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d6150:	f107 010d 	add.w	r1, r7, #13
   d6154:	f8cd 8000 	str.w	r8, [sp]
   d6158:	4643      	mov	r3, r8
   d615a:	4642      	mov	r2, r8
   d615c:	b289      	uxth	r1, r1
   d615e:	4863      	ldr	r0, [pc, #396]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6160:	f007 ff7a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d6164:	f01b 0701 	ands.w	r7, fp, #1
   d6168:	f040 8248 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d616c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6170:	485e      	ldr	r0, [pc, #376]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6172:	f8cd 8000 	str.w	r8, [sp]
   d6176:	b2a4      	uxth	r4, r4
   d6178:	b2ed      	uxtb	r5, r5
   d617a:	b2f6      	uxtb	r6, r6
   d617c:	4633      	mov	r3, r6
   d617e:	462a      	mov	r2, r5
   d6180:	4621      	mov	r1, r4
   d6182:	f007 ff69 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d6186:	1c61      	adds	r1, r4, #1
   d6188:	4633      	mov	r3, r6
   d618a:	462a      	mov	r2, r5
   d618c:	b289      	uxth	r1, r1
   d618e:	4857      	ldr	r0, [pc, #348]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6190:	f8cd 8000 	str.w	r8, [sp]
   d6194:	f007 ff60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d6198:	1ca1      	adds	r1, r4, #2
   d619a:	4633      	mov	r3, r6
   d619c:	462a      	mov	r2, r5
   d619e:	b289      	uxth	r1, r1
   d61a0:	4852      	ldr	r0, [pc, #328]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61a2:	f8cd 8000 	str.w	r8, [sp]
   d61a6:	f007 ff57 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d61aa:	1ce1      	adds	r1, r4, #3
   d61ac:	4633      	mov	r3, r6
   d61ae:	462a      	mov	r2, r5
   d61b0:	b289      	uxth	r1, r1
   d61b2:	484e      	ldr	r0, [pc, #312]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61b4:	f8cd 8000 	str.w	r8, [sp]
   d61b8:	f007 ff4e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d61bc:	1d21      	adds	r1, r4, #4
   d61be:	4633      	mov	r3, r6
   d61c0:	462a      	mov	r2, r5
   d61c2:	b289      	uxth	r1, r1
   d61c4:	4849      	ldr	r0, [pc, #292]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61c6:	f8cd 8000 	str.w	r8, [sp]
   d61ca:	f007 ff45 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d61ce:	1d61      	adds	r1, r4, #5
   d61d0:	4633      	mov	r3, r6
   d61d2:	462a      	mov	r2, r5
   d61d4:	b289      	uxth	r1, r1
   d61d6:	4845      	ldr	r0, [pc, #276]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61d8:	f8cd 8000 	str.w	r8, [sp]
   d61dc:	f007 ff3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d61e0:	1da1      	adds	r1, r4, #6
   d61e2:	4633      	mov	r3, r6
   d61e4:	462a      	mov	r2, r5
   d61e6:	b289      	uxth	r1, r1
   d61e8:	4840      	ldr	r0, [pc, #256]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61ea:	f8cd 8000 	str.w	r8, [sp]
   d61ee:	f007 ff33 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d61f2:	f104 0109 	add.w	r1, r4, #9
   d61f6:	4633      	mov	r3, r6
   d61f8:	462a      	mov	r2, r5
   d61fa:	b289      	uxth	r1, r1
   d61fc:	483b      	ldr	r0, [pc, #236]	; (d62ec <_Z3numiiiii+0x1d48>)
   d61fe:	f8cd 8000 	str.w	r8, [sp]
   d6202:	f007 ff29 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6206:	f104 0116 	add.w	r1, r4, #22
   d620a:	4633      	mov	r3, r6
   d620c:	462a      	mov	r2, r5
   d620e:	b289      	uxth	r1, r1
   d6210:	4836      	ldr	r0, [pc, #216]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6212:	f8cd 8000 	str.w	r8, [sp]
   d6216:	f007 ff1f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d621a:	f104 0119 	add.w	r1, r4, #25
   d621e:	4633      	mov	r3, r6
   d6220:	462a      	mov	r2, r5
   d6222:	b289      	uxth	r1, r1
   d6224:	4831      	ldr	r0, [pc, #196]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6226:	f8cd 8000 	str.w	r8, [sp]
   d622a:	f007 ff15 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d622e:	f104 011a 	add.w	r1, r4, #26
   d6232:	4633      	mov	r3, r6
   d6234:	462a      	mov	r2, r5
   d6236:	b289      	uxth	r1, r1
   d6238:	482c      	ldr	r0, [pc, #176]	; (d62ec <_Z3numiiiii+0x1d48>)
   d623a:	f8cd 8000 	str.w	r8, [sp]
   d623e:	f007 ff0b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d6242:	f104 011b 	add.w	r1, r4, #27
   d6246:	4633      	mov	r3, r6
   d6248:	462a      	mov	r2, r5
   d624a:	b289      	uxth	r1, r1
   d624c:	4827      	ldr	r0, [pc, #156]	; (d62ec <_Z3numiiiii+0x1d48>)
   d624e:	f8cd 8000 	str.w	r8, [sp]
   d6252:	f007 ff01 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d6256:	f104 011c 	add.w	r1, r4, #28
   d625a:	4633      	mov	r3, r6
   d625c:	462a      	mov	r2, r5
   d625e:	b289      	uxth	r1, r1
   d6260:	4822      	ldr	r0, [pc, #136]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6262:	f8cd 8000 	str.w	r8, [sp]
   d6266:	f007 fef7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d626a:	f104 011d 	add.w	r1, r4, #29
   d626e:	4633      	mov	r3, r6
   d6270:	462a      	mov	r2, r5
   d6272:	b289      	uxth	r1, r1
   d6274:	481d      	ldr	r0, [pc, #116]	; (d62ec <_Z3numiiiii+0x1d48>)
   d6276:	f8cd 8000 	str.w	r8, [sp]
   d627a:	f007 feed 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d627e:	f104 011e 	add.w	r1, r4, #30
   d6282:	4633      	mov	r3, r6
   d6284:	462a      	mov	r2, r5
   d6286:	b289      	uxth	r1, r1
   d6288:	4818      	ldr	r0, [pc, #96]	; (d62ec <_Z3numiiiii+0x1d48>)
   d628a:	f8cd 8000 	str.w	r8, [sp]
   d628e:	f007 fee3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d6292:	f104 011f 	add.w	r1, r4, #31
   d6296:	4633      	mov	r3, r6
   d6298:	462a      	mov	r2, r5
   d629a:	b289      	uxth	r1, r1
   d629c:	4813      	ldr	r0, [pc, #76]	; (d62ec <_Z3numiiiii+0x1d48>)
   d629e:	f8cd 8000 	str.w	r8, [sp]
   d62a2:	f007 fed9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d62a6:	f104 010f 	add.w	r1, r4, #15
   d62aa:	4633      	mov	r3, r6
   d62ac:	462a      	mov	r2, r5
   d62ae:	b289      	uxth	r1, r1
   d62b0:	f8cd 8000 	str.w	r8, [sp]
   d62b4:	480d      	ldr	r0, [pc, #52]	; (d62ec <_Z3numiiiii+0x1d48>)
   d62b6:	f007 fecf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d62ba:	f104 0110 	add.w	r1, r4, #16
   d62be:	f8cd 8000 	str.w	r8, [sp]
   d62c2:	4633      	mov	r3, r6
   d62c4:	462a      	mov	r2, r5
   d62c6:	b289      	uxth	r1, r1
   d62c8:	4808      	ldr	r0, [pc, #32]	; (d62ec <_Z3numiiiii+0x1d48>)
   d62ca:	f007 fec5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+12,0,0,0);
   d62ce:	f104 010c 	add.w	r1, r4, #12
   d62d2:	b289      	uxth	r1, r1
   d62d4:	9700      	str	r7, [sp, #0]
   d62d6:	463b      	mov	r3, r7
   d62d8:	463a      	mov	r2, r7
   d62da:	4804      	ldr	r0, [pc, #16]	; (d62ec <_Z3numiiiii+0x1d48>)
   d62dc:	f007 febc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d62e0:	f104 0113 	add.w	r1, r4, #19
   d62e4:	e4c8      	b.n	d5c78 <_Z3numiiiii+0x16d4>
   d62e6:	bf00      	nop
   d62e8:	80000001 	.word	0x80000001
   d62ec:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
{
    if((pix/8)%2 == 1)
   d62f0:	4bc4      	ldr	r3, [pc, #784]	; (d6604 <_Z3numiiiii+0x2060>)
   d62f2:	fb94 fbf0 	sdiv	fp, r4, r0
   d62f6:	ea0b 0303 	and.w	r3, fp, r3
   d62fa:	2b00      	cmp	r3, #0
   d62fc:	bfbe      	ittt	lt
   d62fe:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6302:	f063 0301 	ornlt	r3, r3, #1
   d6306:	3301      	addlt	r3, #1
   d6308:	2b01      	cmp	r3, #1
   d630a:	f040 80c4 	bne.w	d6496 <_Z3numiiiii+0x1ef2>
    {
        strip.setPixelColor(pix,R,G,B);
   d630e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6312:	48bd      	ldr	r0, [pc, #756]	; (d6608 <_Z3numiiiii+0x2064>)
   d6314:	f8cd a000 	str.w	sl, [sp]
   d6318:	b2a7      	uxth	r7, r4
   d631a:	fa5f f885 	uxtb.w	r8, r5
   d631e:	fa5f f986 	uxtb.w	r9, r6
   d6322:	464b      	mov	r3, r9
   d6324:	4642      	mov	r2, r8
   d6326:	4639      	mov	r1, r7
   d6328:	f007 fe96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d632c:	1c79      	adds	r1, r7, #1
   d632e:	464b      	mov	r3, r9
   d6330:	4642      	mov	r2, r8
   d6332:	b289      	uxth	r1, r1
   d6334:	48b4      	ldr	r0, [pc, #720]	; (d6608 <_Z3numiiiii+0x2064>)
   d6336:	f8cd a000 	str.w	sl, [sp]
   d633a:	f007 fe8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d633e:	f107 0110 	add.w	r1, r7, #16
   d6342:	464b      	mov	r3, r9
   d6344:	4642      	mov	r2, r8
   d6346:	b289      	uxth	r1, r1
   d6348:	48af      	ldr	r0, [pc, #700]	; (d6608 <_Z3numiiiii+0x2064>)
   d634a:	f8cd a000 	str.w	sl, [sp]
   d634e:	f007 fe83 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d6352:	f107 0111 	add.w	r1, r7, #17
   d6356:	464b      	mov	r3, r9
   d6358:	4642      	mov	r2, r8
   d635a:	b289      	uxth	r1, r1
   d635c:	48aa      	ldr	r0, [pc, #680]	; (d6608 <_Z3numiiiii+0x2064>)
   d635e:	f8cd a000 	str.w	sl, [sp]
   d6362:	f007 fe79 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d6366:	1e79      	subs	r1, r7, #1
   d6368:	464b      	mov	r3, r9
   d636a:	4642      	mov	r2, r8
   d636c:	b289      	uxth	r1, r1
   d636e:	48a6      	ldr	r0, [pc, #664]	; (d6608 <_Z3numiiiii+0x2064>)
   d6370:	f8cd a000 	str.w	sl, [sp]
   d6374:	f007 fe70 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d6378:	1eb9      	subs	r1, r7, #2
   d637a:	464b      	mov	r3, r9
   d637c:	4642      	mov	r2, r8
   d637e:	b289      	uxth	r1, r1
   d6380:	48a1      	ldr	r0, [pc, #644]	; (d6608 <_Z3numiiiii+0x2064>)
   d6382:	f8cd a000 	str.w	sl, [sp]
   d6386:	f007 fe67 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d638a:	1ef9      	subs	r1, r7, #3
   d638c:	464b      	mov	r3, r9
   d638e:	4642      	mov	r2, r8
   d6390:	b289      	uxth	r1, r1
   d6392:	489d      	ldr	r0, [pc, #628]	; (d6608 <_Z3numiiiii+0x2064>)
   d6394:	f8cd a000 	str.w	sl, [sp]
   d6398:	f007 fe5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d639c:	1f39      	subs	r1, r7, #4
   d639e:	464b      	mov	r3, r9
   d63a0:	4642      	mov	r2, r8
   d63a2:	b289      	uxth	r1, r1
   d63a4:	4898      	ldr	r0, [pc, #608]	; (d6608 <_Z3numiiiii+0x2064>)
   d63a6:	f8cd a000 	str.w	sl, [sp]
   d63aa:	f007 fe55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d63ae:	1f79      	subs	r1, r7, #5
   d63b0:	464b      	mov	r3, r9
   d63b2:	4642      	mov	r2, r8
   d63b4:	b289      	uxth	r1, r1
   d63b6:	4894      	ldr	r0, [pc, #592]	; (d6608 <_Z3numiiiii+0x2064>)
   d63b8:	f8cd a000 	str.w	sl, [sp]
   d63bc:	f007 fe4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d63c0:	1fb9      	subs	r1, r7, #6
   d63c2:	464b      	mov	r3, r9
   d63c4:	4642      	mov	r2, r8
   d63c6:	b289      	uxth	r1, r1
   d63c8:	488f      	ldr	r0, [pc, #572]	; (d6608 <_Z3numiiiii+0x2064>)
   d63ca:	f8cd a000 	str.w	sl, [sp]
   d63ce:	f007 fe43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d63d2:	1df9      	adds	r1, r7, #7
   d63d4:	464b      	mov	r3, r9
   d63d6:	4642      	mov	r2, r8
   d63d8:	b289      	uxth	r1, r1
   d63da:	488b      	ldr	r0, [pc, #556]	; (d6608 <_Z3numiiiii+0x2064>)
   d63dc:	f8cd a000 	str.w	sl, [sp]
   d63e0:	f007 fe3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d63e4:	f107 010a 	add.w	r1, r7, #10
   d63e8:	464b      	mov	r3, r9
   d63ea:	4642      	mov	r2, r8
   d63ec:	b289      	uxth	r1, r1
   d63ee:	4886      	ldr	r0, [pc, #536]	; (d6608 <_Z3numiiiii+0x2064>)
   d63f0:	f8cd a000 	str.w	sl, [sp]
   d63f4:	f007 fe30 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d63f8:	f107 0117 	add.w	r1, r7, #23
   d63fc:	464b      	mov	r3, r9
   d63fe:	4642      	mov	r2, r8
   d6400:	b289      	uxth	r1, r1
   d6402:	4881      	ldr	r0, [pc, #516]	; (d6608 <_Z3numiiiii+0x2064>)
   d6404:	f8cd a000 	str.w	sl, [sp]
   d6408:	f007 fe26 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d640c:	f107 0116 	add.w	r1, r7, #22
   d6410:	464b      	mov	r3, r9
   d6412:	4642      	mov	r2, r8
   d6414:	b289      	uxth	r1, r1
   d6416:	487c      	ldr	r0, [pc, #496]	; (d6608 <_Z3numiiiii+0x2064>)
   d6418:	f8cd a000 	str.w	sl, [sp]
   d641c:	f007 fe1c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d6420:	f107 0115 	add.w	r1, r7, #21
   d6424:	464b      	mov	r3, r9
   d6426:	4642      	mov	r2, r8
   d6428:	b289      	uxth	r1, r1
   d642a:	4877      	ldr	r0, [pc, #476]	; (d6608 <_Z3numiiiii+0x2064>)
   d642c:	f8cd a000 	str.w	sl, [sp]
   d6430:	f007 fe12 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d6434:	f107 0114 	add.w	r1, r7, #20
   d6438:	464b      	mov	r3, r9
   d643a:	4642      	mov	r2, r8
   d643c:	b289      	uxth	r1, r1
   d643e:	4872      	ldr	r0, [pc, #456]	; (d6608 <_Z3numiiiii+0x2064>)
   d6440:	f8cd a000 	str.w	sl, [sp]
   d6444:	f007 fe08 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d6448:	f107 0113 	add.w	r1, r7, #19
   d644c:	464b      	mov	r3, r9
   d644e:	4642      	mov	r2, r8
   d6450:	b289      	uxth	r1, r1
   d6452:	486d      	ldr	r0, [pc, #436]	; (d6608 <_Z3numiiiii+0x2064>)
   d6454:	f8cd a000 	str.w	sl, [sp]
   d6458:	f007 fdfe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d645c:	f107 0112 	add.w	r1, r7, #18
   d6460:	464b      	mov	r3, r9
   d6462:	4642      	mov	r2, r8
   d6464:	b289      	uxth	r1, r1
   d6466:	4868      	ldr	r0, [pc, #416]	; (d6608 <_Z3numiiiii+0x2064>)
   d6468:	f8cd a000 	str.w	sl, [sp]
   d646c:	f007 fdf4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d6470:	1d39      	adds	r1, r7, #4
   d6472:	464b      	mov	r3, r9
   d6474:	4642      	mov	r2, r8
   d6476:	b289      	uxth	r1, r1
   d6478:	4863      	ldr	r0, [pc, #396]	; (d6608 <_Z3numiiiii+0x2064>)
   d647a:	f8cd a000 	str.w	sl, [sp]
   d647e:	f007 fdeb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d6482:	f107 010d 	add.w	r1, r7, #13
   d6486:	f8cd a000 	str.w	sl, [sp]
   d648a:	464b      	mov	r3, r9
   d648c:	4642      	mov	r2, r8
   d648e:	b289      	uxth	r1, r1
   d6490:	485d      	ldr	r0, [pc, #372]	; (d6608 <_Z3numiiiii+0x2064>)
   d6492:	f007 fde1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d6496:	f01b 0f01 	tst.w	fp, #1
   d649a:	f040 80af 	bne.w	d65fc <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d649e:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d64a2:	4859      	ldr	r0, [pc, #356]	; (d6608 <_Z3numiiiii+0x2064>)
   d64a4:	9700      	str	r7, [sp, #0]
   d64a6:	b2a4      	uxth	r4, r4
   d64a8:	b2ed      	uxtb	r5, r5
   d64aa:	b2f6      	uxtb	r6, r6
   d64ac:	4633      	mov	r3, r6
   d64ae:	462a      	mov	r2, r5
   d64b0:	4621      	mov	r1, r4
   d64b2:	f007 fdd1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d64b6:	1c61      	adds	r1, r4, #1
   d64b8:	4633      	mov	r3, r6
   d64ba:	462a      	mov	r2, r5
   d64bc:	b289      	uxth	r1, r1
   d64be:	4852      	ldr	r0, [pc, #328]	; (d6608 <_Z3numiiiii+0x2064>)
   d64c0:	9700      	str	r7, [sp, #0]
   d64c2:	f007 fdc9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d64c6:	1ca1      	adds	r1, r4, #2
   d64c8:	4633      	mov	r3, r6
   d64ca:	462a      	mov	r2, r5
   d64cc:	b289      	uxth	r1, r1
   d64ce:	484e      	ldr	r0, [pc, #312]	; (d6608 <_Z3numiiiii+0x2064>)
   d64d0:	9700      	str	r7, [sp, #0]
   d64d2:	f007 fdc1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d64d6:	1ce1      	adds	r1, r4, #3
   d64d8:	4633      	mov	r3, r6
   d64da:	462a      	mov	r2, r5
   d64dc:	b289      	uxth	r1, r1
   d64de:	484a      	ldr	r0, [pc, #296]	; (d6608 <_Z3numiiiii+0x2064>)
   d64e0:	9700      	str	r7, [sp, #0]
   d64e2:	f007 fdb9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d64e6:	1d21      	adds	r1, r4, #4
   d64e8:	4633      	mov	r3, r6
   d64ea:	462a      	mov	r2, r5
   d64ec:	b289      	uxth	r1, r1
   d64ee:	4846      	ldr	r0, [pc, #280]	; (d6608 <_Z3numiiiii+0x2064>)
   d64f0:	9700      	str	r7, [sp, #0]
   d64f2:	f007 fdb1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d64f6:	1d61      	adds	r1, r4, #5
   d64f8:	4633      	mov	r3, r6
   d64fa:	462a      	mov	r2, r5
   d64fc:	b289      	uxth	r1, r1
   d64fe:	4842      	ldr	r0, [pc, #264]	; (d6608 <_Z3numiiiii+0x2064>)
   d6500:	9700      	str	r7, [sp, #0]
   d6502:	f007 fda9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d6506:	1da1      	adds	r1, r4, #6
   d6508:	4633      	mov	r3, r6
   d650a:	462a      	mov	r2, r5
   d650c:	b289      	uxth	r1, r1
   d650e:	483e      	ldr	r0, [pc, #248]	; (d6608 <_Z3numiiiii+0x2064>)
   d6510:	9700      	str	r7, [sp, #0]
   d6512:	f007 fda1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d6516:	f104 0109 	add.w	r1, r4, #9
   d651a:	4633      	mov	r3, r6
   d651c:	462a      	mov	r2, r5
   d651e:	b289      	uxth	r1, r1
   d6520:	4839      	ldr	r0, [pc, #228]	; (d6608 <_Z3numiiiii+0x2064>)
   d6522:	9700      	str	r7, [sp, #0]
   d6524:	f007 fd98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6528:	f104 0116 	add.w	r1, r4, #22
   d652c:	4633      	mov	r3, r6
   d652e:	462a      	mov	r2, r5
   d6530:	b289      	uxth	r1, r1
   d6532:	4835      	ldr	r0, [pc, #212]	; (d6608 <_Z3numiiiii+0x2064>)
   d6534:	9700      	str	r7, [sp, #0]
   d6536:	f007 fd8f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d653a:	f104 0119 	add.w	r1, r4, #25
   d653e:	4633      	mov	r3, r6
   d6540:	462a      	mov	r2, r5
   d6542:	b289      	uxth	r1, r1
   d6544:	4830      	ldr	r0, [pc, #192]	; (d6608 <_Z3numiiiii+0x2064>)
   d6546:	9700      	str	r7, [sp, #0]
   d6548:	f007 fd86 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d654c:	f104 011a 	add.w	r1, r4, #26
   d6550:	4633      	mov	r3, r6
   d6552:	462a      	mov	r2, r5
   d6554:	b289      	uxth	r1, r1
   d6556:	482c      	ldr	r0, [pc, #176]	; (d6608 <_Z3numiiiii+0x2064>)
   d6558:	9700      	str	r7, [sp, #0]
   d655a:	f007 fd7d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d655e:	f104 011b 	add.w	r1, r4, #27
   d6562:	4633      	mov	r3, r6
   d6564:	462a      	mov	r2, r5
   d6566:	b289      	uxth	r1, r1
   d6568:	4827      	ldr	r0, [pc, #156]	; (d6608 <_Z3numiiiii+0x2064>)
   d656a:	9700      	str	r7, [sp, #0]
   d656c:	f007 fd74 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d6570:	f104 011c 	add.w	r1, r4, #28
   d6574:	4633      	mov	r3, r6
   d6576:	462a      	mov	r2, r5
   d6578:	b289      	uxth	r1, r1
   d657a:	4823      	ldr	r0, [pc, #140]	; (d6608 <_Z3numiiiii+0x2064>)
   d657c:	9700      	str	r7, [sp, #0]
   d657e:	f007 fd6b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d6582:	f104 011d 	add.w	r1, r4, #29
   d6586:	4633      	mov	r3, r6
   d6588:	462a      	mov	r2, r5
   d658a:	b289      	uxth	r1, r1
   d658c:	481e      	ldr	r0, [pc, #120]	; (d6608 <_Z3numiiiii+0x2064>)
   d658e:	9700      	str	r7, [sp, #0]
   d6590:	f007 fd62 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d6594:	f104 011e 	add.w	r1, r4, #30
   d6598:	4633      	mov	r3, r6
   d659a:	462a      	mov	r2, r5
   d659c:	b289      	uxth	r1, r1
   d659e:	481a      	ldr	r0, [pc, #104]	; (d6608 <_Z3numiiiii+0x2064>)
   d65a0:	9700      	str	r7, [sp, #0]
   d65a2:	f007 fd59 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d65a6:	f104 011f 	add.w	r1, r4, #31
   d65aa:	4633      	mov	r3, r6
   d65ac:	462a      	mov	r2, r5
   d65ae:	b289      	uxth	r1, r1
   d65b0:	4815      	ldr	r0, [pc, #84]	; (d6608 <_Z3numiiiii+0x2064>)
   d65b2:	9700      	str	r7, [sp, #0]
   d65b4:	f007 fd50 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d65b8:	f104 010f 	add.w	r1, r4, #15
   d65bc:	4633      	mov	r3, r6
   d65be:	462a      	mov	r2, r5
   d65c0:	b289      	uxth	r1, r1
   d65c2:	4811      	ldr	r0, [pc, #68]	; (d6608 <_Z3numiiiii+0x2064>)
   d65c4:	9700      	str	r7, [sp, #0]
   d65c6:	f007 fd47 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d65ca:	f104 0110 	add.w	r1, r4, #16
   d65ce:	4633      	mov	r3, r6
   d65d0:	462a      	mov	r2, r5
   d65d2:	b289      	uxth	r1, r1
   d65d4:	480c      	ldr	r0, [pc, #48]	; (d6608 <_Z3numiiiii+0x2064>)
   d65d6:	9700      	str	r7, [sp, #0]
   d65d8:	f007 fd3e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d65dc:	f104 010c 	add.w	r1, r4, #12
   d65e0:	4633      	mov	r3, r6
   d65e2:	462a      	mov	r2, r5
   d65e4:	b289      	uxth	r1, r1
   d65e6:	9700      	str	r7, [sp, #0]
   d65e8:	4807      	ldr	r0, [pc, #28]	; (d6608 <_Z3numiiiii+0x2064>)
   d65ea:	f007 fd35 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d65ee:	f104 0113 	add.w	r1, r4, #19
   d65f2:	970e      	str	r7, [sp, #56]	; 0x38
   d65f4:	4633      	mov	r3, r6
   d65f6:	462a      	mov	r2, r5
   d65f8:	f7ff bb41 	b.w	d5c7e <_Z3numiiiii+0x16da>
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
   d65fc:	b005      	add	sp, #20
   d65fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6602:	bf00      	nop
   d6604:	80000001 	.word	0x80000001
   d6608:	2003e328 	.word	0x2003e328

000d660c <_Z4snumiiiii>:
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6610:	b085      	sub	sp, #20
   d6612:	461d      	mov	r5, r3
    if(num == 1)
   d6614:	2801      	cmp	r0, #1
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d6616:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6618:	9202      	str	r2, [sp, #8]
   d661a:	460c      	mov	r4, r1
   d661c:	9303      	str	r3, [sp, #12]
    if(num == 1)
   d661e:	f040 812d 	bne.w	d687c <_Z4snumiiiii+0x270>
    {
        if((pix/8)%2 == 1)
   d6622:	4b94      	ldr	r3, [pc, #592]	; (d6874 <_Z4snumiiiii+0x268>)
   d6624:	2608      	movs	r6, #8
   d6626:	fb91 f6f6 	sdiv	r6, r1, r6
   d662a:	4033      	ands	r3, r6
   d662c:	2b00      	cmp	r3, #0
   d662e:	bfbe      	ittt	lt
   d6630:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6634:	f063 0301 	ornlt	r3, r3, #1
   d6638:	3301      	addlt	r3, #1
   d663a:	2b01      	cmp	r3, #1
   d663c:	f040 8094 	bne.w	d6768 <_Z4snumiiiii+0x15c>
        {
            strip.setPixelColor(pix,0,0,0);
   d6640:	f04f 0800 	mov.w	r8, #0
   d6644:	b28f      	uxth	r7, r1
   d6646:	4643      	mov	r3, r8
   d6648:	4642      	mov	r2, r8
   d664a:	f8cd 8000 	str.w	r8, [sp]
   d664e:	4639      	mov	r1, r7
   d6650:	4889      	ldr	r0, [pc, #548]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6652:	f007 fd01 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6656:	1e79      	subs	r1, r7, #1
   d6658:	4643      	mov	r3, r8
   d665a:	4642      	mov	r2, r8
   d665c:	f8cd 8000 	str.w	r8, [sp]
   d6660:	b289      	uxth	r1, r1
   d6662:	4885      	ldr	r0, [pc, #532]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6664:	f007 fcf8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d6668:	1eb9      	subs	r1, r7, #2
   d666a:	4643      	mov	r3, r8
   d666c:	4642      	mov	r2, r8
   d666e:	f8cd 8000 	str.w	r8, [sp]
   d6672:	b289      	uxth	r1, r1
   d6674:	4880      	ldr	r0, [pc, #512]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6676:	f007 fcef 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d667a:	1ef9      	subs	r1, r7, #3
   d667c:	4643      	mov	r3, r8
   d667e:	4642      	mov	r2, r8
   d6680:	f8cd 8000 	str.w	r8, [sp]
   d6684:	b289      	uxth	r1, r1
   d6686:	487c      	ldr	r0, [pc, #496]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6688:	f007 fce6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d668c:	1f39      	subs	r1, r7, #4
   d668e:	4643      	mov	r3, r8
   d6690:	4642      	mov	r2, r8
   d6692:	f8cd 8000 	str.w	r8, [sp]
   d6696:	b289      	uxth	r1, r1
   d6698:	4877      	ldr	r0, [pc, #476]	; (d6878 <_Z4snumiiiii+0x26c>)
   d669a:	f007 fcdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d669e:	1c79      	adds	r1, r7, #1
   d66a0:	4643      	mov	r3, r8
   d66a2:	4642      	mov	r2, r8
   d66a4:	f8cd 8000 	str.w	r8, [sp]
   d66a8:	b289      	uxth	r1, r1
   d66aa:	4873      	ldr	r0, [pc, #460]	; (d6878 <_Z4snumiiiii+0x26c>)
   d66ac:	f007 fcd4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d66b0:	1cb9      	adds	r1, r7, #2
   d66b2:	4643      	mov	r3, r8
   d66b4:	4642      	mov	r2, r8
   d66b6:	f8cd 8000 	str.w	r8, [sp]
   d66ba:	b289      	uxth	r1, r1
   d66bc:	486e      	ldr	r0, [pc, #440]	; (d6878 <_Z4snumiiiii+0x26c>)
   d66be:	f007 fccb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d66c2:	1cf9      	adds	r1, r7, #3
   d66c4:	4643      	mov	r3, r8
   d66c6:	4642      	mov	r2, r8
   d66c8:	f8cd 8000 	str.w	r8, [sp]
   d66cc:	b289      	uxth	r1, r1
   d66ce:	486a      	ldr	r0, [pc, #424]	; (d6878 <_Z4snumiiiii+0x26c>)
   d66d0:	f007 fcc2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d66d4:	1d39      	adds	r1, r7, #4
   d66d6:	4643      	mov	r3, r8
   d66d8:	4642      	mov	r2, r8
   d66da:	f8cd 8000 	str.w	r8, [sp]
   d66de:	b289      	uxth	r1, r1
   d66e0:	4865      	ldr	r0, [pc, #404]	; (d6878 <_Z4snumiiiii+0x26c>)
   d66e2:	f007 fcb9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d66e6:	1d79      	adds	r1, r7, #5
   d66e8:	4643      	mov	r3, r8
   d66ea:	4642      	mov	r2, r8
   d66ec:	f8cd 8000 	str.w	r8, [sp]
   d66f0:	b289      	uxth	r1, r1
   d66f2:	4861      	ldr	r0, [pc, #388]	; (d6878 <_Z4snumiiiii+0x26c>)
   d66f4:	f007 fcb0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d66f8:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d66fc:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6700:	485d      	ldr	r0, [pc, #372]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6702:	f8cd a000 	str.w	sl, [sp]
   d6706:	fa5f f985 	uxtb.w	r9, r5
   d670a:	f107 0110 	add.w	r1, r7, #16
   d670e:	464b      	mov	r3, r9
   d6710:	4642      	mov	r2, r8
   d6712:	b289      	uxth	r1, r1
   d6714:	f007 fca0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6718:	f107 010f 	add.w	r1, r7, #15
   d671c:	464b      	mov	r3, r9
   d671e:	4642      	mov	r2, r8
   d6720:	b289      	uxth	r1, r1
   d6722:	4855      	ldr	r0, [pc, #340]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6724:	f8cd a000 	str.w	sl, [sp]
   d6728:	f007 fc96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d672c:	f107 010e 	add.w	r1, r7, #14
   d6730:	464b      	mov	r3, r9
   d6732:	4642      	mov	r2, r8
   d6734:	b289      	uxth	r1, r1
   d6736:	4850      	ldr	r0, [pc, #320]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6738:	f8cd a000 	str.w	sl, [sp]
   d673c:	f007 fc8c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6740:	f107 010d 	add.w	r1, r7, #13
   d6744:	464b      	mov	r3, r9
   d6746:	4642      	mov	r2, r8
   d6748:	b289      	uxth	r1, r1
   d674a:	484b      	ldr	r0, [pc, #300]	; (d6878 <_Z4snumiiiii+0x26c>)
   d674c:	f8cd a000 	str.w	sl, [sp]
   d6750:	f007 fc82 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6754:	f107 010c 	add.w	r1, r7, #12
   d6758:	f8cd a000 	str.w	sl, [sp]
   d675c:	464b      	mov	r3, r9
   d675e:	4642      	mov	r2, r8
   d6760:	b289      	uxth	r1, r1
   d6762:	4845      	ldr	r0, [pc, #276]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6764:	f007 fc78 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6768:	f016 0601 	ands.w	r6, r6, #1
   d676c:	f041 82e8 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,0,0,0);
   d6770:	b2a4      	uxth	r4, r4
   d6772:	4633      	mov	r3, r6
   d6774:	4632      	mov	r2, r6
   d6776:	9600      	str	r6, [sp, #0]
   d6778:	4621      	mov	r1, r4
   d677a:	483f      	ldr	r0, [pc, #252]	; (d6878 <_Z4snumiiiii+0x26c>)
   d677c:	f007 fc6c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6780:	1c61      	adds	r1, r4, #1
   d6782:	4633      	mov	r3, r6
   d6784:	4632      	mov	r2, r6
   d6786:	9600      	str	r6, [sp, #0]
   d6788:	b289      	uxth	r1, r1
   d678a:	483b      	ldr	r0, [pc, #236]	; (d6878 <_Z4snumiiiii+0x26c>)
   d678c:	f007 fc64 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6790:	1ca1      	adds	r1, r4, #2
   d6792:	4633      	mov	r3, r6
   d6794:	4632      	mov	r2, r6
   d6796:	9600      	str	r6, [sp, #0]
   d6798:	b289      	uxth	r1, r1
   d679a:	4837      	ldr	r0, [pc, #220]	; (d6878 <_Z4snumiiiii+0x26c>)
   d679c:	f007 fc5c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d67a0:	1ce1      	adds	r1, r4, #3
   d67a2:	4633      	mov	r3, r6
   d67a4:	4632      	mov	r2, r6
   d67a6:	9600      	str	r6, [sp, #0]
   d67a8:	b289      	uxth	r1, r1
   d67aa:	4833      	ldr	r0, [pc, #204]	; (d6878 <_Z4snumiiiii+0x26c>)
   d67ac:	f007 fc54 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d67b0:	1d21      	adds	r1, r4, #4
   d67b2:	4633      	mov	r3, r6
   d67b4:	4632      	mov	r2, r6
   d67b6:	9600      	str	r6, [sp, #0]
   d67b8:	b289      	uxth	r1, r1
   d67ba:	482f      	ldr	r0, [pc, #188]	; (d6878 <_Z4snumiiiii+0x26c>)
   d67bc:	f007 fc4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d67c0:	f104 010b 	add.w	r1, r4, #11
   d67c4:	4633      	mov	r3, r6
   d67c6:	4632      	mov	r2, r6
   d67c8:	9600      	str	r6, [sp, #0]
   d67ca:	b289      	uxth	r1, r1
   d67cc:	482a      	ldr	r0, [pc, #168]	; (d6878 <_Z4snumiiiii+0x26c>)
   d67ce:	f007 fc43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d67d2:	f104 010c 	add.w	r1, r4, #12
   d67d6:	4633      	mov	r3, r6
   d67d8:	4632      	mov	r2, r6
   d67da:	9600      	str	r6, [sp, #0]
   d67dc:	b289      	uxth	r1, r1
   d67de:	4826      	ldr	r0, [pc, #152]	; (d6878 <_Z4snumiiiii+0x26c>)
   d67e0:	f007 fc3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d67e4:	f104 010d 	add.w	r1, r4, #13
   d67e8:	4633      	mov	r3, r6
   d67ea:	4632      	mov	r2, r6
   d67ec:	9600      	str	r6, [sp, #0]
   d67ee:	b289      	uxth	r1, r1
   d67f0:	4821      	ldr	r0, [pc, #132]	; (d6878 <_Z4snumiiiii+0x26c>)
   d67f2:	f007 fc31 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d67f6:	f104 010e 	add.w	r1, r4, #14
   d67fa:	4633      	mov	r3, r6
   d67fc:	4632      	mov	r2, r6
   d67fe:	9600      	str	r6, [sp, #0]
   d6800:	b289      	uxth	r1, r1
   d6802:	481d      	ldr	r0, [pc, #116]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6804:	f007 fc28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6808:	f104 010f 	add.w	r1, r4, #15
   d680c:	4633      	mov	r3, r6
   d680e:	4632      	mov	r2, r6
   d6810:	9600      	str	r6, [sp, #0]
   d6812:	b289      	uxth	r1, r1
   d6814:	4818      	ldr	r0, [pc, #96]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6816:	f007 fc1f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d681a:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d681e:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d6822:	4815      	ldr	r0, [pc, #84]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6824:	9700      	str	r7, [sp, #0]
   d6826:	b2ed      	uxtb	r5, r5
   d6828:	f104 0110 	add.w	r1, r4, #16
   d682c:	462b      	mov	r3, r5
   d682e:	4632      	mov	r2, r6
   d6830:	b289      	uxth	r1, r1
   d6832:	f007 fc11 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6836:	f104 0111 	add.w	r1, r4, #17
   d683a:	462b      	mov	r3, r5
   d683c:	4632      	mov	r2, r6
   d683e:	b289      	uxth	r1, r1
   d6840:	480d      	ldr	r0, [pc, #52]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6842:	9700      	str	r7, [sp, #0]
   d6844:	f007 fc08 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6848:	f104 0112 	add.w	r1, r4, #18
   d684c:	462b      	mov	r3, r5
   d684e:	4632      	mov	r2, r6
   d6850:	b289      	uxth	r1, r1
   d6852:	4809      	ldr	r0, [pc, #36]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6854:	9700      	str	r7, [sp, #0]
   d6856:	f007 fbff 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d685a:	f104 0113 	add.w	r1, r4, #19
   d685e:	b289      	uxth	r1, r1
   d6860:	9700      	str	r7, [sp, #0]
   d6862:	462b      	mov	r3, r5
   d6864:	4632      	mov	r2, r6
   d6866:	4804      	ldr	r0, [pc, #16]	; (d6878 <_Z4snumiiiii+0x26c>)
   d6868:	f007 fbf6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d686c:	f104 0114 	add.w	r1, r4, #20
   d6870:	9700      	str	r7, [sp, #0]
   d6872:	e139      	b.n	d6ae8 <_Z4snumiiiii+0x4dc>
   d6874:	80000001 	.word	0x80000001
   d6878:	2003e328 	.word	0x2003e328
        }
    }
    if(num == 2)
   d687c:	2802      	cmp	r0, #2
   d687e:	f040 813f 	bne.w	d6b00 <_Z4snumiiiii+0x4f4>
    {
        if((pix/8)%2 == 1)
   d6882:	4b9d      	ldr	r3, [pc, #628]	; (d6af8 <_Z4snumiiiii+0x4ec>)
   d6884:	2708      	movs	r7, #8
   d6886:	fb91 f7f7 	sdiv	r7, r1, r7
   d688a:	403b      	ands	r3, r7
   d688c:	2b00      	cmp	r3, #0
   d688e:	bfbe      	ittt	lt
   d6890:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6894:	f063 0301 	ornlt	r3, r3, #1
   d6898:	3301      	addlt	r3, #1
   d689a:	2b01      	cmp	r3, #1
   d689c:	f040 8094 	bne.w	d69c8 <_Z4snumiiiii+0x3bc>
        {
            strip.setPixelColor(pix,R,G,B);
   d68a0:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d68a4:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d68a8:	4894      	ldr	r0, [pc, #592]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d68aa:	f8cd a000 	str.w	sl, [sp]
   d68ae:	b28e      	uxth	r6, r1
   d68b0:	fa5f f985 	uxtb.w	r9, r5
   d68b4:	464b      	mov	r3, r9
   d68b6:	4642      	mov	r2, r8
   d68b8:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d68ba:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 2)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d68be:	f007 fbcb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d68c2:	1e71      	subs	r1, r6, #1
   d68c4:	465b      	mov	r3, fp
   d68c6:	465a      	mov	r2, fp
   d68c8:	b289      	uxth	r1, r1
   d68ca:	488c      	ldr	r0, [pc, #560]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d68cc:	f8cd b000 	str.w	fp, [sp]
   d68d0:	f007 fbc2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d68d4:	1eb1      	subs	r1, r6, #2
   d68d6:	464b      	mov	r3, r9
   d68d8:	4642      	mov	r2, r8
   d68da:	b289      	uxth	r1, r1
   d68dc:	4887      	ldr	r0, [pc, #540]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d68de:	f8cd a000 	str.w	sl, [sp]
   d68e2:	f007 fbb9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d68e6:	1ef1      	subs	r1, r6, #3
   d68e8:	464b      	mov	r3, r9
   d68ea:	4642      	mov	r2, r8
   d68ec:	b289      	uxth	r1, r1
   d68ee:	4883      	ldr	r0, [pc, #524]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d68f0:	f8cd a000 	str.w	sl, [sp]
   d68f4:	f007 fbb0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d68f8:	1f31      	subs	r1, r6, #4
   d68fa:	464b      	mov	r3, r9
   d68fc:	4642      	mov	r2, r8
   d68fe:	b289      	uxth	r1, r1
   d6900:	487e      	ldr	r0, [pc, #504]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6902:	f8cd a000 	str.w	sl, [sp]
   d6906:	f007 fba7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d690a:	1c71      	adds	r1, r6, #1
   d690c:	464b      	mov	r3, r9
   d690e:	4642      	mov	r2, r8
   d6910:	b289      	uxth	r1, r1
   d6912:	487a      	ldr	r0, [pc, #488]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6914:	f8cd a000 	str.w	sl, [sp]
   d6918:	f007 fb9e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d691c:	1cb1      	adds	r1, r6, #2
   d691e:	465b      	mov	r3, fp
   d6920:	465a      	mov	r2, fp
   d6922:	b289      	uxth	r1, r1
   d6924:	4875      	ldr	r0, [pc, #468]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6926:	f8cd b000 	str.w	fp, [sp]
   d692a:	f007 fb95 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d692e:	1cf1      	adds	r1, r6, #3
   d6930:	464b      	mov	r3, r9
   d6932:	4642      	mov	r2, r8
   d6934:	b289      	uxth	r1, r1
   d6936:	4871      	ldr	r0, [pc, #452]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6938:	f8cd a000 	str.w	sl, [sp]
   d693c:	f007 fb8c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6940:	1d31      	adds	r1, r6, #4
   d6942:	465b      	mov	r3, fp
   d6944:	465a      	mov	r2, fp
   d6946:	b289      	uxth	r1, r1
   d6948:	486c      	ldr	r0, [pc, #432]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d694a:	f8cd b000 	str.w	fp, [sp]
   d694e:	f007 fb83 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6952:	1d71      	adds	r1, r6, #5
   d6954:	464b      	mov	r3, r9
   d6956:	4642      	mov	r2, r8
   d6958:	b289      	uxth	r1, r1
   d695a:	4868      	ldr	r0, [pc, #416]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d695c:	f8cd a000 	str.w	sl, [sp]
   d6960:	f007 fb7a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6964:	f106 0110 	add.w	r1, r6, #16
   d6968:	464b      	mov	r3, r9
   d696a:	4642      	mov	r2, r8
   d696c:	b289      	uxth	r1, r1
   d696e:	4863      	ldr	r0, [pc, #396]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6970:	f8cd a000 	str.w	sl, [sp]
   d6974:	f007 fb70 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6978:	f106 010f 	add.w	r1, r6, #15
   d697c:	464b      	mov	r3, r9
   d697e:	4642      	mov	r2, r8
   d6980:	b289      	uxth	r1, r1
   d6982:	485e      	ldr	r0, [pc, #376]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6984:	f8cd a000 	str.w	sl, [sp]
   d6988:	f007 fb66 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d698c:	f106 010e 	add.w	r1, r6, #14
   d6990:	464b      	mov	r3, r9
   d6992:	4642      	mov	r2, r8
   d6994:	b289      	uxth	r1, r1
   d6996:	4859      	ldr	r0, [pc, #356]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6998:	f8cd a000 	str.w	sl, [sp]
   d699c:	f007 fb5c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d69a0:	f106 010d 	add.w	r1, r6, #13
   d69a4:	465b      	mov	r3, fp
   d69a6:	465a      	mov	r2, fp
   d69a8:	b289      	uxth	r1, r1
   d69aa:	4854      	ldr	r0, [pc, #336]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d69ac:	f8cd b000 	str.w	fp, [sp]
   d69b0:	f007 fb52 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d69b4:	f106 010c 	add.w	r1, r6, #12
   d69b8:	f8cd a000 	str.w	sl, [sp]
   d69bc:	464b      	mov	r3, r9
   d69be:	4642      	mov	r2, r8
   d69c0:	b289      	uxth	r1, r1
   d69c2:	484e      	ldr	r0, [pc, #312]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d69c4:	f007 fb48 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d69c8:	f017 0701 	ands.w	r7, r7, #1
   d69cc:	f041 81b8 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d69d0:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d69d4:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d69d8:	4848      	ldr	r0, [pc, #288]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d69da:	f8cd 8000 	str.w	r8, [sp]
   d69de:	b2a4      	uxth	r4, r4
   d69e0:	b2ed      	uxtb	r5, r5
   d69e2:	462b      	mov	r3, r5
   d69e4:	4632      	mov	r2, r6
   d69e6:	4621      	mov	r1, r4
   d69e8:	f007 fb36 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d69ec:	1c61      	adds	r1, r4, #1
   d69ee:	463b      	mov	r3, r7
   d69f0:	463a      	mov	r2, r7
   d69f2:	b289      	uxth	r1, r1
   d69f4:	4841      	ldr	r0, [pc, #260]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d69f6:	9700      	str	r7, [sp, #0]
   d69f8:	f007 fb2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d69fc:	1ca1      	adds	r1, r4, #2
   d69fe:	462b      	mov	r3, r5
   d6a00:	4632      	mov	r2, r6
   d6a02:	b289      	uxth	r1, r1
   d6a04:	483d      	ldr	r0, [pc, #244]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a06:	f8cd 8000 	str.w	r8, [sp]
   d6a0a:	f007 fb25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6a0e:	1ce1      	adds	r1, r4, #3
   d6a10:	462b      	mov	r3, r5
   d6a12:	4632      	mov	r2, r6
   d6a14:	b289      	uxth	r1, r1
   d6a16:	4839      	ldr	r0, [pc, #228]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a18:	f8cd 8000 	str.w	r8, [sp]
   d6a1c:	f007 fb1c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6a20:	1d21      	adds	r1, r4, #4
   d6a22:	462b      	mov	r3, r5
   d6a24:	4632      	mov	r2, r6
   d6a26:	b289      	uxth	r1, r1
   d6a28:	4834      	ldr	r0, [pc, #208]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a2a:	f8cd 8000 	str.w	r8, [sp]
   d6a2e:	f007 fb13 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6a32:	f104 010b 	add.w	r1, r4, #11
   d6a36:	462b      	mov	r3, r5
   d6a38:	4632      	mov	r2, r6
   d6a3a:	b289      	uxth	r1, r1
   d6a3c:	482f      	ldr	r0, [pc, #188]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a3e:	f8cd 8000 	str.w	r8, [sp]
   d6a42:	f007 fb09 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6a46:	f104 010c 	add.w	r1, r4, #12
   d6a4a:	463b      	mov	r3, r7
   d6a4c:	463a      	mov	r2, r7
   d6a4e:	b289      	uxth	r1, r1
   d6a50:	482a      	ldr	r0, [pc, #168]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a52:	9700      	str	r7, [sp, #0]
   d6a54:	f007 fb00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6a58:	f104 010d 	add.w	r1, r4, #13
   d6a5c:	462b      	mov	r3, r5
   d6a5e:	4632      	mov	r2, r6
   d6a60:	b289      	uxth	r1, r1
   d6a62:	4826      	ldr	r0, [pc, #152]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a64:	f8cd 8000 	str.w	r8, [sp]
   d6a68:	f007 faf6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6a6c:	f104 010e 	add.w	r1, r4, #14
   d6a70:	463b      	mov	r3, r7
   d6a72:	463a      	mov	r2, r7
   d6a74:	b289      	uxth	r1, r1
   d6a76:	4821      	ldr	r0, [pc, #132]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a78:	9700      	str	r7, [sp, #0]
   d6a7a:	f007 faed 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6a7e:	f104 010f 	add.w	r1, r4, #15
   d6a82:	462b      	mov	r3, r5
   d6a84:	4632      	mov	r2, r6
   d6a86:	b289      	uxth	r1, r1
   d6a88:	481c      	ldr	r0, [pc, #112]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a8a:	f8cd 8000 	str.w	r8, [sp]
   d6a8e:	f007 fae3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6a92:	f104 0110 	add.w	r1, r4, #16
   d6a96:	462b      	mov	r3, r5
   d6a98:	4632      	mov	r2, r6
   d6a9a:	b289      	uxth	r1, r1
   d6a9c:	4817      	ldr	r0, [pc, #92]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6a9e:	f8cd 8000 	str.w	r8, [sp]
   d6aa2:	f007 fad9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6aa6:	f104 0111 	add.w	r1, r4, #17
   d6aaa:	462b      	mov	r3, r5
   d6aac:	4632      	mov	r2, r6
   d6aae:	b289      	uxth	r1, r1
   d6ab0:	4812      	ldr	r0, [pc, #72]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6ab2:	f8cd 8000 	str.w	r8, [sp]
   d6ab6:	f007 facf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6aba:	f104 0112 	add.w	r1, r4, #18
   d6abe:	462b      	mov	r3, r5
   d6ac0:	4632      	mov	r2, r6
   d6ac2:	b289      	uxth	r1, r1
   d6ac4:	f8cd 8000 	str.w	r8, [sp]
   d6ac8:	480c      	ldr	r0, [pc, #48]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6aca:	f007 fac5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,0,0,0);
   d6ace:	f104 0113 	add.w	r1, r4, #19
   d6ad2:	9700      	str	r7, [sp, #0]
   d6ad4:	463b      	mov	r3, r7
   d6ad6:	463a      	mov	r2, r7
   d6ad8:	b289      	uxth	r1, r1
   d6ada:	4808      	ldr	r0, [pc, #32]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6adc:	f007 fabc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d6ae0:	f104 0114 	add.w	r1, r4, #20
   d6ae4:	f8cd 8000 	str.w	r8, [sp]
   d6ae8:	462b      	mov	r3, r5
   d6aea:	4632      	mov	r2, r6
   d6aec:	b289      	uxth	r1, r1
   d6aee:	4803      	ldr	r0, [pc, #12]	; (d6afc <_Z4snumiiiii+0x4f0>)
   d6af0:	f007 fab2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d6af4:	f001 b924 	b.w	d7d40 <_Z4snumiiiii+0x1734>
   d6af8:	80000001 	.word	0x80000001
   d6afc:	2003e328 	.word	0x2003e328
        }
    }
    if(num == 3)
   d6b00:	2803      	cmp	r0, #3
   d6b02:	f040 811d 	bne.w	d6d40 <_Z4snumiiiii+0x734>
    {
        if((pix/8)%2 == 1)
   d6b06:	4b8c      	ldr	r3, [pc, #560]	; (d6d38 <_Z4snumiiiii+0x72c>)
   d6b08:	2708      	movs	r7, #8
   d6b0a:	fb91 f7f7 	sdiv	r7, r1, r7
   d6b0e:	403b      	ands	r3, r7
   d6b10:	2b00      	cmp	r3, #0
   d6b12:	bfbe      	ittt	lt
   d6b14:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6b18:	f063 0301 	ornlt	r3, r3, #1
   d6b1c:	3301      	addlt	r3, #1
   d6b1e:	2b01      	cmp	r3, #1
   d6b20:	f040 8094 	bne.w	d6c4c <_Z4snumiiiii+0x640>
        {
            strip.setPixelColor(pix,R,G,B);
   d6b24:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6b28:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6b2c:	4883      	ldr	r0, [pc, #524]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b2e:	f8cd a000 	str.w	sl, [sp]
   d6b32:	b28e      	uxth	r6, r1
   d6b34:	fa5f f985 	uxtb.w	r9, r5
   d6b38:	464b      	mov	r3, r9
   d6b3a:	4642      	mov	r2, r8
   d6b3c:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d6b3e:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 3)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d6b42:	f007 fa89 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6b46:	1e71      	subs	r1, r6, #1
   d6b48:	465b      	mov	r3, fp
   d6b4a:	465a      	mov	r2, fp
   d6b4c:	b289      	uxth	r1, r1
   d6b4e:	487b      	ldr	r0, [pc, #492]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b50:	f8cd b000 	str.w	fp, [sp]
   d6b54:	f007 fa80 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6b58:	1eb1      	subs	r1, r6, #2
   d6b5a:	464b      	mov	r3, r9
   d6b5c:	4642      	mov	r2, r8
   d6b5e:	b289      	uxth	r1, r1
   d6b60:	4876      	ldr	r0, [pc, #472]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b62:	f8cd a000 	str.w	sl, [sp]
   d6b66:	f007 fa77 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6b6a:	1ef1      	subs	r1, r6, #3
   d6b6c:	465b      	mov	r3, fp
   d6b6e:	465a      	mov	r2, fp
   d6b70:	b289      	uxth	r1, r1
   d6b72:	4872      	ldr	r0, [pc, #456]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b74:	f8cd b000 	str.w	fp, [sp]
   d6b78:	f007 fa6e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6b7c:	1f31      	subs	r1, r6, #4
   d6b7e:	464b      	mov	r3, r9
   d6b80:	4642      	mov	r2, r8
   d6b82:	b289      	uxth	r1, r1
   d6b84:	486d      	ldr	r0, [pc, #436]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b86:	f8cd a000 	str.w	sl, [sp]
   d6b8a:	f007 fa65 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6b8e:	1c71      	adds	r1, r6, #1
   d6b90:	464b      	mov	r3, r9
   d6b92:	4642      	mov	r2, r8
   d6b94:	b289      	uxth	r1, r1
   d6b96:	4869      	ldr	r0, [pc, #420]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6b98:	f8cd a000 	str.w	sl, [sp]
   d6b9c:	f007 fa5c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6ba0:	1cb1      	adds	r1, r6, #2
   d6ba2:	465b      	mov	r3, fp
   d6ba4:	465a      	mov	r2, fp
   d6ba6:	b289      	uxth	r1, r1
   d6ba8:	4864      	ldr	r0, [pc, #400]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6baa:	f8cd b000 	str.w	fp, [sp]
   d6bae:	f007 fa53 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6bb2:	1cf1      	adds	r1, r6, #3
   d6bb4:	464b      	mov	r3, r9
   d6bb6:	4642      	mov	r2, r8
   d6bb8:	b289      	uxth	r1, r1
   d6bba:	4860      	ldr	r0, [pc, #384]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6bbc:	f8cd a000 	str.w	sl, [sp]
   d6bc0:	f007 fa4a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6bc4:	1d31      	adds	r1, r6, #4
   d6bc6:	465b      	mov	r3, fp
   d6bc8:	465a      	mov	r2, fp
   d6bca:	b289      	uxth	r1, r1
   d6bcc:	485b      	ldr	r0, [pc, #364]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6bce:	f8cd b000 	str.w	fp, [sp]
   d6bd2:	f007 fa41 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6bd6:	1d71      	adds	r1, r6, #5
   d6bd8:	464b      	mov	r3, r9
   d6bda:	4642      	mov	r2, r8
   d6bdc:	b289      	uxth	r1, r1
   d6bde:	4857      	ldr	r0, [pc, #348]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6be0:	f8cd a000 	str.w	sl, [sp]
   d6be4:	f007 fa38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6be8:	f106 0110 	add.w	r1, r6, #16
   d6bec:	464b      	mov	r3, r9
   d6bee:	4642      	mov	r2, r8
   d6bf0:	b289      	uxth	r1, r1
   d6bf2:	4852      	ldr	r0, [pc, #328]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6bf4:	f8cd a000 	str.w	sl, [sp]
   d6bf8:	f007 fa2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6bfc:	f106 010f 	add.w	r1, r6, #15
   d6c00:	464b      	mov	r3, r9
   d6c02:	4642      	mov	r2, r8
   d6c04:	b289      	uxth	r1, r1
   d6c06:	484d      	ldr	r0, [pc, #308]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c08:	f8cd a000 	str.w	sl, [sp]
   d6c0c:	f007 fa24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6c10:	f106 010e 	add.w	r1, r6, #14
   d6c14:	464b      	mov	r3, r9
   d6c16:	4642      	mov	r2, r8
   d6c18:	b289      	uxth	r1, r1
   d6c1a:	4848      	ldr	r0, [pc, #288]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c1c:	f8cd a000 	str.w	sl, [sp]
   d6c20:	f007 fa1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6c24:	f106 010d 	add.w	r1, r6, #13
   d6c28:	464b      	mov	r3, r9
   d6c2a:	4642      	mov	r2, r8
   d6c2c:	b289      	uxth	r1, r1
   d6c2e:	4843      	ldr	r0, [pc, #268]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c30:	f8cd a000 	str.w	sl, [sp]
   d6c34:	f007 fa10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6c38:	f106 010c 	add.w	r1, r6, #12
   d6c3c:	f8cd a000 	str.w	sl, [sp]
   d6c40:	464b      	mov	r3, r9
   d6c42:	4642      	mov	r2, r8
   d6c44:	b289      	uxth	r1, r1
   d6c46:	483d      	ldr	r0, [pc, #244]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c48:	f007 fa06 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6c4c:	f017 0701 	ands.w	r7, r7, #1
   d6c50:	f041 8076 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6c54:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6c58:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6c5c:	4837      	ldr	r0, [pc, #220]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c5e:	f8cd 8000 	str.w	r8, [sp]
   d6c62:	b2a4      	uxth	r4, r4
   d6c64:	b2ed      	uxtb	r5, r5
   d6c66:	462b      	mov	r3, r5
   d6c68:	4632      	mov	r2, r6
   d6c6a:	4621      	mov	r1, r4
   d6c6c:	f007 f9f4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6c70:	1c61      	adds	r1, r4, #1
   d6c72:	463b      	mov	r3, r7
   d6c74:	463a      	mov	r2, r7
   d6c76:	b289      	uxth	r1, r1
   d6c78:	4830      	ldr	r0, [pc, #192]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c7a:	9700      	str	r7, [sp, #0]
   d6c7c:	f007 f9ec 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6c80:	1ca1      	adds	r1, r4, #2
   d6c82:	462b      	mov	r3, r5
   d6c84:	4632      	mov	r2, r6
   d6c86:	b289      	uxth	r1, r1
   d6c88:	482c      	ldr	r0, [pc, #176]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c8a:	f8cd 8000 	str.w	r8, [sp]
   d6c8e:	f007 f9e3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6c92:	1ce1      	adds	r1, r4, #3
   d6c94:	463b      	mov	r3, r7
   d6c96:	463a      	mov	r2, r7
   d6c98:	b289      	uxth	r1, r1
   d6c9a:	4828      	ldr	r0, [pc, #160]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6c9c:	9700      	str	r7, [sp, #0]
   d6c9e:	f007 f9db 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6ca2:	1d21      	adds	r1, r4, #4
   d6ca4:	462b      	mov	r3, r5
   d6ca6:	4632      	mov	r2, r6
   d6ca8:	b289      	uxth	r1, r1
   d6caa:	4824      	ldr	r0, [pc, #144]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6cac:	f8cd 8000 	str.w	r8, [sp]
   d6cb0:	f007 f9d2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6cb4:	f104 010b 	add.w	r1, r4, #11
   d6cb8:	462b      	mov	r3, r5
   d6cba:	4632      	mov	r2, r6
   d6cbc:	b289      	uxth	r1, r1
   d6cbe:	481f      	ldr	r0, [pc, #124]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6cc0:	f8cd 8000 	str.w	r8, [sp]
   d6cc4:	f007 f9c8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6cc8:	f104 010c 	add.w	r1, r4, #12
   d6ccc:	463b      	mov	r3, r7
   d6cce:	463a      	mov	r2, r7
   d6cd0:	b289      	uxth	r1, r1
   d6cd2:	481a      	ldr	r0, [pc, #104]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6cd4:	9700      	str	r7, [sp, #0]
   d6cd6:	f007 f9bf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6cda:	f104 010d 	add.w	r1, r4, #13
   d6cde:	462b      	mov	r3, r5
   d6ce0:	4632      	mov	r2, r6
   d6ce2:	b289      	uxth	r1, r1
   d6ce4:	4815      	ldr	r0, [pc, #84]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6ce6:	f8cd 8000 	str.w	r8, [sp]
   d6cea:	f007 f9b5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6cee:	f104 010e 	add.w	r1, r4, #14
   d6cf2:	463b      	mov	r3, r7
   d6cf4:	463a      	mov	r2, r7
   d6cf6:	b289      	uxth	r1, r1
   d6cf8:	4810      	ldr	r0, [pc, #64]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6cfa:	9700      	str	r7, [sp, #0]
   d6cfc:	f007 f9ac 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6d00:	f104 010f 	add.w	r1, r4, #15
   d6d04:	462b      	mov	r3, r5
   d6d06:	4632      	mov	r2, r6
   d6d08:	b289      	uxth	r1, r1
   d6d0a:	480c      	ldr	r0, [pc, #48]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6d0c:	f8cd 8000 	str.w	r8, [sp]
   d6d10:	f007 f9a2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6d14:	f104 0110 	add.w	r1, r4, #16
   d6d18:	462b      	mov	r3, r5
   d6d1a:	4632      	mov	r2, r6
   d6d1c:	b289      	uxth	r1, r1
   d6d1e:	f8cd 8000 	str.w	r8, [sp]
   d6d22:	4806      	ldr	r0, [pc, #24]	; (d6d3c <_Z4snumiiiii+0x730>)
   d6d24:	f007 f998 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6d28:	f104 0111 	add.w	r1, r4, #17
   d6d2c:	f8cd 8000 	str.w	r8, [sp]
   d6d30:	462b      	mov	r3, r5
   d6d32:	4632      	mov	r2, r6
   d6d34:	e121      	b.n	d6f7a <_Z4snumiiiii+0x96e>
   d6d36:	bf00      	nop
   d6d38:	80000001 	.word	0x80000001
   d6d3c:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
   d6d40:	2804      	cmp	r0, #4
   d6d42:	f000 8133 	beq.w	d6fac <_Z4snumiiiii+0x9a0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 5)
   d6d46:	2805      	cmp	r0, #5
   d6d48:	f040 826e 	bne.w	d7228 <_Z4snumiiiii+0xc1c>
    {
        if((pix/8)%2 == 1)
   d6d4c:	4b95      	ldr	r3, [pc, #596]	; (d6fa4 <_Z4snumiiiii+0x998>)
   d6d4e:	2708      	movs	r7, #8
   d6d50:	fb94 f7f7 	sdiv	r7, r4, r7
   d6d54:	403b      	ands	r3, r7
   d6d56:	2b00      	cmp	r3, #0
   d6d58:	bfbe      	ittt	lt
   d6d5a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6d5e:	f063 0301 	ornlt	r3, r3, #1
   d6d62:	3301      	addlt	r3, #1
   d6d64:	2b01      	cmp	r3, #1
   d6d66:	f040 8094 	bne.w	d6e92 <_Z4snumiiiii+0x886>
        {
            strip.setPixelColor(pix,R,G,B);
   d6d6a:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6d6e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6d72:	488d      	ldr	r0, [pc, #564]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6d74:	f8cd a000 	str.w	sl, [sp]
   d6d78:	b2a6      	uxth	r6, r4
   d6d7a:	fa5f f985 	uxtb.w	r9, r5
   d6d7e:	464b      	mov	r3, r9
   d6d80:	4642      	mov	r2, r8
   d6d82:	4631      	mov	r1, r6
   d6d84:	f007 f968 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6d88:	1e71      	subs	r1, r6, #1
   d6d8a:	464b      	mov	r3, r9
   d6d8c:	4642      	mov	r2, r8
   d6d8e:	b289      	uxth	r1, r1
   d6d90:	4885      	ldr	r0, [pc, #532]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6d92:	f8cd a000 	str.w	sl, [sp]
   d6d96:	f007 f95f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6d9a:	1eb1      	subs	r1, r6, #2
   d6d9c:	464b      	mov	r3, r9
   d6d9e:	4642      	mov	r2, r8
   d6da0:	b289      	uxth	r1, r1
   d6da2:	4881      	ldr	r0, [pc, #516]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6da4:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d6da8:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d6dac:	f007 f954 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6db0:	1ef1      	subs	r1, r6, #3
   d6db2:	465b      	mov	r3, fp
   d6db4:	465a      	mov	r2, fp
   d6db6:	b289      	uxth	r1, r1
   d6db8:	487b      	ldr	r0, [pc, #492]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6dba:	f8cd b000 	str.w	fp, [sp]
   d6dbe:	f007 f94b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6dc2:	1f31      	subs	r1, r6, #4
   d6dc4:	464b      	mov	r3, r9
   d6dc6:	4642      	mov	r2, r8
   d6dc8:	b289      	uxth	r1, r1
   d6dca:	4877      	ldr	r0, [pc, #476]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6dcc:	f8cd a000 	str.w	sl, [sp]
   d6dd0:	f007 f942 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6dd4:	1c71      	adds	r1, r6, #1
   d6dd6:	464b      	mov	r3, r9
   d6dd8:	4642      	mov	r2, r8
   d6dda:	b289      	uxth	r1, r1
   d6ddc:	4872      	ldr	r0, [pc, #456]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6dde:	f8cd a000 	str.w	sl, [sp]
   d6de2:	f007 f939 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6de6:	1cb1      	adds	r1, r6, #2
   d6de8:	465b      	mov	r3, fp
   d6dea:	465a      	mov	r2, fp
   d6dec:	b289      	uxth	r1, r1
   d6dee:	486e      	ldr	r0, [pc, #440]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6df0:	f8cd b000 	str.w	fp, [sp]
   d6df4:	f007 f930 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6df8:	1cf1      	adds	r1, r6, #3
   d6dfa:	464b      	mov	r3, r9
   d6dfc:	4642      	mov	r2, r8
   d6dfe:	b289      	uxth	r1, r1
   d6e00:	4869      	ldr	r0, [pc, #420]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e02:	f8cd a000 	str.w	sl, [sp]
   d6e06:	f007 f927 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6e0a:	1d31      	adds	r1, r6, #4
   d6e0c:	465b      	mov	r3, fp
   d6e0e:	465a      	mov	r2, fp
   d6e10:	b289      	uxth	r1, r1
   d6e12:	4865      	ldr	r0, [pc, #404]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e14:	f8cd b000 	str.w	fp, [sp]
   d6e18:	f007 f91e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6e1c:	1d71      	adds	r1, r6, #5
   d6e1e:	464b      	mov	r3, r9
   d6e20:	4642      	mov	r2, r8
   d6e22:	b289      	uxth	r1, r1
   d6e24:	4860      	ldr	r0, [pc, #384]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e26:	f8cd a000 	str.w	sl, [sp]
   d6e2a:	f007 f915 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6e2e:	f106 0110 	add.w	r1, r6, #16
   d6e32:	464b      	mov	r3, r9
   d6e34:	4642      	mov	r2, r8
   d6e36:	b289      	uxth	r1, r1
   d6e38:	485b      	ldr	r0, [pc, #364]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e3a:	f8cd a000 	str.w	sl, [sp]
   d6e3e:	f007 f90b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6e42:	f106 010f 	add.w	r1, r6, #15
   d6e46:	465b      	mov	r3, fp
   d6e48:	465a      	mov	r2, fp
   d6e4a:	b289      	uxth	r1, r1
   d6e4c:	4856      	ldr	r0, [pc, #344]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e4e:	f8cd b000 	str.w	fp, [sp]
   d6e52:	f007 f901 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6e56:	f106 010e 	add.w	r1, r6, #14
   d6e5a:	464b      	mov	r3, r9
   d6e5c:	4642      	mov	r2, r8
   d6e5e:	b289      	uxth	r1, r1
   d6e60:	4851      	ldr	r0, [pc, #324]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e62:	f8cd a000 	str.w	sl, [sp]
   d6e66:	f007 f8f7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6e6a:	f106 010d 	add.w	r1, r6, #13
   d6e6e:	464b      	mov	r3, r9
   d6e70:	4642      	mov	r2, r8
   d6e72:	b289      	uxth	r1, r1
   d6e74:	484c      	ldr	r0, [pc, #304]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e76:	f8cd a000 	str.w	sl, [sp]
   d6e7a:	f007 f8ed 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6e7e:	f106 010c 	add.w	r1, r6, #12
   d6e82:	f8cd a000 	str.w	sl, [sp]
   d6e86:	464b      	mov	r3, r9
   d6e88:	4642      	mov	r2, r8
   d6e8a:	b289      	uxth	r1, r1
   d6e8c:	4846      	ldr	r0, [pc, #280]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6e8e:	f007 f8e3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6e92:	f017 0701 	ands.w	r7, r7, #1
   d6e96:	f040 8753 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6e9a:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6e9e:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6ea2:	4841      	ldr	r0, [pc, #260]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6ea4:	f8cd 8000 	str.w	r8, [sp]
   d6ea8:	b2a4      	uxth	r4, r4
   d6eaa:	b2ed      	uxtb	r5, r5
   d6eac:	462b      	mov	r3, r5
   d6eae:	4632      	mov	r2, r6
   d6eb0:	4621      	mov	r1, r4
   d6eb2:	f007 f8d1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6eb6:	1c61      	adds	r1, r4, #1
   d6eb8:	462b      	mov	r3, r5
   d6eba:	4632      	mov	r2, r6
   d6ebc:	b289      	uxth	r1, r1
   d6ebe:	483a      	ldr	r0, [pc, #232]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6ec0:	f8cd 8000 	str.w	r8, [sp]
   d6ec4:	f007 f8c8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6ec8:	1ca1      	adds	r1, r4, #2
   d6eca:	462b      	mov	r3, r5
   d6ecc:	4632      	mov	r2, r6
   d6ece:	b289      	uxth	r1, r1
   d6ed0:	4835      	ldr	r0, [pc, #212]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6ed2:	f8cd 8000 	str.w	r8, [sp]
   d6ed6:	f007 f8bf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6eda:	1ce1      	adds	r1, r4, #3
   d6edc:	463b      	mov	r3, r7
   d6ede:	463a      	mov	r2, r7
   d6ee0:	b289      	uxth	r1, r1
   d6ee2:	4831      	ldr	r0, [pc, #196]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6ee4:	9700      	str	r7, [sp, #0]
   d6ee6:	f007 f8b7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6eea:	1d21      	adds	r1, r4, #4
   d6eec:	462b      	mov	r3, r5
   d6eee:	4632      	mov	r2, r6
   d6ef0:	b289      	uxth	r1, r1
   d6ef2:	482d      	ldr	r0, [pc, #180]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6ef4:	f8cd 8000 	str.w	r8, [sp]
   d6ef8:	f007 f8ae 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6efc:	f104 010b 	add.w	r1, r4, #11
   d6f00:	462b      	mov	r3, r5
   d6f02:	4632      	mov	r2, r6
   d6f04:	b289      	uxth	r1, r1
   d6f06:	4828      	ldr	r0, [pc, #160]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f08:	f8cd 8000 	str.w	r8, [sp]
   d6f0c:	f007 f8a4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6f10:	f104 010c 	add.w	r1, r4, #12
   d6f14:	463b      	mov	r3, r7
   d6f16:	463a      	mov	r2, r7
   d6f18:	b289      	uxth	r1, r1
   d6f1a:	4823      	ldr	r0, [pc, #140]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f1c:	9700      	str	r7, [sp, #0]
   d6f1e:	f007 f89b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6f22:	f104 010d 	add.w	r1, r4, #13
   d6f26:	462b      	mov	r3, r5
   d6f28:	4632      	mov	r2, r6
   d6f2a:	b289      	uxth	r1, r1
   d6f2c:	481e      	ldr	r0, [pc, #120]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f2e:	f8cd 8000 	str.w	r8, [sp]
   d6f32:	f007 f891 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6f36:	f104 010e 	add.w	r1, r4, #14
   d6f3a:	463b      	mov	r3, r7
   d6f3c:	463a      	mov	r2, r7
   d6f3e:	b289      	uxth	r1, r1
   d6f40:	4819      	ldr	r0, [pc, #100]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f42:	9700      	str	r7, [sp, #0]
   d6f44:	f007 f888 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6f48:	f104 010f 	add.w	r1, r4, #15
   d6f4c:	462b      	mov	r3, r5
   d6f4e:	4632      	mov	r2, r6
   d6f50:	b289      	uxth	r1, r1
   d6f52:	4815      	ldr	r0, [pc, #84]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f54:	f8cd 8000 	str.w	r8, [sp]
   d6f58:	f007 f87e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6f5c:	f104 0110 	add.w	r1, r4, #16
   d6f60:	462b      	mov	r3, r5
   d6f62:	4632      	mov	r2, r6
   d6f64:	b289      	uxth	r1, r1
   d6f66:	f8cd 8000 	str.w	r8, [sp]
   d6f6a:	480f      	ldr	r0, [pc, #60]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f6c:	f007 f874 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d6f70:	f104 0111 	add.w	r1, r4, #17
   d6f74:	9700      	str	r7, [sp, #0]
   d6f76:	463b      	mov	r3, r7
   d6f78:	463a      	mov	r2, r7
   d6f7a:	b289      	uxth	r1, r1
   d6f7c:	480a      	ldr	r0, [pc, #40]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f7e:	f007 f86b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6f82:	f104 0112 	add.w	r1, r4, #18
   d6f86:	462b      	mov	r3, r5
   d6f88:	4632      	mov	r2, r6
   d6f8a:	b289      	uxth	r1, r1
   d6f8c:	f8cd 8000 	str.w	r8, [sp]
   d6f90:	4805      	ldr	r0, [pc, #20]	; (d6fa8 <_Z4snumiiiii+0x99c>)
   d6f92:	f007 f861 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d6f96:	f104 0113 	add.w	r1, r4, #19
   d6f9a:	f8cd 8000 	str.w	r8, [sp]
   d6f9e:	462b      	mov	r3, r5
   d6fa0:	4632      	mov	r2, r6
   d6fa2:	e599      	b.n	d6ad8 <_Z4snumiiiii+0x4cc>
   d6fa4:	80000001 	.word	0x80000001
   d6fa8:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
    {
        if((pix/8)%2 == 1)
   d6fac:	4b9c      	ldr	r3, [pc, #624]	; (d7220 <_Z4snumiiiii+0xc14>)
   d6fae:	2608      	movs	r6, #8
   d6fb0:	fb94 f6f6 	sdiv	r6, r4, r6
   d6fb4:	4033      	ands	r3, r6
   d6fb6:	2b00      	cmp	r3, #0
   d6fb8:	bfbe      	ittt	lt
   d6fba:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6fbe:	f063 0301 	ornlt	r3, r3, #1
   d6fc2:	3301      	addlt	r3, #1
   d6fc4:	2b01      	cmp	r3, #1
   d6fc6:	f040 8094 	bne.w	d70f2 <_Z4snumiiiii+0xae6>
        {
            strip.setPixelColor(pix,R,G,B);
   d6fca:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d6fce:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d6fd2:	4894      	ldr	r0, [pc, #592]	; (d7224 <_Z4snumiiiii+0xc18>)
   d6fd4:	f8cd b000 	str.w	fp, [sp]
   d6fd8:	b2a7      	uxth	r7, r4
   d6fda:	fa5f fa85 	uxtb.w	sl, r5
   d6fde:	4653      	mov	r3, sl
   d6fe0:	464a      	mov	r2, r9
   d6fe2:	4639      	mov	r1, r7
   d6fe4:	f007 f838 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6fe8:	1e79      	subs	r1, r7, #1
   d6fea:	4653      	mov	r3, sl
   d6fec:	464a      	mov	r2, r9
   d6fee:	b289      	uxth	r1, r1
   d6ff0:	488c      	ldr	r0, [pc, #560]	; (d7224 <_Z4snumiiiii+0xc18>)
   d6ff2:	f8cd b000 	str.w	fp, [sp]
   d6ff6:	f007 f82f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6ffa:	1eb9      	subs	r1, r7, #2
   d6ffc:	4653      	mov	r3, sl
   d6ffe:	464a      	mov	r2, r9
   d7000:	b289      	uxth	r1, r1
   d7002:	4888      	ldr	r0, [pc, #544]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7004:	f8cd b000 	str.w	fp, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d7008:	f04f 0800 	mov.w	r8, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d700c:	f007 f824 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d7010:	1ef9      	subs	r1, r7, #3
   d7012:	4643      	mov	r3, r8
   d7014:	4642      	mov	r2, r8
   d7016:	b289      	uxth	r1, r1
   d7018:	4882      	ldr	r0, [pc, #520]	; (d7224 <_Z4snumiiiii+0xc18>)
   d701a:	f8cd 8000 	str.w	r8, [sp]
   d701e:	f007 f81b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d7022:	1f39      	subs	r1, r7, #4
   d7024:	4643      	mov	r3, r8
   d7026:	4642      	mov	r2, r8
   d7028:	b289      	uxth	r1, r1
   d702a:	487e      	ldr	r0, [pc, #504]	; (d7224 <_Z4snumiiiii+0xc18>)
   d702c:	f8cd 8000 	str.w	r8, [sp]
   d7030:	f007 f812 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d7034:	1c79      	adds	r1, r7, #1
   d7036:	4643      	mov	r3, r8
   d7038:	4642      	mov	r2, r8
   d703a:	b289      	uxth	r1, r1
   d703c:	4879      	ldr	r0, [pc, #484]	; (d7224 <_Z4snumiiiii+0xc18>)
   d703e:	f8cd 8000 	str.w	r8, [sp]
   d7042:	f007 f809 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7046:	1cb9      	adds	r1, r7, #2
   d7048:	4643      	mov	r3, r8
   d704a:	4642      	mov	r2, r8
   d704c:	b289      	uxth	r1, r1
   d704e:	4875      	ldr	r0, [pc, #468]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7050:	f8cd 8000 	str.w	r8, [sp]
   d7054:	f007 f800 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7058:	1cf9      	adds	r1, r7, #3
   d705a:	4653      	mov	r3, sl
   d705c:	464a      	mov	r2, r9
   d705e:	b289      	uxth	r1, r1
   d7060:	4870      	ldr	r0, [pc, #448]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7062:	f8cd b000 	str.w	fp, [sp]
   d7066:	f006 fff7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d706a:	1d39      	adds	r1, r7, #4
   d706c:	4643      	mov	r3, r8
   d706e:	4642      	mov	r2, r8
   d7070:	b289      	uxth	r1, r1
   d7072:	486c      	ldr	r0, [pc, #432]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7074:	f8cd 8000 	str.w	r8, [sp]
   d7078:	f006 ffee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d707c:	1d79      	adds	r1, r7, #5
   d707e:	4643      	mov	r3, r8
   d7080:	4642      	mov	r2, r8
   d7082:	b289      	uxth	r1, r1
   d7084:	4867      	ldr	r0, [pc, #412]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7086:	f8cd 8000 	str.w	r8, [sp]
   d708a:	f006 ffe5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d708e:	f107 0110 	add.w	r1, r7, #16
   d7092:	4653      	mov	r3, sl
   d7094:	464a      	mov	r2, r9
   d7096:	b289      	uxth	r1, r1
   d7098:	4862      	ldr	r0, [pc, #392]	; (d7224 <_Z4snumiiiii+0xc18>)
   d709a:	f8cd b000 	str.w	fp, [sp]
   d709e:	f006 ffdb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d70a2:	f107 010f 	add.w	r1, r7, #15
   d70a6:	4653      	mov	r3, sl
   d70a8:	464a      	mov	r2, r9
   d70aa:	b289      	uxth	r1, r1
   d70ac:	485d      	ldr	r0, [pc, #372]	; (d7224 <_Z4snumiiiii+0xc18>)
   d70ae:	f8cd b000 	str.w	fp, [sp]
   d70b2:	f006 ffd1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d70b6:	f107 010e 	add.w	r1, r7, #14
   d70ba:	4653      	mov	r3, sl
   d70bc:	464a      	mov	r2, r9
   d70be:	b289      	uxth	r1, r1
   d70c0:	4858      	ldr	r0, [pc, #352]	; (d7224 <_Z4snumiiiii+0xc18>)
   d70c2:	f8cd b000 	str.w	fp, [sp]
   d70c6:	f006 ffc7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d70ca:	f107 010d 	add.w	r1, r7, #13
   d70ce:	4653      	mov	r3, sl
   d70d0:	464a      	mov	r2, r9
   d70d2:	b289      	uxth	r1, r1
   d70d4:	4853      	ldr	r0, [pc, #332]	; (d7224 <_Z4snumiiiii+0xc18>)
   d70d6:	f8cd b000 	str.w	fp, [sp]
   d70da:	f006 ffbd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d70de:	f107 010c 	add.w	r1, r7, #12
   d70e2:	f8cd b000 	str.w	fp, [sp]
   d70e6:	4653      	mov	r3, sl
   d70e8:	464a      	mov	r2, r9
   d70ea:	b289      	uxth	r1, r1
   d70ec:	484d      	ldr	r0, [pc, #308]	; (d7224 <_Z4snumiiiii+0xc18>)
   d70ee:	f006 ffb3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d70f2:	f016 0601 	ands.w	r6, r6, #1
   d70f6:	f040 8623 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d70fa:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d70fe:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7102:	f8cd 8000 	str.w	r8, [sp]
   d7106:	b2a4      	uxth	r4, r4
   d7108:	b2ed      	uxtb	r5, r5
   d710a:	462b      	mov	r3, r5
   d710c:	463a      	mov	r2, r7
   d710e:	4621      	mov	r1, r4
   d7110:	4844      	ldr	r0, [pc, #272]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7112:	f006 ffa1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7116:	1c61      	adds	r1, r4, #1
   d7118:	462b      	mov	r3, r5
   d711a:	463a      	mov	r2, r7
   d711c:	f8cd 8000 	str.w	r8, [sp]
   d7120:	b289      	uxth	r1, r1
   d7122:	4840      	ldr	r0, [pc, #256]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7124:	f006 ff98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7128:	1ca1      	adds	r1, r4, #2
   d712a:	462b      	mov	r3, r5
   d712c:	463a      	mov	r2, r7
   d712e:	f8cd 8000 	str.w	r8, [sp]
   d7132:	b289      	uxth	r1, r1
   d7134:	483b      	ldr	r0, [pc, #236]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7136:	f006 ff8f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d713a:	1ce1      	adds	r1, r4, #3
   d713c:	4633      	mov	r3, r6
   d713e:	4632      	mov	r2, r6
   d7140:	9600      	str	r6, [sp, #0]
   d7142:	b289      	uxth	r1, r1
   d7144:	4837      	ldr	r0, [pc, #220]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7146:	f006 ff87 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d714a:	1d21      	adds	r1, r4, #4
   d714c:	4633      	mov	r3, r6
   d714e:	4632      	mov	r2, r6
   d7150:	9600      	str	r6, [sp, #0]
   d7152:	b289      	uxth	r1, r1
   d7154:	4833      	ldr	r0, [pc, #204]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7156:	f006 ff7f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d715a:	f104 010b 	add.w	r1, r4, #11
   d715e:	4633      	mov	r3, r6
   d7160:	4632      	mov	r2, r6
   d7162:	9600      	str	r6, [sp, #0]
   d7164:	b289      	uxth	r1, r1
   d7166:	482f      	ldr	r0, [pc, #188]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7168:	f006 ff76 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d716c:	f104 010c 	add.w	r1, r4, #12
   d7170:	4633      	mov	r3, r6
   d7172:	4632      	mov	r2, r6
   d7174:	9600      	str	r6, [sp, #0]
   d7176:	b289      	uxth	r1, r1
   d7178:	482a      	ldr	r0, [pc, #168]	; (d7224 <_Z4snumiiiii+0xc18>)
   d717a:	f006 ff6d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d717e:	f104 010d 	add.w	r1, r4, #13
   d7182:	462b      	mov	r3, r5
   d7184:	463a      	mov	r2, r7
   d7186:	f8cd 8000 	str.w	r8, [sp]
   d718a:	b289      	uxth	r1, r1
   d718c:	4825      	ldr	r0, [pc, #148]	; (d7224 <_Z4snumiiiii+0xc18>)
   d718e:	f006 ff63 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d7192:	f104 010e 	add.w	r1, r4, #14
   d7196:	4633      	mov	r3, r6
   d7198:	4632      	mov	r2, r6
   d719a:	9600      	str	r6, [sp, #0]
   d719c:	b289      	uxth	r1, r1
   d719e:	4821      	ldr	r0, [pc, #132]	; (d7224 <_Z4snumiiiii+0xc18>)
   d71a0:	f006 ff5a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d71a4:	f104 010f 	add.w	r1, r4, #15
   d71a8:	4633      	mov	r3, r6
   d71aa:	4632      	mov	r2, r6
   d71ac:	9600      	str	r6, [sp, #0]
   d71ae:	b289      	uxth	r1, r1
   d71b0:	481c      	ldr	r0, [pc, #112]	; (d7224 <_Z4snumiiiii+0xc18>)
   d71b2:	f006 ff51 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d71b6:	f104 0110 	add.w	r1, r4, #16
   d71ba:	462b      	mov	r3, r5
   d71bc:	463a      	mov	r2, r7
   d71be:	f8cd 8000 	str.w	r8, [sp]
   d71c2:	b289      	uxth	r1, r1
   d71c4:	4817      	ldr	r0, [pc, #92]	; (d7224 <_Z4snumiiiii+0xc18>)
   d71c6:	f006 ff47 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d71ca:	f104 0111 	add.w	r1, r4, #17
   d71ce:	462b      	mov	r3, r5
   d71d0:	463a      	mov	r2, r7
   d71d2:	f8cd 8000 	str.w	r8, [sp]
   d71d6:	b289      	uxth	r1, r1
   d71d8:	4812      	ldr	r0, [pc, #72]	; (d7224 <_Z4snumiiiii+0xc18>)
   d71da:	f006 ff3d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d71de:	f104 0112 	add.w	r1, r4, #18
   d71e2:	462b      	mov	r3, r5
   d71e4:	463a      	mov	r2, r7
   d71e6:	f8cd 8000 	str.w	r8, [sp]
   d71ea:	b289      	uxth	r1, r1
   d71ec:	480d      	ldr	r0, [pc, #52]	; (d7224 <_Z4snumiiiii+0xc18>)
   d71ee:	f006 ff33 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d71f2:	f104 0113 	add.w	r1, r4, #19
   d71f6:	462b      	mov	r3, r5
   d71f8:	463a      	mov	r2, r7
   d71fa:	f8cd 8000 	str.w	r8, [sp]
   d71fe:	b289      	uxth	r1, r1
   d7200:	4808      	ldr	r0, [pc, #32]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7202:	f006 ff29 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7206:	f104 0114 	add.w	r1, r4, #20
   d720a:	f8cd 8000 	str.w	r8, [sp]
   d720e:	462b      	mov	r3, r5
   d7210:	463a      	mov	r2, r7
   d7212:	b289      	uxth	r1, r1
   d7214:	4803      	ldr	r0, [pc, #12]	; (d7224 <_Z4snumiiiii+0xc18>)
   d7216:	f006 ff1f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d721a:	f000 bd91 	b.w	d7d40 <_Z4snumiiiii+0x1734>
   d721e:	bf00      	nop
   d7220:	80000001 	.word	0x80000001
   d7224:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 6)
   d7228:	2806      	cmp	r0, #6
   d722a:	f040 811d 	bne.w	d7468 <_Z4snumiiiii+0xe5c>
    {
        if((pix/8)%2 == 1)
   d722e:	4b8c      	ldr	r3, [pc, #560]	; (d7460 <_Z4snumiiiii+0xe54>)
   d7230:	2708      	movs	r7, #8
   d7232:	fb94 f7f7 	sdiv	r7, r4, r7
   d7236:	403b      	ands	r3, r7
   d7238:	2b00      	cmp	r3, #0
   d723a:	bfbe      	ittt	lt
   d723c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7240:	f063 0301 	ornlt	r3, r3, #1
   d7244:	3301      	addlt	r3, #1
   d7246:	2b01      	cmp	r3, #1
   d7248:	f040 8094 	bne.w	d7374 <_Z4snumiiiii+0xd68>
        {
            strip.setPixelColor(pix,R,G,B);
   d724c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7250:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7254:	4883      	ldr	r0, [pc, #524]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7256:	f8cd a000 	str.w	sl, [sp]
   d725a:	b2a6      	uxth	r6, r4
   d725c:	fa5f f985 	uxtb.w	r9, r5
   d7260:	464b      	mov	r3, r9
   d7262:	4642      	mov	r2, r8
   d7264:	4631      	mov	r1, r6
   d7266:	f006 fef7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d726a:	1e71      	subs	r1, r6, #1
   d726c:	464b      	mov	r3, r9
   d726e:	4642      	mov	r2, r8
   d7270:	b289      	uxth	r1, r1
   d7272:	487c      	ldr	r0, [pc, #496]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7274:	f8cd a000 	str.w	sl, [sp]
   d7278:	f006 feee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d727c:	1eb1      	subs	r1, r6, #2
   d727e:	464b      	mov	r3, r9
   d7280:	4642      	mov	r2, r8
   d7282:	b289      	uxth	r1, r1
   d7284:	4877      	ldr	r0, [pc, #476]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7286:	f8cd a000 	str.w	sl, [sp]
   d728a:	f006 fee5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d728e:	1ef1      	subs	r1, r6, #3
   d7290:	464b      	mov	r3, r9
   d7292:	4642      	mov	r2, r8
   d7294:	b289      	uxth	r1, r1
   d7296:	4873      	ldr	r0, [pc, #460]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7298:	f8cd a000 	str.w	sl, [sp]
   d729c:	f006 fedc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d72a0:	1f31      	subs	r1, r6, #4
   d72a2:	464b      	mov	r3, r9
   d72a4:	4642      	mov	r2, r8
   d72a6:	b289      	uxth	r1, r1
   d72a8:	486e      	ldr	r0, [pc, #440]	; (d7464 <_Z4snumiiiii+0xe58>)
   d72aa:	f8cd a000 	str.w	sl, [sp]
   d72ae:	f006 fed3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d72b2:	1c71      	adds	r1, r6, #1
   d72b4:	464b      	mov	r3, r9
   d72b6:	4642      	mov	r2, r8
   d72b8:	b289      	uxth	r1, r1
   d72ba:	486a      	ldr	r0, [pc, #424]	; (d7464 <_Z4snumiiiii+0xe58>)
   d72bc:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d72c0:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d72c4:	f006 fec8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d72c8:	1cb1      	adds	r1, r6, #2
   d72ca:	465b      	mov	r3, fp
   d72cc:	465a      	mov	r2, fp
   d72ce:	b289      	uxth	r1, r1
   d72d0:	4864      	ldr	r0, [pc, #400]	; (d7464 <_Z4snumiiiii+0xe58>)
   d72d2:	f8cd b000 	str.w	fp, [sp]
   d72d6:	f006 febf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d72da:	1cf1      	adds	r1, r6, #3
   d72dc:	464b      	mov	r3, r9
   d72de:	4642      	mov	r2, r8
   d72e0:	b289      	uxth	r1, r1
   d72e2:	4860      	ldr	r0, [pc, #384]	; (d7464 <_Z4snumiiiii+0xe58>)
   d72e4:	f8cd a000 	str.w	sl, [sp]
   d72e8:	f006 feb6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d72ec:	1d31      	adds	r1, r6, #4
   d72ee:	465b      	mov	r3, fp
   d72f0:	465a      	mov	r2, fp
   d72f2:	b289      	uxth	r1, r1
   d72f4:	485b      	ldr	r0, [pc, #364]	; (d7464 <_Z4snumiiiii+0xe58>)
   d72f6:	f8cd b000 	str.w	fp, [sp]
   d72fa:	f006 fead 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d72fe:	1d71      	adds	r1, r6, #5
   d7300:	464b      	mov	r3, r9
   d7302:	4642      	mov	r2, r8
   d7304:	b289      	uxth	r1, r1
   d7306:	4857      	ldr	r0, [pc, #348]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7308:	f8cd a000 	str.w	sl, [sp]
   d730c:	f006 fea4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7310:	f106 0110 	add.w	r1, r6, #16
   d7314:	464b      	mov	r3, r9
   d7316:	4642      	mov	r2, r8
   d7318:	b289      	uxth	r1, r1
   d731a:	4852      	ldr	r0, [pc, #328]	; (d7464 <_Z4snumiiiii+0xe58>)
   d731c:	f8cd a000 	str.w	sl, [sp]
   d7320:	f006 fe9a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d7324:	f106 010f 	add.w	r1, r6, #15
   d7328:	465b      	mov	r3, fp
   d732a:	465a      	mov	r2, fp
   d732c:	b289      	uxth	r1, r1
   d732e:	484d      	ldr	r0, [pc, #308]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7330:	f8cd b000 	str.w	fp, [sp]
   d7334:	f006 fe90 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7338:	f106 010e 	add.w	r1, r6, #14
   d733c:	464b      	mov	r3, r9
   d733e:	4642      	mov	r2, r8
   d7340:	b289      	uxth	r1, r1
   d7342:	4848      	ldr	r0, [pc, #288]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7344:	f8cd a000 	str.w	sl, [sp]
   d7348:	f006 fe86 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d734c:	f106 010d 	add.w	r1, r6, #13
   d7350:	464b      	mov	r3, r9
   d7352:	4642      	mov	r2, r8
   d7354:	b289      	uxth	r1, r1
   d7356:	4843      	ldr	r0, [pc, #268]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7358:	f8cd a000 	str.w	sl, [sp]
   d735c:	f006 fe7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7360:	f106 010c 	add.w	r1, r6, #12
   d7364:	f8cd a000 	str.w	sl, [sp]
   d7368:	464b      	mov	r3, r9
   d736a:	4642      	mov	r2, r8
   d736c:	b289      	uxth	r1, r1
   d736e:	483d      	ldr	r0, [pc, #244]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7370:	f006 fe72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7374:	f017 0701 	ands.w	r7, r7, #1
   d7378:	f040 84e2 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d737c:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d7380:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7384:	4837      	ldr	r0, [pc, #220]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7386:	f8cd 8000 	str.w	r8, [sp]
   d738a:	b2a4      	uxth	r4, r4
   d738c:	b2ed      	uxtb	r5, r5
   d738e:	462b      	mov	r3, r5
   d7390:	4632      	mov	r2, r6
   d7392:	4621      	mov	r1, r4
   d7394:	f006 fe60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7398:	1c61      	adds	r1, r4, #1
   d739a:	462b      	mov	r3, r5
   d739c:	4632      	mov	r2, r6
   d739e:	b289      	uxth	r1, r1
   d73a0:	4830      	ldr	r0, [pc, #192]	; (d7464 <_Z4snumiiiii+0xe58>)
   d73a2:	f8cd 8000 	str.w	r8, [sp]
   d73a6:	f006 fe57 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d73aa:	1ca1      	adds	r1, r4, #2
   d73ac:	462b      	mov	r3, r5
   d73ae:	4632      	mov	r2, r6
   d73b0:	b289      	uxth	r1, r1
   d73b2:	482c      	ldr	r0, [pc, #176]	; (d7464 <_Z4snumiiiii+0xe58>)
   d73b4:	f8cd 8000 	str.w	r8, [sp]
   d73b8:	f006 fe4e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d73bc:	1ce1      	adds	r1, r4, #3
   d73be:	462b      	mov	r3, r5
   d73c0:	4632      	mov	r2, r6
   d73c2:	b289      	uxth	r1, r1
   d73c4:	4827      	ldr	r0, [pc, #156]	; (d7464 <_Z4snumiiiii+0xe58>)
   d73c6:	f8cd 8000 	str.w	r8, [sp]
   d73ca:	f006 fe45 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d73ce:	1d21      	adds	r1, r4, #4
   d73d0:	462b      	mov	r3, r5
   d73d2:	4632      	mov	r2, r6
   d73d4:	b289      	uxth	r1, r1
   d73d6:	4823      	ldr	r0, [pc, #140]	; (d7464 <_Z4snumiiiii+0xe58>)
   d73d8:	f8cd 8000 	str.w	r8, [sp]
   d73dc:	f006 fe3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d73e0:	f104 010b 	add.w	r1, r4, #11
   d73e4:	462b      	mov	r3, r5
   d73e6:	4632      	mov	r2, r6
   d73e8:	b289      	uxth	r1, r1
   d73ea:	481e      	ldr	r0, [pc, #120]	; (d7464 <_Z4snumiiiii+0xe58>)
   d73ec:	f8cd 8000 	str.w	r8, [sp]
   d73f0:	f006 fe32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d73f4:	f104 010c 	add.w	r1, r4, #12
   d73f8:	463b      	mov	r3, r7
   d73fa:	463a      	mov	r2, r7
   d73fc:	b289      	uxth	r1, r1
   d73fe:	4819      	ldr	r0, [pc, #100]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7400:	9700      	str	r7, [sp, #0]
   d7402:	f006 fe29 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7406:	f104 010d 	add.w	r1, r4, #13
   d740a:	462b      	mov	r3, r5
   d740c:	4632      	mov	r2, r6
   d740e:	b289      	uxth	r1, r1
   d7410:	4814      	ldr	r0, [pc, #80]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7412:	f8cd 8000 	str.w	r8, [sp]
   d7416:	f006 fe1f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d741a:	f104 010e 	add.w	r1, r4, #14
   d741e:	463b      	mov	r3, r7
   d7420:	463a      	mov	r2, r7
   d7422:	b289      	uxth	r1, r1
   d7424:	480f      	ldr	r0, [pc, #60]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7426:	9700      	str	r7, [sp, #0]
   d7428:	f006 fe16 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d742c:	f104 010f 	add.w	r1, r4, #15
   d7430:	462b      	mov	r3, r5
   d7432:	4632      	mov	r2, r6
   d7434:	b289      	uxth	r1, r1
   d7436:	480b      	ldr	r0, [pc, #44]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7438:	f8cd 8000 	str.w	r8, [sp]
   d743c:	f006 fe0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7440:	f104 0110 	add.w	r1, r4, #16
   d7444:	462b      	mov	r3, r5
   d7446:	4632      	mov	r2, r6
   d7448:	b289      	uxth	r1, r1
   d744a:	f8cd 8000 	str.w	r8, [sp]
   d744e:	4805      	ldr	r0, [pc, #20]	; (d7464 <_Z4snumiiiii+0xe58>)
   d7450:	f006 fe02 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d7454:	f104 0111 	add.w	r1, r4, #17
   d7458:	9700      	str	r7, [sp, #0]
   d745a:	463b      	mov	r3, r7
   d745c:	463a      	mov	r2, r7
   d745e:	e124      	b.n	d76aa <_Z4snumiiiii+0x109e>
   d7460:	80000001 	.word	0x80000001
   d7464:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
   d7468:	2807      	cmp	r0, #7
   d746a:	f000 8147 	beq.w	d76fc <_Z4snumiiiii+0x10f0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
   d746e:	2808      	cmp	r0, #8
   d7470:	f000 8236 	beq.w	d78e0 <_Z4snumiiiii+0x12d4>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 9)
   d7474:	2809      	cmp	r0, #9
   d7476:	f040 836f 	bne.w	d7b58 <_Z4snumiiiii+0x154c>
    {
        if((pix/8)%2 == 1)
   d747a:	4b9e      	ldr	r3, [pc, #632]	; (d76f4 <_Z4snumiiiii+0x10e8>)
   d747c:	2708      	movs	r7, #8
   d747e:	fb94 f7f7 	sdiv	r7, r4, r7
   d7482:	403b      	ands	r3, r7
   d7484:	2b00      	cmp	r3, #0
   d7486:	bfbe      	ittt	lt
   d7488:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d748c:	f063 0301 	ornlt	r3, r3, #1
   d7490:	3301      	addlt	r3, #1
   d7492:	2b01      	cmp	r3, #1
   d7494:	f040 8094 	bne.w	d75c0 <_Z4snumiiiii+0xfb4>
        {
            strip.setPixelColor(pix,R,G,B);
   d7498:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d749c:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d74a0:	4895      	ldr	r0, [pc, #596]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d74a2:	f8cd a000 	str.w	sl, [sp]
   d74a6:	b2a6      	uxth	r6, r4
   d74a8:	fa5f f985 	uxtb.w	r9, r5
   d74ac:	464b      	mov	r3, r9
   d74ae:	4642      	mov	r2, r8
   d74b0:	4631      	mov	r1, r6
   d74b2:	f006 fdd1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d74b6:	1e71      	subs	r1, r6, #1
   d74b8:	464b      	mov	r3, r9
   d74ba:	4642      	mov	r2, r8
   d74bc:	b289      	uxth	r1, r1
   d74be:	488e      	ldr	r0, [pc, #568]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d74c0:	f8cd a000 	str.w	sl, [sp]
   d74c4:	f006 fdc8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d74c8:	1eb1      	subs	r1, r6, #2
   d74ca:	464b      	mov	r3, r9
   d74cc:	4642      	mov	r2, r8
   d74ce:	b289      	uxth	r1, r1
   d74d0:	4889      	ldr	r0, [pc, #548]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d74d2:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d74d6:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d74da:	f006 fdbd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d74de:	1ef1      	subs	r1, r6, #3
   d74e0:	465b      	mov	r3, fp
   d74e2:	465a      	mov	r2, fp
   d74e4:	b289      	uxth	r1, r1
   d74e6:	4884      	ldr	r0, [pc, #528]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d74e8:	f8cd b000 	str.w	fp, [sp]
   d74ec:	f006 fdb4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d74f0:	1f31      	subs	r1, r6, #4
   d74f2:	464b      	mov	r3, r9
   d74f4:	4642      	mov	r2, r8
   d74f6:	b289      	uxth	r1, r1
   d74f8:	487f      	ldr	r0, [pc, #508]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d74fa:	f8cd a000 	str.w	sl, [sp]
   d74fe:	f006 fdab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7502:	1c71      	adds	r1, r6, #1
   d7504:	464b      	mov	r3, r9
   d7506:	4642      	mov	r2, r8
   d7508:	b289      	uxth	r1, r1
   d750a:	487b      	ldr	r0, [pc, #492]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d750c:	f8cd a000 	str.w	sl, [sp]
   d7510:	f006 fda2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7514:	1cb1      	adds	r1, r6, #2
   d7516:	465b      	mov	r3, fp
   d7518:	465a      	mov	r2, fp
   d751a:	b289      	uxth	r1, r1
   d751c:	4876      	ldr	r0, [pc, #472]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d751e:	f8cd b000 	str.w	fp, [sp]
   d7522:	f006 fd99 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7526:	1cf1      	adds	r1, r6, #3
   d7528:	464b      	mov	r3, r9
   d752a:	4642      	mov	r2, r8
   d752c:	b289      	uxth	r1, r1
   d752e:	4872      	ldr	r0, [pc, #456]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7530:	f8cd a000 	str.w	sl, [sp]
   d7534:	f006 fd90 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7538:	1d31      	adds	r1, r6, #4
   d753a:	465b      	mov	r3, fp
   d753c:	465a      	mov	r2, fp
   d753e:	b289      	uxth	r1, r1
   d7540:	486d      	ldr	r0, [pc, #436]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7542:	f8cd b000 	str.w	fp, [sp]
   d7546:	f006 fd87 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d754a:	1d71      	adds	r1, r6, #5
   d754c:	464b      	mov	r3, r9
   d754e:	4642      	mov	r2, r8
   d7550:	b289      	uxth	r1, r1
   d7552:	4869      	ldr	r0, [pc, #420]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7554:	f8cd a000 	str.w	sl, [sp]
   d7558:	f006 fd7e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d755c:	f106 0110 	add.w	r1, r6, #16
   d7560:	464b      	mov	r3, r9
   d7562:	4642      	mov	r2, r8
   d7564:	b289      	uxth	r1, r1
   d7566:	4864      	ldr	r0, [pc, #400]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7568:	f8cd a000 	str.w	sl, [sp]
   d756c:	f006 fd74 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7570:	f106 010f 	add.w	r1, r6, #15
   d7574:	464b      	mov	r3, r9
   d7576:	4642      	mov	r2, r8
   d7578:	b289      	uxth	r1, r1
   d757a:	485f      	ldr	r0, [pc, #380]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d757c:	f8cd a000 	str.w	sl, [sp]
   d7580:	f006 fd6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7584:	f106 010e 	add.w	r1, r6, #14
   d7588:	464b      	mov	r3, r9
   d758a:	4642      	mov	r2, r8
   d758c:	b289      	uxth	r1, r1
   d758e:	485a      	ldr	r0, [pc, #360]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7590:	f8cd a000 	str.w	sl, [sp]
   d7594:	f006 fd60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7598:	f106 010d 	add.w	r1, r6, #13
   d759c:	464b      	mov	r3, r9
   d759e:	4642      	mov	r2, r8
   d75a0:	b289      	uxth	r1, r1
   d75a2:	4855      	ldr	r0, [pc, #340]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d75a4:	f8cd a000 	str.w	sl, [sp]
   d75a8:	f006 fd56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d75ac:	f106 010c 	add.w	r1, r6, #12
   d75b0:	f8cd a000 	str.w	sl, [sp]
   d75b4:	464b      	mov	r3, r9
   d75b6:	4642      	mov	r2, r8
   d75b8:	b289      	uxth	r1, r1
   d75ba:	484f      	ldr	r0, [pc, #316]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d75bc:	f006 fd4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d75c0:	f017 0701 	ands.w	r7, r7, #1
   d75c4:	f040 83bc 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d75c8:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d75cc:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d75d0:	4849      	ldr	r0, [pc, #292]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d75d2:	f8cd 8000 	str.w	r8, [sp]
   d75d6:	b2a4      	uxth	r4, r4
   d75d8:	b2ed      	uxtb	r5, r5
   d75da:	462b      	mov	r3, r5
   d75dc:	4632      	mov	r2, r6
   d75de:	4621      	mov	r1, r4
   d75e0:	f006 fd3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d75e4:	1c61      	adds	r1, r4, #1
   d75e6:	462b      	mov	r3, r5
   d75e8:	4632      	mov	r2, r6
   d75ea:	b289      	uxth	r1, r1
   d75ec:	4842      	ldr	r0, [pc, #264]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d75ee:	f8cd 8000 	str.w	r8, [sp]
   d75f2:	f006 fd31 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d75f6:	1ca1      	adds	r1, r4, #2
   d75f8:	462b      	mov	r3, r5
   d75fa:	4632      	mov	r2, r6
   d75fc:	b289      	uxth	r1, r1
   d75fe:	483e      	ldr	r0, [pc, #248]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7600:	f8cd 8000 	str.w	r8, [sp]
   d7604:	f006 fd28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7608:	1ce1      	adds	r1, r4, #3
   d760a:	463b      	mov	r3, r7
   d760c:	463a      	mov	r2, r7
   d760e:	b289      	uxth	r1, r1
   d7610:	4839      	ldr	r0, [pc, #228]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7612:	9700      	str	r7, [sp, #0]
   d7614:	f006 fd20 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7618:	1d21      	adds	r1, r4, #4
   d761a:	462b      	mov	r3, r5
   d761c:	4632      	mov	r2, r6
   d761e:	b289      	uxth	r1, r1
   d7620:	4835      	ldr	r0, [pc, #212]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7622:	f8cd 8000 	str.w	r8, [sp]
   d7626:	f006 fd17 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d762a:	f104 010b 	add.w	r1, r4, #11
   d762e:	462b      	mov	r3, r5
   d7630:	4632      	mov	r2, r6
   d7632:	b289      	uxth	r1, r1
   d7634:	4830      	ldr	r0, [pc, #192]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7636:	f8cd 8000 	str.w	r8, [sp]
   d763a:	f006 fd0d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d763e:	f104 010c 	add.w	r1, r4, #12
   d7642:	463b      	mov	r3, r7
   d7644:	463a      	mov	r2, r7
   d7646:	b289      	uxth	r1, r1
   d7648:	9700      	str	r7, [sp, #0]
   d764a:	482b      	ldr	r0, [pc, #172]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d764c:	f006 fd04 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7650:	f104 010d 	add.w	r1, r4, #13
   d7654:	f8cd 8000 	str.w	r8, [sp]
   d7658:	462b      	mov	r3, r5
   d765a:	4632      	mov	r2, r6
            strip.setPixelColor(pix+2,R,G,B);
            strip.setPixelColor(pix+3,R,G,B);
            strip.setPixelColor(pix+4,R,G,B);
            strip.setPixelColor(pix+11,R,G,B);
            strip.setPixelColor(pix+12,0,0,0);
            strip.setPixelColor(pix+13,0,0,0);
   d765c:	b289      	uxth	r1, r1
   d765e:	4826      	ldr	r0, [pc, #152]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7660:	f006 fcfa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d7664:	f104 010e 	add.w	r1, r4, #14
   d7668:	463b      	mov	r3, r7
   d766a:	463a      	mov	r2, r7
   d766c:	b289      	uxth	r1, r1
   d766e:	4822      	ldr	r0, [pc, #136]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7670:	9700      	str	r7, [sp, #0]
   d7672:	f006 fcf1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7676:	f104 010f 	add.w	r1, r4, #15
   d767a:	462b      	mov	r3, r5
   d767c:	4632      	mov	r2, r6
   d767e:	b289      	uxth	r1, r1
   d7680:	481d      	ldr	r0, [pc, #116]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d7682:	f8cd 8000 	str.w	r8, [sp]
   d7686:	f006 fce7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d768a:	f104 0110 	add.w	r1, r4, #16
   d768e:	462b      	mov	r3, r5
   d7690:	4632      	mov	r2, r6
   d7692:	b289      	uxth	r1, r1
   d7694:	f8cd 8000 	str.w	r8, [sp]
   d7698:	4817      	ldr	r0, [pc, #92]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d769a:	f006 fcdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d769e:	f104 0111 	add.w	r1, r4, #17
   d76a2:	f8cd 8000 	str.w	r8, [sp]
   d76a6:	462b      	mov	r3, r5
   d76a8:	4632      	mov	r2, r6
   d76aa:	b289      	uxth	r1, r1
   d76ac:	4812      	ldr	r0, [pc, #72]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d76ae:	f006 fcd3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d76b2:	f104 0112 	add.w	r1, r4, #18
   d76b6:	462b      	mov	r3, r5
   d76b8:	4632      	mov	r2, r6
   d76ba:	b289      	uxth	r1, r1
   d76bc:	480e      	ldr	r0, [pc, #56]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d76be:	f8cd 8000 	str.w	r8, [sp]
   d76c2:	f006 fcc9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d76c6:	f104 0113 	add.w	r1, r4, #19
   d76ca:	462b      	mov	r3, r5
   d76cc:	4632      	mov	r2, r6
   d76ce:	b289      	uxth	r1, r1
   d76d0:	f8cd 8000 	str.w	r8, [sp]
   d76d4:	4808      	ldr	r0, [pc, #32]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d76d6:	f006 fcbf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d76da:	f104 0114 	add.w	r1, r4, #20
   d76de:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d76e2:	462b      	mov	r3, r5
   d76e4:	4632      	mov	r2, r6
   d76e6:	4804      	ldr	r0, [pc, #16]	; (d76f8 <_Z4snumiiiii+0x10ec>)
   d76e8:	b289      	uxth	r1, r1
        }
    }
}                           
   d76ea:	b005      	add	sp, #20
   d76ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            strip.setPixelColor(pix+15,R,G,B);
            strip.setPixelColor(pix+16,R,G,B);
            strip.setPixelColor(pix+17,R,G,B);
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
   d76f0:	f006 bcb2 	b.w	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d76f4:	80000001 	.word	0x80000001
   d76f8:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
   d76fc:	4b76      	ldr	r3, [pc, #472]	; (d78d8 <_Z4snumiiiii+0x12cc>)
   d76fe:	2608      	movs	r6, #8
   d7700:	fb94 f6f6 	sdiv	r6, r4, r6
   d7704:	4033      	ands	r3, r6
   d7706:	2b00      	cmp	r3, #0
   d7708:	bfbe      	ittt	lt
   d770a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d770e:	f063 0301 	ornlt	r3, r3, #1
   d7712:	3301      	addlt	r3, #1
   d7714:	2b01      	cmp	r3, #1
   d7716:	f040 8095 	bne.w	d7844 <_Z4snumiiiii+0x1238>
        {
            strip.setPixelColor(pix,R,G,B);
   d771a:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d771e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d7722:	486e      	ldr	r0, [pc, #440]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7724:	f8cd b000 	str.w	fp, [sp]
   d7728:	fa1f f884 	uxth.w	r8, r4
   d772c:	fa5f fa85 	uxtb.w	sl, r5
   d7730:	4653      	mov	r3, sl
   d7732:	464a      	mov	r2, r9
   d7734:	4641      	mov	r1, r8
            strip.setPixelColor(pix-1,0,0,0);
   d7736:	2700      	movs	r7, #0
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d7738:	f006 fc8e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d773c:	f108 31ff 	add.w	r1, r8, #4294967295
   d7740:	463b      	mov	r3, r7
   d7742:	463a      	mov	r2, r7
   d7744:	b289      	uxth	r1, r1
   d7746:	4865      	ldr	r0, [pc, #404]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7748:	9700      	str	r7, [sp, #0]
   d774a:	f006 fc85 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d774e:	f1a8 0102 	sub.w	r1, r8, #2
   d7752:	463b      	mov	r3, r7
   d7754:	463a      	mov	r2, r7
   d7756:	b289      	uxth	r1, r1
   d7758:	4860      	ldr	r0, [pc, #384]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d775a:	9700      	str	r7, [sp, #0]
   d775c:	f006 fc7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d7760:	f1a8 0103 	sub.w	r1, r8, #3
   d7764:	463b      	mov	r3, r7
   d7766:	463a      	mov	r2, r7
   d7768:	b289      	uxth	r1, r1
   d776a:	485c      	ldr	r0, [pc, #368]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d776c:	9700      	str	r7, [sp, #0]
   d776e:	f006 fc73 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d7772:	f1a8 0104 	sub.w	r1, r8, #4
   d7776:	463b      	mov	r3, r7
   d7778:	463a      	mov	r2, r7
   d777a:	b289      	uxth	r1, r1
   d777c:	4857      	ldr	r0, [pc, #348]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d777e:	9700      	str	r7, [sp, #0]
   d7780:	f006 fc6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7784:	f108 0101 	add.w	r1, r8, #1
   d7788:	4653      	mov	r3, sl
   d778a:	464a      	mov	r2, r9
   d778c:	b289      	uxth	r1, r1
   d778e:	4853      	ldr	r0, [pc, #332]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7790:	f8cd b000 	str.w	fp, [sp]
   d7794:	f006 fc60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7798:	f108 0102 	add.w	r1, r8, #2
   d779c:	463b      	mov	r3, r7
   d779e:	463a      	mov	r2, r7
   d77a0:	b289      	uxth	r1, r1
   d77a2:	484e      	ldr	r0, [pc, #312]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d77a4:	9700      	str	r7, [sp, #0]
   d77a6:	f006 fc57 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d77aa:	f108 0103 	add.w	r1, r8, #3
   d77ae:	463b      	mov	r3, r7
   d77b0:	463a      	mov	r2, r7
   d77b2:	b289      	uxth	r1, r1
   d77b4:	4849      	ldr	r0, [pc, #292]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d77b6:	9700      	str	r7, [sp, #0]
   d77b8:	f006 fc4e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d77bc:	f108 0104 	add.w	r1, r8, #4
   d77c0:	463b      	mov	r3, r7
   d77c2:	463a      	mov	r2, r7
   d77c4:	b289      	uxth	r1, r1
   d77c6:	4845      	ldr	r0, [pc, #276]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d77c8:	9700      	str	r7, [sp, #0]
   d77ca:	f006 fc45 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d77ce:	f108 0105 	add.w	r1, r8, #5
   d77d2:	463b      	mov	r3, r7
   d77d4:	463a      	mov	r2, r7
   d77d6:	b289      	uxth	r1, r1
   d77d8:	4840      	ldr	r0, [pc, #256]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d77da:	9700      	str	r7, [sp, #0]
   d77dc:	f006 fc3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d77e0:	f108 0110 	add.w	r1, r8, #16
   d77e4:	4653      	mov	r3, sl
   d77e6:	464a      	mov	r2, r9
   d77e8:	b289      	uxth	r1, r1
   d77ea:	483c      	ldr	r0, [pc, #240]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d77ec:	f8cd b000 	str.w	fp, [sp]
   d77f0:	f006 fc32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d77f4:	f108 010f 	add.w	r1, r8, #15
   d77f8:	4653      	mov	r3, sl
   d77fa:	464a      	mov	r2, r9
   d77fc:	b289      	uxth	r1, r1
   d77fe:	4837      	ldr	r0, [pc, #220]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7800:	f8cd b000 	str.w	fp, [sp]
   d7804:	f006 fc28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7808:	f108 010e 	add.w	r1, r8, #14
   d780c:	4653      	mov	r3, sl
   d780e:	464a      	mov	r2, r9
   d7810:	b289      	uxth	r1, r1
   d7812:	4832      	ldr	r0, [pc, #200]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7814:	f8cd b000 	str.w	fp, [sp]
   d7818:	f006 fc1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d781c:	f108 010d 	add.w	r1, r8, #13
   d7820:	4653      	mov	r3, sl
   d7822:	464a      	mov	r2, r9
   d7824:	b289      	uxth	r1, r1
   d7826:	482d      	ldr	r0, [pc, #180]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7828:	f8cd b000 	str.w	fp, [sp]
   d782c:	f006 fc14 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7830:	f108 010c 	add.w	r1, r8, #12
   d7834:	f8cd b000 	str.w	fp, [sp]
   d7838:	4653      	mov	r3, sl
   d783a:	464a      	mov	r2, r9
   d783c:	b289      	uxth	r1, r1
   d783e:	4827      	ldr	r0, [pc, #156]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7840:	f006 fc0a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7844:	f016 0601 	ands.w	r6, r6, #1
   d7848:	f040 827a 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d784c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7850:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7854:	4821      	ldr	r0, [pc, #132]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7856:	f8cd 8000 	str.w	r8, [sp]
   d785a:	b2a4      	uxth	r4, r4
   d785c:	b2ed      	uxtb	r5, r5
   d785e:	462b      	mov	r3, r5
   d7860:	463a      	mov	r2, r7
   d7862:	4621      	mov	r1, r4
   d7864:	f006 fbf8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d7868:	1c61      	adds	r1, r4, #1
   d786a:	4633      	mov	r3, r6
   d786c:	4632      	mov	r2, r6
   d786e:	b289      	uxth	r1, r1
   d7870:	481a      	ldr	r0, [pc, #104]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7872:	9600      	str	r6, [sp, #0]
   d7874:	f006 fbf0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7878:	1ca1      	adds	r1, r4, #2
   d787a:	4633      	mov	r3, r6
   d787c:	4632      	mov	r2, r6
   d787e:	b289      	uxth	r1, r1
   d7880:	4816      	ldr	r0, [pc, #88]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7882:	9600      	str	r6, [sp, #0]
   d7884:	f006 fbe8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7888:	1ce1      	adds	r1, r4, #3
   d788a:	4633      	mov	r3, r6
   d788c:	4632      	mov	r2, r6
   d788e:	b289      	uxth	r1, r1
   d7890:	4812      	ldr	r0, [pc, #72]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d7892:	9600      	str	r6, [sp, #0]
   d7894:	f006 fbe0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7898:	1d21      	adds	r1, r4, #4
   d789a:	4633      	mov	r3, r6
   d789c:	4632      	mov	r2, r6
   d789e:	b289      	uxth	r1, r1
   d78a0:	480e      	ldr	r0, [pc, #56]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d78a2:	9600      	str	r6, [sp, #0]
   d78a4:	f006 fbd8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d78a8:	f104 010b 	add.w	r1, r4, #11
   d78ac:	4633      	mov	r3, r6
   d78ae:	4632      	mov	r2, r6
   d78b0:	b289      	uxth	r1, r1
   d78b2:	480a      	ldr	r0, [pc, #40]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d78b4:	9600      	str	r6, [sp, #0]
   d78b6:	f006 fbcf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d78ba:	f104 010c 	add.w	r1, r4, #12
   d78be:	4633      	mov	r3, r6
   d78c0:	4632      	mov	r2, r6
   d78c2:	b289      	uxth	r1, r1
   d78c4:	9600      	str	r6, [sp, #0]
   d78c6:	4805      	ldr	r0, [pc, #20]	; (d78dc <_Z4snumiiiii+0x12d0>)
   d78c8:	f006 fbc6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d78cc:	f104 010d 	add.w	r1, r4, #13
   d78d0:	9600      	str	r6, [sp, #0]
   d78d2:	4633      	mov	r3, r6
   d78d4:	4632      	mov	r2, r6
   d78d6:	e0f4      	b.n	d7ac2 <_Z4snumiiiii+0x14b6>
   d78d8:	80000001 	.word	0x80000001
   d78dc:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
    {
        if((pix/8)%2 == 1)
   d78e0:	4b9b      	ldr	r3, [pc, #620]	; (d7b50 <_Z4snumiiiii+0x1544>)
   d78e2:	fb94 f6f0 	sdiv	r6, r4, r0
   d78e6:	4033      	ands	r3, r6
   d78e8:	2b00      	cmp	r3, #0
   d78ea:	bfbe      	ittt	lt
   d78ec:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d78f0:	f063 0301 	ornlt	r3, r3, #1
   d78f4:	3301      	addlt	r3, #1
   d78f6:	2b01      	cmp	r3, #1
   d78f8:	f040 8094 	bne.w	d7a24 <_Z4snumiiiii+0x1418>
        {
            strip.setPixelColor(pix,R,G,B);
   d78fc:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7900:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7904:	4893      	ldr	r0, [pc, #588]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7906:	f8cd a000 	str.w	sl, [sp]
   d790a:	b2a7      	uxth	r7, r4
   d790c:	fa5f f985 	uxtb.w	r9, r5
   d7910:	464b      	mov	r3, r9
   d7912:	4642      	mov	r2, r8
   d7914:	4639      	mov	r1, r7
   d7916:	f006 fb9f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d791a:	1e79      	subs	r1, r7, #1
   d791c:	464b      	mov	r3, r9
   d791e:	4642      	mov	r2, r8
   d7920:	b289      	uxth	r1, r1
   d7922:	488c      	ldr	r0, [pc, #560]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7924:	f8cd a000 	str.w	sl, [sp]
   d7928:	f006 fb96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d792c:	1eb9      	subs	r1, r7, #2
   d792e:	464b      	mov	r3, r9
   d7930:	4642      	mov	r2, r8
   d7932:	b289      	uxth	r1, r1
   d7934:	4887      	ldr	r0, [pc, #540]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7936:	f8cd a000 	str.w	sl, [sp]
   d793a:	f006 fb8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d793e:	1ef9      	subs	r1, r7, #3
   d7940:	464b      	mov	r3, r9
   d7942:	4642      	mov	r2, r8
   d7944:	b289      	uxth	r1, r1
   d7946:	4883      	ldr	r0, [pc, #524]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7948:	f8cd a000 	str.w	sl, [sp]
   d794c:	f006 fb84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7950:	1f39      	subs	r1, r7, #4
   d7952:	464b      	mov	r3, r9
   d7954:	4642      	mov	r2, r8
   d7956:	b289      	uxth	r1, r1
   d7958:	487e      	ldr	r0, [pc, #504]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d795a:	f8cd a000 	str.w	sl, [sp]
   d795e:	f006 fb7b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7962:	1c79      	adds	r1, r7, #1
   d7964:	464b      	mov	r3, r9
   d7966:	4642      	mov	r2, r8
   d7968:	b289      	uxth	r1, r1
   d796a:	487a      	ldr	r0, [pc, #488]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d796c:	f8cd a000 	str.w	sl, [sp]
   d7970:	f006 fb72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7974:	f04f 0b00 	mov.w	fp, #0
   d7978:	1cb9      	adds	r1, r7, #2
   d797a:	465b      	mov	r3, fp
   d797c:	465a      	mov	r2, fp
   d797e:	b289      	uxth	r1, r1
   d7980:	4874      	ldr	r0, [pc, #464]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7982:	f8cd b000 	str.w	fp, [sp]
   d7986:	f006 fb67 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d798a:	1cf9      	adds	r1, r7, #3
   d798c:	464b      	mov	r3, r9
   d798e:	4642      	mov	r2, r8
   d7990:	b289      	uxth	r1, r1
   d7992:	4870      	ldr	r0, [pc, #448]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7994:	f8cd a000 	str.w	sl, [sp]
   d7998:	f006 fb5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d799c:	1d39      	adds	r1, r7, #4
   d799e:	465b      	mov	r3, fp
   d79a0:	465a      	mov	r2, fp
   d79a2:	b289      	uxth	r1, r1
   d79a4:	486b      	ldr	r0, [pc, #428]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d79a6:	f8cd b000 	str.w	fp, [sp]
   d79aa:	f006 fb55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d79ae:	1d79      	adds	r1, r7, #5
   d79b0:	464b      	mov	r3, r9
   d79b2:	4642      	mov	r2, r8
   d79b4:	b289      	uxth	r1, r1
   d79b6:	4867      	ldr	r0, [pc, #412]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d79b8:	f8cd a000 	str.w	sl, [sp]
   d79bc:	f006 fb4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d79c0:	f107 0110 	add.w	r1, r7, #16
   d79c4:	464b      	mov	r3, r9
   d79c6:	4642      	mov	r2, r8
   d79c8:	b289      	uxth	r1, r1
   d79ca:	4862      	ldr	r0, [pc, #392]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d79cc:	f8cd a000 	str.w	sl, [sp]
   d79d0:	f006 fb42 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d79d4:	f107 010f 	add.w	r1, r7, #15
   d79d8:	464b      	mov	r3, r9
   d79da:	4642      	mov	r2, r8
   d79dc:	b289      	uxth	r1, r1
   d79de:	485d      	ldr	r0, [pc, #372]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d79e0:	f8cd a000 	str.w	sl, [sp]
   d79e4:	f006 fb38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d79e8:	f107 010e 	add.w	r1, r7, #14
   d79ec:	464b      	mov	r3, r9
   d79ee:	4642      	mov	r2, r8
   d79f0:	b289      	uxth	r1, r1
   d79f2:	4858      	ldr	r0, [pc, #352]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d79f4:	f8cd a000 	str.w	sl, [sp]
   d79f8:	f006 fb2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d79fc:	f107 010d 	add.w	r1, r7, #13
   d7a00:	464b      	mov	r3, r9
   d7a02:	4642      	mov	r2, r8
   d7a04:	b289      	uxth	r1, r1
   d7a06:	4853      	ldr	r0, [pc, #332]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a08:	f8cd a000 	str.w	sl, [sp]
   d7a0c:	f006 fb24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7a10:	f107 010c 	add.w	r1, r7, #12
   d7a14:	f8cd a000 	str.w	sl, [sp]
   d7a18:	464b      	mov	r3, r9
   d7a1a:	4642      	mov	r2, r8
   d7a1c:	b289      	uxth	r1, r1
   d7a1e:	484d      	ldr	r0, [pc, #308]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a20:	f006 fb1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7a24:	f016 0601 	ands.w	r6, r6, #1
   d7a28:	f040 818a 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d7a2c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7a30:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7a34:	4847      	ldr	r0, [pc, #284]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a36:	f8cd 8000 	str.w	r8, [sp]
   d7a3a:	b2a4      	uxth	r4, r4
   d7a3c:	b2ed      	uxtb	r5, r5
   d7a3e:	462b      	mov	r3, r5
   d7a40:	463a      	mov	r2, r7
   d7a42:	4621      	mov	r1, r4
   d7a44:	f006 fb08 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7a48:	1c61      	adds	r1, r4, #1
   d7a4a:	462b      	mov	r3, r5
   d7a4c:	463a      	mov	r2, r7
   d7a4e:	b289      	uxth	r1, r1
   d7a50:	4840      	ldr	r0, [pc, #256]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a52:	f8cd 8000 	str.w	r8, [sp]
   d7a56:	f006 faff 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7a5a:	1ca1      	adds	r1, r4, #2
   d7a5c:	462b      	mov	r3, r5
   d7a5e:	463a      	mov	r2, r7
   d7a60:	b289      	uxth	r1, r1
   d7a62:	483c      	ldr	r0, [pc, #240]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a64:	f8cd 8000 	str.w	r8, [sp]
   d7a68:	f006 faf6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7a6c:	1ce1      	adds	r1, r4, #3
   d7a6e:	462b      	mov	r3, r5
   d7a70:	463a      	mov	r2, r7
   d7a72:	b289      	uxth	r1, r1
   d7a74:	4837      	ldr	r0, [pc, #220]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a76:	f8cd 8000 	str.w	r8, [sp]
   d7a7a:	f006 faed 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7a7e:	1d21      	adds	r1, r4, #4
   d7a80:	462b      	mov	r3, r5
   d7a82:	463a      	mov	r2, r7
   d7a84:	b289      	uxth	r1, r1
   d7a86:	4833      	ldr	r0, [pc, #204]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a88:	f8cd 8000 	str.w	r8, [sp]
   d7a8c:	f006 fae4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7a90:	f104 010b 	add.w	r1, r4, #11
   d7a94:	462b      	mov	r3, r5
   d7a96:	463a      	mov	r2, r7
   d7a98:	b289      	uxth	r1, r1
   d7a9a:	482e      	ldr	r0, [pc, #184]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7a9c:	f8cd 8000 	str.w	r8, [sp]
   d7aa0:	f006 fada 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7aa4:	f104 010c 	add.w	r1, r4, #12
   d7aa8:	4633      	mov	r3, r6
   d7aaa:	4632      	mov	r2, r6
   d7aac:	b289      	uxth	r1, r1
   d7aae:	9600      	str	r6, [sp, #0]
   d7ab0:	4828      	ldr	r0, [pc, #160]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7ab2:	f006 fad1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7ab6:	f104 010d 	add.w	r1, r4, #13
   d7aba:	f8cd 8000 	str.w	r8, [sp]
   d7abe:	462b      	mov	r3, r5
   d7ac0:	463a      	mov	r2, r7
   d7ac2:	b289      	uxth	r1, r1
   d7ac4:	4823      	ldr	r0, [pc, #140]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7ac6:	f006 fac7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d7aca:	f104 010e 	add.w	r1, r4, #14
   d7ace:	4633      	mov	r3, r6
   d7ad0:	4632      	mov	r2, r6
   d7ad2:	b289      	uxth	r1, r1
   d7ad4:	481f      	ldr	r0, [pc, #124]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7ad6:	9600      	str	r6, [sp, #0]
   d7ad8:	f006 fabe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7adc:	f104 010f 	add.w	r1, r4, #15
   d7ae0:	462b      	mov	r3, r5
   d7ae2:	463a      	mov	r2, r7
   d7ae4:	b289      	uxth	r1, r1
   d7ae6:	481b      	ldr	r0, [pc, #108]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7ae8:	f8cd 8000 	str.w	r8, [sp]
   d7aec:	f006 fab4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7af0:	f104 0110 	add.w	r1, r4, #16
   d7af4:	462b      	mov	r3, r5
   d7af6:	463a      	mov	r2, r7
   d7af8:	b289      	uxth	r1, r1
   d7afa:	4816      	ldr	r0, [pc, #88]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7afc:	f8cd 8000 	str.w	r8, [sp]
   d7b00:	f006 faaa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d7b04:	f104 0111 	add.w	r1, r4, #17
   d7b08:	462b      	mov	r3, r5
   d7b0a:	463a      	mov	r2, r7
   d7b0c:	b289      	uxth	r1, r1
   d7b0e:	4811      	ldr	r0, [pc, #68]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7b10:	f8cd 8000 	str.w	r8, [sp]
   d7b14:	f006 faa0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d7b18:	f104 0112 	add.w	r1, r4, #18
   d7b1c:	462b      	mov	r3, r5
   d7b1e:	463a      	mov	r2, r7
   d7b20:	b289      	uxth	r1, r1
   d7b22:	480c      	ldr	r0, [pc, #48]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7b24:	f8cd 8000 	str.w	r8, [sp]
   d7b28:	f006 fa96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d7b2c:	f104 0113 	add.w	r1, r4, #19
   d7b30:	462b      	mov	r3, r5
   d7b32:	463a      	mov	r2, r7
   d7b34:	b289      	uxth	r1, r1
   d7b36:	f8cd 8000 	str.w	r8, [sp]
   d7b3a:	4806      	ldr	r0, [pc, #24]	; (d7b54 <_Z4snumiiiii+0x1548>)
   d7b3c:	f006 fa8c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7b40:	f104 0114 	add.w	r1, r4, #20
   d7b44:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d7b48:	462b      	mov	r3, r5
   d7b4a:	463a      	mov	r2, r7
   d7b4c:	e5cb      	b.n	d76e6 <_Z4snumiiiii+0x10da>
   d7b4e:	bf00      	nop
   d7b50:	80000001 	.word	0x80000001
   d7b54:	2003e328 	.word	0x2003e328
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 0)
   d7b58:	2800      	cmp	r0, #0
   d7b5a:	f040 80f1 	bne.w	d7d40 <_Z4snumiiiii+0x1734>
    {
        if((pix/8)%2 == 1)
   d7b5e:	4b7a      	ldr	r3, [pc, #488]	; (d7d48 <_Z4snumiiiii+0x173c>)
   d7b60:	2708      	movs	r7, #8
   d7b62:	fb94 f7f7 	sdiv	r7, r4, r7
   d7b66:	403b      	ands	r3, r7
   d7b68:	2b00      	cmp	r3, #0
   d7b6a:	bfbe      	ittt	lt
   d7b6c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7b70:	f063 0301 	ornlt	r3, r3, #1
   d7b74:	3301      	addlt	r3, #1
   d7b76:	2b01      	cmp	r3, #1
   d7b78:	f040 8094 	bne.w	d7ca4 <_Z4snumiiiii+0x1698>
        {
            strip.setPixelColor(pix,R,G,B);
   d7b7c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7b80:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7b84:	4871      	ldr	r0, [pc, #452]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7b86:	f8cd a000 	str.w	sl, [sp]
   d7b8a:	b2a6      	uxth	r6, r4
   d7b8c:	fa5f f985 	uxtb.w	r9, r5
   d7b90:	464b      	mov	r3, r9
   d7b92:	4642      	mov	r2, r8
   d7b94:	4631      	mov	r1, r6
   d7b96:	f006 fa5f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d7b9a:	1e71      	subs	r1, r6, #1
   d7b9c:	464b      	mov	r3, r9
   d7b9e:	4642      	mov	r2, r8
   d7ba0:	b289      	uxth	r1, r1
   d7ba2:	486a      	ldr	r0, [pc, #424]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7ba4:	f8cd a000 	str.w	sl, [sp]
   d7ba8:	f006 fa56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d7bac:	1eb1      	subs	r1, r6, #2
   d7bae:	464b      	mov	r3, r9
   d7bb0:	4642      	mov	r2, r8
   d7bb2:	b289      	uxth	r1, r1
   d7bb4:	4865      	ldr	r0, [pc, #404]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7bb6:	f8cd a000 	str.w	sl, [sp]
   d7bba:	f006 fa4d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d7bbe:	1ef1      	subs	r1, r6, #3
   d7bc0:	464b      	mov	r3, r9
   d7bc2:	4642      	mov	r2, r8
   d7bc4:	b289      	uxth	r1, r1
   d7bc6:	4861      	ldr	r0, [pc, #388]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7bc8:	f8cd a000 	str.w	sl, [sp]
   d7bcc:	f006 fa44 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7bd0:	1f31      	subs	r1, r6, #4
   d7bd2:	464b      	mov	r3, r9
   d7bd4:	4642      	mov	r2, r8
   d7bd6:	b289      	uxth	r1, r1
   d7bd8:	485c      	ldr	r0, [pc, #368]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7bda:	f8cd a000 	str.w	sl, [sp]
   d7bde:	f006 fa3b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7be2:	1c71      	adds	r1, r6, #1
   d7be4:	464b      	mov	r3, r9
   d7be6:	4642      	mov	r2, r8
   d7be8:	b289      	uxth	r1, r1
   d7bea:	4858      	ldr	r0, [pc, #352]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7bec:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d7bf0:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d7bf4:	f006 fa30 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7bf8:	1cb1      	adds	r1, r6, #2
   d7bfa:	465b      	mov	r3, fp
   d7bfc:	465a      	mov	r2, fp
   d7bfe:	b289      	uxth	r1, r1
   d7c00:	4852      	ldr	r0, [pc, #328]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c02:	f8cd b000 	str.w	fp, [sp]
   d7c06:	f006 fa27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7c0a:	1cf1      	adds	r1, r6, #3
   d7c0c:	465b      	mov	r3, fp
   d7c0e:	465a      	mov	r2, fp
   d7c10:	b289      	uxth	r1, r1
   d7c12:	484e      	ldr	r0, [pc, #312]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c14:	f8cd b000 	str.w	fp, [sp]
   d7c18:	f006 fa1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7c1c:	1d31      	adds	r1, r6, #4
   d7c1e:	465b      	mov	r3, fp
   d7c20:	465a      	mov	r2, fp
   d7c22:	b289      	uxth	r1, r1
   d7c24:	4849      	ldr	r0, [pc, #292]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c26:	f8cd b000 	str.w	fp, [sp]
   d7c2a:	f006 fa15 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d7c2e:	1d71      	adds	r1, r6, #5
   d7c30:	464b      	mov	r3, r9
   d7c32:	4642      	mov	r2, r8
   d7c34:	b289      	uxth	r1, r1
   d7c36:	4845      	ldr	r0, [pc, #276]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c38:	f8cd a000 	str.w	sl, [sp]
   d7c3c:	f006 fa0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7c40:	f106 0110 	add.w	r1, r6, #16
   d7c44:	464b      	mov	r3, r9
   d7c46:	4642      	mov	r2, r8
   d7c48:	b289      	uxth	r1, r1
   d7c4a:	4840      	ldr	r0, [pc, #256]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c4c:	f8cd a000 	str.w	sl, [sp]
   d7c50:	f006 fa02 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7c54:	f106 010f 	add.w	r1, r6, #15
   d7c58:	464b      	mov	r3, r9
   d7c5a:	4642      	mov	r2, r8
   d7c5c:	b289      	uxth	r1, r1
   d7c5e:	483b      	ldr	r0, [pc, #236]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c60:	f8cd a000 	str.w	sl, [sp]
   d7c64:	f006 f9f8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7c68:	f106 010e 	add.w	r1, r6, #14
   d7c6c:	464b      	mov	r3, r9
   d7c6e:	4642      	mov	r2, r8
   d7c70:	b289      	uxth	r1, r1
   d7c72:	4836      	ldr	r0, [pc, #216]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c74:	f8cd a000 	str.w	sl, [sp]
   d7c78:	f006 f9ee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7c7c:	f106 010d 	add.w	r1, r6, #13
   d7c80:	464b      	mov	r3, r9
   d7c82:	4642      	mov	r2, r8
   d7c84:	b289      	uxth	r1, r1
   d7c86:	4831      	ldr	r0, [pc, #196]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7c88:	f8cd a000 	str.w	sl, [sp]
   d7c8c:	f006 f9e4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7c90:	f106 010c 	add.w	r1, r6, #12
   d7c94:	f8cd a000 	str.w	sl, [sp]
   d7c98:	464b      	mov	r3, r9
   d7c9a:	4642      	mov	r2, r8
   d7c9c:	b289      	uxth	r1, r1
   d7c9e:	482b      	ldr	r0, [pc, #172]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7ca0:	f006 f9da 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7ca4:	f017 0701 	ands.w	r7, r7, #1
   d7ca8:	d14a      	bne.n	d7d40 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d7caa:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d7cae:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7cb2:	4826      	ldr	r0, [pc, #152]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7cb4:	f8cd 8000 	str.w	r8, [sp]
   d7cb8:	b2a4      	uxth	r4, r4
   d7cba:	b2ed      	uxtb	r5, r5
   d7cbc:	462b      	mov	r3, r5
   d7cbe:	4632      	mov	r2, r6
   d7cc0:	4621      	mov	r1, r4
   d7cc2:	f006 f9c9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7cc6:	1c61      	adds	r1, r4, #1
   d7cc8:	462b      	mov	r3, r5
   d7cca:	4632      	mov	r2, r6
   d7ccc:	b289      	uxth	r1, r1
   d7cce:	481f      	ldr	r0, [pc, #124]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7cd0:	f8cd 8000 	str.w	r8, [sp]
   d7cd4:	f006 f9c0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7cd8:	1ca1      	adds	r1, r4, #2
   d7cda:	462b      	mov	r3, r5
   d7cdc:	4632      	mov	r2, r6
   d7cde:	b289      	uxth	r1, r1
   d7ce0:	481a      	ldr	r0, [pc, #104]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7ce2:	f8cd 8000 	str.w	r8, [sp]
   d7ce6:	f006 f9b7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7cea:	1ce1      	adds	r1, r4, #3
   d7cec:	462b      	mov	r3, r5
   d7cee:	4632      	mov	r2, r6
   d7cf0:	b289      	uxth	r1, r1
   d7cf2:	4816      	ldr	r0, [pc, #88]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7cf4:	f8cd 8000 	str.w	r8, [sp]
   d7cf8:	f006 f9ae 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7cfc:	1d21      	adds	r1, r4, #4
   d7cfe:	462b      	mov	r3, r5
   d7d00:	4632      	mov	r2, r6
   d7d02:	b289      	uxth	r1, r1
   d7d04:	4811      	ldr	r0, [pc, #68]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7d06:	f8cd 8000 	str.w	r8, [sp]
   d7d0a:	f006 f9a5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7d0e:	f104 010b 	add.w	r1, r4, #11
   d7d12:	462b      	mov	r3, r5
   d7d14:	4632      	mov	r2, r6
   d7d16:	b289      	uxth	r1, r1
   d7d18:	480c      	ldr	r0, [pc, #48]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7d1a:	f8cd 8000 	str.w	r8, [sp]
   d7d1e:	f006 f99b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7d22:	f104 010c 	add.w	r1, r4, #12
   d7d26:	463b      	mov	r3, r7
   d7d28:	463a      	mov	r2, r7
   d7d2a:	b289      	uxth	r1, r1
   d7d2c:	9700      	str	r7, [sp, #0]
   d7d2e:	4807      	ldr	r0, [pc, #28]	; (d7d4c <_Z4snumiiiii+0x1740>)
   d7d30:	f006 f992 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d7d34:	f104 010d 	add.w	r1, r4, #13
   d7d38:	9700      	str	r7, [sp, #0]
   d7d3a:	463b      	mov	r3, r7
   d7d3c:	463a      	mov	r2, r7
   d7d3e:	e48d      	b.n	d765c <_Z4snumiiiii+0x1050>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
   d7d40:	b005      	add	sp, #20
   d7d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d46:	bf00      	nop
   d7d48:	80000001 	.word	0x80000001
   d7d4c:	2003e328 	.word	0x2003e328

000d7d50 <_Z6letterciiii>:
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7d50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(ltr == 'a')
   d7d52:	2861      	cmp	r0, #97	; 0x61
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7d54:	9d08      	ldr	r5, [sp, #32]
    if(ltr == 'a')
   d7d56:	d118      	bne.n	d7d8a <_Z6letterciiii+0x3a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7d58:	b28c      	uxth	r4, r1
   d7d5a:	b2d6      	uxtb	r6, r2
   d7d5c:	b2df      	uxtb	r7, r3
   d7d5e:	b2ed      	uxtb	r5, r5
   d7d60:	f104 010c 	add.w	r1, r4, #12
   d7d64:	463b      	mov	r3, r7
   d7d66:	4632      	mov	r2, r6
   d7d68:	b289      	uxth	r1, r1
   d7d6a:	48ac      	ldr	r0, [pc, #688]	; (d801c <_Z6letterciiii+0x2cc>)
   d7d6c:	9500      	str	r5, [sp, #0]
   d7d6e:	f006 f973 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7d72:	f104 010d 	add.w	r1, r4, #13
   d7d76:	b289      	uxth	r1, r1
   d7d78:	9500      	str	r5, [sp, #0]
   d7d7a:	463b      	mov	r3, r7
   d7d7c:	4632      	mov	r2, r6
   d7d7e:	48a7      	ldr	r0, [pc, #668]	; (d801c <_Z6letterciiii+0x2cc>)
   d7d80:	f006 f96a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7d84:	f104 0111 	add.w	r1, r4, #17
   d7d88:	e2d7      	b.n	d833a <_Z6letterciiii+0x5ea>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'b')
   d7d8a:	2862      	cmp	r0, #98	; 0x62
   d7d8c:	d13c      	bne.n	d7e08 <_Z6letterciiii+0xb8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7d8e:	b28c      	uxth	r4, r1
   d7d90:	b2d6      	uxtb	r6, r2
   d7d92:	b2df      	uxtb	r7, r3
   d7d94:	b2ed      	uxtb	r5, r5
   d7d96:	f104 010b 	add.w	r1, r4, #11
   d7d9a:	463b      	mov	r3, r7
   d7d9c:	4632      	mov	r2, r6
   d7d9e:	b289      	uxth	r1, r1
   d7da0:	489e      	ldr	r0, [pc, #632]	; (d801c <_Z6letterciiii+0x2cc>)
   d7da2:	9500      	str	r5, [sp, #0]
   d7da4:	f006 f958 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7da8:	f104 010c 	add.w	r1, r4, #12
   d7dac:	463b      	mov	r3, r7
   d7dae:	4632      	mov	r2, r6
   d7db0:	b289      	uxth	r1, r1
   d7db2:	489a      	ldr	r0, [pc, #616]	; (d801c <_Z6letterciiii+0x2cc>)
   d7db4:	9500      	str	r5, [sp, #0]
   d7db6:	f006 f94f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7dba:	f104 010d 	add.w	r1, r4, #13
   d7dbe:	463b      	mov	r3, r7
   d7dc0:	4632      	mov	r2, r6
   d7dc2:	b289      	uxth	r1, r1
   d7dc4:	4895      	ldr	r0, [pc, #596]	; (d801c <_Z6letterciiii+0x2cc>)
   d7dc6:	9500      	str	r5, [sp, #0]
   d7dc8:	f006 f946 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7dcc:	f104 010e 	add.w	r1, r4, #14
   d7dd0:	463b      	mov	r3, r7
   d7dd2:	4632      	mov	r2, r6
   d7dd4:	b289      	uxth	r1, r1
   d7dd6:	4891      	ldr	r0, [pc, #580]	; (d801c <_Z6letterciiii+0x2cc>)
   d7dd8:	9500      	str	r5, [sp, #0]
   d7dda:	f006 f93d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7dde:	f104 010f 	add.w	r1, r4, #15
   d7de2:	463b      	mov	r3, r7
   d7de4:	4632      	mov	r2, r6
   d7de6:	b289      	uxth	r1, r1
   d7de8:	488c      	ldr	r0, [pc, #560]	; (d801c <_Z6letterciiii+0x2cc>)
   d7dea:	9500      	str	r5, [sp, #0]
   d7dec:	f006 f934 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7df0:	f104 0112 	add.w	r1, r4, #18
   d7df4:	b289      	uxth	r1, r1
   d7df6:	9500      	str	r5, [sp, #0]
   d7df8:	463b      	mov	r3, r7
   d7dfa:	4632      	mov	r2, r6
   d7dfc:	4887      	ldr	r0, [pc, #540]	; (d801c <_Z6letterciiii+0x2cc>)
   d7dfe:	f006 f92b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7e02:	f104 0114 	add.w	r1, r4, #20
   d7e06:	e0f5      	b.n	d7ff4 <_Z6letterciiii+0x2a4>
        strip.setPixelColor(pix+28,R,G,B);
    }
    if(ltr == 'c')
   d7e08:	2863      	cmp	r0, #99	; 0x63
   d7e0a:	d12b      	bne.n	d7e64 <_Z6letterciiii+0x114>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7e0c:	b28c      	uxth	r4, r1
   d7e0e:	b2d6      	uxtb	r6, r2
   d7e10:	b2df      	uxtb	r7, r3
   d7e12:	b2ed      	uxtb	r5, r5
   d7e14:	f104 010c 	add.w	r1, r4, #12
   d7e18:	463b      	mov	r3, r7
   d7e1a:	4632      	mov	r2, r6
   d7e1c:	b289      	uxth	r1, r1
   d7e1e:	487f      	ldr	r0, [pc, #508]	; (d801c <_Z6letterciiii+0x2cc>)
   d7e20:	9500      	str	r5, [sp, #0]
   d7e22:	f006 f919 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7e26:	f104 010d 	add.w	r1, r4, #13
   d7e2a:	463b      	mov	r3, r7
   d7e2c:	4632      	mov	r2, r6
   d7e2e:	b289      	uxth	r1, r1
   d7e30:	487a      	ldr	r0, [pc, #488]	; (d801c <_Z6letterciiii+0x2cc>)
   d7e32:	9500      	str	r5, [sp, #0]
   d7e34:	f006 f910 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7e38:	f104 0111 	add.w	r1, r4, #17
   d7e3c:	463b      	mov	r3, r7
   d7e3e:	4632      	mov	r2, r6
   d7e40:	b289      	uxth	r1, r1
   d7e42:	4876      	ldr	r0, [pc, #472]	; (d801c <_Z6letterciiii+0x2cc>)
   d7e44:	9500      	str	r5, [sp, #0]
   d7e46:	f006 f907 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7e4a:	f104 0114 	add.w	r1, r4, #20
   d7e4e:	b289      	uxth	r1, r1
   d7e50:	9500      	str	r5, [sp, #0]
   d7e52:	463b      	mov	r3, r7
   d7e54:	4632      	mov	r2, r6
   d7e56:	4871      	ldr	r0, [pc, #452]	; (d801c <_Z6letterciiii+0x2cc>)
   d7e58:	f006 f8fe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7e5c:	f104 011b 	add.w	r1, r4, #27
   d7e60:	f000 bfd6 	b.w	d8e10 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'd')
   d7e64:	2864      	cmp	r0, #100	; 0x64
   d7e66:	d110      	bne.n	d7e8a <_Z6letterciiii+0x13a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7e68:	b28c      	uxth	r4, r1
   d7e6a:	b2d6      	uxtb	r6, r2
   d7e6c:	b2df      	uxtb	r7, r3
   d7e6e:	b2ed      	uxtb	r5, r5
   d7e70:	f104 010c 	add.w	r1, r4, #12
   d7e74:	b289      	uxth	r1, r1
   d7e76:	9500      	str	r5, [sp, #0]
   d7e78:	463b      	mov	r3, r7
   d7e7a:	4632      	mov	r2, r6
   d7e7c:	4867      	ldr	r0, [pc, #412]	; (d801c <_Z6letterciiii+0x2cc>)
   d7e7e:	f006 f8eb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7e82:	f104 0112 	add.w	r1, r4, #18
   d7e86:	f001 b86f 	b.w	d8f68 <_Z6letterciiii+0x1218>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'e')
   d7e8a:	2865      	cmp	r0, #101	; 0x65
   d7e8c:	d12a      	bne.n	d7ee4 <_Z6letterciiii+0x194>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7e8e:	b28c      	uxth	r4, r1
   d7e90:	b2d6      	uxtb	r6, r2
   d7e92:	b2df      	uxtb	r7, r3
   d7e94:	b2ed      	uxtb	r5, r5
   d7e96:	f104 010c 	add.w	r1, r4, #12
   d7e9a:	463b      	mov	r3, r7
   d7e9c:	4632      	mov	r2, r6
   d7e9e:	b289      	uxth	r1, r1
   d7ea0:	485e      	ldr	r0, [pc, #376]	; (d801c <_Z6letterciiii+0x2cc>)
   d7ea2:	9500      	str	r5, [sp, #0]
   d7ea4:	f006 f8d8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7ea8:	f104 010d 	add.w	r1, r4, #13
   d7eac:	463b      	mov	r3, r7
   d7eae:	4632      	mov	r2, r6
   d7eb0:	b289      	uxth	r1, r1
   d7eb2:	485a      	ldr	r0, [pc, #360]	; (d801c <_Z6letterciiii+0x2cc>)
   d7eb4:	9500      	str	r5, [sp, #0]
   d7eb6:	f006 f8cf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7eba:	f104 010e 	add.w	r1, r4, #14
   d7ebe:	463b      	mov	r3, r7
   d7ec0:	4632      	mov	r2, r6
   d7ec2:	b289      	uxth	r1, r1
   d7ec4:	4855      	ldr	r0, [pc, #340]	; (d801c <_Z6letterciiii+0x2cc>)
   d7ec6:	9500      	str	r5, [sp, #0]
   d7ec8:	f006 f8c6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7ecc:	f104 0110 	add.w	r1, r4, #16
   d7ed0:	b289      	uxth	r1, r1
   d7ed2:	9500      	str	r5, [sp, #0]
   d7ed4:	463b      	mov	r3, r7
   d7ed6:	4632      	mov	r2, r6
   d7ed8:	4850      	ldr	r0, [pc, #320]	; (d801c <_Z6letterciiii+0x2cc>)
   d7eda:	f006 f8bd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7ede:	f104 0112 	add.w	r1, r4, #18
   d7ee2:	e316      	b.n	d8512 <_Z6letterciiii+0x7c2>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'f')
   d7ee4:	2866      	cmp	r0, #102	; 0x66
   d7ee6:	d122      	bne.n	d7f2e <_Z6letterciiii+0x1de>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7ee8:	b28c      	uxth	r4, r1
   d7eea:	b2d6      	uxtb	r6, r2
   d7eec:	b2df      	uxtb	r7, r3
   d7eee:	b2ed      	uxtb	r5, r5
   d7ef0:	f104 010b 	add.w	r1, r4, #11
   d7ef4:	463b      	mov	r3, r7
   d7ef6:	4632      	mov	r2, r6
   d7ef8:	b289      	uxth	r1, r1
   d7efa:	4848      	ldr	r0, [pc, #288]	; (d801c <_Z6letterciiii+0x2cc>)
   d7efc:	9500      	str	r5, [sp, #0]
   d7efe:	f006 f8ab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f02:	f104 010c 	add.w	r1, r4, #12
   d7f06:	463b      	mov	r3, r7
   d7f08:	4632      	mov	r2, r6
   d7f0a:	b289      	uxth	r1, r1
   d7f0c:	4843      	ldr	r0, [pc, #268]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f0e:	9500      	str	r5, [sp, #0]
   d7f10:	f006 f8a2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7f14:	f104 010d 	add.w	r1, r4, #13
   d7f18:	b289      	uxth	r1, r1
   d7f1a:	9500      	str	r5, [sp, #0]
   d7f1c:	463b      	mov	r3, r7
   d7f1e:	4632      	mov	r2, r6
   d7f20:	483e      	ldr	r0, [pc, #248]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f22:	f006 f899 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7f26:	f104 010e 	add.w	r1, r4, #14
   d7f2a:	f000 bc4b 	b.w	d87c4 <_Z6letterciiii+0xa74>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'g')
   d7f2e:	2867      	cmp	r0, #103	; 0x67
   d7f30:	d122      	bne.n	d7f78 <_Z6letterciiii+0x228>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7f32:	b28c      	uxth	r4, r1
   d7f34:	b2d6      	uxtb	r6, r2
   d7f36:	b2df      	uxtb	r7, r3
   d7f38:	b2ed      	uxtb	r5, r5
   d7f3a:	f104 010b 	add.w	r1, r4, #11
   d7f3e:	463b      	mov	r3, r7
   d7f40:	4632      	mov	r2, r6
   d7f42:	b289      	uxth	r1, r1
   d7f44:	4835      	ldr	r0, [pc, #212]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f46:	9500      	str	r5, [sp, #0]
   d7f48:	f006 f886 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7f4c:	f104 010e 	add.w	r1, r4, #14
   d7f50:	463b      	mov	r3, r7
   d7f52:	4632      	mov	r2, r6
   d7f54:	b289      	uxth	r1, r1
   d7f56:	4831      	ldr	r0, [pc, #196]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f58:	9500      	str	r5, [sp, #0]
   d7f5a:	f006 f87d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7f5e:	f104 0110 	add.w	r1, r4, #16
   d7f62:	b289      	uxth	r1, r1
   d7f64:	9500      	str	r5, [sp, #0]
   d7f66:	463b      	mov	r3, r7
   d7f68:	4632      	mov	r2, r6
   d7f6a:	482c      	ldr	r0, [pc, #176]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f6c:	f006 f874 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7f70:	f104 0112 	add.w	r1, r4, #18
   d7f74:	f001 b82e 	b.w	d8fd4 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'h')
   d7f78:	2868      	cmp	r0, #104	; 0x68
   d7f7a:	d146      	bne.n	d800a <_Z6letterciiii+0x2ba>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7f7c:	b28c      	uxth	r4, r1
   d7f7e:	b2d6      	uxtb	r6, r2
   d7f80:	b2df      	uxtb	r7, r3
   d7f82:	b2ed      	uxtb	r5, r5
   d7f84:	f104 010b 	add.w	r1, r4, #11
   d7f88:	463b      	mov	r3, r7
   d7f8a:	4632      	mov	r2, r6
   d7f8c:	b289      	uxth	r1, r1
   d7f8e:	4823      	ldr	r0, [pc, #140]	; (d801c <_Z6letterciiii+0x2cc>)
   d7f90:	9500      	str	r5, [sp, #0]
   d7f92:	f006 f861 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f96:	f104 010c 	add.w	r1, r4, #12
   d7f9a:	463b      	mov	r3, r7
   d7f9c:	4632      	mov	r2, r6
   d7f9e:	b289      	uxth	r1, r1
   d7fa0:	481e      	ldr	r0, [pc, #120]	; (d801c <_Z6letterciiii+0x2cc>)
   d7fa2:	9500      	str	r5, [sp, #0]
   d7fa4:	f006 f858 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7fa8:	f104 010d 	add.w	r1, r4, #13
   d7fac:	463b      	mov	r3, r7
   d7fae:	4632      	mov	r2, r6
   d7fb0:	b289      	uxth	r1, r1
   d7fb2:	481a      	ldr	r0, [pc, #104]	; (d801c <_Z6letterciiii+0x2cc>)
   d7fb4:	9500      	str	r5, [sp, #0]
   d7fb6:	f006 f84f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7fba:	f104 010e 	add.w	r1, r4, #14
   d7fbe:	463b      	mov	r3, r7
   d7fc0:	4632      	mov	r2, r6
   d7fc2:	b289      	uxth	r1, r1
   d7fc4:	4815      	ldr	r0, [pc, #84]	; (d801c <_Z6letterciiii+0x2cc>)
   d7fc6:	9500      	str	r5, [sp, #0]
   d7fc8:	f006 f846 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7fcc:	f104 010f 	add.w	r1, r4, #15
   d7fd0:	463b      	mov	r3, r7
   d7fd2:	4632      	mov	r2, r6
   d7fd4:	b289      	uxth	r1, r1
   d7fd6:	4811      	ldr	r0, [pc, #68]	; (d801c <_Z6letterciiii+0x2cc>)
   d7fd8:	9500      	str	r5, [sp, #0]
   d7fda:	f006 f83d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7fde:	f104 0112 	add.w	r1, r4, #18
   d7fe2:	b289      	uxth	r1, r1
   d7fe4:	9500      	str	r5, [sp, #0]
   d7fe6:	463b      	mov	r3, r7
   d7fe8:	4632      	mov	r2, r6
   d7fea:	480c      	ldr	r0, [pc, #48]	; (d801c <_Z6letterciiii+0x2cc>)
   d7fec:	f006 f834 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7ff0:	f104 011b 	add.w	r1, r4, #27
   d7ff4:	b289      	uxth	r1, r1
   d7ff6:	9500      	str	r5, [sp, #0]
   d7ff8:	463b      	mov	r3, r7
   d7ffa:	4632      	mov	r2, r6
   d7ffc:	4807      	ldr	r0, [pc, #28]	; (d801c <_Z6letterciiii+0x2cc>)
   d7ffe:	f006 f82b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8002:	f104 011c 	add.w	r1, r4, #28
   d8006:	f000 bf0c 	b.w	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'i')
   d800a:	2869      	cmp	r0, #105	; 0x69
   d800c:	d108      	bne.n	d8020 <_Z6letterciiii+0x2d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d800e:	b28c      	uxth	r4, r1
   d8010:	b2d6      	uxtb	r6, r2
   d8012:	b2df      	uxtb	r7, r3
   d8014:	b2ed      	uxtb	r5, r5
   d8016:	f104 010f 	add.w	r1, r4, #15
   d801a:	e064      	b.n	d80e6 <_Z6letterciiii+0x396>
   d801c:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+11,R,G,B);
    }
    if(ltr == 'j')
   d8020:	286a      	cmp	r0, #106	; 0x6a
   d8022:	d122      	bne.n	d806a <_Z6letterciiii+0x31a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8024:	b28c      	uxth	r4, r1
   d8026:	b2d6      	uxtb	r6, r2
   d8028:	b2df      	uxtb	r7, r3
   d802a:	b2ed      	uxtb	r5, r5
   d802c:	f104 010c 	add.w	r1, r4, #12
   d8030:	463b      	mov	r3, r7
   d8032:	4632      	mov	r2, r6
   d8034:	b289      	uxth	r1, r1
   d8036:	48b7      	ldr	r0, [pc, #732]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8038:	9500      	str	r5, [sp, #0]
   d803a:	f006 f80d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d803e:	f104 0114 	add.w	r1, r4, #20
   d8042:	463b      	mov	r3, r7
   d8044:	4632      	mov	r2, r6
   d8046:	b289      	uxth	r1, r1
   d8048:	48b2      	ldr	r0, [pc, #712]	; (d8314 <_Z6letterciiii+0x5c4>)
   d804a:	9500      	str	r5, [sp, #0]
   d804c:	f006 f804 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8050:	f104 011c 	add.w	r1, r4, #28
   d8054:	b289      	uxth	r1, r1
   d8056:	9500      	str	r5, [sp, #0]
   d8058:	463b      	mov	r3, r7
   d805a:	4632      	mov	r2, r6
   d805c:	48ad      	ldr	r0, [pc, #692]	; (d8314 <_Z6letterciiii+0x5c4>)
   d805e:	f005 fffb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8062:	f104 011d 	add.w	r1, r4, #29
   d8066:	f001 b886 	b.w	d9176 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'k')
   d806a:	286b      	cmp	r0, #107	; 0x6b
   d806c:	d12a      	bne.n	d80c4 <_Z6letterciiii+0x374>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d806e:	b28c      	uxth	r4, r1
   d8070:	b2d6      	uxtb	r6, r2
   d8072:	b2df      	uxtb	r7, r3
   d8074:	b2ed      	uxtb	r5, r5
   d8076:	f104 010b 	add.w	r1, r4, #11
   d807a:	463b      	mov	r3, r7
   d807c:	4632      	mov	r2, r6
   d807e:	b289      	uxth	r1, r1
   d8080:	48a4      	ldr	r0, [pc, #656]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8082:	9500      	str	r5, [sp, #0]
   d8084:	f005 ffe8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8088:	f104 010c 	add.w	r1, r4, #12
   d808c:	463b      	mov	r3, r7
   d808e:	4632      	mov	r2, r6
   d8090:	b289      	uxth	r1, r1
   d8092:	48a0      	ldr	r0, [pc, #640]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8094:	9500      	str	r5, [sp, #0]
   d8096:	f005 ffdf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d809a:	f104 010d 	add.w	r1, r4, #13
   d809e:	463b      	mov	r3, r7
   d80a0:	4632      	mov	r2, r6
   d80a2:	b289      	uxth	r1, r1
   d80a4:	489b      	ldr	r0, [pc, #620]	; (d8314 <_Z6letterciiii+0x5c4>)
   d80a6:	9500      	str	r5, [sp, #0]
   d80a8:	f005 ffd6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d80ac:	f104 010e 	add.w	r1, r4, #14
   d80b0:	b289      	uxth	r1, r1
   d80b2:	9500      	str	r5, [sp, #0]
   d80b4:	463b      	mov	r3, r7
   d80b6:	4632      	mov	r2, r6
   d80b8:	4896      	ldr	r0, [pc, #600]	; (d8314 <_Z6letterciiii+0x5c4>)
   d80ba:	f005 ffcd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d80be:	f104 010f 	add.w	r1, r4, #15
   d80c2:	e1cb      	b.n	d845c <_Z6letterciiii+0x70c>
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'l')
   d80c4:	286c      	cmp	r0, #108	; 0x6c
   d80c6:	d12b      	bne.n	d8120 <_Z6letterciiii+0x3d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d80c8:	b28c      	uxth	r4, r1
   d80ca:	b2d6      	uxtb	r6, r2
   d80cc:	b2df      	uxtb	r7, r3
   d80ce:	b2ed      	uxtb	r5, r5
   d80d0:	f104 010f 	add.w	r1, r4, #15
   d80d4:	b289      	uxth	r1, r1
   d80d6:	9500      	str	r5, [sp, #0]
   d80d8:	463b      	mov	r3, r7
   d80da:	4632      	mov	r2, r6
   d80dc:	488d      	ldr	r0, [pc, #564]	; (d8314 <_Z6letterciiii+0x5c4>)
   d80de:	f005 ffbb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d80e2:	f104 010e 	add.w	r1, r4, #14
   d80e6:	463b      	mov	r3, r7
   d80e8:	4632      	mov	r2, r6
   d80ea:	b289      	uxth	r1, r1
   d80ec:	4889      	ldr	r0, [pc, #548]	; (d8314 <_Z6letterciiii+0x5c4>)
   d80ee:	9500      	str	r5, [sp, #0]
   d80f0:	f005 ffb2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d80f4:	f104 010d 	add.w	r1, r4, #13
   d80f8:	463b      	mov	r3, r7
   d80fa:	4632      	mov	r2, r6
   d80fc:	b289      	uxth	r1, r1
   d80fe:	4885      	ldr	r0, [pc, #532]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8100:	9500      	str	r5, [sp, #0]
   d8102:	f005 ffa9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8106:	f104 010c 	add.w	r1, r4, #12
   d810a:	b289      	uxth	r1, r1
   d810c:	9500      	str	r5, [sp, #0]
   d810e:	463b      	mov	r3, r7
   d8110:	4632      	mov	r2, r6
   d8112:	4880      	ldr	r0, [pc, #512]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8114:	f005 ffa0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d8118:	f104 010b 	add.w	r1, r4, #11
   d811c:	f000 be81 	b.w	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'm')
   d8120:	286d      	cmp	r0, #109	; 0x6d
   d8122:	d134      	bne.n	d818e <_Z6letterciiii+0x43e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8124:	b28c      	uxth	r4, r1
   d8126:	b2d6      	uxtb	r6, r2
   d8128:	b2df      	uxtb	r7, r3
   d812a:	b2ed      	uxtb	r5, r5
   d812c:	f104 010b 	add.w	r1, r4, #11
   d8130:	463b      	mov	r3, r7
   d8132:	4632      	mov	r2, r6
   d8134:	b289      	uxth	r1, r1
   d8136:	4877      	ldr	r0, [pc, #476]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8138:	9500      	str	r5, [sp, #0]
   d813a:	f005 ff8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d813e:	f104 010c 	add.w	r1, r4, #12
   d8142:	463b      	mov	r3, r7
   d8144:	4632      	mov	r2, r6
   d8146:	b289      	uxth	r1, r1
   d8148:	4872      	ldr	r0, [pc, #456]	; (d8314 <_Z6letterciiii+0x5c4>)
   d814a:	9500      	str	r5, [sp, #0]
   d814c:	f005 ff84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8150:	f104 0112 	add.w	r1, r4, #18
   d8154:	463b      	mov	r3, r7
   d8156:	4632      	mov	r2, r6
   d8158:	b289      	uxth	r1, r1
   d815a:	486e      	ldr	r0, [pc, #440]	; (d8314 <_Z6letterciiii+0x5c4>)
   d815c:	9500      	str	r5, [sp, #0]
   d815e:	f005 ff7b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8162:	f104 011b 	add.w	r1, r4, #27
   d8166:	463b      	mov	r3, r7
   d8168:	4632      	mov	r2, r6
   d816a:	b289      	uxth	r1, r1
   d816c:	4869      	ldr	r0, [pc, #420]	; (d8314 <_Z6letterciiii+0x5c4>)
   d816e:	9500      	str	r5, [sp, #0]
   d8170:	f005 ff72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8174:	f104 011c 	add.w	r1, r4, #28
   d8178:	b289      	uxth	r1, r1
   d817a:	9500      	str	r5, [sp, #0]
   d817c:	463b      	mov	r3, r7
   d817e:	4632      	mov	r2, r6
   d8180:	4864      	ldr	r0, [pc, #400]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8182:	f005 ff69 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+34,R,G,B);
   d8186:	f104 0122 	add.w	r1, r4, #34	; 0x22
   d818a:	f000 bcce 	b.w	d8b2a <_Z6letterciiii+0xdda>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+43,R,G,B);
    }
    if(ltr == 'n')
   d818e:	286e      	cmp	r0, #110	; 0x6e
   d8190:	d12a      	bne.n	d81e8 <_Z6letterciiii+0x498>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8192:	b28c      	uxth	r4, r1
   d8194:	b2d6      	uxtb	r6, r2
   d8196:	b2df      	uxtb	r7, r3
   d8198:	b2ed      	uxtb	r5, r5
   d819a:	f104 010b 	add.w	r1, r4, #11
   d819e:	463b      	mov	r3, r7
   d81a0:	4632      	mov	r2, r6
   d81a2:	b289      	uxth	r1, r1
   d81a4:	485b      	ldr	r0, [pc, #364]	; (d8314 <_Z6letterciiii+0x5c4>)
   d81a6:	9500      	str	r5, [sp, #0]
   d81a8:	f005 ff56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d81ac:	f104 010c 	add.w	r1, r4, #12
   d81b0:	463b      	mov	r3, r7
   d81b2:	4632      	mov	r2, r6
   d81b4:	b289      	uxth	r1, r1
   d81b6:	4857      	ldr	r0, [pc, #348]	; (d8314 <_Z6letterciiii+0x5c4>)
   d81b8:	9500      	str	r5, [sp, #0]
   d81ba:	f005 ff4d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d81be:	f104 010d 	add.w	r1, r4, #13
   d81c2:	463b      	mov	r3, r7
   d81c4:	4632      	mov	r2, r6
   d81c6:	b289      	uxth	r1, r1
   d81c8:	4852      	ldr	r0, [pc, #328]	; (d8314 <_Z6letterciiii+0x5c4>)
   d81ca:	9500      	str	r5, [sp, #0]
   d81cc:	f005 ff44 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d81d0:	f104 010e 	add.w	r1, r4, #14
   d81d4:	b289      	uxth	r1, r1
   d81d6:	9500      	str	r5, [sp, #0]
   d81d8:	463b      	mov	r3, r7
   d81da:	4632      	mov	r2, r6
   d81dc:	484d      	ldr	r0, [pc, #308]	; (d8314 <_Z6letterciiii+0x5c4>)
   d81de:	f005 ff3b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d81e2:	f104 0111 	add.w	r1, r4, #17
   d81e6:	e0b1      	b.n	d834c <_Z6letterciiii+0x5fc>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'o')
   d81e8:	286f      	cmp	r0, #111	; 0x6f
   d81ea:	d118      	bne.n	d821e <_Z6letterciiii+0x4ce>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d81ec:	b28c      	uxth	r4, r1
   d81ee:	b2d6      	uxtb	r6, r2
   d81f0:	b2df      	uxtb	r7, r3
   d81f2:	b2ed      	uxtb	r5, r5
   d81f4:	f104 010c 	add.w	r1, r4, #12
   d81f8:	463b      	mov	r3, r7
   d81fa:	4632      	mov	r2, r6
   d81fc:	b289      	uxth	r1, r1
   d81fe:	4845      	ldr	r0, [pc, #276]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8200:	9500      	str	r5, [sp, #0]
   d8202:	f005 ff29 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8206:	f104 010d 	add.w	r1, r4, #13
   d820a:	b289      	uxth	r1, r1
   d820c:	9500      	str	r5, [sp, #0]
   d820e:	463b      	mov	r3, r7
   d8210:	4632      	mov	r2, r6
   d8212:	4840      	ldr	r0, [pc, #256]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8214:	f005 ff20 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8218:	f104 0111 	add.w	r1, r4, #17
   d821c:	e0b1      	b.n	d8382 <_Z6letterciiii+0x632>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'p')
   d821e:	2870      	cmp	r0, #112	; 0x70
   d8220:	f000 852a 	beq.w	d8c78 <_Z6letterciiii+0xf28>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'q')
   d8224:	2871      	cmp	r0, #113	; 0x71
   d8226:	d10f      	bne.n	d8248 <_Z6letterciiii+0x4f8>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d8228:	b28c      	uxth	r4, r1
   d822a:	b2d6      	uxtb	r6, r2
   d822c:	b2df      	uxtb	r7, r3
   d822e:	b2ed      	uxtb	r5, r5
   d8230:	f104 010e 	add.w	r1, r4, #14
   d8234:	b289      	uxth	r1, r1
   d8236:	9500      	str	r5, [sp, #0]
   d8238:	463b      	mov	r3, r7
   d823a:	4632      	mov	r2, r6
   d823c:	4835      	ldr	r0, [pc, #212]	; (d8314 <_Z6letterciiii+0x5c4>)
   d823e:	f005 ff0b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8242:	f104 0110 	add.w	r1, r4, #16
   d8246:	e347      	b.n	d88d8 <_Z6letterciiii+0xb88>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'r')
   d8248:	2872      	cmp	r0, #114	; 0x72
   d824a:	d12a      	bne.n	d82a2 <_Z6letterciiii+0x552>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d824c:	b28c      	uxth	r4, r1
   d824e:	b2d6      	uxtb	r6, r2
   d8250:	b2df      	uxtb	r7, r3
   d8252:	b2ed      	uxtb	r5, r5
   d8254:	f104 010b 	add.w	r1, r4, #11
   d8258:	463b      	mov	r3, r7
   d825a:	4632      	mov	r2, r6
   d825c:	b289      	uxth	r1, r1
   d825e:	482d      	ldr	r0, [pc, #180]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8260:	9500      	str	r5, [sp, #0]
   d8262:	f005 fef9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8266:	f104 010c 	add.w	r1, r4, #12
   d826a:	463b      	mov	r3, r7
   d826c:	4632      	mov	r2, r6
   d826e:	b289      	uxth	r1, r1
   d8270:	4828      	ldr	r0, [pc, #160]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8272:	9500      	str	r5, [sp, #0]
   d8274:	f005 fef0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8278:	f104 010d 	add.w	r1, r4, #13
   d827c:	463b      	mov	r3, r7
   d827e:	4632      	mov	r2, r6
   d8280:	b289      	uxth	r1, r1
   d8282:	4824      	ldr	r0, [pc, #144]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8284:	9500      	str	r5, [sp, #0]
   d8286:	f005 fee7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d828a:	f104 010e 	add.w	r1, r4, #14
   d828e:	b289      	uxth	r1, r1
   d8290:	9500      	str	r5, [sp, #0]
   d8292:	463b      	mov	r3, r7
   d8294:	4632      	mov	r2, r6
   d8296:	481f      	ldr	r0, [pc, #124]	; (d8314 <_Z6letterciiii+0x5c4>)
   d8298:	f005 fede 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d829c:	f104 0111 	add.w	r1, r4, #17
   d82a0:	e0ee      	b.n	d8480 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 's')
   d82a2:	2873      	cmp	r0, #115	; 0x73
   d82a4:	f000 85ca 	beq.w	d8e3c <_Z6letterciiii+0x10ec>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 't')
   d82a8:	2874      	cmp	r0, #116	; 0x74
   d82aa:	d135      	bne.n	d8318 <_Z6letterciiii+0x5c8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d82ac:	b28c      	uxth	r4, r1
   d82ae:	b2d6      	uxtb	r6, r2
   d82b0:	b2df      	uxtb	r7, r3
   d82b2:	b2ed      	uxtb	r5, r5
   d82b4:	f104 010d 	add.w	r1, r4, #13
   d82b8:	463b      	mov	r3, r7
   d82ba:	4632      	mov	r2, r6
   d82bc:	b289      	uxth	r1, r1
   d82be:	4815      	ldr	r0, [pc, #84]	; (d8314 <_Z6letterciiii+0x5c4>)
   d82c0:	9500      	str	r5, [sp, #0]
   d82c2:	f005 fec9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d82c6:	f104 0110 	add.w	r1, r4, #16
   d82ca:	463b      	mov	r3, r7
   d82cc:	4632      	mov	r2, r6
   d82ce:	b289      	uxth	r1, r1
   d82d0:	4810      	ldr	r0, [pc, #64]	; (d8314 <_Z6letterciiii+0x5c4>)
   d82d2:	9500      	str	r5, [sp, #0]
   d82d4:	f005 fec0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d82d8:	f104 0111 	add.w	r1, r4, #17
   d82dc:	463b      	mov	r3, r7
   d82de:	4632      	mov	r2, r6
   d82e0:	b289      	uxth	r1, r1
   d82e2:	480c      	ldr	r0, [pc, #48]	; (d8314 <_Z6letterciiii+0x5c4>)
   d82e4:	9500      	str	r5, [sp, #0]
   d82e6:	f005 feb7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d82ea:	f104 0112 	add.w	r1, r4, #18
   d82ee:	463b      	mov	r3, r7
   d82f0:	4632      	mov	r2, r6
   d82f2:	b289      	uxth	r1, r1
   d82f4:	4807      	ldr	r0, [pc, #28]	; (d8314 <_Z6letterciiii+0x5c4>)
   d82f6:	9500      	str	r5, [sp, #0]
   d82f8:	f005 feae 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d82fc:	f104 0113 	add.w	r1, r4, #19
   d8300:	b289      	uxth	r1, r1
   d8302:	9500      	str	r5, [sp, #0]
   d8304:	463b      	mov	r3, r7
   d8306:	4632      	mov	r2, r6
   d8308:	4802      	ldr	r0, [pc, #8]	; (d8314 <_Z6letterciiii+0x5c4>)
   d830a:	f005 fea5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d830e:	f104 0114 	add.w	r1, r4, #20
   d8312:	e0b5      	b.n	d8480 <_Z6letterciiii+0x730>
   d8314:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'u')
   d8318:	2875      	cmp	r0, #117	; 0x75
   d831a:	d121      	bne.n	d8360 <_Z6letterciiii+0x610>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d831c:	b28c      	uxth	r4, r1
   d831e:	b2d6      	uxtb	r6, r2
   d8320:	b2df      	uxtb	r7, r3
   d8322:	b2ed      	uxtb	r5, r5
   d8324:	f104 010c 	add.w	r1, r4, #12
   d8328:	b289      	uxth	r1, r1
   d832a:	9500      	str	r5, [sp, #0]
   d832c:	463b      	mov	r3, r7
   d832e:	4632      	mov	r2, r6
   d8330:	48a1      	ldr	r0, [pc, #644]	; (d85b8 <_Z6letterciiii+0x868>)
   d8332:	f005 fe91 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8336:	f104 010d 	add.w	r1, r4, #13
   d833a:	b289      	uxth	r1, r1
   d833c:	9500      	str	r5, [sp, #0]
   d833e:	463b      	mov	r3, r7
   d8340:	4632      	mov	r2, r6
   d8342:	489d      	ldr	r0, [pc, #628]	; (d85b8 <_Z6letterciiii+0x868>)
   d8344:	f005 fe88 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8348:	f104 0114 	add.w	r1, r4, #20
   d834c:	b289      	uxth	r1, r1
   d834e:	9500      	str	r5, [sp, #0]
   d8350:	463b      	mov	r3, r7
   d8352:	4632      	mov	r2, r6
   d8354:	4898      	ldr	r0, [pc, #608]	; (d85b8 <_Z6letterciiii+0x868>)
   d8356:	f005 fe7f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d835a:	f104 011b 	add.w	r1, r4, #27
   d835e:	e019      	b.n	d8394 <_Z6letterciiii+0x644>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'v')
   d8360:	2876      	cmp	r0, #118	; 0x76
   d8362:	d121      	bne.n	d83a8 <_Z6letterciiii+0x658>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8364:	b28c      	uxth	r4, r1
   d8366:	b2d6      	uxtb	r6, r2
   d8368:	b2df      	uxtb	r7, r3
   d836a:	b2ed      	uxtb	r5, r5
   d836c:	f104 010c 	add.w	r1, r4, #12
   d8370:	b289      	uxth	r1, r1
   d8372:	9500      	str	r5, [sp, #0]
   d8374:	463b      	mov	r3, r7
   d8376:	4632      	mov	r2, r6
   d8378:	488f      	ldr	r0, [pc, #572]	; (d85b8 <_Z6letterciiii+0x868>)
   d837a:	f005 fe6d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d837e:	f104 010d 	add.w	r1, r4, #13
   d8382:	b289      	uxth	r1, r1
   d8384:	9500      	str	r5, [sp, #0]
   d8386:	463b      	mov	r3, r7
   d8388:	4632      	mov	r2, r6
   d838a:	488b      	ldr	r0, [pc, #556]	; (d85b8 <_Z6letterciiii+0x868>)
   d838c:	f005 fe64 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8390:	f104 0114 	add.w	r1, r4, #20
   d8394:	b289      	uxth	r1, r1
   d8396:	9500      	str	r5, [sp, #0]
   d8398:	463b      	mov	r3, r7
   d839a:	4632      	mov	r2, r6
   d839c:	4886      	ldr	r0, [pc, #536]	; (d85b8 <_Z6letterciiii+0x868>)
   d839e:	f005 fe5b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d83a2:	f104 011c 	add.w	r1, r4, #28
   d83a6:	e06b      	b.n	d8480 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'w')
   d83a8:	2877      	cmp	r0, #119	; 0x77
   d83aa:	d146      	bne.n	d843a <_Z6letterciiii+0x6ea>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d83ac:	b28c      	uxth	r4, r1
   d83ae:	b2d6      	uxtb	r6, r2
   d83b0:	b2df      	uxtb	r7, r3
   d83b2:	b2ed      	uxtb	r5, r5
   d83b4:	f104 010c 	add.w	r1, r4, #12
   d83b8:	463b      	mov	r3, r7
   d83ba:	4632      	mov	r2, r6
   d83bc:	b289      	uxth	r1, r1
   d83be:	487e      	ldr	r0, [pc, #504]	; (d85b8 <_Z6letterciiii+0x868>)
   d83c0:	9500      	str	r5, [sp, #0]
   d83c2:	f005 fe49 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d83c6:	f104 010d 	add.w	r1, r4, #13
   d83ca:	463b      	mov	r3, r7
   d83cc:	4632      	mov	r2, r6
   d83ce:	b289      	uxth	r1, r1
   d83d0:	4879      	ldr	r0, [pc, #484]	; (d85b8 <_Z6letterciiii+0x868>)
   d83d2:	9500      	str	r5, [sp, #0]
   d83d4:	f005 fe40 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d83d8:	f104 0114 	add.w	r1, r4, #20
   d83dc:	463b      	mov	r3, r7
   d83de:	4632      	mov	r2, r6
   d83e0:	b289      	uxth	r1, r1
   d83e2:	4875      	ldr	r0, [pc, #468]	; (d85b8 <_Z6letterciiii+0x868>)
   d83e4:	9500      	str	r5, [sp, #0]
   d83e6:	f005 fe37 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d83ea:	f104 011c 	add.w	r1, r4, #28
   d83ee:	463b      	mov	r3, r7
   d83f0:	4632      	mov	r2, r6
   d83f2:	b289      	uxth	r1, r1
   d83f4:	4870      	ldr	r0, [pc, #448]	; (d85b8 <_Z6letterciiii+0x868>)
   d83f6:	9500      	str	r5, [sp, #0]
   d83f8:	f005 fe2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d83fc:	f104 011d 	add.w	r1, r4, #29
   d8400:	463b      	mov	r3, r7
   d8402:	4632      	mov	r2, r6
   d8404:	b289      	uxth	r1, r1
   d8406:	486c      	ldr	r0, [pc, #432]	; (d85b8 <_Z6letterciiii+0x868>)
   d8408:	9500      	str	r5, [sp, #0]
   d840a:	f005 fe25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d840e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8412:	463b      	mov	r3, r7
   d8414:	4632      	mov	r2, r6
   d8416:	b289      	uxth	r1, r1
   d8418:	4867      	ldr	r0, [pc, #412]	; (d85b8 <_Z6letterciiii+0x868>)
   d841a:	9500      	str	r5, [sp, #0]
   d841c:	f005 fe1c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8420:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8424:	b289      	uxth	r1, r1
   d8426:	9500      	str	r5, [sp, #0]
   d8428:	463b      	mov	r3, r7
   d842a:	4632      	mov	r2, r6
   d842c:	4862      	ldr	r0, [pc, #392]	; (d85b8 <_Z6letterciiii+0x868>)
   d842e:	f005 fe13 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8432:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8436:	f000 bcf4 	b.w	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'x')
   d843a:	2878      	cmp	r0, #120	; 0x78
   d843c:	d12b      	bne.n	d8496 <_Z6letterciiii+0x746>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d843e:	b28c      	uxth	r4, r1
   d8440:	b2d6      	uxtb	r6, r2
   d8442:	b2df      	uxtb	r7, r3
   d8444:	b2ed      	uxtb	r5, r5
   d8446:	f104 010b 	add.w	r1, r4, #11
   d844a:	b289      	uxth	r1, r1
   d844c:	9500      	str	r5, [sp, #0]
   d844e:	463b      	mov	r3, r7
   d8450:	4632      	mov	r2, r6
   d8452:	4859      	ldr	r0, [pc, #356]	; (d85b8 <_Z6letterciiii+0x868>)
   d8454:	f005 fe00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8458:	f104 010d 	add.w	r1, r4, #13
   d845c:	463b      	mov	r3, r7
   d845e:	4632      	mov	r2, r6
   d8460:	b289      	uxth	r1, r1
   d8462:	4855      	ldr	r0, [pc, #340]	; (d85b8 <_Z6letterciiii+0x868>)
   d8464:	9500      	str	r5, [sp, #0]
   d8466:	f005 fdf7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d846a:	f104 0113 	add.w	r1, r4, #19
   d846e:	b289      	uxth	r1, r1
   d8470:	9500      	str	r5, [sp, #0]
   d8472:	463b      	mov	r3, r7
   d8474:	4632      	mov	r2, r6
   d8476:	4850      	ldr	r0, [pc, #320]	; (d85b8 <_Z6letterciiii+0x868>)
   d8478:	f005 fdee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d847c:	f104 011b 	add.w	r1, r4, #27
   d8480:	b289      	uxth	r1, r1
   d8482:	9500      	str	r5, [sp, #0]
   d8484:	463b      	mov	r3, r7
   d8486:	4632      	mov	r2, r6
   d8488:	484b      	ldr	r0, [pc, #300]	; (d85b8 <_Z6letterciiii+0x868>)
   d848a:	f005 fde5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d848e:	f104 011d 	add.w	r1, r4, #29
   d8492:	f000 bcc6 	b.w	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'y')
   d8496:	2879      	cmp	r0, #121	; 0x79
   d8498:	d118      	bne.n	d84cc <_Z6letterciiii+0x77c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d849a:	b28c      	uxth	r4, r1
   d849c:	b2d6      	uxtb	r6, r2
   d849e:	b2df      	uxtb	r7, r3
   d84a0:	b2ed      	uxtb	r5, r5
   d84a2:	f104 010b 	add.w	r1, r4, #11
   d84a6:	463b      	mov	r3, r7
   d84a8:	4632      	mov	r2, r6
   d84aa:	b289      	uxth	r1, r1
   d84ac:	4842      	ldr	r0, [pc, #264]	; (d85b8 <_Z6letterciiii+0x868>)
   d84ae:	9500      	str	r5, [sp, #0]
   d84b0:	f005 fdd2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d84b4:	f104 010e 	add.w	r1, r4, #14
   d84b8:	b289      	uxth	r1, r1
   d84ba:	9500      	str	r5, [sp, #0]
   d84bc:	463b      	mov	r3, r7
   d84be:	4632      	mov	r2, r6
   d84c0:	483d      	ldr	r0, [pc, #244]	; (d85b8 <_Z6letterciiii+0x868>)
   d84c2:	f005 fdc9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d84c6:	f104 0112 	add.w	r1, r4, #18
   d84ca:	e3b7      	b.n	d8c3c <_Z6letterciiii+0xeec>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'z')
   d84cc:	287a      	cmp	r0, #122	; 0x7a
   d84ce:	d133      	bne.n	d8538 <_Z6letterciiii+0x7e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d84d0:	b28c      	uxth	r4, r1
   d84d2:	b2d6      	uxtb	r6, r2
   d84d4:	b2df      	uxtb	r7, r3
   d84d6:	b2ed      	uxtb	r5, r5
   d84d8:	f104 010b 	add.w	r1, r4, #11
   d84dc:	463b      	mov	r3, r7
   d84de:	4632      	mov	r2, r6
   d84e0:	b289      	uxth	r1, r1
   d84e2:	4835      	ldr	r0, [pc, #212]	; (d85b8 <_Z6letterciiii+0x868>)
   d84e4:	9500      	str	r5, [sp, #0]
   d84e6:	f005 fdb7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d84ea:	f104 010e 	add.w	r1, r4, #14
   d84ee:	463b      	mov	r3, r7
   d84f0:	4632      	mov	r2, r6
   d84f2:	b289      	uxth	r1, r1
   d84f4:	4830      	ldr	r0, [pc, #192]	; (d85b8 <_Z6letterciiii+0x868>)
   d84f6:	9500      	str	r5, [sp, #0]
   d84f8:	f005 fdae 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d84fc:	f104 0111 	add.w	r1, r4, #17
   d8500:	b289      	uxth	r1, r1
   d8502:	9500      	str	r5, [sp, #0]
   d8504:	463b      	mov	r3, r7
   d8506:	4632      	mov	r2, r6
   d8508:	482b      	ldr	r0, [pc, #172]	; (d85b8 <_Z6letterciiii+0x868>)
   d850a:	f005 fda5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d850e:	f104 0113 	add.w	r1, r4, #19
   d8512:	463b      	mov	r3, r7
   d8514:	4632      	mov	r2, r6
   d8516:	b289      	uxth	r1, r1
   d8518:	4827      	ldr	r0, [pc, #156]	; (d85b8 <_Z6letterciiii+0x868>)
   d851a:	9500      	str	r5, [sp, #0]
   d851c:	f005 fd9c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8520:	f104 0114 	add.w	r1, r4, #20
   d8524:	b289      	uxth	r1, r1
   d8526:	9500      	str	r5, [sp, #0]
   d8528:	463b      	mov	r3, r7
   d852a:	4632      	mov	r2, r6
   d852c:	4822      	ldr	r0, [pc, #136]	; (d85b8 <_Z6letterciiii+0x868>)
   d852e:	f005 fd93 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8532:	f104 011b 	add.w	r1, r4, #27
   d8536:	e393      	b.n	d8c60 <_Z6letterciiii+0xf10>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'A')
   d8538:	2841      	cmp	r0, #65	; 0x41
   d853a:	d13f      	bne.n	d85bc <_Z6letterciiii+0x86c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d853c:	b28c      	uxth	r4, r1
   d853e:	b2d6      	uxtb	r6, r2
   d8540:	b2df      	uxtb	r7, r3
   d8542:	b2ed      	uxtb	r5, r5
   d8544:	f104 010b 	add.w	r1, r4, #11
   d8548:	463b      	mov	r3, r7
   d854a:	4632      	mov	r2, r6
   d854c:	b289      	uxth	r1, r1
   d854e:	481a      	ldr	r0, [pc, #104]	; (d85b8 <_Z6letterciiii+0x868>)
   d8550:	9500      	str	r5, [sp, #0]
   d8552:	f005 fd81 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8556:	f104 010c 	add.w	r1, r4, #12
   d855a:	463b      	mov	r3, r7
   d855c:	4632      	mov	r2, r6
   d855e:	b289      	uxth	r1, r1
   d8560:	4815      	ldr	r0, [pc, #84]	; (d85b8 <_Z6letterciiii+0x868>)
   d8562:	9500      	str	r5, [sp, #0]
   d8564:	f005 fd78 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8568:	f104 010d 	add.w	r1, r4, #13
   d856c:	463b      	mov	r3, r7
   d856e:	4632      	mov	r2, r6
   d8570:	b289      	uxth	r1, r1
   d8572:	4811      	ldr	r0, [pc, #68]	; (d85b8 <_Z6letterciiii+0x868>)
   d8574:	9500      	str	r5, [sp, #0]
   d8576:	f005 fd6f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d857a:	f104 010e 	add.w	r1, r4, #14
   d857e:	463b      	mov	r3, r7
   d8580:	4632      	mov	r2, r6
   d8582:	b289      	uxth	r1, r1
   d8584:	480c      	ldr	r0, [pc, #48]	; (d85b8 <_Z6letterciiii+0x868>)
   d8586:	9500      	str	r5, [sp, #0]
   d8588:	f005 fd66 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d858c:	f104 0110 	add.w	r1, r4, #16
   d8590:	463b      	mov	r3, r7
   d8592:	4632      	mov	r2, r6
   d8594:	b289      	uxth	r1, r1
   d8596:	4808      	ldr	r0, [pc, #32]	; (d85b8 <_Z6letterciiii+0x868>)
   d8598:	9500      	str	r5, [sp, #0]
   d859a:	f005 fd5d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d859e:	f104 0112 	add.w	r1, r4, #18
   d85a2:	b289      	uxth	r1, r1
   d85a4:	9500      	str	r5, [sp, #0]
   d85a6:	463b      	mov	r3, r7
   d85a8:	4632      	mov	r2, r6
   d85aa:	4803      	ldr	r0, [pc, #12]	; (d85b8 <_Z6letterciiii+0x868>)
   d85ac:	f005 fd54 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d85b0:	f104 011b 	add.w	r1, r4, #27
   d85b4:	e34b      	b.n	d8c4e <_Z6letterciiii+0xefe>
   d85b6:	bf00      	nop
   d85b8:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'B')
   d85bc:	2842      	cmp	r0, #66	; 0x42
   d85be:	d145      	bne.n	d864c <_Z6letterciiii+0x8fc>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d85c0:	b28c      	uxth	r4, r1
   d85c2:	b2d6      	uxtb	r6, r2
   d85c4:	b2df      	uxtb	r7, r3
   d85c6:	b2ed      	uxtb	r5, r5
   d85c8:	f104 010b 	add.w	r1, r4, #11
   d85cc:	463b      	mov	r3, r7
   d85ce:	4632      	mov	r2, r6
   d85d0:	b289      	uxth	r1, r1
   d85d2:	48aa      	ldr	r0, [pc, #680]	; (d887c <_Z6letterciiii+0xb2c>)
   d85d4:	9500      	str	r5, [sp, #0]
   d85d6:	f005 fd3f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d85da:	f104 010c 	add.w	r1, r4, #12
   d85de:	463b      	mov	r3, r7
   d85e0:	4632      	mov	r2, r6
   d85e2:	b289      	uxth	r1, r1
   d85e4:	48a5      	ldr	r0, [pc, #660]	; (d887c <_Z6letterciiii+0xb2c>)
   d85e6:	9500      	str	r5, [sp, #0]
   d85e8:	f005 fd36 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d85ec:	f104 010d 	add.w	r1, r4, #13
   d85f0:	463b      	mov	r3, r7
   d85f2:	4632      	mov	r2, r6
   d85f4:	b289      	uxth	r1, r1
   d85f6:	48a1      	ldr	r0, [pc, #644]	; (d887c <_Z6letterciiii+0xb2c>)
   d85f8:	9500      	str	r5, [sp, #0]
   d85fa:	f005 fd2d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d85fe:	f104 010e 	add.w	r1, r4, #14
   d8602:	463b      	mov	r3, r7
   d8604:	4632      	mov	r2, r6
   d8606:	b289      	uxth	r1, r1
   d8608:	489c      	ldr	r0, [pc, #624]	; (d887c <_Z6letterciiii+0xb2c>)
   d860a:	9500      	str	r5, [sp, #0]
   d860c:	f005 fd24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8610:	f104 010f 	add.w	r1, r4, #15
   d8614:	463b      	mov	r3, r7
   d8616:	4632      	mov	r2, r6
   d8618:	b289      	uxth	r1, r1
   d861a:	4898      	ldr	r0, [pc, #608]	; (d887c <_Z6letterciiii+0xb2c>)
   d861c:	9500      	str	r5, [sp, #0]
   d861e:	f005 fd1b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8622:	f104 0110 	add.w	r1, r4, #16
   d8626:	463b      	mov	r3, r7
   d8628:	4632      	mov	r2, r6
   d862a:	b289      	uxth	r1, r1
   d862c:	4893      	ldr	r0, [pc, #588]	; (d887c <_Z6letterciiii+0xb2c>)
   d862e:	9500      	str	r5, [sp, #0]
   d8630:	f005 fd12 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8634:	f104 0112 	add.w	r1, r4, #18
   d8638:	b289      	uxth	r1, r1
   d863a:	9500      	str	r5, [sp, #0]
   d863c:	463b      	mov	r3, r7
   d863e:	4632      	mov	r2, r6
   d8640:	488e      	ldr	r0, [pc, #568]	; (d887c <_Z6letterciiii+0xb2c>)
   d8642:	f005 fd09 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8646:	f104 0114 	add.w	r1, r4, #20
   d864a:	e3d8      	b.n	d8dfe <_Z6letterciiii+0x10ae>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'C')
   d864c:	2843      	cmp	r0, #67	; 0x43
   d864e:	d121      	bne.n	d8694 <_Z6letterciiii+0x944>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8650:	b28c      	uxth	r4, r1
   d8652:	b2d6      	uxtb	r6, r2
   d8654:	b2df      	uxtb	r7, r3
   d8656:	b2ed      	uxtb	r5, r5
   d8658:	f104 010c 	add.w	r1, r4, #12
   d865c:	463b      	mov	r3, r7
   d865e:	4632      	mov	r2, r6
   d8660:	b289      	uxth	r1, r1
   d8662:	4886      	ldr	r0, [pc, #536]	; (d887c <_Z6letterciiii+0xb2c>)
   d8664:	9500      	str	r5, [sp, #0]
   d8666:	f005 fcf7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d866a:	f104 010d 	add.w	r1, r4, #13
   d866e:	463b      	mov	r3, r7
   d8670:	4632      	mov	r2, r6
   d8672:	b289      	uxth	r1, r1
   d8674:	4881      	ldr	r0, [pc, #516]	; (d887c <_Z6letterciiii+0xb2c>)
   d8676:	9500      	str	r5, [sp, #0]
   d8678:	f005 fcee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d867c:	f104 010e 	add.w	r1, r4, #14
   d8680:	b289      	uxth	r1, r1
   d8682:	9500      	str	r5, [sp, #0]
   d8684:	463b      	mov	r3, r7
   d8686:	4632      	mov	r2, r6
   d8688:	487c      	ldr	r0, [pc, #496]	; (d887c <_Z6letterciiii+0xb2c>)
   d868a:	f005 fce5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d868e:	f104 0110 	add.w	r1, r4, #16
   d8692:	e160      	b.n	d8956 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'D')
   d8694:	2844      	cmp	r0, #68	; 0x44
   d8696:	d12a      	bne.n	d86ee <_Z6letterciiii+0x99e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8698:	b28c      	uxth	r4, r1
   d869a:	b2d6      	uxtb	r6, r2
   d869c:	b2df      	uxtb	r7, r3
   d869e:	b2ed      	uxtb	r5, r5
   d86a0:	f104 010b 	add.w	r1, r4, #11
   d86a4:	463b      	mov	r3, r7
   d86a6:	4632      	mov	r2, r6
   d86a8:	b289      	uxth	r1, r1
   d86aa:	4874      	ldr	r0, [pc, #464]	; (d887c <_Z6letterciiii+0xb2c>)
   d86ac:	9500      	str	r5, [sp, #0]
   d86ae:	f005 fcd3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d86b2:	f104 010c 	add.w	r1, r4, #12
   d86b6:	463b      	mov	r3, r7
   d86b8:	4632      	mov	r2, r6
   d86ba:	b289      	uxth	r1, r1
   d86bc:	486f      	ldr	r0, [pc, #444]	; (d887c <_Z6letterciiii+0xb2c>)
   d86be:	9500      	str	r5, [sp, #0]
   d86c0:	f005 fcca 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d86c4:	f104 010d 	add.w	r1, r4, #13
   d86c8:	463b      	mov	r3, r7
   d86ca:	4632      	mov	r2, r6
   d86cc:	b289      	uxth	r1, r1
   d86ce:	486b      	ldr	r0, [pc, #428]	; (d887c <_Z6letterciiii+0xb2c>)
   d86d0:	9500      	str	r5, [sp, #0]
   d86d2:	f005 fcc1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d86d6:	f104 010e 	add.w	r1, r4, #14
   d86da:	b289      	uxth	r1, r1
   d86dc:	9500      	str	r5, [sp, #0]
   d86de:	463b      	mov	r3, r7
   d86e0:	4632      	mov	r2, r6
   d86e2:	4866      	ldr	r0, [pc, #408]	; (d887c <_Z6letterciiii+0xb2c>)
   d86e4:	f005 fcb8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d86e8:	f104 010f 	add.w	r1, r4, #15
   d86ec:	e29d      	b.n	d8c2a <_Z6letterciiii+0xeda>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'E')
   d86ee:	2845      	cmp	r0, #69	; 0x45
   d86f0:	d13c      	bne.n	d876c <_Z6letterciiii+0xa1c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d86f2:	b28c      	uxth	r4, r1
   d86f4:	b2d6      	uxtb	r6, r2
   d86f6:	b2df      	uxtb	r7, r3
   d86f8:	b2ed      	uxtb	r5, r5
   d86fa:	f104 010b 	add.w	r1, r4, #11
   d86fe:	463b      	mov	r3, r7
   d8700:	4632      	mov	r2, r6
   d8702:	b289      	uxth	r1, r1
   d8704:	485d      	ldr	r0, [pc, #372]	; (d887c <_Z6letterciiii+0xb2c>)
   d8706:	9500      	str	r5, [sp, #0]
   d8708:	f005 fca6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d870c:	f104 010c 	add.w	r1, r4, #12
   d8710:	463b      	mov	r3, r7
   d8712:	4632      	mov	r2, r6
   d8714:	b289      	uxth	r1, r1
   d8716:	4859      	ldr	r0, [pc, #356]	; (d887c <_Z6letterciiii+0xb2c>)
   d8718:	9500      	str	r5, [sp, #0]
   d871a:	f005 fc9d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d871e:	f104 010d 	add.w	r1, r4, #13
   d8722:	463b      	mov	r3, r7
   d8724:	4632      	mov	r2, r6
   d8726:	b289      	uxth	r1, r1
   d8728:	4854      	ldr	r0, [pc, #336]	; (d887c <_Z6letterciiii+0xb2c>)
   d872a:	9500      	str	r5, [sp, #0]
   d872c:	f005 fc94 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8730:	f104 010e 	add.w	r1, r4, #14
   d8734:	463b      	mov	r3, r7
   d8736:	4632      	mov	r2, r6
   d8738:	b289      	uxth	r1, r1
   d873a:	4850      	ldr	r0, [pc, #320]	; (d887c <_Z6letterciiii+0xb2c>)
   d873c:	9500      	str	r5, [sp, #0]
   d873e:	f005 fc8b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8742:	f104 010f 	add.w	r1, r4, #15
   d8746:	463b      	mov	r3, r7
   d8748:	4632      	mov	r2, r6
   d874a:	b289      	uxth	r1, r1
   d874c:	484b      	ldr	r0, [pc, #300]	; (d887c <_Z6letterciiii+0xb2c>)
   d874e:	9500      	str	r5, [sp, #0]
   d8750:	f005 fc82 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8754:	f104 0110 	add.w	r1, r4, #16
   d8758:	b289      	uxth	r1, r1
   d875a:	9500      	str	r5, [sp, #0]
   d875c:	463b      	mov	r3, r7
   d875e:	4632      	mov	r2, r6
   d8760:	4846      	ldr	r0, [pc, #280]	; (d887c <_Z6letterciiii+0xb2c>)
   d8762:	f005 fc79 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8766:	f104 0112 	add.w	r1, r4, #18
   d876a:	e0f4      	b.n	d8956 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'F')
   d876c:	2846      	cmp	r0, #70	; 0x46
   d876e:	d13d      	bne.n	d87ec <_Z6letterciiii+0xa9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8770:	b28c      	uxth	r4, r1
   d8772:	b2d6      	uxtb	r6, r2
   d8774:	b2df      	uxtb	r7, r3
   d8776:	b2ed      	uxtb	r5, r5
   d8778:	f104 010b 	add.w	r1, r4, #11
   d877c:	463b      	mov	r3, r7
   d877e:	4632      	mov	r2, r6
   d8780:	b289      	uxth	r1, r1
   d8782:	483e      	ldr	r0, [pc, #248]	; (d887c <_Z6letterciiii+0xb2c>)
   d8784:	9500      	str	r5, [sp, #0]
   d8786:	f005 fc67 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d878a:	f104 010c 	add.w	r1, r4, #12
   d878e:	463b      	mov	r3, r7
   d8790:	4632      	mov	r2, r6
   d8792:	b289      	uxth	r1, r1
   d8794:	4839      	ldr	r0, [pc, #228]	; (d887c <_Z6letterciiii+0xb2c>)
   d8796:	9500      	str	r5, [sp, #0]
   d8798:	f005 fc5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d879c:	f104 010d 	add.w	r1, r4, #13
   d87a0:	463b      	mov	r3, r7
   d87a2:	4632      	mov	r2, r6
   d87a4:	b289      	uxth	r1, r1
   d87a6:	4835      	ldr	r0, [pc, #212]	; (d887c <_Z6letterciiii+0xb2c>)
   d87a8:	9500      	str	r5, [sp, #0]
   d87aa:	f005 fc55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d87ae:	f104 010e 	add.w	r1, r4, #14
   d87b2:	b289      	uxth	r1, r1
   d87b4:	9500      	str	r5, [sp, #0]
   d87b6:	463b      	mov	r3, r7
   d87b8:	4632      	mov	r2, r6
   d87ba:	4830      	ldr	r0, [pc, #192]	; (d887c <_Z6letterciiii+0xb2c>)
   d87bc:	f005 fc4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d87c0:	f104 010f 	add.w	r1, r4, #15
   d87c4:	463b      	mov	r3, r7
   d87c6:	4632      	mov	r2, r6
   d87c8:	b289      	uxth	r1, r1
   d87ca:	482c      	ldr	r0, [pc, #176]	; (d887c <_Z6letterciiii+0xb2c>)
   d87cc:	9500      	str	r5, [sp, #0]
   d87ce:	f005 fc43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d87d2:	f104 0110 	add.w	r1, r4, #16
   d87d6:	b289      	uxth	r1, r1
   d87d8:	9500      	str	r5, [sp, #0]
   d87da:	463b      	mov	r3, r7
   d87dc:	4632      	mov	r2, r6
   d87de:	4827      	ldr	r0, [pc, #156]	; (d887c <_Z6letterciiii+0xb2c>)
   d87e0:	f005 fc3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d87e4:	f104 0112 	add.w	r1, r4, #18
   d87e8:	f000 bcc5 	b.w	d9176 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'G')
   d87ec:	2847      	cmp	r0, #71	; 0x47
   d87ee:	d147      	bne.n	d8880 <_Z6letterciiii+0xb30>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d87f0:	b28c      	uxth	r4, r1
   d87f2:	b2d6      	uxtb	r6, r2
   d87f4:	b2df      	uxtb	r7, r3
   d87f6:	b2ed      	uxtb	r5, r5
   d87f8:	f104 010b 	add.w	r1, r4, #11
   d87fc:	463b      	mov	r3, r7
   d87fe:	4632      	mov	r2, r6
   d8800:	b289      	uxth	r1, r1
   d8802:	481e      	ldr	r0, [pc, #120]	; (d887c <_Z6letterciiii+0xb2c>)
   d8804:	9500      	str	r5, [sp, #0]
   d8806:	f005 fc27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d880a:	f104 010c 	add.w	r1, r4, #12
   d880e:	463b      	mov	r3, r7
   d8810:	4632      	mov	r2, r6
   d8812:	b289      	uxth	r1, r1
   d8814:	4819      	ldr	r0, [pc, #100]	; (d887c <_Z6letterciiii+0xb2c>)
   d8816:	9500      	str	r5, [sp, #0]
   d8818:	f005 fc1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d881c:	f104 010d 	add.w	r1, r4, #13
   d8820:	463b      	mov	r3, r7
   d8822:	4632      	mov	r2, r6
   d8824:	b289      	uxth	r1, r1
   d8826:	4815      	ldr	r0, [pc, #84]	; (d887c <_Z6letterciiii+0xb2c>)
   d8828:	9500      	str	r5, [sp, #0]
   d882a:	f005 fc15 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d882e:	f104 010e 	add.w	r1, r4, #14
   d8832:	463b      	mov	r3, r7
   d8834:	4632      	mov	r2, r6
   d8836:	b289      	uxth	r1, r1
   d8838:	4810      	ldr	r0, [pc, #64]	; (d887c <_Z6letterciiii+0xb2c>)
   d883a:	9500      	str	r5, [sp, #0]
   d883c:	f005 fc0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8840:	f104 010f 	add.w	r1, r4, #15
   d8844:	463b      	mov	r3, r7
   d8846:	4632      	mov	r2, r6
   d8848:	b289      	uxth	r1, r1
   d884a:	480c      	ldr	r0, [pc, #48]	; (d887c <_Z6letterciiii+0xb2c>)
   d884c:	9500      	str	r5, [sp, #0]
   d884e:	f005 fc03 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8852:	f104 0110 	add.w	r1, r4, #16
   d8856:	463b      	mov	r3, r7
   d8858:	4632      	mov	r2, r6
   d885a:	b289      	uxth	r1, r1
   d885c:	4807      	ldr	r0, [pc, #28]	; (d887c <_Z6letterciiii+0xb2c>)
   d885e:	9500      	str	r5, [sp, #0]
   d8860:	f005 fbfa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8864:	f104 0114 	add.w	r1, r4, #20
   d8868:	b289      	uxth	r1, r1
   d886a:	9500      	str	r5, [sp, #0]
   d886c:	463b      	mov	r3, r7
   d886e:	4632      	mov	r2, r6
   d8870:	4802      	ldr	r0, [pc, #8]	; (d887c <_Z6letterciiii+0xb2c>)
   d8872:	f005 fbf1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8876:	f104 011b 	add.w	r1, r4, #27
   d887a:	e309      	b.n	d8e90 <_Z6letterciiii+0x1140>
   d887c:	2003e328 	.word	0x2003e328
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'H')
   d8880:	2848      	cmp	r0, #72	; 0x48
   d8882:	d133      	bne.n	d88ec <_Z6letterciiii+0xb9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8884:	b28c      	uxth	r4, r1
   d8886:	b2d6      	uxtb	r6, r2
   d8888:	b2df      	uxtb	r7, r3
   d888a:	b2ed      	uxtb	r5, r5
   d888c:	f104 010b 	add.w	r1, r4, #11
   d8890:	463b      	mov	r3, r7
   d8892:	4632      	mov	r2, r6
   d8894:	b289      	uxth	r1, r1
   d8896:	48ae      	ldr	r0, [pc, #696]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8898:	9500      	str	r5, [sp, #0]
   d889a:	f005 fbdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d889e:	f104 010c 	add.w	r1, r4, #12
   d88a2:	463b      	mov	r3, r7
   d88a4:	4632      	mov	r2, r6
   d88a6:	b289      	uxth	r1, r1
   d88a8:	48a9      	ldr	r0, [pc, #676]	; (d8b50 <_Z6letterciiii+0xe00>)
   d88aa:	9500      	str	r5, [sp, #0]
   d88ac:	f005 fbd4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d88b0:	f104 010d 	add.w	r1, r4, #13
   d88b4:	463b      	mov	r3, r7
   d88b6:	4632      	mov	r2, r6
   d88b8:	b289      	uxth	r1, r1
   d88ba:	48a5      	ldr	r0, [pc, #660]	; (d8b50 <_Z6letterciiii+0xe00>)
   d88bc:	9500      	str	r5, [sp, #0]
   d88be:	f005 fbcb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d88c2:	f104 010e 	add.w	r1, r4, #14
   d88c6:	b289      	uxth	r1, r1
   d88c8:	9500      	str	r5, [sp, #0]
   d88ca:	463b      	mov	r3, r7
   d88cc:	4632      	mov	r2, r6
   d88ce:	48a0      	ldr	r0, [pc, #640]	; (d8b50 <_Z6letterciiii+0xe00>)
   d88d0:	f005 fbc2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d88d4:	f104 010f 	add.w	r1, r4, #15
   d88d8:	b289      	uxth	r1, r1
   d88da:	9500      	str	r5, [sp, #0]
   d88dc:	463b      	mov	r3, r7
   d88de:	4632      	mov	r2, r6
   d88e0:	489b      	ldr	r0, [pc, #620]	; (d8b50 <_Z6letterciiii+0xe00>)
   d88e2:	f005 fbb9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d88e6:	f104 0112 	add.w	r1, r4, #18
   d88ea:	e346      	b.n	d8f7a <_Z6letterciiii+0x122a>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'I')
   d88ec:	2849      	cmp	r0, #73	; 0x49
   d88ee:	d145      	bne.n	d897c <_Z6letterciiii+0xc2c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d88f0:	b28c      	uxth	r4, r1
   d88f2:	b2d6      	uxtb	r6, r2
   d88f4:	b2df      	uxtb	r7, r3
   d88f6:	b2ed      	uxtb	r5, r5
   d88f8:	f104 010b 	add.w	r1, r4, #11
   d88fc:	463b      	mov	r3, r7
   d88fe:	4632      	mov	r2, r6
   d8900:	b289      	uxth	r1, r1
   d8902:	4893      	ldr	r0, [pc, #588]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8904:	9500      	str	r5, [sp, #0]
   d8906:	f005 fba7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d890a:	f104 010f 	add.w	r1, r4, #15
   d890e:	463b      	mov	r3, r7
   d8910:	4632      	mov	r2, r6
   d8912:	b289      	uxth	r1, r1
   d8914:	488e      	ldr	r0, [pc, #568]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8916:	9500      	str	r5, [sp, #0]
   d8918:	f005 fb9e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d891c:	f104 0110 	add.w	r1, r4, #16
   d8920:	463b      	mov	r3, r7
   d8922:	4632      	mov	r2, r6
   d8924:	b289      	uxth	r1, r1
   d8926:	488a      	ldr	r0, [pc, #552]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8928:	9500      	str	r5, [sp, #0]
   d892a:	f005 fb95 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d892e:	f104 0111 	add.w	r1, r4, #17
   d8932:	463b      	mov	r3, r7
   d8934:	4632      	mov	r2, r6
   d8936:	b289      	uxth	r1, r1
   d8938:	4885      	ldr	r0, [pc, #532]	; (d8b50 <_Z6letterciiii+0xe00>)
   d893a:	9500      	str	r5, [sp, #0]
   d893c:	f005 fb8c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8940:	f104 0112 	add.w	r1, r4, #18
   d8944:	b289      	uxth	r1, r1
   d8946:	9500      	str	r5, [sp, #0]
   d8948:	463b      	mov	r3, r7
   d894a:	4632      	mov	r2, r6
   d894c:	4880      	ldr	r0, [pc, #512]	; (d8b50 <_Z6letterciiii+0xe00>)
   d894e:	f005 fb83 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8952:	f104 0113 	add.w	r1, r4, #19
   d8956:	463b      	mov	r3, r7
   d8958:	4632      	mov	r2, r6
   d895a:	b289      	uxth	r1, r1
   d895c:	487c      	ldr	r0, [pc, #496]	; (d8b50 <_Z6letterciiii+0xe00>)
   d895e:	9500      	str	r5, [sp, #0]
   d8960:	f005 fb7a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8964:	f104 0114 	add.w	r1, r4, #20
   d8968:	b289      	uxth	r1, r1
   d896a:	9500      	str	r5, [sp, #0]
   d896c:	463b      	mov	r3, r7
   d896e:	4632      	mov	r2, r6
   d8970:	4877      	ldr	r0, [pc, #476]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8972:	f005 fb71 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8976:	f104 011b 	add.w	r1, r4, #27
   d897a:	e3fc      	b.n	d9176 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'J')
   d897c:	284a      	cmp	r0, #74	; 0x4a
   d897e:	d118      	bne.n	d89b2 <_Z6letterciiii+0xc62>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8980:	b28c      	uxth	r4, r1
   d8982:	b2d6      	uxtb	r6, r2
   d8984:	b2df      	uxtb	r7, r3
   d8986:	b2ed      	uxtb	r5, r5
   d8988:	f104 010c 	add.w	r1, r4, #12
   d898c:	463b      	mov	r3, r7
   d898e:	4632      	mov	r2, r6
   d8990:	b289      	uxth	r1, r1
   d8992:	486f      	ldr	r0, [pc, #444]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8994:	9500      	str	r5, [sp, #0]
   d8996:	f005 fb5f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d899a:	f104 010f 	add.w	r1, r4, #15
   d899e:	b289      	uxth	r1, r1
   d89a0:	9500      	str	r5, [sp, #0]
   d89a2:	463b      	mov	r3, r7
   d89a4:	4632      	mov	r2, r6
   d89a6:	486a      	ldr	r0, [pc, #424]	; (d8b50 <_Z6letterciiii+0xe00>)
   d89a8:	f005 fb56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d89ac:	f104 0110 	add.w	r1, r4, #16
   d89b0:	e310      	b.n	d8fd4 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'K')
   d89b2:	284b      	cmp	r0, #75	; 0x4b
   d89b4:	d118      	bne.n	d89e8 <_Z6letterciiii+0xc98>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d89b6:	b28c      	uxth	r4, r1
   d89b8:	b2d6      	uxtb	r6, r2
   d89ba:	b2df      	uxtb	r7, r3
   d89bc:	b2ed      	uxtb	r5, r5
   d89be:	f104 010b 	add.w	r1, r4, #11
   d89c2:	463b      	mov	r3, r7
   d89c4:	4632      	mov	r2, r6
   d89c6:	b289      	uxth	r1, r1
   d89c8:	4861      	ldr	r0, [pc, #388]	; (d8b50 <_Z6letterciiii+0xe00>)
   d89ca:	9500      	str	r5, [sp, #0]
   d89cc:	f005 fb44 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d89d0:	f104 010c 	add.w	r1, r4, #12
   d89d4:	b289      	uxth	r1, r1
   d89d6:	9500      	str	r5, [sp, #0]
   d89d8:	463b      	mov	r3, r7
   d89da:	4632      	mov	r2, r6
   d89dc:	485c      	ldr	r0, [pc, #368]	; (d8b50 <_Z6letterciiii+0xe00>)
   d89de:	f005 fb3b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d89e2:	f104 010d 	add.w	r1, r4, #13
   d89e6:	e390      	b.n	d910a <_Z6letterciiii+0x13ba>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'L')
   d89e8:	284c      	cmp	r0, #76	; 0x4c
   d89ea:	d13c      	bne.n	d8a66 <_Z6letterciiii+0xd16>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d89ec:	b28c      	uxth	r4, r1
   d89ee:	b2d6      	uxtb	r6, r2
   d89f0:	b2df      	uxtb	r7, r3
   d89f2:	b2ed      	uxtb	r5, r5
   d89f4:	f104 010b 	add.w	r1, r4, #11
   d89f8:	463b      	mov	r3, r7
   d89fa:	4632      	mov	r2, r6
   d89fc:	b289      	uxth	r1, r1
   d89fe:	4854      	ldr	r0, [pc, #336]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a00:	9500      	str	r5, [sp, #0]
   d8a02:	f005 fb29 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8a06:	f104 010c 	add.w	r1, r4, #12
   d8a0a:	463b      	mov	r3, r7
   d8a0c:	4632      	mov	r2, r6
   d8a0e:	b289      	uxth	r1, r1
   d8a10:	484f      	ldr	r0, [pc, #316]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a12:	9500      	str	r5, [sp, #0]
   d8a14:	f005 fb20 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8a18:	f104 010d 	add.w	r1, r4, #13
   d8a1c:	463b      	mov	r3, r7
   d8a1e:	4632      	mov	r2, r6
   d8a20:	b289      	uxth	r1, r1
   d8a22:	484b      	ldr	r0, [pc, #300]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a24:	9500      	str	r5, [sp, #0]
   d8a26:	f005 fb17 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8a2a:	f104 010e 	add.w	r1, r4, #14
   d8a2e:	463b      	mov	r3, r7
   d8a30:	4632      	mov	r2, r6
   d8a32:	b289      	uxth	r1, r1
   d8a34:	4846      	ldr	r0, [pc, #280]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a36:	9500      	str	r5, [sp, #0]
   d8a38:	f005 fb0e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8a3c:	f104 010f 	add.w	r1, r4, #15
   d8a40:	463b      	mov	r3, r7
   d8a42:	4632      	mov	r2, r6
   d8a44:	b289      	uxth	r1, r1
   d8a46:	4842      	ldr	r0, [pc, #264]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a48:	9500      	str	r5, [sp, #0]
   d8a4a:	f005 fb05 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8a4e:	f104 0114 	add.w	r1, r4, #20
   d8a52:	b289      	uxth	r1, r1
   d8a54:	9500      	str	r5, [sp, #0]
   d8a56:	463b      	mov	r3, r7
   d8a58:	4632      	mov	r2, r6
   d8a5a:	483d      	ldr	r0, [pc, #244]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a5c:	f005 fafc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8a60:	f104 011b 	add.w	r1, r4, #27
   d8a64:	e1dd      	b.n	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'M')
   d8a66:	284d      	cmp	r0, #77	; 0x4d
   d8a68:	d174      	bne.n	d8b54 <_Z6letterciiii+0xe04>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d8a6a:	b28c      	uxth	r4, r1
   d8a6c:	b2d6      	uxtb	r6, r2
   d8a6e:	b2df      	uxtb	r7, r3
   d8a70:	b2ed      	uxtb	r5, r5
   d8a72:	f104 0111 	add.w	r1, r4, #17
   d8a76:	463b      	mov	r3, r7
   d8a78:	4632      	mov	r2, r6
   d8a7a:	b289      	uxth	r1, r1
   d8a7c:	4834      	ldr	r0, [pc, #208]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a7e:	9500      	str	r5, [sp, #0]
   d8a80:	f005 faea 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d8a84:	f104 010b 	add.w	r1, r4, #11
   d8a88:	463b      	mov	r3, r7
   d8a8a:	4632      	mov	r2, r6
   d8a8c:	b289      	uxth	r1, r1
   d8a8e:	4830      	ldr	r0, [pc, #192]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8a90:	9500      	str	r5, [sp, #0]
   d8a92:	f005 fae1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8a96:	f104 010c 	add.w	r1, r4, #12
   d8a9a:	463b      	mov	r3, r7
   d8a9c:	4632      	mov	r2, r6
   d8a9e:	b289      	uxth	r1, r1
   d8aa0:	482b      	ldr	r0, [pc, #172]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8aa2:	9500      	str	r5, [sp, #0]
   d8aa4:	f005 fad8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8aa8:	f104 010d 	add.w	r1, r4, #13
   d8aac:	463b      	mov	r3, r7
   d8aae:	4632      	mov	r2, r6
   d8ab0:	b289      	uxth	r1, r1
   d8ab2:	4827      	ldr	r0, [pc, #156]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8ab4:	9500      	str	r5, [sp, #0]
   d8ab6:	f005 facf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8aba:	f104 010e 	add.w	r1, r4, #14
   d8abe:	463b      	mov	r3, r7
   d8ac0:	4632      	mov	r2, r6
   d8ac2:	b289      	uxth	r1, r1
   d8ac4:	4822      	ldr	r0, [pc, #136]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8ac6:	9500      	str	r5, [sp, #0]
   d8ac8:	f005 fac6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8acc:	f104 010f 	add.w	r1, r4, #15
   d8ad0:	463b      	mov	r3, r7
   d8ad2:	4632      	mov	r2, r6
   d8ad4:	b289      	uxth	r1, r1
   d8ad6:	481e      	ldr	r0, [pc, #120]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8ad8:	9500      	str	r5, [sp, #0]
   d8ada:	f005 fabd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8ade:	f104 011d 	add.w	r1, r4, #29
   d8ae2:	463b      	mov	r3, r7
   d8ae4:	4632      	mov	r2, r6
   d8ae6:	b289      	uxth	r1, r1
   d8ae8:	4819      	ldr	r0, [pc, #100]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8aea:	9500      	str	r5, [sp, #0]
   d8aec:	f005 fab4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,R,G,B);
   d8af0:	f104 0121 	add.w	r1, r4, #33	; 0x21
   d8af4:	463b      	mov	r3, r7
   d8af6:	4632      	mov	r2, r6
   d8af8:	b289      	uxth	r1, r1
   d8afa:	4815      	ldr	r0, [pc, #84]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8afc:	9500      	str	r5, [sp, #0]
   d8afe:	f005 faab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d8b02:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d8b06:	463b      	mov	r3, r7
   d8b08:	4632      	mov	r2, r6
   d8b0a:	b289      	uxth	r1, r1
   d8b0c:	4810      	ldr	r0, [pc, #64]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8b0e:	9500      	str	r5, [sp, #0]
   d8b10:	f005 faa2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d8b14:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d8b18:	b289      	uxth	r1, r1
   d8b1a:	9500      	str	r5, [sp, #0]
   d8b1c:	463b      	mov	r3, r7
   d8b1e:	4632      	mov	r2, r6
   d8b20:	480b      	ldr	r0, [pc, #44]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8b22:	f005 fa99 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8b26:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8b2a:	463b      	mov	r3, r7
   d8b2c:	4632      	mov	r2, r6
   d8b2e:	b289      	uxth	r1, r1
   d8b30:	4807      	ldr	r0, [pc, #28]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8b32:	9500      	str	r5, [sp, #0]
   d8b34:	f005 fa90 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8b38:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8b3c:	b289      	uxth	r1, r1
   d8b3e:	9500      	str	r5, [sp, #0]
   d8b40:	463b      	mov	r3, r7
   d8b42:	4632      	mov	r2, r6
   d8b44:	4802      	ldr	r0, [pc, #8]	; (d8b50 <_Z6letterciiii+0xe00>)
   d8b46:	f005 fa87 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d8b4a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d8b4e:	e168      	b.n	d8e22 <_Z6letterciiii+0x10d2>
   d8b50:	2003e328 	.word	0x2003e328
    }
    if(ltr == 'N')
   d8b54:	284e      	cmp	r0, #78	; 0x4e
   d8b56:	d14e      	bne.n	d8bf6 <_Z6letterciiii+0xea6>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d8b58:	b28c      	uxth	r4, r1
   d8b5a:	b2d6      	uxtb	r6, r2
   d8b5c:	b2df      	uxtb	r7, r3
   d8b5e:	b2ed      	uxtb	r5, r5
   d8b60:	f104 0111 	add.w	r1, r4, #17
   d8b64:	463b      	mov	r3, r7
   d8b66:	4632      	mov	r2, r6
   d8b68:	b289      	uxth	r1, r1
   d8b6a:	48b2      	ldr	r0, [pc, #712]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8b6c:	9500      	str	r5, [sp, #0]
   d8b6e:	f005 fa73 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d8b72:	f104 010b 	add.w	r1, r4, #11
   d8b76:	463b      	mov	r3, r7
   d8b78:	4632      	mov	r2, r6
   d8b7a:	b289      	uxth	r1, r1
   d8b7c:	48ad      	ldr	r0, [pc, #692]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8b7e:	9500      	str	r5, [sp, #0]
   d8b80:	f005 fa6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8b84:	f104 010c 	add.w	r1, r4, #12
   d8b88:	463b      	mov	r3, r7
   d8b8a:	4632      	mov	r2, r6
   d8b8c:	b289      	uxth	r1, r1
   d8b8e:	48a9      	ldr	r0, [pc, #676]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8b90:	9500      	str	r5, [sp, #0]
   d8b92:	f005 fa61 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8b96:	f104 010d 	add.w	r1, r4, #13
   d8b9a:	463b      	mov	r3, r7
   d8b9c:	4632      	mov	r2, r6
   d8b9e:	b289      	uxth	r1, r1
   d8ba0:	48a4      	ldr	r0, [pc, #656]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8ba2:	9500      	str	r5, [sp, #0]
   d8ba4:	f005 fa58 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8ba8:	f104 010e 	add.w	r1, r4, #14
   d8bac:	463b      	mov	r3, r7
   d8bae:	4632      	mov	r2, r6
   d8bb0:	b289      	uxth	r1, r1
   d8bb2:	48a0      	ldr	r0, [pc, #640]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8bb4:	9500      	str	r5, [sp, #0]
   d8bb6:	f005 fa4f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8bba:	f104 010f 	add.w	r1, r4, #15
   d8bbe:	463b      	mov	r3, r7
   d8bc0:	4632      	mov	r2, r6
   d8bc2:	b289      	uxth	r1, r1
   d8bc4:	489b      	ldr	r0, [pc, #620]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8bc6:	9500      	str	r5, [sp, #0]
   d8bc8:	f005 fa46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8bcc:	f104 011d 	add.w	r1, r4, #29
   d8bd0:	463b      	mov	r3, r7
   d8bd2:	4632      	mov	r2, r6
   d8bd4:	b289      	uxth	r1, r1
   d8bd6:	4897      	ldr	r0, [pc, #604]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8bd8:	9500      	str	r5, [sp, #0]
   d8bda:	f005 fa3d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+35,R,G,B);
   d8bde:	f104 0123 	add.w	r1, r4, #35	; 0x23
   d8be2:	b289      	uxth	r1, r1
   d8be4:	9500      	str	r5, [sp, #0]
   d8be6:	463b      	mov	r3, r7
   d8be8:	4632      	mov	r2, r6
   d8bea:	4892      	ldr	r0, [pc, #584]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8bec:	f005 fa34 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d8bf0:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d8bf4:	e251      	b.n	d909a <_Z6letterciiii+0x134a>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+45,R,G,B);
        strip.setPixelColor(pix+46,R,G,B);
        strip.setPixelColor(pix+47,R,G,B);
    }
    if(ltr == 'O')
   d8bf6:	284f      	cmp	r0, #79	; 0x4f
   d8bf8:	d13c      	bne.n	d8c74 <_Z6letterciiii+0xf24>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8bfa:	b28c      	uxth	r4, r1
   d8bfc:	b2d6      	uxtb	r6, r2
   d8bfe:	b2df      	uxtb	r7, r3
   d8c00:	b2ed      	uxtb	r5, r5
   d8c02:	f104 010c 	add.w	r1, r4, #12
   d8c06:	463b      	mov	r3, r7
   d8c08:	4632      	mov	r2, r6
   d8c0a:	b289      	uxth	r1, r1
   d8c0c:	4889      	ldr	r0, [pc, #548]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c0e:	9500      	str	r5, [sp, #0]
   d8c10:	f005 fa22 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8c14:	f104 010d 	add.w	r1, r4, #13
   d8c18:	b289      	uxth	r1, r1
   d8c1a:	9500      	str	r5, [sp, #0]
   d8c1c:	463b      	mov	r3, r7
   d8c1e:	4632      	mov	r2, r6
   d8c20:	4884      	ldr	r0, [pc, #528]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c22:	f005 fa19 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8c26:	f104 010e 	add.w	r1, r4, #14
   d8c2a:	b289      	uxth	r1, r1
   d8c2c:	9500      	str	r5, [sp, #0]
   d8c2e:	463b      	mov	r3, r7
   d8c30:	4632      	mov	r2, r6
   d8c32:	4880      	ldr	r0, [pc, #512]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c34:	f005 fa10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8c38:	f104 0110 	add.w	r1, r4, #16
   d8c3c:	b289      	uxth	r1, r1
   d8c3e:	9500      	str	r5, [sp, #0]
   d8c40:	463b      	mov	r3, r7
   d8c42:	4632      	mov	r2, r6
   d8c44:	487b      	ldr	r0, [pc, #492]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c46:	f005 fa07 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8c4a:	f104 0114 	add.w	r1, r4, #20
   d8c4e:	b289      	uxth	r1, r1
   d8c50:	9500      	str	r5, [sp, #0]
   d8c52:	463b      	mov	r3, r7
   d8c54:	4632      	mov	r2, r6
   d8c56:	4877      	ldr	r0, [pc, #476]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c58:	f005 f9fe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8c5c:	f104 011c 	add.w	r1, r4, #28
   d8c60:	b289      	uxth	r1, r1
   d8c62:	9500      	str	r5, [sp, #0]
   d8c64:	463b      	mov	r3, r7
   d8c66:	4632      	mov	r2, r6
   d8c68:	4872      	ldr	r0, [pc, #456]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c6a:	f005 f9f5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8c6e:	f104 011d 	add.w	r1, r4, #29
   d8c72:	e0cd      	b.n	d8e10 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'P')
   d8c74:	2850      	cmp	r0, #80	; 0x50
   d8c76:	d13c      	bne.n	d8cf2 <_Z6letterciiii+0xfa2>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8c78:	b28c      	uxth	r4, r1
   d8c7a:	b2d6      	uxtb	r6, r2
   d8c7c:	b2df      	uxtb	r7, r3
   d8c7e:	b2ed      	uxtb	r5, r5
   d8c80:	f104 010b 	add.w	r1, r4, #11
   d8c84:	463b      	mov	r3, r7
   d8c86:	4632      	mov	r2, r6
   d8c88:	b289      	uxth	r1, r1
   d8c8a:	486a      	ldr	r0, [pc, #424]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c8c:	9500      	str	r5, [sp, #0]
   d8c8e:	f005 f9e3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8c92:	f104 010c 	add.w	r1, r4, #12
   d8c96:	463b      	mov	r3, r7
   d8c98:	4632      	mov	r2, r6
   d8c9a:	b289      	uxth	r1, r1
   d8c9c:	4865      	ldr	r0, [pc, #404]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8c9e:	9500      	str	r5, [sp, #0]
   d8ca0:	f005 f9da 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8ca4:	f104 010d 	add.w	r1, r4, #13
   d8ca8:	463b      	mov	r3, r7
   d8caa:	4632      	mov	r2, r6
   d8cac:	b289      	uxth	r1, r1
   d8cae:	4861      	ldr	r0, [pc, #388]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8cb0:	9500      	str	r5, [sp, #0]
   d8cb2:	f005 f9d1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8cb6:	f104 010e 	add.w	r1, r4, #14
   d8cba:	463b      	mov	r3, r7
   d8cbc:	4632      	mov	r2, r6
   d8cbe:	b289      	uxth	r1, r1
   d8cc0:	485c      	ldr	r0, [pc, #368]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8cc2:	9500      	str	r5, [sp, #0]
   d8cc4:	f005 f9c8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8cc8:	f104 010f 	add.w	r1, r4, #15
   d8ccc:	463b      	mov	r3, r7
   d8cce:	4632      	mov	r2, r6
   d8cd0:	b289      	uxth	r1, r1
   d8cd2:	4858      	ldr	r0, [pc, #352]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8cd4:	9500      	str	r5, [sp, #0]
   d8cd6:	f005 f9bf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8cda:	f104 0110 	add.w	r1, r4, #16
   d8cde:	b289      	uxth	r1, r1
   d8ce0:	9500      	str	r5, [sp, #0]
   d8ce2:	463b      	mov	r3, r7
   d8ce4:	4632      	mov	r2, r6
   d8ce6:	4853      	ldr	r0, [pc, #332]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8ce8:	f005 f9b6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8cec:	f104 0112 	add.w	r1, r4, #18
   d8cf0:	e182      	b.n	d8ff8 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Q')
   d8cf2:	2851      	cmp	r0, #81	; 0x51
   d8cf4:	d13c      	bne.n	d8d70 <_Z6letterciiii+0x1020>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8cf6:	b28c      	uxth	r4, r1
   d8cf8:	b2d6      	uxtb	r6, r2
   d8cfa:	b2df      	uxtb	r7, r3
   d8cfc:	b2ed      	uxtb	r5, r5
   d8cfe:	f104 010c 	add.w	r1, r4, #12
   d8d02:	463b      	mov	r3, r7
   d8d04:	4632      	mov	r2, r6
   d8d06:	b289      	uxth	r1, r1
   d8d08:	484a      	ldr	r0, [pc, #296]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d0a:	9500      	str	r5, [sp, #0]
   d8d0c:	f005 f9a4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8d10:	f104 010d 	add.w	r1, r4, #13
   d8d14:	463b      	mov	r3, r7
   d8d16:	4632      	mov	r2, r6
   d8d18:	b289      	uxth	r1, r1
   d8d1a:	4846      	ldr	r0, [pc, #280]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d1c:	9500      	str	r5, [sp, #0]
   d8d1e:	f005 f99b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8d22:	f104 010e 	add.w	r1, r4, #14
   d8d26:	463b      	mov	r3, r7
   d8d28:	4632      	mov	r2, r6
   d8d2a:	b289      	uxth	r1, r1
   d8d2c:	4841      	ldr	r0, [pc, #260]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d2e:	9500      	str	r5, [sp, #0]
   d8d30:	f005 f992 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8d34:	f104 010f 	add.w	r1, r4, #15
   d8d38:	463b      	mov	r3, r7
   d8d3a:	4632      	mov	r2, r6
   d8d3c:	b289      	uxth	r1, r1
   d8d3e:	483d      	ldr	r0, [pc, #244]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d40:	9500      	str	r5, [sp, #0]
   d8d42:	f005 f989 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8d46:	f104 0110 	add.w	r1, r4, #16
   d8d4a:	463b      	mov	r3, r7
   d8d4c:	4632      	mov	r2, r6
   d8d4e:	b289      	uxth	r1, r1
   d8d50:	4838      	ldr	r0, [pc, #224]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d52:	9500      	str	r5, [sp, #0]
   d8d54:	f005 f980 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8d58:	f104 0113 	add.w	r1, r4, #19
   d8d5c:	b289      	uxth	r1, r1
   d8d5e:	9500      	str	r5, [sp, #0]
   d8d60:	463b      	mov	r3, r7
   d8d62:	4632      	mov	r2, r6
   d8d64:	4833      	ldr	r0, [pc, #204]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d66:	f005 f977 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8d6a:	f104 011b 	add.w	r1, r4, #27
   d8d6e:	e143      	b.n	d8ff8 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'R')
   d8d70:	2852      	cmp	r0, #82	; 0x52
   d8d72:	d161      	bne.n	d8e38 <_Z6letterciiii+0x10e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8d74:	b28c      	uxth	r4, r1
   d8d76:	b2d6      	uxtb	r6, r2
   d8d78:	b2df      	uxtb	r7, r3
   d8d7a:	b2ed      	uxtb	r5, r5
   d8d7c:	f104 010b 	add.w	r1, r4, #11
   d8d80:	463b      	mov	r3, r7
   d8d82:	4632      	mov	r2, r6
   d8d84:	b289      	uxth	r1, r1
   d8d86:	482b      	ldr	r0, [pc, #172]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d88:	9500      	str	r5, [sp, #0]
   d8d8a:	f005 f965 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8d8e:	f104 010c 	add.w	r1, r4, #12
   d8d92:	463b      	mov	r3, r7
   d8d94:	4632      	mov	r2, r6
   d8d96:	b289      	uxth	r1, r1
   d8d98:	4826      	ldr	r0, [pc, #152]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8d9a:	9500      	str	r5, [sp, #0]
   d8d9c:	f005 f95c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8da0:	f104 010d 	add.w	r1, r4, #13
   d8da4:	463b      	mov	r3, r7
   d8da6:	4632      	mov	r2, r6
   d8da8:	b289      	uxth	r1, r1
   d8daa:	4822      	ldr	r0, [pc, #136]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8dac:	9500      	str	r5, [sp, #0]
   d8dae:	f005 f953 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8db2:	f104 010e 	add.w	r1, r4, #14
   d8db6:	463b      	mov	r3, r7
   d8db8:	4632      	mov	r2, r6
   d8dba:	b289      	uxth	r1, r1
   d8dbc:	481d      	ldr	r0, [pc, #116]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8dbe:	9500      	str	r5, [sp, #0]
   d8dc0:	f005 f94a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8dc4:	f104 010f 	add.w	r1, r4, #15
   d8dc8:	463b      	mov	r3, r7
   d8dca:	4632      	mov	r2, r6
   d8dcc:	b289      	uxth	r1, r1
   d8dce:	4819      	ldr	r0, [pc, #100]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8dd0:	9500      	str	r5, [sp, #0]
   d8dd2:	f005 f941 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8dd6:	f104 0110 	add.w	r1, r4, #16
   d8dda:	463b      	mov	r3, r7
   d8ddc:	4632      	mov	r2, r6
   d8dde:	b289      	uxth	r1, r1
   d8de0:	4814      	ldr	r0, [pc, #80]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8de2:	9500      	str	r5, [sp, #0]
   d8de4:	f005 f938 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8de8:	f104 0112 	add.w	r1, r4, #18
   d8dec:	b289      	uxth	r1, r1
   d8dee:	9500      	str	r5, [sp, #0]
   d8df0:	463b      	mov	r3, r7
   d8df2:	4632      	mov	r2, r6
   d8df4:	480f      	ldr	r0, [pc, #60]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8df6:	f005 f92f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8dfa:	f104 011b 	add.w	r1, r4, #27
   d8dfe:	b289      	uxth	r1, r1
   d8e00:	9500      	str	r5, [sp, #0]
   d8e02:	463b      	mov	r3, r7
   d8e04:	4632      	mov	r2, r6
   d8e06:	480b      	ldr	r0, [pc, #44]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8e08:	f005 f926 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8e0c:	f104 011c 	add.w	r1, r4, #28
   d8e10:	b289      	uxth	r1, r1
   d8e12:	9500      	str	r5, [sp, #0]
   d8e14:	463b      	mov	r3, r7
   d8e16:	4632      	mov	r2, r6
   d8e18:	4806      	ldr	r0, [pc, #24]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8e1a:	f005 f91d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d8e1e:	f104 011e 	add.w	r1, r4, #30
   d8e22:	9500      	str	r5, [sp, #0]
   d8e24:	463b      	mov	r3, r7
   d8e26:	4632      	mov	r2, r6
   d8e28:	b289      	uxth	r1, r1
   d8e2a:	4802      	ldr	r0, [pc, #8]	; (d8e34 <_Z6letterciiii+0x10e4>)
   d8e2c:	f005 f914 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d8e30:	e302      	b.n	d9438 <_Z6letterciiii+0x16e8>
   d8e32:	bf00      	nop
   d8e34:	2003e328 	.word	0x2003e328
    }
    if(ltr == 'S')
   d8e38:	2853      	cmp	r0, #83	; 0x53
   d8e3a:	d133      	bne.n	d8ea4 <_Z6letterciiii+0x1154>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8e3c:	b28c      	uxth	r4, r1
   d8e3e:	b2d6      	uxtb	r6, r2
   d8e40:	b2df      	uxtb	r7, r3
   d8e42:	b2ed      	uxtb	r5, r5
   d8e44:	f104 010b 	add.w	r1, r4, #11
   d8e48:	463b      	mov	r3, r7
   d8e4a:	4632      	mov	r2, r6
   d8e4c:	b289      	uxth	r1, r1
   d8e4e:	48a5      	ldr	r0, [pc, #660]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8e50:	9500      	str	r5, [sp, #0]
   d8e52:	f005 f901 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8e56:	f104 010e 	add.w	r1, r4, #14
   d8e5a:	463b      	mov	r3, r7
   d8e5c:	4632      	mov	r2, r6
   d8e5e:	b289      	uxth	r1, r1
   d8e60:	48a0      	ldr	r0, [pc, #640]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8e62:	9500      	str	r5, [sp, #0]
   d8e64:	f005 f8f8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8e68:	f104 0110 	add.w	r1, r4, #16
   d8e6c:	463b      	mov	r3, r7
   d8e6e:	4632      	mov	r2, r6
   d8e70:	b289      	uxth	r1, r1
   d8e72:	489c      	ldr	r0, [pc, #624]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8e74:	9500      	str	r5, [sp, #0]
   d8e76:	f005 f8ef 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8e7a:	f104 0112 	add.w	r1, r4, #18
   d8e7e:	b289      	uxth	r1, r1
   d8e80:	9500      	str	r5, [sp, #0]
   d8e82:	463b      	mov	r3, r7
   d8e84:	4632      	mov	r2, r6
   d8e86:	4897      	ldr	r0, [pc, #604]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8e88:	f005 f8e6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8e8c:	f104 0114 	add.w	r1, r4, #20
   d8e90:	b289      	uxth	r1, r1
   d8e92:	9500      	str	r5, [sp, #0]
   d8e94:	463b      	mov	r3, r7
   d8e96:	4632      	mov	r2, r6
   d8e98:	4892      	ldr	r0, [pc, #584]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8e9a:	f005 f8dd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8e9e:	f104 011c 	add.w	r1, r4, #28
   d8ea2:	e168      	b.n	d9176 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'T')
   d8ea4:	2854      	cmp	r0, #84	; 0x54
   d8ea6:	d133      	bne.n	d8f10 <_Z6letterciiii+0x11c0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d8ea8:	b28c      	uxth	r4, r1
   d8eaa:	b2d6      	uxtb	r6, r2
   d8eac:	b2df      	uxtb	r7, r3
   d8eae:	b2ed      	uxtb	r5, r5
   d8eb0:	f104 010f 	add.w	r1, r4, #15
   d8eb4:	463b      	mov	r3, r7
   d8eb6:	4632      	mov	r2, r6
   d8eb8:	b289      	uxth	r1, r1
   d8eba:	488a      	ldr	r0, [pc, #552]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8ebc:	9500      	str	r5, [sp, #0]
   d8ebe:	f005 f8cb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8ec2:	f104 0110 	add.w	r1, r4, #16
   d8ec6:	463b      	mov	r3, r7
   d8ec8:	4632      	mov	r2, r6
   d8eca:	b289      	uxth	r1, r1
   d8ecc:	4885      	ldr	r0, [pc, #532]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8ece:	9500      	str	r5, [sp, #0]
   d8ed0:	f005 f8c2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8ed4:	f104 0111 	add.w	r1, r4, #17
   d8ed8:	463b      	mov	r3, r7
   d8eda:	4632      	mov	r2, r6
   d8edc:	b289      	uxth	r1, r1
   d8ede:	4881      	ldr	r0, [pc, #516]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8ee0:	9500      	str	r5, [sp, #0]
   d8ee2:	f005 f8b9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8ee6:	f104 0112 	add.w	r1, r4, #18
   d8eea:	463b      	mov	r3, r7
   d8eec:	4632      	mov	r2, r6
   d8eee:	b289      	uxth	r1, r1
   d8ef0:	487c      	ldr	r0, [pc, #496]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8ef2:	9500      	str	r5, [sp, #0]
   d8ef4:	f005 f8b0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8ef8:	f104 0113 	add.w	r1, r4, #19
   d8efc:	b289      	uxth	r1, r1
   d8efe:	9500      	str	r5, [sp, #0]
   d8f00:	463b      	mov	r3, r7
   d8f02:	4632      	mov	r2, r6
   d8f04:	4877      	ldr	r0, [pc, #476]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f06:	f005 f8a7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8f0a:	f104 0114 	add.w	r1, r4, #20
   d8f0e:	e132      	b.n	d9176 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'U')
   d8f10:	2855      	cmp	r0, #85	; 0x55
   d8f12:	d13c      	bne.n	d8f8e <_Z6letterciiii+0x123e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8f14:	b28c      	uxth	r4, r1
   d8f16:	b2d6      	uxtb	r6, r2
   d8f18:	b2df      	uxtb	r7, r3
   d8f1a:	b2ed      	uxtb	r5, r5
   d8f1c:	f104 010b 	add.w	r1, r4, #11
   d8f20:	463b      	mov	r3, r7
   d8f22:	4632      	mov	r2, r6
   d8f24:	b289      	uxth	r1, r1
   d8f26:	486f      	ldr	r0, [pc, #444]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f28:	9500      	str	r5, [sp, #0]
   d8f2a:	f005 f895 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8f2e:	f104 010c 	add.w	r1, r4, #12
   d8f32:	463b      	mov	r3, r7
   d8f34:	4632      	mov	r2, r6
   d8f36:	b289      	uxth	r1, r1
   d8f38:	486a      	ldr	r0, [pc, #424]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f3a:	9500      	str	r5, [sp, #0]
   d8f3c:	f005 f88c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8f40:	f104 010d 	add.w	r1, r4, #13
   d8f44:	463b      	mov	r3, r7
   d8f46:	4632      	mov	r2, r6
   d8f48:	b289      	uxth	r1, r1
   d8f4a:	4866      	ldr	r0, [pc, #408]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f4c:	9500      	str	r5, [sp, #0]
   d8f4e:	f005 f883 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8f52:	f104 010e 	add.w	r1, r4, #14
   d8f56:	b289      	uxth	r1, r1
   d8f58:	9500      	str	r5, [sp, #0]
   d8f5a:	463b      	mov	r3, r7
   d8f5c:	4632      	mov	r2, r6
   d8f5e:	4861      	ldr	r0, [pc, #388]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f60:	f005 f87a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8f64:	f104 010f 	add.w	r1, r4, #15
   d8f68:	b289      	uxth	r1, r1
   d8f6a:	9500      	str	r5, [sp, #0]
   d8f6c:	463b      	mov	r3, r7
   d8f6e:	4632      	mov	r2, r6
   d8f70:	485c      	ldr	r0, [pc, #368]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f72:	f005 f871 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8f76:	f104 0114 	add.w	r1, r4, #20
   d8f7a:	b289      	uxth	r1, r1
   d8f7c:	9500      	str	r5, [sp, #0]
   d8f7e:	463b      	mov	r3, r7
   d8f80:	4632      	mov	r2, r6
   d8f82:	4858      	ldr	r0, [pc, #352]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8f84:	f005 f868 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8f88:	f104 011b 	add.w	r1, r4, #27
   d8f8c:	e02b      	b.n	d8fe6 <_Z6letterciiii+0x1296>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'V')
   d8f8e:	2856      	cmp	r0, #86	; 0x56
   d8f90:	d13c      	bne.n	d900c <_Z6letterciiii+0x12bc>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8f92:	b28c      	uxth	r4, r1
   d8f94:	b2d6      	uxtb	r6, r2
   d8f96:	b2df      	uxtb	r7, r3
   d8f98:	b2ed      	uxtb	r5, r5
   d8f9a:	f104 010c 	add.w	r1, r4, #12
   d8f9e:	463b      	mov	r3, r7
   d8fa0:	4632      	mov	r2, r6
   d8fa2:	b289      	uxth	r1, r1
   d8fa4:	484f      	ldr	r0, [pc, #316]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8fa6:	9500      	str	r5, [sp, #0]
   d8fa8:	f005 f856 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8fac:	f104 010d 	add.w	r1, r4, #13
   d8fb0:	463b      	mov	r3, r7
   d8fb2:	4632      	mov	r2, r6
   d8fb4:	b289      	uxth	r1, r1
   d8fb6:	484b      	ldr	r0, [pc, #300]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8fb8:	9500      	str	r5, [sp, #0]
   d8fba:	f005 f84d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8fbe:	f104 010e 	add.w	r1, r4, #14
   d8fc2:	b289      	uxth	r1, r1
   d8fc4:	9500      	str	r5, [sp, #0]
   d8fc6:	463b      	mov	r3, r7
   d8fc8:	4632      	mov	r2, r6
   d8fca:	4846      	ldr	r0, [pc, #280]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8fcc:	f005 f844 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8fd0:	f104 010f 	add.w	r1, r4, #15
   d8fd4:	b289      	uxth	r1, r1
   d8fd6:	9500      	str	r5, [sp, #0]
   d8fd8:	463b      	mov	r3, r7
   d8fda:	4632      	mov	r2, r6
   d8fdc:	4841      	ldr	r0, [pc, #260]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8fde:	f005 f83b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8fe2:	f104 0114 	add.w	r1, r4, #20
   d8fe6:	b289      	uxth	r1, r1
   d8fe8:	9500      	str	r5, [sp, #0]
   d8fea:	463b      	mov	r3, r7
   d8fec:	4632      	mov	r2, r6
   d8fee:	483d      	ldr	r0, [pc, #244]	; (d90e4 <_Z6letterciiii+0x1394>)
   d8ff0:	f005 f832 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8ff4:	f104 011c 	add.w	r1, r4, #28
   d8ff8:	b289      	uxth	r1, r1
   d8ffa:	9500      	str	r5, [sp, #0]
   d8ffc:	463b      	mov	r3, r7
   d8ffe:	4632      	mov	r2, r6
   d9000:	4838      	ldr	r0, [pc, #224]	; (d90e4 <_Z6letterciiii+0x1394>)
   d9002:	f005 f829 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d9006:	f104 011d 	add.w	r1, r4, #29
   d900a:	e0ab      	b.n	d9164 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'W')
   d900c:	2857      	cmp	r0, #87	; 0x57
   d900e:	d16b      	bne.n	d90e8 <_Z6letterciiii+0x1398>
    {
        strip.setPixelColor(pix+20,R,G,B);
   d9010:	b28c      	uxth	r4, r1
   d9012:	b2d6      	uxtb	r6, r2
   d9014:	b2df      	uxtb	r7, r3
   d9016:	b2ed      	uxtb	r5, r5
   d9018:	f104 0114 	add.w	r1, r4, #20
   d901c:	463b      	mov	r3, r7
   d901e:	4632      	mov	r2, r6
   d9020:	b289      	uxth	r1, r1
   d9022:	4830      	ldr	r0, [pc, #192]	; (d90e4 <_Z6letterciiii+0x1394>)
   d9024:	9500      	str	r5, [sp, #0]
   d9026:	f005 f817 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d902a:	f104 010e 	add.w	r1, r4, #14
   d902e:	463b      	mov	r3, r7
   d9030:	4632      	mov	r2, r6
   d9032:	b289      	uxth	r1, r1
   d9034:	482b      	ldr	r0, [pc, #172]	; (d90e4 <_Z6letterciiii+0x1394>)
   d9036:	9500      	str	r5, [sp, #0]
   d9038:	f005 f80e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d903c:	f104 010c 	add.w	r1, r4, #12
   d9040:	463b      	mov	r3, r7
   d9042:	4632      	mov	r2, r6
   d9044:	b289      	uxth	r1, r1
   d9046:	4827      	ldr	r0, [pc, #156]	; (d90e4 <_Z6letterciiii+0x1394>)
   d9048:	9500      	str	r5, [sp, #0]
   d904a:	f005 f805 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d904e:	f104 010d 	add.w	r1, r4, #13
   d9052:	463b      	mov	r3, r7
   d9054:	4632      	mov	r2, r6
   d9056:	b289      	uxth	r1, r1
   d9058:	4822      	ldr	r0, [pc, #136]	; (d90e4 <_Z6letterciiii+0x1394>)
   d905a:	9500      	str	r5, [sp, #0]
   d905c:	f004 fffc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9060:	f104 010f 	add.w	r1, r4, #15
   d9064:	463b      	mov	r3, r7
   d9066:	4632      	mov	r2, r6
   d9068:	b289      	uxth	r1, r1
   d906a:	481e      	ldr	r0, [pc, #120]	; (d90e4 <_Z6letterciiii+0x1394>)
   d906c:	9500      	str	r5, [sp, #0]
   d906e:	f004 fff3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d9072:	f104 011c 	add.w	r1, r4, #28
   d9076:	463b      	mov	r3, r7
   d9078:	4632      	mov	r2, r6
   d907a:	b289      	uxth	r1, r1
   d907c:	4819      	ldr	r0, [pc, #100]	; (d90e4 <_Z6letterciiii+0x1394>)
   d907e:	9500      	str	r5, [sp, #0]
   d9080:	f004 ffea 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d9084:	f104 011d 	add.w	r1, r4, #29
   d9088:	b289      	uxth	r1, r1
   d908a:	9500      	str	r5, [sp, #0]
   d908c:	463b      	mov	r3, r7
   d908e:	4632      	mov	r2, r6
   d9090:	4814      	ldr	r0, [pc, #80]	; (d90e4 <_Z6letterciiii+0x1394>)
   d9092:	f004 ffe1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d9096:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d909a:	463b      	mov	r3, r7
   d909c:	4632      	mov	r2, r6
   d909e:	b289      	uxth	r1, r1
   d90a0:	4810      	ldr	r0, [pc, #64]	; (d90e4 <_Z6letterciiii+0x1394>)
   d90a2:	9500      	str	r5, [sp, #0]
   d90a4:	f004 ffd8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d90a8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d90ac:	463b      	mov	r3, r7
   d90ae:	4632      	mov	r2, r6
   d90b0:	b289      	uxth	r1, r1
   d90b2:	480c      	ldr	r0, [pc, #48]	; (d90e4 <_Z6letterciiii+0x1394>)
   d90b4:	9500      	str	r5, [sp, #0]
   d90b6:	f004 ffcf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d90ba:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d90be:	463b      	mov	r3, r7
   d90c0:	4632      	mov	r2, r6
   d90c2:	b289      	uxth	r1, r1
   d90c4:	4807      	ldr	r0, [pc, #28]	; (d90e4 <_Z6letterciiii+0x1394>)
   d90c6:	9500      	str	r5, [sp, #0]
   d90c8:	f004 ffc6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d90cc:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d90d0:	b289      	uxth	r1, r1
   d90d2:	9500      	str	r5, [sp, #0]
   d90d4:	463b      	mov	r3, r7
   d90d6:	4632      	mov	r2, r6
   d90d8:	4802      	ldr	r0, [pc, #8]	; (d90e4 <_Z6letterciiii+0x1394>)
   d90da:	f004 ffbd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d90de:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d90e2:	e69e      	b.n	d8e22 <_Z6letterciiii+0x10d2>
   d90e4:	2003e328 	.word	0x2003e328
    }
    if(ltr == 'X')
   d90e8:	2858      	cmp	r0, #88	; 0x58
   d90ea:	d14e      	bne.n	d918a <_Z6letterciiii+0x143a>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d90ec:	b28c      	uxth	r4, r1
   d90ee:	b2d6      	uxtb	r6, r2
   d90f0:	b2df      	uxtb	r7, r3
   d90f2:	b2ed      	uxtb	r5, r5
   d90f4:	f104 010b 	add.w	r1, r4, #11
   d90f8:	b289      	uxth	r1, r1
   d90fa:	9500      	str	r5, [sp, #0]
   d90fc:	463b      	mov	r3, r7
   d90fe:	4632      	mov	r2, r6
   d9100:	48a2      	ldr	r0, [pc, #648]	; (d938c <_Z6letterciiii+0x163c>)
   d9102:	f004 ffa9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d9106:	f104 010c 	add.w	r1, r4, #12
   d910a:	463b      	mov	r3, r7
   d910c:	4632      	mov	r2, r6
   d910e:	b289      	uxth	r1, r1
   d9110:	489e      	ldr	r0, [pc, #632]	; (d938c <_Z6letterciiii+0x163c>)
   d9112:	9500      	str	r5, [sp, #0]
   d9114:	f004 ffa0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d9118:	f104 010e 	add.w	r1, r4, #14
   d911c:	463b      	mov	r3, r7
   d911e:	4632      	mov	r2, r6
   d9120:	b289      	uxth	r1, r1
   d9122:	489a      	ldr	r0, [pc, #616]	; (d938c <_Z6letterciiii+0x163c>)
   d9124:	9500      	str	r5, [sp, #0]
   d9126:	f004 ff97 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d912a:	f104 010f 	add.w	r1, r4, #15
   d912e:	463b      	mov	r3, r7
   d9130:	4632      	mov	r2, r6
   d9132:	b289      	uxth	r1, r1
   d9134:	4895      	ldr	r0, [pc, #596]	; (d938c <_Z6letterciiii+0x163c>)
   d9136:	9500      	str	r5, [sp, #0]
   d9138:	f004 ff8e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d913c:	f104 0112 	add.w	r1, r4, #18
   d9140:	463b      	mov	r3, r7
   d9142:	4632      	mov	r2, r6
   d9144:	b289      	uxth	r1, r1
   d9146:	4891      	ldr	r0, [pc, #580]	; (d938c <_Z6letterciiii+0x163c>)
   d9148:	9500      	str	r5, [sp, #0]
   d914a:	f004 ff85 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d914e:	f104 011b 	add.w	r1, r4, #27
   d9152:	b289      	uxth	r1, r1
   d9154:	9500      	str	r5, [sp, #0]
   d9156:	463b      	mov	r3, r7
   d9158:	4632      	mov	r2, r6
   d915a:	488c      	ldr	r0, [pc, #560]	; (d938c <_Z6letterciiii+0x163c>)
   d915c:	f004 ff7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d9160:	f104 011c 	add.w	r1, r4, #28
   d9164:	b289      	uxth	r1, r1
   d9166:	9500      	str	r5, [sp, #0]
   d9168:	463b      	mov	r3, r7
   d916a:	4632      	mov	r2, r6
   d916c:	4887      	ldr	r0, [pc, #540]	; (d938c <_Z6letterciiii+0x163c>)
   d916e:	f004 ff73 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d9172:	f104 011e 	add.w	r1, r4, #30
   d9176:	b289      	uxth	r1, r1
   d9178:	9500      	str	r5, [sp, #0]
   d917a:	463b      	mov	r3, r7
   d917c:	4632      	mov	r2, r6
   d917e:	4883      	ldr	r0, [pc, #524]	; (d938c <_Z6letterciiii+0x163c>)
   d9180:	f004 ff6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d9184:	f104 011f 	add.w	r1, r4, #31
   d9188:	e64b      	b.n	d8e22 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'Y')
   d918a:	2859      	cmp	r0, #89	; 0x59
   d918c:	d12a      	bne.n	d91e4 <_Z6letterciiii+0x1494>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d918e:	b28c      	uxth	r4, r1
   d9190:	b2d6      	uxtb	r6, r2
   d9192:	b2df      	uxtb	r7, r3
   d9194:	b2ed      	uxtb	r5, r5
   d9196:	f104 010e 	add.w	r1, r4, #14
   d919a:	463b      	mov	r3, r7
   d919c:	4632      	mov	r2, r6
   d919e:	b289      	uxth	r1, r1
   d91a0:	487a      	ldr	r0, [pc, #488]	; (d938c <_Z6letterciiii+0x163c>)
   d91a2:	9500      	str	r5, [sp, #0]
   d91a4:	f004 ff58 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d91a8:	f104 010f 	add.w	r1, r4, #15
   d91ac:	463b      	mov	r3, r7
   d91ae:	4632      	mov	r2, r6
   d91b0:	b289      	uxth	r1, r1
   d91b2:	4876      	ldr	r0, [pc, #472]	; (d938c <_Z6letterciiii+0x163c>)
   d91b4:	9500      	str	r5, [sp, #0]
   d91b6:	f004 ff4f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d91ba:	f104 0112 	add.w	r1, r4, #18
   d91be:	463b      	mov	r3, r7
   d91c0:	4632      	mov	r2, r6
   d91c2:	b289      	uxth	r1, r1
   d91c4:	4871      	ldr	r0, [pc, #452]	; (d938c <_Z6letterciiii+0x163c>)
   d91c6:	9500      	str	r5, [sp, #0]
   d91c8:	f004 ff46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d91cc:	f104 0113 	add.w	r1, r4, #19
   d91d0:	b289      	uxth	r1, r1
   d91d2:	9500      	str	r5, [sp, #0]
   d91d4:	463b      	mov	r3, r7
   d91d6:	4632      	mov	r2, r6
   d91d8:	486c      	ldr	r0, [pc, #432]	; (d938c <_Z6letterciiii+0x163c>)
   d91da:	f004 ff3d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d91de:	f104 0114 	add.w	r1, r4, #20
   d91e2:	e7bf      	b.n	d9164 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Z')
   d91e4:	285a      	cmp	r0, #90	; 0x5a
   d91e6:	d13c      	bne.n	d9262 <_Z6letterciiii+0x1512>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d91e8:	b28c      	uxth	r4, r1
   d91ea:	b2d6      	uxtb	r6, r2
   d91ec:	b2df      	uxtb	r7, r3
   d91ee:	b2ed      	uxtb	r5, r5
   d91f0:	f104 010b 	add.w	r1, r4, #11
   d91f4:	463b      	mov	r3, r7
   d91f6:	4632      	mov	r2, r6
   d91f8:	b289      	uxth	r1, r1
   d91fa:	4864      	ldr	r0, [pc, #400]	; (d938c <_Z6letterciiii+0x163c>)
   d91fc:	9500      	str	r5, [sp, #0]
   d91fe:	f004 ff2b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d9202:	f104 010c 	add.w	r1, r4, #12
   d9206:	463b      	mov	r3, r7
   d9208:	4632      	mov	r2, r6
   d920a:	b289      	uxth	r1, r1
   d920c:	485f      	ldr	r0, [pc, #380]	; (d938c <_Z6letterciiii+0x163c>)
   d920e:	9500      	str	r5, [sp, #0]
   d9210:	f004 ff22 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9214:	f104 010f 	add.w	r1, r4, #15
   d9218:	463b      	mov	r3, r7
   d921a:	4632      	mov	r2, r6
   d921c:	b289      	uxth	r1, r1
   d921e:	485b      	ldr	r0, [pc, #364]	; (d938c <_Z6letterciiii+0x163c>)
   d9220:	9500      	str	r5, [sp, #0]
   d9222:	f004 ff19 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d9226:	f104 0110 	add.w	r1, r4, #16
   d922a:	463b      	mov	r3, r7
   d922c:	4632      	mov	r2, r6
   d922e:	b289      	uxth	r1, r1
   d9230:	4856      	ldr	r0, [pc, #344]	; (d938c <_Z6letterciiii+0x163c>)
   d9232:	9500      	str	r5, [sp, #0]
   d9234:	f004 ff10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9238:	f104 0112 	add.w	r1, r4, #18
   d923c:	463b      	mov	r3, r7
   d923e:	4632      	mov	r2, r6
   d9240:	b289      	uxth	r1, r1
   d9242:	4852      	ldr	r0, [pc, #328]	; (d938c <_Z6letterciiii+0x163c>)
   d9244:	9500      	str	r5, [sp, #0]
   d9246:	f004 ff07 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d924a:	f104 0114 	add.w	r1, r4, #20
   d924e:	b289      	uxth	r1, r1
   d9250:	9500      	str	r5, [sp, #0]
   d9252:	463b      	mov	r3, r7
   d9254:	4632      	mov	r2, r6
   d9256:	484d      	ldr	r0, [pc, #308]	; (d938c <_Z6letterciiii+0x163c>)
   d9258:	f004 fefe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d925c:	f104 011b 	add.w	r1, r4, #27
   d9260:	e780      	b.n	d9164 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == '0')
   d9262:	2830      	cmp	r0, #48	; 0x30
   d9264:	d105      	bne.n	d9272 <_Z6letterciiii+0x1522>
    {
        snum(0,pix+15,R,G,B);
   d9266:	9500      	str	r5, [sp, #0]
   d9268:	310f      	adds	r1, #15
   d926a:	2000      	movs	r0, #0
   d926c:	f7fd f9ce 	bl	d660c <_Z4snumiiiii>
   d9270:	e0e2      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '1')
   d9272:	2831      	cmp	r0, #49	; 0x31
   d9274:	d105      	bne.n	d9282 <_Z6letterciiii+0x1532>
    {
        snum(1,pix+15,R,G,B);
   d9276:	9500      	str	r5, [sp, #0]
   d9278:	310f      	adds	r1, #15
   d927a:	2001      	movs	r0, #1
   d927c:	f7fd f9c6 	bl	d660c <_Z4snumiiiii>
   d9280:	e0da      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '2')
   d9282:	2832      	cmp	r0, #50	; 0x32
   d9284:	d105      	bne.n	d9292 <_Z6letterciiii+0x1542>
    {
        snum(2,pix+15,R,G,B);
   d9286:	9500      	str	r5, [sp, #0]
   d9288:	310f      	adds	r1, #15
   d928a:	2002      	movs	r0, #2
   d928c:	f7fd f9be 	bl	d660c <_Z4snumiiiii>
   d9290:	e0d2      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '3')
   d9292:	2833      	cmp	r0, #51	; 0x33
   d9294:	d105      	bne.n	d92a2 <_Z6letterciiii+0x1552>
    {
        snum(3,pix+15,R,G,B);
   d9296:	9500      	str	r5, [sp, #0]
   d9298:	310f      	adds	r1, #15
   d929a:	2003      	movs	r0, #3
   d929c:	f7fd f9b6 	bl	d660c <_Z4snumiiiii>
   d92a0:	e0ca      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '4')
   d92a2:	2834      	cmp	r0, #52	; 0x34
   d92a4:	d105      	bne.n	d92b2 <_Z6letterciiii+0x1562>
    {
        snum(4,pix+15,R,G,B);
   d92a6:	9500      	str	r5, [sp, #0]
   d92a8:	310f      	adds	r1, #15
   d92aa:	2004      	movs	r0, #4
   d92ac:	f7fd f9ae 	bl	d660c <_Z4snumiiiii>
   d92b0:	e0c2      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '5')
   d92b2:	2835      	cmp	r0, #53	; 0x35
   d92b4:	d105      	bne.n	d92c2 <_Z6letterciiii+0x1572>
    {
        snum(5,pix+15,R,G,B);
   d92b6:	9500      	str	r5, [sp, #0]
   d92b8:	310f      	adds	r1, #15
   d92ba:	2005      	movs	r0, #5
   d92bc:	f7fd f9a6 	bl	d660c <_Z4snumiiiii>
   d92c0:	e0ba      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '6')
   d92c2:	2836      	cmp	r0, #54	; 0x36
   d92c4:	d105      	bne.n	d92d2 <_Z6letterciiii+0x1582>
    {
        snum(6,pix+15,R,G,B);
   d92c6:	9500      	str	r5, [sp, #0]
   d92c8:	310f      	adds	r1, #15
   d92ca:	2006      	movs	r0, #6
   d92cc:	f7fd f99e 	bl	d660c <_Z4snumiiiii>
   d92d0:	e0b2      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '7')
   d92d2:	2837      	cmp	r0, #55	; 0x37
   d92d4:	d105      	bne.n	d92e2 <_Z6letterciiii+0x1592>
    {
        snum(7,pix+15,R,G,B);
   d92d6:	9500      	str	r5, [sp, #0]
   d92d8:	310f      	adds	r1, #15
   d92da:	2007      	movs	r0, #7
   d92dc:	f7fd f996 	bl	d660c <_Z4snumiiiii>
   d92e0:	e0aa      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '8')
   d92e2:	2838      	cmp	r0, #56	; 0x38
   d92e4:	d105      	bne.n	d92f2 <_Z6letterciiii+0x15a2>
    {
        snum(8,pix+15,R,G,B);
   d92e6:	9500      	str	r5, [sp, #0]
   d92e8:	310f      	adds	r1, #15
   d92ea:	2008      	movs	r0, #8
   d92ec:	f7fd f98e 	bl	d660c <_Z4snumiiiii>
   d92f0:	e0a2      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '9')
   d92f2:	2839      	cmp	r0, #57	; 0x39
   d92f4:	d105      	bne.n	d9302 <_Z6letterciiii+0x15b2>
    {
        snum(9,pix+15,R,G,B);
   d92f6:	9500      	str	r5, [sp, #0]
   d92f8:	310f      	adds	r1, #15
   d92fa:	2009      	movs	r0, #9
   d92fc:	f7fd f986 	bl	d660c <_Z4snumiiiii>
   d9300:	e09a      	b.n	d9438 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '!')
   d9302:	2821      	cmp	r0, #33	; 0x21
   d9304:	d124      	bne.n	d9350 <_Z6letterciiii+0x1600>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9306:	b28c      	uxth	r4, r1
   d9308:	b2d6      	uxtb	r6, r2
   d930a:	b2df      	uxtb	r7, r3
   d930c:	b2ed      	uxtb	r5, r5
   d930e:	f104 010b 	add.w	r1, r4, #11
   d9312:	463b      	mov	r3, r7
   d9314:	4632      	mov	r2, r6
   d9316:	b289      	uxth	r1, r1
   d9318:	481c      	ldr	r0, [pc, #112]	; (d938c <_Z6letterciiii+0x163c>)
   d931a:	9500      	str	r5, [sp, #0]
   d931c:	f004 fe9c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d9320:	f104 010d 	add.w	r1, r4, #13
   d9324:	463b      	mov	r3, r7
   d9326:	4632      	mov	r2, r6
   d9328:	b289      	uxth	r1, r1
   d932a:	4818      	ldr	r0, [pc, #96]	; (d938c <_Z6letterciiii+0x163c>)
   d932c:	9500      	str	r5, [sp, #0]
   d932e:	f004 fe93 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d9332:	f104 010e 	add.w	r1, r4, #14
   d9336:	463b      	mov	r3, r7
   d9338:	4632      	mov	r2, r6
   d933a:	b289      	uxth	r1, r1
   d933c:	9500      	str	r5, [sp, #0]
   d933e:	4813      	ldr	r0, [pc, #76]	; (d938c <_Z6letterciiii+0x163c>)
   d9340:	f004 fe8a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9344:	f104 010f 	add.w	r1, r4, #15
   d9348:	9508      	str	r5, [sp, #32]
   d934a:	463b      	mov	r3, r7
   d934c:	4632      	mov	r2, r6
   d934e:	e06c      	b.n	d942a <_Z6letterciiii+0x16da>
    }
    if(ltr == '.')
   d9350:	282e      	cmp	r0, #46	; 0x2e
   d9352:	d105      	bne.n	d9360 <_Z6letterciiii+0x1610>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9354:	b2ed      	uxtb	r5, r5
   d9356:	310b      	adds	r1, #11
   d9358:	9508      	str	r5, [sp, #32]
   d935a:	b2db      	uxtb	r3, r3
   d935c:	b2d2      	uxtb	r2, r2
   d935e:	e064      	b.n	d942a <_Z6letterciiii+0x16da>
    }
    if(ltr == ':')
   d9360:	283a      	cmp	r0, #58	; 0x3a
   d9362:	d115      	bne.n	d9390 <_Z6letterciiii+0x1640>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d9364:	b28c      	uxth	r4, r1
   d9366:	b2d6      	uxtb	r6, r2
   d9368:	b2df      	uxtb	r7, r3
   d936a:	b2ed      	uxtb	r5, r5
   d936c:	f104 010c 	add.w	r1, r4, #12
   d9370:	463b      	mov	r3, r7
   d9372:	4632      	mov	r2, r6
   d9374:	b289      	uxth	r1, r1
   d9376:	9500      	str	r5, [sp, #0]
   d9378:	4804      	ldr	r0, [pc, #16]	; (d938c <_Z6letterciiii+0x163c>)
   d937a:	f004 fe6d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d937e:	f104 010e 	add.w	r1, r4, #14
   d9382:	9508      	str	r5, [sp, #32]
   d9384:	463b      	mov	r3, r7
   d9386:	4632      	mov	r2, r6
   d9388:	e04f      	b.n	d942a <_Z6letterciiii+0x16da>
   d938a:	bf00      	nop
   d938c:	2003e328 	.word	0x2003e328
    }
    if(ltr == '+')
   d9390:	282b      	cmp	r0, #43	; 0x2b
   d9392:	d12d      	bne.n	d93f0 <_Z6letterciiii+0x16a0>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d9394:	b28c      	uxth	r4, r1
   d9396:	b2d6      	uxtb	r6, r2
   d9398:	b2df      	uxtb	r7, r3
   d939a:	b2ed      	uxtb	r5, r5
   d939c:	f104 010d 	add.w	r1, r4, #13
   d93a0:	463b      	mov	r3, r7
   d93a2:	4632      	mov	r2, r6
   d93a4:	b289      	uxth	r1, r1
   d93a6:	4825      	ldr	r0, [pc, #148]	; (d943c <_Z6letterciiii+0x16ec>)
   d93a8:	9500      	str	r5, [sp, #0]
   d93aa:	f004 fe55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d93ae:	f104 0112 	add.w	r1, r4, #18
   d93b2:	463b      	mov	r3, r7
   d93b4:	4632      	mov	r2, r6
   d93b6:	b289      	uxth	r1, r1
   d93b8:	4820      	ldr	r0, [pc, #128]	; (d943c <_Z6letterciiii+0x16ec>)
   d93ba:	9500      	str	r5, [sp, #0]
   d93bc:	f004 fe4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d93c0:	f104 011d 	add.w	r1, r4, #29
   d93c4:	463b      	mov	r3, r7
   d93c6:	4632      	mov	r2, r6
   d93c8:	b289      	uxth	r1, r1
   d93ca:	481c      	ldr	r0, [pc, #112]	; (d943c <_Z6letterciiii+0x16ec>)
   d93cc:	9500      	str	r5, [sp, #0]
   d93ce:	f004 fe43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d93d2:	f104 0111 	add.w	r1, r4, #17
   d93d6:	463b      	mov	r3, r7
   d93d8:	4632      	mov	r2, r6
   d93da:	b289      	uxth	r1, r1
   d93dc:	9500      	str	r5, [sp, #0]
   d93de:	4817      	ldr	r0, [pc, #92]	; (d943c <_Z6letterciiii+0x16ec>)
   d93e0:	f004 fe3a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d93e4:	f104 0113 	add.w	r1, r4, #19
   d93e8:	9508      	str	r5, [sp, #32]
   d93ea:	463b      	mov	r3, r7
   d93ec:	4632      	mov	r2, r6
   d93ee:	e01c      	b.n	d942a <_Z6letterciiii+0x16da>
    }
    if(ltr == '-')
   d93f0:	282d      	cmp	r0, #45	; 0x2d
   d93f2:	d121      	bne.n	d9438 <_Z6letterciiii+0x16e8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d93f4:	b28c      	uxth	r4, r1
   d93f6:	b2d7      	uxtb	r7, r2
   d93f8:	b2de      	uxtb	r6, r3
   d93fa:	b2ed      	uxtb	r5, r5
   d93fc:	f104 010d 	add.w	r1, r4, #13
   d9400:	4633      	mov	r3, r6
   d9402:	463a      	mov	r2, r7
   d9404:	b289      	uxth	r1, r1
   d9406:	480d      	ldr	r0, [pc, #52]	; (d943c <_Z6letterciiii+0x16ec>)
   d9408:	9500      	str	r5, [sp, #0]
   d940a:	f004 fe25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d940e:	f104 011d 	add.w	r1, r4, #29
   d9412:	4633      	mov	r3, r6
   d9414:	463a      	mov	r2, r7
   d9416:	b289      	uxth	r1, r1
   d9418:	9500      	str	r5, [sp, #0]
   d941a:	4808      	ldr	r0, [pc, #32]	; (d943c <_Z6letterciiii+0x16ec>)
   d941c:	f004 fe1c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9420:	f104 0112 	add.w	r1, r4, #18
   d9424:	9508      	str	r5, [sp, #32]
   d9426:	4633      	mov	r3, r6
   d9428:	463a      	mov	r2, r7
   d942a:	4804      	ldr	r0, [pc, #16]	; (d943c <_Z6letterciiii+0x16ec>)
   d942c:	b289      	uxth	r1, r1
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d942e:	b003      	add	sp, #12
   d9430:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    }
    if(ltr == '-')
    {
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d9434:	f004 be10 	b.w	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d9438:	b003      	add	sp, #12
   d943a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d943c:	2003e328 	.word	0x2003e328

000d9440 <_Z7strdispPKciiii>:
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9440:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9444:	4d28      	ldr	r5, [pc, #160]	; (d94e8 <_Z7strdispPKciiii+0xa8>)
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9446:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d944a:	2600      	movs	r6, #0
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d944c:	4682      	mov	sl, r0
   d944e:	460c      	mov	r4, r1
   d9450:	4617      	mov	r7, r2
   d9452:	4698      	mov	r8, r3
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9454:	602e      	str	r6, [r5, #0]
   d9456:	4650      	mov	r0, sl
   d9458:	f008 f9db 	bl	e1812 <strlen>
   d945c:	682b      	ldr	r3, [r5, #0]
   d945e:	4298      	cmp	r0, r3
   d9460:	d93c      	bls.n	d94dc <_Z7strdispPKciiii+0x9c>
    {
        if(wrd[i] == 'i' || wrd[i] == 'l' || wrd[i] == '.' || wrd[i] == '!')
   d9462:	f81a 0003 	ldrb.w	r0, [sl, r3]
   d9466:	2869      	cmp	r0, #105	; 0x69
   d9468:	d005      	beq.n	d9476 <_Z7strdispPKciiii+0x36>
   d946a:	286c      	cmp	r0, #108	; 0x6c
   d946c:	d003      	beq.n	d9476 <_Z7strdispPKciiii+0x36>
   d946e:	282e      	cmp	r0, #46	; 0x2e
   d9470:	d001      	beq.n	d9476 <_Z7strdispPKciiii+0x36>
   d9472:	2821      	cmp	r0, #33	; 0x21
   d9474:	d108      	bne.n	d9488 <_Z7strdispPKciiii+0x48>
        {
            letter(wrd[i],pnum,R,G,B);
   d9476:	4621      	mov	r1, r4
   d9478:	f8cd 9000 	str.w	r9, [sp]
   d947c:	4643      	mov	r3, r8
   d947e:	463a      	mov	r2, r7
   d9480:	f7fe fc66 	bl	d7d50 <_Z6letterciiii>
            pnum=pnum+16;
   d9484:	3410      	adds	r4, #16
   d9486:	e025      	b.n	d94d4 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == 'm' || wrd[i] == 'w' || wrd[i] == 'W' || wrd[i] == 'M' || wrd[i] == 'N')
   d9488:	286d      	cmp	r0, #109	; 0x6d
   d948a:	d007      	beq.n	d949c <_Z7strdispPKciiii+0x5c>
   d948c:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   d9490:	2b57      	cmp	r3, #87	; 0x57
   d9492:	d003      	beq.n	d949c <_Z7strdispPKciiii+0x5c>
   d9494:	f1a0 034d 	sub.w	r3, r0, #77	; 0x4d
   d9498:	2b01      	cmp	r3, #1
   d949a:	d808      	bhi.n	d94ae <_Z7strdispPKciiii+0x6e>
        {
            letter(wrd[i],pnum,R,G,B);
   d949c:	4621      	mov	r1, r4
   d949e:	f8cd 9000 	str.w	r9, [sp]
   d94a2:	4643      	mov	r3, r8
   d94a4:	463a      	mov	r2, r7
   d94a6:	f7fe fc53 	bl	d7d50 <_Z6letterciiii>
            pnum=pnum+48;
   d94aa:	3430      	adds	r4, #48	; 0x30
   d94ac:	e012      	b.n	d94d4 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == ' ')
   d94ae:	2820      	cmp	r0, #32
   d94b0:	d108      	bne.n	d94c4 <_Z7strdispPKciiii+0x84>
        {
            letter('l',pnum,0,0,0);
   d94b2:	2300      	movs	r3, #0
   d94b4:	4621      	mov	r1, r4
   d94b6:	9600      	str	r6, [sp, #0]
   d94b8:	461a      	mov	r2, r3
   d94ba:	206c      	movs	r0, #108	; 0x6c
   d94bc:	f7fe fc48 	bl	d7d50 <_Z6letterciiii>
            pnum=pnum+16;
   d94c0:	3410      	adds	r4, #16
   d94c2:	e007      	b.n	d94d4 <_Z7strdispPKciiii+0x94>
        }
        else
        {
            letter(wrd[i],pnum,R,G,B);
   d94c4:	4621      	mov	r1, r4
   d94c6:	f8cd 9000 	str.w	r9, [sp]
   d94ca:	4643      	mov	r3, r8
   d94cc:	463a      	mov	r2, r7
   d94ce:	f7fe fc3f 	bl	d7d50 <_Z6letterciiii>
            pnum=pnum+32;
   d94d2:	3420      	adds	r4, #32
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d94d4:	682b      	ldr	r3, [r5, #0]
   d94d6:	3301      	adds	r3, #1
   d94d8:	602b      	str	r3, [r5, #0]
   d94da:	e7bc      	b.n	d9456 <_Z7strdispPKciiii+0x16>
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d94dc:	4803      	ldr	r0, [pc, #12]	; (d94ec <_Z7strdispPKciiii+0xac>)
}                
   d94de:	b002      	add	sp, #8
   d94e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d94e4:	f004 bc16 	b.w	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   d94e8:	2003e33c 	.word	0x2003e33c
   d94ec:	2003e328 	.word	0x2003e328

000d94f0 <_Z4dimgiiiii>:
        strip.show();
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix, int R, int G, int B){                     //Code block for displaying a still weather animation when in dark mode
   d94f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(cnum > 299 && cnum < 322)
   d94f2:	f5a0 7496 	sub.w	r4, r0, #300	; 0x12c
   d94f6:	2c15      	cmp	r4, #21
        strip.show();
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix, int R, int G, int B){                     //Code block for displaying a still weather animation when in dark mode
   d94f8:	9f08      	ldr	r7, [sp, #32]
    if(cnum > 299 && cnum < 322)
   d94fa:	d818      	bhi.n	d952e <_Z4dimgiiiii+0x3e>
    {
        strip.setPixelColor(inpix+10,R,G,B);
   d94fc:	b28c      	uxth	r4, r1
   d94fe:	b2d5      	uxtb	r5, r2
   d9500:	b2de      	uxtb	r6, r3
   d9502:	b2ff      	uxtb	r7, r7
   d9504:	f104 010a 	add.w	r1, r4, #10
   d9508:	4633      	mov	r3, r6
   d950a:	462a      	mov	r2, r5
   d950c:	b289      	uxth	r1, r1
   d950e:	483a      	ldr	r0, [pc, #232]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d9510:	9700      	str	r7, [sp, #0]
   d9512:	f004 fda1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,R,G,B);
   d9516:	f104 0119 	add.w	r1, r4, #25
   d951a:	b289      	uxth	r1, r1
   d951c:	9700      	str	r7, [sp, #0]
   d951e:	4633      	mov	r3, r6
   d9520:	462a      	mov	r2, r5
   d9522:	4835      	ldr	r0, [pc, #212]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d9524:	f004 fd98 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,R,G,B);
   d9528:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d952c:	e053      	b.n	d95d6 <_Z4dimgiiiii+0xe6>
    }
    else if(cnum > 199 && cnum < 235)
   d952e:	f1a0 04c8 	sub.w	r4, r0, #200	; 0xc8
   d9532:	2c22      	cmp	r4, #34	; 0x22
   d9534:	d821      	bhi.n	d957a <_Z4dimgiiiii+0x8a>
    {
        strip.setPixelColor(inpix+28,R,G,B);
   d9536:	b28c      	uxth	r4, r1
   d9538:	b2d5      	uxtb	r5, r2
   d953a:	b2de      	uxtb	r6, r3
   d953c:	b2ff      	uxtb	r7, r7
   d953e:	f104 011c 	add.w	r1, r4, #28
   d9542:	4633      	mov	r3, r6
   d9544:	462a      	mov	r2, r5
   d9546:	b289      	uxth	r1, r1
   d9548:	482b      	ldr	r0, [pc, #172]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d954a:	9700      	str	r7, [sp, #0]
   d954c:	f004 fd84 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,R,G,B);
   d9550:	f104 0114 	add.w	r1, r4, #20
   d9554:	4633      	mov	r3, r6
   d9556:	462a      	mov	r2, r5
   d9558:	b289      	uxth	r1, r1
   d955a:	4827      	ldr	r0, [pc, #156]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d955c:	9700      	str	r7, [sp, #0]
   d955e:	f004 fd7b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,R,G,B);
   d9562:	f104 011a 	add.w	r1, r4, #26
   d9566:	b289      	uxth	r1, r1
   d9568:	9700      	str	r7, [sp, #0]
   d956a:	4633      	mov	r3, r6
   d956c:	462a      	mov	r2, r5
   d956e:	4822      	ldr	r0, [pc, #136]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d9570:	f004 fd72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,R,G,B);
   d9574:	f104 0116 	add.w	r1, r4, #22
   d9578:	e02d      	b.n	d95d6 <_Z4dimgiiiii+0xe6>
    }
    else if(cnum > 499 && cnum < 533)
   d957a:	f5a0 74fa 	sub.w	r4, r0, #500	; 0x1f4
   d957e:	2c20      	cmp	r4, #32
   d9580:	d833      	bhi.n	d95ea <_Z4dimgiiiii+0xfa>
    {
        strip.setPixelColor(inpix+12,R,G,B);
   d9582:	b28c      	uxth	r4, r1
   d9584:	b2d5      	uxtb	r5, r2
   d9586:	b2de      	uxtb	r6, r3
   d9588:	b2ff      	uxtb	r7, r7
   d958a:	f104 010c 	add.w	r1, r4, #12
   d958e:	4633      	mov	r3, r6
   d9590:	462a      	mov	r2, r5
   d9592:	b289      	uxth	r1, r1
   d9594:	4818      	ldr	r0, [pc, #96]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d9596:	9700      	str	r7, [sp, #0]
   d9598:	f004 fd5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,R,G,B);
   d959c:	f104 0116 	add.w	r1, r4, #22
   d95a0:	4633      	mov	r3, r6
   d95a2:	462a      	mov	r2, r5
   d95a4:	b289      	uxth	r1, r1
   d95a6:	4814      	ldr	r0, [pc, #80]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d95a8:	9700      	str	r7, [sp, #0]
   d95aa:	f004 fd55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,R,G,B);
   d95ae:	f104 011b 	add.w	r1, r4, #27
   d95b2:	4633      	mov	r3, r6
   d95b4:	462a      	mov	r2, r5
   d95b6:	b289      	uxth	r1, r1
   d95b8:	480f      	ldr	r0, [pc, #60]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d95ba:	9700      	str	r7, [sp, #0]
   d95bc:	f004 fd4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,R,G,B);
   d95c0:	f104 0125 	add.w	r1, r4, #37	; 0x25
   d95c4:	b289      	uxth	r1, r1
   d95c6:	9700      	str	r7, [sp, #0]
   d95c8:	4633      	mov	r3, r6
   d95ca:	462a      	mov	r2, r5
   d95cc:	480a      	ldr	r0, [pc, #40]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d95ce:	f004 fd43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,R,G,B);
   d95d2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d95d6:	4808      	ldr	r0, [pc, #32]	; (d95f8 <_Z4dimgiiiii+0x108>)
   d95d8:	9708      	str	r7, [sp, #32]
   d95da:	4633      	mov	r3, r6
   d95dc:	462a      	mov	r2, r5
   d95de:	b289      	uxth	r1, r1
        strip.setPixelColor(inpix+22,R,G,B);
        strip.setPixelColor(inpix+27,R,G,B);
        strip.setPixelColor(inpix+37,R,G,B);
        strip.setPixelColor(inpix+44,R,G,B);    
    }
}                                             
   d95e0:	b003      	add	sp, #12
   d95e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    {
        strip.setPixelColor(inpix+12,R,G,B);
        strip.setPixelColor(inpix+22,R,G,B);
        strip.setPixelColor(inpix+27,R,G,B);
        strip.setPixelColor(inpix+37,R,G,B);
        strip.setPixelColor(inpix+44,R,G,B);
   d95e6:	f004 bd37 	b.w	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    else if(cnum > 599 && cnum < 630)                                    //Snow
   d95ea:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   d95ee:	281d      	cmp	r0, #29
   d95f0:	d9c7      	bls.n	d9582 <_Z4dimgiiiii+0x92>
        strip.setPixelColor(inpix+22,R,G,B);
        strip.setPixelColor(inpix+27,R,G,B);
        strip.setPixelColor(inpix+37,R,G,B);
        strip.setPixelColor(inpix+44,R,G,B);    
    }
}                                             
   d95f2:	b003      	add	sp, #12
   d95f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d95f6:	bf00      	nop
   d95f8:	2003e328 	.word	0x2003e328
   d95fc:	00000000 	.word	0x00000000

000d9600 <_Z9conditioniiiii>:
void condition(int cnum, int inpix, int R, int G, int B){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9604:	461c      	mov	r4, r3
    if(cltr[0] == 'd')
   d9606:	4bd6      	ldr	r3, [pc, #856]	; (d9960 <_Z9conditioniiiii+0x360>)
   d9608:	781b      	ldrb	r3, [r3, #0]
        strip.setPixelColor(inpix+27,R,G,B);
        strip.setPixelColor(inpix+37,R,G,B);
        strip.setPixelColor(inpix+44,R,G,B);    
    }
}                                             
void condition(int cnum, int inpix, int R, int G, int B){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d960a:	b085      	sub	sp, #20
   d960c:	4615      	mov	r5, r2
    if(cltr[0] == 'd')
   d960e:	2b64      	cmp	r3, #100	; 0x64
   d9610:	f2a0 3222 	subw	r2, r0, #802	; 0x322
        strip.setPixelColor(inpix+27,R,G,B);
        strip.setPixelColor(inpix+37,R,G,B);
        strip.setPixelColor(inpix+44,R,G,B);    
    }
}                                             
void condition(int cnum, int inpix, int R, int G, int B){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9614:	4680      	mov	r8, r0
   d9616:	9102      	str	r1, [sp, #8]
   d9618:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   d961a:	9203      	str	r2, [sp, #12]
   d961c:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
    if(cltr[0] == 'd')
   d9620:	f040 8410 	bne.w	d9e44 <_Z9conditioniiiii+0x844>
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
   d9624:	2b01      	cmp	r3, #1
   d9626:	d904      	bls.n	d9632 <_Z9conditioniiiii+0x32>
   d9628:	f240 23d1 	movw	r3, #721	; 0x2d1
   d962c:	4298      	cmp	r0, r3
   d962e:	f040 809d 	bne.w	d976c <_Z9conditioniiiii+0x16c>
        {
            strip.setPixelColor(inpix+3,R/1.8,G*1.3,0);
   d9632:	4628      	mov	r0, r5
   d9634:	f007 fbd0 	bl	e0dd8 <__aeabi_i2d>
   d9638:	a3c3      	add	r3, pc, #780	; (adr r3, d9948 <_Z9conditioniiiii+0x348>)
   d963a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d963e:	f007 fd5b 	bl	e10f8 <__aeabi_ddiv>
   d9642:	f007 fef1 	bl	e1428 <__aeabi_d2uiz>
   d9646:	fa5f f980 	uxtb.w	r9, r0
   d964a:	4620      	mov	r0, r4
   d964c:	f007 fbc4 	bl	e0dd8 <__aeabi_i2d>
   d9650:	a3bf      	add	r3, pc, #764	; (adr r3, d9950 <_Z9conditioniiiii+0x350>)
   d9652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9656:	f007 fc25 	bl	e0ea4 <__aeabi_dmul>
   d965a:	f007 fee5 	bl	e1428 <__aeabi_d2uiz>
   d965e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d9662:	fa5f fa80 	uxtb.w	sl, r0
   d9666:	f04f 0b00 	mov.w	fp, #0
   d966a:	1cf9      	adds	r1, r7, #3
   d966c:	4653      	mov	r3, sl
   d966e:	464a      	mov	r2, r9
   d9670:	b289      	uxth	r1, r1
   d9672:	48bc      	ldr	r0, [pc, #752]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9674:	f8cd b000 	str.w	fp, [sp]
   d9678:	f004 fcee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R/1.8,G*1.3,0);
   d967c:	f107 0112 	add.w	r1, r7, #18
   d9680:	4653      	mov	r3, sl
   d9682:	464a      	mov	r2, r9
   d9684:	b289      	uxth	r1, r1
   d9686:	48b7      	ldr	r0, [pc, #732]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9688:	f8cd b000 	str.w	fp, [sp]
   d968c:	f004 fce4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,R/1.8,G*1.3,0);
   d9690:	f107 0113 	add.w	r1, r7, #19
   d9694:	4653      	mov	r3, sl
   d9696:	464a      	mov	r2, r9
   d9698:	b289      	uxth	r1, r1
   d969a:	48b2      	ldr	r0, [pc, #712]	; (d9964 <_Z9conditioniiiii+0x364>)
   d969c:	f8cd b000 	str.w	fp, [sp]
   d96a0:	f004 fcda 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R/1.8,G*1.3,0);
   d96a4:	f107 0114 	add.w	r1, r7, #20
   d96a8:	4653      	mov	r3, sl
   d96aa:	464a      	mov	r2, r9
   d96ac:	b289      	uxth	r1, r1
   d96ae:	48ad      	ldr	r0, [pc, #692]	; (d9964 <_Z9conditioniiiii+0x364>)
   d96b0:	f8cd b000 	str.w	fp, [sp]
   d96b4:	f004 fcd0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R/1.8,G*1.3,0);
   d96b8:	f107 011f 	add.w	r1, r7, #31
   d96bc:	4653      	mov	r3, sl
   d96be:	464a      	mov	r2, r9
   d96c0:	b289      	uxth	r1, r1
   d96c2:	48a8      	ldr	r0, [pc, #672]	; (d9964 <_Z9conditioniiiii+0x364>)
   d96c4:	f8cd b000 	str.w	fp, [sp]
   d96c8:	f004 fcc6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R/1.8,G*1.3,0);
   d96cc:	f107 011d 	add.w	r1, r7, #29
   d96d0:	4653      	mov	r3, sl
   d96d2:	464a      	mov	r2, r9
   d96d4:	b289      	uxth	r1, r1
   d96d6:	48a3      	ldr	r0, [pc, #652]	; (d9964 <_Z9conditioniiiii+0x364>)
   d96d8:	f8cd b000 	str.w	fp, [sp]
   d96dc:	f004 fcbc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,R/1.8,G*1.3,0);
   d96e0:	f107 011c 	add.w	r1, r7, #28
   d96e4:	4653      	mov	r3, sl
   d96e6:	464a      	mov	r2, r9
   d96e8:	b289      	uxth	r1, r1
   d96ea:	489e      	ldr	r0, [pc, #632]	; (d9964 <_Z9conditioniiiii+0x364>)
   d96ec:	f8cd b000 	str.w	fp, [sp]
   d96f0:	f004 fcb2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R/1.8,G*1.3,0);
   d96f4:	f107 011b 	add.w	r1, r7, #27
   d96f8:	4653      	mov	r3, sl
   d96fa:	464a      	mov	r2, r9
   d96fc:	b289      	uxth	r1, r1
   d96fe:	4899      	ldr	r0, [pc, #612]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9700:	f8cd b000 	str.w	fp, [sp]
   d9704:	f004 fca8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,R/1.8,G*1.3,0);
   d9708:	f107 0119 	add.w	r1, r7, #25
   d970c:	4653      	mov	r3, sl
   d970e:	464a      	mov	r2, r9
   d9710:	b289      	uxth	r1, r1
   d9712:	4894      	ldr	r0, [pc, #592]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9714:	f8cd b000 	str.w	fp, [sp]
   d9718:	f004 fc9e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R/1.8,G*1.3,0);
   d971c:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d9720:	4653      	mov	r3, sl
   d9722:	464a      	mov	r2, r9
   d9724:	b289      	uxth	r1, r1
   d9726:	488f      	ldr	r0, [pc, #572]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9728:	f8cd b000 	str.w	fp, [sp]
   d972c:	f004 fc94 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,R/1.8,G*1.3,0);
   d9730:	f107 0123 	add.w	r1, r7, #35	; 0x23
   d9734:	4653      	mov	r3, sl
   d9736:	464a      	mov	r2, r9
   d9738:	b289      	uxth	r1, r1
   d973a:	488a      	ldr	r0, [pc, #552]	; (d9964 <_Z9conditioniiiii+0x364>)
   d973c:	f8cd b000 	str.w	fp, [sp]
   d9740:	f004 fc8a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R/1.8,G*1.3,0);
   d9744:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d9748:	4653      	mov	r3, sl
   d974a:	464a      	mov	r2, r9
   d974c:	b289      	uxth	r1, r1
   d974e:	4885      	ldr	r0, [pc, #532]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9750:	f8cd b000 	str.w	fp, [sp]
   d9754:	f004 fc80 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,R/1.8,G*1.3,0);
   d9758:	f107 0133 	add.w	r1, r7, #51	; 0x33
   d975c:	f8cd b000 	str.w	fp, [sp]
   d9760:	4653      	mov	r3, sl
   d9762:	464a      	mov	r2, r9
   d9764:	b289      	uxth	r1, r1
   d9766:	487f      	ldr	r0, [pc, #508]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9768:	f004 fc76 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
   d976c:	9b03      	ldr	r3, [sp, #12]
   d976e:	2b01      	cmp	r3, #1
   d9770:	f200 80dd 	bhi.w	d992e <_Z9conditioniiiii+0x32e>
        {
            strip.setPixelColor(inpix+3,R,G*1.9,0);
   d9774:	4620      	mov	r0, r4
   d9776:	f007 fb2f 	bl	e0dd8 <__aeabi_i2d>
   d977a:	a377      	add	r3, pc, #476	; (adr r3, d9958 <_Z9conditioniiiii+0x358>)
   d977c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9780:	f007 fb90 	bl	e0ea4 <__aeabi_dmul>
   d9784:	f007 fe50 	bl	e1428 <__aeabi_d2uiz>
   d9788:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d978c:	fa5f f985 	uxtb.w	r9, r5
   d9790:	fa5f fa80 	uxtb.w	sl, r0
   d9794:	f04f 0b00 	mov.w	fp, #0
   d9798:	1cf9      	adds	r1, r7, #3
   d979a:	4653      	mov	r3, sl
   d979c:	f8cd b000 	str.w	fp, [sp]
   d97a0:	464a      	mov	r2, r9
   d97a2:	b289      	uxth	r1, r1
   d97a4:	486f      	ldr	r0, [pc, #444]	; (d9964 <_Z9conditioniiiii+0x364>)
   d97a6:	f004 fc57 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G*1.9,0);
   d97aa:	f107 0112 	add.w	r1, r7, #18
   d97ae:	4653      	mov	r3, sl
   d97b0:	f8cd b000 	str.w	fp, [sp]
   d97b4:	464a      	mov	r2, r9
   d97b6:	b289      	uxth	r1, r1
   d97b8:	486a      	ldr	r0, [pc, #424]	; (d9964 <_Z9conditioniiiii+0x364>)
   d97ba:	f004 fc4d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,R,G*1.9,0);
   d97be:	f107 0113 	add.w	r1, r7, #19
   d97c2:	4653      	mov	r3, sl
   d97c4:	f8cd b000 	str.w	fp, [sp]
   d97c8:	464a      	mov	r2, r9
   d97ca:	b289      	uxth	r1, r1
   d97cc:	4865      	ldr	r0, [pc, #404]	; (d9964 <_Z9conditioniiiii+0x364>)
   d97ce:	f004 fc43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G*1.9,0);
   d97d2:	f107 011f 	add.w	r1, r7, #31
   d97d6:	4653      	mov	r3, sl
   d97d8:	f8cd b000 	str.w	fp, [sp]
   d97dc:	464a      	mov	r2, r9
   d97de:	b289      	uxth	r1, r1
   d97e0:	4860      	ldr	r0, [pc, #384]	; (d9964 <_Z9conditioniiiii+0x364>)
   d97e2:	f004 fc39 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G*1.9,0);
   d97e6:	f107 011d 	add.w	r1, r7, #29
   d97ea:	4653      	mov	r3, sl
   d97ec:	f8cd b000 	str.w	fp, [sp]
   d97f0:	464a      	mov	r2, r9
   d97f2:	b289      	uxth	r1, r1
   d97f4:	485b      	ldr	r0, [pc, #364]	; (d9964 <_Z9conditioniiiii+0x364>)
   d97f6:	f004 fc2f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G*1.9,0);
   d97fa:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d97fe:	4653      	mov	r3, sl
   d9800:	f8cd b000 	str.w	fp, [sp]
   d9804:	464a      	mov	r2, r9
   d9806:	b289      	uxth	r1, r1
   d9808:	4856      	ldr	r0, [pc, #344]	; (d9964 <_Z9conditioniiiii+0x364>)
            strip.setPixelColor(inpix+20,R,G,B);
   d980a:	fa5f fa84 	uxtb.w	sl, r4
   d980e:	fa5f fb86 	uxtb.w	fp, r6
            strip.setPixelColor(inpix+3,R,G*1.9,0);
            strip.setPixelColor(inpix+18,R,G*1.9,0);
            strip.setPixelColor(inpix+19,R,G*1.9,0);
            strip.setPixelColor(inpix+31,R,G*1.9,0);
            strip.setPixelColor(inpix+29,R,G*1.9,0);
            strip.setPixelColor(inpix+34,R,G*1.9,0);
   d9812:	f004 fc21 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R,G,B);
   d9816:	f107 0114 	add.w	r1, r7, #20
   d981a:	4653      	mov	r3, sl
   d981c:	464a      	mov	r2, r9
   d981e:	b289      	uxth	r1, r1
   d9820:	4850      	ldr	r0, [pc, #320]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9822:	f8cd b000 	str.w	fp, [sp]
   d9826:	f004 fc17 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,R,G,B);
   d982a:	f107 011a 	add.w	r1, r7, #26
   d982e:	4653      	mov	r3, sl
   d9830:	464a      	mov	r2, r9
   d9832:	b289      	uxth	r1, r1
   d9834:	484b      	ldr	r0, [pc, #300]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9836:	f8cd b000 	str.w	fp, [sp]
   d983a:	f004 fc0d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R,G,B);
   d983e:	f107 011b 	add.w	r1, r7, #27
   d9842:	4653      	mov	r3, sl
   d9844:	464a      	mov	r2, r9
   d9846:	b289      	uxth	r1, r1
   d9848:	4846      	ldr	r0, [pc, #280]	; (d9964 <_Z9conditioniiiii+0x364>)
   d984a:	f8cd b000 	str.w	fp, [sp]
   d984e:	f004 fc03 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,R,G,B);
   d9852:	f107 011c 	add.w	r1, r7, #28
   d9856:	4653      	mov	r3, sl
   d9858:	464a      	mov	r2, r9
   d985a:	b289      	uxth	r1, r1
   d985c:	4841      	ldr	r0, [pc, #260]	; (d9964 <_Z9conditioniiiii+0x364>)
   d985e:	f8cd b000 	str.w	fp, [sp]
   d9862:	f004 fbf9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,R,G,B);
   d9866:	f107 0123 	add.w	r1, r7, #35	; 0x23
   d986a:	4653      	mov	r3, sl
   d986c:	464a      	mov	r2, r9
   d986e:	b289      	uxth	r1, r1
   d9870:	483c      	ldr	r0, [pc, #240]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9872:	f8cd b000 	str.w	fp, [sp]
   d9876:	f004 fbef 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R,G,B);
   d987a:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d987e:	4653      	mov	r3, sl
   d9880:	464a      	mov	r2, r9
   d9882:	b289      	uxth	r1, r1
   d9884:	4837      	ldr	r0, [pc, #220]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9886:	f8cd b000 	str.w	fp, [sp]
   d988a:	f004 fbe5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,R,G,B);
   d988e:	f107 0125 	add.w	r1, r7, #37	; 0x25
   d9892:	4653      	mov	r3, sl
   d9894:	464a      	mov	r2, r9
   d9896:	b289      	uxth	r1, r1
   d9898:	4832      	ldr	r0, [pc, #200]	; (d9964 <_Z9conditioniiiii+0x364>)
   d989a:	f8cd b000 	str.w	fp, [sp]
   d989e:	f004 fbdb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,R,G,B);
   d98a2:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   d98a6:	4653      	mov	r3, sl
   d98a8:	464a      	mov	r2, r9
   d98aa:	b289      	uxth	r1, r1
   d98ac:	482d      	ldr	r0, [pc, #180]	; (d9964 <_Z9conditioniiiii+0x364>)
   d98ae:	f8cd b000 	str.w	fp, [sp]
   d98b2:	f004 fbd1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,R,G,B);
   d98b6:	f107 012b 	add.w	r1, r7, #43	; 0x2b
   d98ba:	4653      	mov	r3, sl
   d98bc:	464a      	mov	r2, r9
   d98be:	b289      	uxth	r1, r1
   d98c0:	4828      	ldr	r0, [pc, #160]	; (d9964 <_Z9conditioniiiii+0x364>)
   d98c2:	f8cd b000 	str.w	fp, [sp]
   d98c6:	f004 fbc7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,R,G,B);
   d98ca:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   d98ce:	4653      	mov	r3, sl
   d98d0:	464a      	mov	r2, r9
   d98d2:	b289      	uxth	r1, r1
   d98d4:	4823      	ldr	r0, [pc, #140]	; (d9964 <_Z9conditioniiiii+0x364>)
   d98d6:	f8cd b000 	str.w	fp, [sp]
   d98da:	f004 fbbd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,R,G,B);
   d98de:	f107 0134 	add.w	r1, r7, #52	; 0x34
   d98e2:	4653      	mov	r3, sl
   d98e4:	464a      	mov	r2, r9
   d98e6:	b289      	uxth	r1, r1
   d98e8:	481e      	ldr	r0, [pc, #120]	; (d9964 <_Z9conditioniiiii+0x364>)
   d98ea:	f8cd b000 	str.w	fp, [sp]
   d98ee:	f004 fbb3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,R,G,B);
   d98f2:	f107 0133 	add.w	r1, r7, #51	; 0x33
   d98f6:	4653      	mov	r3, sl
   d98f8:	464a      	mov	r2, r9
   d98fa:	b289      	uxth	r1, r1
   d98fc:	4819      	ldr	r0, [pc, #100]	; (d9964 <_Z9conditioniiiii+0x364>)
   d98fe:	f8cd b000 	str.w	fp, [sp]
   d9902:	f004 fba9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,R,G,B);
   d9906:	f107 0135 	add.w	r1, r7, #53	; 0x35
   d990a:	4653      	mov	r3, sl
   d990c:	464a      	mov	r2, r9
   d990e:	b289      	uxth	r1, r1
   d9910:	4814      	ldr	r0, [pc, #80]	; (d9964 <_Z9conditioniiiii+0x364>)
   d9912:	f8cd b000 	str.w	fp, [sp]
   d9916:	f004 fb9f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,R,G,B);
   d991a:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   d991e:	f8cd b000 	str.w	fp, [sp]
   d9922:	4653      	mov	r3, sl
   d9924:	464a      	mov	r2, r9
   d9926:	b289      	uxth	r1, r1
   d9928:	480e      	ldr	r0, [pc, #56]	; (d9964 <_Z9conditioniiiii+0x364>)
   d992a:	f004 fb95 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   d992e:	f5a8 7316 	sub.w	r3, r8, #600	; 0x258
   d9932:	2b1d      	cmp	r3, #29
   d9934:	f200 80c3 	bhi.w	d9abe <_Z9conditioniiiii+0x4be>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   d9938:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d993c:	4809      	ldr	r0, [pc, #36]	; (d9964 <_Z9conditioniiiii+0x364>)
   d993e:	fa5f f985 	uxtb.w	r9, r5
   d9942:	fa5f fa84 	uxtb.w	sl, r4
   d9946:	e00f      	b.n	d9968 <_Z9conditioniiiii+0x368>
   d9948:	cccccccd 	.word	0xcccccccd
   d994c:	3ffccccc 	.word	0x3ffccccc
   d9950:	cccccccd 	.word	0xcccccccd
   d9954:	3ff4cccc 	.word	0x3ff4cccc
   d9958:	66666666 	.word	0x66666666
   d995c:	3ffe6666 	.word	0x3ffe6666
   d9960:	2003e360 	.word	0x2003e360
   d9964:	2003e328 	.word	0x2003e328
   d9968:	fa5f fb86 	uxtb.w	fp, r6
   d996c:	1c79      	adds	r1, r7, #1
   d996e:	4653      	mov	r3, sl
   d9970:	464a      	mov	r2, r9
   d9972:	f8cd b000 	str.w	fp, [sp]
   d9976:	b289      	uxth	r1, r1
   d9978:	f004 fb6e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   d997c:	f107 011f 	add.w	r1, r7, #31
   d9980:	4653      	mov	r3, sl
   d9982:	464a      	mov	r2, r9
   d9984:	f8cd b000 	str.w	fp, [sp]
   d9988:	b289      	uxth	r1, r1
   d998a:	48a8      	ldr	r0, [pc, #672]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d998c:	f004 fb64 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   d9990:	f107 010f 	add.w	r1, r7, #15
   d9994:	4653      	mov	r3, sl
   d9996:	464a      	mov	r2, r9
   d9998:	f8cd b000 	str.w	fp, [sp]
   d999c:	b289      	uxth	r1, r1
   d999e:	48a3      	ldr	r0, [pc, #652]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d99a0:	f004 fb5a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   d99a4:	f107 010e 	add.w	r1, r7, #14
   d99a8:	4653      	mov	r3, sl
   d99aa:	464a      	mov	r2, r9
   d99ac:	f8cd b000 	str.w	fp, [sp]
   d99b0:	b289      	uxth	r1, r1
   d99b2:	489e      	ldr	r0, [pc, #632]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d99b4:	f004 fb50 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   d99b8:	f107 010d 	add.w	r1, r7, #13
   d99bc:	4653      	mov	r3, sl
   d99be:	464a      	mov	r2, r9
   d99c0:	f8cd b000 	str.w	fp, [sp]
   d99c4:	b289      	uxth	r1, r1
   d99c6:	4899      	ldr	r0, [pc, #612]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d99c8:	f004 fb46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   d99cc:	f107 0110 	add.w	r1, r7, #16
   d99d0:	4653      	mov	r3, sl
   d99d2:	464a      	mov	r2, r9
   d99d4:	f8cd b000 	str.w	fp, [sp]
   d99d8:	b289      	uxth	r1, r1
   d99da:	4894      	ldr	r0, [pc, #592]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d99dc:	f004 fb3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   d99e0:	f107 0111 	add.w	r1, r7, #17
   d99e4:	4653      	mov	r3, sl
   d99e6:	464a      	mov	r2, r9
   d99e8:	f8cd b000 	str.w	fp, [sp]
   d99ec:	b289      	uxth	r1, r1
   d99ee:	488f      	ldr	r0, [pc, #572]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d99f0:	f004 fb32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   d99f4:	f107 0112 	add.w	r1, r7, #18
   d99f8:	4653      	mov	r3, sl
   d99fa:	464a      	mov	r2, r9
   d99fc:	f8cd b000 	str.w	fp, [sp]
   d9a00:	b289      	uxth	r1, r1
   d9a02:	488a      	ldr	r0, [pc, #552]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a04:	f004 fb28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   d9a08:	f107 011e 	add.w	r1, r7, #30
   d9a0c:	4653      	mov	r3, sl
   d9a0e:	464a      	mov	r2, r9
   d9a10:	f8cd b000 	str.w	fp, [sp]
   d9a14:	b289      	uxth	r1, r1
   d9a16:	4885      	ldr	r0, [pc, #532]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a18:	f004 fb1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   d9a1c:	f107 011d 	add.w	r1, r7, #29
   d9a20:	4653      	mov	r3, sl
   d9a22:	464a      	mov	r2, r9
   d9a24:	f8cd b000 	str.w	fp, [sp]
   d9a28:	b289      	uxth	r1, r1
   d9a2a:	4880      	ldr	r0, [pc, #512]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a2c:	f004 fb14 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   d9a30:	f107 0120 	add.w	r1, r7, #32
   d9a34:	4653      	mov	r3, sl
   d9a36:	464a      	mov	r2, r9
   d9a38:	f8cd b000 	str.w	fp, [sp]
   d9a3c:	b289      	uxth	r1, r1
   d9a3e:	487b      	ldr	r0, [pc, #492]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a40:	f004 fb0a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   d9a44:	f107 0121 	add.w	r1, r7, #33	; 0x21
   d9a48:	4653      	mov	r3, sl
   d9a4a:	464a      	mov	r2, r9
   d9a4c:	f8cd b000 	str.w	fp, [sp]
   d9a50:	b289      	uxth	r1, r1
   d9a52:	4876      	ldr	r0, [pc, #472]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a54:	f004 fb00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   d9a58:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d9a5c:	4653      	mov	r3, sl
   d9a5e:	464a      	mov	r2, r9
   d9a60:	f8cd b000 	str.w	fp, [sp]
   d9a64:	b289      	uxth	r1, r1
   d9a66:	4871      	ldr	r0, [pc, #452]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a68:	f004 faf6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   d9a6c:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   d9a70:	4653      	mov	r3, sl
   d9a72:	464a      	mov	r2, r9
   d9a74:	f8cd b000 	str.w	fp, [sp]
   d9a78:	b289      	uxth	r1, r1
   d9a7a:	486c      	ldr	r0, [pc, #432]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a7c:	f004 faec 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   d9a80:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   d9a84:	4653      	mov	r3, sl
   d9a86:	464a      	mov	r2, r9
   d9a88:	f8cd b000 	str.w	fp, [sp]
   d9a8c:	b289      	uxth	r1, r1
   d9a8e:	4867      	ldr	r0, [pc, #412]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9a90:	f004 fae2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   d9a94:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   d9a98:	4653      	mov	r3, sl
   d9a9a:	464a      	mov	r2, r9
   d9a9c:	f8cd b000 	str.w	fp, [sp]
   d9aa0:	b289      	uxth	r1, r1
   d9aa2:	4862      	ldr	r0, [pc, #392]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9aa4:	f004 fad8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   d9aa8:	f107 0131 	add.w	r1, r7, #49	; 0x31
   d9aac:	f8cd b000 	str.w	fp, [sp]
   d9ab0:	4653      	mov	r3, sl
   d9ab2:	464a      	mov	r2, r9
   d9ab4:	b289      	uxth	r1, r1
   d9ab6:	485d      	ldr	r0, [pc, #372]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9ab8:	f004 face 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9abc:	e0b8      	b.n	d9c30 <_Z9conditioniiiii+0x630>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9abe:	f5b8 7f49 	cmp.w	r8, #804	; 0x324
   d9ac2:	f040 80b5 	bne.w	d9c30 <_Z9conditioniiiii+0x630>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   d9ac6:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d9aca:	4858      	ldr	r0, [pc, #352]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9acc:	fa5f f985 	uxtb.w	r9, r5
   d9ad0:	fa5f fa84 	uxtb.w	sl, r4
   d9ad4:	fa5f fb86 	uxtb.w	fp, r6
   d9ad8:	1c79      	adds	r1, r7, #1
   d9ada:	4653      	mov	r3, sl
   d9adc:	464a      	mov	r2, r9
   d9ade:	f8cd b000 	str.w	fp, [sp]
   d9ae2:	b289      	uxth	r1, r1
   d9ae4:	f004 fab8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   d9ae8:	f107 011f 	add.w	r1, r7, #31
   d9aec:	4653      	mov	r3, sl
   d9aee:	464a      	mov	r2, r9
   d9af0:	f8cd b000 	str.w	fp, [sp]
   d9af4:	b289      	uxth	r1, r1
   d9af6:	484d      	ldr	r0, [pc, #308]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9af8:	f004 faae 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   d9afc:	f107 010f 	add.w	r1, r7, #15
   d9b00:	4653      	mov	r3, sl
   d9b02:	464a      	mov	r2, r9
   d9b04:	f8cd b000 	str.w	fp, [sp]
   d9b08:	b289      	uxth	r1, r1
   d9b0a:	4848      	ldr	r0, [pc, #288]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b0c:	f004 faa4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   d9b10:	f107 010e 	add.w	r1, r7, #14
   d9b14:	4653      	mov	r3, sl
   d9b16:	464a      	mov	r2, r9
   d9b18:	f8cd b000 	str.w	fp, [sp]
   d9b1c:	b289      	uxth	r1, r1
   d9b1e:	4843      	ldr	r0, [pc, #268]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b20:	f004 fa9a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   d9b24:	f107 010d 	add.w	r1, r7, #13
   d9b28:	4653      	mov	r3, sl
   d9b2a:	464a      	mov	r2, r9
   d9b2c:	f8cd b000 	str.w	fp, [sp]
   d9b30:	b289      	uxth	r1, r1
   d9b32:	483e      	ldr	r0, [pc, #248]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b34:	f004 fa90 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   d9b38:	f107 0110 	add.w	r1, r7, #16
   d9b3c:	4653      	mov	r3, sl
   d9b3e:	464a      	mov	r2, r9
   d9b40:	f8cd b000 	str.w	fp, [sp]
   d9b44:	b289      	uxth	r1, r1
   d9b46:	4839      	ldr	r0, [pc, #228]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b48:	f004 fa86 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   d9b4c:	f107 0111 	add.w	r1, r7, #17
   d9b50:	4653      	mov	r3, sl
   d9b52:	464a      	mov	r2, r9
   d9b54:	f8cd b000 	str.w	fp, [sp]
   d9b58:	b289      	uxth	r1, r1
   d9b5a:	4834      	ldr	r0, [pc, #208]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b5c:	f004 fa7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   d9b60:	f107 0112 	add.w	r1, r7, #18
   d9b64:	4653      	mov	r3, sl
   d9b66:	464a      	mov	r2, r9
   d9b68:	f8cd b000 	str.w	fp, [sp]
   d9b6c:	b289      	uxth	r1, r1
   d9b6e:	482f      	ldr	r0, [pc, #188]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b70:	f004 fa72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   d9b74:	f107 011e 	add.w	r1, r7, #30
   d9b78:	4653      	mov	r3, sl
   d9b7a:	464a      	mov	r2, r9
   d9b7c:	f8cd b000 	str.w	fp, [sp]
   d9b80:	b289      	uxth	r1, r1
   d9b82:	482a      	ldr	r0, [pc, #168]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b84:	f004 fa68 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   d9b88:	f107 011d 	add.w	r1, r7, #29
   d9b8c:	4653      	mov	r3, sl
   d9b8e:	464a      	mov	r2, r9
   d9b90:	f8cd b000 	str.w	fp, [sp]
   d9b94:	b289      	uxth	r1, r1
   d9b96:	4825      	ldr	r0, [pc, #148]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9b98:	f004 fa5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   d9b9c:	f107 0120 	add.w	r1, r7, #32
   d9ba0:	4653      	mov	r3, sl
   d9ba2:	464a      	mov	r2, r9
   d9ba4:	f8cd b000 	str.w	fp, [sp]
   d9ba8:	b289      	uxth	r1, r1
   d9baa:	4820      	ldr	r0, [pc, #128]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9bac:	f004 fa54 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   d9bb0:	f107 0121 	add.w	r1, r7, #33	; 0x21
   d9bb4:	4653      	mov	r3, sl
   d9bb6:	464a      	mov	r2, r9
   d9bb8:	f8cd b000 	str.w	fp, [sp]
   d9bbc:	b289      	uxth	r1, r1
   d9bbe:	481b      	ldr	r0, [pc, #108]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9bc0:	f004 fa4a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   d9bc4:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d9bc8:	4653      	mov	r3, sl
   d9bca:	464a      	mov	r2, r9
   d9bcc:	f8cd b000 	str.w	fp, [sp]
   d9bd0:	b289      	uxth	r1, r1
   d9bd2:	4816      	ldr	r0, [pc, #88]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9bd4:	f004 fa40 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   d9bd8:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   d9bdc:	4653      	mov	r3, sl
   d9bde:	464a      	mov	r2, r9
   d9be0:	f8cd b000 	str.w	fp, [sp]
   d9be4:	b289      	uxth	r1, r1
   d9be6:	4811      	ldr	r0, [pc, #68]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9be8:	f004 fa36 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   d9bec:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   d9bf0:	4653      	mov	r3, sl
   d9bf2:	464a      	mov	r2, r9
   d9bf4:	f8cd b000 	str.w	fp, [sp]
   d9bf8:	b289      	uxth	r1, r1
   d9bfa:	480c      	ldr	r0, [pc, #48]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9bfc:	f004 fa2c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   d9c00:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   d9c04:	4653      	mov	r3, sl
   d9c06:	464a      	mov	r2, r9
   d9c08:	f8cd b000 	str.w	fp, [sp]
   d9c0c:	b289      	uxth	r1, r1
   d9c0e:	4807      	ldr	r0, [pc, #28]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9c10:	f004 fa22 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   d9c14:	f107 0131 	add.w	r1, r7, #49	; 0x31
   d9c18:	f8cd b000 	str.w	fp, [sp]
   d9c1c:	4653      	mov	r3, sl
   d9c1e:	464a      	mov	r2, r9
   d9c20:	b289      	uxth	r1, r1
   d9c22:	4802      	ldr	r0, [pc, #8]	; (d9c2c <_Z9conditioniiiii+0x62c>)
   d9c24:	f004 fa18 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9c28:	e00c      	b.n	d9c44 <_Z9conditioniiiii+0x644>
   d9c2a:	bf00      	nop
   d9c2c:	2003e328 	.word	0x2003e328
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9c30:	f1a8 03c8 	sub.w	r3, r8, #200	; 0xc8
   d9c34:	2b20      	cmp	r3, #32
   d9c36:	f67f af46 	bls.w	d9ac6 <_Z9conditioniiiii+0x4c6>
   d9c3a:	f5a8 7396 	sub.w	r3, r8, #300	; 0x12c
   d9c3e:	2be7      	cmp	r3, #231	; 0xe7
   d9c40:	f67f af41 	bls.w	d9ac6 <_Z9conditioniiiii+0x4c6>
            strip.setPixelColor(inpix+47,R,G,B);
            strip.setPixelColor(inpix+46,R,G,B);
            strip.setPixelColor(inpix+45,R,G,B);
            strip.setPixelColor(inpix+49,R,G,B);
        }
        if(cnum == 701 || cnum == 761)                                      //Mist
   d9c44:	f240 23bd 	movw	r3, #701	; 0x2bd
   d9c48:	4598      	cmp	r8, r3
   d9c4a:	d004      	beq.n	d9c56 <_Z9conditioniiiii+0x656>
   d9c4c:	f240 23f9 	movw	r3, #761	; 0x2f9
   d9c50:	4598      	cmp	r8, r3
   d9c52:	f040 8531 	bne.w	da6b8 <_Z9conditioniiiii+0x10b8>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   d9c56:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d9c5a:	4879      	ldr	r0, [pc, #484]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9c5c:	fa5f f985 	uxtb.w	r9, r5
   d9c60:	fa5f fa84 	uxtb.w	sl, r4
   d9c64:	fa5f fb86 	uxtb.w	fp, r6
   d9c68:	1c79      	adds	r1, r7, #1
   d9c6a:	4653      	mov	r3, sl
   d9c6c:	464a      	mov	r2, r9
   d9c6e:	f8cd b000 	str.w	fp, [sp]
   d9c72:	b289      	uxth	r1, r1
   d9c74:	f004 f9f0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   d9c78:	f107 011f 	add.w	r1, r7, #31
   d9c7c:	4653      	mov	r3, sl
   d9c7e:	464a      	mov	r2, r9
   d9c80:	f8cd b000 	str.w	fp, [sp]
   d9c84:	b289      	uxth	r1, r1
   d9c86:	486e      	ldr	r0, [pc, #440]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9c88:	f004 f9e6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   d9c8c:	f107 010f 	add.w	r1, r7, #15
   d9c90:	4653      	mov	r3, sl
   d9c92:	464a      	mov	r2, r9
   d9c94:	f8cd b000 	str.w	fp, [sp]
   d9c98:	b289      	uxth	r1, r1
   d9c9a:	4869      	ldr	r0, [pc, #420]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9c9c:	f004 f9dc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   d9ca0:	f107 010e 	add.w	r1, r7, #14
   d9ca4:	4653      	mov	r3, sl
   d9ca6:	464a      	mov	r2, r9
   d9ca8:	f8cd b000 	str.w	fp, [sp]
   d9cac:	b289      	uxth	r1, r1
   d9cae:	4864      	ldr	r0, [pc, #400]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9cb0:	f004 f9d2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   d9cb4:	f107 010d 	add.w	r1, r7, #13
   d9cb8:	4653      	mov	r3, sl
   d9cba:	464a      	mov	r2, r9
   d9cbc:	f8cd b000 	str.w	fp, [sp]
   d9cc0:	b289      	uxth	r1, r1
   d9cc2:	485f      	ldr	r0, [pc, #380]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9cc4:	f004 f9c8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   d9cc8:	f107 0110 	add.w	r1, r7, #16
   d9ccc:	4653      	mov	r3, sl
   d9cce:	464a      	mov	r2, r9
   d9cd0:	f8cd b000 	str.w	fp, [sp]
   d9cd4:	b289      	uxth	r1, r1
   d9cd6:	485a      	ldr	r0, [pc, #360]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9cd8:	f004 f9be 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   d9cdc:	f107 0111 	add.w	r1, r7, #17
   d9ce0:	4653      	mov	r3, sl
   d9ce2:	464a      	mov	r2, r9
   d9ce4:	f8cd b000 	str.w	fp, [sp]
   d9ce8:	b289      	uxth	r1, r1
   d9cea:	4855      	ldr	r0, [pc, #340]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9cec:	f004 f9b4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   d9cf0:	f107 0112 	add.w	r1, r7, #18
   d9cf4:	4653      	mov	r3, sl
   d9cf6:	464a      	mov	r2, r9
   d9cf8:	f8cd b000 	str.w	fp, [sp]
   d9cfc:	b289      	uxth	r1, r1
   d9cfe:	4850      	ldr	r0, [pc, #320]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d00:	f004 f9aa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   d9d04:	f107 011e 	add.w	r1, r7, #30
   d9d08:	4653      	mov	r3, sl
   d9d0a:	464a      	mov	r2, r9
   d9d0c:	f8cd b000 	str.w	fp, [sp]
   d9d10:	b289      	uxth	r1, r1
   d9d12:	484b      	ldr	r0, [pc, #300]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d14:	f004 f9a0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   d9d18:	f107 011d 	add.w	r1, r7, #29
   d9d1c:	4653      	mov	r3, sl
   d9d1e:	464a      	mov	r2, r9
   d9d20:	f8cd b000 	str.w	fp, [sp]
   d9d24:	b289      	uxth	r1, r1
   d9d26:	4846      	ldr	r0, [pc, #280]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d28:	f004 f996 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   d9d2c:	f107 0120 	add.w	r1, r7, #32
   d9d30:	4653      	mov	r3, sl
   d9d32:	464a      	mov	r2, r9
   d9d34:	f8cd b000 	str.w	fp, [sp]
   d9d38:	b289      	uxth	r1, r1
   d9d3a:	4841      	ldr	r0, [pc, #260]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d3c:	f004 f98c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   d9d40:	f107 0121 	add.w	r1, r7, #33	; 0x21
   d9d44:	4653      	mov	r3, sl
   d9d46:	464a      	mov	r2, r9
   d9d48:	f8cd b000 	str.w	fp, [sp]
   d9d4c:	b289      	uxth	r1, r1
   d9d4e:	483c      	ldr	r0, [pc, #240]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d50:	f004 f982 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   d9d54:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d9d58:	4653      	mov	r3, sl
   d9d5a:	464a      	mov	r2, r9
   d9d5c:	f8cd b000 	str.w	fp, [sp]
   d9d60:	b289      	uxth	r1, r1
   d9d62:	4837      	ldr	r0, [pc, #220]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d64:	f004 f978 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   d9d68:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   d9d6c:	4653      	mov	r3, sl
   d9d6e:	464a      	mov	r2, r9
   d9d70:	f8cd b000 	str.w	fp, [sp]
   d9d74:	b289      	uxth	r1, r1
   d9d76:	4832      	ldr	r0, [pc, #200]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d78:	f004 f96e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   d9d7c:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   d9d80:	4653      	mov	r3, sl
   d9d82:	464a      	mov	r2, r9
   d9d84:	f8cd b000 	str.w	fp, [sp]
   d9d88:	b289      	uxth	r1, r1
   d9d8a:	482d      	ldr	r0, [pc, #180]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9d8c:	f004 f964 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   d9d90:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   d9d94:	4653      	mov	r3, sl
   d9d96:	464a      	mov	r2, r9
   d9d98:	f8cd b000 	str.w	fp, [sp]
   d9d9c:	b289      	uxth	r1, r1
   d9d9e:	4828      	ldr	r0, [pc, #160]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9da0:	f004 f95a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   d9da4:	f107 0131 	add.w	r1, r7, #49	; 0x31
   d9da8:	4653      	mov	r3, sl
   d9daa:	464a      	mov	r2, r9
   d9dac:	f8cd b000 	str.w	fp, [sp]
   d9db0:	b289      	uxth	r1, r1
   d9db2:	4823      	ldr	r0, [pc, #140]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9db4:	f004 f950 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,R/2,G/2,B/2);
   d9db8:	f04f 0902 	mov.w	r9, #2
   d9dbc:	f107 010b 	add.w	r1, r7, #11
   d9dc0:	fb95 faf9 	sdiv	sl, r5, r9
   d9dc4:	fb94 fbf9 	sdiv	fp, r4, r9
   d9dc8:	fa5f fa8a 	uxtb.w	sl, sl
   d9dcc:	fa5f fb8b 	uxtb.w	fp, fp
   d9dd0:	fb96 f9f9 	sdiv	r9, r6, r9
   d9dd4:	fa5f f989 	uxtb.w	r9, r9
   d9dd8:	465b      	mov	r3, fp
   d9dda:	4652      	mov	r2, sl
   d9ddc:	b289      	uxth	r1, r1
   d9dde:	4818      	ldr	r0, [pc, #96]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9de0:	f8cd 9000 	str.w	r9, [sp]
   d9de4:	f004 f938 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R/2,G/2,B/2);
   d9de8:	f107 0114 	add.w	r1, r7, #20
   d9dec:	465b      	mov	r3, fp
   d9dee:	4652      	mov	r2, sl
   d9df0:	b289      	uxth	r1, r1
   d9df2:	4813      	ldr	r0, [pc, #76]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9df4:	f8cd 9000 	str.w	r9, [sp]
   d9df8:	f004 f92e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R/2,G/2,B/2);
   d9dfc:	f107 011b 	add.w	r1, r7, #27
   d9e00:	465b      	mov	r3, fp
   d9e02:	4652      	mov	r2, sl
   d9e04:	b289      	uxth	r1, r1
   d9e06:	480e      	ldr	r0, [pc, #56]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9e08:	f8cd 9000 	str.w	r9, [sp]
   d9e0c:	f004 f924 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R/2,G/2,B/2);
   d9e10:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d9e14:	465b      	mov	r3, fp
   d9e16:	4652      	mov	r2, sl
   d9e18:	b289      	uxth	r1, r1
   d9e1a:	4809      	ldr	r0, [pc, #36]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9e1c:	f8cd 9000 	str.w	r9, [sp]
   d9e20:	f004 f91a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,R/2,G/2,B/2);
   d9e24:	f107 012b 	add.w	r1, r7, #43	; 0x2b
   d9e28:	b289      	uxth	r1, r1
   d9e2a:	f8cd 9000 	str.w	r9, [sp]
   d9e2e:	465b      	mov	r3, fp
   d9e30:	4652      	mov	r2, sl
   d9e32:	4803      	ldr	r0, [pc, #12]	; (d9e40 <_Z9conditioniiiii+0x840>)
   d9e34:	f004 f910 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,R/2,G/2,B/2);
   d9e38:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   d9e3c:	f000 bc20 	b.w	da680 <_Z9conditioniiiii+0x1080>
   d9e40:	2003e328 	.word	0x2003e328
            
        }
    }
    else
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)
   d9e44:	2b01      	cmp	r3, #1
   d9e46:	d904      	bls.n	d9e52 <_Z9conditioniiiii+0x852>
   d9e48:	f240 23d1 	movw	r3, #721	; 0x2d1
   d9e4c:	4298      	cmp	r0, r3
   d9e4e:	f040 80ca 	bne.w	d9fe6 <_Z9conditioniiiii+0x9e6>
        {
            strip.setPixelColor(inpix+16,R,G*1.2,B/3);
   d9e52:	4620      	mov	r0, r4
   d9e54:	f006 ffc0 	bl	e0dd8 <__aeabi_i2d>
   d9e58:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d9e5c:	4bd6      	ldr	r3, [pc, #856]	; (da1b8 <_Z9conditioniiiii+0xbb8>)
   d9e5e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d9e62:	f007 f81f 	bl	e0ea4 <__aeabi_dmul>
   d9e66:	f007 fadf 	bl	e1428 <__aeabi_d2uiz>
   d9e6a:	fa5f fa85 	uxtb.w	sl, r5
   d9e6e:	fa5f fb80 	uxtb.w	fp, r0
   d9e72:	f04f 0903 	mov.w	r9, #3
   d9e76:	f107 0110 	add.w	r1, r7, #16
   d9e7a:	fb96 f9f9 	sdiv	r9, r6, r9
   d9e7e:	fa5f f989 	uxtb.w	r9, r9
   d9e82:	465b      	mov	r3, fp
   d9e84:	4652      	mov	r2, sl
   d9e86:	b289      	uxth	r1, r1
   d9e88:	48cc      	ldr	r0, [pc, #816]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9e8a:	f8cd 9000 	str.w	r9, [sp]
   d9e8e:	f004 f8e3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G*1.2,B/3);
   d9e92:	f107 011f 	add.w	r1, r7, #31
   d9e96:	465b      	mov	r3, fp
   d9e98:	4652      	mov	r2, sl
   d9e9a:	b289      	uxth	r1, r1
   d9e9c:	48c7      	ldr	r0, [pc, #796]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9e9e:	f8cd 9000 	str.w	r9, [sp]
   d9ea2:	f004 f8d9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G*1.2,B/3);
   d9ea6:	f107 0120 	add.w	r1, r7, #32
   d9eaa:	465b      	mov	r3, fp
   d9eac:	4652      	mov	r2, sl
   d9eae:	b289      	uxth	r1, r1
   d9eb0:	48c2      	ldr	r0, [pc, #776]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9eb2:	f8cd 9000 	str.w	r9, [sp]
   d9eb6:	f004 f8cf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G*1.2,B/3);
   d9eba:	f107 011e 	add.w	r1, r7, #30
   d9ebe:	465b      	mov	r3, fp
   d9ec0:	4652      	mov	r2, sl
   d9ec2:	b289      	uxth	r1, r1
   d9ec4:	48bd      	ldr	r0, [pc, #756]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9ec6:	f8cd 9000 	str.w	r9, [sp]
   d9eca:	f004 f8c5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G*1.2,B/3);
   d9ece:	f107 0121 	add.w	r1, r7, #33	; 0x21
   d9ed2:	465b      	mov	r3, fp
   d9ed4:	4652      	mov	r2, sl
   d9ed6:	b289      	uxth	r1, r1
   d9ed8:	48b8      	ldr	r0, [pc, #736]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9eda:	f8cd 9000 	str.w	r9, [sp]
   d9ede:	f004 f8bb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G*1.2,B/3);
   d9ee2:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   d9ee6:	465b      	mov	r3, fp
   d9ee8:	4652      	mov	r2, sl
   d9eea:	b289      	uxth	r1, r1
   d9eec:	48b3      	ldr	r0, [pc, #716]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9eee:	f8cd 9000 	str.w	r9, [sp]
   d9ef2:	f004 f8b1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G*1.2,B/3);
   d9ef6:	f107 0122 	add.w	r1, r7, #34	; 0x22
   d9efa:	465b      	mov	r3, fp
   d9efc:	4652      	mov	r2, sl
   d9efe:	b289      	uxth	r1, r1
   d9f00:	48ae      	ldr	r0, [pc, #696]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f02:	f8cd 9000 	str.w	r9, [sp]
   d9f06:	f004 f8a7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G*1.2,B/3);
   d9f0a:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   d9f0e:	465b      	mov	r3, fp
   d9f10:	4652      	mov	r2, sl
   d9f12:	b289      	uxth	r1, r1
   d9f14:	48a9      	ldr	r0, [pc, #676]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f16:	f8cd 9000 	str.w	r9, [sp]
   d9f1a:	f004 f89d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,R,G*1.2,B/3);
   d9f1e:	f107 0123 	add.w	r1, r7, #35	; 0x23
   d9f22:	465b      	mov	r3, fp
   d9f24:	4652      	mov	r2, sl
   d9f26:	b289      	uxth	r1, r1
   d9f28:	48a4      	ldr	r0, [pc, #656]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f2a:	f8cd 9000 	str.w	r9, [sp]
   d9f2e:	f004 f893 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,R,G*1.2,B/3);
   d9f32:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   d9f36:	465b      	mov	r3, fp
   d9f38:	4652      	mov	r2, sl
   d9f3a:	b289      	uxth	r1, r1
   d9f3c:	489f      	ldr	r0, [pc, #636]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f3e:	f8cd 9000 	str.w	r9, [sp]
   d9f42:	f004 f889 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R,G*1.2,B/3);
   d9f46:	f107 0124 	add.w	r1, r7, #36	; 0x24
   d9f4a:	465b      	mov	r3, fp
   d9f4c:	4652      	mov	r2, sl
   d9f4e:	b289      	uxth	r1, r1
   d9f50:	489a      	ldr	r0, [pc, #616]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f52:	f8cd 9000 	str.w	r9, [sp]
   d9f56:	f004 f87f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,R,G*1.2,B/3);
   d9f5a:	f107 012b 	add.w	r1, r7, #43	; 0x2b
   d9f5e:	465b      	mov	r3, fp
   d9f60:	4652      	mov	r2, sl
   d9f62:	b289      	uxth	r1, r1
   d9f64:	4895      	ldr	r0, [pc, #596]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f66:	f8cd 9000 	str.w	r9, [sp]
   d9f6a:	f004 f875 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,R,G*1.2,B/3);
   d9f6e:	f107 011a 	add.w	r1, r7, #26
   d9f72:	465b      	mov	r3, fp
   d9f74:	4652      	mov	r2, sl
   d9f76:	b289      	uxth	r1, r1
   d9f78:	4890      	ldr	r0, [pc, #576]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f7a:	f8cd 9000 	str.w	r9, [sp]
   d9f7e:	f004 f86b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,R,G*1.2,B/3);
   d9f82:	f107 0125 	add.w	r1, r7, #37	; 0x25
   d9f86:	465b      	mov	r3, fp
   d9f88:	4652      	mov	r2, sl
   d9f8a:	b289      	uxth	r1, r1
   d9f8c:	488b      	ldr	r0, [pc, #556]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9f8e:	f8cd 9000 	str.w	r9, [sp]
   d9f92:	f004 f861 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,R,G*1.2,B/3);
   d9f96:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   d9f9a:	465b      	mov	r3, fp
   d9f9c:	4652      	mov	r2, sl
   d9f9e:	b289      	uxth	r1, r1
   d9fa0:	4886      	ldr	r0, [pc, #536]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9fa2:	f8cd 9000 	str.w	r9, [sp]
   d9fa6:	f004 f857 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,R,G*1.2,B/3);
   d9faa:	f107 0116 	add.w	r1, r7, #22
   d9fae:	465b      	mov	r3, fp
   d9fb0:	4652      	mov	r2, sl
   d9fb2:	b289      	uxth	r1, r1
   d9fb4:	4881      	ldr	r0, [pc, #516]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9fb6:	f8cd 9000 	str.w	r9, [sp]
   d9fba:	f004 f84d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,R,G*1.2,B/3);
   d9fbe:	f107 0119 	add.w	r1, r7, #25
   d9fc2:	465b      	mov	r3, fp
   d9fc4:	4652      	mov	r2, sl
   d9fc6:	b289      	uxth	r1, r1
   d9fc8:	487c      	ldr	r0, [pc, #496]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9fca:	f8cd 9000 	str.w	r9, [sp]
   d9fce:	f004 f843 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,R,G*1.2,B/3);
   d9fd2:	f107 0126 	add.w	r1, r7, #38	; 0x26
   d9fd6:	f8cd 9000 	str.w	r9, [sp]
   d9fda:	465b      	mov	r3, fp
   d9fdc:	4652      	mov	r2, sl
   d9fde:	b289      	uxth	r1, r1
   d9fe0:	4876      	ldr	r0, [pc, #472]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9fe2:	f004 f839 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   d9fe6:	f5a8 7316 	sub.w	r3, r8, #600	; 0x258
   d9fea:	2b1d      	cmp	r3, #29
   d9fec:	f200 80b1 	bhi.w	da152 <_Z9conditioniiiii+0xb52>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   d9ff0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   d9ff4:	4871      	ldr	r0, [pc, #452]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   d9ff6:	fa5f f985 	uxtb.w	r9, r5
   d9ffa:	fa5f fa84 	uxtb.w	sl, r4
   d9ffe:	fa5f fb86 	uxtb.w	fp, r6
   da002:	1c79      	adds	r1, r7, #1
   da004:	4653      	mov	r3, sl
   da006:	464a      	mov	r2, r9
   da008:	b289      	uxth	r1, r1
   da00a:	f8cd b000 	str.w	fp, [sp]
   da00e:	f004 f823 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   da012:	f107 011f 	add.w	r1, r7, #31
   da016:	4653      	mov	r3, sl
   da018:	464a      	mov	r2, r9
   da01a:	b289      	uxth	r1, r1
   da01c:	4867      	ldr	r0, [pc, #412]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da01e:	f8cd b000 	str.w	fp, [sp]
   da022:	f004 f819 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   da026:	f107 010f 	add.w	r1, r7, #15
   da02a:	4653      	mov	r3, sl
   da02c:	464a      	mov	r2, r9
   da02e:	b289      	uxth	r1, r1
   da030:	4862      	ldr	r0, [pc, #392]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da032:	f8cd b000 	str.w	fp, [sp]
   da036:	f004 f80f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   da03a:	f107 010e 	add.w	r1, r7, #14
   da03e:	4653      	mov	r3, sl
   da040:	464a      	mov	r2, r9
   da042:	b289      	uxth	r1, r1
   da044:	485d      	ldr	r0, [pc, #372]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da046:	f8cd b000 	str.w	fp, [sp]
   da04a:	f004 f805 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   da04e:	f107 010d 	add.w	r1, r7, #13
   da052:	4653      	mov	r3, sl
   da054:	464a      	mov	r2, r9
   da056:	b289      	uxth	r1, r1
   da058:	4858      	ldr	r0, [pc, #352]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da05a:	f8cd b000 	str.w	fp, [sp]
   da05e:	f003 fffb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   da062:	f107 0110 	add.w	r1, r7, #16
   da066:	4653      	mov	r3, sl
   da068:	464a      	mov	r2, r9
   da06a:	b289      	uxth	r1, r1
   da06c:	4853      	ldr	r0, [pc, #332]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da06e:	f8cd b000 	str.w	fp, [sp]
   da072:	f003 fff1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   da076:	f107 0111 	add.w	r1, r7, #17
   da07a:	4653      	mov	r3, sl
   da07c:	464a      	mov	r2, r9
   da07e:	b289      	uxth	r1, r1
   da080:	484e      	ldr	r0, [pc, #312]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da082:	f8cd b000 	str.w	fp, [sp]
   da086:	f003 ffe7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   da08a:	f107 0112 	add.w	r1, r7, #18
   da08e:	4653      	mov	r3, sl
   da090:	464a      	mov	r2, r9
   da092:	b289      	uxth	r1, r1
   da094:	4849      	ldr	r0, [pc, #292]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da096:	f8cd b000 	str.w	fp, [sp]
   da09a:	f003 ffdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   da09e:	f107 011e 	add.w	r1, r7, #30
   da0a2:	4653      	mov	r3, sl
   da0a4:	464a      	mov	r2, r9
   da0a6:	b289      	uxth	r1, r1
   da0a8:	4844      	ldr	r0, [pc, #272]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da0aa:	f8cd b000 	str.w	fp, [sp]
   da0ae:	f003 ffd3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   da0b2:	f107 011d 	add.w	r1, r7, #29
   da0b6:	4653      	mov	r3, sl
   da0b8:	464a      	mov	r2, r9
   da0ba:	b289      	uxth	r1, r1
   da0bc:	483f      	ldr	r0, [pc, #252]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da0be:	f8cd b000 	str.w	fp, [sp]
   da0c2:	f003 ffc9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   da0c6:	f107 0120 	add.w	r1, r7, #32
   da0ca:	4653      	mov	r3, sl
   da0cc:	464a      	mov	r2, r9
   da0ce:	b289      	uxth	r1, r1
   da0d0:	483a      	ldr	r0, [pc, #232]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da0d2:	f8cd b000 	str.w	fp, [sp]
   da0d6:	f003 ffbf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   da0da:	f107 0121 	add.w	r1, r7, #33	; 0x21
   da0de:	4653      	mov	r3, sl
   da0e0:	464a      	mov	r2, r9
   da0e2:	b289      	uxth	r1, r1
   da0e4:	4835      	ldr	r0, [pc, #212]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da0e6:	f8cd b000 	str.w	fp, [sp]
   da0ea:	f003 ffb5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   da0ee:	f107 0122 	add.w	r1, r7, #34	; 0x22
   da0f2:	4653      	mov	r3, sl
   da0f4:	464a      	mov	r2, r9
   da0f6:	b289      	uxth	r1, r1
   da0f8:	4830      	ldr	r0, [pc, #192]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da0fa:	f8cd b000 	str.w	fp, [sp]
   da0fe:	f003 ffab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   da102:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   da106:	4653      	mov	r3, sl
   da108:	464a      	mov	r2, r9
   da10a:	b289      	uxth	r1, r1
   da10c:	482b      	ldr	r0, [pc, #172]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da10e:	f8cd b000 	str.w	fp, [sp]
   da112:	f003 ffa1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   da116:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   da11a:	4653      	mov	r3, sl
   da11c:	464a      	mov	r2, r9
   da11e:	b289      	uxth	r1, r1
   da120:	4826      	ldr	r0, [pc, #152]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da122:	f8cd b000 	str.w	fp, [sp]
   da126:	f003 ff97 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   da12a:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   da12e:	4653      	mov	r3, sl
   da130:	464a      	mov	r2, r9
   da132:	b289      	uxth	r1, r1
   da134:	4821      	ldr	r0, [pc, #132]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da136:	f8cd b000 	str.w	fp, [sp]
   da13a:	f003 ff8d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   da13e:	f107 0131 	add.w	r1, r7, #49	; 0x31
   da142:	f8cd b000 	str.w	fp, [sp]
   da146:	4653      	mov	r3, sl
   da148:	464a      	mov	r2, r9
   da14a:	b289      	uxth	r1, r1
   da14c:	481b      	ldr	r0, [pc, #108]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da14e:	f003 ff83 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 802 || cnum == 803)
   da152:	9b03      	ldr	r3, [sp, #12]
   da154:	2b01      	cmp	r3, #1
   da156:	f200 80de 	bhi.w	da316 <_Z9conditioniiiii+0xd16>
        {
            strip.setPixelColor(inpix+17,R,G*1.2,B/3);
   da15a:	4620      	mov	r0, r4
   da15c:	f006 fe3c 	bl	e0dd8 <__aeabi_i2d>
   da160:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da164:	4b14      	ldr	r3, [pc, #80]	; (da1b8 <_Z9conditioniiiii+0xbb8>)
   da166:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   da16a:	f006 fe9b 	bl	e0ea4 <__aeabi_dmul>
   da16e:	f007 f95b 	bl	e1428 <__aeabi_d2uiz>
   da172:	fa5f f985 	uxtb.w	r9, r5
   da176:	fa5f fb80 	uxtb.w	fp, r0
   da17a:	f107 0111 	add.w	r1, r7, #17
   da17e:	f04f 0a03 	mov.w	sl, #3
   da182:	fb96 fafa 	sdiv	sl, r6, sl
   da186:	fa5f fa8a 	uxtb.w	sl, sl
   da18a:	f8cd a000 	str.w	sl, [sp]
   da18e:	465b      	mov	r3, fp
   da190:	464a      	mov	r2, r9
   da192:	b289      	uxth	r1, r1
   da194:	4809      	ldr	r0, [pc, #36]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da196:	f003 ff5f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+21,R,G*1.2,B/3);
   da19a:	f107 0115 	add.w	r1, r7, #21
   da19e:	f8cd a000 	str.w	sl, [sp]
   da1a2:	465b      	mov	r3, fp
   da1a4:	464a      	mov	r2, r9
   da1a6:	b289      	uxth	r1, r1
   da1a8:	4804      	ldr	r0, [pc, #16]	; (da1bc <_Z9conditioniiiii+0xbbc>)
   da1aa:	f003 ff55 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G*1.2,B/3);
   da1ae:	f107 011e 	add.w	r1, r7, #30
   da1b2:	f8cd a000 	str.w	sl, [sp]
   da1b6:	e003      	b.n	da1c0 <_Z9conditioniiiii+0xbc0>
   da1b8:	3ff33333 	.word	0x3ff33333
   da1bc:	2003e328 	.word	0x2003e328
   da1c0:	465b      	mov	r3, fp
   da1c2:	464a      	mov	r2, r9
   da1c4:	b289      	uxth	r1, r1
   da1c6:	48af      	ldr	r0, [pc, #700]	; (da484 <_Z9conditioniiiii+0xe84>)
   da1c8:	f003 ff46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G*1.2,B/3);
   da1cc:	f107 011d 	add.w	r1, r7, #29
   da1d0:	f8cd a000 	str.w	sl, [sp]
   da1d4:	465b      	mov	r3, fp
   da1d6:	464a      	mov	r2, r9
   da1d8:	b289      	uxth	r1, r1
   da1da:	48aa      	ldr	r0, [pc, #680]	; (da484 <_Z9conditioniiiii+0xe84>)
   da1dc:	f003 ff3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G*1.2,B/3);
   da1e0:	f107 0122 	add.w	r1, r7, #34	; 0x22
   da1e4:	f8cd a000 	str.w	sl, [sp]
   da1e8:	465b      	mov	r3, fp
   da1ea:	464a      	mov	r2, r9
   da1ec:	b289      	uxth	r1, r1
   da1ee:	48a5      	ldr	r0, [pc, #660]	; (da484 <_Z9conditioniiiii+0xe84>)
            strip.setPixelColor(inpix+20,R,G,B);
   da1f0:	fa5f fa84 	uxtb.w	sl, r4
   da1f4:	fa5f fb86 	uxtb.w	fp, r6
        {
            strip.setPixelColor(inpix+17,R,G*1.2,B/3);
            strip.setPixelColor(inpix+21,R,G*1.2,B/3);
            strip.setPixelColor(inpix+30,R,G*1.2,B/3);
            strip.setPixelColor(inpix+29,R,G*1.2,B/3);
            strip.setPixelColor(inpix+34,R,G*1.2,B/3);
   da1f8:	f003 ff2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R,G,B);
   da1fc:	f107 0114 	add.w	r1, r7, #20
   da200:	4653      	mov	r3, sl
   da202:	464a      	mov	r2, r9
   da204:	f8cd b000 	str.w	fp, [sp]
   da208:	b289      	uxth	r1, r1
   da20a:	489e      	ldr	r0, [pc, #632]	; (da484 <_Z9conditioniiiii+0xe84>)
   da20c:	f003 ff24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,R,G,B);
   da210:	f107 011a 	add.w	r1, r7, #26
   da214:	4653      	mov	r3, sl
   da216:	464a      	mov	r2, r9
   da218:	f8cd b000 	str.w	fp, [sp]
   da21c:	b289      	uxth	r1, r1
   da21e:	4899      	ldr	r0, [pc, #612]	; (da484 <_Z9conditioniiiii+0xe84>)
   da220:	f003 ff1a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R,G,B);
   da224:	f107 011b 	add.w	r1, r7, #27
   da228:	4653      	mov	r3, sl
   da22a:	464a      	mov	r2, r9
   da22c:	f8cd b000 	str.w	fp, [sp]
   da230:	b289      	uxth	r1, r1
   da232:	4894      	ldr	r0, [pc, #592]	; (da484 <_Z9conditioniiiii+0xe84>)
   da234:	f003 ff10 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,R,G,B);
   da238:	f107 011c 	add.w	r1, r7, #28
   da23c:	4653      	mov	r3, sl
   da23e:	464a      	mov	r2, r9
   da240:	f8cd b000 	str.w	fp, [sp]
   da244:	b289      	uxth	r1, r1
   da246:	488f      	ldr	r0, [pc, #572]	; (da484 <_Z9conditioniiiii+0xe84>)
   da248:	f003 ff06 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,R,G,B);
   da24c:	f107 0123 	add.w	r1, r7, #35	; 0x23
   da250:	4653      	mov	r3, sl
   da252:	464a      	mov	r2, r9
   da254:	f8cd b000 	str.w	fp, [sp]
   da258:	b289      	uxth	r1, r1
   da25a:	488a      	ldr	r0, [pc, #552]	; (da484 <_Z9conditioniiiii+0xe84>)
   da25c:	f003 fefc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R,G,B);
   da260:	f107 0124 	add.w	r1, r7, #36	; 0x24
   da264:	4653      	mov	r3, sl
   da266:	464a      	mov	r2, r9
   da268:	f8cd b000 	str.w	fp, [sp]
   da26c:	b289      	uxth	r1, r1
   da26e:	4885      	ldr	r0, [pc, #532]	; (da484 <_Z9conditioniiiii+0xe84>)
   da270:	f003 fef2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,R,G,B);
   da274:	f107 0125 	add.w	r1, r7, #37	; 0x25
   da278:	4653      	mov	r3, sl
   da27a:	464a      	mov	r2, r9
   da27c:	f8cd b000 	str.w	fp, [sp]
   da280:	b289      	uxth	r1, r1
   da282:	4880      	ldr	r0, [pc, #512]	; (da484 <_Z9conditioniiiii+0xe84>)
   da284:	f003 fee8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,R,G,B);
   da288:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   da28c:	4653      	mov	r3, sl
   da28e:	464a      	mov	r2, r9
   da290:	f8cd b000 	str.w	fp, [sp]
   da294:	b289      	uxth	r1, r1
   da296:	487b      	ldr	r0, [pc, #492]	; (da484 <_Z9conditioniiiii+0xe84>)
   da298:	f003 fede 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,R,G,B);
   da29c:	f107 012b 	add.w	r1, r7, #43	; 0x2b
   da2a0:	4653      	mov	r3, sl
   da2a2:	464a      	mov	r2, r9
   da2a4:	f8cd b000 	str.w	fp, [sp]
   da2a8:	b289      	uxth	r1, r1
   da2aa:	4876      	ldr	r0, [pc, #472]	; (da484 <_Z9conditioniiiii+0xe84>)
   da2ac:	f003 fed4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,R,G,B);
   da2b0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
   da2b4:	4653      	mov	r3, sl
   da2b6:	464a      	mov	r2, r9
   da2b8:	f8cd b000 	str.w	fp, [sp]
   da2bc:	b289      	uxth	r1, r1
   da2be:	4871      	ldr	r0, [pc, #452]	; (da484 <_Z9conditioniiiii+0xe84>)
   da2c0:	f003 feca 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,R,G,B);
   da2c4:	f107 0134 	add.w	r1, r7, #52	; 0x34
   da2c8:	4653      	mov	r3, sl
   da2ca:	464a      	mov	r2, r9
   da2cc:	f8cd b000 	str.w	fp, [sp]
   da2d0:	b289      	uxth	r1, r1
   da2d2:	486c      	ldr	r0, [pc, #432]	; (da484 <_Z9conditioniiiii+0xe84>)
   da2d4:	f003 fec0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,R,G,B);
   da2d8:	f107 0133 	add.w	r1, r7, #51	; 0x33
   da2dc:	4653      	mov	r3, sl
   da2de:	464a      	mov	r2, r9
   da2e0:	f8cd b000 	str.w	fp, [sp]
   da2e4:	b289      	uxth	r1, r1
   da2e6:	4867      	ldr	r0, [pc, #412]	; (da484 <_Z9conditioniiiii+0xe84>)
   da2e8:	f003 feb6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,R,G,B);
   da2ec:	f107 0135 	add.w	r1, r7, #53	; 0x35
   da2f0:	4653      	mov	r3, sl
   da2f2:	464a      	mov	r2, r9
   da2f4:	f8cd b000 	str.w	fp, [sp]
   da2f8:	b289      	uxth	r1, r1
   da2fa:	4862      	ldr	r0, [pc, #392]	; (da484 <_Z9conditioniiiii+0xe84>)
   da2fc:	f003 feac 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,R,G,B);
   da300:	f107 013b 	add.w	r1, r7, #59	; 0x3b
   da304:	f8cd b000 	str.w	fp, [sp]
   da308:	4653      	mov	r3, sl
   da30a:	464a      	mov	r2, r9
   da30c:	b289      	uxth	r1, r1
   da30e:	485d      	ldr	r0, [pc, #372]	; (da484 <_Z9conditioniiiii+0xe84>)
   da310:	f003 fea2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   da314:	e0b8      	b.n	da488 <_Z9conditioniiiii+0xe88>
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   da316:	f5b8 7f49 	cmp.w	r8, #804	; 0x324
   da31a:	f040 80b5 	bne.w	da488 <_Z9conditioniiiii+0xe88>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   da31e:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   da322:	4858      	ldr	r0, [pc, #352]	; (da484 <_Z9conditioniiiii+0xe84>)
   da324:	fa5f f985 	uxtb.w	r9, r5
   da328:	fa5f fa84 	uxtb.w	sl, r4
   da32c:	fa5f fb86 	uxtb.w	fp, r6
   da330:	1c79      	adds	r1, r7, #1
   da332:	4653      	mov	r3, sl
   da334:	464a      	mov	r2, r9
   da336:	f8cd b000 	str.w	fp, [sp]
   da33a:	b289      	uxth	r1, r1
   da33c:	f003 fe8c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   da340:	f107 011f 	add.w	r1, r7, #31
   da344:	4653      	mov	r3, sl
   da346:	464a      	mov	r2, r9
   da348:	f8cd b000 	str.w	fp, [sp]
   da34c:	b289      	uxth	r1, r1
   da34e:	484d      	ldr	r0, [pc, #308]	; (da484 <_Z9conditioniiiii+0xe84>)
   da350:	f003 fe82 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   da354:	f107 010f 	add.w	r1, r7, #15
   da358:	4653      	mov	r3, sl
   da35a:	464a      	mov	r2, r9
   da35c:	f8cd b000 	str.w	fp, [sp]
   da360:	b289      	uxth	r1, r1
   da362:	4848      	ldr	r0, [pc, #288]	; (da484 <_Z9conditioniiiii+0xe84>)
   da364:	f003 fe78 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   da368:	f107 010e 	add.w	r1, r7, #14
   da36c:	4653      	mov	r3, sl
   da36e:	464a      	mov	r2, r9
   da370:	f8cd b000 	str.w	fp, [sp]
   da374:	b289      	uxth	r1, r1
   da376:	4843      	ldr	r0, [pc, #268]	; (da484 <_Z9conditioniiiii+0xe84>)
   da378:	f003 fe6e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   da37c:	f107 010d 	add.w	r1, r7, #13
   da380:	4653      	mov	r3, sl
   da382:	464a      	mov	r2, r9
   da384:	f8cd b000 	str.w	fp, [sp]
   da388:	b289      	uxth	r1, r1
   da38a:	483e      	ldr	r0, [pc, #248]	; (da484 <_Z9conditioniiiii+0xe84>)
   da38c:	f003 fe64 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   da390:	f107 0110 	add.w	r1, r7, #16
   da394:	4653      	mov	r3, sl
   da396:	464a      	mov	r2, r9
   da398:	f8cd b000 	str.w	fp, [sp]
   da39c:	b289      	uxth	r1, r1
   da39e:	4839      	ldr	r0, [pc, #228]	; (da484 <_Z9conditioniiiii+0xe84>)
   da3a0:	f003 fe5a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   da3a4:	f107 0111 	add.w	r1, r7, #17
   da3a8:	4653      	mov	r3, sl
   da3aa:	464a      	mov	r2, r9
   da3ac:	f8cd b000 	str.w	fp, [sp]
   da3b0:	b289      	uxth	r1, r1
   da3b2:	4834      	ldr	r0, [pc, #208]	; (da484 <_Z9conditioniiiii+0xe84>)
   da3b4:	f003 fe50 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   da3b8:	f107 0112 	add.w	r1, r7, #18
   da3bc:	4653      	mov	r3, sl
   da3be:	464a      	mov	r2, r9
   da3c0:	f8cd b000 	str.w	fp, [sp]
   da3c4:	b289      	uxth	r1, r1
   da3c6:	482f      	ldr	r0, [pc, #188]	; (da484 <_Z9conditioniiiii+0xe84>)
   da3c8:	f003 fe46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   da3cc:	f107 011e 	add.w	r1, r7, #30
   da3d0:	4653      	mov	r3, sl
   da3d2:	464a      	mov	r2, r9
   da3d4:	f8cd b000 	str.w	fp, [sp]
   da3d8:	b289      	uxth	r1, r1
   da3da:	482a      	ldr	r0, [pc, #168]	; (da484 <_Z9conditioniiiii+0xe84>)
   da3dc:	f003 fe3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   da3e0:	f107 011d 	add.w	r1, r7, #29
   da3e4:	4653      	mov	r3, sl
   da3e6:	464a      	mov	r2, r9
   da3e8:	f8cd b000 	str.w	fp, [sp]
   da3ec:	b289      	uxth	r1, r1
   da3ee:	4825      	ldr	r0, [pc, #148]	; (da484 <_Z9conditioniiiii+0xe84>)
   da3f0:	f003 fe32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   da3f4:	f107 0120 	add.w	r1, r7, #32
   da3f8:	4653      	mov	r3, sl
   da3fa:	464a      	mov	r2, r9
   da3fc:	f8cd b000 	str.w	fp, [sp]
   da400:	b289      	uxth	r1, r1
   da402:	4820      	ldr	r0, [pc, #128]	; (da484 <_Z9conditioniiiii+0xe84>)
   da404:	f003 fe28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   da408:	f107 0121 	add.w	r1, r7, #33	; 0x21
   da40c:	4653      	mov	r3, sl
   da40e:	464a      	mov	r2, r9
   da410:	f8cd b000 	str.w	fp, [sp]
   da414:	b289      	uxth	r1, r1
   da416:	481b      	ldr	r0, [pc, #108]	; (da484 <_Z9conditioniiiii+0xe84>)
   da418:	f003 fe1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   da41c:	f107 0122 	add.w	r1, r7, #34	; 0x22
   da420:	4653      	mov	r3, sl
   da422:	464a      	mov	r2, r9
   da424:	f8cd b000 	str.w	fp, [sp]
   da428:	b289      	uxth	r1, r1
   da42a:	4816      	ldr	r0, [pc, #88]	; (da484 <_Z9conditioniiiii+0xe84>)
   da42c:	f003 fe14 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   da430:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   da434:	4653      	mov	r3, sl
   da436:	464a      	mov	r2, r9
   da438:	f8cd b000 	str.w	fp, [sp]
   da43c:	b289      	uxth	r1, r1
   da43e:	4811      	ldr	r0, [pc, #68]	; (da484 <_Z9conditioniiiii+0xe84>)
   da440:	f003 fe0a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   da444:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   da448:	4653      	mov	r3, sl
   da44a:	464a      	mov	r2, r9
   da44c:	f8cd b000 	str.w	fp, [sp]
   da450:	b289      	uxth	r1, r1
   da452:	480c      	ldr	r0, [pc, #48]	; (da484 <_Z9conditioniiiii+0xe84>)
   da454:	f003 fe00 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   da458:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   da45c:	4653      	mov	r3, sl
   da45e:	464a      	mov	r2, r9
   da460:	f8cd b000 	str.w	fp, [sp]
   da464:	b289      	uxth	r1, r1
   da466:	4807      	ldr	r0, [pc, #28]	; (da484 <_Z9conditioniiiii+0xe84>)
   da468:	f003 fdf6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   da46c:	f107 0131 	add.w	r1, r7, #49	; 0x31
   da470:	f8cd b000 	str.w	fp, [sp]
   da474:	4653      	mov	r3, sl
   da476:	464a      	mov	r2, r9
   da478:	b289      	uxth	r1, r1
   da47a:	4802      	ldr	r0, [pc, #8]	; (da484 <_Z9conditioniiiii+0xe84>)
   da47c:	f003 fdec 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   da480:	e00c      	b.n	da49c <_Z9conditioniiiii+0xe9c>
   da482:	bf00      	nop
   da484:	2003e328 	.word	0x2003e328
            strip.setPixelColor(inpix+52,R,G,B);
            strip.setPixelColor(inpix+51,R,G,B);
            strip.setPixelColor(inpix+53,R,G,B);
            strip.setPixelColor(inpix+59,R,G,B);
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   da488:	f1a8 03c8 	sub.w	r3, r8, #200	; 0xc8
   da48c:	2b20      	cmp	r3, #32
   da48e:	f67f af46 	bls.w	da31e <_Z9conditioniiiii+0xd1e>
   da492:	f5a8 7396 	sub.w	r3, r8, #300	; 0x12c
   da496:	2be7      	cmp	r3, #231	; 0xe7
   da498:	f67f af41 	bls.w	da31e <_Z9conditioniiiii+0xd1e>
            strip.setPixelColor(inpix+47,R,G,B);
            strip.setPixelColor(inpix+46,R,G,B);
            strip.setPixelColor(inpix+45,R,G,B);
            strip.setPixelColor(inpix+49,R,G,B);
        }
        if(cnum == 701 || cnum == 741)
   da49c:	f240 23bd 	movw	r3, #701	; 0x2bd
   da4a0:	4598      	cmp	r8, r3
   da4a2:	d004      	beq.n	da4ae <_Z9conditioniiiii+0xeae>
   da4a4:	f240 23e5 	movw	r3, #741	; 0x2e5
   da4a8:	4598      	cmp	r8, r3
   da4aa:	f040 8105 	bne.w	da6b8 <_Z9conditioniiiii+0x10b8>
        {
            strip.setPixelColor(inpix+1,R,G,B);
   da4ae:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   da4b2:	48cd      	ldr	r0, [pc, #820]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da4b4:	fa5f f985 	uxtb.w	r9, r5
   da4b8:	fa5f fa84 	uxtb.w	sl, r4
   da4bc:	fa5f fb86 	uxtb.w	fp, r6
   da4c0:	1c79      	adds	r1, r7, #1
   da4c2:	4653      	mov	r3, sl
   da4c4:	464a      	mov	r2, r9
   da4c6:	f8cd b000 	str.w	fp, [sp]
   da4ca:	b289      	uxth	r1, r1
   da4cc:	f003 fdc4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   da4d0:	f107 011f 	add.w	r1, r7, #31
   da4d4:	4653      	mov	r3, sl
   da4d6:	464a      	mov	r2, r9
   da4d8:	f8cd b000 	str.w	fp, [sp]
   da4dc:	b289      	uxth	r1, r1
   da4de:	48c2      	ldr	r0, [pc, #776]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da4e0:	f003 fdba 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,R,G,B);
   da4e4:	f107 010f 	add.w	r1, r7, #15
   da4e8:	4653      	mov	r3, sl
   da4ea:	464a      	mov	r2, r9
   da4ec:	f8cd b000 	str.w	fp, [sp]
   da4f0:	b289      	uxth	r1, r1
   da4f2:	48bd      	ldr	r0, [pc, #756]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da4f4:	f003 fdb0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,R,G,B);
   da4f8:	f107 010e 	add.w	r1, r7, #14
   da4fc:	4653      	mov	r3, sl
   da4fe:	464a      	mov	r2, r9
   da500:	f8cd b000 	str.w	fp, [sp]
   da504:	b289      	uxth	r1, r1
   da506:	48b8      	ldr	r0, [pc, #736]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da508:	f003 fda6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,R,G,B);
   da50c:	f107 010d 	add.w	r1, r7, #13
   da510:	4653      	mov	r3, sl
   da512:	464a      	mov	r2, r9
   da514:	f8cd b000 	str.w	fp, [sp]
   da518:	b289      	uxth	r1, r1
   da51a:	48b3      	ldr	r0, [pc, #716]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da51c:	f003 fd9c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   da520:	f107 0110 	add.w	r1, r7, #16
   da524:	4653      	mov	r3, sl
   da526:	464a      	mov	r2, r9
   da528:	f8cd b000 	str.w	fp, [sp]
   da52c:	b289      	uxth	r1, r1
   da52e:	48ae      	ldr	r0, [pc, #696]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da530:	f003 fd92 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,R,G,B);
   da534:	f107 0111 	add.w	r1, r7, #17
   da538:	4653      	mov	r3, sl
   da53a:	464a      	mov	r2, r9
   da53c:	f8cd b000 	str.w	fp, [sp]
   da540:	b289      	uxth	r1, r1
   da542:	48a9      	ldr	r0, [pc, #676]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da544:	f003 fd88 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   da548:	f107 0112 	add.w	r1, r7, #18
   da54c:	4653      	mov	r3, sl
   da54e:	464a      	mov	r2, r9
   da550:	f8cd b000 	str.w	fp, [sp]
   da554:	b289      	uxth	r1, r1
   da556:	48a4      	ldr	r0, [pc, #656]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da558:	f003 fd7e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,R,G,B);
   da55c:	f107 011e 	add.w	r1, r7, #30
   da560:	4653      	mov	r3, sl
   da562:	464a      	mov	r2, r9
   da564:	f8cd b000 	str.w	fp, [sp]
   da568:	b289      	uxth	r1, r1
   da56a:	489f      	ldr	r0, [pc, #636]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da56c:	f003 fd74 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   da570:	f107 011d 	add.w	r1, r7, #29
   da574:	4653      	mov	r3, sl
   da576:	464a      	mov	r2, r9
   da578:	f8cd b000 	str.w	fp, [sp]
   da57c:	b289      	uxth	r1, r1
   da57e:	489a      	ldr	r0, [pc, #616]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da580:	f003 fd6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   da584:	f107 0120 	add.w	r1, r7, #32
   da588:	4653      	mov	r3, sl
   da58a:	464a      	mov	r2, r9
   da58c:	f8cd b000 	str.w	fp, [sp]
   da590:	b289      	uxth	r1, r1
   da592:	4895      	ldr	r0, [pc, #596]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da594:	f003 fd60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,R,G,B);
   da598:	f107 0121 	add.w	r1, r7, #33	; 0x21
   da59c:	4653      	mov	r3, sl
   da59e:	464a      	mov	r2, r9
   da5a0:	f8cd b000 	str.w	fp, [sp]
   da5a4:	b289      	uxth	r1, r1
   da5a6:	4890      	ldr	r0, [pc, #576]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da5a8:	f003 fd56 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   da5ac:	f107 0122 	add.w	r1, r7, #34	; 0x22
   da5b0:	4653      	mov	r3, sl
   da5b2:	464a      	mov	r2, r9
   da5b4:	f8cd b000 	str.w	fp, [sp]
   da5b8:	b289      	uxth	r1, r1
   da5ba:	488b      	ldr	r0, [pc, #556]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da5bc:	f003 fd4c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   da5c0:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   da5c4:	4653      	mov	r3, sl
   da5c6:	464a      	mov	r2, r9
   da5c8:	f8cd b000 	str.w	fp, [sp]
   da5cc:	b289      	uxth	r1, r1
   da5ce:	4886      	ldr	r0, [pc, #536]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da5d0:	f003 fd42 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,R,G,B);
   da5d4:	f107 012e 	add.w	r1, r7, #46	; 0x2e
   da5d8:	4653      	mov	r3, sl
   da5da:	464a      	mov	r2, r9
   da5dc:	f8cd b000 	str.w	fp, [sp]
   da5e0:	b289      	uxth	r1, r1
   da5e2:	4881      	ldr	r0, [pc, #516]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da5e4:	f003 fd38 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,R,G,B);
   da5e8:	f107 012d 	add.w	r1, r7, #45	; 0x2d
   da5ec:	4653      	mov	r3, sl
   da5ee:	464a      	mov	r2, r9
   da5f0:	f8cd b000 	str.w	fp, [sp]
   da5f4:	b289      	uxth	r1, r1
   da5f6:	487c      	ldr	r0, [pc, #496]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da5f8:	f003 fd2e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,R,G,B);
   da5fc:	f107 0131 	add.w	r1, r7, #49	; 0x31
   da600:	4653      	mov	r3, sl
   da602:	464a      	mov	r2, r9
   da604:	f8cd b000 	str.w	fp, [sp]
   da608:	b289      	uxth	r1, r1
   da60a:	4877      	ldr	r0, [pc, #476]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da60c:	f003 fd24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,R/2,G/2,B/2);
   da610:	f04f 0902 	mov.w	r9, #2
   da614:	f107 010b 	add.w	r1, r7, #11
   da618:	fb95 faf9 	sdiv	sl, r5, r9
   da61c:	fb94 fbf9 	sdiv	fp, r4, r9
   da620:	fa5f fa8a 	uxtb.w	sl, sl
   da624:	fa5f fb8b 	uxtb.w	fp, fp
   da628:	fb96 f9f9 	sdiv	r9, r6, r9
   da62c:	fa5f f989 	uxtb.w	r9, r9
   da630:	465b      	mov	r3, fp
   da632:	4652      	mov	r2, sl
   da634:	b289      	uxth	r1, r1
   da636:	486c      	ldr	r0, [pc, #432]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da638:	f8cd 9000 	str.w	r9, [sp]
   da63c:	f003 fd0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R/2,G/2,B/2);
   da640:	f107 0114 	add.w	r1, r7, #20
   da644:	465b      	mov	r3, fp
   da646:	4652      	mov	r2, sl
   da648:	b289      	uxth	r1, r1
   da64a:	4867      	ldr	r0, [pc, #412]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da64c:	f8cd 9000 	str.w	r9, [sp]
   da650:	f003 fd02 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R/2,G/2,B/2);
   da654:	f107 011b 	add.w	r1, r7, #27
   da658:	465b      	mov	r3, fp
   da65a:	4652      	mov	r2, sl
   da65c:	b289      	uxth	r1, r1
   da65e:	4862      	ldr	r0, [pc, #392]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da660:	f8cd 9000 	str.w	r9, [sp]
   da664:	f003 fcf8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R/2,G/2,B/2);
   da668:	f107 0124 	add.w	r1, r7, #36	; 0x24
   da66c:	b289      	uxth	r1, r1
   da66e:	f8cd 9000 	str.w	r9, [sp]
   da672:	465b      	mov	r3, fp
   da674:	4652      	mov	r2, sl
   da676:	485c      	ldr	r0, [pc, #368]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da678:	f003 fcee 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,R/2,G/2,B/2);
   da67c:	f107 012b 	add.w	r1, r7, #43	; 0x2b
   da680:	465b      	mov	r3, fp
   da682:	4652      	mov	r2, sl
   da684:	b289      	uxth	r1, r1
   da686:	4858      	ldr	r0, [pc, #352]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da688:	f8cd 9000 	str.w	r9, [sp]
   da68c:	f003 fce4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,R/2,G/2,B/2);
   da690:	f107 0119 	add.w	r1, r7, #25
   da694:	465b      	mov	r3, fp
   da696:	4652      	mov	r2, sl
   da698:	b289      	uxth	r1, r1
   da69a:	4853      	ldr	r0, [pc, #332]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da69c:	f8cd 9000 	str.w	r9, [sp]
   da6a0:	f003 fcda 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,R/2,G/2,B/2);
   da6a4:	f107 0126 	add.w	r1, r7, #38	; 0x26
   da6a8:	f8cd 9000 	str.w	r9, [sp]
   da6ac:	465b      	mov	r3, fp
   da6ae:	4652      	mov	r2, sl
   da6b0:	b289      	uxth	r1, r1
   da6b2:	484d      	ldr	r0, [pc, #308]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da6b4:	f003 fcd0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)
   da6b8:	f240 23c7 	movw	r3, #711	; 0x2c7
   da6bc:	4598      	cmp	r8, r3
   da6be:	d009      	beq.n	da6d4 <_Z9conditioniiiii+0x10d4>
            strip.setPixelColor(inpix+42,R/2,G/2,B/2);
            strip.setPixelColor(inpix+25,R/2,G/2,B/2);
            strip.setPixelColor(inpix+38,R/2,G/2,B/2);
            
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)         //Fog
   da6c0:	f2a8 22db 	subw	r2, r8, #731	; 0x2db
   da6c4:	2a1f      	cmp	r2, #31
   da6c6:	f200 80a0 	bhi.w	da80a <_Z9conditioniiiii+0x120a>
   da6ca:	4b48      	ldr	r3, [pc, #288]	; (da7ec <_Z9conditioniiiii+0x11ec>)
   da6cc:	40d3      	lsrs	r3, r2
   da6ce:	07db      	lsls	r3, r3, #31
   da6d0:	f140 809b 	bpl.w	da80a <_Z9conditioniiiii+0x120a>
        {
            strip.setPixelColor(inpix+15,R,G,B);
   da6d4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
   da6d8:	4843      	ldr	r0, [pc, #268]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da6da:	b2ed      	uxtb	r5, r5
   da6dc:	b2e4      	uxtb	r4, r4
   da6de:	b2f6      	uxtb	r6, r6
   da6e0:	f107 010f 	add.w	r1, r7, #15
   da6e4:	4623      	mov	r3, r4
   da6e6:	462a      	mov	r2, r5
   da6e8:	b289      	uxth	r1, r1
   da6ea:	9600      	str	r6, [sp, #0]
   da6ec:	f003 fcb4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,R,G,B);
   da6f0:	f107 0110 	add.w	r1, r7, #16
   da6f4:	4623      	mov	r3, r4
   da6f6:	462a      	mov	r2, r5
   da6f8:	b289      	uxth	r1, r1
   da6fa:	483b      	ldr	r0, [pc, #236]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da6fc:	9600      	str	r6, [sp, #0]
   da6fe:	f003 fcab 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,R,G,B);
   da702:	f107 011f 	add.w	r1, r7, #31
   da706:	4623      	mov	r3, r4
   da708:	462a      	mov	r2, r5
   da70a:	b289      	uxth	r1, r1
   da70c:	4836      	ldr	r0, [pc, #216]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da70e:	9600      	str	r6, [sp, #0]
   da710:	f003 fca2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,R,G,B);
   da714:	f107 0120 	add.w	r1, r7, #32
   da718:	4623      	mov	r3, r4
   da71a:	462a      	mov	r2, r5
   da71c:	b289      	uxth	r1, r1
   da71e:	4832      	ldr	r0, [pc, #200]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da720:	9600      	str	r6, [sp, #0]
   da722:	f003 fc99 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,R,G,B);
   da726:	f107 012f 	add.w	r1, r7, #47	; 0x2f
   da72a:	4623      	mov	r3, r4
   da72c:	462a      	mov	r2, r5
   da72e:	b289      	uxth	r1, r1
   da730:	482d      	ldr	r0, [pc, #180]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da732:	9600      	str	r6, [sp, #0]
   da734:	f003 fc90 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,R,G,B);
   da738:	f107 0112 	add.w	r1, r7, #18
   da73c:	4623      	mov	r3, r4
   da73e:	462a      	mov	r2, r5
   da740:	b289      	uxth	r1, r1
   da742:	4829      	ldr	r0, [pc, #164]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da744:	9600      	str	r6, [sp, #0]
   da746:	f003 fc87 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,R,G,B);
   da74a:	f107 011d 	add.w	r1, r7, #29
   da74e:	4623      	mov	r3, r4
   da750:	462a      	mov	r2, r5
   da752:	b289      	uxth	r1, r1
   da754:	4824      	ldr	r0, [pc, #144]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da756:	9600      	str	r6, [sp, #0]
   da758:	f003 fc7e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,R,G,B);
   da75c:	f107 0122 	add.w	r1, r7, #34	; 0x22
   da760:	4623      	mov	r3, r4
   da762:	462a      	mov	r2, r5
   da764:	b289      	uxth	r1, r1
   da766:	4820      	ldr	r0, [pc, #128]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da768:	9600      	str	r6, [sp, #0]
   da76a:	f003 fc75 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,R,G,B);
   da76e:	f107 010b 	add.w	r1, r7, #11
   da772:	4623      	mov	r3, r4
   da774:	462a      	mov	r2, r5
   da776:	b289      	uxth	r1, r1
   da778:	481b      	ldr	r0, [pc, #108]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da77a:	9600      	str	r6, [sp, #0]
   da77c:	f003 fc6c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,R,G,B);
   da780:	f107 0114 	add.w	r1, r7, #20
   da784:	4623      	mov	r3, r4
   da786:	462a      	mov	r2, r5
   da788:	b289      	uxth	r1, r1
   da78a:	4817      	ldr	r0, [pc, #92]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da78c:	9600      	str	r6, [sp, #0]
   da78e:	f003 fc63 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,R,G,B);
   da792:	f107 011b 	add.w	r1, r7, #27
   da796:	4623      	mov	r3, r4
   da798:	462a      	mov	r2, r5
   da79a:	b289      	uxth	r1, r1
   da79c:	4812      	ldr	r0, [pc, #72]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da79e:	9600      	str	r6, [sp, #0]
   da7a0:	f003 fc5a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,R,G,B);
   da7a4:	f107 0124 	add.w	r1, r7, #36	; 0x24
   da7a8:	4623      	mov	r3, r4
   da7aa:	462a      	mov	r2, r5
   da7ac:	b289      	uxth	r1, r1
   da7ae:	480e      	ldr	r0, [pc, #56]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da7b0:	9600      	str	r6, [sp, #0]
   da7b2:	f003 fc51 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,R,G,B);
   da7b6:	f107 0116 	add.w	r1, r7, #22
   da7ba:	4623      	mov	r3, r4
   da7bc:	462a      	mov	r2, r5
   da7be:	b289      	uxth	r1, r1
   da7c0:	4809      	ldr	r0, [pc, #36]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da7c2:	9600      	str	r6, [sp, #0]
   da7c4:	f003 fc48 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,R,G,B);
   da7c8:	f107 0119 	add.w	r1, r7, #25
   da7cc:	4623      	mov	r3, r4
   da7ce:	462a      	mov	r2, r5
   da7d0:	b289      	uxth	r1, r1
   da7d2:	4805      	ldr	r0, [pc, #20]	; (da7e8 <_Z9conditioniiiii+0x11e8>)
   da7d4:	9600      	str	r6, [sp, #0]
   da7d6:	f003 fc3f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,R,G,B);
   da7da:	f107 0126 	add.w	r1, r7, #38	; 0x26
   da7de:	4623      	mov	r3, r4
   da7e0:	462a      	mov	r2, r5
   da7e2:	b289      	uxth	r1, r1
   da7e4:	e004      	b.n	da7f0 <_Z9conditioniiiii+0x11f0>
   da7e6:	bf00      	nop
   da7e8:	2003e328 	.word	0x2003e328
   da7ec:	c0100001 	.word	0xc0100001
   da7f0:	4827      	ldr	r0, [pc, #156]	; (da890 <_Z9conditioniiiii+0x1290>)
   da7f2:	9600      	str	r6, [sp, #0]
   da7f4:	f003 fc30 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+41,R,G,B);
   da7f8:	f107 0129 	add.w	r1, r7, #41	; 0x29
   da7fc:	9600      	str	r6, [sp, #0]
   da7fe:	4623      	mov	r3, r4
   da800:	462a      	mov	r2, r5
   da802:	b289      	uxth	r1, r1
   da804:	4822      	ldr	r0, [pc, #136]	; (da890 <_Z9conditioniiiii+0x1290>)
   da806:	f003 fc27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 781)
   da80a:	f240 330d 	movw	r3, #781	; 0x30d
   da80e:	4598      	cmp	r8, r3
   da810:	d13b      	bne.n	da88a <_Z9conditioniiiii+0x128a>
        {
            strip.setPixelColor(inpix+25,255,127,0);
   da812:	f8bd 4008 	ldrh.w	r4, [sp, #8]
   da816:	481e      	ldr	r0, [pc, #120]	; (da890 <_Z9conditioniiiii+0x1290>)
   da818:	2500      	movs	r5, #0
   da81a:	f104 0119 	add.w	r1, r4, #25
   da81e:	9500      	str	r5, [sp, #0]
   da820:	237f      	movs	r3, #127	; 0x7f
   da822:	22ff      	movs	r2, #255	; 0xff
   da824:	b289      	uxth	r1, r1
   da826:	f003 fc17 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,255,127,0);
   da82a:	f104 011b 	add.w	r1, r4, #27
   da82e:	9500      	str	r5, [sp, #0]
   da830:	237f      	movs	r3, #127	; 0x7f
   da832:	22ff      	movs	r2, #255	; 0xff
   da834:	b289      	uxth	r1, r1
   da836:	4816      	ldr	r0, [pc, #88]	; (da890 <_Z9conditioniiiii+0x1290>)
   da838:	f003 fc0e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,255,127,0);
   da83c:	f104 011c 	add.w	r1, r4, #28
   da840:	9500      	str	r5, [sp, #0]
   da842:	237f      	movs	r3, #127	; 0x7f
   da844:	22ff      	movs	r2, #255	; 0xff
   da846:	b289      	uxth	r1, r1
   da848:	4811      	ldr	r0, [pc, #68]	; (da890 <_Z9conditioniiiii+0x1290>)
   da84a:	f003 fc05 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,255,127,0);
   da84e:	f104 011d 	add.w	r1, r4, #29
   da852:	9500      	str	r5, [sp, #0]
   da854:	237f      	movs	r3, #127	; 0x7f
   da856:	22ff      	movs	r2, #255	; 0xff
   da858:	b289      	uxth	r1, r1
   da85a:	480d      	ldr	r0, [pc, #52]	; (da890 <_Z9conditioniiiii+0x1290>)
   da85c:	f003 fbfc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,255,127,0);
   da860:	f104 011e 	add.w	r1, r4, #30
   da864:	9500      	str	r5, [sp, #0]
   da866:	237f      	movs	r3, #127	; 0x7f
   da868:	22ff      	movs	r2, #255	; 0xff
   da86a:	b289      	uxth	r1, r1
   da86c:	4808      	ldr	r0, [pc, #32]	; (da890 <_Z9conditioniiiii+0x1290>)
   da86e:	f003 fbf3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,255,127,0);
   da872:	f104 011f 	add.w	r1, r4, #31
   da876:	4806      	ldr	r0, [pc, #24]	; (da890 <_Z9conditioniiiii+0x1290>)
   da878:	950e      	str	r5, [sp, #56]	; 0x38
   da87a:	237f      	movs	r3, #127	; 0x7f
   da87c:	22ff      	movs	r2, #255	; 0xff
   da87e:	b289      	uxth	r1, r1
        if(cnum > 599 || cnum < 623)
        {
            
        }
    }
}                                        
   da880:	b005      	add	sp, #20
   da882:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            strip.setPixelColor(inpix+25,255,127,0);
            strip.setPixelColor(inpix+27,255,127,0);
            strip.setPixelColor(inpix+28,255,127,0);
            strip.setPixelColor(inpix+29,255,127,0);
            strip.setPixelColor(inpix+30,255,127,0);
            strip.setPixelColor(inpix+31,255,127,0);
   da886:	f003 bbe7 	b.w	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(cnum > 599 || cnum < 623)
        {
            
        }
    }
}                                        
   da88a:	b005      	add	sp, #20
   da88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da890:	2003e328 	.word	0x2003e328
   da894:	00000000 	.word	0x00000000

000da898 <_Z5canimiib>:
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   da898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cnum > 199 && cnum < 235)
   da89c:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   da8a0:	b08f      	sub	sp, #60	; 0x3c
    if(cnum > 199 && cnum < 235)
   da8a2:	2b22      	cmp	r3, #34	; 0x22
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   da8a4:	9203      	str	r2, [sp, #12]
   da8a6:	f8df b290 	ldr.w	fp, [pc, #656]	; dab38 <_Z5canimiib+0x2a0>
    if(cnum > 199 && cnum < 235)
   da8aa:	f200 80d2 	bhi.w	daa52 <_Z5canimiib+0x1ba>
    {
        strip.setPixelColor(inpix+28,0,0,0);
   da8ae:	b28c      	uxth	r4, r1
   da8b0:	f104 071c 	add.w	r7, r4, #28
   da8b4:	b2bb      	uxth	r3, r7
   da8b6:	2500      	movs	r5, #0
   da8b8:	9302      	str	r3, [sp, #8]
        strip.setPixelColor(inpix+26,0,0,0);
   da8ba:	f104 081a 	add.w	r8, r4, #26
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
   da8be:	462b      	mov	r3, r5
   da8c0:	462a      	mov	r2, r5
   da8c2:	9902      	ldr	r1, [sp, #8]
   da8c4:	4899      	ldr	r0, [pc, #612]	; (dab2c <_Z5canimiib+0x294>)
   da8c6:	9500      	str	r5, [sp, #0]
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   da8c8:	f104 0916 	add.w	r9, r4, #22
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   da8cc:	fa1f f888 	uxth.w	r8, r8
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
   da8d0:	f003 fbc2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   da8d4:	fa1f f989 	uxth.w	r9, r9
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   da8d8:	462b      	mov	r3, r5
   da8da:	462a      	mov	r2, r5
   da8dc:	4641      	mov	r1, r8
   da8de:	4893      	ldr	r0, [pc, #588]	; (dab2c <_Z5canimiib+0x294>)
   da8e0:	9500      	str	r5, [sp, #0]
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
   da8e2:	3414      	adds	r4, #20
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   da8e4:	f003 fbb8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
   da8e8:	b2a4      	uxth	r4, r4
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   da8ea:	462b      	mov	r3, r5
   da8ec:	462a      	mov	r2, r5
   da8ee:	4649      	mov	r1, r9
   da8f0:	488e      	ldr	r0, [pc, #568]	; (dab2c <_Z5canimiib+0x294>)
   da8f2:	9500      	str	r5, [sp, #0]
   da8f4:	f003 fbb0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   da8f8:	9500      	str	r5, [sp, #0]
   da8fa:	462b      	mov	r3, r5
   da8fc:	462a      	mov	r2, r5
   da8fe:	4621      	mov	r1, r4
   da900:	488a      	ldr	r0, [pc, #552]	; (dab2c <_Z5canimiib+0x294>)
   da902:	f003 fba9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        for(i=0; i<100; i++)
   da906:	f8cb 5000 	str.w	r5, [fp]
   da90a:	f8db 3000 	ldr.w	r3, [fp]
   da90e:	2b63      	cmp	r3, #99	; 0x63
   da910:	dc13      	bgt.n	da93a <_Z5canimiib+0xa2>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   da912:	2000      	movs	r0, #0
   da914:	f005 ff24 	bl	e0760 <digitalRead>
   da918:	b948      	cbnz	r0, da92e <_Z5canimiib+0x96>
   da91a:	2001      	movs	r0, #1
   da91c:	f005 ff20 	bl	e0760 <digitalRead>
   da920:	b928      	cbnz	r0, da92e <_Z5canimiib+0x96>
   da922:	2002      	movs	r0, #2
   da924:	f005 ff1c 	bl	e0760 <digitalRead>
   da928:	2800      	cmp	r0, #0
   da92a:	f001 811f 	beq.w	dbb6c <_Z5canimiib+0x12d4>
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
        for(i=0; i<100; i++)
   da92e:	f8db 3000 	ldr.w	r3, [fp]
   da932:	3301      	adds	r3, #1
   da934:	f8cb 3000 	str.w	r3, [fp]
   da938:	e7e7      	b.n	da90a <_Z5canimiib+0x72>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+28,rclock/1.2,gclock*2,0);
   da93a:	f8df a204 	ldr.w	sl, [pc, #516]	; dab40 <_Z5canimiib+0x2a8>
   da93e:	4f7c      	ldr	r7, [pc, #496]	; (dab30 <_Z5canimiib+0x298>)
   da940:	f8da 0000 	ldr.w	r0, [sl]
   da944:	683e      	ldr	r6, [r7, #0]
   da946:	f006 fa47 	bl	e0dd8 <__aeabi_i2d>
   da94a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da94e:	4b79      	ldr	r3, [pc, #484]	; (dab34 <_Z5canimiib+0x29c>)
   da950:	f006 fbd2 	bl	e10f8 <__aeabi_ddiv>
   da954:	f006 fd68 	bl	e1428 <__aeabi_d2uiz>
   da958:	0076      	lsls	r6, r6, #1
   da95a:	2500      	movs	r5, #0
   da95c:	b2f6      	uxtb	r6, r6
   da95e:	4633      	mov	r3, r6
   da960:	b2c2      	uxtb	r2, r0
   da962:	9902      	ldr	r1, [sp, #8]
   da964:	4871      	ldr	r0, [pc, #452]	; (dab2c <_Z5canimiib+0x294>)
   da966:	9500      	str	r5, [sp, #0]
   da968:	f003 fb76 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   da96c:	486f      	ldr	r0, [pc, #444]	; (dab2c <_Z5canimiib+0x294>)
   da96e:	f003 f9d1 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   da972:	200a      	movs	r0, #10
   da974:	f004 fc54 	bl	df220 <delay>
        strip.setPixelColor(inpix+20,rclock/1.2,gclock*2,0);
   da978:	f8da 0000 	ldr.w	r0, [sl]
   da97c:	683e      	ldr	r6, [r7, #0]
   da97e:	f006 fa2b 	bl	e0dd8 <__aeabi_i2d>
   da982:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da986:	4b6b      	ldr	r3, [pc, #428]	; (dab34 <_Z5canimiib+0x29c>)
   da988:	f006 fbb6 	bl	e10f8 <__aeabi_ddiv>
   da98c:	f006 fd4c 	bl	e1428 <__aeabi_d2uiz>
   da990:	0076      	lsls	r6, r6, #1
   da992:	b2f6      	uxtb	r6, r6
   da994:	b2c2      	uxtb	r2, r0
   da996:	4633      	mov	r3, r6
   da998:	4621      	mov	r1, r4
   da99a:	4864      	ldr	r0, [pc, #400]	; (dab2c <_Z5canimiib+0x294>)
   da99c:	9500      	str	r5, [sp, #0]
   da99e:	f003 fb5b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   da9a2:	4862      	ldr	r0, [pc, #392]	; (dab2c <_Z5canimiib+0x294>)
   da9a4:	f003 f9b6 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   da9a8:	200a      	movs	r0, #10
   da9aa:	f004 fc39 	bl	df220 <delay>
        strip.setPixelColor(inpix+26,rclock/1.2,gclock*2,0);
   da9ae:	f8da 0000 	ldr.w	r0, [sl]
   da9b2:	683c      	ldr	r4, [r7, #0]
   da9b4:	f006 fa10 	bl	e0dd8 <__aeabi_i2d>
   da9b8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da9bc:	4b5d      	ldr	r3, [pc, #372]	; (dab34 <_Z5canimiib+0x29c>)
   da9be:	f006 fb9b 	bl	e10f8 <__aeabi_ddiv>
   da9c2:	f006 fd31 	bl	e1428 <__aeabi_d2uiz>
   da9c6:	0064      	lsls	r4, r4, #1
   da9c8:	b2e4      	uxtb	r4, r4
   da9ca:	4623      	mov	r3, r4
   da9cc:	b2c2      	uxtb	r2, r0
   da9ce:	4641      	mov	r1, r8
   da9d0:	4856      	ldr	r0, [pc, #344]	; (dab2c <_Z5canimiib+0x294>)
   da9d2:	9500      	str	r5, [sp, #0]
   da9d4:	f003 fb40 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   da9d8:	4854      	ldr	r0, [pc, #336]	; (dab2c <_Z5canimiib+0x294>)
   da9da:	f003 f99b 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   da9de:	200a      	movs	r0, #10
   da9e0:	f004 fc1e 	bl	df220 <delay>
        strip.setPixelColor(inpix+22,rclock/1.2,gclock*2,0);
   da9e4:	f8da 0000 	ldr.w	r0, [sl]
   da9e8:	683c      	ldr	r4, [r7, #0]
   da9ea:	f006 f9f5 	bl	e0dd8 <__aeabi_i2d>
   da9ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da9f2:	4b50      	ldr	r3, [pc, #320]	; (dab34 <_Z5canimiib+0x29c>)
   da9f4:	f006 fb80 	bl	e10f8 <__aeabi_ddiv>
   da9f8:	f006 fd16 	bl	e1428 <__aeabi_d2uiz>
   da9fc:	0064      	lsls	r4, r4, #1
   da9fe:	b2e4      	uxtb	r4, r4
   daa00:	4623      	mov	r3, r4
   daa02:	b2c2      	uxtb	r2, r0
   daa04:	9500      	str	r5, [sp, #0]
   daa06:	4649      	mov	r1, r9
   daa08:	4848      	ldr	r0, [pc, #288]	; (dab2c <_Z5canimiib+0x294>)
   daa0a:	f003 fb25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(tmr)
   daa0e:	9b03      	ldr	r3, [sp, #12]
   daa10:	2b00      	cmp	r3, #0
   daa12:	f001 80f1 	beq.w	dbbf8 <_Z5canimiib+0x1360>
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            strip.show();
   daa16:	4845      	ldr	r0, [pc, #276]	; (dab2c <_Z5canimiib+0x294>)
   daa18:	f003 f97c 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            for(i=0; i<100; i++)
   daa1c:	4b46      	ldr	r3, [pc, #280]	; (dab38 <_Z5canimiib+0x2a0>)
   daa1e:	601d      	str	r5, [r3, #0]
   daa20:	f8db 3000 	ldr.w	r3, [fp]
   daa24:	2b63      	cmp	r3, #99	; 0x63
   daa26:	f301 80e7 	bgt.w	dbbf8 <_Z5canimiib+0x1360>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   daa2a:	2000      	movs	r0, #0
   daa2c:	f005 fe98 	bl	e0760 <digitalRead>
   daa30:	b948      	cbnz	r0, daa46 <_Z5canimiib+0x1ae>
   daa32:	2001      	movs	r0, #1
   daa34:	f005 fe94 	bl	e0760 <digitalRead>
   daa38:	b928      	cbnz	r0, daa46 <_Z5canimiib+0x1ae>
   daa3a:	2002      	movs	r0, #2
   daa3c:	f005 fe90 	bl	e0760 <digitalRead>
   daa40:	2800      	cmp	r0, #0
   daa42:	f001 8098 	beq.w	dbb76 <_Z5canimiib+0x12de>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            strip.show();
            for(i=0; i<100; i++)
   daa46:	f8db 3000 	ldr.w	r3, [fp]
   daa4a:	3301      	adds	r3, #1
   daa4c:	f8cb 3000 	str.w	r3, [fp]
   daa50:	e7e6      	b.n	daa20 <_Z5canimiib+0x188>
                    delay(5);
                }
            }
        }
    }
    else if(cnum > 299 && cnum < 322)
   daa52:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   daa56:	2b15      	cmp	r3, #21
   daa58:	f200 8174 	bhi.w	dad44 <_Z5canimiib+0x4ac>
    {
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   daa5c:	b28c      	uxth	r4, r1
   daa5e:	4e37      	ldr	r6, [pc, #220]	; (dab3c <_Z5canimiib+0x2a4>)
   daa60:	4d33      	ldr	r5, [pc, #204]	; (dab30 <_Z5canimiib+0x298>)
   daa62:	7832      	ldrb	r2, [r6, #0]
   daa64:	782b      	ldrb	r3, [r5, #0]
   daa66:	4831      	ldr	r0, [pc, #196]	; (dab2c <_Z5canimiib+0x294>)
   daa68:	9200      	str	r2, [sp, #0]
   daa6a:	f104 080c 	add.w	r8, r4, #12
   daa6e:	fa1f f888 	uxth.w	r8, r8
   daa72:	2200      	movs	r2, #0
   daa74:	4641      	mov	r1, r8
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   daa76:	f104 091b 	add.w	r9, r4, #27
            }
        }
    }
    else if(cnum > 299 && cnum < 322)
    {
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   daa7a:	f003 faed 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   daa7e:	fa1f f989 	uxth.w	r9, r9
   daa82:	7832      	ldrb	r2, [r6, #0]
   daa84:	782b      	ldrb	r3, [r5, #0]
   daa86:	4829      	ldr	r0, [pc, #164]	; (dab2c <_Z5canimiib+0x294>)
   daa88:	9200      	str	r2, [sp, #0]
   daa8a:	4649      	mov	r1, r9
   daa8c:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   daa8e:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
    }
    else if(cnum > 299 && cnum < 322)
    {
        strip.setPixelColor(inpix+12,0,gclock,bclock);
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   daa92:	f003 fae1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   daa96:	fa1f fa8a 	uxth.w	sl, sl
   daa9a:	7832      	ldrb	r2, [r6, #0]
   daa9c:	782b      	ldrb	r3, [r5, #0]
   daa9e:	4823      	ldr	r0, [pc, #140]	; (dab2c <_Z5canimiib+0x294>)
   daaa0:	9200      	str	r2, [sp, #0]
   daaa2:	4651      	mov	r1, sl
   daaa4:	2200      	movs	r2, #0
   daaa6:	f003 fad7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   daaaa:	f104 0309 	add.w	r3, r4, #9
   daaae:	b29b      	uxth	r3, r3
   daab0:	2700      	movs	r7, #0
   daab2:	9302      	str	r3, [sp, #8]
   daab4:	463a      	mov	r2, r7
   daab6:	463b      	mov	r3, r7
   daab8:	9902      	ldr	r1, [sp, #8]
   daaba:	481c      	ldr	r0, [pc, #112]	; (dab2c <_Z5canimiib+0x294>)
   daabc:	9700      	str	r7, [sp, #0]
   daabe:	f003 facb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
   daac2:	f104 031c 	add.w	r3, r4, #28
   daac6:	b29b      	uxth	r3, r3
   daac8:	9303      	str	r3, [sp, #12]
   daaca:	463a      	mov	r2, r7
   daacc:	463b      	mov	r3, r7
   daace:	9903      	ldr	r1, [sp, #12]
   daad0:	4816      	ldr	r0, [pc, #88]	; (dab2c <_Z5canimiib+0x294>)
   daad2:	9700      	str	r7, [sp, #0]
   daad4:	f003 fac0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
   daad8:	f104 0329 	add.w	r3, r4, #41	; 0x29
   daadc:	b29b      	uxth	r3, r3
   daade:	9304      	str	r3, [sp, #16]
   daae0:	463a      	mov	r2, r7
   daae2:	463b      	mov	r3, r7
   daae4:	9904      	ldr	r1, [sp, #16]
   daae6:	4811      	ldr	r0, [pc, #68]	; (dab2c <_Z5canimiib+0x294>)
   daae8:	9700      	str	r7, [sp, #0]
   daaea:	f003 fab5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   daaee:	480f      	ldr	r0, [pc, #60]	; (dab2c <_Z5canimiib+0x294>)
   daaf0:	f003 f910 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   daaf4:	f8cb 7000 	str.w	r7, [fp]
   daaf8:	f8db 3000 	ldr.w	r3, [fp]
   daafc:	4f0e      	ldr	r7, [pc, #56]	; (dab38 <_Z5canimiib+0x2a0>)
   daafe:	2b31      	cmp	r3, #49	; 0x31
   dab00:	dc20      	bgt.n	dab44 <_Z5canimiib+0x2ac>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dab02:	2000      	movs	r0, #0
   dab04:	f005 fe2c 	bl	e0760 <digitalRead>
   dab08:	b948      	cbnz	r0, dab1e <_Z5canimiib+0x286>
   dab0a:	2001      	movs	r0, #1
   dab0c:	f005 fe28 	bl	e0760 <digitalRead>
   dab10:	b928      	cbnz	r0, dab1e <_Z5canimiib+0x286>
   dab12:	2002      	movs	r0, #2
   dab14:	f005 fe24 	bl	e0760 <digitalRead>
   dab18:	2800      	cmp	r0, #0
   dab1a:	f001 8031 	beq.w	dbb80 <_Z5canimiib+0x12e8>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dab1e:	f8db 3000 	ldr.w	r3, [fp]
   dab22:	3301      	adds	r3, #1
   dab24:	f8cb 3000 	str.w	r3, [fp]
   dab28:	e7e6      	b.n	daaf8 <_Z5canimiib+0x260>
   dab2a:	bf00      	nop
   dab2c:	2003e328 	.word	0x2003e328
   dab30:	2003e314 	.word	0x2003e314
   dab34:	3ff33333 	.word	0x3ff33333
   dab38:	2003e33c 	.word	0x2003e33c
   dab3c:	2003e35c 	.word	0x2003e35c
   dab40:	2003e350 	.word	0x2003e350
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
   dab44:	f104 030b 	add.w	r3, r4, #11
   dab48:	b29b      	uxth	r3, r3
   dab4a:	9305      	str	r3, [sp, #20]
   dab4c:	7832      	ldrb	r2, [r6, #0]
   dab4e:	782b      	ldrb	r3, [r5, #0]
   dab50:	9905      	ldr	r1, [sp, #20]
   dab52:	9200      	str	r2, [sp, #0]
   dab54:	4877      	ldr	r0, [pc, #476]	; (dad34 <_Z5canimiib+0x49c>)
   dab56:	2200      	movs	r2, #0
   dab58:	f003 fa7e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   dab5c:	f104 031a 	add.w	r3, r4, #26
   dab60:	b29b      	uxth	r3, r3
   dab62:	9306      	str	r3, [sp, #24]
   dab64:	7832      	ldrb	r2, [r6, #0]
   dab66:	782b      	ldrb	r3, [r5, #0]
   dab68:	9906      	ldr	r1, [sp, #24]
   dab6a:	9200      	str	r2, [sp, #0]
   dab6c:	4871      	ldr	r0, [pc, #452]	; (dad34 <_Z5canimiib+0x49c>)
   dab6e:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   dab70:	f104 0b2b 	add.w	fp, r4, #43	; 0x2b
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   dab74:	f003 fa70 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   dab78:	fa1f fb8b 	uxth.w	fp, fp
   dab7c:	7832      	ldrb	r2, [r6, #0]
   dab7e:	782b      	ldrb	r3, [r5, #0]
   dab80:	486c      	ldr	r0, [pc, #432]	; (dad34 <_Z5canimiib+0x49c>)
   dab82:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+12,0,0,0);
   dab84:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   dab86:	2200      	movs	r2, #0
   dab88:	4659      	mov	r1, fp
   dab8a:	f003 fa65 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   dab8e:	462b      	mov	r3, r5
   dab90:	462a      	mov	r2, r5
   dab92:	9500      	str	r5, [sp, #0]
   dab94:	4641      	mov	r1, r8
   dab96:	4867      	ldr	r0, [pc, #412]	; (dad34 <_Z5canimiib+0x49c>)
   dab98:	f003 fa5e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
   dab9c:	462b      	mov	r3, r5
   dab9e:	462a      	mov	r2, r5
   daba0:	9500      	str	r5, [sp, #0]
   daba2:	4649      	mov	r1, r9
   daba4:	4863      	ldr	r0, [pc, #396]	; (dad34 <_Z5canimiib+0x49c>)
   daba6:	f003 fa57 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
   dabaa:	462b      	mov	r3, r5
   dabac:	462a      	mov	r2, r5
   dabae:	9500      	str	r5, [sp, #0]
   dabb0:	4651      	mov	r1, sl
   dabb2:	4860      	ldr	r0, [pc, #384]	; (dad34 <_Z5canimiib+0x49c>)
   dabb4:	f003 fa50 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dabb8:	485e      	ldr	r0, [pc, #376]	; (dad34 <_Z5canimiib+0x49c>)
   dabba:	f003 f8ab 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dabbe:	603d      	str	r5, [r7, #0]
   dabc0:	463d      	mov	r5, r7
   dabc2:	683b      	ldr	r3, [r7, #0]
   dabc4:	f8df 8178 	ldr.w	r8, [pc, #376]	; dad40 <_Z5canimiib+0x4a8>
   dabc8:	2b31      	cmp	r3, #49	; 0x31
   dabca:	dc11      	bgt.n	dabf0 <_Z5canimiib+0x358>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dabcc:	2000      	movs	r0, #0
   dabce:	f005 fdc7 	bl	e0760 <digitalRead>
   dabd2:	b948      	cbnz	r0, dabe8 <_Z5canimiib+0x350>
   dabd4:	2001      	movs	r0, #1
   dabd6:	f005 fdc3 	bl	e0760 <digitalRead>
   dabda:	b928      	cbnz	r0, dabe8 <_Z5canimiib+0x350>
   dabdc:	2002      	movs	r0, #2
   dabde:	f005 fdbf 	bl	e0760 <digitalRead>
   dabe2:	2800      	cmp	r0, #0
   dabe4:	f000 87d1 	beq.w	dbb8a <_Z5canimiib+0x12f2>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dabe8:	682b      	ldr	r3, [r5, #0]
   dabea:	3301      	adds	r3, #1
   dabec:	602b      	str	r3, [r5, #0]
   dabee:	e7e8      	b.n	dabc2 <_Z5canimiib+0x32a>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   dabf0:	4f51      	ldr	r7, [pc, #324]	; (dad38 <_Z5canimiib+0x4a0>)
   dabf2:	4e52      	ldr	r6, [pc, #328]	; (dad3c <_Z5canimiib+0x4a4>)
   dabf4:	783a      	ldrb	r2, [r7, #0]
   dabf6:	7833      	ldrb	r3, [r6, #0]
   dabf8:	484e      	ldr	r0, [pc, #312]	; (dad34 <_Z5canimiib+0x49c>)
   dabfa:	9200      	str	r2, [sp, #0]
   dabfc:	f104 090a 	add.w	r9, r4, #10
   dac00:	fa1f f989 	uxth.w	r9, r9
   dac04:	2200      	movs	r2, #0
   dac06:	4649      	mov	r1, r9
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   dac08:	f104 0a19 	add.w	sl, r4, #25
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   dac0c:	f003 fa24 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   dac10:	fa1f fa8a 	uxth.w	sl, sl
   dac14:	783a      	ldrb	r2, [r7, #0]
   dac16:	7833      	ldrb	r3, [r6, #0]
   dac18:	4846      	ldr	r0, [pc, #280]	; (dad34 <_Z5canimiib+0x49c>)
   dac1a:	9200      	str	r2, [sp, #0]
   dac1c:	4651      	mov	r1, sl
   dac1e:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   dac20:	342a      	adds	r4, #42	; 0x2a
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   dac22:	f003 fa19 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   dac26:	b2a4      	uxth	r4, r4
   dac28:	783a      	ldrb	r2, [r7, #0]
   dac2a:	7833      	ldrb	r3, [r6, #0]
   dac2c:	4841      	ldr	r0, [pc, #260]	; (dad34 <_Z5canimiib+0x49c>)
   dac2e:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   dac30:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   dac32:	2200      	movs	r2, #0
   dac34:	4621      	mov	r1, r4
   dac36:	f003 fa0f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   dac3a:	462b      	mov	r3, r5
   dac3c:	462a      	mov	r2, r5
   dac3e:	9905      	ldr	r1, [sp, #20]
   dac40:	483c      	ldr	r0, [pc, #240]	; (dad34 <_Z5canimiib+0x49c>)
   dac42:	9500      	str	r5, [sp, #0]
   dac44:	f003 fa08 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   dac48:	462b      	mov	r3, r5
   dac4a:	462a      	mov	r2, r5
   dac4c:	9906      	ldr	r1, [sp, #24]
   dac4e:	4839      	ldr	r0, [pc, #228]	; (dad34 <_Z5canimiib+0x49c>)
   dac50:	9500      	str	r5, [sp, #0]
   dac52:	f003 fa01 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
   dac56:	4659      	mov	r1, fp
   dac58:	462b      	mov	r3, r5
   dac5a:	462a      	mov	r2, r5
   dac5c:	4835      	ldr	r0, [pc, #212]	; (dad34 <_Z5canimiib+0x49c>)
   dac5e:	9500      	str	r5, [sp, #0]
   dac60:	f003 f9fa 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dac64:	4833      	ldr	r0, [pc, #204]	; (dad34 <_Z5canimiib+0x49c>)
   dac66:	f003 f855 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   dac6a:	46c3      	mov	fp, r8
        for(i=0; i<50; i++)
   dac6c:	f8c8 5000 	str.w	r5, [r8]
   dac70:	f8d8 3000 	ldr.w	r3, [r8]
   dac74:	4d32      	ldr	r5, [pc, #200]	; (dad40 <_Z5canimiib+0x4a8>)
   dac76:	2b31      	cmp	r3, #49	; 0x31
   dac78:	dc13      	bgt.n	daca2 <_Z5canimiib+0x40a>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dac7a:	2000      	movs	r0, #0
   dac7c:	f005 fd70 	bl	e0760 <digitalRead>
   dac80:	b948      	cbnz	r0, dac96 <_Z5canimiib+0x3fe>
   dac82:	2001      	movs	r0, #1
   dac84:	f005 fd6c 	bl	e0760 <digitalRead>
   dac88:	b928      	cbnz	r0, dac96 <_Z5canimiib+0x3fe>
   dac8a:	2002      	movs	r0, #2
   dac8c:	f005 fd68 	bl	e0760 <digitalRead>
   dac90:	2800      	cmp	r0, #0
   dac92:	f000 877f 	beq.w	dbb94 <_Z5canimiib+0x12fc>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dac96:	f8db 3000 	ldr.w	r3, [fp]
   dac9a:	3301      	adds	r3, #1
   dac9c:	f8cb 3000 	str.w	r3, [fp]
   daca0:	e7e6      	b.n	dac70 <_Z5canimiib+0x3d8>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
   daca2:	783a      	ldrb	r2, [r7, #0]
   daca4:	7833      	ldrb	r3, [r6, #0]
   daca6:	9902      	ldr	r1, [sp, #8]
   daca8:	9200      	str	r2, [sp, #0]
   dacaa:	4822      	ldr	r0, [pc, #136]	; (dad34 <_Z5canimiib+0x49c>)
   dacac:	2200      	movs	r2, #0
   dacae:	f003 f9d3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
   dacb2:	783a      	ldrb	r2, [r7, #0]
   dacb4:	7833      	ldrb	r3, [r6, #0]
   dacb6:	9903      	ldr	r1, [sp, #12]
   dacb8:	9200      	str	r2, [sp, #0]
   dacba:	481e      	ldr	r0, [pc, #120]	; (dad34 <_Z5canimiib+0x49c>)
   dacbc:	2200      	movs	r2, #0
   dacbe:	f003 f9cb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   dacc2:	783a      	ldrb	r2, [r7, #0]
   dacc4:	7833      	ldrb	r3, [r6, #0]
   dacc6:	9904      	ldr	r1, [sp, #16]
   dacc8:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dacca:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   daccc:	2200      	movs	r2, #0
   dacce:	4819      	ldr	r0, [pc, #100]	; (dad34 <_Z5canimiib+0x49c>)
   dacd0:	f003 f9c2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dacd4:	4633      	mov	r3, r6
   dacd6:	4632      	mov	r2, r6
   dacd8:	4649      	mov	r1, r9
   dacda:	4816      	ldr	r0, [pc, #88]	; (dad34 <_Z5canimiib+0x49c>)
   dacdc:	9600      	str	r6, [sp, #0]
   dacde:	f003 f9bb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
   dace2:	4633      	mov	r3, r6
   dace4:	4632      	mov	r2, r6
   dace6:	4651      	mov	r1, sl
   dace8:	4812      	ldr	r0, [pc, #72]	; (dad34 <_Z5canimiib+0x49c>)
   dacea:	9600      	str	r6, [sp, #0]
   dacec:	f003 f9b4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
   dacf0:	4621      	mov	r1, r4
   dacf2:	4633      	mov	r3, r6
   dacf4:	4632      	mov	r2, r6
   dacf6:	480f      	ldr	r0, [pc, #60]	; (dad34 <_Z5canimiib+0x49c>)
   dacf8:	9600      	str	r6, [sp, #0]
   dacfa:	f003 f9ad 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dacfe:	480d      	ldr	r0, [pc, #52]	; (dad34 <_Z5canimiib+0x49c>)
   dad00:	f003 f808 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   dad04:	462c      	mov	r4, r5
        for(i=0; i<50; i++)
   dad06:	602e      	str	r6, [r5, #0]
   dad08:	682b      	ldr	r3, [r5, #0]
   dad0a:	2b31      	cmp	r3, #49	; 0x31
   dad0c:	f300 8774 	bgt.w	dbbf8 <_Z5canimiib+0x1360>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dad10:	2000      	movs	r0, #0
   dad12:	f005 fd25 	bl	e0760 <digitalRead>
   dad16:	b948      	cbnz	r0, dad2c <_Z5canimiib+0x494>
   dad18:	2001      	movs	r0, #1
   dad1a:	f005 fd21 	bl	e0760 <digitalRead>
   dad1e:	b928      	cbnz	r0, dad2c <_Z5canimiib+0x494>
   dad20:	2002      	movs	r0, #2
   dad22:	f005 fd1d 	bl	e0760 <digitalRead>
   dad26:	2800      	cmp	r0, #0
   dad28:	f000 8739 	beq.w	dbb9e <_Z5canimiib+0x1306>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dad2c:	6823      	ldr	r3, [r4, #0]
   dad2e:	3301      	adds	r3, #1
   dad30:	6023      	str	r3, [r4, #0]
   dad32:	e7e9      	b.n	dad08 <_Z5canimiib+0x470>
   dad34:	2003e328 	.word	0x2003e328
   dad38:	2003e35c 	.word	0x2003e35c
   dad3c:	2003e314 	.word	0x2003e314
   dad40:	2003e33c 	.word	0x2003e33c
            {
                delay(5);
            }
        }
    }
    else if(cnum > 499 && cnum < 533)
   dad44:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   dad48:	2b20      	cmp	r3, #32
   dad4a:	f200 824f 	bhi.w	db1ec <_Z5canimiib+0x954>
    {
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   dad4e:	b28c      	uxth	r4, r1
   dad50:	4d97      	ldr	r5, [pc, #604]	; (dafb0 <_Z5canimiib+0x718>)
   dad52:	4f98      	ldr	r7, [pc, #608]	; (dafb4 <_Z5canimiib+0x71c>)
   dad54:	782a      	ldrb	r2, [r5, #0]
   dad56:	683b      	ldr	r3, [r7, #0]
   dad58:	4897      	ldr	r0, [pc, #604]	; (dafb8 <_Z5canimiib+0x720>)
   dad5a:	9200      	str	r2, [sp, #0]
   dad5c:	f104 080c 	add.w	r8, r4, #12
   dad60:	fa1f f888 	uxth.w	r8, r8
   dad64:	2603      	movs	r6, #3
   dad66:	2200      	movs	r2, #0
   dad68:	4641      	mov	r1, r8
   dad6a:	fb93 f3f6 	sdiv	r3, r3, r6
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   dad6e:	f104 0916 	add.w	r9, r4, #22
            }
        }
    }
    else if(cnum > 499 && cnum < 533)
    {
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   dad72:	b2db      	uxtb	r3, r3
   dad74:	f003 f970 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   dad78:	fa1f f989 	uxth.w	r9, r9
   dad7c:	782a      	ldrb	r2, [r5, #0]
   dad7e:	683b      	ldr	r3, [r7, #0]
   dad80:	488d      	ldr	r0, [pc, #564]	; (dafb8 <_Z5canimiib+0x720>)
   dad82:	9200      	str	r2, [sp, #0]
   dad84:	4649      	mov	r1, r9
   dad86:	2200      	movs	r2, #0
   dad88:	fb93 f3f6 	sdiv	r3, r3, r6
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   dad8c:	f104 0a1b 	add.w	sl, r4, #27
        }
    }
    else if(cnum > 499 && cnum < 533)
    {
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   dad90:	b2db      	uxtb	r3, r3
   dad92:	f003 f961 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   dad96:	fa1f fa8a 	uxth.w	sl, sl
   dad9a:	782a      	ldrb	r2, [r5, #0]
   dad9c:	683b      	ldr	r3, [r7, #0]
   dad9e:	4886      	ldr	r0, [pc, #536]	; (dafb8 <_Z5canimiib+0x720>)
   dada0:	9200      	str	r2, [sp, #0]
   dada2:	4651      	mov	r1, sl
   dada4:	2200      	movs	r2, #0
   dada6:	fb93 f3f6 	sdiv	r3, r3, r6
   dadaa:	b2db      	uxtb	r3, r3
   dadac:	f003 f954 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
   dadb0:	f104 0325 	add.w	r3, r4, #37	; 0x25
   dadb4:	b29b      	uxth	r3, r3
   dadb6:	782a      	ldrb	r2, [r5, #0]
   dadb8:	9302      	str	r3, [sp, #8]
   dadba:	9902      	ldr	r1, [sp, #8]
   dadbc:	683b      	ldr	r3, [r7, #0]
   dadbe:	487e      	ldr	r0, [pc, #504]	; (dafb8 <_Z5canimiib+0x720>)
   dadc0:	9200      	str	r2, [sp, #0]
   dadc2:	fb93 f3f6 	sdiv	r3, r3, r6
   dadc6:	2200      	movs	r2, #0
   dadc8:	b2db      	uxtb	r3, r3
   dadca:	f003 f945 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,gclock/3,bclock);
   dadce:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   dadd2:	b29b      	uxth	r3, r3
   dadd4:	782a      	ldrb	r2, [r5, #0]
   dadd6:	9303      	str	r3, [sp, #12]
   dadd8:	9903      	ldr	r1, [sp, #12]
   dadda:	683b      	ldr	r3, [r7, #0]
   daddc:	4876      	ldr	r0, [pc, #472]	; (dafb8 <_Z5canimiib+0x720>)
   dadde:	9200      	str	r2, [sp, #0]
   dade0:	fb93 f3f6 	sdiv	r3, r3, r6
   dade4:	2200      	movs	r2, #0
   dade6:	b2db      	uxtb	r3, r3
   dade8:	f003 f936 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   dadec:	f104 0309 	add.w	r3, r4, #9
   dadf0:	b29b      	uxth	r3, r3
   dadf2:	2500      	movs	r5, #0
   dadf4:	9304      	str	r3, [sp, #16]
   dadf6:	462a      	mov	r2, r5
   dadf8:	462b      	mov	r3, r5
   dadfa:	9500      	str	r5, [sp, #0]
   dadfc:	9904      	ldr	r1, [sp, #16]
   dadfe:	486e      	ldr	r0, [pc, #440]	; (dafb8 <_Z5canimiib+0x720>)
   dae00:	f003 f92a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   dae04:	f104 0315 	add.w	r3, r4, #21
   dae08:	b29b      	uxth	r3, r3
   dae0a:	9305      	str	r3, [sp, #20]
   dae0c:	462a      	mov	r2, r5
   dae0e:	462b      	mov	r3, r5
   dae10:	9500      	str	r5, [sp, #0]
   dae12:	9905      	ldr	r1, [sp, #20]
   dae14:	4868      	ldr	r0, [pc, #416]	; (dafb8 <_Z5canimiib+0x720>)
   dae16:	f003 f91f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   dae1a:	f104 031c 	add.w	r3, r4, #28
   dae1e:	b29b      	uxth	r3, r3
   dae20:	9306      	str	r3, [sp, #24]
   dae22:	462a      	mov	r2, r5
   dae24:	462b      	mov	r3, r5
   dae26:	9500      	str	r5, [sp, #0]
   dae28:	9906      	ldr	r1, [sp, #24]
   dae2a:	4863      	ldr	r0, [pc, #396]	; (dafb8 <_Z5canimiib+0x720>)
   dae2c:	f003 f914 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   dae30:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dae34:	b29b      	uxth	r3, r3
   dae36:	9307      	str	r3, [sp, #28]
   dae38:	462a      	mov	r2, r5
   dae3a:	462b      	mov	r3, r5
   dae3c:	9500      	str	r5, [sp, #0]
   dae3e:	9907      	ldr	r1, [sp, #28]
   dae40:	485d      	ldr	r0, [pc, #372]	; (dafb8 <_Z5canimiib+0x720>)
   dae42:	f003 f909 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   dae46:	f104 0329 	add.w	r3, r4, #41	; 0x29
   dae4a:	b29b      	uxth	r3, r3
   dae4c:	9308      	str	r3, [sp, #32]
   dae4e:	462a      	mov	r2, r5
   dae50:	462b      	mov	r3, r5
   dae52:	9500      	str	r5, [sp, #0]
   dae54:	9908      	ldr	r1, [sp, #32]
   dae56:	4858      	ldr	r0, [pc, #352]	; (dafb8 <_Z5canimiib+0x720>)
   dae58:	f003 f8fe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dae5c:	4856      	ldr	r0, [pc, #344]	; (dafb8 <_Z5canimiib+0x720>)
   dae5e:	f002 ff59 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dae62:	f8cb 5000 	str.w	r5, [fp]
   dae66:	465d      	mov	r5, fp
   dae68:	682b      	ldr	r3, [r5, #0]
   dae6a:	2b31      	cmp	r3, #49	; 0x31
   dae6c:	dc11      	bgt.n	dae92 <_Z5canimiib+0x5fa>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dae6e:	2000      	movs	r0, #0
   dae70:	f005 fc76 	bl	e0760 <digitalRead>
   dae74:	b948      	cbnz	r0, dae8a <_Z5canimiib+0x5f2>
   dae76:	2001      	movs	r0, #1
   dae78:	f005 fc72 	bl	e0760 <digitalRead>
   dae7c:	b928      	cbnz	r0, dae8a <_Z5canimiib+0x5f2>
   dae7e:	2002      	movs	r0, #2
   dae80:	f005 fc6e 	bl	e0760 <digitalRead>
   dae84:	2800      	cmp	r0, #0
   dae86:	f000 868f 	beq.w	dbba8 <_Z5canimiib+0x1310>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dae8a:	682b      	ldr	r3, [r5, #0]
   dae8c:	3301      	adds	r3, #1
   dae8e:	602b      	str	r3, [r5, #0]
   dae90:	e7ea      	b.n	dae68 <_Z5canimiib+0x5d0>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
   dae92:	4e47      	ldr	r6, [pc, #284]	; (dafb0 <_Z5canimiib+0x718>)
   dae94:	4d47      	ldr	r5, [pc, #284]	; (dafb4 <_Z5canimiib+0x71c>)
   dae96:	7832      	ldrb	r2, [r6, #0]
   dae98:	4847      	ldr	r0, [pc, #284]	; (dafb8 <_Z5canimiib+0x720>)
   dae9a:	f104 030b 	add.w	r3, r4, #11
   dae9e:	fa1f fb83 	uxth.w	fp, r3
   daea2:	2703      	movs	r7, #3
   daea4:	682b      	ldr	r3, [r5, #0]
   daea6:	9200      	str	r2, [sp, #0]
   daea8:	fb93 f3f7 	sdiv	r3, r3, r7
   daeac:	2200      	movs	r2, #0
   daeae:	b2db      	uxtb	r3, r3
   daeb0:	4659      	mov	r1, fp
   daeb2:	f003 f8d1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
   daeb6:	f104 0313 	add.w	r3, r4, #19
   daeba:	b29b      	uxth	r3, r3
   daebc:	7832      	ldrb	r2, [r6, #0]
   daebe:	9309      	str	r3, [sp, #36]	; 0x24
   daec0:	9909      	ldr	r1, [sp, #36]	; 0x24
   daec2:	682b      	ldr	r3, [r5, #0]
   daec4:	483c      	ldr	r0, [pc, #240]	; (dafb8 <_Z5canimiib+0x720>)
   daec6:	fb93 f3f7 	sdiv	r3, r3, r7
   daeca:	9200      	str	r2, [sp, #0]
   daecc:	b2db      	uxtb	r3, r3
   daece:	2200      	movs	r2, #0
   daed0:	f003 f8c2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
   daed4:	f104 031a 	add.w	r3, r4, #26
   daed8:	b29b      	uxth	r3, r3
   daeda:	7832      	ldrb	r2, [r6, #0]
   daedc:	930a      	str	r3, [sp, #40]	; 0x28
   daede:	990a      	ldr	r1, [sp, #40]	; 0x28
   daee0:	682b      	ldr	r3, [r5, #0]
   daee2:	4835      	ldr	r0, [pc, #212]	; (dafb8 <_Z5canimiib+0x720>)
   daee4:	fb93 f3f7 	sdiv	r3, r3, r7
   daee8:	9200      	str	r2, [sp, #0]
   daeea:	b2db      	uxtb	r3, r3
   daeec:	2200      	movs	r2, #0
   daeee:	f003 f8b3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
   daef2:	f104 0326 	add.w	r3, r4, #38	; 0x26
   daef6:	b29b      	uxth	r3, r3
   daef8:	7832      	ldrb	r2, [r6, #0]
   daefa:	930b      	str	r3, [sp, #44]	; 0x2c
   daefc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   daefe:	682b      	ldr	r3, [r5, #0]
   daf00:	482d      	ldr	r0, [pc, #180]	; (dafb8 <_Z5canimiib+0x720>)
   daf02:	fb93 f3f7 	sdiv	r3, r3, r7
   daf06:	9200      	str	r2, [sp, #0]
   daf08:	b2db      	uxtb	r3, r3
   daf0a:	2200      	movs	r2, #0
   daf0c:	f003 f8a4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   daf10:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   daf14:	b29b      	uxth	r3, r3
   daf16:	7832      	ldrb	r2, [r6, #0]
   daf18:	930c      	str	r3, [sp, #48]	; 0x30
        strip.setPixelColor(inpix+12,0,0,0);
   daf1a:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   daf1c:	682b      	ldr	r3, [r5, #0]
   daf1e:	990c      	ldr	r1, [sp, #48]	; 0x30
   daf20:	fb93 f3f7 	sdiv	r3, r3, r7
   daf24:	9200      	str	r2, [sp, #0]
   daf26:	b2db      	uxtb	r3, r3
   daf28:	2200      	movs	r2, #0
   daf2a:	4823      	ldr	r0, [pc, #140]	; (dafb8 <_Z5canimiib+0x720>)
   daf2c:	f003 f894 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   daf30:	4633      	mov	r3, r6
   daf32:	4632      	mov	r2, r6
   daf34:	9600      	str	r6, [sp, #0]
   daf36:	4641      	mov	r1, r8
   daf38:	481f      	ldr	r0, [pc, #124]	; (dafb8 <_Z5canimiib+0x720>)
   daf3a:	f003 f88d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   daf3e:	4633      	mov	r3, r6
   daf40:	4632      	mov	r2, r6
   daf42:	9600      	str	r6, [sp, #0]
   daf44:	4649      	mov	r1, r9
   daf46:	481c      	ldr	r0, [pc, #112]	; (dafb8 <_Z5canimiib+0x720>)
   daf48:	f003 f886 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   daf4c:	4633      	mov	r3, r6
   daf4e:	4632      	mov	r2, r6
   daf50:	9600      	str	r6, [sp, #0]
   daf52:	4651      	mov	r1, sl
   daf54:	4818      	ldr	r0, [pc, #96]	; (dafb8 <_Z5canimiib+0x720>)
   daf56:	f003 f87f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   daf5a:	4633      	mov	r3, r6
   daf5c:	4632      	mov	r2, r6
   daf5e:	9600      	str	r6, [sp, #0]
   daf60:	9902      	ldr	r1, [sp, #8]
   daf62:	4815      	ldr	r0, [pc, #84]	; (dafb8 <_Z5canimiib+0x720>)
   daf64:	f003 f878 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   daf68:	4633      	mov	r3, r6
   daf6a:	4632      	mov	r2, r6
   daf6c:	9600      	str	r6, [sp, #0]
   daf6e:	9903      	ldr	r1, [sp, #12]
   daf70:	4811      	ldr	r0, [pc, #68]	; (dafb8 <_Z5canimiib+0x720>)
   daf72:	f003 f871 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   daf76:	4810      	ldr	r0, [pc, #64]	; (dafb8 <_Z5canimiib+0x720>)
   daf78:	f002 fecc 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   daf7c:	4b0f      	ldr	r3, [pc, #60]	; (dafbc <_Z5canimiib+0x724>)
   daf7e:	601e      	str	r6, [r3, #0]
   daf80:	461f      	mov	r7, r3
   daf82:	461e      	mov	r6, r3
   daf84:	6833      	ldr	r3, [r6, #0]
   daf86:	2b31      	cmp	r3, #49	; 0x31
   daf88:	dc1a      	bgt.n	dafc0 <_Z5canimiib+0x728>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   daf8a:	2000      	movs	r0, #0
   daf8c:	f005 fbe8 	bl	e0760 <digitalRead>
   daf90:	b948      	cbnz	r0, dafa6 <_Z5canimiib+0x70e>
   daf92:	2001      	movs	r0, #1
   daf94:	f005 fbe4 	bl	e0760 <digitalRead>
   daf98:	b928      	cbnz	r0, dafa6 <_Z5canimiib+0x70e>
   daf9a:	2002      	movs	r0, #2
   daf9c:	f005 fbe0 	bl	e0760 <digitalRead>
   dafa0:	2800      	cmp	r0, #0
   dafa2:	f000 8606 	beq.w	dbbb2 <_Z5canimiib+0x131a>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dafa6:	683b      	ldr	r3, [r7, #0]
   dafa8:	3301      	adds	r3, #1
   dafaa:	603b      	str	r3, [r7, #0]
   dafac:	e7ea      	b.n	daf84 <_Z5canimiib+0x6ec>
   dafae:	bf00      	nop
   dafb0:	2003e35c 	.word	0x2003e35c
   dafb4:	2003e314 	.word	0x2003e314
   dafb8:	2003e328 	.word	0x2003e328
   dafbc:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
   dafc0:	4e86      	ldr	r6, [pc, #536]	; (db1dc <_Z5canimiib+0x944>)
   dafc2:	4887      	ldr	r0, [pc, #540]	; (db1e0 <_Z5canimiib+0x948>)
   dafc4:	7832      	ldrb	r2, [r6, #0]
   dafc6:	f104 030a 	add.w	r3, r4, #10
   dafca:	b29b      	uxth	r3, r3
   dafcc:	9302      	str	r3, [sp, #8]
   dafce:	f04f 0a03 	mov.w	sl, #3
   dafd2:	682b      	ldr	r3, [r5, #0]
   dafd4:	9902      	ldr	r1, [sp, #8]
   dafd6:	fb93 f3fa 	sdiv	r3, r3, sl
   dafda:	9200      	str	r2, [sp, #0]
   dafdc:	b2db      	uxtb	r3, r3
   dafde:	2200      	movs	r2, #0
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   dafe0:	f104 0714 	add.w	r7, r4, #20
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
   dafe4:	f003 f838 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   dafe8:	b2bf      	uxth	r7, r7
   dafea:	7832      	ldrb	r2, [r6, #0]
   dafec:	682b      	ldr	r3, [r5, #0]
   dafee:	487c      	ldr	r0, [pc, #496]	; (db1e0 <_Z5canimiib+0x948>)
   daff0:	fb93 f3fa 	sdiv	r3, r3, sl
   daff4:	9200      	str	r2, [sp, #0]
   daff6:	b2db      	uxtb	r3, r3
   daff8:	2200      	movs	r2, #0
   daffa:	4639      	mov	r1, r7
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   daffc:	f104 0819 	add.w	r8, r4, #25
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   db000:	f003 f82a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   db004:	fa1f f888 	uxth.w	r8, r8
   db008:	7832      	ldrb	r2, [r6, #0]
   db00a:	682b      	ldr	r3, [r5, #0]
   db00c:	4874      	ldr	r0, [pc, #464]	; (db1e0 <_Z5canimiib+0x948>)
   db00e:	fb93 f3fa 	sdiv	r3, r3, sl
   db012:	9200      	str	r2, [sp, #0]
   db014:	b2db      	uxtb	r3, r3
   db016:	2200      	movs	r2, #0
   db018:	4641      	mov	r1, r8
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db01a:	f104 0923 	add.w	r9, r4, #35	; 0x23
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   db01e:	f003 f81b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db022:	fa1f f989 	uxth.w	r9, r9
   db026:	7832      	ldrb	r2, [r6, #0]
   db028:	682b      	ldr	r3, [r5, #0]
   db02a:	486d      	ldr	r0, [pc, #436]	; (db1e0 <_Z5canimiib+0x948>)
   db02c:	fb93 f3fa 	sdiv	r3, r3, sl
   db030:	9200      	str	r2, [sp, #0]
   db032:	b2db      	uxtb	r3, r3
   db034:	2200      	movs	r2, #0
   db036:	4649      	mov	r1, r9
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db038:	342a      	adds	r4, #42	; 0x2a
            }
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db03a:	f003 f80d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db03e:	b2a4      	uxth	r4, r4
   db040:	7832      	ldrb	r2, [r6, #0]
   db042:	682b      	ldr	r3, [r5, #0]
   db044:	4866      	ldr	r0, [pc, #408]	; (db1e0 <_Z5canimiib+0x948>)
   db046:	fb93 f3fa 	sdiv	r3, r3, sl
        strip.setPixelColor(inpix+11,0,0,0);
   db04a:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db04c:	9200      	str	r2, [sp, #0]
   db04e:	b2db      	uxtb	r3, r3
   db050:	2200      	movs	r2, #0
   db052:	4621      	mov	r1, r4
   db054:	f003 f800 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   db058:	4659      	mov	r1, fp
   db05a:	462b      	mov	r3, r5
   db05c:	462a      	mov	r2, r5
   db05e:	4860      	ldr	r0, [pc, #384]	; (db1e0 <_Z5canimiib+0x948>)
   db060:	9500      	str	r5, [sp, #0]
   db062:	f002 fff9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   db066:	462b      	mov	r3, r5
   db068:	462a      	mov	r2, r5
   db06a:	9909      	ldr	r1, [sp, #36]	; 0x24
   db06c:	485c      	ldr	r0, [pc, #368]	; (db1e0 <_Z5canimiib+0x948>)
   db06e:	9500      	str	r5, [sp, #0]
   db070:	f002 fff2 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   db074:	462b      	mov	r3, r5
   db076:	462a      	mov	r2, r5
   db078:	990a      	ldr	r1, [sp, #40]	; 0x28
   db07a:	4859      	ldr	r0, [pc, #356]	; (db1e0 <_Z5canimiib+0x948>)
   db07c:	9500      	str	r5, [sp, #0]
   db07e:	f002 ffeb 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   db082:	462b      	mov	r3, r5
   db084:	462a      	mov	r2, r5
   db086:	990b      	ldr	r1, [sp, #44]	; 0x2c
   db088:	4855      	ldr	r0, [pc, #340]	; (db1e0 <_Z5canimiib+0x948>)
   db08a:	9500      	str	r5, [sp, #0]
   db08c:	f002 ffe4 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   db090:	462b      	mov	r3, r5
   db092:	462a      	mov	r2, r5
   db094:	990c      	ldr	r1, [sp, #48]	; 0x30
   db096:	4852      	ldr	r0, [pc, #328]	; (db1e0 <_Z5canimiib+0x948>)
   db098:	9500      	str	r5, [sp, #0]
   db09a:	f002 ffdd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db09e:	4850      	ldr	r0, [pc, #320]	; (db1e0 <_Z5canimiib+0x948>)
   db0a0:	f002 fe38 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db0a4:	4b4f      	ldr	r3, [pc, #316]	; (db1e4 <_Z5canimiib+0x94c>)
   db0a6:	601d      	str	r5, [r3, #0]
   db0a8:	469a      	mov	sl, r3
   db0aa:	469b      	mov	fp, r3
   db0ac:	f8da 3000 	ldr.w	r3, [sl]
   db0b0:	4d4c      	ldr	r5, [pc, #304]	; (db1e4 <_Z5canimiib+0x94c>)
   db0b2:	2b31      	cmp	r3, #49	; 0x31
   db0b4:	dc13      	bgt.n	db0de <_Z5canimiib+0x846>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db0b6:	2000      	movs	r0, #0
   db0b8:	f005 fb52 	bl	e0760 <digitalRead>
   db0bc:	b948      	cbnz	r0, db0d2 <_Z5canimiib+0x83a>
   db0be:	2001      	movs	r0, #1
   db0c0:	f005 fb4e 	bl	e0760 <digitalRead>
   db0c4:	b928      	cbnz	r0, db0d2 <_Z5canimiib+0x83a>
   db0c6:	2002      	movs	r0, #2
   db0c8:	f005 fb4a 	bl	e0760 <digitalRead>
   db0cc:	2800      	cmp	r0, #0
   db0ce:	f000 8575 	beq.w	dbbbc <_Z5canimiib+0x1324>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db0d2:	f8db 3000 	ldr.w	r3, [fp]
   db0d6:	3301      	adds	r3, #1
   db0d8:	f8cb 3000 	str.w	r3, [fp]
   db0dc:	e7e6      	b.n	db0ac <_Z5canimiib+0x814>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
   db0de:	f8df b108 	ldr.w	fp, [pc, #264]	; db1e8 <_Z5canimiib+0x950>
   db0e2:	7832      	ldrb	r2, [r6, #0]
   db0e4:	f8db 3000 	ldr.w	r3, [fp]
   db0e8:	9904      	ldr	r1, [sp, #16]
   db0ea:	9200      	str	r2, [sp, #0]
   db0ec:	f04f 0a03 	mov.w	sl, #3
   db0f0:	2200      	movs	r2, #0
   db0f2:	483b      	ldr	r0, [pc, #236]	; (db1e0 <_Z5canimiib+0x948>)
   db0f4:	fb93 f3fa 	sdiv	r3, r3, sl
   db0f8:	b2db      	uxtb	r3, r3
   db0fa:	f002 ffad 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
   db0fe:	7832      	ldrb	r2, [r6, #0]
   db100:	f8db 3000 	ldr.w	r3, [fp]
   db104:	9905      	ldr	r1, [sp, #20]
   db106:	9200      	str	r2, [sp, #0]
   db108:	4835      	ldr	r0, [pc, #212]	; (db1e0 <_Z5canimiib+0x948>)
   db10a:	fb93 f3fa 	sdiv	r3, r3, sl
   db10e:	2200      	movs	r2, #0
   db110:	b2db      	uxtb	r3, r3
   db112:	f002 ffa1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
   db116:	7832      	ldrb	r2, [r6, #0]
   db118:	f8db 3000 	ldr.w	r3, [fp]
   db11c:	9906      	ldr	r1, [sp, #24]
   db11e:	9200      	str	r2, [sp, #0]
   db120:	482f      	ldr	r0, [pc, #188]	; (db1e0 <_Z5canimiib+0x948>)
   db122:	fb93 f3fa 	sdiv	r3, r3, sl
   db126:	2200      	movs	r2, #0
   db128:	b2db      	uxtb	r3, r3
   db12a:	f002 ff95 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
   db12e:	7832      	ldrb	r2, [r6, #0]
   db130:	f8db 3000 	ldr.w	r3, [fp]
   db134:	9907      	ldr	r1, [sp, #28]
   db136:	9200      	str	r2, [sp, #0]
   db138:	4829      	ldr	r0, [pc, #164]	; (db1e0 <_Z5canimiib+0x948>)
   db13a:	fb93 f3fa 	sdiv	r3, r3, sl
   db13e:	2200      	movs	r2, #0
   db140:	b2db      	uxtb	r3, r3
   db142:	f002 ff89 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   db146:	7832      	ldrb	r2, [r6, #0]
   db148:	f8db 3000 	ldr.w	r3, [fp]
   db14c:	9908      	ldr	r1, [sp, #32]
   db14e:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   db150:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   db152:	2200      	movs	r2, #0
   db154:	4822      	ldr	r0, [pc, #136]	; (db1e0 <_Z5canimiib+0x948>)
   db156:	fb93 f3fa 	sdiv	r3, r3, sl
   db15a:	b2db      	uxtb	r3, r3
   db15c:	f002 ff7c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   db160:	4633      	mov	r3, r6
   db162:	4632      	mov	r2, r6
   db164:	9902      	ldr	r1, [sp, #8]
   db166:	481e      	ldr	r0, [pc, #120]	; (db1e0 <_Z5canimiib+0x948>)
   db168:	9600      	str	r6, [sp, #0]
   db16a:	f002 ff75 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   db16e:	4633      	mov	r3, r6
   db170:	4632      	mov	r2, r6
   db172:	4639      	mov	r1, r7
   db174:	481a      	ldr	r0, [pc, #104]	; (db1e0 <_Z5canimiib+0x948>)
   db176:	9600      	str	r6, [sp, #0]
   db178:	f002 ff6e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   db17c:	4633      	mov	r3, r6
   db17e:	4632      	mov	r2, r6
   db180:	4641      	mov	r1, r8
   db182:	4817      	ldr	r0, [pc, #92]	; (db1e0 <_Z5canimiib+0x948>)
   db184:	9600      	str	r6, [sp, #0]
   db186:	f002 ff67 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   db18a:	4633      	mov	r3, r6
   db18c:	4632      	mov	r2, r6
   db18e:	4649      	mov	r1, r9
   db190:	4813      	ldr	r0, [pc, #76]	; (db1e0 <_Z5canimiib+0x948>)
   db192:	9600      	str	r6, [sp, #0]
   db194:	f002 ff60 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   db198:	4621      	mov	r1, r4
   db19a:	4633      	mov	r3, r6
   db19c:	4632      	mov	r2, r6
   db19e:	4810      	ldr	r0, [pc, #64]	; (db1e0 <_Z5canimiib+0x948>)
   db1a0:	9600      	str	r6, [sp, #0]
   db1a2:	f002 ff59 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db1a6:	480e      	ldr	r0, [pc, #56]	; (db1e0 <_Z5canimiib+0x948>)
   db1a8:	f002 fdb4 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   db1ac:	462c      	mov	r4, r5
        for(i=0; i<50; i++)
   db1ae:	602e      	str	r6, [r5, #0]
   db1b0:	682b      	ldr	r3, [r5, #0]
   db1b2:	2b31      	cmp	r3, #49	; 0x31
   db1b4:	f300 8520 	bgt.w	dbbf8 <_Z5canimiib+0x1360>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db1b8:	2000      	movs	r0, #0
   db1ba:	f005 fad1 	bl	e0760 <digitalRead>
   db1be:	b948      	cbnz	r0, db1d4 <_Z5canimiib+0x93c>
   db1c0:	2001      	movs	r0, #1
   db1c2:	f005 facd 	bl	e0760 <digitalRead>
   db1c6:	b928      	cbnz	r0, db1d4 <_Z5canimiib+0x93c>
   db1c8:	2002      	movs	r0, #2
   db1ca:	f005 fac9 	bl	e0760 <digitalRead>
   db1ce:	2800      	cmp	r0, #0
   db1d0:	f000 84f9 	beq.w	dbbc6 <_Z5canimiib+0x132e>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db1d4:	6823      	ldr	r3, [r4, #0]
   db1d6:	3301      	adds	r3, #1
   db1d8:	6023      	str	r3, [r4, #0]
   db1da:	e7e9      	b.n	db1b0 <_Z5canimiib+0x918>
   db1dc:	2003e35c 	.word	0x2003e35c
   db1e0:	2003e328 	.word	0x2003e328
   db1e4:	2003e33c 	.word	0x2003e33c
   db1e8:	2003e314 	.word	0x2003e314
            {
                delay(5);
            }
        }
    }
    else if(cnum > 599 && cnum < 630)
   db1ec:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   db1f0:	281d      	cmp	r0, #29
   db1f2:	f200 84a1 	bhi.w	dbb38 <_Z5canimiib+0x12a0>
    {
        strip.setPixelColor(inpix+12,rclock*1.5,gclock*1.5,bclock*1.8);
   db1f6:	4f9a      	ldr	r7, [pc, #616]	; (db460 <_Z5canimiib+0xbc8>)
   db1f8:	4e9a      	ldr	r6, [pc, #616]	; (db464 <_Z5canimiib+0xbcc>)
   db1fa:	6838      	ldr	r0, [r7, #0]
   db1fc:	4d9a      	ldr	r5, [pc, #616]	; (db468 <_Z5canimiib+0xbd0>)
   db1fe:	b28c      	uxth	r4, r1
   db200:	f005 fdea 	bl	e0dd8 <__aeabi_i2d>
   db204:	2200      	movs	r2, #0
   db206:	4b99      	ldr	r3, [pc, #612]	; (db46c <_Z5canimiib+0xbd4>)
   db208:	f005 fe4c 	bl	e0ea4 <__aeabi_dmul>
   db20c:	f006 f90c 	bl	e1428 <__aeabi_d2uiz>
   db210:	fa5f fa80 	uxtb.w	sl, r0
   db214:	6830      	ldr	r0, [r6, #0]
   db216:	f005 fddf 	bl	e0dd8 <__aeabi_i2d>
   db21a:	2200      	movs	r2, #0
   db21c:	4b93      	ldr	r3, [pc, #588]	; (db46c <_Z5canimiib+0xbd4>)
   db21e:	f005 fe41 	bl	e0ea4 <__aeabi_dmul>
   db222:	f006 f901 	bl	e1428 <__aeabi_d2uiz>
   db226:	fa5f f980 	uxtb.w	r9, r0
   db22a:	6828      	ldr	r0, [r5, #0]
   db22c:	f005 fdd4 	bl	e0dd8 <__aeabi_i2d>
   db230:	a389      	add	r3, pc, #548	; (adr r3, db458 <_Z5canimiib+0xbc0>)
   db232:	e9d3 2300 	ldrd	r2, r3, [r3]
   db236:	f005 fe35 	bl	e0ea4 <__aeabi_dmul>
   db23a:	f006 f8f5 	bl	e1428 <__aeabi_d2uiz>
   db23e:	f104 080c 	add.w	r8, r4, #12
   db242:	b2c0      	uxtb	r0, r0
   db244:	fa1f f888 	uxth.w	r8, r8
   db248:	464a      	mov	r2, r9
   db24a:	4653      	mov	r3, sl
   db24c:	9000      	str	r0, [sp, #0]
   db24e:	4641      	mov	r1, r8
   db250:	4887      	ldr	r0, [pc, #540]	; (db470 <_Z5canimiib+0xbd8>)
   db252:	f002 ff01 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock*1.5,gclock*1.5,bclock*1.8);
   db256:	f104 0316 	add.w	r3, r4, #22
   db25a:	6838      	ldr	r0, [r7, #0]
   db25c:	b29b      	uxth	r3, r3
   db25e:	9302      	str	r3, [sp, #8]
   db260:	f005 fdba 	bl	e0dd8 <__aeabi_i2d>
   db264:	2200      	movs	r2, #0
   db266:	4b81      	ldr	r3, [pc, #516]	; (db46c <_Z5canimiib+0xbd4>)
   db268:	f005 fe1c 	bl	e0ea4 <__aeabi_dmul>
   db26c:	f006 f8dc 	bl	e1428 <__aeabi_d2uiz>
   db270:	fa5f fa80 	uxtb.w	sl, r0
   db274:	6830      	ldr	r0, [r6, #0]
   db276:	f005 fdaf 	bl	e0dd8 <__aeabi_i2d>
   db27a:	2200      	movs	r2, #0
   db27c:	4b7b      	ldr	r3, [pc, #492]	; (db46c <_Z5canimiib+0xbd4>)
   db27e:	f005 fe11 	bl	e0ea4 <__aeabi_dmul>
   db282:	f006 f8d1 	bl	e1428 <__aeabi_d2uiz>
   db286:	fa5f f980 	uxtb.w	r9, r0
   db28a:	6828      	ldr	r0, [r5, #0]
   db28c:	f005 fda4 	bl	e0dd8 <__aeabi_i2d>
   db290:	a371      	add	r3, pc, #452	; (adr r3, db458 <_Z5canimiib+0xbc0>)
   db292:	e9d3 2300 	ldrd	r2, r3, [r3]
   db296:	f005 fe05 	bl	e0ea4 <__aeabi_dmul>
   db29a:	f006 f8c5 	bl	e1428 <__aeabi_d2uiz>
   db29e:	b2c0      	uxtb	r0, r0
   db2a0:	464a      	mov	r2, r9
   db2a2:	4653      	mov	r3, sl
   db2a4:	9000      	str	r0, [sp, #0]
   db2a6:	9902      	ldr	r1, [sp, #8]
   db2a8:	4871      	ldr	r0, [pc, #452]	; (db470 <_Z5canimiib+0xbd8>)
   db2aa:	f002 fed5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,rclock*1.5,gclock*1.5,bclock*1.8);
   db2ae:	f104 031b 	add.w	r3, r4, #27
   db2b2:	6838      	ldr	r0, [r7, #0]
   db2b4:	b29b      	uxth	r3, r3
   db2b6:	9303      	str	r3, [sp, #12]
   db2b8:	f005 fd8e 	bl	e0dd8 <__aeabi_i2d>
   db2bc:	2200      	movs	r2, #0
   db2be:	4b6b      	ldr	r3, [pc, #428]	; (db46c <_Z5canimiib+0xbd4>)
   db2c0:	f005 fdf0 	bl	e0ea4 <__aeabi_dmul>
   db2c4:	f006 f8b0 	bl	e1428 <__aeabi_d2uiz>
   db2c8:	fa5f fa80 	uxtb.w	sl, r0
   db2cc:	6830      	ldr	r0, [r6, #0]
   db2ce:	f005 fd83 	bl	e0dd8 <__aeabi_i2d>
   db2d2:	2200      	movs	r2, #0
   db2d4:	4b65      	ldr	r3, [pc, #404]	; (db46c <_Z5canimiib+0xbd4>)
   db2d6:	f005 fde5 	bl	e0ea4 <__aeabi_dmul>
   db2da:	f006 f8a5 	bl	e1428 <__aeabi_d2uiz>
   db2de:	fa5f f980 	uxtb.w	r9, r0
   db2e2:	6828      	ldr	r0, [r5, #0]
   db2e4:	f005 fd78 	bl	e0dd8 <__aeabi_i2d>
   db2e8:	a35b      	add	r3, pc, #364	; (adr r3, db458 <_Z5canimiib+0xbc0>)
   db2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   db2ee:	f005 fdd9 	bl	e0ea4 <__aeabi_dmul>
   db2f2:	f006 f899 	bl	e1428 <__aeabi_d2uiz>
   db2f6:	b2c0      	uxtb	r0, r0
   db2f8:	464a      	mov	r2, r9
   db2fa:	4653      	mov	r3, sl
   db2fc:	9000      	str	r0, [sp, #0]
   db2fe:	9903      	ldr	r1, [sp, #12]
   db300:	485b      	ldr	r0, [pc, #364]	; (db470 <_Z5canimiib+0xbd8>)
   db302:	f002 fea9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,rclock*1.5,gclock*1.5,bclock*1.8);
   db306:	f104 0325 	add.w	r3, r4, #37	; 0x25
   db30a:	6838      	ldr	r0, [r7, #0]
   db30c:	b29b      	uxth	r3, r3
   db30e:	9304      	str	r3, [sp, #16]
   db310:	f005 fd62 	bl	e0dd8 <__aeabi_i2d>
   db314:	2200      	movs	r2, #0
   db316:	4b55      	ldr	r3, [pc, #340]	; (db46c <_Z5canimiib+0xbd4>)
   db318:	f005 fdc4 	bl	e0ea4 <__aeabi_dmul>
   db31c:	f006 f884 	bl	e1428 <__aeabi_d2uiz>
   db320:	fa5f fa80 	uxtb.w	sl, r0
   db324:	6830      	ldr	r0, [r6, #0]
   db326:	f005 fd57 	bl	e0dd8 <__aeabi_i2d>
   db32a:	2200      	movs	r2, #0
   db32c:	4b4f      	ldr	r3, [pc, #316]	; (db46c <_Z5canimiib+0xbd4>)
   db32e:	f005 fdb9 	bl	e0ea4 <__aeabi_dmul>
   db332:	f006 f879 	bl	e1428 <__aeabi_d2uiz>
   db336:	fa5f f980 	uxtb.w	r9, r0
   db33a:	6828      	ldr	r0, [r5, #0]
   db33c:	f005 fd4c 	bl	e0dd8 <__aeabi_i2d>
   db340:	a345      	add	r3, pc, #276	; (adr r3, db458 <_Z5canimiib+0xbc0>)
   db342:	e9d3 2300 	ldrd	r2, r3, [r3]
   db346:	f005 fdad 	bl	e0ea4 <__aeabi_dmul>
   db34a:	f006 f86d 	bl	e1428 <__aeabi_d2uiz>
   db34e:	b2c0      	uxtb	r0, r0
   db350:	464a      	mov	r2, r9
   db352:	9000      	str	r0, [sp, #0]
   db354:	4653      	mov	r3, sl
   db356:	9904      	ldr	r1, [sp, #16]
   db358:	4845      	ldr	r0, [pc, #276]	; (db470 <_Z5canimiib+0xbd8>)
   db35a:	f002 fe7d 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,rclock*1.5,gclock*1.5,bclock*1.8);
   db35e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   db362:	6838      	ldr	r0, [r7, #0]
   db364:	b29b      	uxth	r3, r3
   db366:	9305      	str	r3, [sp, #20]
   db368:	f005 fd36 	bl	e0dd8 <__aeabi_i2d>
   db36c:	2200      	movs	r2, #0
   db36e:	4b3f      	ldr	r3, [pc, #252]	; (db46c <_Z5canimiib+0xbd4>)
   db370:	f005 fd98 	bl	e0ea4 <__aeabi_dmul>
   db374:	f006 f858 	bl	e1428 <__aeabi_d2uiz>
   db378:	b2c7      	uxtb	r7, r0
   db37a:	6830      	ldr	r0, [r6, #0]
   db37c:	f005 fd2c 	bl	e0dd8 <__aeabi_i2d>
   db380:	2200      	movs	r2, #0
   db382:	4b3a      	ldr	r3, [pc, #232]	; (db46c <_Z5canimiib+0xbd4>)
   db384:	f005 fd8e 	bl	e0ea4 <__aeabi_dmul>
   db388:	f006 f84e 	bl	e1428 <__aeabi_d2uiz>
   db38c:	b2c6      	uxtb	r6, r0
   db38e:	6828      	ldr	r0, [r5, #0]
   db390:	f005 fd22 	bl	e0dd8 <__aeabi_i2d>
   db394:	a330      	add	r3, pc, #192	; (adr r3, db458 <_Z5canimiib+0xbc0>)
   db396:	e9d3 2300 	ldrd	r2, r3, [r3]
   db39a:	f005 fd83 	bl	e0ea4 <__aeabi_dmul>
   db39e:	f006 f843 	bl	e1428 <__aeabi_d2uiz>
   db3a2:	b2c0      	uxtb	r0, r0
   db3a4:	9000      	str	r0, [sp, #0]
   db3a6:	463b      	mov	r3, r7
   db3a8:	4632      	mov	r2, r6
   db3aa:	9905      	ldr	r1, [sp, #20]
   db3ac:	4830      	ldr	r0, [pc, #192]	; (db470 <_Z5canimiib+0xbd8>)
   db3ae:	f002 fe53 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   db3b2:	f104 0309 	add.w	r3, r4, #9
   db3b6:	b29b      	uxth	r3, r3
   db3b8:	2500      	movs	r5, #0
   db3ba:	9306      	str	r3, [sp, #24]
   db3bc:	462a      	mov	r2, r5
   db3be:	462b      	mov	r3, r5
   db3c0:	9500      	str	r5, [sp, #0]
   db3c2:	9906      	ldr	r1, [sp, #24]
   db3c4:	482a      	ldr	r0, [pc, #168]	; (db470 <_Z5canimiib+0xbd8>)
   db3c6:	f002 fe47 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   db3ca:	f104 0315 	add.w	r3, r4, #21
   db3ce:	b29b      	uxth	r3, r3
   db3d0:	9307      	str	r3, [sp, #28]
   db3d2:	462a      	mov	r2, r5
   db3d4:	462b      	mov	r3, r5
   db3d6:	9500      	str	r5, [sp, #0]
   db3d8:	9907      	ldr	r1, [sp, #28]
   db3da:	4825      	ldr	r0, [pc, #148]	; (db470 <_Z5canimiib+0xbd8>)
   db3dc:	f002 fe3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   db3e0:	f104 031c 	add.w	r3, r4, #28
   db3e4:	b29b      	uxth	r3, r3
   db3e6:	9308      	str	r3, [sp, #32]
   db3e8:	462a      	mov	r2, r5
   db3ea:	462b      	mov	r3, r5
   db3ec:	9500      	str	r5, [sp, #0]
   db3ee:	9908      	ldr	r1, [sp, #32]
   db3f0:	481f      	ldr	r0, [pc, #124]	; (db470 <_Z5canimiib+0xbd8>)
   db3f2:	f002 fe31 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   db3f6:	f104 0324 	add.w	r3, r4, #36	; 0x24
   db3fa:	b29b      	uxth	r3, r3
   db3fc:	9309      	str	r3, [sp, #36]	; 0x24
   db3fe:	462a      	mov	r2, r5
   db400:	462b      	mov	r3, r5
   db402:	9500      	str	r5, [sp, #0]
   db404:	9909      	ldr	r1, [sp, #36]	; 0x24
   db406:	481a      	ldr	r0, [pc, #104]	; (db470 <_Z5canimiib+0xbd8>)
   db408:	f002 fe26 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   db40c:	f104 0329 	add.w	r3, r4, #41	; 0x29
   db410:	b29b      	uxth	r3, r3
   db412:	930a      	str	r3, [sp, #40]	; 0x28
   db414:	462a      	mov	r2, r5
   db416:	462b      	mov	r3, r5
   db418:	9500      	str	r5, [sp, #0]
   db41a:	990a      	ldr	r1, [sp, #40]	; 0x28
   db41c:	4814      	ldr	r0, [pc, #80]	; (db470 <_Z5canimiib+0xbd8>)
   db41e:	f002 fe1b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db422:	4813      	ldr	r0, [pc, #76]	; (db470 <_Z5canimiib+0xbd8>)
   db424:	f002 fc76 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db428:	f8cb 5000 	str.w	r5, [fp]
   db42c:	465d      	mov	r5, fp
   db42e:	682b      	ldr	r3, [r5, #0]
   db430:	2b31      	cmp	r3, #49	; 0x31
   db432:	dc1f      	bgt.n	db474 <_Z5canimiib+0xbdc>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db434:	2000      	movs	r0, #0
   db436:	f005 f993 	bl	e0760 <digitalRead>
   db43a:	b948      	cbnz	r0, db450 <_Z5canimiib+0xbb8>
   db43c:	2001      	movs	r0, #1
   db43e:	f005 f98f 	bl	e0760 <digitalRead>
   db442:	b928      	cbnz	r0, db450 <_Z5canimiib+0xbb8>
   db444:	2002      	movs	r0, #2
   db446:	f005 f98b 	bl	e0760 <digitalRead>
   db44a:	2800      	cmp	r0, #0
   db44c:	f000 83c0 	beq.w	dbbd0 <_Z5canimiib+0x1338>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db450:	682b      	ldr	r3, [r5, #0]
   db452:	3301      	adds	r3, #1
   db454:	602b      	str	r3, [r5, #0]
   db456:	e7ea      	b.n	db42e <_Z5canimiib+0xb96>
   db458:	cccccccd 	.word	0xcccccccd
   db45c:	3ffccccc 	.word	0x3ffccccc
   db460:	2003e314 	.word	0x2003e314
   db464:	2003e350 	.word	0x2003e350
   db468:	2003e35c 	.word	0x2003e35c
   db46c:	3ff80000 	.word	0x3ff80000
   db470:	2003e328 	.word	0x2003e328
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
   db474:	4d90      	ldr	r5, [pc, #576]	; (db6b8 <_Z5canimiib+0xe20>)
   db476:	4f91      	ldr	r7, [pc, #580]	; (db6bc <_Z5canimiib+0xe24>)
   db478:	6828      	ldr	r0, [r5, #0]
   db47a:	4e91      	ldr	r6, [pc, #580]	; (db6c0 <_Z5canimiib+0xe28>)
   db47c:	f104 030b 	add.w	r3, r4, #11
   db480:	fa1f fb83 	uxth.w	fp, r3
   db484:	f005 fca8 	bl	e0dd8 <__aeabi_i2d>
   db488:	2200      	movs	r2, #0
   db48a:	4b8e      	ldr	r3, [pc, #568]	; (db6c4 <_Z5canimiib+0xe2c>)
   db48c:	f005 fd0a 	bl	e0ea4 <__aeabi_dmul>
   db490:	f005 ffca 	bl	e1428 <__aeabi_d2uiz>
   db494:	fa5f fa80 	uxtb.w	sl, r0
   db498:	6838      	ldr	r0, [r7, #0]
   db49a:	f005 fc9d 	bl	e0dd8 <__aeabi_i2d>
   db49e:	2200      	movs	r2, #0
   db4a0:	4b88      	ldr	r3, [pc, #544]	; (db6c4 <_Z5canimiib+0xe2c>)
   db4a2:	f005 fcff 	bl	e0ea4 <__aeabi_dmul>
   db4a6:	f005 ffbf 	bl	e1428 <__aeabi_d2uiz>
   db4aa:	fa5f f980 	uxtb.w	r9, r0
   db4ae:	6830      	ldr	r0, [r6, #0]
   db4b0:	f005 fc92 	bl	e0dd8 <__aeabi_i2d>
   db4b4:	a37e      	add	r3, pc, #504	; (adr r3, db6b0 <_Z5canimiib+0xe18>)
   db4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   db4ba:	f005 fcf3 	bl	e0ea4 <__aeabi_dmul>
   db4be:	f005 ffb3 	bl	e1428 <__aeabi_d2uiz>
   db4c2:	b2c0      	uxtb	r0, r0
   db4c4:	464a      	mov	r2, r9
   db4c6:	4653      	mov	r3, sl
   db4c8:	9000      	str	r0, [sp, #0]
   db4ca:	4659      	mov	r1, fp
   db4cc:	487e      	ldr	r0, [pc, #504]	; (db6c8 <_Z5canimiib+0xe30>)
   db4ce:	f002 fdc3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
   db4d2:	f104 0313 	add.w	r3, r4, #19
   db4d6:	b29b      	uxth	r3, r3
   db4d8:	6828      	ldr	r0, [r5, #0]
   db4da:	930b      	str	r3, [sp, #44]	; 0x2c
   db4dc:	f005 fc7c 	bl	e0dd8 <__aeabi_i2d>
   db4e0:	2200      	movs	r2, #0
   db4e2:	4b78      	ldr	r3, [pc, #480]	; (db6c4 <_Z5canimiib+0xe2c>)
   db4e4:	f005 fcde 	bl	e0ea4 <__aeabi_dmul>
   db4e8:	f005 ff9e 	bl	e1428 <__aeabi_d2uiz>
   db4ec:	fa5f fa80 	uxtb.w	sl, r0
   db4f0:	6838      	ldr	r0, [r7, #0]
   db4f2:	f005 fc71 	bl	e0dd8 <__aeabi_i2d>
   db4f6:	2200      	movs	r2, #0
   db4f8:	4b72      	ldr	r3, [pc, #456]	; (db6c4 <_Z5canimiib+0xe2c>)
   db4fa:	f005 fcd3 	bl	e0ea4 <__aeabi_dmul>
   db4fe:	f005 ff93 	bl	e1428 <__aeabi_d2uiz>
   db502:	fa5f f980 	uxtb.w	r9, r0
   db506:	6830      	ldr	r0, [r6, #0]
   db508:	f005 fc66 	bl	e0dd8 <__aeabi_i2d>
   db50c:	a368      	add	r3, pc, #416	; (adr r3, db6b0 <_Z5canimiib+0xe18>)
   db50e:	e9d3 2300 	ldrd	r2, r3, [r3]
   db512:	f005 fcc7 	bl	e0ea4 <__aeabi_dmul>
   db516:	f005 ff87 	bl	e1428 <__aeabi_d2uiz>
   db51a:	b2c0      	uxtb	r0, r0
   db51c:	464a      	mov	r2, r9
   db51e:	4653      	mov	r3, sl
   db520:	9000      	str	r0, [sp, #0]
   db522:	990b      	ldr	r1, [sp, #44]	; 0x2c
   db524:	4868      	ldr	r0, [pc, #416]	; (db6c8 <_Z5canimiib+0xe30>)
   db526:	f002 fd97 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
   db52a:	f104 031a 	add.w	r3, r4, #26
   db52e:	b29b      	uxth	r3, r3
   db530:	6828      	ldr	r0, [r5, #0]
   db532:	930c      	str	r3, [sp, #48]	; 0x30
   db534:	f005 fc50 	bl	e0dd8 <__aeabi_i2d>
   db538:	2200      	movs	r2, #0
   db53a:	4b62      	ldr	r3, [pc, #392]	; (db6c4 <_Z5canimiib+0xe2c>)
   db53c:	f005 fcb2 	bl	e0ea4 <__aeabi_dmul>
   db540:	f005 ff72 	bl	e1428 <__aeabi_d2uiz>
   db544:	fa5f fa80 	uxtb.w	sl, r0
   db548:	6838      	ldr	r0, [r7, #0]
   db54a:	f005 fc45 	bl	e0dd8 <__aeabi_i2d>
   db54e:	2200      	movs	r2, #0
   db550:	4b5c      	ldr	r3, [pc, #368]	; (db6c4 <_Z5canimiib+0xe2c>)
   db552:	f005 fca7 	bl	e0ea4 <__aeabi_dmul>
   db556:	f005 ff67 	bl	e1428 <__aeabi_d2uiz>
   db55a:	fa5f f980 	uxtb.w	r9, r0
   db55e:	6830      	ldr	r0, [r6, #0]
   db560:	f005 fc3a 	bl	e0dd8 <__aeabi_i2d>
   db564:	a352      	add	r3, pc, #328	; (adr r3, db6b0 <_Z5canimiib+0xe18>)
   db566:	e9d3 2300 	ldrd	r2, r3, [r3]
   db56a:	f005 fc9b 	bl	e0ea4 <__aeabi_dmul>
   db56e:	f005 ff5b 	bl	e1428 <__aeabi_d2uiz>
   db572:	b2c0      	uxtb	r0, r0
   db574:	464a      	mov	r2, r9
   db576:	4653      	mov	r3, sl
   db578:	9000      	str	r0, [sp, #0]
   db57a:	990c      	ldr	r1, [sp, #48]	; 0x30
   db57c:	4852      	ldr	r0, [pc, #328]	; (db6c8 <_Z5canimiib+0xe30>)
   db57e:	f002 fd6b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
   db582:	f104 0326 	add.w	r3, r4, #38	; 0x26
   db586:	b29b      	uxth	r3, r3
   db588:	6828      	ldr	r0, [r5, #0]
   db58a:	930d      	str	r3, [sp, #52]	; 0x34
   db58c:	f005 fc24 	bl	e0dd8 <__aeabi_i2d>
   db590:	2200      	movs	r2, #0
   db592:	4b4c      	ldr	r3, [pc, #304]	; (db6c4 <_Z5canimiib+0xe2c>)
   db594:	f005 fc86 	bl	e0ea4 <__aeabi_dmul>
   db598:	f005 ff46 	bl	e1428 <__aeabi_d2uiz>
   db59c:	fa5f fa80 	uxtb.w	sl, r0
   db5a0:	6838      	ldr	r0, [r7, #0]
   db5a2:	f005 fc19 	bl	e0dd8 <__aeabi_i2d>
   db5a6:	2200      	movs	r2, #0
   db5a8:	4b46      	ldr	r3, [pc, #280]	; (db6c4 <_Z5canimiib+0xe2c>)
   db5aa:	f005 fc7b 	bl	e0ea4 <__aeabi_dmul>
   db5ae:	f005 ff3b 	bl	e1428 <__aeabi_d2uiz>
   db5b2:	fa5f f980 	uxtb.w	r9, r0
   db5b6:	6830      	ldr	r0, [r6, #0]
   db5b8:	f005 fc0e 	bl	e0dd8 <__aeabi_i2d>
   db5bc:	a33c      	add	r3, pc, #240	; (adr r3, db6b0 <_Z5canimiib+0xe18>)
   db5be:	e9d3 2300 	ldrd	r2, r3, [r3]
   db5c2:	f005 fc6f 	bl	e0ea4 <__aeabi_dmul>
   db5c6:	f005 ff2f 	bl	e1428 <__aeabi_d2uiz>
   db5ca:	b2c0      	uxtb	r0, r0
   db5cc:	464a      	mov	r2, r9
   db5ce:	4653      	mov	r3, sl
   db5d0:	9000      	str	r0, [sp, #0]
   db5d2:	990d      	ldr	r1, [sp, #52]	; 0x34
   db5d4:	483c      	ldr	r0, [pc, #240]	; (db6c8 <_Z5canimiib+0xe30>)
   db5d6:	f002 fd3f 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   db5da:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   db5de:	6828      	ldr	r0, [r5, #0]
   db5e0:	fa1f fa83 	uxth.w	sl, r3
   db5e4:	f005 fbf8 	bl	e0dd8 <__aeabi_i2d>
   db5e8:	2200      	movs	r2, #0
   db5ea:	4b36      	ldr	r3, [pc, #216]	; (db6c4 <_Z5canimiib+0xe2c>)
   db5ec:	f005 fc5a 	bl	e0ea4 <__aeabi_dmul>
   db5f0:	f005 ff1a 	bl	e1428 <__aeabi_d2uiz>
   db5f4:	fa5f f980 	uxtb.w	r9, r0
   db5f8:	6838      	ldr	r0, [r7, #0]
   db5fa:	f005 fbed 	bl	e0dd8 <__aeabi_i2d>
   db5fe:	2200      	movs	r2, #0
   db600:	4b30      	ldr	r3, [pc, #192]	; (db6c4 <_Z5canimiib+0xe2c>)
   db602:	f005 fc4f 	bl	e0ea4 <__aeabi_dmul>
   db606:	f005 ff0f 	bl	e1428 <__aeabi_d2uiz>
   db60a:	b2c7      	uxtb	r7, r0
   db60c:	6830      	ldr	r0, [r6, #0]
   db60e:	f005 fbe3 	bl	e0dd8 <__aeabi_i2d>
   db612:	a327      	add	r3, pc, #156	; (adr r3, db6b0 <_Z5canimiib+0xe18>)
   db614:	e9d3 2300 	ldrd	r2, r3, [r3]
   db618:	f005 fc44 	bl	e0ea4 <__aeabi_dmul>
   db61c:	f005 ff04 	bl	e1428 <__aeabi_d2uiz>
   db620:	b2c0      	uxtb	r0, r0
        strip.setPixelColor(inpix+12,0,0,0);
   db622:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   db624:	463a      	mov	r2, r7
   db626:	9000      	str	r0, [sp, #0]
   db628:	464b      	mov	r3, r9
   db62a:	4651      	mov	r1, sl
   db62c:	4826      	ldr	r0, [pc, #152]	; (db6c8 <_Z5canimiib+0xe30>)
   db62e:	f002 fd13 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   db632:	4633      	mov	r3, r6
   db634:	4632      	mov	r2, r6
   db636:	9600      	str	r6, [sp, #0]
   db638:	4641      	mov	r1, r8
   db63a:	4823      	ldr	r0, [pc, #140]	; (db6c8 <_Z5canimiib+0xe30>)
   db63c:	f002 fd0c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   db640:	4633      	mov	r3, r6
   db642:	4632      	mov	r2, r6
   db644:	9600      	str	r6, [sp, #0]
   db646:	9902      	ldr	r1, [sp, #8]
   db648:	481f      	ldr	r0, [pc, #124]	; (db6c8 <_Z5canimiib+0xe30>)
   db64a:	f002 fd05 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   db64e:	4633      	mov	r3, r6
   db650:	4632      	mov	r2, r6
   db652:	9600      	str	r6, [sp, #0]
   db654:	9903      	ldr	r1, [sp, #12]
   db656:	481c      	ldr	r0, [pc, #112]	; (db6c8 <_Z5canimiib+0xe30>)
   db658:	f002 fcfe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   db65c:	4633      	mov	r3, r6
   db65e:	4632      	mov	r2, r6
   db660:	9600      	str	r6, [sp, #0]
   db662:	9904      	ldr	r1, [sp, #16]
   db664:	4818      	ldr	r0, [pc, #96]	; (db6c8 <_Z5canimiib+0xe30>)
   db666:	f002 fcf7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   db66a:	4633      	mov	r3, r6
   db66c:	4632      	mov	r2, r6
   db66e:	9600      	str	r6, [sp, #0]
   db670:	9905      	ldr	r1, [sp, #20]
   db672:	4815      	ldr	r0, [pc, #84]	; (db6c8 <_Z5canimiib+0xe30>)
   db674:	f002 fcf0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db678:	4813      	ldr	r0, [pc, #76]	; (db6c8 <_Z5canimiib+0xe30>)
   db67a:	f002 fb4b 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db67e:	4b13      	ldr	r3, [pc, #76]	; (db6cc <_Z5canimiib+0xe34>)
   db680:	601e      	str	r6, [r3, #0]
   db682:	461f      	mov	r7, r3
   db684:	461e      	mov	r6, r3
   db686:	6833      	ldr	r3, [r6, #0]
   db688:	2b31      	cmp	r3, #49	; 0x31
   db68a:	dc21      	bgt.n	db6d0 <_Z5canimiib+0xe38>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db68c:	2000      	movs	r0, #0
   db68e:	f005 f867 	bl	e0760 <digitalRead>
   db692:	b948      	cbnz	r0, db6a8 <_Z5canimiib+0xe10>
   db694:	2001      	movs	r0, #1
   db696:	f005 f863 	bl	e0760 <digitalRead>
   db69a:	b928      	cbnz	r0, db6a8 <_Z5canimiib+0xe10>
   db69c:	2002      	movs	r0, #2
   db69e:	f005 f85f 	bl	e0760 <digitalRead>
   db6a2:	2800      	cmp	r0, #0
   db6a4:	f000 8298 	beq.w	dbbd8 <_Z5canimiib+0x1340>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db6a8:	683b      	ldr	r3, [r7, #0]
   db6aa:	3301      	adds	r3, #1
   db6ac:	603b      	str	r3, [r7, #0]
   db6ae:	e7ea      	b.n	db686 <_Z5canimiib+0xdee>
   db6b0:	cccccccd 	.word	0xcccccccd
   db6b4:	3ffccccc 	.word	0x3ffccccc
   db6b8:	2003e314 	.word	0x2003e314
   db6bc:	2003e350 	.word	0x2003e350
   db6c0:	2003e35c 	.word	0x2003e35c
   db6c4:	3ff80000 	.word	0x3ff80000
   db6c8:	2003e328 	.word	0x2003e328
   db6cc:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
   db6d0:	f104 030a 	add.w	r3, r4, #10
   db6d4:	6828      	ldr	r0, [r5, #0]
   db6d6:	4f90      	ldr	r7, [pc, #576]	; (db918 <_Z5canimiib+0x1080>)
   db6d8:	4e90      	ldr	r6, [pc, #576]	; (db91c <_Z5canimiib+0x1084>)
   db6da:	b29b      	uxth	r3, r3
   db6dc:	9302      	str	r3, [sp, #8]
   db6de:	f005 fb7b 	bl	e0dd8 <__aeabi_i2d>
   db6e2:	2200      	movs	r2, #0
   db6e4:	4b8e      	ldr	r3, [pc, #568]	; (db920 <_Z5canimiib+0x1088>)
   db6e6:	f005 fbdd 	bl	e0ea4 <__aeabi_dmul>
   db6ea:	f005 fe9d 	bl	e1428 <__aeabi_d2uiz>
   db6ee:	fa5f f980 	uxtb.w	r9, r0
   db6f2:	6838      	ldr	r0, [r7, #0]
   db6f4:	f005 fb70 	bl	e0dd8 <__aeabi_i2d>
   db6f8:	2200      	movs	r2, #0
   db6fa:	4b89      	ldr	r3, [pc, #548]	; (db920 <_Z5canimiib+0x1088>)
   db6fc:	f005 fbd2 	bl	e0ea4 <__aeabi_dmul>
   db700:	f005 fe92 	bl	e1428 <__aeabi_d2uiz>
   db704:	fa5f f880 	uxtb.w	r8, r0
   db708:	6830      	ldr	r0, [r6, #0]
   db70a:	f005 fb65 	bl	e0dd8 <__aeabi_i2d>
   db70e:	a380      	add	r3, pc, #512	; (adr r3, db910 <_Z5canimiib+0x1078>)
   db710:	e9d3 2300 	ldrd	r2, r3, [r3]
   db714:	f005 fbc6 	bl	e0ea4 <__aeabi_dmul>
   db718:	f005 fe86 	bl	e1428 <__aeabi_d2uiz>
   db71c:	b2c0      	uxtb	r0, r0
   db71e:	4642      	mov	r2, r8
   db720:	464b      	mov	r3, r9
   db722:	9000      	str	r0, [sp, #0]
   db724:	9902      	ldr	r1, [sp, #8]
   db726:	487f      	ldr	r0, [pc, #508]	; (db924 <_Z5canimiib+0x108c>)
   db728:	f002 fc96 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
   db72c:	f104 0314 	add.w	r3, r4, #20
   db730:	6828      	ldr	r0, [r5, #0]
   db732:	b29b      	uxth	r3, r3
   db734:	9303      	str	r3, [sp, #12]
   db736:	f005 fb4f 	bl	e0dd8 <__aeabi_i2d>
   db73a:	2200      	movs	r2, #0
   db73c:	4b78      	ldr	r3, [pc, #480]	; (db920 <_Z5canimiib+0x1088>)
   db73e:	f005 fbb1 	bl	e0ea4 <__aeabi_dmul>
   db742:	f005 fe71 	bl	e1428 <__aeabi_d2uiz>
   db746:	fa5f f980 	uxtb.w	r9, r0
   db74a:	6838      	ldr	r0, [r7, #0]
   db74c:	f005 fb44 	bl	e0dd8 <__aeabi_i2d>
   db750:	2200      	movs	r2, #0
   db752:	4b73      	ldr	r3, [pc, #460]	; (db920 <_Z5canimiib+0x1088>)
   db754:	f005 fba6 	bl	e0ea4 <__aeabi_dmul>
   db758:	f005 fe66 	bl	e1428 <__aeabi_d2uiz>
   db75c:	fa5f f880 	uxtb.w	r8, r0
   db760:	6830      	ldr	r0, [r6, #0]
   db762:	f005 fb39 	bl	e0dd8 <__aeabi_i2d>
   db766:	a36a      	add	r3, pc, #424	; (adr r3, db910 <_Z5canimiib+0x1078>)
   db768:	e9d3 2300 	ldrd	r2, r3, [r3]
   db76c:	f005 fb9a 	bl	e0ea4 <__aeabi_dmul>
   db770:	f005 fe5a 	bl	e1428 <__aeabi_d2uiz>
   db774:	b2c0      	uxtb	r0, r0
   db776:	4642      	mov	r2, r8
   db778:	464b      	mov	r3, r9
   db77a:	9000      	str	r0, [sp, #0]
   db77c:	9903      	ldr	r1, [sp, #12]
   db77e:	4869      	ldr	r0, [pc, #420]	; (db924 <_Z5canimiib+0x108c>)
   db780:	f002 fc6a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
   db784:	f104 0319 	add.w	r3, r4, #25
   db788:	6828      	ldr	r0, [r5, #0]
   db78a:	b29b      	uxth	r3, r3
   db78c:	9304      	str	r3, [sp, #16]
   db78e:	f005 fb23 	bl	e0dd8 <__aeabi_i2d>
   db792:	2200      	movs	r2, #0
   db794:	4b62      	ldr	r3, [pc, #392]	; (db920 <_Z5canimiib+0x1088>)
   db796:	f005 fb85 	bl	e0ea4 <__aeabi_dmul>
   db79a:	f005 fe45 	bl	e1428 <__aeabi_d2uiz>
   db79e:	fa5f f980 	uxtb.w	r9, r0
   db7a2:	6838      	ldr	r0, [r7, #0]
   db7a4:	f005 fb18 	bl	e0dd8 <__aeabi_i2d>
   db7a8:	2200      	movs	r2, #0
   db7aa:	4b5d      	ldr	r3, [pc, #372]	; (db920 <_Z5canimiib+0x1088>)
   db7ac:	f005 fb7a 	bl	e0ea4 <__aeabi_dmul>
   db7b0:	f005 fe3a 	bl	e1428 <__aeabi_d2uiz>
   db7b4:	fa5f f880 	uxtb.w	r8, r0
   db7b8:	6830      	ldr	r0, [r6, #0]
   db7ba:	f005 fb0d 	bl	e0dd8 <__aeabi_i2d>
   db7be:	a354      	add	r3, pc, #336	; (adr r3, db910 <_Z5canimiib+0x1078>)
   db7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   db7c4:	f005 fb6e 	bl	e0ea4 <__aeabi_dmul>
   db7c8:	f005 fe2e 	bl	e1428 <__aeabi_d2uiz>
   db7cc:	b2c0      	uxtb	r0, r0
   db7ce:	464b      	mov	r3, r9
   db7d0:	4642      	mov	r2, r8
   db7d2:	9000      	str	r0, [sp, #0]
   db7d4:	9904      	ldr	r1, [sp, #16]
   db7d6:	4853      	ldr	r0, [pc, #332]	; (db924 <_Z5canimiib+0x108c>)
   db7d8:	f002 fc3e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
   db7dc:	6828      	ldr	r0, [r5, #0]
   db7de:	f005 fafb 	bl	e0dd8 <__aeabi_i2d>
   db7e2:	2200      	movs	r2, #0
   db7e4:	4b4e      	ldr	r3, [pc, #312]	; (db920 <_Z5canimiib+0x1088>)
   db7e6:	f005 fb5d 	bl	e0ea4 <__aeabi_dmul>
   db7ea:	f005 fe1d 	bl	e1428 <__aeabi_d2uiz>
   db7ee:	b2c3      	uxtb	r3, r0
   db7f0:	6838      	ldr	r0, [r7, #0]
   db7f2:	9305      	str	r3, [sp, #20]
   db7f4:	f005 faf0 	bl	e0dd8 <__aeabi_i2d>
   db7f8:	2200      	movs	r2, #0
   db7fa:	4b49      	ldr	r3, [pc, #292]	; (db920 <_Z5canimiib+0x1088>)
   db7fc:	f005 fb52 	bl	e0ea4 <__aeabi_dmul>
   db800:	f005 fe12 	bl	e1428 <__aeabi_d2uiz>
   db804:	fa5f f980 	uxtb.w	r9, r0
   db808:	6830      	ldr	r0, [r6, #0]
   db80a:	f005 fae5 	bl	e0dd8 <__aeabi_i2d>
   db80e:	a340      	add	r3, pc, #256	; (adr r3, db910 <_Z5canimiib+0x1078>)
   db810:	e9d3 2300 	ldrd	r2, r3, [r3]
   db814:	f005 fb46 	bl	e0ea4 <__aeabi_dmul>
   db818:	f005 fe06 	bl	e1428 <__aeabi_d2uiz>
   db81c:	f104 0823 	add.w	r8, r4, #35	; 0x23
   db820:	b2c0      	uxtb	r0, r0
   db822:	fa1f f888 	uxth.w	r8, r8
   db826:	464a      	mov	r2, r9
   db828:	9b05      	ldr	r3, [sp, #20]
   db82a:	9000      	str	r0, [sp, #0]
   db82c:	4641      	mov	r1, r8
   db82e:	483d      	ldr	r0, [pc, #244]	; (db924 <_Z5canimiib+0x108c>)
   db830:	f002 fc12 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   db834:	6828      	ldr	r0, [r5, #0]
   db836:	f005 facf 	bl	e0dd8 <__aeabi_i2d>
   db83a:	2200      	movs	r2, #0
   db83c:	4b38      	ldr	r3, [pc, #224]	; (db920 <_Z5canimiib+0x1088>)
   db83e:	f005 fb31 	bl	e0ea4 <__aeabi_dmul>
   db842:	f005 fdf1 	bl	e1428 <__aeabi_d2uiz>
   db846:	342a      	adds	r4, #42	; 0x2a
   db848:	fa1f f984 	uxth.w	r9, r4
   db84c:	b2c4      	uxtb	r4, r0
   db84e:	6838      	ldr	r0, [r7, #0]
   db850:	f005 fac2 	bl	e0dd8 <__aeabi_i2d>
   db854:	2200      	movs	r2, #0
   db856:	4b32      	ldr	r3, [pc, #200]	; (db920 <_Z5canimiib+0x1088>)
   db858:	f005 fb24 	bl	e0ea4 <__aeabi_dmul>
   db85c:	f005 fde4 	bl	e1428 <__aeabi_d2uiz>
   db860:	b2c5      	uxtb	r5, r0
   db862:	6830      	ldr	r0, [r6, #0]
   db864:	f005 fab8 	bl	e0dd8 <__aeabi_i2d>
   db868:	a329      	add	r3, pc, #164	; (adr r3, db910 <_Z5canimiib+0x1078>)
   db86a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db86e:	f005 fb19 	bl	e0ea4 <__aeabi_dmul>
   db872:	f005 fdd9 	bl	e1428 <__aeabi_d2uiz>
   db876:	b2c0      	uxtb	r0, r0
   db878:	4623      	mov	r3, r4
   db87a:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   db87c:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   db87e:	462a      	mov	r2, r5
   db880:	4649      	mov	r1, r9
   db882:	4828      	ldr	r0, [pc, #160]	; (db924 <_Z5canimiib+0x108c>)
   db884:	f002 fbe8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   db888:	4623      	mov	r3, r4
   db88a:	4622      	mov	r2, r4
   db88c:	4659      	mov	r1, fp
   db88e:	9400      	str	r4, [sp, #0]
   db890:	4824      	ldr	r0, [pc, #144]	; (db924 <_Z5canimiib+0x108c>)
   db892:	f002 fbe1 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   db896:	4623      	mov	r3, r4
   db898:	4622      	mov	r2, r4
   db89a:	9400      	str	r4, [sp, #0]
   db89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   db89e:	4821      	ldr	r0, [pc, #132]	; (db924 <_Z5canimiib+0x108c>)
   db8a0:	f002 fbda 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   db8a4:	4623      	mov	r3, r4
   db8a6:	4622      	mov	r2, r4
   db8a8:	9400      	str	r4, [sp, #0]
   db8aa:	990c      	ldr	r1, [sp, #48]	; 0x30
   db8ac:	481d      	ldr	r0, [pc, #116]	; (db924 <_Z5canimiib+0x108c>)
   db8ae:	f002 fbd3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   db8b2:	4623      	mov	r3, r4
   db8b4:	4622      	mov	r2, r4
   db8b6:	9400      	str	r4, [sp, #0]
   db8b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   db8ba:	481a      	ldr	r0, [pc, #104]	; (db924 <_Z5canimiib+0x108c>)
   db8bc:	f002 fbcc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   db8c0:	4623      	mov	r3, r4
   db8c2:	4622      	mov	r2, r4
   db8c4:	9400      	str	r4, [sp, #0]
   db8c6:	4651      	mov	r1, sl
   db8c8:	4816      	ldr	r0, [pc, #88]	; (db924 <_Z5canimiib+0x108c>)
   db8ca:	f002 fbc5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db8ce:	4815      	ldr	r0, [pc, #84]	; (db924 <_Z5canimiib+0x108c>)
   db8d0:	f002 fa20 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db8d4:	4b14      	ldr	r3, [pc, #80]	; (db928 <_Z5canimiib+0x1090>)
   db8d6:	601c      	str	r4, [r3, #0]
   db8d8:	469b      	mov	fp, r3
   db8da:	461c      	mov	r4, r3
   db8dc:	f8db 3000 	ldr.w	r3, [fp]
   db8e0:	4d11      	ldr	r5, [pc, #68]	; (db928 <_Z5canimiib+0x1090>)
   db8e2:	2b31      	cmp	r3, #49	; 0x31
   db8e4:	dc22      	bgt.n	db92c <_Z5canimiib+0x1094>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db8e6:	2000      	movs	r0, #0
   db8e8:	f004 ff3a 	bl	e0760 <digitalRead>
   db8ec:	b948      	cbnz	r0, db902 <_Z5canimiib+0x106a>
   db8ee:	2001      	movs	r0, #1
   db8f0:	f004 ff36 	bl	e0760 <digitalRead>
   db8f4:	b928      	cbnz	r0, db902 <_Z5canimiib+0x106a>
   db8f6:	2002      	movs	r0, #2
   db8f8:	f004 ff32 	bl	e0760 <digitalRead>
   db8fc:	2800      	cmp	r0, #0
   db8fe:	f000 816f 	beq.w	dbbe0 <_Z5canimiib+0x1348>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db902:	6823      	ldr	r3, [r4, #0]
   db904:	3301      	adds	r3, #1
   db906:	6023      	str	r3, [r4, #0]
   db908:	e7e8      	b.n	db8dc <_Z5canimiib+0x1044>
   db90a:	bf00      	nop
   db90c:	f3af 8000 	nop.w
   db910:	cccccccd 	.word	0xcccccccd
   db914:	3ffccccc 	.word	0x3ffccccc
   db918:	2003e350 	.word	0x2003e350
   db91c:	2003e35c 	.word	0x2003e35c
   db920:	3ff80000 	.word	0x3ff80000
   db924:	2003e328 	.word	0x2003e328
   db928:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
   db92c:	4cb6      	ldr	r4, [pc, #728]	; (dbc08 <_Z5canimiib+0x1370>)
   db92e:	4fb7      	ldr	r7, [pc, #732]	; (dbc0c <_Z5canimiib+0x1374>)
   db930:	6820      	ldr	r0, [r4, #0]
   db932:	4eb7      	ldr	r6, [pc, #732]	; (dbc10 <_Z5canimiib+0x1378>)
   db934:	f005 fa50 	bl	e0dd8 <__aeabi_i2d>
   db938:	2200      	movs	r2, #0
   db93a:	4bb6      	ldr	r3, [pc, #728]	; (dbc14 <_Z5canimiib+0x137c>)
   db93c:	f005 fab2 	bl	e0ea4 <__aeabi_dmul>
   db940:	f005 fd72 	bl	e1428 <__aeabi_d2uiz>
   db944:	fa5f fb80 	uxtb.w	fp, r0
   db948:	6838      	ldr	r0, [r7, #0]
   db94a:	f005 fa45 	bl	e0dd8 <__aeabi_i2d>
   db94e:	2200      	movs	r2, #0
   db950:	4bb0      	ldr	r3, [pc, #704]	; (dbc14 <_Z5canimiib+0x137c>)
   db952:	f005 faa7 	bl	e0ea4 <__aeabi_dmul>
   db956:	f005 fd67 	bl	e1428 <__aeabi_d2uiz>
   db95a:	fa5f fa80 	uxtb.w	sl, r0
   db95e:	6830      	ldr	r0, [r6, #0]
   db960:	f005 fa3a 	bl	e0dd8 <__aeabi_i2d>
   db964:	a3a6      	add	r3, pc, #664	; (adr r3, dbc00 <_Z5canimiib+0x1368>)
   db966:	e9d3 2300 	ldrd	r2, r3, [r3]
   db96a:	f005 fa9b 	bl	e0ea4 <__aeabi_dmul>
   db96e:	f005 fd5b 	bl	e1428 <__aeabi_d2uiz>
   db972:	b2c0      	uxtb	r0, r0
   db974:	465b      	mov	r3, fp
   db976:	4652      	mov	r2, sl
   db978:	9000      	str	r0, [sp, #0]
   db97a:	9906      	ldr	r1, [sp, #24]
   db97c:	48a6      	ldr	r0, [pc, #664]	; (dbc18 <_Z5canimiib+0x1380>)
   db97e:	f002 fb6b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
   db982:	6820      	ldr	r0, [r4, #0]
   db984:	f005 fa28 	bl	e0dd8 <__aeabi_i2d>
   db988:	2200      	movs	r2, #0
   db98a:	4ba2      	ldr	r3, [pc, #648]	; (dbc14 <_Z5canimiib+0x137c>)
   db98c:	f005 fa8a 	bl	e0ea4 <__aeabi_dmul>
   db990:	f005 fd4a 	bl	e1428 <__aeabi_d2uiz>
   db994:	fa5f fb80 	uxtb.w	fp, r0
   db998:	6838      	ldr	r0, [r7, #0]
   db99a:	f005 fa1d 	bl	e0dd8 <__aeabi_i2d>
   db99e:	2200      	movs	r2, #0
   db9a0:	4b9c      	ldr	r3, [pc, #624]	; (dbc14 <_Z5canimiib+0x137c>)
   db9a2:	f005 fa7f 	bl	e0ea4 <__aeabi_dmul>
   db9a6:	f005 fd3f 	bl	e1428 <__aeabi_d2uiz>
   db9aa:	fa5f fa80 	uxtb.w	sl, r0
   db9ae:	6830      	ldr	r0, [r6, #0]
   db9b0:	f005 fa12 	bl	e0dd8 <__aeabi_i2d>
   db9b4:	a392      	add	r3, pc, #584	; (adr r3, dbc00 <_Z5canimiib+0x1368>)
   db9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   db9ba:	f005 fa73 	bl	e0ea4 <__aeabi_dmul>
   db9be:	f005 fd33 	bl	e1428 <__aeabi_d2uiz>
   db9c2:	b2c0      	uxtb	r0, r0
   db9c4:	465b      	mov	r3, fp
   db9c6:	4652      	mov	r2, sl
   db9c8:	9000      	str	r0, [sp, #0]
   db9ca:	9907      	ldr	r1, [sp, #28]
   db9cc:	4892      	ldr	r0, [pc, #584]	; (dbc18 <_Z5canimiib+0x1380>)
   db9ce:	f002 fb43 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
   db9d2:	6820      	ldr	r0, [r4, #0]
   db9d4:	f005 fa00 	bl	e0dd8 <__aeabi_i2d>
   db9d8:	2200      	movs	r2, #0
   db9da:	4b8e      	ldr	r3, [pc, #568]	; (dbc14 <_Z5canimiib+0x137c>)
   db9dc:	f005 fa62 	bl	e0ea4 <__aeabi_dmul>
   db9e0:	f005 fd22 	bl	e1428 <__aeabi_d2uiz>
   db9e4:	fa5f fb80 	uxtb.w	fp, r0
   db9e8:	6838      	ldr	r0, [r7, #0]
   db9ea:	f005 f9f5 	bl	e0dd8 <__aeabi_i2d>
   db9ee:	2200      	movs	r2, #0
   db9f0:	4b88      	ldr	r3, [pc, #544]	; (dbc14 <_Z5canimiib+0x137c>)
   db9f2:	f005 fa57 	bl	e0ea4 <__aeabi_dmul>
   db9f6:	f005 fd17 	bl	e1428 <__aeabi_d2uiz>
   db9fa:	fa5f fa80 	uxtb.w	sl, r0
   db9fe:	6830      	ldr	r0, [r6, #0]
   dba00:	f005 f9ea 	bl	e0dd8 <__aeabi_i2d>
   dba04:	a37e      	add	r3, pc, #504	; (adr r3, dbc00 <_Z5canimiib+0x1368>)
   dba06:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba0a:	f005 fa4b 	bl	e0ea4 <__aeabi_dmul>
   dba0e:	f005 fd0b 	bl	e1428 <__aeabi_d2uiz>
   dba12:	b2c0      	uxtb	r0, r0
   dba14:	465b      	mov	r3, fp
   dba16:	4652      	mov	r2, sl
   dba18:	9000      	str	r0, [sp, #0]
   dba1a:	9908      	ldr	r1, [sp, #32]
   dba1c:	487e      	ldr	r0, [pc, #504]	; (dbc18 <_Z5canimiib+0x1380>)
   dba1e:	f002 fb1b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
   dba22:	6820      	ldr	r0, [r4, #0]
   dba24:	f005 f9d8 	bl	e0dd8 <__aeabi_i2d>
   dba28:	2200      	movs	r2, #0
   dba2a:	4b7a      	ldr	r3, [pc, #488]	; (dbc14 <_Z5canimiib+0x137c>)
   dba2c:	f005 fa3a 	bl	e0ea4 <__aeabi_dmul>
   dba30:	f005 fcfa 	bl	e1428 <__aeabi_d2uiz>
   dba34:	fa5f fb80 	uxtb.w	fp, r0
   dba38:	6838      	ldr	r0, [r7, #0]
   dba3a:	f005 f9cd 	bl	e0dd8 <__aeabi_i2d>
   dba3e:	2200      	movs	r2, #0
   dba40:	4b74      	ldr	r3, [pc, #464]	; (dbc14 <_Z5canimiib+0x137c>)
   dba42:	f005 fa2f 	bl	e0ea4 <__aeabi_dmul>
   dba46:	f005 fcef 	bl	e1428 <__aeabi_d2uiz>
   dba4a:	fa5f fa80 	uxtb.w	sl, r0
   dba4e:	6830      	ldr	r0, [r6, #0]
   dba50:	f005 f9c2 	bl	e0dd8 <__aeabi_i2d>
   dba54:	a36a      	add	r3, pc, #424	; (adr r3, dbc00 <_Z5canimiib+0x1368>)
   dba56:	e9d3 2300 	ldrd	r2, r3, [r3]
   dba5a:	f005 fa23 	bl	e0ea4 <__aeabi_dmul>
   dba5e:	f005 fce3 	bl	e1428 <__aeabi_d2uiz>
   dba62:	b2c0      	uxtb	r0, r0
   dba64:	465b      	mov	r3, fp
   dba66:	4652      	mov	r2, sl
   dba68:	9000      	str	r0, [sp, #0]
   dba6a:	9909      	ldr	r1, [sp, #36]	; 0x24
   dba6c:	486a      	ldr	r0, [pc, #424]	; (dbc18 <_Z5canimiib+0x1380>)
   dba6e:	f002 faf3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dba72:	6820      	ldr	r0, [r4, #0]
   dba74:	f005 f9b0 	bl	e0dd8 <__aeabi_i2d>
   dba78:	2200      	movs	r2, #0
   dba7a:	4b66      	ldr	r3, [pc, #408]	; (dbc14 <_Z5canimiib+0x137c>)
   dba7c:	f005 fa12 	bl	e0ea4 <__aeabi_dmul>
   dba80:	f005 fcd2 	bl	e1428 <__aeabi_d2uiz>
   dba84:	b2c4      	uxtb	r4, r0
   dba86:	6838      	ldr	r0, [r7, #0]
   dba88:	f005 f9a6 	bl	e0dd8 <__aeabi_i2d>
   dba8c:	2200      	movs	r2, #0
   dba8e:	4b61      	ldr	r3, [pc, #388]	; (dbc14 <_Z5canimiib+0x137c>)
   dba90:	f005 fa08 	bl	e0ea4 <__aeabi_dmul>
   dba94:	f005 fcc8 	bl	e1428 <__aeabi_d2uiz>
   dba98:	b2c7      	uxtb	r7, r0
   dba9a:	6830      	ldr	r0, [r6, #0]
   dba9c:	f005 f99c 	bl	e0dd8 <__aeabi_i2d>
   dbaa0:	a357      	add	r3, pc, #348	; (adr r3, dbc00 <_Z5canimiib+0x1368>)
   dbaa2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbaa6:	f005 f9fd 	bl	e0ea4 <__aeabi_dmul>
   dbaaa:	f005 fcbd 	bl	e1428 <__aeabi_d2uiz>
   dbaae:	b2c0      	uxtb	r0, r0
   dbab0:	4623      	mov	r3, r4
   dbab2:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dbab4:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dbab6:	463a      	mov	r2, r7
   dbab8:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbaba:	4857      	ldr	r0, [pc, #348]	; (dbc18 <_Z5canimiib+0x1380>)
   dbabc:	f002 facc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dbac0:	4623      	mov	r3, r4
   dbac2:	4622      	mov	r2, r4
   dbac4:	9400      	str	r4, [sp, #0]
   dbac6:	9902      	ldr	r1, [sp, #8]
   dbac8:	4853      	ldr	r0, [pc, #332]	; (dbc18 <_Z5canimiib+0x1380>)
   dbaca:	f002 fac5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   dbace:	4623      	mov	r3, r4
   dbad0:	4622      	mov	r2, r4
   dbad2:	9400      	str	r4, [sp, #0]
   dbad4:	9903      	ldr	r1, [sp, #12]
   dbad6:	4850      	ldr	r0, [pc, #320]	; (dbc18 <_Z5canimiib+0x1380>)
   dbad8:	f002 fabe 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   dbadc:	4623      	mov	r3, r4
   dbade:	4622      	mov	r2, r4
   dbae0:	9400      	str	r4, [sp, #0]
   dbae2:	9904      	ldr	r1, [sp, #16]
   dbae4:	484c      	ldr	r0, [pc, #304]	; (dbc18 <_Z5canimiib+0x1380>)
   dbae6:	f002 fab7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   dbaea:	4623      	mov	r3, r4
   dbaec:	4622      	mov	r2, r4
   dbaee:	9400      	str	r4, [sp, #0]
   dbaf0:	4641      	mov	r1, r8
   dbaf2:	4849      	ldr	r0, [pc, #292]	; (dbc18 <_Z5canimiib+0x1380>)
   dbaf4:	f002 fab0 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   dbaf8:	4623      	mov	r3, r4
   dbafa:	4622      	mov	r2, r4
   dbafc:	9400      	str	r4, [sp, #0]
   dbafe:	4649      	mov	r1, r9
   dbb00:	4845      	ldr	r0, [pc, #276]	; (dbc18 <_Z5canimiib+0x1380>)
   dbb02:	f002 faa9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbb06:	4844      	ldr	r0, [pc, #272]	; (dbc18 <_Z5canimiib+0x1380>)
   dbb08:	f002 f904 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dbb0c:	602c      	str	r4, [r5, #0]
   dbb0e:	462c      	mov	r4, r5
   dbb10:	682b      	ldr	r3, [r5, #0]
   dbb12:	2b31      	cmp	r3, #49	; 0x31
   dbb14:	dc70      	bgt.n	dbbf8 <_Z5canimiib+0x1360>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbb16:	2000      	movs	r0, #0
   dbb18:	f004 fe22 	bl	e0760 <digitalRead>
   dbb1c:	b940      	cbnz	r0, dbb30 <_Z5canimiib+0x1298>
   dbb1e:	2001      	movs	r0, #1
   dbb20:	f004 fe1e 	bl	e0760 <digitalRead>
   dbb24:	b920      	cbnz	r0, dbb30 <_Z5canimiib+0x1298>
   dbb26:	2002      	movs	r0, #2
   dbb28:	f004 fe1a 	bl	e0760 <digitalRead>
   dbb2c:	2800      	cmp	r0, #0
   dbb2e:	d05b      	beq.n	dbbe8 <_Z5canimiib+0x1350>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbb30:	6823      	ldr	r3, [r4, #0]
   dbb32:	3301      	adds	r3, #1
   dbb34:	6023      	str	r3, [r4, #0]
   dbb36:	e7eb      	b.n	dbb10 <_Z5canimiib+0x1278>
            }
        }
    }
    else
    {
        for(i=0; i<200; i++)
   dbb38:	2300      	movs	r3, #0
   dbb3a:	f8cb 3000 	str.w	r3, [fp]
   dbb3e:	f8db 3000 	ldr.w	r3, [fp]
   dbb42:	2bc7      	cmp	r3, #199	; 0xc7
   dbb44:	dc58      	bgt.n	dbbf8 <_Z5canimiib+0x1360>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbb46:	2000      	movs	r0, #0
   dbb48:	f004 fe0a 	bl	e0760 <digitalRead>
   dbb4c:	b940      	cbnz	r0, dbb60 <_Z5canimiib+0x12c8>
   dbb4e:	2001      	movs	r0, #1
   dbb50:	f004 fe06 	bl	e0760 <digitalRead>
   dbb54:	b920      	cbnz	r0, dbb60 <_Z5canimiib+0x12c8>
   dbb56:	2002      	movs	r0, #2
   dbb58:	f004 fe02 	bl	e0760 <digitalRead>
   dbb5c:	2800      	cmp	r0, #0
   dbb5e:	d047      	beq.n	dbbf0 <_Z5canimiib+0x1358>
            }
        }
    }
    else
    {
        for(i=0; i<200; i++)
   dbb60:	f8db 3000 	ldr.w	r3, [fp]
   dbb64:	3301      	adds	r3, #1
   dbb66:	f8cb 3000 	str.w	r3, [fp]
   dbb6a:	e7e8      	b.n	dbb3e <_Z5canimiib+0x12a6>
        strip.setPixelColor(inpix+20,0,0,0);
        for(i=0; i<100; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbb6c:	2005      	movs	r0, #5
   dbb6e:	f003 fb57 	bl	df220 <delay>
   dbb72:	f7fe bedc 	b.w	da92e <_Z5canimiib+0x96>
            strip.show();
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dbb76:	2005      	movs	r0, #5
   dbb78:	f003 fb52 	bl	df220 <delay>
   dbb7c:	f7fe bf63 	b.w	daa46 <_Z5canimiib+0x1ae>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbb80:	2005      	movs	r0, #5
   dbb82:	f003 fb4d 	bl	df220 <delay>
   dbb86:	f7fe bfca 	b.w	dab1e <_Z5canimiib+0x286>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbb8a:	2005      	movs	r0, #5
   dbb8c:	f003 fb48 	bl	df220 <delay>
   dbb90:	f7ff b82a 	b.w	dabe8 <_Z5canimiib+0x350>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbb94:	2005      	movs	r0, #5
   dbb96:	f003 fb43 	bl	df220 <delay>
   dbb9a:	f7ff b87c 	b.w	dac96 <_Z5canimiib+0x3fe>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbb9e:	2005      	movs	r0, #5
   dbba0:	f003 fb3e 	bl	df220 <delay>
   dbba4:	f7ff b8c2 	b.w	dad2c <_Z5canimiib+0x494>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbba8:	2005      	movs	r0, #5
   dbbaa:	f003 fb39 	bl	df220 <delay>
   dbbae:	f7ff b96c 	b.w	dae8a <_Z5canimiib+0x5f2>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbb2:	2005      	movs	r0, #5
   dbbb4:	f003 fb34 	bl	df220 <delay>
   dbbb8:	f7ff b9f5 	b.w	dafa6 <_Z5canimiib+0x70e>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbbc:	2005      	movs	r0, #5
   dbbbe:	f003 fb2f 	bl	df220 <delay>
   dbbc2:	f7ff ba86 	b.w	db0d2 <_Z5canimiib+0x83a>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbc6:	2005      	movs	r0, #5
   dbbc8:	f003 fb2a 	bl	df220 <delay>
   dbbcc:	f7ff bb02 	b.w	db1d4 <_Z5canimiib+0x93c>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbd0:	2005      	movs	r0, #5
   dbbd2:	f003 fb25 	bl	df220 <delay>
   dbbd6:	e43b      	b.n	db450 <_Z5canimiib+0xbb8>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbd8:	2005      	movs	r0, #5
   dbbda:	f003 fb21 	bl	df220 <delay>
   dbbde:	e563      	b.n	db6a8 <_Z5canimiib+0xe10>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbe0:	2005      	movs	r0, #5
   dbbe2:	f003 fb1d 	bl	df220 <delay>
   dbbe6:	e68c      	b.n	db902 <_Z5canimiib+0x106a>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbe8:	2005      	movs	r0, #5
   dbbea:	f003 fb19 	bl	df220 <delay>
   dbbee:	e79f      	b.n	dbb30 <_Z5canimiib+0x1298>
    {
        for(i=0; i<200; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dbbf0:	2005      	movs	r0, #5
   dbbf2:	f003 fb15 	bl	df220 <delay>
   dbbf6:	e7b3      	b.n	dbb60 <_Z5canimiib+0x12c8>
            }
        }
    }
}                                  
   dbbf8:	b00f      	add	sp, #60	; 0x3c
   dbbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dbbfe:	bf00      	nop
   dbc00:	cccccccd 	.word	0xcccccccd
   dbc04:	3ffccccc 	.word	0x3ffccccc
   dbc08:	2003e314 	.word	0x2003e314
   dbc0c:	2003e350 	.word	0x2003e350
   dbc10:	2003e35c 	.word	0x2003e35c
   dbc14:	3ff80000 	.word	0x3ff80000
   dbc18:	2003e328 	.word	0x2003e328

000dbc1c <_Z8settingsv>:
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dbc1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    strip.clear();
   dbc20:	48b0      	ldr	r0, [pc, #704]	; (dbee4 <_Z8settingsv+0x2c8>)
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dbc22:	4cb1      	ldr	r4, [pc, #708]	; (dbee8 <_Z8settingsv+0x2cc>)
   dbc24:	4db1      	ldr	r5, [pc, #708]	; (dbeec <_Z8settingsv+0x2d0>)
                delay(5);
            }
        }
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dbc26:	b091      	sub	sp, #68	; 0x44
    strip.clear();
   dbc28:	f002 fa45 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dbc2c:	4bb0      	ldr	r3, [pc, #704]	; (dbef0 <_Z8settingsv+0x2d4>)
   dbc2e:	682a      	ldr	r2, [r5, #0]
   dbc30:	681b      	ldr	r3, [r3, #0]
   dbc32:	9300      	str	r3, [sp, #0]
   dbc34:	2100      	movs	r1, #0
   dbc36:	6823      	ldr	r3, [r4, #0]
   dbc38:	48ae      	ldr	r0, [pc, #696]	; (dbef4 <_Z8settingsv+0x2d8>)
   dbc3a:	f7fd fc01 	bl	d9440 <_Z7strdispPKciiii>
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dbc3e:	2000      	movs	r0, #0
   dbc40:	f004 fd8e 	bl	e0760 <digitalRead>
   dbc44:	2801      	cmp	r0, #1
   dbc46:	d004      	beq.n	dbc52 <_Z8settingsv+0x36>
   dbc48:	2002      	movs	r0, #2
   dbc4a:	f004 fd89 	bl	e0760 <digitalRead>
   dbc4e:	2801      	cmp	r0, #1
   dbc50:	d103      	bne.n	dbc5a <_Z8settingsv+0x3e>
        delay(5);
   dbc52:	2005      	movs	r0, #5
   dbc54:	f003 fae4 	bl	df220 <delay>
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dbc58:	e7f1      	b.n	dbc3e <_Z8settingsv+0x22>
        delay(5);
    }
    strip.clear();
   dbc5a:	48a2      	ldr	r0, [pc, #648]	; (dbee4 <_Z8settingsv+0x2c8>)
        }
        else if(smode == 8){
            strdisp("Drk clr", 0, rclock, gclock, bclock);
        }
        else if(smode == 9){
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dbc5c:	4ea4      	ldr	r6, [pc, #656]	; (dbef0 <_Z8settingsv+0x2d4>)
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
   dbc5e:	f002 fa2a 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
   dbc62:	2701      	movs	r7, #1
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
   dbc64:	46b8      	mov	r8, r7
        delay(5);
    }
    strip.clear();
    while(sett == true)
    {
        if(smode == 1){
   dbc66:	f1b8 0f01 	cmp.w	r8, #1
   dbc6a:	d108      	bne.n	dbc7e <_Z8settingsv+0x62>
            strdisp("WiFi", 0, rclock, gclock, bclock);
   dbc6c:	6833      	ldr	r3, [r6, #0]
   dbc6e:	9300      	str	r3, [sp, #0]
   dbc70:	682a      	ldr	r2, [r5, #0]
   dbc72:	6823      	ldr	r3, [r4, #0]
   dbc74:	48a0      	ldr	r0, [pc, #640]	; (dbef8 <_Z8settingsv+0x2dc>)
   dbc76:	2100      	movs	r1, #0
   dbc78:	f7fd fbe2 	bl	d9440 <_Z7strdispPKciiii>
   dbc7c:	e05e      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 2){
   dbc7e:	f1b8 0f02 	cmp.w	r8, #2
   dbc82:	d108      	bne.n	dbc96 <_Z8settingsv+0x7a>
            strdisp("Sig Strgth", 0, rclock, gclock, bclock);
   dbc84:	6833      	ldr	r3, [r6, #0]
   dbc86:	9300      	str	r3, [sp, #0]
   dbc88:	682a      	ldr	r2, [r5, #0]
   dbc8a:	6823      	ldr	r3, [r4, #0]
   dbc8c:	489b      	ldr	r0, [pc, #620]	; (dbefc <_Z8settingsv+0x2e0>)
   dbc8e:	2100      	movs	r1, #0
   dbc90:	f7fd fbd6 	bl	d9440 <_Z7strdispPKciiii>
   dbc94:	e052      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 3){
   dbc96:	f1b8 0f03 	cmp.w	r8, #3
   dbc9a:	d108      	bne.n	dbcae <_Z8settingsv+0x92>
            strdisp("Time zone", 0, rclock, gclock, bclock);
   dbc9c:	6833      	ldr	r3, [r6, #0]
   dbc9e:	9300      	str	r3, [sp, #0]
   dbca0:	682a      	ldr	r2, [r5, #0]
   dbca2:	6823      	ldr	r3, [r4, #0]
   dbca4:	4896      	ldr	r0, [pc, #600]	; (dbf00 <_Z8settingsv+0x2e4>)
   dbca6:	2100      	movs	r1, #0
   dbca8:	f7fd fbca 	bl	d9440 <_Z7strdispPKciiii>
   dbcac:	e046      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 4){
   dbcae:	f1b8 0f04 	cmp.w	r8, #4
   dbcb2:	d108      	bne.n	dbcc6 <_Z8settingsv+0xaa>
            strdisp("Sys vrsn", 0, rclock, gclock, bclock);
   dbcb4:	6833      	ldr	r3, [r6, #0]
   dbcb6:	9300      	str	r3, [sp, #0]
   dbcb8:	682a      	ldr	r2, [r5, #0]
   dbcba:	6823      	ldr	r3, [r4, #0]
   dbcbc:	4891      	ldr	r0, [pc, #580]	; (dbf04 <_Z8settingsv+0x2e8>)
   dbcbe:	2100      	movs	r1, #0
   dbcc0:	f7fd fbbe 	bl	d9440 <_Z7strdispPKciiii>
   dbcc4:	e03a      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 5){
   dbcc6:	f1b8 0f05 	cmp.w	r8, #5
   dbcca:	d108      	bne.n	dbcde <_Z8settingsv+0xc2>
            strdisp("Dsp wthr", 0, rclock, gclock, bclock);
   dbccc:	6833      	ldr	r3, [r6, #0]
   dbcce:	9300      	str	r3, [sp, #0]
   dbcd0:	682a      	ldr	r2, [r5, #0]
   dbcd2:	6823      	ldr	r3, [r4, #0]
   dbcd4:	488c      	ldr	r0, [pc, #560]	; (dbf08 <_Z8settingsv+0x2ec>)
   dbcd6:	2100      	movs	r1, #0
   dbcd8:	f7fd fbb2 	bl	d9440 <_Z7strdispPKciiii>
   dbcdc:	e02e      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 6){
   dbcde:	f1b8 0f06 	cmp.w	r8, #6
   dbce2:	d108      	bne.n	dbcf6 <_Z8settingsv+0xda>
            strdisp("Get CO2", 0, rclock, gclock, bclock);
   dbce4:	6833      	ldr	r3, [r6, #0]
   dbce6:	9300      	str	r3, [sp, #0]
   dbce8:	682a      	ldr	r2, [r5, #0]
   dbcea:	6823      	ldr	r3, [r4, #0]
   dbcec:	4887      	ldr	r0, [pc, #540]	; (dbf0c <_Z8settingsv+0x2f0>)
   dbcee:	2100      	movs	r1, #0
   dbcf0:	f7fd fba6 	bl	d9440 <_Z7strdispPKciiii>
   dbcf4:	e022      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 7){
   dbcf6:	f1b8 0f07 	cmp.w	r8, #7
   dbcfa:	d108      	bne.n	dbd0e <_Z8settingsv+0xf2>
            strdisp("Get tmp", 0, rclock, gclock, bclock);
   dbcfc:	6833      	ldr	r3, [r6, #0]
   dbcfe:	9300      	str	r3, [sp, #0]
   dbd00:	682a      	ldr	r2, [r5, #0]
   dbd02:	6823      	ldr	r3, [r4, #0]
   dbd04:	4882      	ldr	r0, [pc, #520]	; (dbf10 <_Z8settingsv+0x2f4>)
   dbd06:	2100      	movs	r1, #0
   dbd08:	f7fd fb9a 	bl	d9440 <_Z7strdispPKciiii>
   dbd0c:	e016      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 8){
   dbd0e:	f1b8 0f08 	cmp.w	r8, #8
   dbd12:	d108      	bne.n	dbd26 <_Z8settingsv+0x10a>
            strdisp("Drk clr", 0, rclock, gclock, bclock);
   dbd14:	6833      	ldr	r3, [r6, #0]
   dbd16:	9300      	str	r3, [sp, #0]
   dbd18:	682a      	ldr	r2, [r5, #0]
   dbd1a:	6823      	ldr	r3, [r4, #0]
   dbd1c:	487d      	ldr	r0, [pc, #500]	; (dbf14 <_Z8settingsv+0x2f8>)
   dbd1e:	2100      	movs	r1, #0
   dbd20:	f7fd fb8e 	bl	d9440 <_Z7strdispPKciiii>
   dbd24:	e00a      	b.n	dbd3c <_Z8settingsv+0x120>
        }
        else if(smode == 9){
   dbd26:	f1b8 0f09 	cmp.w	r8, #9
   dbd2a:	d107      	bne.n	dbd3c <_Z8settingsv+0x120>
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dbd2c:	6833      	ldr	r3, [r6, #0]
   dbd2e:	9300      	str	r3, [sp, #0]
   dbd30:	682a      	ldr	r2, [r5, #0]
   dbd32:	6823      	ldr	r3, [r4, #0]
   dbd34:	4878      	ldr	r0, [pc, #480]	; (dbf18 <_Z8settingsv+0x2fc>)
   dbd36:	2100      	movs	r1, #0
   dbd38:	f7fd fb82 	bl	d9440 <_Z7strdispPKciiii>
        }
        if(digitalRead(D1) == HIGH){
   dbd3c:	2001      	movs	r0, #1
   dbd3e:	f004 fd0f 	bl	e0760 <digitalRead>
   dbd42:	2801      	cmp	r0, #1
   dbd44:	4681      	mov	r9, r0
   dbd46:	f040 837a 	bne.w	dc43e <_Z8settingsv+0x822>
            if(dispm == 1){
   dbd4a:	2f01      	cmp	r7, #1
   dbd4c:	d133      	bne.n	dbdb6 <_Z8settingsv+0x19a>
                strip.clear();
   dbd4e:	4865      	ldr	r0, [pc, #404]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbd50:	f002 f9b1 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   dbd54:	4b71      	ldr	r3, [pc, #452]	; (dbf1c <_Z8settingsv+0x300>)
   dbd56:	2200      	movs	r2, #0
   dbd58:	4611      	mov	r1, r2
   dbd5a:	6858      	ldr	r0, [r3, #4]
   dbd5c:	f002 fc68 	bl	de630 <network_config>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
   dbd60:	2102      	movs	r1, #2
   dbd62:	682a      	ldr	r2, [r5, #0]
   dbd64:	6833      	ldr	r3, [r6, #0]
   dbd66:	fb92 f2f1 	sdiv	r2, r2, r1
   dbd6a:	fb93 f3f1 	sdiv	r3, r3, r1
   dbd6e:	305d      	adds	r0, #93	; 0x5d
   dbd70:	9300      	str	r3, [sp, #0]
   dbd72:	2100      	movs	r1, #0
   dbd74:	6823      	ldr	r3, [r4, #0]
   dbd76:	f7fd fb63 	bl	d9440 <_Z7strdispPKciiii>
                while(digitalRead(D1) == HIGH)
   dbd7a:	2001      	movs	r0, #1
   dbd7c:	f004 fcf0 	bl	e0760 <digitalRead>
   dbd80:	2801      	cmp	r0, #1
   dbd82:	d103      	bne.n	dbd8c <_Z8settingsv+0x170>
                {
                    delay(50);
   dbd84:	2032      	movs	r0, #50	; 0x32
   dbd86:	f003 fa4b 	bl	df220 <delay>
        }
        if(digitalRead(D1) == HIGH){
            if(dispm == 1){
                strip.clear();
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
   dbd8a:	e7f6      	b.n	dbd7a <_Z8settingsv+0x15e>
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dbd8c:	2001      	movs	r0, #1
   dbd8e:	f004 fce7 	bl	e0760 <digitalRead>
   dbd92:	b918      	cbnz	r0, dbd9c <_Z8settingsv+0x180>
                {
                    delay(50);
   dbd94:	2032      	movs	r0, #50	; 0x32
   dbd96:	f003 fa43 	bl	df220 <delay>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dbd9a:	e7f7      	b.n	dbd8c <_Z8settingsv+0x170>
                {
                    delay(50);
                }
                strip.clear();
   dbd9c:	4851      	ldr	r0, [pc, #324]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbd9e:	f002 f98a 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dbda2:	2001      	movs	r0, #1
   dbda4:	f004 fcdc 	bl	e0760 <digitalRead>
   dbda8:	2801      	cmp	r0, #1
   dbdaa:	f040 8348 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dbdae:	2005      	movs	r0, #5
   dbdb0:	f003 fa36 	bl	df220 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(50);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dbdb4:	e7f5      	b.n	dbda2 <_Z8settingsv+0x186>
                {
                    delay(5);
                }
            }
            else if(dispm == 2){
   dbdb6:	2f02      	cmp	r7, #2
   dbdb8:	d150      	bne.n	dbe5c <_Z8settingsv+0x240>
                WiFiSignal sig = WiFi.RSSI();
   dbdba:	4958      	ldr	r1, [pc, #352]	; (dbf1c <_Z8settingsv+0x300>)
   dbdbc:	a807      	add	r0, sp, #28
   dbdbe:	f004 fb8f 	bl	e04e0 <_ZN5spark9WiFiClass4RSSIEv>
                int strength = int(sig.getStrength());
   dbdc2:	a807      	add	r0, sp, #28
   dbdc4:	f004 fb52 	bl	e046c <_ZNK10WiFiSignal11getStrengthEv>
   dbdc8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
                strip.clear();
   dbdcc:	4845      	ldr	r0, [pc, #276]	; (dbee4 <_Z8settingsv+0x2c8>)
                    delay(5);
                }
            }
            else if(dispm == 2){
                WiFiSignal sig = WiFi.RSSI();
                int strength = int(sig.getStrength());
   dbdce:	ee17 ba90 	vmov	fp, s15
                strip.clear();
   dbdd2:	f002 f970 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                snum(strength/100,0,rclock,gclock,bclock);
   dbdd6:	6833      	ldr	r3, [r6, #0]
   dbdd8:	9300      	str	r3, [sp, #0]
   dbdda:	682a      	ldr	r2, [r5, #0]
   dbddc:	6823      	ldr	r3, [r4, #0]
   dbdde:	2100      	movs	r1, #0
   dbde0:	2064      	movs	r0, #100	; 0x64
   dbde2:	fb9b f0f0 	sdiv	r0, fp, r0
   dbde6:	f7fa fc11 	bl	d660c <_Z4snumiiiii>
                snum((strength/10)%10,32,rclock,gclock,bclock);
   dbdea:	f04f 090a 	mov.w	r9, #10
   dbdee:	6833      	ldr	r3, [r6, #0]
   dbdf0:	fb9b faf9 	sdiv	sl, fp, r9
   dbdf4:	9300      	str	r3, [sp, #0]
   dbdf6:	682a      	ldr	r2, [r5, #0]
   dbdf8:	6823      	ldr	r3, [r4, #0]
   dbdfa:	fb9a f0f9 	sdiv	r0, sl, r9
   dbdfe:	2120      	movs	r1, #32
   dbe00:	fb09 a010 	mls	r0, r9, r0, sl
   dbe04:	f7fa fc02 	bl	d660c <_Z4snumiiiii>
                snum(strength%10,64,rclock,gclock,bclock);
   dbe08:	6833      	ldr	r3, [r6, #0]
   dbe0a:	9300      	str	r3, [sp, #0]
   dbe0c:	fb09 b01a 	mls	r0, r9, sl, fp
   dbe10:	6823      	ldr	r3, [r4, #0]
   dbe12:	682a      	ldr	r2, [r5, #0]
   dbe14:	2140      	movs	r1, #64	; 0x40
   dbe16:	f7fa fbf9 	bl	d660c <_Z4snumiiiii>
                strip.show();
   dbe1a:	4832      	ldr	r0, [pc, #200]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbe1c:	f001 ff7a 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dbe20:	2001      	movs	r0, #1
   dbe22:	f004 fc9d 	bl	e0760 <digitalRead>
   dbe26:	2801      	cmp	r0, #1
   dbe28:	d103      	bne.n	dbe32 <_Z8settingsv+0x216>
                {
                    delay(5);
   dbe2a:	2005      	movs	r0, #5
   dbe2c:	f003 f9f8 	bl	df220 <delay>
                strip.clear();
                snum(strength/100,0,rclock,gclock,bclock);
                snum((strength/10)%10,32,rclock,gclock,bclock);
                snum(strength%10,64,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dbe30:	e7f6      	b.n	dbe20 <_Z8settingsv+0x204>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dbe32:	2001      	movs	r0, #1
   dbe34:	f004 fc94 	bl	e0760 <digitalRead>
   dbe38:	b918      	cbnz	r0, dbe42 <_Z8settingsv+0x226>
                {
                    delay(5);
   dbe3a:	2005      	movs	r0, #5
   dbe3c:	f003 f9f0 	bl	df220 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dbe40:	e7f7      	b.n	dbe32 <_Z8settingsv+0x216>
                {
                    delay(5);
                }
                strip.clear();
   dbe42:	4828      	ldr	r0, [pc, #160]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbe44:	f002 f937 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dbe48:	2001      	movs	r0, #1
   dbe4a:	f004 fc89 	bl	e0760 <digitalRead>
   dbe4e:	2801      	cmp	r0, #1
   dbe50:	f040 82f5 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dbe54:	2005      	movs	r0, #5
   dbe56:	f003 f9e3 	bl	df220 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dbe5a:	e7f5      	b.n	dbe48 <_Z8settingsv+0x22c>
                {
                    delay(5);
                }
            }
            else if(dispm == 3){
   dbe5c:	2f03      	cmp	r7, #3
   dbe5e:	f040 80e7 	bne.w	dc030 <_Z8settingsv+0x414>
                strip.clear();
   dbe62:	4820      	ldr	r0, [pc, #128]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbe64:	f002 f927 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                int tzoff = 12-EEPROM.read(1);
   dbe68:	f004 fca4 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dbe6c:	4648      	mov	r0, r9
   dbe6e:	f7f8 facf 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dbe72:	6833      	ldr	r3, [r6, #0]
   dbe74:	682a      	ldr	r2, [r5, #0]
   dbe76:	9300      	str	r3, [sp, #0]
                }
            }
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
   dbe78:	f1d0 090c 	rsbs	r9, r0, #12
                {
                    letter('-', 0, rclock, gclock, bclock);
   dbe7c:	bf4c      	ite	mi
   dbe7e:	202d      	movmi	r0, #45	; 0x2d
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dbe80:	202b      	movpl	r0, #43	; 0x2b
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dbe82:	6823      	ldr	r3, [r4, #0]
   dbe84:	2100      	movs	r1, #0
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dbe86:	f7fb ff63 	bl	d7d50 <_Z6letterciiii>
                    strip.show();
   dbe8a:	4816      	ldr	r0, [pc, #88]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbe8c:	f001 ff42 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dbe90:	6833      	ldr	r3, [r6, #0]
   dbe92:	9300      	str	r3, [sp, #0]
   dbe94:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dbe98:	f04f 0a0a 	mov.w	sl, #10
   dbe9c:	6823      	ldr	r3, [r4, #0]
   dbe9e:	682a      	ldr	r2, [r5, #0]
   dbea0:	212f      	movs	r1, #47	; 0x2f
   dbea2:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dbea6:	fb90 f0fa 	sdiv	r0, r0, sl
   dbeaa:	f7fa fbaf 	bl	d660c <_Z4snumiiiii>
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dbeae:	fb99 f0fa 	sdiv	r0, r9, sl
   dbeb2:	fb0a 9010 	mls	r0, sl, r0, r9
   dbeb6:	6833      	ldr	r3, [r6, #0]
   dbeb8:	9300      	str	r3, [sp, #0]
   dbeba:	2800      	cmp	r0, #0
   dbebc:	bfb8      	it	lt
   dbebe:	4240      	neglt	r0, r0
   dbec0:	6823      	ldr	r3, [r4, #0]
   dbec2:	682a      	ldr	r2, [r5, #0]
   dbec4:	214f      	movs	r1, #79	; 0x4f
   dbec6:	f7fa fba1 	bl	d660c <_Z4snumiiiii>
                strip.show();
   dbeca:	4806      	ldr	r0, [pc, #24]	; (dbee4 <_Z8settingsv+0x2c8>)
   dbecc:	f001 ff22 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dbed0:	2001      	movs	r0, #1
   dbed2:	f004 fc45 	bl	e0760 <digitalRead>
   dbed6:	2801      	cmp	r0, #1
   dbed8:	d168      	bne.n	dbfac <_Z8settingsv+0x390>
                {
                    delay(5);
   dbeda:	2005      	movs	r0, #5
   dbedc:	f003 f9a0 	bl	df220 <delay>
                    strip.show();
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dbee0:	e7f6      	b.n	dbed0 <_Z8settingsv+0x2b4>
   dbee2:	bf00      	nop
   dbee4:	2003e328 	.word	0x2003e328
   dbee8:	2003e314 	.word	0x2003e314
   dbeec:	2003e350 	.word	0x2003e350
   dbef0:	2003e35c 	.word	0x2003e35c
   dbef4:	000e3a3c 	.word	0x000e3a3c
   dbef8:	000e3a45 	.word	0x000e3a45
   dbefc:	000e3a4a 	.word	0x000e3a4a
   dbf00:	000e3a55 	.word	0x000e3a55
   dbf04:	000e3a5f 	.word	0x000e3a5f
   dbf08:	000e3a68 	.word	0x000e3a68
   dbf0c:	000e3a71 	.word	0x000e3a71
   dbf10:	000e3a79 	.word	0x000e3a79
   dbf14:	000e3a81 	.word	0x000e3a81
   dbf18:	000e3a89 	.word	0x000e3a89
   dbf1c:	2003e6e4 	.word	0x2003e6e4
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dbf20:	2002      	movs	r0, #2
   dbf22:	f004 fc1d 	bl	e0760 <digitalRead>
   dbf26:	2801      	cmp	r0, #1
   dbf28:	d046      	beq.n	dbfb8 <_Z8settingsv+0x39c>
                        while(digitalRead(D2) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
   dbf2a:	2000      	movs	r0, #0
   dbf2c:	f004 fc18 	bl	e0760 <digitalRead>
   dbf30:	2801      	cmp	r0, #1
   dbf32:	d146      	bne.n	dbfc2 <_Z8settingsv+0x3a6>
   dbf34:	f119 0f0b 	cmn.w	r9, #11
   dbf38:	f280 82e5 	bge.w	dc506 <_Z8settingsv+0x8ea>
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
                    {
                        letter('+', 0, 0, 0, 0);
   dbf3c:	f04f 0a00 	mov.w	sl, #0
   dbf40:	4653      	mov	r3, sl
   dbf42:	4652      	mov	r2, sl
   dbf44:	4651      	mov	r1, sl
   dbf46:	202b      	movs	r0, #43	; 0x2b
   dbf48:	f8cd a000 	str.w	sl, [sp]
   dbf4c:	f7fb ff00 	bl	d7d50 <_Z6letterciiii>
                        letter('-', 0, rclock, gclock, bclock);
   dbf50:	6833      	ldr	r3, [r6, #0]
   dbf52:	9300      	str	r3, [sp, #0]
   dbf54:	202d      	movs	r0, #45	; 0x2d
   dbf56:	6823      	ldr	r3, [r4, #0]
   dbf58:	682a      	ldr	r2, [r5, #0]
   dbf5a:	4651      	mov	r1, sl
   dbf5c:	f7fb fef8 	bl	d7d50 <_Z6letterciiii>
                        strip.show();
   dbf60:	48bc      	ldr	r0, [pc, #752]	; (dc254 <_Z8settingsv+0x638>)
   dbf62:	f001 fed7 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dbf66:	6833      	ldr	r3, [r6, #0]
   dbf68:	9300      	str	r3, [sp, #0]
   dbf6a:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dbf6e:	f04f 0a0a 	mov.w	sl, #10
   dbf72:	6823      	ldr	r3, [r4, #0]
   dbf74:	682a      	ldr	r2, [r5, #0]
   dbf76:	212f      	movs	r1, #47	; 0x2f
   dbf78:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dbf7c:	fb90 f0fa 	sdiv	r0, r0, sl
   dbf80:	f7fa fb44 	bl	d660c <_Z4snumiiiii>
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dbf84:	fb99 f0fa 	sdiv	r0, r9, sl
   dbf88:	fb0a 9010 	mls	r0, sl, r0, r9
   dbf8c:	2800      	cmp	r0, #0
   dbf8e:	6833      	ldr	r3, [r6, #0]
   dbf90:	9300      	str	r3, [sp, #0]
   dbf92:	bfb8      	it	lt
   dbf94:	4240      	neglt	r0, r0
   dbf96:	6823      	ldr	r3, [r4, #0]
   dbf98:	682a      	ldr	r2, [r5, #0]
   dbf9a:	214f      	movs	r1, #79	; 0x4f
   dbf9c:	f7fa fb36 	bl	d660c <_Z4snumiiiii>
                    strip.show();
   dbfa0:	48ac      	ldr	r0, [pc, #688]	; (dc254 <_Z8settingsv+0x638>)
   dbfa2:	f001 feb7 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                    delay(5);
   dbfa6:	2005      	movs	r0, #5
   dbfa8:	f003 f93a 	bl	df220 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dbfac:	2001      	movs	r0, #1
   dbfae:	f004 fbd7 	bl	e0760 <digitalRead>
   dbfb2:	2800      	cmp	r0, #0
   dbfb4:	d0b4      	beq.n	dbf20 <_Z8settingsv+0x304>
   dbfb6:	e013      	b.n	dbfe0 <_Z8settingsv+0x3c4>
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dbfb8:	f1b9 0f0c 	cmp.w	r9, #12
   dbfbc:	f040 8297 	bne.w	dc4ee <_Z8settingsv+0x8d2>
   dbfc0:	e7b3      	b.n	dbf2a <_Z8settingsv+0x30e>
                        while(digitalRead(D0) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
   dbfc2:	f1b9 0f00 	cmp.w	r9, #0
   dbfc6:	dbb9      	blt.n	dbf3c <_Z8settingsv+0x320>
                        letter('-', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
   dbfc8:	6833      	ldr	r3, [r6, #0]
   dbfca:	9300      	str	r3, [sp, #0]
   dbfcc:	682a      	ldr	r2, [r5, #0]
   dbfce:	6823      	ldr	r3, [r4, #0]
   dbfd0:	2100      	movs	r1, #0
   dbfd2:	202b      	movs	r0, #43	; 0x2b
   dbfd4:	f7fb febc 	bl	d7d50 <_Z6letterciiii>
                        strip.show();
   dbfd8:	489e      	ldr	r0, [pc, #632]	; (dc254 <_Z8settingsv+0x638>)
   dbfda:	f001 fe9b 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   dbfde:	e7c2      	b.n	dbf66 <_Z8settingsv+0x34a>
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
                    strip.show();
                    delay(5);
                }
                strip.clear();
   dbfe0:	489c      	ldr	r0, [pc, #624]	; (dc254 <_Z8settingsv+0x638>)
   dbfe2:	f002 f868 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                EEPROM.write(1, 12-tzoff);
   dbfe6:	f004 fbe5 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dbfea:	f1c9 010c 	rsb	r1, r9, #12
   dbfee:	b2c9      	uxtb	r1, r1
   dbff0:	2001      	movs	r0, #1
   dbff2:	f7f8 fac7 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                Time.zone(12-EEPROM.read(1));
   dbff6:	f004 fbdd 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dbffa:	2001      	movs	r0, #1
   dbffc:	f7f8 fa08 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dc000:	f1c0 000c 	rsb	r0, r0, #12
   dc004:	ee07 0a90 	vmov	s15, r0
   dc008:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   dc00c:	f003 f8a8 	bl	df160 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dc010:	f002 fb76 	bl	de700 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   dc014:	b110      	cbz	r0, dc01c <_Z8settingsv+0x400>
            return false;
        }
        return spark_sync_time(NULL);
   dc016:	2000      	movs	r0, #0
   dc018:	f002 fb8a 	bl	de730 <spark_sync_time>
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dc01c:	2001      	movs	r0, #1
   dc01e:	f004 fb9f 	bl	e0760 <digitalRead>
   dc022:	2801      	cmp	r0, #1
   dc024:	f040 820b 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc028:	2005      	movs	r0, #5
   dc02a:	f003 f8f9 	bl	df220 <delay>
                }
                strip.clear();
                EEPROM.write(1, 12-tzoff);
                Time.zone(12-EEPROM.read(1));
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dc02e:	e7f5      	b.n	dc01c <_Z8settingsv+0x400>
                {
                    delay(5);
                }
            }
            else if(dispm == 4){
   dc030:	2f04      	cmp	r7, #4
   dc032:	d136      	bne.n	dc0a2 <_Z8settingsv+0x486>
                strip.clear();
   dc034:	4887      	ldr	r0, [pc, #540]	; (dc254 <_Z8settingsv+0x638>)
   dc036:	f002 f83e 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
#define SYSTEM_VERSION_150
#define SYSTEM_VERSION_151RC1
#define SYSTEM_VERSION_151
#define SYSTEM_VERSION_152

typedef struct __attribute__((packed)) SystemVersionInfo
   dc03a:	a810      	add	r0, sp, #64	; 0x40
   dc03c:	231c      	movs	r3, #28
   dc03e:	f820 3d24 	strh.w	r3, [r0, #-36]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   dc042:	2100      	movs	r1, #0
   dc044:	f002 fab6 	bl	de5b4 <system_version_info>
        return String(info.versionString);
   dc048:	a909      	add	r1, sp, #36	; 0x24
   dc04a:	a803      	add	r0, sp, #12
   dc04c:	f002 ffaf 	bl	defae <_ZN6StringC1EPK19__FlashStringHelper>
                strdisp(System.version(),0,rclock,gclock,bclock);
   dc050:	6833      	ldr	r3, [r6, #0]
   dc052:	9300      	str	r3, [sp, #0]
   dc054:	9803      	ldr	r0, [sp, #12]
   dc056:	6823      	ldr	r3, [r4, #0]
   dc058:	682a      	ldr	r2, [r5, #0]
   dc05a:	2100      	movs	r1, #0
   dc05c:	f7fd f9f0 	bl	d9440 <_Z7strdispPKciiii>
   dc060:	a803      	add	r0, sp, #12
   dc062:	f002 ff5d 	bl	def20 <_ZN6StringD1Ev>
                while(digitalRead(D1) == HIGH)
   dc066:	2001      	movs	r0, #1
   dc068:	f004 fb7a 	bl	e0760 <digitalRead>
   dc06c:	2801      	cmp	r0, #1
   dc06e:	d103      	bne.n	dc078 <_Z8settingsv+0x45c>
                {
                    delay(5);
   dc070:	2005      	movs	r0, #5
   dc072:	f003 f8d5 	bl	df220 <delay>
                }
            }
            else if(dispm == 4){
                strip.clear();
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
   dc076:	e7f6      	b.n	dc066 <_Z8settingsv+0x44a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc078:	2001      	movs	r0, #1
   dc07a:	f004 fb71 	bl	e0760 <digitalRead>
   dc07e:	b918      	cbnz	r0, dc088 <_Z8settingsv+0x46c>
                {
                    delay(5);
   dc080:	2005      	movs	r0, #5
   dc082:	f003 f8cd 	bl	df220 <delay>
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc086:	e7f7      	b.n	dc078 <_Z8settingsv+0x45c>
                {
                    delay(5);
                }
                strip.clear();
   dc088:	4872      	ldr	r0, [pc, #456]	; (dc254 <_Z8settingsv+0x638>)
   dc08a:	f002 f814 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc08e:	2001      	movs	r0, #1
   dc090:	f004 fb66 	bl	e0760 <digitalRead>
   dc094:	2801      	cmp	r0, #1
   dc096:	f040 81d2 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc09a:	2005      	movs	r0, #5
   dc09c:	f003 f8c0 	bl	df220 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc0a0:	e7f5      	b.n	dc08e <_Z8settingsv+0x472>
                {
                    delay(5);
                }
            }
            else if(dispm == 5){
   dc0a2:	2f05      	cmp	r7, #5
   dc0a4:	d15c      	bne.n	dc160 <_Z8settingsv+0x544>
                strip.clear();
   dc0a6:	486b      	ldr	r0, [pc, #428]	; (dc254 <_Z8settingsv+0x638>)
   dc0a8:	f002 f805 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dc0ac:	2200      	movs	r2, #0
   dc0ae:	4611      	mov	r1, r2
   dc0b0:	9200      	str	r2, [sp, #0]
   dc0b2:	6823      	ldr	r3, [r4, #0]
   dc0b4:	4868      	ldr	r0, [pc, #416]	; (dc258 <_Z8settingsv+0x63c>)
   dc0b6:	f7fd f9c3 	bl	d9440 <_Z7strdispPKciiii>
                EEPROM.write(2,1);
   dc0ba:	f004 fb7b 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc0be:	4649      	mov	r1, r9
   dc0c0:	2002      	movs	r0, #2
   dc0c2:	f7f8 fa5f 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dc0c6:	2001      	movs	r0, #1
   dc0c8:	f004 fb4a 	bl	e0760 <digitalRead>
   dc0cc:	2801      	cmp	r0, #1
   dc0ce:	d11c      	bne.n	dc10a <_Z8settingsv+0x4ee>
                {
                    delay(5);
   dc0d0:	2005      	movs	r0, #5
   dc0d2:	f003 f8a5 	bl	df220 <delay>
            }
            else if(dispm == 5){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
   dc0d6:	e7f6      	b.n	dc0c6 <_Z8settingsv+0x4aa>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dc0d8:	f004 fb42 	bl	e0760 <digitalRead>
   dc0dc:	2801      	cmp	r0, #1
   dc0de:	4682      	mov	sl, r0
   dc0e0:	d11a      	bne.n	dc118 <_Z8settingsv+0x4fc>
                        strip.clear();
   dc0e2:	485c      	ldr	r0, [pc, #368]	; (dc254 <_Z8settingsv+0x638>)
   dc0e4:	f001 ffe7 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dc0e8:	4649      	mov	r1, r9
   dc0ea:	6823      	ldr	r3, [r4, #0]
   dc0ec:	485a      	ldr	r0, [pc, #360]	; (dc258 <_Z8settingsv+0x63c>)
   dc0ee:	f8cd 9000 	str.w	r9, [sp]
   dc0f2:	464a      	mov	r2, r9
   dc0f4:	f7fd f9a4 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(2,1);
   dc0f8:	f004 fb5c 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc0fc:	4651      	mov	r1, sl
   dc0fe:	2002      	movs	r0, #2
   dc100:	f7f8 fa40 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(2,0);
                    }
                    delay(5);
   dc104:	2005      	movs	r0, #5
   dc106:	f003 f88b 	bl	df220 <delay>
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc10a:	2001      	movs	r0, #1
   dc10c:	f004 fb28 	bl	e0760 <digitalRead>
   dc110:	4681      	mov	r9, r0
   dc112:	2800      	cmp	r0, #0
   dc114:	d0e0      	beq.n	dc0d8 <_Z8settingsv+0x4bc>
   dc116:	e016      	b.n	dc146 <_Z8settingsv+0x52a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(2,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dc118:	2002      	movs	r0, #2
   dc11a:	f004 fb21 	bl	e0760 <digitalRead>
   dc11e:	2801      	cmp	r0, #1
   dc120:	d1f0      	bne.n	dc104 <_Z8settingsv+0x4e8>
                        strip.clear();
   dc122:	484c      	ldr	r0, [pc, #304]	; (dc254 <_Z8settingsv+0x638>)
   dc124:	f001 ffc7 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dc128:	4649      	mov	r1, r9
   dc12a:	464b      	mov	r3, r9
   dc12c:	682a      	ldr	r2, [r5, #0]
   dc12e:	f8cd 9000 	str.w	r9, [sp]
   dc132:	484a      	ldr	r0, [pc, #296]	; (dc25c <_Z8settingsv+0x640>)
   dc134:	f7fd f984 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(2,0);
   dc138:	f004 fb3c 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc13c:	4649      	mov	r1, r9
   dc13e:	2002      	movs	r0, #2
   dc140:	f7f8 fa20 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc144:	e7de      	b.n	dc104 <_Z8settingsv+0x4e8>
                    }
                    delay(5);
                }
                strip.clear();
   dc146:	4843      	ldr	r0, [pc, #268]	; (dc254 <_Z8settingsv+0x638>)
   dc148:	f001 ffb5 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc14c:	2001      	movs	r0, #1
   dc14e:	f004 fb07 	bl	e0760 <digitalRead>
   dc152:	2801      	cmp	r0, #1
   dc154:	f040 8173 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc158:	2005      	movs	r0, #5
   dc15a:	f003 f861 	bl	df220 <delay>
                        EEPROM.write(2,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc15e:	e7f5      	b.n	dc14c <_Z8settingsv+0x530>
                {
                    delay(5);
                }
            }
            else if(dispm == 6){
   dc160:	2f06      	cmp	r7, #6
   dc162:	d15c      	bne.n	dc21e <_Z8settingsv+0x602>
                strip.clear();
   dc164:	483b      	ldr	r0, [pc, #236]	; (dc254 <_Z8settingsv+0x638>)
   dc166:	f001 ffa6 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dc16a:	2200      	movs	r2, #0
   dc16c:	4611      	mov	r1, r2
   dc16e:	9200      	str	r2, [sp, #0]
   dc170:	6823      	ldr	r3, [r4, #0]
   dc172:	4839      	ldr	r0, [pc, #228]	; (dc258 <_Z8settingsv+0x63c>)
   dc174:	f7fd f964 	bl	d9440 <_Z7strdispPKciiii>
                EEPROM.write(3,1);
   dc178:	f004 fb1c 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc17c:	4649      	mov	r1, r9
   dc17e:	2003      	movs	r0, #3
   dc180:	f7f8 fa00 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dc184:	2001      	movs	r0, #1
   dc186:	f004 faeb 	bl	e0760 <digitalRead>
   dc18a:	2801      	cmp	r0, #1
   dc18c:	d11c      	bne.n	dc1c8 <_Z8settingsv+0x5ac>
                {
                    delay(5);
   dc18e:	2005      	movs	r0, #5
   dc190:	f003 f846 	bl	df220 <delay>
            }
            else if(dispm == 6){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
   dc194:	e7f6      	b.n	dc184 <_Z8settingsv+0x568>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dc196:	f004 fae3 	bl	e0760 <digitalRead>
   dc19a:	2801      	cmp	r0, #1
   dc19c:	4682      	mov	sl, r0
   dc19e:	d11a      	bne.n	dc1d6 <_Z8settingsv+0x5ba>
                        strip.clear();
   dc1a0:	482c      	ldr	r0, [pc, #176]	; (dc254 <_Z8settingsv+0x638>)
   dc1a2:	f001 ff88 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dc1a6:	4649      	mov	r1, r9
   dc1a8:	6823      	ldr	r3, [r4, #0]
   dc1aa:	482b      	ldr	r0, [pc, #172]	; (dc258 <_Z8settingsv+0x63c>)
   dc1ac:	f8cd 9000 	str.w	r9, [sp]
   dc1b0:	464a      	mov	r2, r9
   dc1b2:	f7fd f945 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(3,1);
   dc1b6:	f004 fafd 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc1ba:	4651      	mov	r1, sl
   dc1bc:	2003      	movs	r0, #3
   dc1be:	f7f8 f9e1 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(3,0);
                    }
                    delay(5);
   dc1c2:	2005      	movs	r0, #5
   dc1c4:	f003 f82c 	bl	df220 <delay>
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc1c8:	2001      	movs	r0, #1
   dc1ca:	f004 fac9 	bl	e0760 <digitalRead>
   dc1ce:	4681      	mov	r9, r0
   dc1d0:	2800      	cmp	r0, #0
   dc1d2:	d0e0      	beq.n	dc196 <_Z8settingsv+0x57a>
   dc1d4:	e016      	b.n	dc204 <_Z8settingsv+0x5e8>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(3,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dc1d6:	2002      	movs	r0, #2
   dc1d8:	f004 fac2 	bl	e0760 <digitalRead>
   dc1dc:	2801      	cmp	r0, #1
   dc1de:	d1f0      	bne.n	dc1c2 <_Z8settingsv+0x5a6>
                        strip.clear();
   dc1e0:	481c      	ldr	r0, [pc, #112]	; (dc254 <_Z8settingsv+0x638>)
   dc1e2:	f001 ff68 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dc1e6:	4649      	mov	r1, r9
   dc1e8:	464b      	mov	r3, r9
   dc1ea:	682a      	ldr	r2, [r5, #0]
   dc1ec:	f8cd 9000 	str.w	r9, [sp]
   dc1f0:	481a      	ldr	r0, [pc, #104]	; (dc25c <_Z8settingsv+0x640>)
   dc1f2:	f7fd f925 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(3,0);
   dc1f6:	f004 fadd 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc1fa:	4649      	mov	r1, r9
   dc1fc:	2003      	movs	r0, #3
   dc1fe:	f7f8 f9c1 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc202:	e7de      	b.n	dc1c2 <_Z8settingsv+0x5a6>
                    }
                    delay(5);
                }
                strip.clear();
   dc204:	4813      	ldr	r0, [pc, #76]	; (dc254 <_Z8settingsv+0x638>)
   dc206:	f001 ff56 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc20a:	2001      	movs	r0, #1
   dc20c:	f004 faa8 	bl	e0760 <digitalRead>
   dc210:	2801      	cmp	r0, #1
   dc212:	f040 8114 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc216:	2005      	movs	r0, #5
   dc218:	f003 f802 	bl	df220 <delay>
                        EEPROM.write(3,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc21c:	e7f5      	b.n	dc20a <_Z8settingsv+0x5ee>
                {
                    delay(5);
                }
            }
            else if(dispm == 7){
   dc21e:	2f07      	cmp	r7, #7
   dc220:	d162      	bne.n	dc2e8 <_Z8settingsv+0x6cc>
                strip.clear();
   dc222:	480c      	ldr	r0, [pc, #48]	; (dc254 <_Z8settingsv+0x638>)
   dc224:	f001 ff47 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dc228:	2200      	movs	r2, #0
   dc22a:	4611      	mov	r1, r2
   dc22c:	9200      	str	r2, [sp, #0]
   dc22e:	6823      	ldr	r3, [r4, #0]
   dc230:	4809      	ldr	r0, [pc, #36]	; (dc258 <_Z8settingsv+0x63c>)
   dc232:	f7fd f905 	bl	d9440 <_Z7strdispPKciiii>
                EEPROM.write(4,1);
   dc236:	f004 fabd 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc23a:	4649      	mov	r1, r9
   dc23c:	2004      	movs	r0, #4
   dc23e:	f7f8 f9a1 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dc242:	2001      	movs	r0, #1
   dc244:	f004 fa8c 	bl	e0760 <digitalRead>
   dc248:	2801      	cmp	r0, #1
   dc24a:	d122      	bne.n	dc292 <_Z8settingsv+0x676>
                {
                    delay(5);
   dc24c:	2005      	movs	r0, #5
   dc24e:	f002 ffe7 	bl	df220 <delay>
            }
            else if(dispm == 7){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
   dc252:	e7f6      	b.n	dc242 <_Z8settingsv+0x626>
   dc254:	2003e328 	.word	0x2003e328
   dc258:	000e3a92 	.word	0x000e3a92
   dc25c:	000e3a96 	.word	0x000e3a96
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dc260:	f004 fa7e 	bl	e0760 <digitalRead>
   dc264:	2801      	cmp	r0, #1
   dc266:	4682      	mov	sl, r0
   dc268:	d11a      	bne.n	dc2a0 <_Z8settingsv+0x684>
                        strip.clear();
   dc26a:	48d0      	ldr	r0, [pc, #832]	; (dc5ac <_Z8settingsv+0x990>)
   dc26c:	f001 ff23 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dc270:	4649      	mov	r1, r9
   dc272:	6823      	ldr	r3, [r4, #0]
   dc274:	48ce      	ldr	r0, [pc, #824]	; (dc5b0 <_Z8settingsv+0x994>)
   dc276:	f8cd 9000 	str.w	r9, [sp]
   dc27a:	464a      	mov	r2, r9
   dc27c:	f7fd f8e0 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(4,1);
   dc280:	f004 fa98 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc284:	4651      	mov	r1, sl
   dc286:	2004      	movs	r0, #4
   dc288:	f7f8 f97c 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(4,0);
                    }
                    delay(5);
   dc28c:	2005      	movs	r0, #5
   dc28e:	f002 ffc7 	bl	df220 <delay>
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc292:	2001      	movs	r0, #1
   dc294:	f004 fa64 	bl	e0760 <digitalRead>
   dc298:	4681      	mov	r9, r0
   dc29a:	2800      	cmp	r0, #0
   dc29c:	d0e0      	beq.n	dc260 <_Z8settingsv+0x644>
   dc29e:	e016      	b.n	dc2ce <_Z8settingsv+0x6b2>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(4,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dc2a0:	2002      	movs	r0, #2
   dc2a2:	f004 fa5d 	bl	e0760 <digitalRead>
   dc2a6:	2801      	cmp	r0, #1
   dc2a8:	d1f0      	bne.n	dc28c <_Z8settingsv+0x670>
                        strip.clear();
   dc2aa:	48c0      	ldr	r0, [pc, #768]	; (dc5ac <_Z8settingsv+0x990>)
   dc2ac:	f001 ff03 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dc2b0:	4649      	mov	r1, r9
   dc2b2:	464b      	mov	r3, r9
   dc2b4:	682a      	ldr	r2, [r5, #0]
   dc2b6:	f8cd 9000 	str.w	r9, [sp]
   dc2ba:	48be      	ldr	r0, [pc, #760]	; (dc5b4 <_Z8settingsv+0x998>)
   dc2bc:	f7fd f8c0 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(4,0);
   dc2c0:	f004 fa78 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc2c4:	4649      	mov	r1, r9
   dc2c6:	2004      	movs	r0, #4
   dc2c8:	f7f8 f95c 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc2cc:	e7de      	b.n	dc28c <_Z8settingsv+0x670>
                    }
                    delay(5);
                }
                strip.clear();
   dc2ce:	48b7      	ldr	r0, [pc, #732]	; (dc5ac <_Z8settingsv+0x990>)
   dc2d0:	f001 fef1 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc2d4:	2001      	movs	r0, #1
   dc2d6:	f004 fa43 	bl	e0760 <digitalRead>
   dc2da:	2801      	cmp	r0, #1
   dc2dc:	f040 80af 	bne.w	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc2e0:	2005      	movs	r0, #5
   dc2e2:	f002 ff9d 	bl	df220 <delay>
                        EEPROM.write(4,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc2e6:	e7f5      	b.n	dc2d4 <_Z8settingsv+0x6b8>
                {
                    delay(5);
                }
            }
            else if(dispm == 8){
   dc2e8:	2f08      	cmp	r7, #8
   dc2ea:	d14a      	bne.n	dc382 <_Z8settingsv+0x766>
                strip.clear();
   dc2ec:	48af      	ldr	r0, [pc, #700]	; (dc5ac <_Z8settingsv+0x990>)
   dc2ee:	f001 fee2 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
   dc2f2:	2300      	movs	r3, #0
   dc2f4:	4619      	mov	r1, r3
   dc2f6:	9300      	str	r3, [sp, #0]
   dc2f8:	682a      	ldr	r2, [r5, #0]
   dc2fa:	48af      	ldr	r0, [pc, #700]	; (dc5b8 <_Z8settingsv+0x99c>)
   dc2fc:	f7fd f8a0 	bl	d9440 <_Z7strdispPKciiii>
                EEPROM.write(5,1);
   dc300:	f004 fa58 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc304:	4649      	mov	r1, r9
   dc306:	2005      	movs	r0, #5
   dc308:	f7f8 f93c 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dc30c:	2001      	movs	r0, #1
   dc30e:	f004 fa27 	bl	e0760 <digitalRead>
   dc312:	2801      	cmp	r0, #1
   dc314:	d124      	bne.n	dc360 <_Z8settingsv+0x744>
                {
                    delay(5);
   dc316:	2005      	movs	r0, #5
   dc318:	f002 ff82 	bl	df220 <delay>
                strip.clear();
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
   dc31c:	e7f6      	b.n	dc30c <_Z8settingsv+0x6f0>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
   dc31e:	f004 fa1f 	bl	e0760 <digitalRead>
   dc322:	2801      	cmp	r0, #1
   dc324:	4682      	mov	sl, r0
   dc326:	f040 80fa 	bne.w	dc51e <_Z8settingsv+0x902>
   dc32a:	2002      	movs	r0, #2
   dc32c:	f004 fa18 	bl	e0760 <digitalRead>
   dc330:	4681      	mov	r9, r0
   dc332:	2800      	cmp	r0, #0
   dc334:	f040 80f3 	bne.w	dc51e <_Z8settingsv+0x902>
                        strip.clear();
   dc338:	489c      	ldr	r0, [pc, #624]	; (dc5ac <_Z8settingsv+0x990>)
   dc33a:	f001 febc 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("RED",0,rclock,0,0);
   dc33e:	4649      	mov	r1, r9
   dc340:	464b      	mov	r3, r9
   dc342:	682a      	ldr	r2, [r5, #0]
   dc344:	489c      	ldr	r0, [pc, #624]	; (dc5b8 <_Z8settingsv+0x99c>)
   dc346:	f8cd 9000 	str.w	r9, [sp]
   dc34a:	f7fd f879 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(5,1);
   dc34e:	f004 fa31 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc352:	4651      	mov	r1, sl
   dc354:	2005      	movs	r0, #5
   dc356:	f7f8 f915 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                    {
                        strip.clear();
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
   dc35a:	2005      	movs	r0, #5
   dc35c:	f002 ff60 	bl	df220 <delay>
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc360:	2001      	movs	r0, #1
   dc362:	f004 f9fd 	bl	e0760 <digitalRead>
   dc366:	2800      	cmp	r0, #0
   dc368:	d0d9      	beq.n	dc31e <_Z8settingsv+0x702>
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
   dc36a:	4890      	ldr	r0, [pc, #576]	; (dc5ac <_Z8settingsv+0x990>)
   dc36c:	f001 fea3 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc370:	2001      	movs	r0, #1
   dc372:	f004 f9f5 	bl	e0760 <digitalRead>
   dc376:	2801      	cmp	r0, #1
   dc378:	d161      	bne.n	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc37a:	2005      	movs	r0, #5
   dc37c:	f002 ff50 	bl	df220 <delay>
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc380:	e7f6      	b.n	dc370 <_Z8settingsv+0x754>
                {
                    delay(5);
                }
            }
            else if(dispm == 9){
   dc382:	2f09      	cmp	r7, #9
   dc384:	d15b      	bne.n	dc43e <_Z8settingsv+0x822>
                strip.clear();
   dc386:	4889      	ldr	r0, [pc, #548]	; (dc5ac <_Z8settingsv+0x990>)
   dc388:	f001 fe95 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dc38c:	2200      	movs	r2, #0
   dc38e:	4611      	mov	r1, r2
   dc390:	9200      	str	r2, [sp, #0]
   dc392:	6823      	ldr	r3, [r4, #0]
   dc394:	4886      	ldr	r0, [pc, #536]	; (dc5b0 <_Z8settingsv+0x994>)
   dc396:	f7fd f853 	bl	d9440 <_Z7strdispPKciiii>
                EEPROM.write(6,1);
   dc39a:	f004 fa0b 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc39e:	2101      	movs	r1, #1
   dc3a0:	2006      	movs	r0, #6
   dc3a2:	f7f8 f8ef 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dc3a6:	2001      	movs	r0, #1
   dc3a8:	f004 f9da 	bl	e0760 <digitalRead>
   dc3ac:	2801      	cmp	r0, #1
   dc3ae:	d11c      	bne.n	dc3ea <_Z8settingsv+0x7ce>
                {
                    delay(5);
   dc3b0:	2005      	movs	r0, #5
   dc3b2:	f002 ff35 	bl	df220 <delay>
            }
            else if(dispm == 9){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
   dc3b6:	e7f6      	b.n	dc3a6 <_Z8settingsv+0x78a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dc3b8:	f004 f9d2 	bl	e0760 <digitalRead>
   dc3bc:	2801      	cmp	r0, #1
   dc3be:	4682      	mov	sl, r0
   dc3c0:	d11a      	bne.n	dc3f8 <_Z8settingsv+0x7dc>
                        strip.clear();
   dc3c2:	487a      	ldr	r0, [pc, #488]	; (dc5ac <_Z8settingsv+0x990>)
   dc3c4:	f001 fe77 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dc3c8:	4649      	mov	r1, r9
   dc3ca:	6823      	ldr	r3, [r4, #0]
   dc3cc:	4878      	ldr	r0, [pc, #480]	; (dc5b0 <_Z8settingsv+0x994>)
   dc3ce:	f8cd 9000 	str.w	r9, [sp]
   dc3d2:	464a      	mov	r2, r9
   dc3d4:	f7fd f834 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(6,1);
   dc3d8:	f004 f9ec 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc3dc:	4651      	mov	r1, sl
   dc3de:	2006      	movs	r0, #6
   dc3e0:	f7f8 f8d0 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(6,0);
                    }
                    delay(5);
   dc3e4:	2005      	movs	r0, #5
   dc3e6:	f002 ff1b 	bl	df220 <delay>
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc3ea:	2001      	movs	r0, #1
   dc3ec:	f004 f9b8 	bl	e0760 <digitalRead>
   dc3f0:	4681      	mov	r9, r0
   dc3f2:	2800      	cmp	r0, #0
   dc3f4:	d0e0      	beq.n	dc3b8 <_Z8settingsv+0x79c>
   dc3f6:	e016      	b.n	dc426 <_Z8settingsv+0x80a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(6,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dc3f8:	2002      	movs	r0, #2
   dc3fa:	f004 f9b1 	bl	e0760 <digitalRead>
   dc3fe:	2801      	cmp	r0, #1
   dc400:	d1f0      	bne.n	dc3e4 <_Z8settingsv+0x7c8>
                        strip.clear();
   dc402:	486a      	ldr	r0, [pc, #424]	; (dc5ac <_Z8settingsv+0x990>)
   dc404:	f001 fe57 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dc408:	4649      	mov	r1, r9
   dc40a:	464b      	mov	r3, r9
   dc40c:	682a      	ldr	r2, [r5, #0]
   dc40e:	f8cd 9000 	str.w	r9, [sp]
   dc412:	4868      	ldr	r0, [pc, #416]	; (dc5b4 <_Z8settingsv+0x998>)
   dc414:	f7fd f814 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(6,0);
   dc418:	f004 f9cc 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc41c:	4649      	mov	r1, r9
   dc41e:	2006      	movs	r0, #6
   dc420:	f7f8 f8b0 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc424:	e7de      	b.n	dc3e4 <_Z8settingsv+0x7c8>
                    }
                    delay(5);
                }
                strip.clear();
   dc426:	4861      	ldr	r0, [pc, #388]	; (dc5ac <_Z8settingsv+0x990>)
   dc428:	f001 fe45 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc42c:	2001      	movs	r0, #1
   dc42e:	f004 f997 	bl	e0760 <digitalRead>
   dc432:	2801      	cmp	r0, #1
   dc434:	d103      	bne.n	dc43e <_Z8settingsv+0x822>
                {
                    delay(5);
   dc436:	2005      	movs	r0, #5
   dc438:	f002 fef2 	bl	df220 <delay>
                        EEPROM.write(6,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc43c:	e7f6      	b.n	dc42c <_Z8settingsv+0x810>
                {
                    delay(5);
                }
            }
        }
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dc43e:	2000      	movs	r0, #0
   dc440:	f004 f98e 	bl	e0760 <digitalRead>
   dc444:	b9c0      	cbnz	r0, dc478 <_Z8settingsv+0x85c>
   dc446:	2001      	movs	r0, #1
   dc448:	f004 f98a 	bl	e0760 <digitalRead>
   dc44c:	b9a0      	cbnz	r0, dc478 <_Z8settingsv+0x85c>
   dc44e:	2002      	movs	r0, #2
   dc450:	f004 f986 	bl	e0760 <digitalRead>
   dc454:	2801      	cmp	r0, #1
   dc456:	d10f      	bne.n	dc478 <_Z8settingsv+0x85c>
        {
            if(smode < 9){
   dc458:	f1b8 0f08 	cmp.w	r8, #8
   dc45c:	f300 80a3 	bgt.w	dc5a6 <_Z8settingsv+0x98a>
                smode++;
   dc460:	f108 0801 	add.w	r8, r8, #1
                dispm++;
   dc464:	3701      	adds	r7, #1
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dc466:	2002      	movs	r0, #2
   dc468:	f004 f97a 	bl	e0760 <digitalRead>
   dc46c:	2801      	cmp	r0, #1
   dc46e:	f000 8090 	beq.w	dc592 <_Z8settingsv+0x976>
            {
                delay(5);
            }
            strip.clear();
   dc472:	484e      	ldr	r0, [pc, #312]	; (dc5ac <_Z8settingsv+0x990>)
   dc474:	f001 fe1f 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == LOW)
   dc478:	2000      	movs	r0, #0
   dc47a:	f004 f971 	bl	e0760 <digitalRead>
   dc47e:	2801      	cmp	r0, #1
   dc480:	d116      	bne.n	dc4b0 <_Z8settingsv+0x894>
   dc482:	f004 f96d 	bl	e0760 <digitalRead>
   dc486:	b998      	cbnz	r0, dc4b0 <_Z8settingsv+0x894>
   dc488:	2002      	movs	r0, #2
   dc48a:	f004 f969 	bl	e0760 <digitalRead>
   dc48e:	b978      	cbnz	r0, dc4b0 <_Z8settingsv+0x894>
        {
            if(smode > 1){
   dc490:	f1b8 0f01 	cmp.w	r8, #1
   dc494:	f000 80a0 	beq.w	dc5d8 <_Z8settingsv+0x9bc>
                smode--;
   dc498:	f108 38ff 	add.w	r8, r8, #4294967295
                dispm--;
   dc49c:	3f01      	subs	r7, #1
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dc49e:	2000      	movs	r0, #0
   dc4a0:	f004 f95e 	bl	e0760 <digitalRead>
   dc4a4:	2801      	cmp	r0, #1
   dc4a6:	f000 808d 	beq.w	dc5c4 <_Z8settingsv+0x9a8>
            {
                delay(5);
            }
            strip.clear();
   dc4aa:	4840      	ldr	r0, [pc, #256]	; (dc5ac <_Z8settingsv+0x990>)
   dc4ac:	f001 fe03 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dc4b0:	2000      	movs	r0, #0
   dc4b2:	f004 f955 	bl	e0760 <digitalRead>
   dc4b6:	2801      	cmp	r0, #1
   dc4b8:	f040 8091 	bne.w	dc5de <_Z8settingsv+0x9c2>
   dc4bc:	f004 f950 	bl	e0760 <digitalRead>
   dc4c0:	4681      	mov	r9, r0
   dc4c2:	2800      	cmp	r0, #0
   dc4c4:	f040 808b 	bne.w	dc5de <_Z8settingsv+0x9c2>
   dc4c8:	2002      	movs	r0, #2
   dc4ca:	f004 f949 	bl	e0760 <digitalRead>
   dc4ce:	2801      	cmp	r0, #1
   dc4d0:	f040 8085 	bne.w	dc5de <_Z8settingsv+0x9c2>
        {
            strip.clear();
   dc4d4:	4835      	ldr	r0, [pc, #212]	; (dc5ac <_Z8settingsv+0x990>)
   dc4d6:	f001 fdee 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
            sett = false;
        }
        delay(50);
   dc4da:	2032      	movs	r0, #50	; 0x32
   dc4dc:	f002 fea0 	bl	df220 <delay>
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
    while(sett == true)
   dc4e0:	f1b9 0f00 	cmp.w	r9, #0
   dc4e4:	f47f abbf 	bne.w	dbc66 <_Z8settingsv+0x4a>
            strip.clear();
            sett = false;
        }
        delay(50);
    }
}                                                           
   dc4e8:	b011      	add	sp, #68	; 0x44
   dc4ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
   dc4ee:	f109 0901 	add.w	r9, r9, #1
                        while(digitalRead(D2) == HIGH)
   dc4f2:	2002      	movs	r0, #2
   dc4f4:	f004 f934 	bl	e0760 <digitalRead>
   dc4f8:	2801      	cmp	r0, #1
   dc4fa:	f47f ad16 	bne.w	dbf2a <_Z8settingsv+0x30e>
                        {
                            delay(5);
   dc4fe:	2005      	movs	r0, #5
   dc500:	f002 fe8e 	bl	df220 <delay>
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
                        while(digitalRead(D2) == HIGH)
   dc504:	e7f5      	b.n	dc4f2 <_Z8settingsv+0x8d6>
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
   dc506:	f109 39ff 	add.w	r9, r9, #4294967295
                        while(digitalRead(D0) == HIGH)
   dc50a:	2000      	movs	r0, #0
   dc50c:	f004 f928 	bl	e0760 <digitalRead>
   dc510:	2801      	cmp	r0, #1
   dc512:	f47f ad56 	bne.w	dbfc2 <_Z8settingsv+0x3a6>
                        {
                            delay(5);
   dc516:	2005      	movs	r0, #5
   dc518:	f002 fe82 	bl	df220 <delay>
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
                        while(digitalRead(D0) == HIGH)
   dc51c:	e7f5      	b.n	dc50a <_Z8settingsv+0x8ee>
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
                        strip.clear();
                        strdisp("RED",0,rclock,0,0);
                        EEPROM.write(5,1);
                    }
                    else if(digitalRead(D2) == HIGH && digitalRead(D0) == LOW){
   dc51e:	2002      	movs	r0, #2
   dc520:	f004 f91e 	bl	e0760 <digitalRead>
   dc524:	2801      	cmp	r0, #1
   dc526:	d116      	bne.n	dc556 <_Z8settingsv+0x93a>
   dc528:	2000      	movs	r0, #0
   dc52a:	f004 f919 	bl	e0760 <digitalRead>
   dc52e:	4681      	mov	r9, r0
   dc530:	b988      	cbnz	r0, dc556 <_Z8settingsv+0x93a>
                        strip.clear();
   dc532:	481e      	ldr	r0, [pc, #120]	; (dc5ac <_Z8settingsv+0x990>)
   dc534:	f001 fdbf 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("GREEN",0,0,gclock,0);
   dc538:	4649      	mov	r1, r9
   dc53a:	6823      	ldr	r3, [r4, #0]
   dc53c:	f8cd 9000 	str.w	r9, [sp]
   dc540:	464a      	mov	r2, r9
   dc542:	481e      	ldr	r0, [pc, #120]	; (dc5bc <_Z8settingsv+0x9a0>)
   dc544:	f7fc ff7c 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(5,2);
   dc548:	f004 f934 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc54c:	2102      	movs	r1, #2
   dc54e:	2005      	movs	r0, #5
   dc550:	f7f8 f818 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc554:	e701      	b.n	dc35a <_Z8settingsv+0x73e>
                    }
                    else if(digitalRead(D0) == HIGH && digitalRead(D2) == HIGH)
   dc556:	2000      	movs	r0, #0
   dc558:	f004 f902 	bl	e0760 <digitalRead>
   dc55c:	2801      	cmp	r0, #1
   dc55e:	f47f aefc 	bne.w	dc35a <_Z8settingsv+0x73e>
   dc562:	2002      	movs	r0, #2
   dc564:	f004 f8fc 	bl	e0760 <digitalRead>
   dc568:	2801      	cmp	r0, #1
   dc56a:	f47f aef6 	bne.w	dc35a <_Z8settingsv+0x73e>
                    {
                        strip.clear();
   dc56e:	480f      	ldr	r0, [pc, #60]	; (dc5ac <_Z8settingsv+0x990>)
   dc570:	f001 fda1 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("BLUE",0,0,0,bclock);
   dc574:	6833      	ldr	r3, [r6, #0]
   dc576:	9300      	str	r3, [sp, #0]
   dc578:	2300      	movs	r3, #0
   dc57a:	4619      	mov	r1, r3
   dc57c:	461a      	mov	r2, r3
   dc57e:	4810      	ldr	r0, [pc, #64]	; (dc5c0 <_Z8settingsv+0x9a4>)
   dc580:	f7fc ff5e 	bl	d9440 <_Z7strdispPKciiii>
                        EEPROM.write(5,3);
   dc584:	f004 f916 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc588:	2103      	movs	r1, #3
   dc58a:	2005      	movs	r0, #5
   dc58c:	f7f7 fffa 	bl	d4584 <_ZN11EEPROMClass5writeEih.isra.11>
   dc590:	e6e3      	b.n	dc35a <_Z8settingsv+0x73e>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dc592:	2000      	movs	r0, #0
   dc594:	f004 f8e4 	bl	e0760 <digitalRead>
   dc598:	2800      	cmp	r0, #0
   dc59a:	f47f af6a 	bne.w	dc472 <_Z8settingsv+0x856>
            {
                delay(5);
   dc59e:	2005      	movs	r0, #5
   dc5a0:	f002 fe3e 	bl	df220 <delay>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dc5a4:	e75f      	b.n	dc466 <_Z8settingsv+0x84a>
                smode++;
                dispm++;
            }
            else{
                smode = 1;
                dispm = 1;
   dc5a6:	4607      	mov	r7, r0
            if(smode < 9){
                smode++;
                dispm++;
            }
            else{
                smode = 1;
   dc5a8:	4680      	mov	r8, r0
   dc5aa:	e75c      	b.n	dc466 <_Z8settingsv+0x84a>
   dc5ac:	2003e328 	.word	0x2003e328
   dc5b0:	000e3a92 	.word	0x000e3a92
   dc5b4:	000e3a96 	.word	0x000e3a96
   dc5b8:	000e3a99 	.word	0x000e3a99
   dc5bc:	000e3a9d 	.word	0x000e3a9d
   dc5c0:	000e3aa3 	.word	0x000e3aa3
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dc5c4:	2002      	movs	r0, #2
   dc5c6:	f004 f8cb 	bl	e0760 <digitalRead>
   dc5ca:	2800      	cmp	r0, #0
   dc5cc:	f47f af6d 	bne.w	dc4aa <_Z8settingsv+0x88e>
            {
                delay(5);
   dc5d0:	2005      	movs	r0, #5
   dc5d2:	f002 fe25 	bl	df220 <delay>
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dc5d6:	e762      	b.n	dc49e <_Z8settingsv+0x882>
                smode--;
                dispm--;
            }
            else{
                smode = 9;
                dispm = 9;
   dc5d8:	2709      	movs	r7, #9
            if(smode > 1){
                smode--;
                dispm--;
            }
            else{
                smode = 9;
   dc5da:	46b8      	mov	r8, r7
   dc5dc:	e75f      	b.n	dc49e <_Z8settingsv+0x882>
   dc5de:	f04f 0901 	mov.w	r9, #1
   dc5e2:	e77a      	b.n	dc4da <_Z8settingsv+0x8be>

000dc5e4 <_Z12displayClockibiii>:
            sett = false;
        }
        delay(50);
    }
}                                                           
void displayClock(int inpix, bool manEnable, int R, int G, int B){
   dc5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc5e8:	b087      	sub	sp, #28
   dc5ea:	468a      	mov	sl, r1
   dc5ec:	4614      	mov	r4, r2
   dc5ee:	461d      	mov	r5, r3
   dc5f0:	4607      	mov	r7, r0
   dc5f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
    int hr = Time.hourFormat12();
   dc5f4:	f002 fdf8 	bl	df1e8 <_ZN9TimeClass12hourFormat12Ev>
   dc5f8:	9003      	str	r0, [sp, #12]
    int min = Time.minute();
   dc5fa:	f002 fdfd 	bl	df1f8 <_ZN9TimeClass6minuteEv>
   dc5fe:	4680      	mov	r8, r0
    if(manEnable){
   dc600:	f1ba 0f00 	cmp.w	sl, #0
   dc604:	d06f      	beq.n	dc6e6 <_Z12displayClockibiii+0x102>
        strip.setPixelColor(58,R/2,G/2,B/2);     //Display clock colons
   dc606:	f04f 0902 	mov.w	r9, #2
   dc60a:	fb94 faf9 	sdiv	sl, r4, r9
   dc60e:	fb95 fbf9 	sdiv	fp, r5, r9
   dc612:	fa5f fa8a 	uxtb.w	sl, sl
   dc616:	fa5f fb8b 	uxtb.w	fp, fp
   dc61a:	fb96 f9f9 	sdiv	r9, r6, r9
   dc61e:	fa5f f989 	uxtb.w	r9, r9
   dc622:	465b      	mov	r3, fp
   dc624:	4652      	mov	r2, sl
   dc626:	213a      	movs	r1, #58	; 0x3a
   dc628:	48b1      	ldr	r0, [pc, #708]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc62a:	f8cd 9000 	str.w	r9, [sp]
   dc62e:	f001 fd13 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(62,R/2,G/2,B/2);
   dc632:	465b      	mov	r3, fp
   dc634:	213e      	movs	r1, #62	; 0x3e
   dc636:	f8cd 9000 	str.w	r9, [sp]
   dc63a:	4652      	mov	r2, sl
   dc63c:	48ac      	ldr	r0, [pc, #688]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc63e:	f001 fd0b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(min/10 == 0) {                                       //Check if minute number is less than 10
   dc642:	f108 0309 	add.w	r3, r8, #9
   dc646:	2b12      	cmp	r3, #18
   dc648:	f107 014f 	add.w	r1, r7, #79	; 0x4f
   dc64c:	f107 0b70 	add.w	fp, r7, #112	; 0x70
   dc650:	d80d      	bhi.n	dc66e <_Z12displayClockibiii+0x8a>
            num(0,79+inpix,R,G,B);                              //Display 0 digit if less than 10 in 10's place
   dc652:	462b      	mov	r3, r5
   dc654:	4622      	mov	r2, r4
   dc656:	9600      	str	r6, [sp, #0]
   dc658:	2000      	movs	r0, #0
   dc65a:	f7f7 ffa3 	bl	d45a4 <_Z3numiiiii>
            num(min,112+inpix,R,G,B);
   dc65e:	9600      	str	r6, [sp, #0]
   dc660:	462b      	mov	r3, r5
   dc662:	4622      	mov	r2, r4
   dc664:	4659      	mov	r1, fp
   dc666:	4640      	mov	r0, r8
   dc668:	f7f7 ff9c 	bl	d45a4 <_Z3numiiiii>
   dc66c:	e011      	b.n	dc692 <_Z12displayClockibiii+0xae>
        }
        else {
            num((min/10),79+inpix,R,G,B);
   dc66e:	f04f 0a0a 	mov.w	sl, #10
   dc672:	462b      	mov	r3, r5
   dc674:	fb98 f9fa 	sdiv	r9, r8, sl
   dc678:	4622      	mov	r2, r4
   dc67a:	4648      	mov	r0, r9
   dc67c:	9600      	str	r6, [sp, #0]
   dc67e:	f7f7 ff91 	bl	d45a4 <_Z3numiiiii>
            num((min%10),112+inpix,R,G,B);
   dc682:	9600      	str	r6, [sp, #0]
   dc684:	462b      	mov	r3, r5
   dc686:	4622      	mov	r2, r4
   dc688:	4659      	mov	r1, fp
   dc68a:	fb0a 8019 	mls	r0, sl, r9, r8
   dc68e:	f7f7 ff89 	bl	d45a4 <_Z3numiiiii>
        }
        for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
        {
            strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc692:	9a03      	ldr	r2, [sp, #12]
        }
        else {
            num((min/10),79+inpix,R,G,B);
            num((min%10),112+inpix,R,G,B);
        }
        for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc694:	4b97      	ldr	r3, [pc, #604]	; (dc8f4 <_Z12displayClockibiii+0x310>)
        {
            strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc696:	f04f 080a 	mov.w	r8, #10
   dc69a:	fb92 f8f8 	sdiv	r8, r2, r8
   dc69e:	fa5f f888 	uxtb.w	r8, r8
   dc6a2:	fb14 f208 	smulbb	r2, r4, r8
   dc6a6:	fb15 fb08 	smulbb	fp, r5, r8
   dc6aa:	b2d2      	uxtb	r2, r2
   dc6ac:	fb16 f808 	smulbb	r8, r6, r8
        }
        else {
            num((min/10),79+inpix,R,G,B);
            num((min%10),112+inpix,R,G,B);
        }
        for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc6b0:	601f      	str	r7, [r3, #0]
        {
            strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc6b2:	9204      	str	r2, [sp, #16]
   dc6b4:	fa5f fb8b 	uxtb.w	fp, fp
   dc6b8:	fa5f f888 	uxtb.w	r8, r8
   dc6bc:	4699      	mov	r9, r3
        }
        else {
            num((min/10),79+inpix,R,G,B);
            num((min%10),112+inpix,R,G,B);
        }
        for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc6be:	469a      	mov	sl, r3
   dc6c0:	3706      	adds	r7, #6
   dc6c2:	f8d9 1000 	ldr.w	r1, [r9]
   dc6c6:	428f      	cmp	r7, r1
   dc6c8:	db23      	blt.n	dc712 <_Z12displayClockibiii+0x12e>
        {
            strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc6ca:	465b      	mov	r3, fp
   dc6cc:	f8cd 8000 	str.w	r8, [sp]
   dc6d0:	9a04      	ldr	r2, [sp, #16]
   dc6d2:	4887      	ldr	r0, [pc, #540]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc6d4:	b289      	uxth	r1, r1
   dc6d6:	f001 fcbf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        else {
            num((min/10),79+inpix,R,G,B);
            num((min%10),112+inpix,R,G,B);
        }
        for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc6da:	f8da 3000 	ldr.w	r3, [sl]
   dc6de:	3301      	adds	r3, #1
   dc6e0:	f8ca 3000 	str.w	r3, [sl]
   dc6e4:	e7ed      	b.n	dc6c2 <_Z12displayClockibiii+0xde>
            strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
        }
        num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
        return;
    }
    if(mprev != min) {                                 //Check if time has changed from last pixel push
   dc6e6:	f8df 9214 	ldr.w	r9, [pc, #532]	; dc8fc <_Z12displayClockibiii+0x318>
   dc6ea:	f8d9 3000 	ldr.w	r3, [r9]
   dc6ee:	4298      	cmp	r0, r3
   dc6f0:	46cb      	mov	fp, r9
   dc6f2:	f000 80fa 	beq.w	dc8ea <_Z12displayClockibiii+0x306>
        if(analogRead(A4)>bound || EEPROM.read(6) == 0){            //If the brightness is above the threshold, post large numbers by default
   dc6f6:	200f      	movs	r0, #15
   dc6f8:	f004 f845 	bl	e0786 <analogRead>
   dc6fc:	4b7e      	ldr	r3, [pc, #504]	; (dc8f8 <_Z12displayClockibiii+0x314>)
   dc6fe:	681b      	ldr	r3, [r3, #0]
   dc700:	4298      	cmp	r0, r3
   dc702:	dc16      	bgt.n	dc732 <_Z12displayClockibiii+0x14e>
   dc704:	f004 f856 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dc708:	2006      	movs	r0, #6
   dc70a:	f7f7 fe81 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dc70e:	b180      	cbz	r0, dc732 <_Z12displayClockibiii+0x14e>
   dc710:	e083      	b.n	dc81a <_Z12displayClockibiii+0x236>
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
   dc712:	4622      	mov	r2, r4
   dc714:	9c03      	ldr	r4, [sp, #12]
   dc716:	9b03      	ldr	r3, [sp, #12]
   dc718:	9610      	str	r6, [sp, #64]	; 0x40
   dc71a:	200a      	movs	r0, #10
   dc71c:	2110      	movs	r1, #16
   dc71e:	fb93 f7f0 	sdiv	r7, r3, r0
   dc722:	462b      	mov	r3, r5
   dc724:	fb00 4017 	mls	r0, r0, r7, r4
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
        }
    }
}
   dc728:	b007      	add	sp, #28
   dc72a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
   dc72e:	f7f7 bf39 	b.w	d45a4 <_Z3numiiiii>
        num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
        return;
    }
    if(mprev != min) {                                 //Check if time has changed from last pixel push
        if(analogRead(A4)>bound || EEPROM.read(6) == 0){            //If the brightness is above the threshold, post large numbers by default
            mprev = Time.minute();                                  //Save current time for next check
   dc732:	f002 fd61 	bl	df1f8 <_ZN9TimeClass6minuteEv>
            strip.setPixelColor(58,R/2,G/2,B/2);     //Display clock colons
   dc736:	f04f 0902 	mov.w	r9, #2
        num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
        return;
    }
    if(mprev != min) {                                 //Check if time has changed from last pixel push
        if(analogRead(A4)>bound || EEPROM.read(6) == 0){            //If the brightness is above the threshold, post large numbers by default
            mprev = Time.minute();                                  //Save current time for next check
   dc73a:	f8cb 0000 	str.w	r0, [fp]
            strip.setPixelColor(58,R/2,G/2,B/2);     //Display clock colons
   dc73e:	fb94 faf9 	sdiv	sl, r4, r9
   dc742:	fb95 fbf9 	sdiv	fp, r5, r9
   dc746:	fa5f fa8a 	uxtb.w	sl, sl
   dc74a:	fa5f fb8b 	uxtb.w	fp, fp
   dc74e:	fb96 f9f9 	sdiv	r9, r6, r9
   dc752:	fa5f f989 	uxtb.w	r9, r9
   dc756:	f8cd 9000 	str.w	r9, [sp]
   dc75a:	465b      	mov	r3, fp
   dc75c:	4652      	mov	r2, sl
   dc75e:	213a      	movs	r1, #58	; 0x3a
   dc760:	4863      	ldr	r0, [pc, #396]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc762:	f001 fc79 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,R/2,G/2,B/2);
   dc766:	f8cd 9000 	str.w	r9, [sp]
   dc76a:	465b      	mov	r3, fp
   dc76c:	213e      	movs	r1, #62	; 0x3e
   dc76e:	4652      	mov	r2, sl
   dc770:	485f      	ldr	r0, [pc, #380]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc772:	f001 fc71 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            if(min/10 == 0) {                                       //Check if minute number is less than 10
   dc776:	f108 0309 	add.w	r3, r8, #9
   dc77a:	2b12      	cmp	r3, #18
   dc77c:	f107 014f 	add.w	r1, r7, #79	; 0x4f
   dc780:	f107 0970 	add.w	r9, r7, #112	; 0x70
   dc784:	d80d      	bhi.n	dc7a2 <_Z12displayClockibiii+0x1be>
                num(0,79+inpix,R,G,B);                              //Display 0 digit if less than 10 in 10's place
   dc786:	462b      	mov	r3, r5
   dc788:	4622      	mov	r2, r4
   dc78a:	9600      	str	r6, [sp, #0]
   dc78c:	2000      	movs	r0, #0
   dc78e:	f7f7 ff09 	bl	d45a4 <_Z3numiiiii>
                num(min,112+inpix,R,G,B);
   dc792:	9600      	str	r6, [sp, #0]
   dc794:	462b      	mov	r3, r5
   dc796:	4622      	mov	r2, r4
   dc798:	4649      	mov	r1, r9
   dc79a:	4640      	mov	r0, r8
   dc79c:	f7f7 ff02 	bl	d45a4 <_Z3numiiiii>
   dc7a0:	e011      	b.n	dc7c6 <_Z12displayClockibiii+0x1e2>
            }
            else {
                num((min/10),79+inpix,R,G,B);
   dc7a2:	f04f 0b0a 	mov.w	fp, #10
   dc7a6:	462b      	mov	r3, r5
   dc7a8:	fb98 fafb 	sdiv	sl, r8, fp
   dc7ac:	4622      	mov	r2, r4
   dc7ae:	4650      	mov	r0, sl
   dc7b0:	9600      	str	r6, [sp, #0]
   dc7b2:	f7f7 fef7 	bl	d45a4 <_Z3numiiiii>
                num((min%10),112+inpix,R,G,B);
   dc7b6:	9600      	str	r6, [sp, #0]
   dc7b8:	462b      	mov	r3, r5
   dc7ba:	4622      	mov	r2, r4
   dc7bc:	4649      	mov	r1, r9
   dc7be:	fb0b 801a 	mls	r0, fp, sl, r8
   dc7c2:	f7f7 feef 	bl	d45a4 <_Z3numiiiii>
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc7c6:	9a03      	ldr	r2, [sp, #12]
            }
            else {
                num((min/10),79+inpix,R,G,B);
                num((min%10),112+inpix,R,G,B);
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc7c8:	4b4a      	ldr	r3, [pc, #296]	; (dc8f4 <_Z12displayClockibiii+0x310>)
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc7ca:	f04f 080a 	mov.w	r8, #10
   dc7ce:	fb92 f8f8 	sdiv	r8, r2, r8
   dc7d2:	fa5f f888 	uxtb.w	r8, r8
   dc7d6:	fb14 f208 	smulbb	r2, r4, r8
   dc7da:	fb15 fb08 	smulbb	fp, r5, r8
   dc7de:	b2d2      	uxtb	r2, r2
   dc7e0:	fb16 f808 	smulbb	r8, r6, r8
            }
            else {
                num((min/10),79+inpix,R,G,B);
                num((min%10),112+inpix,R,G,B);
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc7e4:	601f      	str	r7, [r3, #0]
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc7e6:	9204      	str	r2, [sp, #16]
   dc7e8:	fa5f fb8b 	uxtb.w	fp, fp
   dc7ec:	fa5f f888 	uxtb.w	r8, r8
   dc7f0:	4699      	mov	r9, r3
            }
            else {
                num((min/10),79+inpix,R,G,B);
                num((min%10),112+inpix,R,G,B);
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc7f2:	469a      	mov	sl, r3
   dc7f4:	3706      	adds	r7, #6
   dc7f6:	f8d9 1000 	ldr.w	r1, [r9]
   dc7fa:	428f      	cmp	r7, r1
   dc7fc:	db89      	blt.n	dc712 <_Z12displayClockibiii+0x12e>
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc7fe:	465b      	mov	r3, fp
   dc800:	f8cd 8000 	str.w	r8, [sp]
   dc804:	9a04      	ldr	r2, [sp, #16]
   dc806:	483a      	ldr	r0, [pc, #232]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc808:	b289      	uxth	r1, r1
   dc80a:	f001 fc25 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                num((min/10),79+inpix,R,G,B);
                num((min%10),112+inpix,R,G,B);
            }
            for(i=0+inpix;i<7+inpix;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   dc80e:	f8da 3000 	ldr.w	r3, [sl]
   dc812:	3301      	adds	r3, #1
   dc814:	f8ca 3000 	str.w	r3, [sl]
   dc818:	e7ed      	b.n	dc7f6 <_Z12displayClockibiii+0x212>
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
        }
        else{                                               //Display small clock if set in EEPROM
            mprev = Time.minute();
   dc81a:	f002 fced 	bl	df1f8 <_ZN9TimeClass6minuteEv>
            if(min/10 == 0) {
   dc81e:	f108 0309 	add.w	r3, r8, #9
   dc822:	2b12      	cmp	r3, #18
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            num(hr-(10*(hr/10)),16,R,G,B);    //Display other digit of hour
        }
        else{                                               //Display small clock if set in EEPROM
            mprev = Time.minute();
   dc824:	f8c9 0000 	str.w	r0, [r9]
   dc828:	f107 013f 	add.w	r1, r7, #63	; 0x3f
   dc82c:	f107 095f 	add.w	r9, r7, #95	; 0x5f
            if(min/10 == 0) {
   dc830:	d80d      	bhi.n	dc84e <_Z12displayClockibiii+0x26a>
                snum(0,63+inpix,R,G,B);
   dc832:	462b      	mov	r3, r5
   dc834:	4622      	mov	r2, r4
   dc836:	4650      	mov	r0, sl
   dc838:	9600      	str	r6, [sp, #0]
   dc83a:	f7f9 fee7 	bl	d660c <_Z4snumiiiii>
                snum(min,95+inpix,R,G,B);
   dc83e:	9600      	str	r6, [sp, #0]
   dc840:	462b      	mov	r3, r5
   dc842:	4622      	mov	r2, r4
   dc844:	4649      	mov	r1, r9
   dc846:	4640      	mov	r0, r8
   dc848:	f7f9 fee0 	bl	d660c <_Z4snumiiiii>
   dc84c:	e011      	b.n	dc872 <_Z12displayClockibiii+0x28e>
            }
            else {
                snum((min/10),63+inpix,R,G,B);
   dc84e:	f04f 0b0a 	mov.w	fp, #10
   dc852:	462b      	mov	r3, r5
   dc854:	fb98 fafb 	sdiv	sl, r8, fp
   dc858:	4622      	mov	r2, r4
   dc85a:	4650      	mov	r0, sl
   dc85c:	9600      	str	r6, [sp, #0]
   dc85e:	f7f9 fed5 	bl	d660c <_Z4snumiiiii>
                snum((min%10),95+inpix,R,G,B);
   dc862:	9600      	str	r6, [sp, #0]
   dc864:	462b      	mov	r3, r5
   dc866:	4622      	mov	r2, r4
   dc868:	4649      	mov	r1, r9
   dc86a:	fb0b 801a 	mls	r0, fp, sl, r8
   dc86e:	f7f9 fecd 	bl	d660c <_Z4snumiiiii>
            }
            for(i=0+inpix;i<5+inpix;i++)
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc872:	9a03      	ldr	r2, [sp, #12]
            }
            else {
                snum((min/10),63+inpix,R,G,B);
                snum((min%10),95+inpix,R,G,B);
            }
            for(i=0+inpix;i<5+inpix;i++)
   dc874:	4b1f      	ldr	r3, [pc, #124]	; (dc8f4 <_Z12displayClockibiii+0x310>)
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc876:	f04f 0b0a 	mov.w	fp, #10
   dc87a:	fb92 fbfb 	sdiv	fp, r2, fp
   dc87e:	fa5f fb8b 	uxtb.w	fp, fp
   dc882:	fb14 f20b 	smulbb	r2, r4, fp
   dc886:	b2d2      	uxtb	r2, r2
   dc888:	9204      	str	r2, [sp, #16]
   dc88a:	fb15 f20b 	smulbb	r2, r5, fp
   dc88e:	b2d2      	uxtb	r2, r2
   dc890:	fb16 fb0b 	smulbb	fp, r6, fp
            }
            else {
                snum((min/10),63+inpix,R,G,B);
                snum((min%10),95+inpix,R,G,B);
            }
            for(i=0+inpix;i<5+inpix;i++)
   dc894:	601f      	str	r7, [r3, #0]
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc896:	9205      	str	r2, [sp, #20]
   dc898:	fa5f fb8b 	uxtb.w	fp, fp
   dc89c:	4698      	mov	r8, r3
            }
            else {
                snum((min/10),63+inpix,R,G,B);
                snum((min%10),95+inpix,R,G,B);
            }
            for(i=0+inpix;i<5+inpix;i++)
   dc89e:	4699      	mov	r9, r3
   dc8a0:	f107 0a04 	add.w	sl, r7, #4
   dc8a4:	f8d8 1000 	ldr.w	r1, [r8]
   dc8a8:	458a      	cmp	sl, r1
   dc8aa:	db0d      	blt.n	dc8c8 <_Z12displayClockibiii+0x2e4>
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
   dc8ac:	9b05      	ldr	r3, [sp, #20]
   dc8ae:	f8cd b000 	str.w	fp, [sp]
   dc8b2:	9a04      	ldr	r2, [sp, #16]
   dc8b4:	480e      	ldr	r0, [pc, #56]	; (dc8f0 <_Z12displayClockibiii+0x30c>)
   dc8b6:	b289      	uxth	r1, r1
   dc8b8:	f001 fbce 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                snum((min/10),63+inpix,R,G,B);
                snum((min%10),95+inpix,R,G,B);
            }
            for(i=0+inpix;i<5+inpix;i++)
   dc8bc:	f8d9 3000 	ldr.w	r3, [r9]
   dc8c0:	3301      	adds	r3, #1
   dc8c2:	f8c9 3000 	str.w	r3, [r9]
   dc8c6:	e7ed      	b.n	dc8a4 <_Z12displayClockibiii+0x2c0>
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
   dc8c8:	4622      	mov	r2, r4
   dc8ca:	9c03      	ldr	r4, [sp, #12]
   dc8cc:	9b03      	ldr	r3, [sp, #12]
   dc8ce:	9610      	str	r6, [sp, #64]	; 0x40
   dc8d0:	200a      	movs	r0, #10
   dc8d2:	f107 0110 	add.w	r1, r7, #16
   dc8d6:	fb93 fef0 	sdiv	lr, r3, r0
   dc8da:	462b      	mov	r3, r5
   dc8dc:	fb00 401e 	mls	r0, r0, lr, r4
        }
    }
}
   dc8e0:	b007      	add	sp, #28
   dc8e2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            }
            for(i=0+inpix;i<5+inpix;i++)
            {
                strip.setPixelColor(i,R*(hr/10),G*(hr/10),B*(hr/10));
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
   dc8e6:	f7f9 be91 	b.w	d660c <_Z4snumiiiii>
        }
    }
}
   dc8ea:	b007      	add	sp, #28
   dc8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc8f0:	2003e328 	.word	0x2003e328
   dc8f4:	2003e33c 	.word	0x2003e33c
   dc8f8:	2003e358 	.word	0x2003e358
   dc8fc:	2003e31c 	.word	0x2003e31c

000dc900 <_Z11displayTempiiii>:
void displayTemp(int inpix, int R, int G, int B){
   dc900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc904:	b085      	sub	sp, #20
   dc906:	4604      	mov	r4, r0
   dc908:	461f      	mov	r7, r3
    if((inpix/8)%2 == 0){
   dc90a:	2308      	movs	r3, #8
   dc90c:	fb90 f3f3 	sdiv	r3, r0, r3
   dc910:	481a      	ldr	r0, [pc, #104]	; (dc97c <_Z11displayTempiiii+0x7c>)
        num(TC1,inpix,R,G,B);
   dc912:	9700      	str	r7, [sp, #0]
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
        }
    }
}
void displayTemp(int inpix, int R, int G, int B){
    if((inpix/8)%2 == 0){
   dc914:	f013 0f01 	tst.w	r3, #1
   dc918:	f104 0350 	add.w	r3, r4, #80	; 0x50
            }
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
        }
    }
}
void displayTemp(int inpix, int R, int G, int B){
   dc91c:	460d      	mov	r5, r1
   dc91e:	4616      	mov	r6, r2
   dc920:	fa5f f982 	uxtb.w	r9, r2
   dc924:	fa5f f881 	uxtb.w	r8, r1
   dc928:	9303      	str	r3, [sp, #12]
   dc92a:	f8df b058 	ldr.w	fp, [pc, #88]	; dc984 <_Z11displayTempiiii+0x84>
    if((inpix/8)%2 == 0){
        num(TC1,inpix,R,G,B);
   dc92e:	6800      	ldr	r0, [r0, #0]
   dc930:	4613      	mov	r3, r2
   dc932:	fa5f fa87 	uxtb.w	sl, r7
   dc936:	460a      	mov	r2, r1
   dc938:	4621      	mov	r1, r4
            snum(hr-(10*(hr/10)),16+inpix,R,G,B);
        }
    }
}
void displayTemp(int inpix, int R, int G, int B){
    if((inpix/8)%2 == 0){
   dc93a:	d107      	bne.n	dc94c <_Z11displayTempiiii+0x4c>
        num(TC1,inpix,R,G,B);
   dc93c:	f7f7 fe32 	bl	d45a4 <_Z3numiiiii>
        num(TC2,inpix+47,R,G,B);
   dc940:	9700      	str	r7, [sp, #0]
   dc942:	4633      	mov	r3, r6
   dc944:	462a      	mov	r2, r5
   dc946:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   dc94a:	e006      	b.n	dc95a <_Z11displayTempiiii+0x5a>
        strip.setPixelColor(inpix+80,R,G,B);
    }
    else{
        num(TC1,inpix,R,G,B);
   dc94c:	f7f7 fe2a 	bl	d45a4 <_Z3numiiiii>
        num(TC2,inpix+33,R,G,B);
   dc950:	9700      	str	r7, [sp, #0]
   dc952:	4633      	mov	r3, r6
   dc954:	462a      	mov	r2, r5
   dc956:	f104 0121 	add.w	r1, r4, #33	; 0x21
   dc95a:	f8db 0000 	ldr.w	r0, [fp]
   dc95e:	f7f7 fe21 	bl	d45a4 <_Z3numiiiii>
        strip.setPixelColor(inpix+80,R,G,B);
   dc962:	f8cd a000 	str.w	sl, [sp]
   dc966:	464b      	mov	r3, r9
   dc968:	4642      	mov	r2, r8
   dc96a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   dc96e:	4804      	ldr	r0, [pc, #16]	; (dc980 <_Z11displayTempiiii+0x80>)
   dc970:	f001 fb72 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
}
   dc974:	b005      	add	sp, #20
   dc976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc97a:	bf00      	nop
   dc97c:	2003e2f4 	.word	0x2003e2f4
   dc980:	2003e328 	.word	0x2003e328
   dc984:	2003e34c 	.word	0x2003e34c

000dc988 <_Z15displayHumidityiiii>:
void displayHumidity(int inpix, int R, int G, int B){
   dc988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dc98c:	b085      	sub	sp, #20
   dc98e:	461f      	mov	r7, r3
    if((inpix/8)%2 == 0){
   dc990:	2308      	movs	r3, #8
   dc992:	fb90 f3f3 	sdiv	r3, r0, r3
   dc996:	f013 0301 	ands.w	r3, r3, #1
   dc99a:	9303      	str	r3, [sp, #12]
   dc99c:	4b72      	ldr	r3, [pc, #456]	; (dcb68 <_Z15displayHumidityiiii+0x1e0>)
        num(TC1,inpix,R,G,B);
        num(TC2,inpix+33,R,G,B);
        strip.setPixelColor(inpix+80,R,G,B);
    }
}
void displayHumidity(int inpix, int R, int G, int B){
   dc99e:	4604      	mov	r4, r0
   dc9a0:	460d      	mov	r5, r1
   dc9a2:	4616      	mov	r6, r2
    if((inpix/8)%2 == 0){
        if(HC1 == 10)
   dc9a4:	6818      	ldr	r0, [r3, #0]
        num(TC2,inpix+33,R,G,B);
        strip.setPixelColor(inpix+80,R,G,B);
    }
}
void displayHumidity(int inpix, int R, int G, int B){
    if((inpix/8)%2 == 0){
   dc9a6:	d16e      	bne.n	dca86 <_Z15displayHumidityiiii+0xfe>
        if(HC1 == 10)
   dc9a8:	280a      	cmp	r0, #10
   dc9aa:	d15c      	bne.n	dca66 <_Z15displayHumidityiiii+0xde>
        {
            strip.setPixelColor(inpix,R,G,B);
   dc9ac:	fa5f f981 	uxtb.w	r9, r1
   dc9b0:	fa5f fa82 	uxtb.w	sl, r2
   dc9b4:	fa1f f884 	uxth.w	r8, r4
   dc9b8:	fa5f fb87 	uxtb.w	fp, r7
   dc9bc:	4653      	mov	r3, sl
   dc9be:	464a      	mov	r2, r9
   dc9c0:	4641      	mov	r1, r8
   dc9c2:	f8cd b000 	str.w	fp, [sp]
   dc9c6:	4869      	ldr	r0, [pc, #420]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dc9c8:	f001 fb46 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+1,R,G,B);
   dc9cc:	f108 0101 	add.w	r1, r8, #1
   dc9d0:	4653      	mov	r3, sl
   dc9d2:	464a      	mov	r2, r9
   dc9d4:	f8cd b000 	str.w	fp, [sp]
   dc9d8:	b289      	uxth	r1, r1
   dc9da:	4864      	ldr	r0, [pc, #400]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dc9dc:	f001 fb3c 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+2,R,G,B);
   dc9e0:	f108 0102 	add.w	r1, r8, #2
   dc9e4:	4653      	mov	r3, sl
   dc9e6:	464a      	mov	r2, r9
   dc9e8:	f8cd b000 	str.w	fp, [sp]
   dc9ec:	b289      	uxth	r1, r1
   dc9ee:	485f      	ldr	r0, [pc, #380]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dc9f0:	f001 fb32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+3,R,G,B);
   dc9f4:	f108 0103 	add.w	r1, r8, #3
   dc9f8:	4653      	mov	r3, sl
   dc9fa:	464a      	mov	r2, r9
   dc9fc:	f8cd b000 	str.w	fp, [sp]
   dca00:	b289      	uxth	r1, r1
   dca02:	485a      	ldr	r0, [pc, #360]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dca04:	f001 fb28 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+4,R,G,B);
   dca08:	f108 0104 	add.w	r1, r8, #4
   dca0c:	4653      	mov	r3, sl
   dca0e:	464a      	mov	r2, r9
   dca10:	f8cd b000 	str.w	fp, [sp]
   dca14:	b289      	uxth	r1, r1
   dca16:	4855      	ldr	r0, [pc, #340]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dca18:	f001 fb1e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+5,R,G,B);
   dca1c:	f108 0105 	add.w	r1, r8, #5
   dca20:	4653      	mov	r3, sl
   dca22:	464a      	mov	r2, r9
   dca24:	f8cd b000 	str.w	fp, [sp]
   dca28:	b289      	uxth	r1, r1
   dca2a:	4850      	ldr	r0, [pc, #320]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dca2c:	f001 fb14 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+6,R,G,B);
   dca30:	f108 0106 	add.w	r1, r8, #6
   dca34:	4653      	mov	r3, sl
   dca36:	464a      	mov	r2, r9
   dca38:	f8cd b000 	str.w	fp, [sp]
   dca3c:	b289      	uxth	r1, r1
   dca3e:	484b      	ldr	r0, [pc, #300]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dca40:	f001 fb0a 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(0,inpix+16,R,G,B);
   dca44:	4633      	mov	r3, r6
   dca46:	462a      	mov	r2, r5
   dca48:	f104 0110 	add.w	r1, r4, #16
   dca4c:	9803      	ldr	r0, [sp, #12]
   dca4e:	9700      	str	r7, [sp, #0]
   dca50:	f7f7 fda8 	bl	d45a4 <_Z3numiiiii>
            num(0,inpix+63,R,G,B);
   dca54:	9700      	str	r7, [sp, #0]
   dca56:	4633      	mov	r3, r6
   dca58:	462a      	mov	r2, r5
   dca5a:	f104 013f 	add.w	r1, r4, #63	; 0x3f
   dca5e:	9803      	ldr	r0, [sp, #12]
   dca60:	f7f7 fda0 	bl	d45a4 <_Z3numiiiii>
   dca64:	e07d      	b.n	dcb62 <_Z15displayHumidityiiii+0x1da>
        }
        else{
            num(HC1,inpix,R,G,B);
   dca66:	4613      	mov	r3, r2
   dca68:	9700      	str	r7, [sp, #0]
   dca6a:	460a      	mov	r2, r1
   dca6c:	4621      	mov	r1, r4
   dca6e:	f7f7 fd99 	bl	d45a4 <_Z3numiiiii>
            num(HC2,inpix+47,R,G,B);
   dca72:	483f      	ldr	r0, [pc, #252]	; (dcb70 <_Z15displayHumidityiiii+0x1e8>)
   dca74:	9700      	str	r7, [sp, #0]
   dca76:	4633      	mov	r3, r6
   dca78:	462a      	mov	r2, r5
   dca7a:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   dca7e:	6800      	ldr	r0, [r0, #0]
   dca80:	f7f7 fd90 	bl	d45a4 <_Z3numiiiii>
   dca84:	e06d      	b.n	dcb62 <_Z15displayHumidityiiii+0x1da>
        }
    }
    else{
        if(HC1 == 10)
   dca86:	280a      	cmp	r0, #10
   dca88:	d15c      	bne.n	dcb44 <_Z15displayHumidityiiii+0x1bc>
        {
            strip.setPixelColor(inpix,R,G,B);
   dca8a:	fa5f f981 	uxtb.w	r9, r1
   dca8e:	fa5f fa82 	uxtb.w	sl, r2
   dca92:	fa1f f884 	uxth.w	r8, r4
   dca96:	fa5f fb87 	uxtb.w	fp, r7
   dca9a:	4653      	mov	r3, sl
   dca9c:	464a      	mov	r2, r9
   dca9e:	4641      	mov	r1, r8
   dcaa0:	f8cd b000 	str.w	fp, [sp]
   dcaa4:	4831      	ldr	r0, [pc, #196]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcaa6:	f001 fad7 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-1,R,G,B);
   dcaaa:	f108 31ff 	add.w	r1, r8, #4294967295
   dcaae:	4653      	mov	r3, sl
   dcab0:	464a      	mov	r2, r9
   dcab2:	f8cd b000 	str.w	fp, [sp]
   dcab6:	b289      	uxth	r1, r1
   dcab8:	482c      	ldr	r0, [pc, #176]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcaba:	f001 facd 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-2,R,G,B);
   dcabe:	f1a8 0102 	sub.w	r1, r8, #2
   dcac2:	4653      	mov	r3, sl
   dcac4:	464a      	mov	r2, r9
   dcac6:	f8cd b000 	str.w	fp, [sp]
   dcaca:	b289      	uxth	r1, r1
   dcacc:	4827      	ldr	r0, [pc, #156]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcace:	f001 fac3 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-3,R,G,B);
   dcad2:	f1a8 0103 	sub.w	r1, r8, #3
   dcad6:	4653      	mov	r3, sl
   dcad8:	464a      	mov	r2, r9
   dcada:	f8cd b000 	str.w	fp, [sp]
   dcade:	b289      	uxth	r1, r1
   dcae0:	4822      	ldr	r0, [pc, #136]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcae2:	f001 fab9 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-4,R,G,B);
   dcae6:	f1a8 0104 	sub.w	r1, r8, #4
   dcaea:	4653      	mov	r3, sl
   dcaec:	464a      	mov	r2, r9
   dcaee:	f8cd b000 	str.w	fp, [sp]
   dcaf2:	b289      	uxth	r1, r1
   dcaf4:	481d      	ldr	r0, [pc, #116]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcaf6:	f001 faaf 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-5,R,G,B);
   dcafa:	f1a8 0105 	sub.w	r1, r8, #5
   dcafe:	4653      	mov	r3, sl
   dcb00:	464a      	mov	r2, r9
   dcb02:	f8cd b000 	str.w	fp, [sp]
   dcb06:	b289      	uxth	r1, r1
   dcb08:	4818      	ldr	r0, [pc, #96]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcb0a:	f001 faa5 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix-6,R,G,B);
   dcb0e:	f1a8 0106 	sub.w	r1, r8, #6
   dcb12:	4653      	mov	r3, sl
   dcb14:	464a      	mov	r2, r9
   dcb16:	f8cd b000 	str.w	fp, [sp]
   dcb1a:	b289      	uxth	r1, r1
   dcb1c:	4813      	ldr	r0, [pc, #76]	; (dcb6c <_Z15displayHumidityiiii+0x1e4>)
   dcb1e:	f001 fa9b 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(0,inpix+16,R,G,B);
   dcb22:	4633      	mov	r3, r6
   dcb24:	462a      	mov	r2, r5
   dcb26:	f104 0110 	add.w	r1, r4, #16
   dcb2a:	9700      	str	r7, [sp, #0]
   dcb2c:	2000      	movs	r0, #0
   dcb2e:	f7f7 fd39 	bl	d45a4 <_Z3numiiiii>
            num(0,inpix+49,R,G,B);
   dcb32:	9700      	str	r7, [sp, #0]
   dcb34:	4633      	mov	r3, r6
   dcb36:	462a      	mov	r2, r5
   dcb38:	f104 0131 	add.w	r1, r4, #49	; 0x31
   dcb3c:	2000      	movs	r0, #0
   dcb3e:	f7f7 fd31 	bl	d45a4 <_Z3numiiiii>
   dcb42:	e00e      	b.n	dcb62 <_Z15displayHumidityiiii+0x1da>
        }
        else{
            num(HC1,inpix,R,G,B);
   dcb44:	4613      	mov	r3, r2
   dcb46:	9700      	str	r7, [sp, #0]
   dcb48:	460a      	mov	r2, r1
   dcb4a:	4621      	mov	r1, r4
   dcb4c:	f7f7 fd2a 	bl	d45a4 <_Z3numiiiii>
            num(HC2,inpix+33,R,G,B);
   dcb50:	4807      	ldr	r0, [pc, #28]	; (dcb70 <_Z15displayHumidityiiii+0x1e8>)
   dcb52:	9700      	str	r7, [sp, #0]
   dcb54:	4633      	mov	r3, r6
   dcb56:	462a      	mov	r2, r5
   dcb58:	f104 0121 	add.w	r1, r4, #33	; 0x21
   dcb5c:	6800      	ldr	r0, [r0, #0]
   dcb5e:	f7f7 fd21 	bl	d45a4 <_Z3numiiiii>
        }
    }
}
   dcb62:	b005      	add	sp, #20
   dcb64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dcb68:	2003e2ec 	.word	0x2003e2ec
   dcb6c:	2003e328 	.word	0x2003e328
   dcb70:	2003e340 	.word	0x2003e340

000dcb74 <_Z6bdelayi>:
void bdelay(int numMillis){
   dcb74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for(i=0; i < numMillis/50; i++){                                      //Fancy delay function to ensure button presses are caught
   dcb78:	4c15      	ldr	r4, [pc, #84]	; (dcbd0 <_Z6bdelayi+0x5c>)
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == LOW){
            displayClock(0, false, rclock, gclock, bclock);     //Updates clock if the time has changed
   dcb7a:	4f16      	ldr	r7, [pc, #88]	; (dcbd4 <_Z6bdelayi+0x60>)
   dcb7c:	4e16      	ldr	r6, [pc, #88]	; (dcbd8 <_Z6bdelayi+0x64>)
   dcb7e:	f8df 805c 	ldr.w	r8, [pc, #92]	; dcbdc <_Z6bdelayi+0x68>
            num(HC2,inpix+33,R,G,B);
        }
    }
}
void bdelay(int numMillis){
    for(i=0; i < numMillis/50; i++){                                      //Fancy delay function to ensure button presses are caught
   dcb82:	2300      	movs	r3, #0
   dcb84:	6023      	str	r3, [r4, #0]
   dcb86:	2532      	movs	r5, #50	; 0x32
   dcb88:	fb90 f5f5 	sdiv	r5, r0, r5
   dcb8c:	6823      	ldr	r3, [r4, #0]
   dcb8e:	429d      	cmp	r5, r3
   dcb90:	dd1b      	ble.n	dcbca <_Z6bdelayi+0x56>
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == LOW){
   dcb92:	2000      	movs	r0, #0
   dcb94:	f003 fde4 	bl	e0760 <digitalRead>
   dcb98:	b940      	cbnz	r0, dcbac <_Z6bdelayi+0x38>
   dcb9a:	2001      	movs	r0, #1
   dcb9c:	f003 fde0 	bl	e0760 <digitalRead>
   dcba0:	b920      	cbnz	r0, dcbac <_Z6bdelayi+0x38>
   dcba2:	2002      	movs	r0, #2
   dcba4:	f003 fddc 	bl	e0760 <digitalRead>
   dcba8:	4601      	mov	r1, r0
   dcbaa:	b118      	cbz	r0, dcbb4 <_Z6bdelayi+0x40>
            num(HC2,inpix+33,R,G,B);
        }
    }
}
void bdelay(int numMillis){
    for(i=0; i < numMillis/50; i++){                                      //Fancy delay function to ensure button presses are caught
   dcbac:	6823      	ldr	r3, [r4, #0]
   dcbae:	3301      	adds	r3, #1
   dcbb0:	6023      	str	r3, [r4, #0]
   dcbb2:	e7eb      	b.n	dcb8c <_Z6bdelayi+0x18>
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == LOW){
            displayClock(0, false, rclock, gclock, bclock);     //Updates clock if the time has changed
   dcbb4:	f8d8 3000 	ldr.w	r3, [r8]
   dcbb8:	9300      	str	r3, [sp, #0]
   dcbba:	683b      	ldr	r3, [r7, #0]
   dcbbc:	6832      	ldr	r2, [r6, #0]
   dcbbe:	f7ff fd11 	bl	dc5e4 <_Z12displayClockibiii>
            delay(50);
   dcbc2:	2032      	movs	r0, #50	; 0x32
   dcbc4:	f002 fb2c 	bl	df220 <delay>
   dcbc8:	e7f0      	b.n	dcbac <_Z6bdelayi+0x38>
        }
    }
}
   dcbca:	b002      	add	sp, #8
   dcbcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcbd0:	2003e33c 	.word	0x2003e33c
   dcbd4:	2003e314 	.word	0x2003e314
   dcbd8:	2003e350 	.word	0x2003e350
   dcbdc:	2003e35c 	.word	0x2003e35c

000dcbe0 <_Z9fillStripiiiii>:
    else{
        tmr = tmr+1;
    }

}
void fillStrip(int start, int end, int R, int G, int B){
   dcbe0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    for(i = start; i <= end; i++){
   dcbe4:	4c0c      	ldr	r4, [pc, #48]	; (dcc18 <_Z9fillStripiiiii+0x38>)
    else{
        tmr = tmr+1;
    }

}
void fillStrip(int start, int end, int R, int G, int B){
   dcbe6:	460f      	mov	r7, r1
   dcbe8:	4616      	mov	r6, r2
    for(i = start; i <= end; i++){
   dcbea:	6020      	str	r0, [r4, #0]
   dcbec:	4625      	mov	r5, r4
        strip.setPixelColor(i, R, G, B);
   dcbee:	fa5f f883 	uxtb.w	r8, r3
        tmr = tmr+1;
    }

}
void fillStrip(int start, int end, int R, int G, int B){
    for(i = start; i <= end; i++){
   dcbf2:	6821      	ldr	r1, [r4, #0]
   dcbf4:	42b9      	cmp	r1, r7
   dcbf6:	dc0c      	bgt.n	dcc12 <_Z9fillStripiiiii+0x32>
        strip.setPixelColor(i, R, G, B);
   dcbf8:	f89d 3020 	ldrb.w	r3, [sp, #32]
   dcbfc:	9300      	str	r3, [sp, #0]
   dcbfe:	b2f2      	uxtb	r2, r6
   dcc00:	4643      	mov	r3, r8
   dcc02:	b289      	uxth	r1, r1
   dcc04:	4805      	ldr	r0, [pc, #20]	; (dcc1c <_Z9fillStripiiiii+0x3c>)
   dcc06:	f001 fa27 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        tmr = tmr+1;
    }

}
void fillStrip(int start, int end, int R, int G, int B){
    for(i = start; i <= end; i++){
   dcc0a:	682b      	ldr	r3, [r5, #0]
   dcc0c:	3301      	adds	r3, #1
   dcc0e:	602b      	str	r3, [r5, #0]
   dcc10:	e7ef      	b.n	dcbf2 <_Z9fillStripiiiii+0x12>
        strip.setPixelColor(i, R, G, B);
    }
}
   dcc12:	b002      	add	sp, #8
   dcc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   dcc18:	2003e33c 	.word	0x2003e33c
   dcc1c:	2003e328 	.word	0x2003e328

000dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dcc20:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   dcc22:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dcc24:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   dcc26:	b17c      	cbz	r4, dcc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dcc28:	6863      	ldr	r3, [r4, #4]
   dcc2a:	3b01      	subs	r3, #1
   dcc2c:	6063      	str	r3, [r4, #4]
   dcc2e:	b95b      	cbnz	r3, dcc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   dcc30:	6823      	ldr	r3, [r4, #0]
   dcc32:	4620      	mov	r0, r4
   dcc34:	689b      	ldr	r3, [r3, #8]
   dcc36:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dcc38:	68a3      	ldr	r3, [r4, #8]
   dcc3a:	3b01      	subs	r3, #1
   dcc3c:	60a3      	str	r3, [r4, #8]
   dcc3e:	b91b      	cbnz	r3, dcc48 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   dcc40:	6823      	ldr	r3, [r4, #0]
   dcc42:	4620      	mov	r0, r4
   dcc44:	68db      	ldr	r3, [r3, #12]
   dcc46:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   dcc48:	4628      	mov	r0, r5
   dcc4a:	bd38      	pop	{r3, r4, r5, pc}

000dcc4c <setup>:

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dcc4c:	b530      	push	{r4, r5, lr}
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dcc4e:	2102      	movs	r1, #2

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dcc50:	b085      	sub	sp, #20
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dcc52:	4860      	ldr	r0, [pc, #384]	; (dcdd4 <setup+0x188>)
   dcc54:	f003 fa8e 	bl	e0174 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>
    while(!Particle.variable("Photo", analogRead(A4))){
   dcc58:	200f      	movs	r0, #15
   dcc5a:	f003 fd94 	bl	e0786 <analogRead>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dcc5e:	2300      	movs	r3, #0
   dcc60:	9002      	str	r0, [sp, #8]
   dcc62:	2202      	movs	r2, #2
   dcc64:	a902      	add	r1, sp, #8
   dcc66:	485c      	ldr	r0, [pc, #368]	; (dcdd8 <setup+0x18c>)
   dcc68:	f001 fd3a 	bl	de6e0 <spark_variable>
   dcc6c:	b918      	cbnz	r0, dcc76 <setup+0x2a>
        delay(5);
   dcc6e:	2005      	movs	r0, #5
   dcc70:	f002 fad6 	bl	df220 <delay>
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
    while(!Particle.variable("Photo", analogRead(A4))){
   dcc74:	e7f0      	b.n	dcc58 <setup+0xc>
   dcc76:	2300      	movs	r3, #0
   dcc78:	2202      	movs	r2, #2
   dcc7a:	4958      	ldr	r1, [pc, #352]	; (dcddc <setup+0x190>)
   dcc7c:	4858      	ldr	r0, [pc, #352]	; (dcde0 <setup+0x194>)
   dcc7e:	4c59      	ldr	r4, [pc, #356]	; (dcde4 <setup+0x198>)
   dcc80:	f001 fd2e 	bl	de6e0 <spark_variable>
   dcc84:	2300      	movs	r3, #0
   dcc86:	2202      	movs	r2, #2
   dcc88:	4957      	ldr	r1, [pc, #348]	; (dcde8 <setup+0x19c>)
   dcc8a:	4858      	ldr	r0, [pc, #352]	; (dcdec <setup+0x1a0>)
   dcc8c:	f001 fd28 	bl	de6e0 <spark_variable>
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dcc90:	4b57      	ldr	r3, [pc, #348]	; (dcdf0 <setup+0x1a4>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dcc92:	4858      	ldr	r0, [pc, #352]	; (dcdf4 <setup+0x1a8>)
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dcc94:	781b      	ldrb	r3, [r3, #0]
   dcc96:	9302      	str	r3, [sp, #8]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dcc98:	2202      	movs	r2, #2
   dcc9a:	2300      	movs	r3, #0
   dcc9c:	a902      	add	r1, sp, #8
   dcc9e:	f001 fd1f 	bl	de6e0 <spark_variable>
        delay(5);
    }
    Particle.variable("Co2", ico2);
    Particle.variable("Inside Temp", itemp);
    Particle.variable("EEPROM", eevalue);
    Particle.subscribe("hook-response/Weather", myHandler, MY_DEVICES);             //Subscribes to Weather API event
   dcca2:	2200      	movs	r2, #0
   dcca4:	4954      	ldr	r1, [pc, #336]	; (dcdf8 <setup+0x1ac>)
   dcca6:	4855      	ldr	r0, [pc, #340]	; (dcdfc <setup+0x1b0>)
   dcca8:	f7f7 fba8 	bl	d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/co2dat", co2Handler, MY_DEVICES);             //Subscribes to CO2 data api
   dccac:	2200      	movs	r2, #0
   dccae:	4954      	ldr	r1, [pc, #336]	; (dce00 <setup+0x1b4>)
   dccb0:	4854      	ldr	r0, [pc, #336]	; (dce04 <setup+0x1b8>)
   dccb2:	f7f7 fba3 	bl	d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/itempdat", itHandler, MY_DEVICES);            //Subscribes to inside temp data api
   dccb6:	2200      	movs	r2, #0
   dccb8:	4953      	ldr	r1, [pc, #332]	; (dce08 <setup+0x1bc>)
   dccba:	4854      	ldr	r0, [pc, #336]	; (dce0c <setup+0x1c0>)
   dccbc:	f7f7 fb9e 	bl	d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/getState", mshHdlr2, MY_DEVICES);
   dccc0:	2200      	movs	r2, #0
   dccc2:	4953      	ldr	r1, [pc, #332]	; (dce10 <setup+0x1c4>)
   dccc4:	4853      	ldr	r0, [pc, #332]	; (dce14 <setup+0x1c8>)
   dccc6:	f7f7 fb99 	bl	d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Mesh.subscribe("toggleBtn", mshHdlr);
   dccca:	4a53      	ldr	r2, [pc, #332]	; (dce18 <setup+0x1cc>)
   dcccc:	4953      	ldr	r1, [pc, #332]	; (dce1c <setup+0x1d0>)
   dccce:	4854      	ldr	r0, [pc, #336]	; (dce20 <setup+0x1d4>)
   dccd0:	f003 fb02 	bl	e02d8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dccd4:	2500      	movs	r5, #0
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
    return subscribe(name, handler, ALL_DEVICES);
   dccd6:	2201      	movs	r2, #1
   dccd8:	4952      	ldr	r1, [pc, #328]	; (dce24 <setup+0x1d8>)
   dccda:	4853      	ldr	r0, [pc, #332]	; (dce28 <setup+0x1dc>)
   dccdc:	f7f7 fb8e 	bl	d43fc <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dcce0:	7823      	ldrb	r3, [r4, #0]
    Particle.subscribe("pclock999", myHandler2);                                    //Subscribes to Google Home IFTTT integration
    Particle.publish("Weather", "1", PRIVATE);                                      //Initial Publishes to get weather data
   dcce2:	4a52      	ldr	r2, [pc, #328]	; (dce2c <setup+0x1e0>)
   dcce4:	4952      	ldr	r1, [pc, #328]	; (dce30 <setup+0x1e4>)
   dcce6:	f88d 5000 	strb.w	r5, [sp]
   dccea:	a802      	add	r0, sp, #8
   dccec:	f7f7 fc4c 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dccf0:	a803      	add	r0, sp, #12
   dccf2:	f7ff ff95 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if(EEPROM.read(3) == 1)
   dccf6:	f003 fd5d 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dccfa:	2003      	movs	r0, #3
   dccfc:	f7f7 fb88 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dcd00:	2801      	cmp	r0, #1
   dcd02:	d10a      	bne.n	dcd1a <setup+0xce>
   dcd04:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("co2dat", "1", PRIVATE);
   dcd06:	4a49      	ldr	r2, [pc, #292]	; (dce2c <setup+0x1e0>)
   dcd08:	f88d 5000 	strb.w	r5, [sp]
   dcd0c:	a802      	add	r0, sp, #8
   dcd0e:	4949      	ldr	r1, [pc, #292]	; (dce34 <setup+0x1e8>)
   dcd10:	f7f7 fc3a 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dcd14:	a803      	add	r0, sp, #12
   dcd16:	f7ff ff83 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    if(EEPROM.read(4) == 1)
   dcd1a:	f003 fd4b 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dcd1e:	2004      	movs	r0, #4
   dcd20:	f7f7 fb76 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dcd24:	2801      	cmp	r0, #1
   dcd26:	d10b      	bne.n	dcd40 <setup+0xf4>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dcd28:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dcd2a:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("itempdat", "1", PRIVATE);
   dcd2c:	4942      	ldr	r1, [pc, #264]	; (dce38 <setup+0x1ec>)
   dcd2e:	f88d 2000 	strb.w	r2, [sp]
   dcd32:	a802      	add	r0, sp, #8
   dcd34:	4a3d      	ldr	r2, [pc, #244]	; (dce2c <setup+0x1e0>)
   dcd36:	f7f7 fc27 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dcd3a:	a803      	add	r0, sp, #12
   dcd3c:	f7ff ff70 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
   dcd40:	2103      	movs	r1, #3
   dcd42:	2000      	movs	r0, #0
   dcd44:	f003 fce2 	bl	e070c <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
   dcd48:	2103      	movs	r1, #3
   dcd4a:	2001      	movs	r0, #1
   dcd4c:	f003 fcde 	bl	e070c <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
   dcd50:	2103      	movs	r1, #3
   dcd52:	2002      	movs	r0, #2
   dcd54:	f003 fcda 	bl	e070c <pinMode>
    RGB.control(true);
   dcd58:	2001      	movs	r0, #1
   dcd5a:	f002 fa73 	bl	df244 <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
   dcd5e:	2200      	movs	r2, #0
   dcd60:	4611      	mov	r1, r2
   dcd62:	4610      	mov	r0, r2
   dcd64:	f002 fa7e 	bl	df264 <_ZN8RGBClass5colorEiii>
    scan = 1;                                                                       //scans photoresistor for room brightness
   dcd68:	4b34      	ldr	r3, [pc, #208]	; (dce3c <setup+0x1f0>)
    photoupd = 0;
    wmode = 1;
    dmode = 1;
    fdark = 2;
    tmr = 55;
    strip.begin();
   dcd6a:	4835      	ldr	r0, [pc, #212]	; (dce40 <setup+0x1f4>)
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
    pinMode(D1, INPUT_PULLDOWN);
    pinMode(D2, INPUT_PULLDOWN);
    RGB.control(true);
    RGB.color(0, 0, 0);
    scan = 1;                                                                       //scans photoresistor for room brightness
   dcd6c:	2401      	movs	r4, #1
   dcd6e:	601c      	str	r4, [r3, #0]
    photoupd = 0;
   dcd70:	4b34      	ldr	r3, [pc, #208]	; (dce44 <setup+0x1f8>)
   dcd72:	2200      	movs	r2, #0
   dcd74:	601a      	str	r2, [r3, #0]
    wmode = 1;
   dcd76:	4b34      	ldr	r3, [pc, #208]	; (dce48 <setup+0x1fc>)
   dcd78:	601c      	str	r4, [r3, #0]
    dmode = 1;
   dcd7a:	4b34      	ldr	r3, [pc, #208]	; (dce4c <setup+0x200>)
   dcd7c:	601c      	str	r4, [r3, #0]
    fdark = 2;
   dcd7e:	4b34      	ldr	r3, [pc, #208]	; (dce50 <setup+0x204>)
   dcd80:	2202      	movs	r2, #2
   dcd82:	601a      	str	r2, [r3, #0]
    tmr = 55;
   dcd84:	4b33      	ldr	r3, [pc, #204]	; (dce54 <setup+0x208>)
   dcd86:	2237      	movs	r2, #55	; 0x37
   dcd88:	601a      	str	r2, [r3, #0]
    strip.begin();
   dcd8a:	f000 ff8c 	bl	ddca6 <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
   dcd8e:	482c      	ldr	r0, [pc, #176]	; (dce40 <setup+0x1f4>)
   dcd90:	f000 ffc0 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
    Time.zone(12-EEPROM.read(1));
   dcd94:	f003 fd0e 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dcd98:	4620      	mov	r0, r4
   dcd9a:	f7f7 fb39 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dcd9e:	f1c0 000c 	rsb	r0, r0, #12
   dcda2:	ee07 0a90 	vmov	s15, r0
   dcda6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   dcdaa:	f002 f9d9 	bl	df160 <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
   dcdae:	f002 fa23 	bl	df1f8 <_ZN9TimeClass6minuteEv>
   dcdb2:	4b29      	ldr	r3, [pc, #164]	; (dce58 <setup+0x20c>)
   dcdb4:	3801      	subs	r0, #1
   dcdb6:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
   dcdb8:	f002 fa16 	bl	df1e8 <_ZN9TimeClass12hourFormat12Ev>
   dcdbc:	4b27      	ldr	r3, [pc, #156]	; (dce5c <setup+0x210>)
   dcdbe:	3801      	subs	r0, #1
   dcdc0:	6018      	str	r0, [r3, #0]
    bound = dnbound;
   dcdc2:	4b27      	ldr	r3, [pc, #156]	; (dce60 <setup+0x214>)
   dcdc4:	223c      	movs	r2, #60	; 0x3c
    delay(50);
   dcdc6:	2032      	movs	r0, #50	; 0x32
    strip.begin();
    strip.show();
    Time.zone(12-EEPROM.read(1));
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
   dcdc8:	601a      	str	r2, [r3, #0]
    delay(50);
   dcdca:	f002 fa29 	bl	df220 <delay>
}
   dcdce:	b005      	add	sp, #20
   dcdd0:	bd30      	pop	{r4, r5, pc}
   dcdd2:	bf00      	nop
   dcdd4:	2003e510 	.word	0x2003e510
   dcdd8:	000e3aa8 	.word	0x000e3aa8
   dcddc:	2003e304 	.word	0x2003e304
   dcde0:	000e3aae 	.word	0x000e3aae
   dcde4:	2003e324 	.word	0x2003e324
   dcde8:	2003e344 	.word	0x2003e344
   dcdec:	000e3ab2 	.word	0x000e3ab2
   dcdf0:	2003e369 	.word	0x2003e369
   dcdf4:	000e3abe 	.word	0x000e3abe
   dcdf8:	000d40c1 	.word	0x000d40c1
   dcdfc:	000e3ac5 	.word	0x000e3ac5
   dce00:	000d4415 	.word	0x000d4415
   dce04:	000e3adb 	.word	0x000e3adb
   dce08:	000d42d9 	.word	0x000d42d9
   dce0c:	000e3af0 	.word	0x000e3af0
   dce10:	000d4295 	.word	0x000d4295
   dce14:	000e3b07 	.word	0x000e3b07
   dce18:	000ddb8d 	.word	0x000ddb8d
   dce1c:	000e3b1e 	.word	0x000e3b1e
   dce20:	2003e518 	.word	0x2003e518
   dce24:	000d4385 	.word	0x000d4385
   dce28:	000e3b28 	.word	0x000e3b28
   dce2c:	000e3e0b 	.word	0x000e3e0b
   dce30:	000e3ad3 	.word	0x000e3ad3
   dce34:	000e3ae9 	.word	0x000e3ae9
   dce38:	000e3afe 	.word	0x000e3afe
   dce3c:	2003e308 	.word	0x2003e308
   dce40:	2003e328 	.word	0x2003e328
   dce44:	2003e348 	.word	0x2003e348
   dce48:	2003e2f0 	.word	0x2003e2f0
   dce4c:	2003e320 	.word	0x2003e320
   dce50:	2003e30c 	.word	0x2003e30c
   dce54:	2003e364 	.word	0x2003e364
   dce58:	2003e31c 	.word	0x2003e31c
   dce5c:	2003e318 	.word	0x2003e318
   dce60:	2003e358 	.word	0x2003e358
   dce64:	00000000 	.word	0x00000000

000dce68 <loop>:
            displayClock(0, false, rclock, gclock, bclock);     //Updates clock if the time has changed
            delay(50);
        }
    }
}
void loop() {                           //General operating loop of the program
   dce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dce6c:	4bc4      	ldr	r3, [pc, #784]	; (dd180 <loop+0x318>)
   dce6e:	4dc5      	ldr	r5, [pc, #788]	; (dd184 <loop+0x31c>)
   dce70:	f8d3 9000 	ldr.w	r9, [r3]
            displayClock(0, false, rclock, gclock, bclock);     //Updates clock if the time has changed
            delay(50);
        }
    }
}
void loop() {                           //General operating loop of the program
   dce74:	b087      	sub	sp, #28
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dce76:	f1b9 0f01 	cmp.w	r9, #1
   dce7a:	9303      	str	r3, [sp, #12]
   dce7c:	d16a      	bne.n	dcf54 <loop+0xec>
        scan=2;
   dce7e:	f04f 0802 	mov.w	r8, #2
        if(analogRead(A4) < bound) {
   dce82:	200f      	movs	r0, #15
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
        scan=2;
   dce84:	f8c3 8000 	str.w	r8, [r3]
        if(analogRead(A4) < bound) {
   dce88:	f003 fc7d 	bl	e0786 <analogRead>
   dce8c:	4bbe      	ldr	r3, [pc, #760]	; (dd188 <loop+0x320>)
   dce8e:	f8df b318 	ldr.w	fp, [pc, #792]	; dd1a8 <loop+0x340>
   dce92:	681a      	ldr	r2, [r3, #0]
   dce94:	4fbd      	ldr	r7, [pc, #756]	; (dd18c <loop+0x324>)
   dce96:	4ebe      	ldr	r6, [pc, #760]	; (dd190 <loop+0x328>)
   dce98:	4cbe      	ldr	r4, [pc, #760]	; (dd194 <loop+0x32c>)
   dce9a:	4290      	cmp	r0, r2
   dce9c:	469a      	mov	sl, r3
   dce9e:	da27      	bge.n	dcef0 <loop+0x88>
            bound = upbound;
   dcea0:	22fa      	movs	r2, #250	; 0xfa
   dcea2:	601a      	str	r2, [r3, #0]
            if(fdark == 2){
   dcea4:	f8db 3000 	ldr.w	r3, [fp]
   dcea8:	4543      	cmp	r3, r8
   dceaa:	d104      	bne.n	dceb6 <loop+0x4e>
                strip.clear();
   dceac:	48ba      	ldr	r0, [pc, #744]	; (dd198 <loop+0x330>)
   dceae:	f001 f902 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 1;
   dceb2:	f8cb 9000 	str.w	r9, [fp]
            }
            rclock = 0;
   dceb6:	2300      	movs	r3, #0
   dceb8:	603b      	str	r3, [r7, #0]
            gclock = 0;
   dceba:	6033      	str	r3, [r6, #0]
            bclock = 0;
   dcebc:	6023      	str	r3, [r4, #0]
            if(EEPROM.read(5) == 2){
   dcebe:	f003 fc79 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dcec2:	2005      	movs	r0, #5
   dcec4:	f7f7 faa4 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dcec8:	2802      	cmp	r0, #2
   dceca:	d103      	bne.n	dced4 <loop+0x6c>
                gclock = 1;
   dcecc:	4bb0      	ldr	r3, [pc, #704]	; (dd190 <loop+0x328>)
   dcece:	2201      	movs	r2, #1
   dced0:	601a      	str	r2, [r3, #0]
   dced2:	e00a      	b.n	dceea <loop+0x82>
            }
            else if(EEPROM.read(5) == 3){
   dced4:	f003 fc6e 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dced8:	2005      	movs	r0, #5
   dceda:	f7f7 fa99 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dcede:	2803      	cmp	r0, #3
                bclock = 1;
   dcee0:	bf0c      	ite	eq
   dcee2:	4aac      	ldreq	r2, [pc, #688]	; (dd194 <loop+0x32c>)
            }
            else{
                rclock = 1;
   dcee4:	4aa9      	ldrne	r2, [pc, #676]	; (dd18c <loop+0x324>)
   dcee6:	2301      	movs	r3, #1
   dcee8:	6013      	str	r3, [r2, #0]
            }
            dmode = 1;
   dceea:	2301      	movs	r3, #1
   dceec:	602b      	str	r3, [r5, #0]
   dceee:	e031      	b.n	dcf54 <loop+0xec>
        }
        else {
            if(fdark == 1){
   dcef0:	f8db 3000 	ldr.w	r3, [fp]
   dcef4:	2b01      	cmp	r3, #1
   dcef6:	d104      	bne.n	dcf02 <loop+0x9a>
                strip.clear();
   dcef8:	48a7      	ldr	r0, [pc, #668]	; (dd198 <loop+0x330>)
   dcefa:	f001 f8dc 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 2;
   dcefe:	f8cb 8000 	str.w	r8, [fp]
            }
            rclock = analogRead(A4)/18;
   dcf02:	200f      	movs	r0, #15
   dcf04:	f003 fc3f 	bl	e0786 <analogRead>
   dcf08:	f04f 0812 	mov.w	r8, #18
   dcf0c:	fb90 f0f8 	sdiv	r0, r0, r8
   dcf10:	6038      	str	r0, [r7, #0]
            gclock = (analogRead(A4)/18)*0.8;
   dcf12:	200f      	movs	r0, #15
   dcf14:	f003 fc37 	bl	e0786 <analogRead>
   dcf18:	fb90 f0f8 	sdiv	r0, r0, r8
   dcf1c:	f003 ff5c 	bl	e0dd8 <__aeabi_i2d>
   dcf20:	a393      	add	r3, pc, #588	; (adr r3, dd170 <loop+0x308>)
   dcf22:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf26:	f003 ffbd 	bl	e0ea4 <__aeabi_dmul>
   dcf2a:	f004 fa55 	bl	e13d8 <__aeabi_d2iz>
   dcf2e:	6030      	str	r0, [r6, #0]
            bclock = (analogRead(A4)/18)*0.6;
   dcf30:	200f      	movs	r0, #15
   dcf32:	f003 fc28 	bl	e0786 <analogRead>
   dcf36:	fb90 f0f8 	sdiv	r0, r0, r8
   dcf3a:	f003 ff4d 	bl	e0dd8 <__aeabi_i2d>
   dcf3e:	a38e      	add	r3, pc, #568	; (adr r3, dd178 <loop+0x310>)
   dcf40:	e9d3 2300 	ldrd	r2, r3, [r3]
   dcf44:	f003 ffae 	bl	e0ea4 <__aeabi_dmul>
   dcf48:	f004 fa46 	bl	e13d8 <__aeabi_d2iz>
            bound = dnbound;
   dcf4c:	233c      	movs	r3, #60	; 0x3c
                strip.clear();
                fdark = 2;
            }
            rclock = analogRead(A4)/18;
            gclock = (analogRead(A4)/18)*0.8;
            bclock = (analogRead(A4)/18)*0.6;
   dcf4e:	6020      	str	r0, [r4, #0]
            bound = dnbound;
   dcf50:	f8ca 3000 	str.w	r3, [sl]
    
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
   dcf54:	2000      	movs	r0, #0
   dcf56:	f003 fc03 	bl	e0760 <digitalRead>
   dcf5a:	2801      	cmp	r0, #1
   dcf5c:	d108      	bne.n	dcf70 <loop+0x108>
   dcf5e:	f003 fbff 	bl	e0760 <digitalRead>
   dcf62:	b928      	cbnz	r0, dcf70 <loop+0x108>
   dcf64:	2002      	movs	r0, #2
   dcf66:	f003 fbfb 	bl	e0760 <digitalRead>
   dcf6a:	2801      	cmp	r0, #1
   dcf6c:	f000 8573 	beq.w	dda56 <loop+0xbee>
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
   dcf70:	2002      	movs	r0, #2
   dcf72:	f003 fbf5 	bl	e0760 <digitalRead>
   dcf76:	2801      	cmp	r0, #1
   dcf78:	f040 8571 	bne.w	dda5e <loop+0xbf6>
   dcf7c:	f003 fbf0 	bl	e0760 <digitalRead>
   dcf80:	2800      	cmp	r0, #0
   dcf82:	f040 856c 	bne.w	dda5e <loop+0xbf6>
   dcf86:	f003 fbeb 	bl	e0760 <digitalRead>
   dcf8a:	4604      	mov	r4, r0
   dcf8c:	2800      	cmp	r0, #0
   dcf8e:	f040 8566 	bne.w	dda5e <loop+0xbf6>
        strip.clear();
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dcf92:	f8df 8200 	ldr.w	r8, [pc, #512]	; dd194 <loop+0x32c>
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dcf96:	4880      	ldr	r0, [pc, #512]	; (dd198 <loop+0x330>)
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dcf98:	f8df a1f4 	ldr.w	sl, [pc, #500]	; dd190 <loop+0x328>
   dcf9c:	f8df 91ec 	ldr.w	r9, [pc, #492]	; dd18c <loop+0x324>
        snum(ico2/1000, 143, rclock/2,gclock/3, bclock*2);
   dcfa0:	f8df b208 	ldr.w	fp, [pc, #520]	; dd1ac <loop+0x344>
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dcfa4:	f001 f887 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dcfa8:	f8d8 0000 	ldr.w	r0, [r8]
   dcfac:	f8da 3000 	ldr.w	r3, [sl]
   dcfb0:	f8d9 2000 	ldr.w	r2, [r9]
   dcfb4:	0040      	lsls	r0, r0, #1
   dcfb6:	2703      	movs	r7, #3
   dcfb8:	2602      	movs	r6, #2
   dcfba:	4621      	mov	r1, r4
   dcfbc:	9000      	str	r0, [sp, #0]
   dcfbe:	fb93 f3f7 	sdiv	r3, r3, r7
   dcfc2:	fb92 f2f6 	sdiv	r2, r2, r6
   dcfc6:	4875      	ldr	r0, [pc, #468]	; (dd19c <loop+0x334>)
   dcfc8:	f7fc fa3a 	bl	d9440 <_Z7strdispPKciiii>
        snum(ico2/1000, 143, rclock/2,gclock/3, bclock*2);
   dcfcc:	f8d8 1000 	ldr.w	r1, [r8]
   dcfd0:	f8da 3000 	ldr.w	r3, [sl]
   dcfd4:	f8d9 2000 	ldr.w	r2, [r9]
   dcfd8:	f8db 0000 	ldr.w	r0, [fp]
   dcfdc:	fb93 f3f7 	sdiv	r3, r3, r7
   dcfe0:	0049      	lsls	r1, r1, #1
   dcfe2:	9100      	str	r1, [sp, #0]
   dcfe4:	fb92 f2f6 	sdiv	r2, r2, r6
   dcfe8:	218f      	movs	r1, #143	; 0x8f
   dcfea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   dcfee:	fb90 f0f4 	sdiv	r0, r0, r4
   dcff2:	f7f9 fb0b 	bl	d660c <_Z4snumiiiii>
        snum((ico2/(100))%10, 175, rclock/2,gclock/3, bclock*2);
   dcff6:	f8db 0000 	ldr.w	r0, [fp]
   dcffa:	f8da 3000 	ldr.w	r3, [sl]
   dcffe:	f8d9 2000 	ldr.w	r2, [r9]
   dd002:	fb93 f3f7 	sdiv	r3, r3, r7
   dd006:	2164      	movs	r1, #100	; 0x64
   dd008:	fb90 f0f1 	sdiv	r0, r0, r1
   dd00c:	f8d8 1000 	ldr.w	r1, [r8]
   dd010:	fb92 f2f6 	sdiv	r2, r2, r6
   dd014:	240a      	movs	r4, #10
   dd016:	0049      	lsls	r1, r1, #1
   dd018:	fb90 fef4 	sdiv	lr, r0, r4
   dd01c:	9100      	str	r1, [sp, #0]
   dd01e:	fb04 001e 	mls	r0, r4, lr, r0
   dd022:	21af      	movs	r1, #175	; 0xaf
   dd024:	f7f9 faf2 	bl	d660c <_Z4snumiiiii>
        snum((ico2/(10))%10, 207, rclock/2,gclock/3, bclock*2);
   dd028:	f8d8 1000 	ldr.w	r1, [r8]
   dd02c:	f8da 3000 	ldr.w	r3, [sl]
   dd030:	f8d9 2000 	ldr.w	r2, [r9]
   dd034:	f8db 0000 	ldr.w	r0, [fp]
   dd038:	fb93 f3f7 	sdiv	r3, r3, r7
   dd03c:	0049      	lsls	r1, r1, #1
   dd03e:	fb90 f0f4 	sdiv	r0, r0, r4
   dd042:	9100      	str	r1, [sp, #0]
   dd044:	fb90 fef4 	sdiv	lr, r0, r4
   dd048:	fb92 f2f6 	sdiv	r2, r2, r6
   dd04c:	fb04 001e 	mls	r0, r4, lr, r0
   dd050:	21cf      	movs	r1, #207	; 0xcf
   dd052:	f7f9 fadb 	bl	d660c <_Z4snumiiiii>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
   dd056:	f8d8 1000 	ldr.w	r1, [r8]
   dd05a:	f8db 0000 	ldr.w	r0, [fp]
   dd05e:	f8da 3000 	ldr.w	r3, [sl]
   dd062:	fb90 fef4 	sdiv	lr, r0, r4
   dd066:	0049      	lsls	r1, r1, #1
   dd068:	fb04 001e 	mls	r0, r4, lr, r0
   dd06c:	f8d9 2000 	ldr.w	r2, [r9]
   dd070:	fb93 f3f7 	sdiv	r3, r3, r7
   dd074:	fb92 f2f6 	sdiv	r2, r2, r6
   dd078:	9100      	str	r1, [sp, #0]
   dd07a:	21ef      	movs	r1, #239	; 0xef
   dd07c:	f7f9 fac6 	bl	d660c <_Z4snumiiiii>
        strip.show();
   dd080:	4845      	ldr	r0, [pc, #276]	; (dd198 <loop+0x330>)
   dd082:	f000 fe47 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        delay(5000);
   dd086:	f241 3088 	movw	r0, #5000	; 0x1388
   dd08a:	f002 f8c9 	bl	df220 <delay>
        strip.clear();
   dd08e:	4842      	ldr	r0, [pc, #264]	; (dd198 <loop+0x330>)
   dd090:	f001 f811 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
        strip.show();
        while(digitalRead(D0) == HIGH){
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
   dd094:	2001      	movs	r0, #1
   dd096:	f003 fb63 	bl	e0760 <digitalRead>
   dd09a:	2801      	cmp	r0, #1
   dd09c:	d112      	bne.n	dd0c4 <loop+0x25c>
   dd09e:	2000      	movs	r0, #0
   dd0a0:	f003 fb5e 	bl	e0760 <digitalRead>
   dd0a4:	b970      	cbnz	r0, dd0c4 <loop+0x25c>
   dd0a6:	2002      	movs	r0, #2
   dd0a8:	f003 fb5a 	bl	e0760 <digitalRead>
   dd0ac:	4602      	mov	r2, r0
   dd0ae:	2800      	cmp	r0, #0
   dd0b0:	f000 8502 	beq.w	ddab8 <loop+0xc50>
   dd0b4:	e006      	b.n	dd0c4 <loop+0x25c>
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
            delay(10);
        }
        strip.setPixelColor(7,0,0,0);
   dd0b6:	2300      	movs	r3, #0
   dd0b8:	9300      	str	r3, [sp, #0]
   dd0ba:	461a      	mov	r2, r3
   dd0bc:	2107      	movs	r1, #7
   dd0be:	4836      	ldr	r0, [pc, #216]	; (dd198 <loop+0x330>)
   dd0c0:	f000 ffca 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    
//////////////////////////////////////
//////////////MODE 1//////////////////              Clock with cycling weather conditions
//////////////////////////////////////
    
    if(dmode == 1){                                                     
   dd0c4:	682f      	ldr	r7, [r5, #0]
   dd0c6:	2f01      	cmp	r7, #1
   dd0c8:	f040 8298 	bne.w	dd5fc <loop+0x794>

        displayClock(0, true, rclock, gclock, bclock);                          //Manually Update Temperature every full cycle
   dd0cc:	4c31      	ldr	r4, [pc, #196]	; (dd194 <loop+0x32c>)
   dd0ce:	4e30      	ldr	r6, [pc, #192]	; (dd190 <loop+0x328>)
   dd0d0:	6823      	ldr	r3, [r4, #0]
   dd0d2:	4d2e      	ldr	r5, [pc, #184]	; (dd18c <loop+0x324>)
   dd0d4:	9300      	str	r3, [sp, #0]
   dd0d6:	6833      	ldr	r3, [r6, #0]
   dd0d8:	682a      	ldr	r2, [r5, #0]
   dd0da:	4639      	mov	r1, r7
   dd0dc:	2000      	movs	r0, #0
   dd0de:	f7ff fa81 	bl	dc5e4 <_Z12displayClockibiii>
        strip.show();
   dd0e2:	482d      	ldr	r0, [pc, #180]	; (dd198 <loop+0x330>)
   dd0e4:	f000 fe16 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        scan=1;
   dd0e8:	9b03      	ldr	r3, [sp, #12]

        //////////IF SENSOR IS BRIGHT//////////
        if(analogRead(A4) >= bound)             
   dd0ea:	200f      	movs	r0, #15
    
    if(dmode == 1){                                                     

        displayClock(0, true, rclock, gclock, bclock);                          //Manually Update Temperature every full cycle
        strip.show();
        scan=1;
   dd0ec:	601f      	str	r7, [r3, #0]

        //////////IF SENSOR IS BRIGHT//////////
        if(analogRead(A4) >= bound)             
   dd0ee:	f003 fb4a 	bl	e0786 <analogRead>
   dd0f2:	4b25      	ldr	r3, [pc, #148]	; (dd188 <loop+0x320>)
   dd0f4:	681b      	ldr	r3, [r3, #0]
   dd0f6:	4298      	cmp	r0, r3
   dd0f8:	f2c0 8230 	blt.w	dd55c <loop+0x6f4>
        {
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)                                             //Check if setting is enabled for displaying weather elements
   dd0fc:	f003 fb5a 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dd100:	2002      	movs	r0, #2
   dd102:	f7f7 f985 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dd106:	2801      	cmp	r0, #1
   dd108:	f040 840e 	bne.w	dd928 <loop+0xac0>
            {
                if(wmode == 1)                                                  //Outdoor Temperature
   dd10c:	4f24      	ldr	r7, [pc, #144]	; (dd1a0 <loop+0x338>)
   dd10e:	683b      	ldr	r3, [r7, #0]
   dd110:	2b01      	cmp	r3, #1
   dd112:	d179      	bne.n	dd208 <loop+0x3a0>
                {
                    fillStrip(160,255,0,0,0);                                   //Erase space used for temperature numbers
   dd114:	f04f 0900 	mov.w	r9, #0
   dd118:	464b      	mov	r3, r9
   dd11a:	f8cd 9000 	str.w	r9, [sp]
   dd11e:	464a      	mov	r2, r9
   dd120:	21ff      	movs	r1, #255	; 0xff
   dd122:	20a0      	movs	r0, #160	; 0xa0
   dd124:	f7ff fd5c 	bl	dcbe0 <_Z9fillStripiiiii>
                    for(i=0; i <= 25; i++){                                     //Fade up animation for numbers
   dd128:	4b1e      	ldr	r3, [pc, #120]	; (dd1a4 <loop+0x33c>)
   dd12a:	f8c3 9000 	str.w	r9, [r3]
   dd12e:	4698      	mov	r8, r3
   dd130:	469b      	mov	fp, r3
   dd132:	f04f 0919 	mov.w	r9, #25
   dd136:	f8d8 2000 	ldr.w	r2, [r8]
   dd13a:	491a      	ldr	r1, [pc, #104]	; (dd1a4 <loop+0x33c>)
   dd13c:	2a19      	cmp	r2, #25
   dd13e:	f04f 0a19 	mov.w	sl, #25
   dd142:	dc35      	bgt.n	dd1b0 <loop+0x348>
                        displayTemp(160,0,(gclock*i)/25,0);                     //Call function used to display numbers
   dd144:	6833      	ldr	r3, [r6, #0]
   dd146:	435a      	muls	r2, r3
   dd148:	2300      	movs	r3, #0
   dd14a:	4619      	mov	r1, r3
   dd14c:	fb92 f2f9 	sdiv	r2, r2, r9
   dd150:	20a0      	movs	r0, #160	; 0xa0
   dd152:	f7ff fbd5 	bl	dc900 <_Z11displayTempiiii>
                        strip.show();
   dd156:	4810      	ldr	r0, [pc, #64]	; (dd198 <loop+0x330>)
   dd158:	f000 fddc 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);                                               //Adjust this delay to change animation duration
   dd15c:	2002      	movs	r0, #2
   dd15e:	f002 f85f 	bl	df220 <delay>
            if(EEPROM.read(2) == 1)                                             //Check if setting is enabled for displaying weather elements
            {
                if(wmode == 1)                                                  //Outdoor Temperature
                {
                    fillStrip(160,255,0,0,0);                                   //Erase space used for temperature numbers
                    for(i=0; i <= 25; i++){                                     //Fade up animation for numbers
   dd162:	f8db 3000 	ldr.w	r3, [fp]
   dd166:	3301      	adds	r3, #1
   dd168:	f8cb 3000 	str.w	r3, [fp]
   dd16c:	e7e3      	b.n	dd136 <loop+0x2ce>
   dd16e:	bf00      	nop
   dd170:	9999999a 	.word	0x9999999a
   dd174:	3fe99999 	.word	0x3fe99999
   dd178:	33333333 	.word	0x33333333
   dd17c:	3fe33333 	.word	0x3fe33333
   dd180:	2003e308 	.word	0x2003e308
   dd184:	2003e320 	.word	0x2003e320
   dd188:	2003e358 	.word	0x2003e358
   dd18c:	2003e350 	.word	0x2003e350
   dd190:	2003e314 	.word	0x2003e314
   dd194:	2003e35c 	.word	0x2003e35c
   dd198:	2003e328 	.word	0x2003e328
   dd19c:	000e3b32 	.word	0x000e3b32
   dd1a0:	2003e2f0 	.word	0x2003e2f0
   dd1a4:	2003e33c 	.word	0x2003e33c
   dd1a8:	2003e30c 	.word	0x2003e30c
   dd1ac:	2003e304 	.word	0x2003e304
                        displayTemp(160,0,(gclock*i)/25,0);                     //Call function used to display numbers
                        strip.show();
                        delay(2);                                               //Adjust this delay to change animation duration
                    }
                    bdelay(2500);
   dd1b0:	f640 10c4 	movw	r0, #2500	; 0x9c4
   dd1b4:	9103      	str	r1, [sp, #12]
   dd1b6:	f7ff fcdd 	bl	dcb74 <_Z6bdelayi>
                    for(i=25; i >= 0; i--){                                     //Fade down animation
   dd1ba:	9903      	ldr	r1, [sp, #12]
   dd1bc:	f8c1 a000 	str.w	sl, [r1]
   dd1c0:	4689      	mov	r9, r1
   dd1c2:	f8d8 2000 	ldr.w	r2, [r8]
   dd1c6:	2a00      	cmp	r2, #0
   dd1c8:	db14      	blt.n	dd1f4 <loop+0x38c>
                        displayTemp(160,0,(gclock*i)/25,0);                     //Call function used to display numbers
   dd1ca:	6833      	ldr	r3, [r6, #0]
   dd1cc:	435a      	muls	r2, r3
   dd1ce:	2300      	movs	r3, #0
   dd1d0:	4619      	mov	r1, r3
   dd1d2:	fb92 f2fa 	sdiv	r2, r2, sl
   dd1d6:	20a0      	movs	r0, #160	; 0xa0
   dd1d8:	f7ff fb92 	bl	dc900 <_Z11displayTempiiii>
                        strip.show();
   dd1dc:	48ac      	ldr	r0, [pc, #688]	; (dd490 <loop+0x628>)
   dd1de:	f000 fd99 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);                                               //Adjust this delay to change animation duration
   dd1e2:	2002      	movs	r0, #2
   dd1e4:	f002 f81c 	bl	df220 <delay>
                        displayTemp(160,0,(gclock*i)/25,0);                     //Call function used to display numbers
                        strip.show();
                        delay(2);                                               //Adjust this delay to change animation duration
                    }
                    bdelay(2500);
                    for(i=25; i >= 0; i--){                                     //Fade down animation
   dd1e8:	f8d9 3000 	ldr.w	r3, [r9]
   dd1ec:	3b01      	subs	r3, #1
   dd1ee:	f8c9 3000 	str.w	r3, [r9]
   dd1f2:	e7e6      	b.n	dd1c2 <loop+0x35a>
                        displayTemp(160,0,(gclock*i)/25,0);                     //Call function used to display numbers
                        strip.show();
                        delay(2);                                               //Adjust this delay to change animation duration
                    }
                    if(EEPROM.read(4) == 1){                                    //Check settings in EEPROM
   dd1f4:	f003 fade 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dd1f8:	2004      	movs	r0, #4
   dd1fa:	f7f7 f909 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dd1fe:	2801      	cmp	r0, #1
                        wmode = 2;                                              //Go to indoor temperature code block if configured to do so
   dd200:	bf0c      	ite	eq
   dd202:	2302      	moveq	r3, #2
                    }
                    else{
                        wmode = 3;                                              //Otherwise skip, and go to the humidity control
   dd204:	2303      	movne	r3, #3
   dd206:	603b      	str	r3, [r7, #0]
                    }
                }
                if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
   dd208:	683b      	ldr	r3, [r7, #0]
   dd20a:	2b02      	cmp	r3, #2
   dd20c:	f040 80b0 	bne.w	dd370 <loop+0x508>
                {
                    fillStrip(160,255,0,0,0);
   dd210:	2700      	movs	r7, #0
   dd212:	463b      	mov	r3, r7
   dd214:	9700      	str	r7, [sp, #0]
   dd216:	463a      	mov	r2, r7
   dd218:	21ff      	movs	r1, #255	; 0xff
   dd21a:	20a0      	movs	r0, #160	; 0xa0
   dd21c:	f7ff fce0 	bl	dcbe0 <_Z9fillStripiiiii>
                    for(i=0; i <= 25; i++){
   dd220:	4b9c      	ldr	r3, [pc, #624]	; (dd494 <loop+0x62c>)
   dd222:	601f      	str	r7, [r3, #0]
                        num(itemp/10,160,(rclock*i)/50,0,(bclock*i)/25);
   dd224:	4f9c      	ldr	r7, [pc, #624]	; (dd498 <loop+0x630>)
                    }
                }
                if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
                {
                    fillStrip(160,255,0,0,0);
                    for(i=0; i <= 25; i++){
   dd226:	4698      	mov	r8, r3
   dd228:	f8d8 1000 	ldr.w	r1, [r8]
   dd22c:	f8df 9264 	ldr.w	r9, [pc, #612]	; dd494 <loop+0x62c>
   dd230:	2919      	cmp	r1, #25
   dd232:	dc47      	bgt.n	dd2c4 <loop+0x45c>
                        num(itemp/10,160,(rclock*i)/50,0,(bclock*i)/25);
   dd234:	682a      	ldr	r2, [r5, #0]
   dd236:	6823      	ldr	r3, [r4, #0]
   dd238:	6838      	ldr	r0, [r7, #0]
   dd23a:	f04f 0a32 	mov.w	sl, #50	; 0x32
   dd23e:	f04f 0b0a 	mov.w	fp, #10
   dd242:	f04f 0919 	mov.w	r9, #25
   dd246:	434a      	muls	r2, r1
   dd248:	434b      	muls	r3, r1
   dd24a:	fb92 f2fa 	sdiv	r2, r2, sl
   dd24e:	fb93 f3f9 	sdiv	r3, r3, r9
   dd252:	21a0      	movs	r1, #160	; 0xa0
   dd254:	9300      	str	r3, [sp, #0]
   dd256:	fb90 f0fb 	sdiv	r0, r0, fp
   dd25a:	2300      	movs	r3, #0
   dd25c:	f7f7 f9a2 	bl	d45a4 <_Z3numiiiii>
                        num(itemp%10,207,(rclock*i)/50,0,(bclock*i)/25);
   dd260:	f8d8 1000 	ldr.w	r1, [r8]
   dd264:	6838      	ldr	r0, [r7, #0]
   dd266:	682a      	ldr	r2, [r5, #0]
   dd268:	6823      	ldr	r3, [r4, #0]
   dd26a:	fb90 fefb 	sdiv	lr, r0, fp
   dd26e:	434a      	muls	r2, r1
   dd270:	fb0b 001e 	mls	r0, fp, lr, r0
   dd274:	434b      	muls	r3, r1
   dd276:	fb92 f2fa 	sdiv	r2, r2, sl
   dd27a:	fb93 f3f9 	sdiv	r3, r3, r9
   dd27e:	21cf      	movs	r1, #207	; 0xcf
   dd280:	9300      	str	r3, [sp, #0]
   dd282:	2300      	movs	r3, #0
   dd284:	f7f7 f98e 	bl	d45a4 <_Z3numiiiii>
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
   dd288:	f8d8 1000 	ldr.w	r1, [r8]
   dd28c:	6823      	ldr	r3, [r4, #0]
   dd28e:	682a      	ldr	r2, [r5, #0]
   dd290:	487f      	ldr	r0, [pc, #508]	; (dd490 <loop+0x628>)
   dd292:	434b      	muls	r3, r1
   dd294:	fb93 f3f9 	sdiv	r3, r3, r9
   dd298:	b2db      	uxtb	r3, r3
   dd29a:	434a      	muls	r2, r1
   dd29c:	9300      	str	r3, [sp, #0]
   dd29e:	21f0      	movs	r1, #240	; 0xf0
   dd2a0:	2300      	movs	r3, #0
   dd2a2:	fb92 f2fa 	sdiv	r2, r2, sl
   dd2a6:	b2d2      	uxtb	r2, r2
   dd2a8:	f000 fed6 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.show();
   dd2ac:	4878      	ldr	r0, [pc, #480]	; (dd490 <loop+0x628>)
   dd2ae:	f000 fd31 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd2b2:	2002      	movs	r0, #2
   dd2b4:	f001 ffb4 	bl	df220 <delay>
                    }
                }
                if(wmode == 2)                                                  //Indoor Temp from Adafruit Sensor
                {
                    fillStrip(160,255,0,0,0);
                    for(i=0; i <= 25; i++){
   dd2b8:	f8d8 3000 	ldr.w	r3, [r8]
   dd2bc:	3301      	adds	r3, #1
   dd2be:	f8c8 3000 	str.w	r3, [r8]
   dd2c2:	e7b1      	b.n	dd228 <loop+0x3c0>
                        num(itemp%10,207,(rclock*i)/50,0,(bclock*i)/25);
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    bdelay(2500);
   dd2c4:	f640 10c4 	movw	r0, #2500	; 0x9c4
   dd2c8:	f7ff fc54 	bl	dcb74 <_Z6bdelayi>
                    for(i=25; i <= 0; i--){
                        num(itemp/10,160,(rclock*i)/50,0,(bclock*i)/25);
   dd2cc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; dd498 <loop+0x630>
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    bdelay(2500);
                    for(i=25; i <= 0; i--){
   dd2d0:	2319      	movs	r3, #25
   dd2d2:	f8c9 3000 	str.w	r3, [r9]
   dd2d6:	464f      	mov	r7, r9
   dd2d8:	6839      	ldr	r1, [r7, #0]
   dd2da:	2900      	cmp	r1, #0
   dd2dc:	dc45      	bgt.n	dd36a <loop+0x502>
                        num(itemp/10,160,(rclock*i)/50,0,(bclock*i)/25);
   dd2de:	682a      	ldr	r2, [r5, #0]
   dd2e0:	6823      	ldr	r3, [r4, #0]
   dd2e2:	f8d8 0000 	ldr.w	r0, [r8]
   dd2e6:	f04f 0a32 	mov.w	sl, #50	; 0x32
   dd2ea:	f04f 0b0a 	mov.w	fp, #10
   dd2ee:	f04f 0919 	mov.w	r9, #25
   dd2f2:	434a      	muls	r2, r1
   dd2f4:	434b      	muls	r3, r1
   dd2f6:	fb92 f2fa 	sdiv	r2, r2, sl
   dd2fa:	fb93 f3f9 	sdiv	r3, r3, r9
   dd2fe:	21a0      	movs	r1, #160	; 0xa0
   dd300:	9300      	str	r3, [sp, #0]
   dd302:	fb90 f0fb 	sdiv	r0, r0, fp
   dd306:	2300      	movs	r3, #0
   dd308:	f7f7 f94c 	bl	d45a4 <_Z3numiiiii>
                        num(itemp%10,207,(rclock*i)/50,0,(bclock*i)/25);
   dd30c:	6839      	ldr	r1, [r7, #0]
   dd30e:	f8d8 0000 	ldr.w	r0, [r8]
   dd312:	682a      	ldr	r2, [r5, #0]
   dd314:	6823      	ldr	r3, [r4, #0]
   dd316:	fb90 fefb 	sdiv	lr, r0, fp
   dd31a:	434a      	muls	r2, r1
   dd31c:	fb0b 001e 	mls	r0, fp, lr, r0
   dd320:	434b      	muls	r3, r1
   dd322:	fb92 f2fa 	sdiv	r2, r2, sl
   dd326:	fb93 f3f9 	sdiv	r3, r3, r9
   dd32a:	21cf      	movs	r1, #207	; 0xcf
   dd32c:	9300      	str	r3, [sp, #0]
   dd32e:	2300      	movs	r3, #0
   dd330:	f7f7 f938 	bl	d45a4 <_Z3numiiiii>
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
   dd334:	6839      	ldr	r1, [r7, #0]
   dd336:	6823      	ldr	r3, [r4, #0]
   dd338:	682a      	ldr	r2, [r5, #0]
   dd33a:	4855      	ldr	r0, [pc, #340]	; (dd490 <loop+0x628>)
   dd33c:	434b      	muls	r3, r1
   dd33e:	fb93 f3f9 	sdiv	r3, r3, r9
   dd342:	b2db      	uxtb	r3, r3
   dd344:	434a      	muls	r2, r1
   dd346:	9300      	str	r3, [sp, #0]
   dd348:	21f0      	movs	r1, #240	; 0xf0
   dd34a:	2300      	movs	r3, #0
   dd34c:	fb92 f2fa 	sdiv	r2, r2, sl
   dd350:	b2d2      	uxtb	r2, r2
   dd352:	f000 fe81 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.show();
   dd356:	484e      	ldr	r0, [pc, #312]	; (dd490 <loop+0x628>)
   dd358:	f000 fcdc 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd35c:	2002      	movs	r0, #2
   dd35e:	f001 ff5f 	bl	df220 <delay>
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    bdelay(2500);
                    for(i=25; i <= 0; i--){
   dd362:	683b      	ldr	r3, [r7, #0]
   dd364:	3b01      	subs	r3, #1
   dd366:	603b      	str	r3, [r7, #0]
   dd368:	e7b6      	b.n	dd2d8 <loop+0x470>
                        num(itemp%10,207,(rclock*i)/50,0,(bclock*i)/25);
                        strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    wmode = 3;
   dd36a:	4b4c      	ldr	r3, [pc, #304]	; (dd49c <loop+0x634>)
   dd36c:	2203      	movs	r2, #3
   dd36e:	601a      	str	r2, [r3, #0]
                }
                if (wmode == 3)
   dd370:	4b4a      	ldr	r3, [pc, #296]	; (dd49c <loop+0x634>)
   dd372:	681a      	ldr	r2, [r3, #0]
   dd374:	2a03      	cmp	r2, #3
   dd376:	4699      	mov	r9, r3
   dd378:	d152      	bne.n	dd420 <loop+0x5b8>
                {
                    fillStrip(160,255,0,0,0);
   dd37a:	2700      	movs	r7, #0
   dd37c:	463b      	mov	r3, r7
   dd37e:	9700      	str	r7, [sp, #0]
   dd380:	463a      	mov	r2, r7
   dd382:	21ff      	movs	r1, #255	; 0xff
   dd384:	20a0      	movs	r0, #160	; 0xa0
   dd386:	f7ff fc2b 	bl	dcbe0 <_Z9fillStripiiiii>
                    for(i=0; i <= 25; i++){
   dd38a:	4b42      	ldr	r3, [pc, #264]	; (dd494 <loop+0x62c>)
   dd38c:	f04f 0819 	mov.w	r8, #25
   dd390:	601f      	str	r7, [r3, #0]
   dd392:	469b      	mov	fp, r3
   dd394:	461f      	mov	r7, r3
   dd396:	6839      	ldr	r1, [r7, #0]
   dd398:	4b3e      	ldr	r3, [pc, #248]	; (dd494 <loop+0x62c>)
   dd39a:	2919      	cmp	r1, #25
   dd39c:	f04f 0a19 	mov.w	sl, #25
   dd3a0:	dc17      	bgt.n	dd3d2 <loop+0x56a>
                        displayHumidity(160,0,(gclock*i)/25,(bclock*i)/25);
   dd3a2:	6823      	ldr	r3, [r4, #0]
   dd3a4:	6832      	ldr	r2, [r6, #0]
   dd3a6:	434b      	muls	r3, r1
   dd3a8:	434a      	muls	r2, r1
   dd3aa:	fb93 f3f8 	sdiv	r3, r3, r8
   dd3ae:	fb92 f2f8 	sdiv	r2, r2, r8
   dd3b2:	2100      	movs	r1, #0
   dd3b4:	20a0      	movs	r0, #160	; 0xa0
   dd3b6:	f7ff fae7 	bl	dc988 <_Z15displayHumidityiiii>
                        strip.show();
   dd3ba:	4835      	ldr	r0, [pc, #212]	; (dd490 <loop+0x628>)
   dd3bc:	f000 fcaa 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd3c0:	2002      	movs	r0, #2
   dd3c2:	f001 ff2d 	bl	df220 <delay>
                    wmode = 3;
                }
                if (wmode == 3)
                {
                    fillStrip(160,255,0,0,0);
                    for(i=0; i <= 25; i++){
   dd3c6:	f8db 3000 	ldr.w	r3, [fp]
   dd3ca:	3301      	adds	r3, #1
   dd3cc:	f8cb 3000 	str.w	r3, [fp]
   dd3d0:	e7e1      	b.n	dd396 <loop+0x52e>
                        displayHumidity(160,0,(gclock*i)/25,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    bdelay(2500);
   dd3d2:	f640 10c4 	movw	r0, #2500	; 0x9c4
   dd3d6:	9303      	str	r3, [sp, #12]
   dd3d8:	f7ff fbcc 	bl	dcb74 <_Z6bdelayi>
                    for(i=25; i >= 0; i--){
   dd3dc:	9b03      	ldr	r3, [sp, #12]
   dd3de:	f8c3 a000 	str.w	sl, [r3]
   dd3e2:	4698      	mov	r8, r3
   dd3e4:	6839      	ldr	r1, [r7, #0]
   dd3e6:	2900      	cmp	r1, #0
   dd3e8:	db17      	blt.n	dd41a <loop+0x5b2>
                        displayHumidity(160,0,(gclock*i)/25,(bclock*i)/25);
   dd3ea:	6823      	ldr	r3, [r4, #0]
   dd3ec:	6832      	ldr	r2, [r6, #0]
   dd3ee:	434b      	muls	r3, r1
   dd3f0:	434a      	muls	r2, r1
   dd3f2:	fb93 f3fa 	sdiv	r3, r3, sl
   dd3f6:	fb92 f2fa 	sdiv	r2, r2, sl
   dd3fa:	2100      	movs	r1, #0
   dd3fc:	20a0      	movs	r0, #160	; 0xa0
   dd3fe:	f7ff fac3 	bl	dc988 <_Z15displayHumidityiiii>
                        strip.show();
   dd402:	4823      	ldr	r0, [pc, #140]	; (dd490 <loop+0x628>)
   dd404:	f000 fc86 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd408:	2002      	movs	r0, #2
   dd40a:	f001 ff09 	bl	df220 <delay>
                        displayHumidity(160,0,(gclock*i)/25,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    bdelay(2500);
                    for(i=25; i >= 0; i--){
   dd40e:	f8d8 3000 	ldr.w	r3, [r8]
   dd412:	3b01      	subs	r3, #1
   dd414:	f8c8 3000 	str.w	r3, [r8]
   dd418:	e7e4      	b.n	dd3e4 <loop+0x57c>
                        displayHumidity(160,0,(gclock*i)/25,(bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    wmode = 4;
   dd41a:	2304      	movs	r3, #4
   dd41c:	f8c9 3000 	str.w	r3, [r9]
                }
                if(wmode == 4)
   dd420:	f8d9 3000 	ldr.w	r3, [r9]
   dd424:	2b04      	cmp	r3, #4
   dd426:	f040 827f 	bne.w	dd928 <loop+0xac0>
                {
                    fillStrip(160,255,0,0,0);
   dd42a:	2700      	movs	r7, #0
   dd42c:	463b      	mov	r3, r7
   dd42e:	9700      	str	r7, [sp, #0]
   dd430:	463a      	mov	r2, r7
   dd432:	21ff      	movs	r1, #255	; 0xff
   dd434:	20a0      	movs	r0, #160	; 0xa0
   dd436:	f7ff fbd3 	bl	dcbe0 <_Z9fillStripiiiii>
                    for(i=0; i <= 25; i++){
   dd43a:	4b16      	ldr	r3, [pc, #88]	; (dd494 <loop+0x62c>)
   dd43c:	601f      	str	r7, [r3, #0]
   dd43e:	469a      	mov	sl, r3
   dd440:	469b      	mov	fp, r3
   dd442:	f8da 0000 	ldr.w	r0, [sl]
   dd446:	4f13      	ldr	r7, [pc, #76]	; (dd494 <loop+0x62c>)
   dd448:	f8df 8054 	ldr.w	r8, [pc, #84]	; dd4a0 <loop+0x638>
   dd44c:	2819      	cmp	r0, #25
   dd44e:	dc29      	bgt.n	dd4a4 <loop+0x63c>
                        condition(cid,160, (rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
   dd450:	6821      	ldr	r1, [r4, #0]
   dd452:	6833      	ldr	r3, [r6, #0]
   dd454:	682a      	ldr	r2, [r5, #0]
   dd456:	2719      	movs	r7, #25
   dd458:	4341      	muls	r1, r0
   dd45a:	fb91 f1f7 	sdiv	r1, r1, r7
   dd45e:	9100      	str	r1, [sp, #0]
   dd460:	4343      	muls	r3, r0
   dd462:	21a0      	movs	r1, #160	; 0xa0
   dd464:	fb93 f3f7 	sdiv	r3, r3, r7
   dd468:	4342      	muls	r2, r0
   dd46a:	f8d8 0000 	ldr.w	r0, [r8]
   dd46e:	fb92 f2f7 	sdiv	r2, r2, r7
   dd472:	f7fc f8c5 	bl	d9600 <_Z9conditioniiiii>
                        strip.show();
   dd476:	4806      	ldr	r0, [pc, #24]	; (dd490 <loop+0x628>)
   dd478:	f000 fc4c 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd47c:	2002      	movs	r0, #2
   dd47e:	f001 fecf 	bl	df220 <delay>
                    wmode = 4;
                }
                if(wmode == 4)
                {
                    fillStrip(160,255,0,0,0);
                    for(i=0; i <= 25; i++){
   dd482:	f8db 3000 	ldr.w	r3, [fp]
   dd486:	3301      	adds	r3, #1
   dd488:	f8cb 3000 	str.w	r3, [fp]
   dd48c:	e7d9      	b.n	dd442 <loop+0x5da>
   dd48e:	bf00      	nop
   dd490:	2003e328 	.word	0x2003e328
   dd494:	2003e33c 	.word	0x2003e33c
   dd498:	2003e344 	.word	0x2003e344
   dd49c:	2003e2f0 	.word	0x2003e2f0
   dd4a0:	2003e2e8 	.word	0x2003e2e8
                        condition(cid,160, (rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    canim(cid,160,true);
   dd4a4:	2201      	movs	r2, #1
   dd4a6:	21a0      	movs	r1, #160	; 0xa0
   dd4a8:	f8d8 0000 	ldr.w	r0, [r8]
   dd4ac:	f7fd f9f4 	bl	da898 <_Z5canimiib>
                    displayClock(0, false, rclock, gclock, bclock);
   dd4b0:	6823      	ldr	r3, [r4, #0]
   dd4b2:	9300      	str	r3, [sp, #0]
   dd4b4:	2100      	movs	r1, #0
   dd4b6:	6833      	ldr	r3, [r6, #0]
   dd4b8:	682a      	ldr	r2, [r5, #0]
   dd4ba:	4608      	mov	r0, r1
   dd4bc:	f7ff f892 	bl	dc5e4 <_Z12displayClockibiii>
                    canim(cid,160,true);
   dd4c0:	2201      	movs	r2, #1
   dd4c2:	21a0      	movs	r1, #160	; 0xa0
   dd4c4:	f8d8 0000 	ldr.w	r0, [r8]
   dd4c8:	f7fd f9e6 	bl	da898 <_Z5canimiib>
                    displayClock(0, false, rclock, gclock, bclock);
   dd4cc:	6823      	ldr	r3, [r4, #0]
   dd4ce:	9300      	str	r3, [sp, #0]
   dd4d0:	2100      	movs	r1, #0
   dd4d2:	6833      	ldr	r3, [r6, #0]
   dd4d4:	682a      	ldr	r2, [r5, #0]
   dd4d6:	4608      	mov	r0, r1
   dd4d8:	f7ff f884 	bl	dc5e4 <_Z12displayClockibiii>
                    canim(cid,160,true);
   dd4dc:	2201      	movs	r2, #1
   dd4de:	21a0      	movs	r1, #160	; 0xa0
   dd4e0:	f8d8 0000 	ldr.w	r0, [r8]
   dd4e4:	f7fd f9d8 	bl	da898 <_Z5canimiib>
                    for(i=25; i >= 0; i--){
   dd4e8:	2319      	movs	r3, #25
   dd4ea:	603b      	str	r3, [r7, #0]
   dd4ec:	6838      	ldr	r0, [r7, #0]
   dd4ee:	2800      	cmp	r0, #0
   dd4f0:	db30      	blt.n	dd554 <loop+0x6ec>
                        condition(cid,160, (rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
   dd4f2:	6821      	ldr	r1, [r4, #0]
   dd4f4:	6833      	ldr	r3, [r6, #0]
   dd4f6:	682a      	ldr	r2, [r5, #0]
   dd4f8:	f04f 0a19 	mov.w	sl, #25
   dd4fc:	4341      	muls	r1, r0
   dd4fe:	fb91 f1fa 	sdiv	r1, r1, sl
   dd502:	9100      	str	r1, [sp, #0]
   dd504:	4343      	muls	r3, r0
   dd506:	4342      	muls	r2, r0
   dd508:	fb93 f3fa 	sdiv	r3, r3, sl
   dd50c:	fb92 f2fa 	sdiv	r2, r2, sl
   dd510:	21a0      	movs	r1, #160	; 0xa0
   dd512:	f8d8 0000 	ldr.w	r0, [r8]
   dd516:	f7fc f873 	bl	d9600 <_Z9conditioniiiii>
                        dimg(cid,160,(rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
   dd51a:	6838      	ldr	r0, [r7, #0]
   dd51c:	6821      	ldr	r1, [r4, #0]
   dd51e:	6833      	ldr	r3, [r6, #0]
   dd520:	682a      	ldr	r2, [r5, #0]
   dd522:	4341      	muls	r1, r0
   dd524:	fb91 f1fa 	sdiv	r1, r1, sl
   dd528:	9100      	str	r1, [sp, #0]
   dd52a:	4343      	muls	r3, r0
   dd52c:	21a0      	movs	r1, #160	; 0xa0
   dd52e:	fb93 f3fa 	sdiv	r3, r3, sl
   dd532:	4342      	muls	r2, r0
   dd534:	f8d8 0000 	ldr.w	r0, [r8]
   dd538:	fb92 f2fa 	sdiv	r2, r2, sl
   dd53c:	f7fb ffd8 	bl	d94f0 <_Z4dimgiiiii>
                        strip.show();
   dd540:	485b      	ldr	r0, [pc, #364]	; (dd6b0 <loop+0x848>)
   dd542:	f000 fbe7 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd546:	2002      	movs	r0, #2
   dd548:	f001 fe6a 	bl	df220 <delay>
                    canim(cid,160,true);
                    displayClock(0, false, rclock, gclock, bclock);
                    canim(cid,160,true);
                    displayClock(0, false, rclock, gclock, bclock);
                    canim(cid,160,true);
                    for(i=25; i >= 0; i--){
   dd54c:	683b      	ldr	r3, [r7, #0]
   dd54e:	3b01      	subs	r3, #1
   dd550:	603b      	str	r3, [r7, #0]
   dd552:	e7cb      	b.n	dd4ec <loop+0x684>
                        condition(cid,160, (rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
                        dimg(cid,160,(rclock*i)/25, (gclock*i)/25, (bclock*i)/25);
                        strip.show();
                        delay(2);
                    }
                    wmode = 1;
   dd554:	2301      	movs	r3, #1
   dd556:	f8c9 3000 	str.w	r3, [r9]
   dd55a:	e1e5      	b.n	dd928 <loop+0xac0>

        ///////IF SENSOR IS DARK//////////
        else
        {
            delay(1000);
            if(photoupd == 1)                       //Statement executes once to initially erase the clock pixels
   dd55c:	f8df 8160 	ldr.w	r8, [pc, #352]	; dd6c0 <loop+0x858>
        }

        ///////IF SENSOR IS DARK//////////
        else
        {
            delay(1000);
   dd560:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   dd564:	f001 fe5c 	bl	df220 <delay>
            if(photoupd == 1)                       //Statement executes once to initially erase the clock pixels
   dd568:	f8d8 3000 	ldr.w	r3, [r8]
   dd56c:	2b01      	cmp	r3, #1
   dd56e:	d109      	bne.n	dd584 <loop+0x71c>
            {
                fillStrip(0,159,0,0,0);
   dd570:	2700      	movs	r7, #0
   dd572:	9700      	str	r7, [sp, #0]
   dd574:	463b      	mov	r3, r7
   dd576:	463a      	mov	r2, r7
   dd578:	219f      	movs	r1, #159	; 0x9f
   dd57a:	4638      	mov	r0, r7
   dd57c:	f7ff fb30 	bl	dcbe0 <_Z9fillStripiiiii>
                photoupd=0;
   dd580:	f8c8 7000 	str.w	r7, [r8]
            }
            fillStrip(160,255,0,0,0);               //Statement erases weather condition section
   dd584:	2300      	movs	r3, #0
   dd586:	9300      	str	r3, [sp, #0]
   dd588:	461a      	mov	r2, r3
   dd58a:	21ff      	movs	r1, #255	; 0xff
   dd58c:	20a0      	movs	r0, #160	; 0xa0
   dd58e:	f7ff fb27 	bl	dcbe0 <_Z9fillStripiiiii>
            if(EEPROM.read(2) == 1)
   dd592:	f003 f90f 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dd596:	2002      	movs	r0, #2
   dd598:	f7f6 ff3a 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dd59c:	2801      	cmp	r0, #1
   dd59e:	d110      	bne.n	dd5c2 <loop+0x75a>
            {
                condition(cid,160, rclock, gclock, bclock);
   dd5a0:	6823      	ldr	r3, [r4, #0]
   dd5a2:	4f44      	ldr	r7, [pc, #272]	; (dd6b4 <loop+0x84c>)
   dd5a4:	9300      	str	r3, [sp, #0]
   dd5a6:	6833      	ldr	r3, [r6, #0]
   dd5a8:	682a      	ldr	r2, [r5, #0]
   dd5aa:	6838      	ldr	r0, [r7, #0]
   dd5ac:	21a0      	movs	r1, #160	; 0xa0
   dd5ae:	f7fc f827 	bl	d9600 <_Z9conditioniiiii>
                dimg(cid,160, rclock, gclock, bclock);
   dd5b2:	6823      	ldr	r3, [r4, #0]
   dd5b4:	9300      	str	r3, [sp, #0]
   dd5b6:	6833      	ldr	r3, [r6, #0]
   dd5b8:	682a      	ldr	r2, [r5, #0]
   dd5ba:	6838      	ldr	r0, [r7, #0]
   dd5bc:	21a0      	movs	r1, #160	; 0xa0
   dd5be:	f7fb ff97 	bl	d94f0 <_Z4dimgiiiii>
            }
            strip.show();
            strip.setPixelColor(62,0,0,0);
   dd5c2:	2400      	movs	r4, #0
            if(EEPROM.read(2) == 1)
            {
                condition(cid,160, rclock, gclock, bclock);
                dimg(cid,160, rclock, gclock, bclock);
            }
            strip.show();
   dd5c4:	483a      	ldr	r0, [pc, #232]	; (dd6b0 <loop+0x848>)
   dd5c6:	f000 fba5 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            strip.setPixelColor(62,0,0,0);
   dd5ca:	4623      	mov	r3, r4
   dd5cc:	4622      	mov	r2, r4
   dd5ce:	9400      	str	r4, [sp, #0]
   dd5d0:	213e      	movs	r1, #62	; 0x3e
   dd5d2:	4837      	ldr	r0, [pc, #220]	; (dd6b0 <loop+0x848>)
   dd5d4:	f000 fd40 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(58,0,0,0);
   dd5d8:	4623      	mov	r3, r4
   dd5da:	4622      	mov	r2, r4
   dd5dc:	9400      	str	r4, [sp, #0]
   dd5de:	213a      	movs	r1, #58	; 0x3a
   dd5e0:	4833      	ldr	r0, [pc, #204]	; (dd6b0 <loop+0x848>)
   dd5e2:	f000 fd39 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(240,0,0,0);
   dd5e6:	9400      	str	r4, [sp, #0]
   dd5e8:	4623      	mov	r3, r4
   dd5ea:	4622      	mov	r2, r4
   dd5ec:	21f0      	movs	r1, #240	; 0xf0
   dd5ee:	4830      	ldr	r0, [pc, #192]	; (dd6b0 <loop+0x848>)
   dd5f0:	f000 fd32 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   dd5f4:	482e      	ldr	r0, [pc, #184]	; (dd6b0 <loop+0x848>)
   dd5f6:	f000 fb8d 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   dd5fa:	e195      	b.n	dd928 <loop+0xac0>
    
//////////////////////////////////////
//////////////MODE 2//////////////////              Show all weather condition
//////////////////////////////////////
    
    else if(dmode == 2)                                 //Mode 2
   dd5fc:	2f02      	cmp	r7, #2
   dd5fe:	d165      	bne.n	dd6cc <loop+0x864>
    {
        
        if(cid == cprev)
   dd600:	4c2c      	ldr	r4, [pc, #176]	; (dd6b4 <loop+0x84c>)
   dd602:	f8df 80c0 	ldr.w	r8, [pc, #192]	; dd6c4 <loop+0x85c>
   dd606:	6820      	ldr	r0, [r4, #0]
   dd608:	f8d8 3000 	ldr.w	r3, [r8]
   dd60c:	f8df 90b8 	ldr.w	r9, [pc, #184]	; dd6c8 <loop+0x860>
   dd610:	4e29      	ldr	r6, [pc, #164]	; (dd6b8 <loop+0x850>)
   dd612:	4f2a      	ldr	r7, [pc, #168]	; (dd6bc <loop+0x854>)
   dd614:	4298      	cmp	r0, r3
   dd616:	d10b      	bne.n	dd630 <loop+0x7c8>
        {
            condition(cid,0, rclock, gclock, bclock);
   dd618:	683b      	ldr	r3, [r7, #0]
   dd61a:	9300      	str	r3, [sp, #0]
   dd61c:	6833      	ldr	r3, [r6, #0]
   dd61e:	f8d9 2000 	ldr.w	r2, [r9]
   dd622:	2100      	movs	r1, #0
   dd624:	f7fb ffec 	bl	d9600 <_Z9conditioniiiii>
            strip.show();
   dd628:	4821      	ldr	r0, [pc, #132]	; (dd6b0 <loop+0x848>)
   dd62a:	f000 fb73 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   dd62e:	e019      	b.n	dd664 <loop+0x7fc>
        }
        else
        {
            fillStrip(0,48,0,0,0);
   dd630:	2500      	movs	r5, #0
   dd632:	462b      	mov	r3, r5
   dd634:	462a      	mov	r2, r5
   dd636:	2130      	movs	r1, #48	; 0x30
   dd638:	4628      	mov	r0, r5
   dd63a:	9500      	str	r5, [sp, #0]
   dd63c:	f7ff fad0 	bl	dcbe0 <_Z9fillStripiiiii>
            strip.show();
   dd640:	481b      	ldr	r0, [pc, #108]	; (dd6b0 <loop+0x848>)
   dd642:	f000 fb67 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            condition(cid,0, rclock, gclock, bclock);
   dd646:	683b      	ldr	r3, [r7, #0]
   dd648:	9300      	str	r3, [sp, #0]
   dd64a:	6833      	ldr	r3, [r6, #0]
   dd64c:	f8d9 2000 	ldr.w	r2, [r9]
   dd650:	6820      	ldr	r0, [r4, #0]
   dd652:	4629      	mov	r1, r5
   dd654:	f7fb ffd4 	bl	d9600 <_Z9conditioniiiii>
            strip.show();
   dd658:	4815      	ldr	r0, [pc, #84]	; (dd6b0 <loop+0x848>)
   dd65a:	f000 fb5b 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            cprev = cid;
   dd65e:	6823      	ldr	r3, [r4, #0]
   dd660:	f8c8 3000 	str.w	r3, [r8]
        }
        canim(cid,0,false);
   dd664:	2200      	movs	r2, #0
   dd666:	4611      	mov	r1, r2
   dd668:	6820      	ldr	r0, [r4, #0]
   dd66a:	f7fd f915 	bl	da898 <_Z5canimiib>
        canim(cid,0,false);
   dd66e:	2200      	movs	r2, #0
   dd670:	4611      	mov	r1, r2
   dd672:	6820      	ldr	r0, [r4, #0]
   dd674:	f7fd f910 	bl	da898 <_Z5canimiib>
        canim(cid,0,false);
   dd678:	2200      	movs	r2, #0
   dd67a:	4611      	mov	r1, r2
   dd67c:	6820      	ldr	r0, [r4, #0]
   dd67e:	f7fd f90b 	bl	da898 <_Z5canimiib>
        displayHumidity(175,0,gclock,bclock);
   dd682:	683b      	ldr	r3, [r7, #0]
   dd684:	6832      	ldr	r2, [r6, #0]
   dd686:	2100      	movs	r1, #0
   dd688:	20af      	movs	r0, #175	; 0xaf
   dd68a:	f7ff f97d 	bl	dc988 <_Z15displayHumidityiiii>
        displayTemp(79,0,gclock,0);
   dd68e:	2300      	movs	r3, #0
   dd690:	6832      	ldr	r2, [r6, #0]
   dd692:	4619      	mov	r1, r3
   dd694:	204f      	movs	r0, #79	; 0x4f
   dd696:	f7ff f933 	bl	dc900 <_Z11displayTempiiii>
        strip.show();
   dd69a:	4805      	ldr	r0, [pc, #20]	; (dd6b0 <loop+0x848>)
   dd69c:	f000 fb3a 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        scan = 1;
   dd6a0:	9a03      	ldr	r2, [sp, #12]
   dd6a2:	2301      	movs	r3, #1
        delay(10);
   dd6a4:	200a      	movs	r0, #10
        canim(cid,0,false);
        canim(cid,0,false);
        displayHumidity(175,0,gclock,bclock);
        displayTemp(79,0,gclock,0);
        strip.show();
        scan = 1;
   dd6a6:	6013      	str	r3, [r2, #0]
        delay(10);
   dd6a8:	f001 fdba 	bl	df220 <delay>
   dd6ac:	e13c      	b.n	dd928 <loop+0xac0>
   dd6ae:	bf00      	nop
   dd6b0:	2003e328 	.word	0x2003e328
   dd6b4:	2003e2e8 	.word	0x2003e2e8
   dd6b8:	2003e314 	.word	0x2003e314
   dd6bc:	2003e35c 	.word	0x2003e35c
   dd6c0:	2003e348 	.word	0x2003e348
   dd6c4:	2003e2e4 	.word	0x2003e2e4
   dd6c8:	2003e350 	.word	0x2003e350
        
//////////////////////////////////////
//////////////MODE 3//////////////////              Scrolling Clock
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
   dd6cc:	2f03      	cmp	r7, #3
   dd6ce:	f040 812b 	bne.w	dd928 <loop+0xac0>
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dd6d2:	4cb2      	ldr	r4, [pc, #712]	; (dd99c <loop+0xb34>)
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            displayClock((i*16), true, rclock, gclock, bclock);
   dd6d4:	4eb2      	ldr	r6, [pc, #712]	; (dd9a0 <loop+0xb38>)
   dd6d6:	f8df 8300 	ldr.w	r8, [pc, #768]	; dd9d8 <loop+0xb70>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dd6da:	2300      	movs	r3, #0
   dd6dc:	6023      	str	r3, [r4, #0]
   dd6de:	6820      	ldr	r0, [r4, #0]
   dd6e0:	2821      	cmp	r0, #33	; 0x21
   dd6e2:	f300 8121 	bgt.w	dd928 <loop+0xac0>
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            displayClock((i*16), true, rclock, gclock, bclock);
   dd6e6:	4faf      	ldr	r7, [pc, #700]	; (dd9a4 <loop+0xb3c>)
            
            num(TC1,160+(i*16),0,gclock/1,0);
            num(TC2,207+(i*16),0,gclock/1,0);
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   dd6e8:	f8df b2f0 	ldr.w	fp, [pc, #752]	; dd9dc <loop+0xb74>
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            displayClock((i*16), true, rclock, gclock, bclock);
   dd6ec:	683b      	ldr	r3, [r7, #0]
   dd6ee:	9300      	str	r3, [sp, #0]
   dd6f0:	6833      	ldr	r3, [r6, #0]
   dd6f2:	f8d8 2000 	ldr.w	r2, [r8]
   dd6f6:	2101      	movs	r1, #1
   dd6f8:	0100      	lsls	r0, r0, #4
   dd6fa:	f7fe ff73 	bl	dc5e4 <_Z12displayClockibiii>
            
            /*strip.setPixelColor(58+(i*16),rclock,gclock,bclock);
            strip.setPixelColor(62+(i*16),rclock,gclock,bclock);*/
            
            num(TC1,160+(i*16),0,gclock/1,0);
   dd6fe:	6821      	ldr	r1, [r4, #0]
   dd700:	48a9      	ldr	r0, [pc, #676]	; (dd9a8 <loop+0xb40>)
   dd702:	2500      	movs	r5, #0
   dd704:	9500      	str	r5, [sp, #0]
   dd706:	310a      	adds	r1, #10
   dd708:	6833      	ldr	r3, [r6, #0]
   dd70a:	6800      	ldr	r0, [r0, #0]
   dd70c:	462a      	mov	r2, r5
   dd70e:	0109      	lsls	r1, r1, #4
   dd710:	f7f6 ff48 	bl	d45a4 <_Z3numiiiii>
            num(TC2,207+(i*16),0,gclock/1,0);
   dd714:	6821      	ldr	r1, [r4, #0]
   dd716:	48a5      	ldr	r0, [pc, #660]	; (dd9ac <loop+0xb44>)
   dd718:	9500      	str	r5, [sp, #0]
   dd71a:	0109      	lsls	r1, r1, #4
   dd71c:	6833      	ldr	r3, [r6, #0]
   dd71e:	6800      	ldr	r0, [r0, #0]
   dd720:	462a      	mov	r2, r5
   dd722:	31cf      	adds	r1, #207	; 0xcf
   dd724:	f7f6 ff3e 	bl	d45a4 <_Z3numiiiii>
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
   dd728:	6821      	ldr	r1, [r4, #0]
   dd72a:	7833      	ldrb	r3, [r6, #0]
   dd72c:	48a0      	ldr	r0, [pc, #640]	; (dd9b0 <loop+0xb48>)
   dd72e:	9500      	str	r5, [sp, #0]
   dd730:	310f      	adds	r1, #15
   dd732:	0109      	lsls	r1, r1, #4
   dd734:	b289      	uxth	r1, r1
   dd736:	462a      	mov	r2, r5
   dd738:	f000 fc8e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   dd73c:	6821      	ldr	r1, [r4, #0]
   dd73e:	683b      	ldr	r3, [r7, #0]
   dd740:	f8d8 2000 	ldr.w	r2, [r8]
   dd744:	f8db 0000 	ldr.w	r0, [fp]
   dd748:	9300      	str	r3, [sp, #0]
   dd74a:	3110      	adds	r1, #16
   dd74c:	f04f 0902 	mov.w	r9, #2
   dd750:	f04f 0a0a 	mov.w	sl, #10
   dd754:	462b      	mov	r3, r5
   dd756:	fb92 f2f9 	sdiv	r2, r2, r9
   dd75a:	0109      	lsls	r1, r1, #4
   dd75c:	fb90 f0fa 	sdiv	r0, r0, sl
   dd760:	f7f6 ff20 	bl	d45a4 <_Z3numiiiii>
            num(itemp%10,303+(i*16),rclock/2,0,bclock);
   dd764:	6821      	ldr	r1, [r4, #0]
   dd766:	f8db 0000 	ldr.w	r0, [fp]
   dd76a:	683b      	ldr	r3, [r7, #0]
   dd76c:	fb90 fefa 	sdiv	lr, r0, sl
   dd770:	0109      	lsls	r1, r1, #4
   dd772:	fb0a 001e 	mls	r0, sl, lr, r0
   dd776:	f8d8 2000 	ldr.w	r2, [r8]
   dd77a:	9300      	str	r3, [sp, #0]
   dd77c:	fb92 f2f9 	sdiv	r2, r2, r9
   dd780:	462b      	mov	r3, r5
   dd782:	f201 112f 	addw	r1, r1, #303	; 0x12f
   dd786:	f7f6 ff0d 	bl	d45a4 <_Z3numiiiii>
            strip.setPixelColor(336+(i*16),rclock/2,0,bclock);
   dd78a:	6821      	ldr	r1, [r4, #0]
   dd78c:	783b      	ldrb	r3, [r7, #0]
   dd78e:	f8d8 2000 	ldr.w	r2, [r8]
   dd792:	4887      	ldr	r0, [pc, #540]	; (dd9b0 <loop+0xb48>)
   dd794:	9300      	str	r3, [sp, #0]
   dd796:	3115      	adds	r1, #21
   dd798:	0109      	lsls	r1, r1, #4
   dd79a:	b289      	uxth	r1, r1
   dd79c:	462b      	mov	r3, r5
   dd79e:	fb92 f2f9 	sdiv	r2, r2, r9
   dd7a2:	b2d2      	uxtb	r2, r2
   dd7a4:	f000 fc58 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+(i*16),0,gclock,bclock);
   dd7a8:	6821      	ldr	r1, [r4, #0]
   dd7aa:	683b      	ldr	r3, [r7, #0]
   dd7ac:	4881      	ldr	r0, [pc, #516]	; (dd9b4 <loop+0xb4c>)
   dd7ae:	9300      	str	r3, [sp, #0]
   dd7b0:	3116      	adds	r1, #22
   dd7b2:	6833      	ldr	r3, [r6, #0]
   dd7b4:	6800      	ldr	r0, [r0, #0]
   dd7b6:	462a      	mov	r2, r5
   dd7b8:	0109      	lsls	r1, r1, #4
   dd7ba:	f7f6 fef3 	bl	d45a4 <_Z3numiiiii>
            num(HC2,399+(i*16),0,gclock,bclock);
   dd7be:	6821      	ldr	r1, [r4, #0]
   dd7c0:	683b      	ldr	r3, [r7, #0]
   dd7c2:	487d      	ldr	r0, [pc, #500]	; (dd9b8 <loop+0xb50>)
   dd7c4:	9300      	str	r3, [sp, #0]
   dd7c6:	0109      	lsls	r1, r1, #4
   dd7c8:	6833      	ldr	r3, [r6, #0]
   dd7ca:	6800      	ldr	r0, [r0, #0]
   dd7cc:	462a      	mov	r2, r5
   dd7ce:	f201 118f 	addw	r1, r1, #399	; 0x18f
   dd7d2:	f7f6 fee7 	bl	d45a4 <_Z3numiiiii>
            
            condition(cid,448+(i*16), rclock, gclock, bclock);
   dd7d6:	6821      	ldr	r1, [r4, #0]
   dd7d8:	683b      	ldr	r3, [r7, #0]
   dd7da:	4878      	ldr	r0, [pc, #480]	; (dd9bc <loop+0xb54>)
   dd7dc:	9300      	str	r3, [sp, #0]
   dd7de:	311c      	adds	r1, #28
   dd7e0:	6833      	ldr	r3, [r6, #0]
   dd7e2:	f8d8 2000 	ldr.w	r2, [r8]
   dd7e6:	6800      	ldr	r0, [r0, #0]
   dd7e8:	0109      	lsls	r1, r1, #4
   dd7ea:	f7fb ff09 	bl	d9600 <_Z9conditioniiiii>
            dimg(cid,448+(i*16), rclock, gclock, bclock);
   dd7ee:	6821      	ldr	r1, [r4, #0]
   dd7f0:	683b      	ldr	r3, [r7, #0]
   dd7f2:	4872      	ldr	r0, [pc, #456]	; (dd9bc <loop+0xb54>)
   dd7f4:	9300      	str	r3, [sp, #0]
   dd7f6:	311c      	adds	r1, #28
   dd7f8:	6833      	ldr	r3, [r6, #0]
   dd7fa:	f8d8 2000 	ldr.w	r2, [r8]
   dd7fe:	6800      	ldr	r0, [r0, #0]
   dd800:	0109      	lsls	r1, r1, #4
   dd802:	f7fb fe75 	bl	d94f0 <_Z4dimgiiiii>
            
            
            /*strip.setPixelColor(58+((i-numRows)*16),rclock,gclock,bclock);
            strip.setPixelColor(62+((i-numRows)*16),rclock,gclock,bclock);*/
            
            num(TC1,160+((i-numRows)*16),0,gclock/1,0);
   dd806:	6821      	ldr	r1, [r4, #0]
   dd808:	4867      	ldr	r0, [pc, #412]	; (dd9a8 <loop+0xb40>)
   dd80a:	9500      	str	r5, [sp, #0]
   dd80c:	3918      	subs	r1, #24
   dd80e:	6833      	ldr	r3, [r6, #0]
   dd810:	6800      	ldr	r0, [r0, #0]
   dd812:	462a      	mov	r2, r5
   dd814:	0109      	lsls	r1, r1, #4
   dd816:	f7f6 fec5 	bl	d45a4 <_Z3numiiiii>
            num(TC2,207+((i-numRows)*16),0,gclock/1,0);
   dd81a:	6821      	ldr	r1, [r4, #0]
   dd81c:	9500      	str	r5, [sp, #0]
   dd81e:	f46f 70a8 	mvn.w	r0, #336	; 0x150
   dd822:	0109      	lsls	r1, r1, #4
   dd824:	4401      	add	r1, r0
   dd826:	4861      	ldr	r0, [pc, #388]	; (dd9ac <loop+0xb44>)
   dd828:	6833      	ldr	r3, [r6, #0]
   dd82a:	6800      	ldr	r0, [r0, #0]
   dd82c:	462a      	mov	r2, r5
   dd82e:	f7f6 feb9 	bl	d45a4 <_Z3numiiiii>
            strip.setPixelColor(240+((i-numRows)*16),0,gclock/1,0);
   dd832:	6821      	ldr	r1, [r4, #0]
   dd834:	7833      	ldrb	r3, [r6, #0]
   dd836:	485e      	ldr	r0, [pc, #376]	; (dd9b0 <loop+0xb48>)
   dd838:	9500      	str	r5, [sp, #0]
   dd83a:	3913      	subs	r1, #19
   dd83c:	0109      	lsls	r1, r1, #4
   dd83e:	b289      	uxth	r1, r1
   dd840:	462a      	mov	r2, r5
   dd842:	f000 fc09 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+((i-numRows)*16),rclock/2,0,bclock);
   dd846:	6821      	ldr	r1, [r4, #0]
   dd848:	683b      	ldr	r3, [r7, #0]
   dd84a:	f8d8 2000 	ldr.w	r2, [r8]
   dd84e:	f8db 0000 	ldr.w	r0, [fp]
   dd852:	fb92 f2f9 	sdiv	r2, r2, r9
   dd856:	3912      	subs	r1, #18
   dd858:	9300      	str	r3, [sp, #0]
   dd85a:	0109      	lsls	r1, r1, #4
   dd85c:	462b      	mov	r3, r5
   dd85e:	fb90 f0fa 	sdiv	r0, r0, sl
   dd862:	f7f6 fe9f 	bl	d45a4 <_Z3numiiiii>
            num(itemp%10,303+((i-numRows)*16),rclock/2,0,bclock);
   dd866:	6821      	ldr	r1, [r4, #0]
   dd868:	f8db 0000 	ldr.w	r0, [fp]
   dd86c:	683b      	ldr	r3, [r7, #0]
   dd86e:	fb90 fefa 	sdiv	lr, r0, sl
   dd872:	0109      	lsls	r1, r1, #4
   dd874:	fb0a 001e 	mls	r0, sl, lr, r0
   dd878:	f8d8 2000 	ldr.w	r2, [r8]
   dd87c:	9300      	str	r3, [sp, #0]
   dd87e:	fb92 f2f9 	sdiv	r2, r2, r9
   dd882:	462b      	mov	r3, r5
   dd884:	39f1      	subs	r1, #241	; 0xf1
   dd886:	f7f6 fe8d 	bl	d45a4 <_Z3numiiiii>
            strip.setPixelColor(336+((i-numRows)*16),rclock/2,0,bclock);
   dd88a:	6821      	ldr	r1, [r4, #0]
   dd88c:	783b      	ldrb	r3, [r7, #0]
   dd88e:	f8d8 2000 	ldr.w	r2, [r8]
   dd892:	4847      	ldr	r0, [pc, #284]	; (dd9b0 <loop+0xb48>)
   dd894:	9300      	str	r3, [sp, #0]
   dd896:	390d      	subs	r1, #13
   dd898:	0109      	lsls	r1, r1, #4
   dd89a:	b289      	uxth	r1, r1
   dd89c:	462b      	mov	r3, r5
   dd89e:	fb92 f2f9 	sdiv	r2, r2, r9
   dd8a2:	b2d2      	uxtb	r2, r2
   dd8a4:	f000 fbd8 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+((i-numRows)*16),0,gclock,bclock);
   dd8a8:	6821      	ldr	r1, [r4, #0]
   dd8aa:	683b      	ldr	r3, [r7, #0]
   dd8ac:	4841      	ldr	r0, [pc, #260]	; (dd9b4 <loop+0xb4c>)
   dd8ae:	9300      	str	r3, [sp, #0]
   dd8b0:	390c      	subs	r1, #12
   dd8b2:	6833      	ldr	r3, [r6, #0]
   dd8b4:	6800      	ldr	r0, [r0, #0]
   dd8b6:	462a      	mov	r2, r5
   dd8b8:	0109      	lsls	r1, r1, #4
   dd8ba:	f7f6 fe73 	bl	d45a4 <_Z3numiiiii>
            num(HC2,399+((i-numRows)*16),0,gclock,bclock);
   dd8be:	6821      	ldr	r1, [r4, #0]
   dd8c0:	683b      	ldr	r3, [r7, #0]
   dd8c2:	483d      	ldr	r0, [pc, #244]	; (dd9b8 <loop+0xb50>)
   dd8c4:	9300      	str	r3, [sp, #0]
   dd8c6:	0109      	lsls	r1, r1, #4
   dd8c8:	6833      	ldr	r3, [r6, #0]
   dd8ca:	6800      	ldr	r0, [r0, #0]
   dd8cc:	462a      	mov	r2, r5
   dd8ce:	3991      	subs	r1, #145	; 0x91
   dd8d0:	f7f6 fe68 	bl	d45a4 <_Z3numiiiii>
            
            condition(cid,448+((i-numRows)*16), rclock, gclock, bclock);
   dd8d4:	6821      	ldr	r1, [r4, #0]
   dd8d6:	683b      	ldr	r3, [r7, #0]
   dd8d8:	4838      	ldr	r0, [pc, #224]	; (dd9bc <loop+0xb54>)
   dd8da:	9300      	str	r3, [sp, #0]
   dd8dc:	3906      	subs	r1, #6
   dd8de:	6833      	ldr	r3, [r6, #0]
   dd8e0:	f8d8 2000 	ldr.w	r2, [r8]
   dd8e4:	6800      	ldr	r0, [r0, #0]
   dd8e6:	0109      	lsls	r1, r1, #4
   dd8e8:	f7fb fe8a 	bl	d9600 <_Z9conditioniiiii>
            dimg(cid,448+((i-numRows)*16), rclock, gclock, bclock);
   dd8ec:	6821      	ldr	r1, [r4, #0]
   dd8ee:	683b      	ldr	r3, [r7, #0]
   dd8f0:	4832      	ldr	r0, [pc, #200]	; (dd9bc <loop+0xb54>)
   dd8f2:	9300      	str	r3, [sp, #0]
   dd8f4:	3906      	subs	r1, #6
   dd8f6:	6833      	ldr	r3, [r6, #0]
   dd8f8:	f8d8 2000 	ldr.w	r2, [r8]
   dd8fc:	6800      	ldr	r0, [r0, #0]
   dd8fe:	0109      	lsls	r1, r1, #4
   dd900:	f7fb fdf6 	bl	d94f0 <_Z4dimgiiiii>
            strip.show();
   dd904:	482a      	ldr	r0, [pc, #168]	; (dd9b0 <loop+0xb48>)
   dd906:	f000 fa05 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            //Delay - speed of scroll
            if(digitalRead(D0) == HIGH){
   dd90a:	4628      	mov	r0, r5
   dd90c:	f002 ff28 	bl	e0760 <digitalRead>
   dd910:	2801      	cmp	r0, #1
   dd912:	d009      	beq.n	dd928 <loop+0xac0>
                break;
            }
            delay(200);
   dd914:	20c8      	movs	r0, #200	; 0xc8
   dd916:	f001 fc83 	bl	df220 <delay>
            
            //Erase for next shift
            strip.clear();
   dd91a:	4825      	ldr	r0, [pc, #148]	; (dd9b0 <loop+0xb48>)
   dd91c:	f000 fbcb 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dd920:	6823      	ldr	r3, [r4, #0]
   dd922:	3301      	adds	r3, #1
   dd924:	6023      	str	r3, [r4, #0]
   dd926:	e6da      	b.n	dd6de <loop+0x876>
//////////////////////////////////////
///////GET WEATHER DATA///////////////
//////////////////////////////////////
    
    
    if(tmr >= 60) {
   dd928:	4a25      	ldr	r2, [pc, #148]	; (dd9c0 <loop+0xb58>)
   dd92a:	6813      	ldr	r3, [r2, #0]
   dd92c:	2b3b      	cmp	r3, #59	; 0x3b
   dd92e:	4616      	mov	r6, r2
   dd930:	dd56      	ble.n	dd9e0 <loop+0xb78>
   dd932:	4c24      	ldr	r4, [pc, #144]	; (dd9c4 <loop+0xb5c>)
        Particle.publish("Weather", "1", PRIVATE);
   dd934:	4a24      	ldr	r2, [pc, #144]	; (dd9c8 <loop+0xb60>)
   dd936:	7823      	ldrb	r3, [r4, #0]
   dd938:	4924      	ldr	r1, [pc, #144]	; (dd9cc <loop+0xb64>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd93a:	2500      	movs	r5, #0
   dd93c:	a804      	add	r0, sp, #16
   dd93e:	f88d 5000 	strb.w	r5, [sp]
   dd942:	f7f6 fe21 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dd946:	a805      	add	r0, sp, #20
   dd948:	f7ff f96a 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   dd94c:	f002 ff32 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dd950:	2003      	movs	r0, #3
   dd952:	f7f6 fd5d 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dd956:	2801      	cmp	r0, #1
   dd958:	d10a      	bne.n	dd970 <loop+0xb08>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd95a:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   dd95c:	4a1a      	ldr	r2, [pc, #104]	; (dd9c8 <loop+0xb60>)
   dd95e:	f88d 5000 	strb.w	r5, [sp]
   dd962:	a804      	add	r0, sp, #16
   dd964:	491a      	ldr	r1, [pc, #104]	; (dd9d0 <loop+0xb68>)
   dd966:	f7f6 fe0f 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dd96a:	a805      	add	r0, sp, #20
   dd96c:	f7ff f958 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   dd970:	f002 ff20 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dd974:	2004      	movs	r0, #4
   dd976:	f7f6 fd4b 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dd97a:	2801      	cmp	r0, #1
   dd97c:	d10b      	bne.n	dd996 <loop+0xb2e>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd97e:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd980:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   dd982:	4914      	ldr	r1, [pc, #80]	; (dd9d4 <loop+0xb6c>)
   dd984:	f88d 2000 	strb.w	r2, [sp]
   dd988:	a804      	add	r0, sp, #16
   dd98a:	4a0f      	ldr	r2, [pc, #60]	; (dd9c8 <loop+0xb60>)
   dd98c:	f7f6 fdfc 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dd990:	a805      	add	r0, sp, #20
   dd992:	f7ff f945 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        tmr = 0;
   dd996:	2300      	movs	r3, #0
   dd998:	6033      	str	r3, [r6, #0]
   dd99a:	e0e0      	b.n	ddb5e <loop+0xcf6>
   dd99c:	2003e33c 	.word	0x2003e33c
   dd9a0:	2003e314 	.word	0x2003e314
   dd9a4:	2003e35c 	.word	0x2003e35c
   dd9a8:	2003e2f4 	.word	0x2003e2f4
   dd9ac:	2003e34c 	.word	0x2003e34c
   dd9b0:	2003e328 	.word	0x2003e328
   dd9b4:	2003e2ec 	.word	0x2003e2ec
   dd9b8:	2003e340 	.word	0x2003e340
   dd9bc:	2003e2e8 	.word	0x2003e2e8
   dd9c0:	2003e364 	.word	0x2003e364
   dd9c4:	2003e324 	.word	0x2003e324
   dd9c8:	000e3e0b 	.word	0x000e3e0b
   dd9cc:	000e3ad3 	.word	0x000e3ad3
   dd9d0:	000e3ae9 	.word	0x000e3ae9
   dd9d4:	000e3afe 	.word	0x000e3afe
   dd9d8:	2003e350 	.word	0x2003e350
   dd9dc:	2003e344 	.word	0x2003e344
    }
    else if(tmr == 30){
   dd9e0:	2b1e      	cmp	r3, #30
   dd9e2:	d135      	bne.n	dda50 <loop+0xbe8>
   dd9e4:	4c5f      	ldr	r4, [pc, #380]	; (ddb64 <loop+0xcfc>)
        tmr = tmr+1;
        Particle.publish("Weather", "1", PRIVATE);
   dd9e6:	4960      	ldr	r1, [pc, #384]	; (ddb68 <loop+0xd00>)
            Particle.publish("itempdat", "1", PRIVATE);
        }
        tmr = 0;
    }
    else if(tmr == 30){
        tmr = tmr+1;
   dd9e8:	231f      	movs	r3, #31
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd9ea:	2500      	movs	r5, #0
   dd9ec:	6013      	str	r3, [r2, #0]
        Particle.publish("Weather", "1", PRIVATE);
   dd9ee:	a804      	add	r0, sp, #16
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd9f0:	7823      	ldrb	r3, [r4, #0]
   dd9f2:	4a5e      	ldr	r2, [pc, #376]	; (ddb6c <loop+0xd04>)
   dd9f4:	f88d 5000 	strb.w	r5, [sp]
   dd9f8:	f7f6 fdc6 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dd9fc:	a805      	add	r0, sp, #20
   dd9fe:	f7ff f90f 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   dda02:	f002 fed7 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dda06:	2003      	movs	r0, #3
   dda08:	f7f6 fd02 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dda0c:	2801      	cmp	r0, #1
   dda0e:	d10a      	bne.n	dda26 <loop+0xbbe>
   dda10:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   dda12:	4a56      	ldr	r2, [pc, #344]	; (ddb6c <loop+0xd04>)
   dda14:	f88d 5000 	strb.w	r5, [sp]
   dda18:	a804      	add	r0, sp, #16
   dda1a:	4955      	ldr	r1, [pc, #340]	; (ddb70 <loop+0xd08>)
   dda1c:	f7f6 fdb4 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dda20:	a805      	add	r0, sp, #20
   dda22:	f7ff f8fd 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   dda26:	f002 fec5 	bl	e07b4 <_Z21__fetch_global_EEPROMv>
   dda2a:	2004      	movs	r0, #4
   dda2c:	f7f6 fcf0 	bl	d4410 <_ZN11EEPROMClass4readEi.isra.10>
   dda30:	2801      	cmp	r0, #1
   dda32:	f040 8094 	bne.w	ddb5e <loop+0xcf6>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dda36:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dda38:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   dda3a:	494e      	ldr	r1, [pc, #312]	; (ddb74 <loop+0xd0c>)
   dda3c:	f88d 2000 	strb.w	r2, [sp]
   dda40:	a804      	add	r0, sp, #16
   dda42:	4a4a      	ldr	r2, [pc, #296]	; (ddb6c <loop+0xd04>)
   dda44:	f7f6 fda0 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   dda48:	a805      	add	r0, sp, #20
   dda4a:	f7ff f8e9 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dda4e:	e086      	b.n	ddb5e <loop+0xcf6>
        }
    }
    else{
        tmr = tmr+1;
   dda50:	3301      	adds	r3, #1
   dda52:	6013      	str	r3, [r2, #0]
    }

}
   dda54:	e083      	b.n	ddb5e <loop+0xcf6>
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
   dda56:	f7fe f8e1 	bl	dbc1c <_Z8settingsv>
   dda5a:	f7ff ba89 	b.w	dcf70 <loop+0x108>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
        strip.show();
        delay(5000);
        strip.clear();
    }
    else if(digitalRead(D2) == LOW && digitalRead(D1) == LOW && digitalRead(D0) == HIGH){            //Bottom Button Press
   dda5e:	2002      	movs	r0, #2
   dda60:	f002 fe7e 	bl	e0760 <digitalRead>
   dda64:	2800      	cmp	r0, #0
   dda66:	f47f ab15 	bne.w	dd094 <loop+0x22c>
   dda6a:	2001      	movs	r0, #1
   dda6c:	f002 fe78 	bl	e0760 <digitalRead>
   dda70:	2800      	cmp	r0, #0
   dda72:	f47f ab0f 	bne.w	dd094 <loop+0x22c>
   dda76:	f002 fe73 	bl	e0760 <digitalRead>
   dda7a:	2801      	cmp	r0, #1
   dda7c:	4604      	mov	r4, r0
   dda7e:	f47f ab09 	bne.w	dd094 <loop+0x22c>
        strip.clear();
   dda82:	483d      	ldr	r0, [pc, #244]	; (ddb78 <loop+0xd10>)
   dda84:	f000 fb17 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
        if(dmode == 1){
   dda88:	682a      	ldr	r2, [r5, #0]
   dda8a:	4b3c      	ldr	r3, [pc, #240]	; (ddb7c <loop+0xd14>)
   dda8c:	2a01      	cmp	r2, #1
   dda8e:	d102      	bne.n	dda96 <loop+0xc2e>
            dmode = 3;
   dda90:	2203      	movs	r2, #3
   dda92:	601a      	str	r2, [r3, #0]
   dda94:	e003      	b.n	dda9e <loop+0xc36>
        }
        else{
            scan = 2;
   dda96:	9903      	ldr	r1, [sp, #12]
            dmode = 1;
   dda98:	601c      	str	r4, [r3, #0]
        strip.clear();
        if(dmode == 1){
            dmode = 3;
        }
        else{
            scan = 2;
   dda9a:	2202      	movs	r2, #2
   dda9c:	600a      	str	r2, [r1, #0]
            dmode = 1;
        }
        strip.show();
   dda9e:	4836      	ldr	r0, [pc, #216]	; (ddb78 <loop+0xd10>)
   ddaa0:	f000 f938 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
        while(digitalRead(D0) == HIGH){
   ddaa4:	2000      	movs	r0, #0
   ddaa6:	f002 fe5b 	bl	e0760 <digitalRead>
   ddaaa:	2801      	cmp	r0, #1
   ddaac:	f47f aaf2 	bne.w	dd094 <loop+0x22c>
            delay(10);
   ddab0:	200a      	movs	r0, #10
   ddab2:	f001 fbb5 	bl	df220 <delay>
        else{
            scan = 2;
            dmode = 1;
        }
        strip.show();
        while(digitalRead(D0) == HIGH){
   ddab6:	e7f5      	b.n	ddaa4 <loop+0xc3c>
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
   ddab8:	682b      	ldr	r3, [r5, #0]
   ddaba:	4831      	ldr	r0, [pc, #196]	; (ddb80 <loop+0xd18>)
   ddabc:	4c31      	ldr	r4, [pc, #196]	; (ddb84 <loop+0xd1c>)
   ddabe:	2b01      	cmp	r3, #1
   ddac0:	d121      	bne.n	ddb06 <loop+0xc9e>
            dmode = 2;
   ddac2:	492e      	ldr	r1, [pc, #184]	; (ddb7c <loop+0xd14>)
   ddac4:	2602      	movs	r6, #2
   ddac6:	600e      	str	r6, [r1, #0]
            photoupd = 1;
   ddac8:	492f      	ldr	r1, [pc, #188]	; (ddb88 <loop+0xd20>)
   ddaca:	600b      	str	r3, [r1, #0]
            strip.setPixelColor(7,0,gclock,bclock/2);
   ddacc:	6821      	ldr	r1, [r4, #0]
   ddace:	fb91 f1f6 	sdiv	r1, r1, r6
   ddad2:	b2c9      	uxtb	r1, r1
   ddad4:	7803      	ldrb	r3, [r0, #0]
   ddad6:	9100      	str	r1, [sp, #0]
   ddad8:	4827      	ldr	r0, [pc, #156]	; (ddb78 <loop+0xd10>)
   ddada:	2107      	movs	r1, #7
   ddadc:	f000 fabc 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   ddae0:	4825      	ldr	r0, [pc, #148]	; (ddb78 <loop+0xd10>)
   ddae2:	f000 f917 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   ddae6:	2001      	movs	r0, #1
   ddae8:	f002 fe3a 	bl	e0760 <digitalRead>
   ddaec:	2801      	cmp	r0, #1
   ddaee:	d103      	bne.n	ddaf8 <loop+0xc90>
                delay(5);
   ddaf0:	2005      	movs	r0, #5
   ddaf2:	f001 fb95 	bl	df220 <delay>
        if(dmode == 1){
            dmode = 2;
            photoupd = 1;
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   ddaf6:	e7f6      	b.n	ddae6 <loop+0xc7e>
                delay(5);
            }
            strip.clear();
   ddaf8:	481f      	ldr	r0, [pc, #124]	; (ddb78 <loop+0xd10>)
   ddafa:	f000 fadc 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   ddafe:	481e      	ldr	r0, [pc, #120]	; (ddb78 <loop+0xd10>)
   ddb00:	f000 f908 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
   ddb04:	e021      	b.n	ddb4a <loop+0xce2>
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
   ddb06:	7803      	ldrb	r3, [r0, #0]
   ddb08:	6821      	ldr	r1, [r4, #0]
   ddb0a:	2002      	movs	r0, #2
   ddb0c:	fb91 f1f0 	sdiv	r1, r1, r0
   ddb10:	b2c9      	uxtb	r1, r1
   ddb12:	9100      	str	r1, [sp, #0]
   ddb14:	4818      	ldr	r0, [pc, #96]	; (ddb78 <loop+0xd10>)
   ddb16:	2107      	movs	r1, #7
   ddb18:	f000 fa9e 	bl	de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   ddb1c:	4816      	ldr	r0, [pc, #88]	; (ddb78 <loop+0xd10>)
   ddb1e:	f000 f8f9 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   ddb22:	2001      	movs	r0, #1
   ddb24:	f002 fe1c 	bl	e0760 <digitalRead>
   ddb28:	2801      	cmp	r0, #1
   ddb2a:	d103      	bne.n	ddb34 <loop+0xccc>
                delay(5);
   ddb2c:	2005      	movs	r0, #5
   ddb2e:	f001 fb77 	bl	df220 <delay>
            strip.show();
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   ddb32:	e7f6      	b.n	ddb22 <loop+0xcba>
                delay(5);
            }
            strip.clear();
   ddb34:	4810      	ldr	r0, [pc, #64]	; (ddb78 <loop+0xd10>)
   ddb36:	f000 fabe 	bl	de0b6 <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   ddb3a:	480f      	ldr	r0, [pc, #60]	; (ddb78 <loop+0xd10>)
   ddb3c:	f000 f8ea 	bl	ddd14 <_ZN17Adafruit_NeoPixel4showEv>
            scan = 2;
   ddb40:	9a03      	ldr	r2, [sp, #12]
   ddb42:	2302      	movs	r3, #2
   ddb44:	6013      	str	r3, [r2, #0]
            dmode = 1;
   ddb46:	2301      	movs	r3, #1
   ddb48:	602b      	str	r3, [r5, #0]
        }
        while(digitalRead(D1) == HIGH){
   ddb4a:	2001      	movs	r0, #1
   ddb4c:	f002 fe08 	bl	e0760 <digitalRead>
   ddb50:	2801      	cmp	r0, #1
   ddb52:	f47f aab0 	bne.w	dd0b6 <loop+0x24e>
            delay(10);
   ddb56:	200a      	movs	r0, #10
   ddb58:	f001 fb62 	bl	df220 <delay>
            strip.clear();
            strip.show();
            scan = 2;
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
   ddb5c:	e7f5      	b.n	ddb4a <loop+0xce2>
    }
    else{
        tmr = tmr+1;
    }

}
   ddb5e:	b007      	add	sp, #28
   ddb60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ddb64:	2003e324 	.word	0x2003e324
   ddb68:	000e3ad3 	.word	0x000e3ad3
   ddb6c:	000e3e0b 	.word	0x000e3e0b
   ddb70:	000e3ae9 	.word	0x000e3ae9
   ddb74:	000e3afe 	.word	0x000e3afe
   ddb78:	2003e328 	.word	0x2003e328
   ddb7c:	2003e320 	.word	0x2003e320
   ddb80:	2003e314 	.word	0x2003e314
   ddb84:	2003e35c 	.word	0x2003e35c
   ddb88:	2003e348 	.word	0x2003e348

000ddb8c <_Z7mshHdlrPKcS0_>:
        {
            dmode = 2;
        }
    }
}
void mshHdlr(const char *event, const char *data) {
   ddb8c:	b530      	push	{r4, r5, lr}
   ddb8e:	4d0d      	ldr	r5, [pc, #52]	; (ddbc4 <_Z7mshHdlrPKcS0_+0x38>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   ddb90:	4a0d      	ldr	r2, [pc, #52]	; (ddbc8 <_Z7mshHdlrPKcS0_+0x3c>)
   ddb92:	782b      	ldrb	r3, [r5, #0]
   ddb94:	490d      	ldr	r1, [pc, #52]	; (ddbcc <_Z7mshHdlrPKcS0_+0x40>)
   ddb96:	b085      	sub	sp, #20
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   ddb98:	2400      	movs	r4, #0
   ddb9a:	a802      	add	r0, sp, #8
   ddb9c:	f88d 4000 	strb.w	r4, [sp]
   ddba0:	f7f6 fcf2 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   ddba4:	a803      	add	r0, sp, #12
   ddba6:	f7ff f83b 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   ddbaa:	782b      	ldrb	r3, [r5, #0]
   ddbac:	4a08      	ldr	r2, [pc, #32]	; (ddbd0 <_Z7mshHdlrPKcS0_+0x44>)
   ddbae:	4909      	ldr	r1, [pc, #36]	; (ddbd4 <_Z7mshHdlrPKcS0_+0x48>)
   ddbb0:	f88d 4000 	strb.w	r4, [sp]
   ddbb4:	a802      	add	r0, sp, #8
   ddbb6:	f7f6 fce7 	bl	d4588 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.15.constprop.18>
   ddbba:	a803      	add	r0, sp, #12
   ddbbc:	f7ff f830 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
   ddbc0:	b005      	add	sp, #20
   ddbc2:	bd30      	pop	{r4, r5, pc}
   ddbc4:	2003e368 	.word	0x2003e368
   ddbc8:	000e3e0b 	.word	0x000e3e0b
   ddbcc:	000e3b15 	.word	0x000e3b15
   ddbd0:	000e3b37 	.word	0x000e3b37
   ddbd4:	000e3b3e 	.word	0x000e3b3e

000ddbd8 <_GLOBAL__sub_I_strip>:
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   ddbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   ddbda:	4b14      	ldr	r3, [pc, #80]	; (ddc2c <_GLOBAL__sub_I_strip+0x54>)

#define PIXEL_PIN A3            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
   ddbdc:	4c14      	ldr	r4, [pc, #80]	; (ddc30 <_GLOBAL__sub_I_strip+0x58>)
   ddbde:	4e15      	ldr	r6, [pc, #84]	; (ddc34 <_GLOBAL__sub_I_strip+0x5c>)
   ddbe0:	2500      	movs	r5, #0
   ddbe2:	701d      	strb	r5, [r3, #0]
   ddbe4:	4b14      	ldr	r3, [pc, #80]	; (ddc38 <_GLOBAL__sub_I_strip+0x60>)
   ddbe6:	2701      	movs	r7, #1
   ddbe8:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   ddbea:	f000 fa83 	bl	de0f4 <HAL_Pin_Map>
   ddbee:	2302      	movs	r3, #2
   ddbf0:	2210      	movs	r2, #16
   ddbf2:	f44f 7180 	mov.w	r1, #256	; 0x100
   ddbf6:	4620      	mov	r0, r4
   ddbf8:	f000 f87a 	bl	ddcf0 <_ZN17Adafruit_NeoPixelC1Ethh>
   ddbfc:	4632      	mov	r2, r6
   ddbfe:	490f      	ldr	r1, [pc, #60]	; (ddc3c <_GLOBAL__sub_I_strip+0x64>)
   ddc00:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ddc02:	4c0f      	ldr	r4, [pc, #60]	; (ddc40 <_GLOBAL__sub_I_strip+0x68>)
   ddc04:	f002 fe2a 	bl	e085c <__aeabi_atexit>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   ddc08:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ddc0c:	4638      	mov	r0, r7

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   ddc0e:	6025      	str	r5, [r4, #0]
   ddc10:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   ddc12:	71a5      	strb	r5, [r4, #6]
   ddc14:	8125      	strh	r5, [r4, #8]
   ddc16:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   ddc18:	f000 fcbc 	bl	de594 <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
   ddc1c:	4632      	mov	r2, r6
   ddc1e:	4620      	mov	r0, r4
   ddc20:	4908      	ldr	r1, [pc, #32]	; (ddc44 <_GLOBAL__sub_I_strip+0x6c>)
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   ddc22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
   ddc26:	f002 be19 	b.w	e085c <__aeabi_atexit>
   ddc2a:	bf00      	nop
   ddc2c:	2003e368 	.word	0x2003e368
   ddc30:	2003e328 	.word	0x2003e328
   ddc34:	2003e2e0 	.word	0x2003e2e0
   ddc38:	2003e324 	.word	0x2003e324
   ddc3c:	000ddc51 	.word	0x000ddc51
   ddc40:	2003e2f8 	.word	0x2003e2f8
   ddc44:	000d43ed 	.word	0x000d43ed

000ddc48 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   ddc48:	f000 badc 	b.w	de204 <HAL_Timer_Get_Micro_Seconds>

000ddc4c <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   ddc4c:	f000 bad2 	b.w	de1f4 <HAL_Delay_Microseconds>

000ddc50 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   ddc50:	b510      	push	{r4, lr}
   ddc52:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   ddc54:	68c0      	ldr	r0, [r0, #12]
   ddc56:	b108      	cbz	r0, ddc5c <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   ddc58:	f000 fd8a 	bl	de770 <free>
  if (begun) pinMode(pin, INPUT);
   ddc5c:	7823      	ldrb	r3, [r4, #0]
   ddc5e:	b11b      	cbz	r3, ddc68 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   ddc60:	2100      	movs	r1, #0
   ddc62:	79e0      	ldrb	r0, [r4, #7]
   ddc64:	f002 fd52 	bl	e070c <pinMode>
}
   ddc68:	4620      	mov	r0, r4
   ddc6a:	bd10      	pop	{r4, pc}

000ddc6c <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   ddc6c:	b538      	push	{r3, r4, r5, lr}
   ddc6e:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   ddc70:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   ddc72:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   ddc74:	b108      	cbz	r0, ddc7a <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   ddc76:	f000 fd7b 	bl	de770 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   ddc7a:	79a3      	ldrb	r3, [r4, #6]
   ddc7c:	2b06      	cmp	r3, #6
   ddc7e:	bf0c      	ite	eq
   ddc80:	2004      	moveq	r0, #4
   ddc82:	2003      	movne	r0, #3
   ddc84:	fb10 f005 	smulbb	r0, r0, r5
   ddc88:	b280      	uxth	r0, r0
   ddc8a:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   ddc8c:	f000 fd68 	bl	de760 <malloc>
   ddc90:	60e0      	str	r0, [r4, #12]
   ddc92:	b128      	cbz	r0, ddca0 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   ddc94:	88a2      	ldrh	r2, [r4, #4]
   ddc96:	2100      	movs	r1, #0
   ddc98:	f003 fd5e 	bl	e1758 <memset>
    numLEDs = n;
   ddc9c:	8065      	strh	r5, [r4, #2]
   ddc9e:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   ddca0:	80a0      	strh	r0, [r4, #4]
   ddca2:	8060      	strh	r0, [r4, #2]
   ddca4:	bd38      	pop	{r3, r4, r5, pc}

000ddca6 <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   ddca6:	b510      	push	{r4, lr}
   ddca8:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   ddcaa:	2101      	movs	r1, #1
   ddcac:	79c0      	ldrb	r0, [r0, #7]
   ddcae:	f002 fd2d 	bl	e070c <pinMode>
  digitalWrite(pin, LOW);
   ddcb2:	2100      	movs	r1, #0
   ddcb4:	79e0      	ldrb	r0, [r4, #7]
   ddcb6:	f002 fd3a 	bl	e072e <digitalWrite>
  begun = true;
   ddcba:	2301      	movs	r3, #1
   ddcbc:	7023      	strb	r3, [r4, #0]
   ddcbe:	bd10      	pop	{r4, pc}

000ddcc0 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   ddcc0:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   ddcc2:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   ddcc4:	4605      	mov	r5, r0
   ddcc6:	460c      	mov	r4, r1
    if (begun) {
   ddcc8:	b11b      	cbz	r3, ddcd2 <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   ddcca:	2100      	movs	r1, #0
   ddccc:	79c0      	ldrb	r0, [r0, #7]
   ddcce:	f002 fd1d 	bl	e070c <pinMode>
    }
    pin = p;
    if (begun) {
   ddcd2:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   ddcd4:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   ddcd6:	b153      	cbz	r3, ddcee <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   ddcd8:	b2a4      	uxth	r4, r4
   ddcda:	4620      	mov	r0, r4
   ddcdc:	2101      	movs	r1, #1
   ddcde:	f002 fd15 	bl	e070c <pinMode>
        digitalWrite(p, LOW);
   ddce2:	4620      	mov	r0, r4
   ddce4:	2100      	movs	r1, #0
    }
}
   ddce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   ddcea:	f002 bd20 	b.w	e072e <digitalWrite>
   ddcee:	bd38      	pop	{r3, r4, r5, pc}

000ddcf0 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   ddcf0:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   ddcf2:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   ddcf4:	4604      	mov	r4, r0
   ddcf6:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   ddcf8:	7183      	strb	r3, [r0, #6]
   ddcfa:	7005      	strb	r5, [r0, #0]
   ddcfc:	7205      	strb	r5, [r0, #8]
   ddcfe:	60c5      	str	r5, [r0, #12]
   ddd00:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   ddd02:	f7ff ffb3 	bl	ddc6c <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   ddd06:	4620      	mov	r0, r4
   ddd08:	4631      	mov	r1, r6
   ddd0a:	f7ff ffd9 	bl	ddcc0 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   ddd0e:	4620      	mov	r0, r4
   ddd10:	bd70      	pop	{r4, r5, r6, pc}
	...

000ddd14 <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   ddd14:	68c3      	ldr	r3, [r0, #12]
   ddd16:	2b00      	cmp	r3, #0
   ddd18:	f000 818b 	beq.w	de032 <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   ddd1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   ddd20:	7983      	ldrb	r3, [r0, #6]
   ddd22:	3b02      	subs	r3, #2
   ddd24:	b2db      	uxtb	r3, r3
   ddd26:	2b04      	cmp	r3, #4
   ddd28:	bf9c      	itt	ls
   ddd2a:	4ac4      	ldrls	r2, [pc, #784]	; (de03c <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   ddd2c:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   ddd30:	b087      	sub	sp, #28
   ddd32:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   ddd34:	bf88      	it	hi
   ddd36:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   ddd38:	f7ff ff86 	bl	ddc48 <micros>
   ddd3c:	692b      	ldr	r3, [r5, #16]
   ddd3e:	1ac0      	subs	r0, r0, r3
   ddd40:	42a0      	cmp	r0, r4
   ddd42:	d3f9      	bcc.n	ddd38 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   ddd44:	4abe      	ldr	r2, [pc, #760]	; (de040 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   ddd46:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   ddd48:	ca07      	ldmia	r2, {r0, r1, r2}
   ddd4a:	ac06      	add	r4, sp, #24
   ddd4c:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   ddd50:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   ddd52:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   ddd54:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   ddd58:	3304      	adds	r3, #4
   ddd5a:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd5c:	b922      	cbnz	r2, ddd68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd5e:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   ddd62:	2b00      	cmp	r3, #0
   ddd64:	f2c0 8155 	blt.w	de012 <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   ddd68:	9c04      	ldr	r4, [sp, #16]
   ddd6a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd6e:	b923      	cbnz	r3, ddd7a <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd70:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   ddd74:	2b00      	cmp	r3, #0
   ddd76:	f2c0 813c 	blt.w	ddff2 <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   ddd7a:	9c05      	ldr	r4, [sp, #20]
   ddd7c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd80:	b91b      	cbnz	r3, ddd8a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddd82:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   ddd86:	2b00      	cmp	r3, #0
   ddd88:	db6e      	blt.n	dde68 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddd8a:	4bae      	ldr	r3, [pc, #696]	; (de044 <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   ddd8c:	79ea      	ldrb	r2, [r5, #7]
   ddd8e:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   ddd90:	4cad      	ldr	r4, [pc, #692]	; (de048 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   ddd92:	49ae      	ldr	r1, [pc, #696]	; (de04c <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   ddd94:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddd96:	0112      	lsls	r2, r2, #4
   ddd98:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   ddd9a:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddd9e:	785b      	ldrb	r3, [r3, #1]
   ddda0:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   ddda2:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   ddda4:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddda6:	f003 031f 	and.w	r3, r3, #31
   dddaa:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   dddae:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   dddb0:	433a      	orrs	r2, r7
   dddb2:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   dddb4:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   dddb6:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   dddb8:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   dddbc:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   dddc0:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   dddc2:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   dddc4:	2800      	cmp	r0, #0
   dddc6:	d044      	beq.n	dde52 <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   dddc8:	46cc      	mov	ip, r9
   dddca:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   dddcc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   dddd0:	f81c eb01 	ldrb.w	lr, [ip], #1
   dddd4:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   dddd6:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   dddd8:	6863      	ldr	r3, [r4, #4]
   dddda:	1a9b      	subs	r3, r3, r2
   ddddc:	2b46      	cmp	r3, #70	; 0x46
   dddde:	d9fb      	bls.n	dddd8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   ddde0:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   ddde4:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   ddde8:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   dddec:	ea43 0307 	orr.w	r3, r3, r7
   dddf0:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   dddf4:	d02f      	beq.n	dde56 <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   dddf6:	6863      	ldr	r3, [r4, #4]
   dddf8:	1a9b      	subs	r3, r3, r2
   dddfa:	2b28      	cmp	r3, #40	; 0x28
   dddfc:	d9fb      	bls.n	dddf6 <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   dddfe:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   dde02:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   dde04:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   dde08:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   dde0c:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   dde10:	d1e2      	bne.n	dddd8 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   dde12:	ebc9 030c 	rsb	r3, r9, ip
   dde16:	88a8      	ldrh	r0, [r5, #4]
   dde18:	b29b      	uxth	r3, r3
   dde1a:	4298      	cmp	r0, r3
   dde1c:	d8d8      	bhi.n	dddd0 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   dde1e:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   dde22:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   dde26:	6863      	ldr	r3, [r4, #4]
   dde28:	1a9b      	subs	r3, r3, r2
   dde2a:	2b46      	cmp	r3, #70	; 0x46
   dde2c:	d9fb      	bls.n	dde26 <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   dde2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   dde32:	ebca 0a03 	rsb	sl, sl, r3
   dde36:	4582      	cmp	sl, r0
   dde38:	f0c0 80d5 	bcc.w	ddfe6 <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   dde3c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   dde40:	f7ff ff04 	bl	ddc4c <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   dde44:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   dde46:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   dde4a:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   dde4e:	2800      	cmp	r0, #0
   dde50:	d1ba      	bne.n	dddc8 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   dde52:	4602      	mov	r2, r0
   dde54:	e7e7      	b.n	dde26 <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   dde56:	6863      	ldr	r3, [r4, #4]
   dde58:	1a9b      	subs	r3, r3, r2
   dde5a:	2b11      	cmp	r3, #17
   dde5c:	d8cf      	bhi.n	dddfe <_ZN17Adafruit_NeoPixel4showEv+0xea>
   dde5e:	6863      	ldr	r3, [r4, #4]
   dde60:	1a9b      	subs	r3, r3, r2
   dde62:	2b11      	cmp	r3, #17
   dde64:	d9f7      	bls.n	dde56 <_ZN17Adafruit_NeoPixel4showEv+0x142>
   dde66:	e7ca      	b.n	dddfe <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dde68:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dde6c:	2b00      	cmp	r3, #0
   dde6e:	da8c      	bge.n	ddd8a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dde70:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dde74:	2b00      	cmp	r3, #0
   dde76:	da88      	bge.n	ddd8a <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   dde78:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dde7c:	2b00      	cmp	r3, #0
   dde7e:	da84      	bge.n	ddd8a <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   dde80:	9801      	ldr	r0, [sp, #4]
   dde82:	f000 fc6d 	bl	de760 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   dde86:	2800      	cmp	r0, #0
   dde88:	f43f af7f 	beq.w	ddd8a <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   dde8c:	88ab      	ldrh	r3, [r5, #4]
   dde8e:	2b00      	cmp	r3, #0
   dde90:	f000 80d0 	beq.w	de034 <_ZN17Adafruit_NeoPixel4showEv+0x320>
   dde94:	2700      	movs	r7, #0
   dde96:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   dde98:	4e6d      	ldr	r6, [pc, #436]	; (de050 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   dde9a:	496e      	ldr	r1, [pc, #440]	; (de054 <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   dde9c:	e000      	b.n	ddea0 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   dde9e:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   ddea0:	68ea      	ldr	r2, [r5, #12]
   ddea2:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   ddea4:	f103 0e01 	add.w	lr, r3, #1
   ddea8:	f012 0f80 	tst.w	r2, #128	; 0x80
   ddeac:	bf14      	ite	ne
   ddeae:	46b0      	movne	r8, r6
   ddeb0:	4688      	moveq	r8, r1
   ddeb2:	fa1f fe8e 	uxth.w	lr, lr
   ddeb6:	f012 0f40 	tst.w	r2, #64	; 0x40
   ddeba:	bf14      	ite	ne
   ddebc:	46b1      	movne	r9, r6
   ddebe:	4689      	moveq	r9, r1
   ddec0:	f012 0f20 	tst.w	r2, #32
   ddec4:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   ddec8:	bf18      	it	ne
   ddeca:	46b2      	movne	sl, r6
   ddecc:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   dded0:	bf08      	it	eq
   dded2:	468a      	moveq	sl, r1
   dded4:	f103 0802 	add.w	r8, r3, #2
   dded8:	f012 0f10 	tst.w	r2, #16
   ddedc:	f103 0e03 	add.w	lr, r3, #3
   ddee0:	bf14      	ite	ne
   ddee2:	46b4      	movne	ip, r6
   ddee4:	468c      	moveq	ip, r1
   ddee6:	fa1f f888 	uxth.w	r8, r8
   ddeea:	f012 0f08 	tst.w	r2, #8
   ddeee:	fa1f fe8e 	uxth.w	lr, lr
   ddef2:	f103 0904 	add.w	r9, r3, #4
   ddef6:	fa1f f989 	uxth.w	r9, r9
   ddefa:	bf14      	ite	ne
   ddefc:	46b3      	movne	fp, r6
   ddefe:	468b      	moveq	fp, r1
   ddf00:	f012 0f04 	tst.w	r2, #4
   ddf04:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   ddf08:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   ddf0c:	bf14      	ite	ne
   ddf0e:	46b2      	movne	sl, r6
   ddf10:	468a      	moveq	sl, r1
   ddf12:	f103 0805 	add.w	r8, r3, #5
   ddf16:	f012 0f02 	tst.w	r2, #2
   ddf1a:	f103 0c06 	add.w	ip, r3, #6
   ddf1e:	f103 0e07 	add.w	lr, r3, #7
   ddf22:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   ddf26:	fa1f fe8e 	uxth.w	lr, lr
   ddf2a:	bf14      	ite	ne
   ddf2c:	46b1      	movne	r9, r6
   ddf2e:	4689      	moveq	r9, r1
   ddf30:	fa1f f888 	uxth.w	r8, r8
   ddf34:	f012 0f01 	tst.w	r2, #1
   ddf38:	fa1f fc8c 	uxth.w	ip, ip
   ddf3c:	bf14      	ite	ne
   ddf3e:	4632      	movne	r2, r6
   ddf40:	460a      	moveq	r2, r1
   ddf42:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   ddf46:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   ddf4a:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   ddf4e:	3701      	adds	r7, #1
   ddf50:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   ddf54:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   ddf56:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   ddf5a:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   ddf5c:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   ddf5e:	d89e      	bhi.n	dde9e <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   ddf60:	f103 0209 	add.w	r2, r3, #9
   ddf64:	330a      	adds	r3, #10
   ddf66:	b292      	uxth	r2, r2
   ddf68:	b29b      	uxth	r3, r3
   ddf6a:	0052      	lsls	r2, r2, #1
   ddf6c:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   ddf6e:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   ddf70:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   ddf74:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   ddf76:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   ddf78:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   ddf7a:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   ddf7c:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   ddf7e:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddf82:	4e30      	ldr	r6, [pc, #192]	; (de044 <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   ddf84:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   ddf88:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   ddf8c:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   ddf90:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   ddf94:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   ddf98:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   ddf9c:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   ddfa0:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddfa4:	79eb      	ldrb	r3, [r5, #7]
   ddfa6:	6831      	ldr	r1, [r6, #0]
   ddfa8:	011b      	lsls	r3, r3, #4
   ddfaa:	18ce      	adds	r6, r1, r3
   ddfac:	5cc9      	ldrb	r1, [r1, r3]
   ddfae:	7873      	ldrb	r3, [r6, #1]
   ddfb0:	f003 031f 	and.w	r3, r3, #31
   ddfb4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   ddfb8:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   ddfba:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   ddfbe:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   ddfc2:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   ddfc6:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   ddfc8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   ddfcc:	2b00      	cmp	r3, #0
   ddfce:	d0fb      	beq.n	ddfc8 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   ddfd0:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   ddfd2:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   ddfd6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   ddfda:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   ddfde:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   ddfe2:	f000 fbc5 	bl	de770 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   ddfe6:	f7ff fe2f 	bl	ddc48 <micros>
   ddfea:	6128      	str	r0, [r5, #16]
}
   ddfec:	b007      	add	sp, #28
   ddfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddff2:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddff6:	2b00      	cmp	r3, #0
   ddff8:	f6bf aebf 	bge.w	ddd7a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   ddffc:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de000:	2b00      	cmp	r3, #0
   de002:	f6bf aeba 	bge.w	ddd7a <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de006:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de00a:	2b00      	cmp	r3, #0
   de00c:	f6bf aeb5 	bge.w	ddd7a <_ZN17Adafruit_NeoPixel4showEv+0x66>
   de010:	e736      	b.n	dde80 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de012:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de016:	2b00      	cmp	r3, #0
   de018:	f6bf aea6 	bge.w	ddd68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de01c:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de020:	2b00      	cmp	r3, #0
   de022:	f6bf aea1 	bge.w	ddd68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de026:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de02a:	2b00      	cmp	r3, #0
   de02c:	f6bf ae9c 	bge.w	ddd68 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   de030:	e726      	b.n	dde80 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   de032:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de034:	2304      	movs	r3, #4
   de036:	2202      	movs	r2, #2
   de038:	e799      	b.n	ddf6e <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   de03a:	bf00      	nop
   de03c:	000e3b58 	.word	0x000e3b58
   de040:	000e3b4c 	.word	0x000e3b4c
   de044:	2003e36c 	.word	0x2003e36c
   de048:	e000edf0 	.word	0xe000edf0
   de04c:	e0001000 	.word	0xe0001000
   de050:	ffff800d 	.word	0xffff800d
   de054:	ffff8006 	.word	0xffff8006

000de058 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   de058:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   de05a:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   de05c:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   de060:	428c      	cmp	r4, r1
   de062:	d927      	bls.n	de0b4 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   de064:	7a04      	ldrb	r4, [r0, #8]
   de066:	b144      	cbz	r4, de07a <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   de068:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   de06c:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   de070:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   de074:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   de076:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   de078:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   de07a:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   de07c:	68c6      	ldr	r6, [r0, #12]
   de07e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   de082:	2f08      	cmp	r7, #8
   de084:	eb06 0401 	add.w	r4, r6, r1
   de088:	d811      	bhi.n	de0ae <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   de08a:	2001      	movs	r0, #1
   de08c:	40b8      	lsls	r0, r7
   de08e:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   de092:	d108      	bne.n	de0a6 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   de094:	06c0      	lsls	r0, r0, #27
   de096:	d50a      	bpl.n	de0ae <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   de098:	2aff      	cmp	r2, #255	; 0xff
   de09a:	bf08      	it	eq
   de09c:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   de09e:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   de0a0:	7065      	strb	r5, [r4, #1]
          *p = g;
   de0a2:	70a3      	strb	r3, [r4, #2]
   de0a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   de0a6:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   de0a8:	7062      	strb	r2, [r4, #1]
          *p = b;
   de0aa:	70a5      	strb	r5, [r4, #2]
   de0ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   de0ae:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   de0b0:	7063      	strb	r3, [r4, #1]
          *p = b;
   de0b2:	70a5      	strb	r5, [r4, #2]
   de0b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000de0b6 <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   de0b6:	8882      	ldrh	r2, [r0, #4]
   de0b8:	68c0      	ldr	r0, [r0, #12]
   de0ba:	2100      	movs	r1, #0
   de0bc:	f003 bb4c 	b.w	e1758 <memset>

000de0c0 <_GLOBAL__sub_I_PIN_MAP2>:
}
   de0c0:	b508      	push	{r3, lr}
   de0c2:	f000 f817 	bl	de0f4 <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   de0c6:	f000 f815 	bl	de0f4 <HAL_Pin_Map>
   de0ca:	4b01      	ldr	r3, [pc, #4]	; (de0d0 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   de0cc:	6018      	str	r0, [r3, #0]
   de0ce:	bd08      	pop	{r3, pc}
   de0d0:	2003e36c 	.word	0x2003e36c

000de0d4 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   de0d4:	b508      	push	{r3, lr}
   de0d6:	4b02      	ldr	r3, [pc, #8]	; (de0e0 <netdb_freeaddrinfo+0xc>)
   de0d8:	681b      	ldr	r3, [r3, #0]
   de0da:	689b      	ldr	r3, [r3, #8]
   de0dc:	9301      	str	r3, [sp, #4]
   de0de:	bd08      	pop	{r3, pc}
   de0e0:	00030268 	.word	0x00030268

000de0e4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   de0e4:	b508      	push	{r3, lr}
   de0e6:	4b02      	ldr	r3, [pc, #8]	; (de0f0 <netdb_getaddrinfo+0xc>)
   de0e8:	681b      	ldr	r3, [r3, #0]
   de0ea:	68db      	ldr	r3, [r3, #12]
   de0ec:	9301      	str	r3, [sp, #4]
   de0ee:	bd08      	pop	{r3, pc}
   de0f0:	00030268 	.word	0x00030268

000de0f4 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   de0f4:	b508      	push	{r3, lr}
   de0f6:	4b02      	ldr	r3, [pc, #8]	; (de100 <HAL_Pin_Map+0xc>)
   de0f8:	681b      	ldr	r3, [r3, #0]
   de0fa:	681b      	ldr	r3, [r3, #0]
   de0fc:	9301      	str	r3, [sp, #4]
   de0fe:	bd08      	pop	{r3, pc}
   de100:	0003022c 	.word	0x0003022c

000de104 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   de104:	b508      	push	{r3, lr}
   de106:	4b02      	ldr	r3, [pc, #8]	; (de110 <HAL_Validate_Pin_Function+0xc>)
   de108:	681b      	ldr	r3, [r3, #0]
   de10a:	685b      	ldr	r3, [r3, #4]
   de10c:	9301      	str	r3, [sp, #4]
   de10e:	bd08      	pop	{r3, pc}
   de110:	0003022c 	.word	0x0003022c

000de114 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   de114:	b508      	push	{r3, lr}
   de116:	4b02      	ldr	r3, [pc, #8]	; (de120 <HAL_Pin_Mode+0xc>)
   de118:	681b      	ldr	r3, [r3, #0]
   de11a:	689b      	ldr	r3, [r3, #8]
   de11c:	9301      	str	r3, [sp, #4]
   de11e:	bd08      	pop	{r3, pc}
   de120:	0003022c 	.word	0x0003022c

000de124 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   de124:	b508      	push	{r3, lr}
   de126:	4b02      	ldr	r3, [pc, #8]	; (de130 <HAL_Get_Pin_Mode+0xc>)
   de128:	681b      	ldr	r3, [r3, #0]
   de12a:	68db      	ldr	r3, [r3, #12]
   de12c:	9301      	str	r3, [sp, #4]
   de12e:	bd08      	pop	{r3, pc}
   de130:	0003022c 	.word	0x0003022c

000de134 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   de134:	b508      	push	{r3, lr}
   de136:	4b02      	ldr	r3, [pc, #8]	; (de140 <HAL_GPIO_Write+0xc>)
   de138:	681b      	ldr	r3, [r3, #0]
   de13a:	691b      	ldr	r3, [r3, #16]
   de13c:	9301      	str	r3, [sp, #4]
   de13e:	bd08      	pop	{r3, pc}
   de140:	0003022c 	.word	0x0003022c

000de144 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   de144:	b508      	push	{r3, lr}
   de146:	4b02      	ldr	r3, [pc, #8]	; (de150 <HAL_GPIO_Read+0xc>)
   de148:	681b      	ldr	r3, [r3, #0]
   de14a:	695b      	ldr	r3, [r3, #20]
   de14c:	9301      	str	r3, [sp, #4]
   de14e:	bd08      	pop	{r3, pc}
   de150:	0003022c 	.word	0x0003022c

000de154 <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   de154:	b508      	push	{r3, lr}
   de156:	4b02      	ldr	r3, [pc, #8]	; (de160 <HAL_ADC_Read+0xc>)
   de158:	681b      	ldr	r3, [r3, #0]
   de15a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de15c:	9301      	str	r3, [sp, #4]
   de15e:	bd08      	pop	{r3, pc}
   de160:	0003022c 	.word	0x0003022c

000de164 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   de164:	b508      	push	{r3, lr}
   de166:	4b02      	ldr	r3, [pc, #8]	; (de170 <HAL_SPI_Init+0xc>)
   de168:	681b      	ldr	r3, [r3, #0]
   de16a:	69db      	ldr	r3, [r3, #28]
   de16c:	9301      	str	r3, [sp, #4]
   de16e:	bd08      	pop	{r3, pc}
   de170:	00030230 	.word	0x00030230

000de174 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   de174:	b508      	push	{r3, lr}
   de176:	4b02      	ldr	r3, [pc, #8]	; (de180 <HAL_SPI_Is_Enabled+0xc>)
   de178:	681b      	ldr	r3, [r3, #0]
   de17a:	6a1b      	ldr	r3, [r3, #32]
   de17c:	9301      	str	r3, [sp, #4]
   de17e:	bd08      	pop	{r3, pc}
   de180:	00030230 	.word	0x00030230

000de184 <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   de184:	b508      	push	{r3, lr}
   de186:	4b02      	ldr	r3, [pc, #8]	; (de190 <if_name_to_index+0xc>)
   de188:	681b      	ldr	r3, [r3, #0]
   de18a:	691b      	ldr	r3, [r3, #16]
   de18c:	9301      	str	r3, [sp, #4]
   de18e:	bd08      	pop	{r3, pc}
   de190:	0003026c 	.word	0x0003026c

000de194 <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   de194:	b508      	push	{r3, lr}
   de196:	4b02      	ldr	r3, [pc, #8]	; (de1a0 <if_index_to_name+0xc>)
   de198:	681b      	ldr	r3, [r3, #0]
   de19a:	695b      	ldr	r3, [r3, #20]
   de19c:	9301      	str	r3, [sp, #4]
   de19e:	bd08      	pop	{r3, pc}
   de1a0:	0003026c 	.word	0x0003026c

000de1a4 <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   de1a4:	b508      	push	{r3, lr}
   de1a6:	4b02      	ldr	r3, [pc, #8]	; (de1b0 <if_get_by_index+0xc>)
   de1a8:	681b      	ldr	r3, [r3, #0]
   de1aa:	699b      	ldr	r3, [r3, #24]
   de1ac:	9301      	str	r3, [sp, #4]
   de1ae:	bd08      	pop	{r3, pc}
   de1b0:	0003026c 	.word	0x0003026c

000de1b4 <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   de1b4:	b508      	push	{r3, lr}
   de1b6:	4b02      	ldr	r3, [pc, #8]	; (de1c0 <if_get_addrs+0xc>)
   de1b8:	681b      	ldr	r3, [r3, #0]
   de1ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   de1bc:	9301      	str	r3, [sp, #4]
   de1be:	bd08      	pop	{r3, pc}
   de1c0:	0003026c 	.word	0x0003026c

000de1c4 <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   de1c4:	b508      	push	{r3, lr}
   de1c6:	4b02      	ldr	r3, [pc, #8]	; (de1d0 <if_free_if_addrs+0xc>)
   de1c8:	681b      	ldr	r3, [r3, #0]
   de1ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   de1cc:	9301      	str	r3, [sp, #4]
   de1ce:	bd08      	pop	{r3, pc}
   de1d0:	0003026c 	.word	0x0003026c

000de1d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   de1d4:	b508      	push	{r3, lr}
   de1d6:	4b02      	ldr	r3, [pc, #8]	; (de1e0 <HAL_RNG_GetRandomNumber+0xc>)
   de1d8:	681b      	ldr	r3, [r3, #0]
   de1da:	685b      	ldr	r3, [r3, #4]
   de1dc:	9301      	str	r3, [sp, #4]
   de1de:	bd08      	pop	{r3, pc}
   de1e0:	00030218 	.word	0x00030218

000de1e4 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   de1e4:	b508      	push	{r3, lr}
   de1e6:	4b02      	ldr	r3, [pc, #8]	; (de1f0 <HAL_Delay_Milliseconds+0xc>)
   de1e8:	681b      	ldr	r3, [r3, #0]
   de1ea:	689b      	ldr	r3, [r3, #8]
   de1ec:	9301      	str	r3, [sp, #4]
   de1ee:	bd08      	pop	{r3, pc}
   de1f0:	00030218 	.word	0x00030218

000de1f4 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   de1f4:	b508      	push	{r3, lr}
   de1f6:	4b02      	ldr	r3, [pc, #8]	; (de200 <HAL_Delay_Microseconds+0xc>)
   de1f8:	681b      	ldr	r3, [r3, #0]
   de1fa:	68db      	ldr	r3, [r3, #12]
   de1fc:	9301      	str	r3, [sp, #4]
   de1fe:	bd08      	pop	{r3, pc}
   de200:	00030218 	.word	0x00030218

000de204 <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   de204:	b508      	push	{r3, lr}
   de206:	4b02      	ldr	r3, [pc, #8]	; (de210 <HAL_Timer_Get_Micro_Seconds+0xc>)
   de208:	681b      	ldr	r3, [r3, #0]
   de20a:	691b      	ldr	r3, [r3, #16]
   de20c:	9301      	str	r3, [sp, #4]
   de20e:	bd08      	pop	{r3, pc}
   de210:	00030218 	.word	0x00030218

000de214 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   de214:	b508      	push	{r3, lr}
   de216:	4b02      	ldr	r3, [pc, #8]	; (de220 <HAL_Timer_Get_Milli_Seconds+0xc>)
   de218:	681b      	ldr	r3, [r3, #0]
   de21a:	695b      	ldr	r3, [r3, #20]
   de21c:	9301      	str	r3, [sp, #4]
   de21e:	bd08      	pop	{r3, pc}
   de220:	00030218 	.word	0x00030218

000de224 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   de224:	b508      	push	{r3, lr}
   de226:	4b02      	ldr	r3, [pc, #8]	; (de230 <HAL_RTC_Get_UnixTime+0xc>)
   de228:	681b      	ldr	r3, [r3, #0]
   de22a:	69db      	ldr	r3, [r3, #28]
   de22c:	9301      	str	r3, [sp, #4]
   de22e:	bd08      	pop	{r3, pc}
   de230:	00030218 	.word	0x00030218

000de234 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   de234:	b508      	push	{r3, lr}
   de236:	4b02      	ldr	r3, [pc, #8]	; (de240 <HAL_EEPROM_Init+0xc>)
   de238:	681b      	ldr	r3, [r3, #0]
   de23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   de23c:	9301      	str	r3, [sp, #4]
   de23e:	bd08      	pop	{r3, pc}
   de240:	00030218 	.word	0x00030218

000de244 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   de244:	b508      	push	{r3, lr}
   de246:	4b02      	ldr	r3, [pc, #8]	; (de250 <HAL_EEPROM_Read+0xc>)
   de248:	681b      	ldr	r3, [r3, #0]
   de24a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   de24c:	9301      	str	r3, [sp, #4]
   de24e:	bd08      	pop	{r3, pc}
   de250:	00030218 	.word	0x00030218

000de254 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   de254:	b508      	push	{r3, lr}
   de256:	4b02      	ldr	r3, [pc, #8]	; (de260 <HAL_EEPROM_Write+0xc>)
   de258:	681b      	ldr	r3, [r3, #0]
   de25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de25c:	9301      	str	r3, [sp, #4]
   de25e:	bd08      	pop	{r3, pc}
   de260:	00030218 	.word	0x00030218

000de264 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   de264:	b508      	push	{r3, lr}
   de266:	4b02      	ldr	r3, [pc, #8]	; (de270 <HAL_RTC_Time_Is_Valid+0xc>)
   de268:	681b      	ldr	r3, [r3, #0]
   de26a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   de26c:	9301      	str	r3, [sp, #4]
   de26e:	bd08      	pop	{r3, pc}
   de270:	00030218 	.word	0x00030218

000de274 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   de274:	b508      	push	{r3, lr}
   de276:	4b02      	ldr	r3, [pc, #8]	; (de280 <os_thread_create+0xc>)
   de278:	681b      	ldr	r3, [r3, #0]
   de27a:	685b      	ldr	r3, [r3, #4]
   de27c:	9301      	str	r3, [sp, #4]
   de27e:	bd08      	pop	{r3, pc}
   de280:	00030248 	.word	0x00030248

000de284 <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   de284:	b508      	push	{r3, lr}
   de286:	4b02      	ldr	r3, [pc, #8]	; (de290 <os_thread_is_current+0xc>)
   de288:	681b      	ldr	r3, [r3, #0]
   de28a:	689b      	ldr	r3, [r3, #8]
   de28c:	9301      	str	r3, [sp, #4]
   de28e:	bd08      	pop	{r3, pc}
   de290:	00030248 	.word	0x00030248

000de294 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   de294:	b508      	push	{r3, lr}
   de296:	4b02      	ldr	r3, [pc, #8]	; (de2a0 <os_thread_join+0xc>)
   de298:	681b      	ldr	r3, [r3, #0]
   de29a:	691b      	ldr	r3, [r3, #16]
   de29c:	9301      	str	r3, [sp, #4]
   de29e:	bd08      	pop	{r3, pc}
   de2a0:	00030248 	.word	0x00030248

000de2a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   de2a4:	b508      	push	{r3, lr}
   de2a6:	4b02      	ldr	r3, [pc, #8]	; (de2b0 <os_thread_cleanup+0xc>)
   de2a8:	681b      	ldr	r3, [r3, #0]
   de2aa:	695b      	ldr	r3, [r3, #20]
   de2ac:	9301      	str	r3, [sp, #4]
   de2ae:	bd08      	pop	{r3, pc}
   de2b0:	00030248 	.word	0x00030248

000de2b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   de2b4:	b508      	push	{r3, lr}
   de2b6:	4b02      	ldr	r3, [pc, #8]	; (de2c0 <os_mutex_recursive_create+0xc>)
   de2b8:	681b      	ldr	r3, [r3, #0]
   de2ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   de2bc:	9301      	str	r3, [sp, #4]
   de2be:	bd08      	pop	{r3, pc}
   de2c0:	00030248 	.word	0x00030248

000de2c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   de2c4:	b508      	push	{r3, lr}
   de2c6:	4b02      	ldr	r3, [pc, #8]	; (de2d0 <os_mutex_recursive_destroy+0xc>)
   de2c8:	681b      	ldr	r3, [r3, #0]
   de2ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   de2cc:	9301      	str	r3, [sp, #4]
   de2ce:	bd08      	pop	{r3, pc}
   de2d0:	00030248 	.word	0x00030248

000de2d4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   de2d4:	b508      	push	{r3, lr}
   de2d6:	4b02      	ldr	r3, [pc, #8]	; (de2e0 <os_mutex_recursive_lock+0xc>)
   de2d8:	681b      	ldr	r3, [r3, #0]
   de2da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   de2dc:	9301      	str	r3, [sp, #4]
   de2de:	bd08      	pop	{r3, pc}
   de2e0:	00030248 	.word	0x00030248

000de2e4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   de2e4:	b508      	push	{r3, lr}
   de2e6:	4b02      	ldr	r3, [pc, #8]	; (de2f0 <os_mutex_recursive_unlock+0xc>)
   de2e8:	681b      	ldr	r3, [r3, #0]
   de2ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   de2ec:	9301      	str	r3, [sp, #4]
   de2ee:	bd08      	pop	{r3, pc}
   de2f0:	00030248 	.word	0x00030248

000de2f4 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   de2f4:	b508      	push	{r3, lr}
   de2f6:	4b02      	ldr	r3, [pc, #8]	; (de300 <os_thread_exit+0xc>)
   de2f8:	681b      	ldr	r3, [r3, #0]
   de2fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   de2fc:	9301      	str	r3, [sp, #4]
   de2fe:	bd08      	pop	{r3, pc}
   de300:	00030248 	.word	0x00030248

000de304 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   de304:	b508      	push	{r3, lr}
   de306:	4b02      	ldr	r3, [pc, #8]	; (de310 <inet_inet_ntop+0xc>)
   de308:	681b      	ldr	r3, [r3, #0]
   de30a:	695b      	ldr	r3, [r3, #20]
   de30c:	9301      	str	r3, [sp, #4]
   de30e:	bd08      	pop	{r3, pc}
   de310:	00030264 	.word	0x00030264

000de314 <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   de314:	b508      	push	{r3, lr}
   de316:	4b02      	ldr	r3, [pc, #8]	; (de320 <inet_inet_pton+0xc>)
   de318:	681b      	ldr	r3, [r3, #0]
   de31a:	699b      	ldr	r3, [r3, #24]
   de31c:	9301      	str	r3, [sp, #4]
   de31e:	bd08      	pop	{r3, pc}
   de320:	00030264 	.word	0x00030264

000de324 <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   de324:	b508      	push	{r3, lr}
   de326:	4b02      	ldr	r3, [pc, #8]	; (de330 <inet_htonl+0xc>)
   de328:	681b      	ldr	r3, [r3, #0]
   de32a:	6a1b      	ldr	r3, [r3, #32]
   de32c:	9301      	str	r3, [sp, #4]
   de32e:	bd08      	pop	{r3, pc}
   de330:	00030264 	.word	0x00030264

000de334 <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   de334:	b508      	push	{r3, lr}
   de336:	4b02      	ldr	r3, [pc, #8]	; (de340 <inet_ntohs+0xc>)
   de338:	681b      	ldr	r3, [r3, #0]
   de33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   de33c:	9301      	str	r3, [sp, #4]
   de33e:	bd08      	pop	{r3, pc}
   de340:	00030264 	.word	0x00030264

000de344 <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   de344:	b508      	push	{r3, lr}
   de346:	4b02      	ldr	r3, [pc, #8]	; (de350 <inet_htons+0xc>)
   de348:	681b      	ldr	r3, [r3, #0]
   de34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   de34c:	9301      	str	r3, [sp, #4]
   de34e:	bd08      	pop	{r3, pc}
   de350:	00030264 	.word	0x00030264

000de354 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   de354:	b508      	push	{r3, lr}
   de356:	4b02      	ldr	r3, [pc, #8]	; (de360 <HAL_USART_Init+0xc>)
   de358:	681b      	ldr	r3, [r3, #0]
   de35a:	681b      	ldr	r3, [r3, #0]
   de35c:	9301      	str	r3, [sp, #4]
   de35e:	bd08      	pop	{r3, pc}
   de360:	0003023c 	.word	0x0003023c

000de364 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   de364:	b508      	push	{r3, lr}
   de366:	4b02      	ldr	r3, [pc, #8]	; (de370 <HAL_USART_Write_Data+0xc>)
   de368:	681b      	ldr	r3, [r3, #0]
   de36a:	68db      	ldr	r3, [r3, #12]
   de36c:	9301      	str	r3, [sp, #4]
   de36e:	bd08      	pop	{r3, pc}
   de370:	0003023c 	.word	0x0003023c

000de374 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   de374:	b508      	push	{r3, lr}
   de376:	4b02      	ldr	r3, [pc, #8]	; (de380 <HAL_USART_Available_Data+0xc>)
   de378:	681b      	ldr	r3, [r3, #0]
   de37a:	691b      	ldr	r3, [r3, #16]
   de37c:	9301      	str	r3, [sp, #4]
   de37e:	bd08      	pop	{r3, pc}
   de380:	0003023c 	.word	0x0003023c

000de384 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   de384:	b508      	push	{r3, lr}
   de386:	4b02      	ldr	r3, [pc, #8]	; (de390 <HAL_USART_Read_Data+0xc>)
   de388:	681b      	ldr	r3, [r3, #0]
   de38a:	695b      	ldr	r3, [r3, #20]
   de38c:	9301      	str	r3, [sp, #4]
   de38e:	bd08      	pop	{r3, pc}
   de390:	0003023c 	.word	0x0003023c

000de394 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   de394:	b508      	push	{r3, lr}
   de396:	4b02      	ldr	r3, [pc, #8]	; (de3a0 <HAL_USART_Peek_Data+0xc>)
   de398:	681b      	ldr	r3, [r3, #0]
   de39a:	699b      	ldr	r3, [r3, #24]
   de39c:	9301      	str	r3, [sp, #4]
   de39e:	bd08      	pop	{r3, pc}
   de3a0:	0003023c 	.word	0x0003023c

000de3a4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   de3a4:	b508      	push	{r3, lr}
   de3a6:	4b02      	ldr	r3, [pc, #8]	; (de3b0 <HAL_USART_Flush_Data+0xc>)
   de3a8:	681b      	ldr	r3, [r3, #0]
   de3aa:	69db      	ldr	r3, [r3, #28]
   de3ac:	9301      	str	r3, [sp, #4]
   de3ae:	bd08      	pop	{r3, pc}
   de3b0:	0003023c 	.word	0x0003023c

000de3b4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   de3b4:	b508      	push	{r3, lr}
   de3b6:	4b02      	ldr	r3, [pc, #8]	; (de3c0 <HAL_USART_Is_Enabled+0xc>)
   de3b8:	681b      	ldr	r3, [r3, #0]
   de3ba:	6a1b      	ldr	r3, [r3, #32]
   de3bc:	9301      	str	r3, [sp, #4]
   de3be:	bd08      	pop	{r3, pc}
   de3c0:	0003023c 	.word	0x0003023c

000de3c4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   de3c4:	b508      	push	{r3, lr}
   de3c6:	4b02      	ldr	r3, [pc, #8]	; (de3d0 <HAL_USART_Available_Data_For_Write+0xc>)
   de3c8:	681b      	ldr	r3, [r3, #0]
   de3ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   de3cc:	9301      	str	r3, [sp, #4]
   de3ce:	bd08      	pop	{r3, pc}
   de3d0:	0003023c 	.word	0x0003023c

000de3d4 <mesh_select_antenna>:
#include "mesh_hal.h"
#endif

DYNALIB_BEGIN(hal_mesh)

DYNALIB_FN(0, hal_mesh, mesh_select_antenna, int(int, void*))
   de3d4:	b508      	push	{r3, lr}
   de3d6:	4b02      	ldr	r3, [pc, #8]	; (de3e0 <mesh_select_antenna+0xc>)
   de3d8:	681b      	ldr	r3, [r3, #0]
   de3da:	681b      	ldr	r3, [r3, #0]
   de3dc:	9301      	str	r3, [sp, #4]
   de3de:	bd08      	pop	{r3, pc}
   de3e0:	00030280 	.word	0x00030280

000de3e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   de3e4:	b508      	push	{r3, lr}
   de3e6:	4b02      	ldr	r3, [pc, #8]	; (de3f0 <HAL_I2C_Write_Data+0xc>)
   de3e8:	681b      	ldr	r3, [r3, #0]
   de3ea:	6a1b      	ldr	r3, [r3, #32]
   de3ec:	9301      	str	r3, [sp, #4]
   de3ee:	bd08      	pop	{r3, pc}
   de3f0:	00030228 	.word	0x00030228

000de3f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   de3f4:	b508      	push	{r3, lr}
   de3f6:	4b02      	ldr	r3, [pc, #8]	; (de400 <HAL_I2C_Available_Data+0xc>)
   de3f8:	681b      	ldr	r3, [r3, #0]
   de3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   de3fc:	9301      	str	r3, [sp, #4]
   de3fe:	bd08      	pop	{r3, pc}
   de400:	00030228 	.word	0x00030228

000de404 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   de404:	b508      	push	{r3, lr}
   de406:	4b02      	ldr	r3, [pc, #8]	; (de410 <HAL_I2C_Read_Data+0xc>)
   de408:	681b      	ldr	r3, [r3, #0]
   de40a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   de40c:	9301      	str	r3, [sp, #4]
   de40e:	bd08      	pop	{r3, pc}
   de410:	00030228 	.word	0x00030228

000de414 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   de414:	b508      	push	{r3, lr}
   de416:	4b02      	ldr	r3, [pc, #8]	; (de420 <HAL_I2C_Peek_Data+0xc>)
   de418:	681b      	ldr	r3, [r3, #0]
   de41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   de41c:	9301      	str	r3, [sp, #4]
   de41e:	bd08      	pop	{r3, pc}
   de420:	00030228 	.word	0x00030228

000de424 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   de424:	b508      	push	{r3, lr}
   de426:	4b02      	ldr	r3, [pc, #8]	; (de430 <HAL_I2C_Flush_Data+0xc>)
   de428:	681b      	ldr	r3, [r3, #0]
   de42a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de42c:	9301      	str	r3, [sp, #4]
   de42e:	bd08      	pop	{r3, pc}
   de430:	00030228 	.word	0x00030228

000de434 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   de434:	b508      	push	{r3, lr}
   de436:	4b02      	ldr	r3, [pc, #8]	; (de440 <HAL_I2C_Is_Enabled+0xc>)
   de438:	681b      	ldr	r3, [r3, #0]
   de43a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   de43c:	9301      	str	r3, [sp, #4]
   de43e:	bd08      	pop	{r3, pc}
   de440:	00030228 	.word	0x00030228

000de444 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   de444:	b508      	push	{r3, lr}
   de446:	4b02      	ldr	r3, [pc, #8]	; (de450 <HAL_I2C_Init+0xc>)
   de448:	681b      	ldr	r3, [r3, #0]
   de44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   de44c:	9301      	str	r3, [sp, #4]
   de44e:	bd08      	pop	{r3, pc}
   de450:	00030228 	.word	0x00030228

000de454 <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   de454:	b508      	push	{r3, lr}
   de456:	4b02      	ldr	r3, [pc, #8]	; (de460 <sock_bind+0xc>)
   de458:	681b      	ldr	r3, [r3, #0]
   de45a:	685b      	ldr	r3, [r3, #4]
   de45c:	9301      	str	r3, [sp, #4]
   de45e:	bd08      	pop	{r3, pc}
   de460:	00030238 	.word	0x00030238

000de464 <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   de464:	b508      	push	{r3, lr}
   de466:	4b02      	ldr	r3, [pc, #8]	; (de470 <sock_setsockopt+0xc>)
   de468:	681b      	ldr	r3, [r3, #0]
   de46a:	699b      	ldr	r3, [r3, #24]
   de46c:	9301      	str	r3, [sp, #4]
   de46e:	bd08      	pop	{r3, pc}
   de470:	00030238 	.word	0x00030238

000de474 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   de474:	b508      	push	{r3, lr}
   de476:	4b02      	ldr	r3, [pc, #8]	; (de480 <sock_close+0xc>)
   de478:	681b      	ldr	r3, [r3, #0]
   de47a:	69db      	ldr	r3, [r3, #28]
   de47c:	9301      	str	r3, [sp, #4]
   de47e:	bd08      	pop	{r3, pc}
   de480:	00030238 	.word	0x00030238

000de484 <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   de484:	b508      	push	{r3, lr}
   de486:	4b02      	ldr	r3, [pc, #8]	; (de490 <sock_recvfrom+0xc>)
   de488:	681b      	ldr	r3, [r3, #0]
   de48a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   de48c:	9301      	str	r3, [sp, #4]
   de48e:	bd08      	pop	{r3, pc}
   de490:	00030238 	.word	0x00030238

000de494 <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   de494:	b508      	push	{r3, lr}
   de496:	4b02      	ldr	r3, [pc, #8]	; (de4a0 <sock_sendto+0xc>)
   de498:	681b      	ldr	r3, [r3, #0]
   de49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   de49c:	9301      	str	r3, [sp, #4]
   de49e:	bd08      	pop	{r3, pc}
   de4a0:	00030238 	.word	0x00030238

000de4a4 <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   de4a4:	b508      	push	{r3, lr}
   de4a6:	4b02      	ldr	r3, [pc, #8]	; (de4b0 <sock_socket+0xc>)
   de4a8:	681b      	ldr	r3, [r3, #0]
   de4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   de4ac:	9301      	str	r3, [sp, #4]
   de4ae:	bd08      	pop	{r3, pc}
   de4b0:	00030238 	.word	0x00030238

000de4b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   de4b4:	b508      	push	{r3, lr}
   de4b6:	4b02      	ldr	r3, [pc, #8]	; (de4c0 <HAL_USB_USART_Init+0xc>)
   de4b8:	681b      	ldr	r3, [r3, #0]
   de4ba:	681b      	ldr	r3, [r3, #0]
   de4bc:	9301      	str	r3, [sp, #4]
   de4be:	bd08      	pop	{r3, pc}
   de4c0:	0003024c 	.word	0x0003024c

000de4c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   de4c4:	b508      	push	{r3, lr}
   de4c6:	4b02      	ldr	r3, [pc, #8]	; (de4d0 <HAL_USB_USART_Available_Data+0xc>)
   de4c8:	681b      	ldr	r3, [r3, #0]
   de4ca:	691b      	ldr	r3, [r3, #16]
   de4cc:	9301      	str	r3, [sp, #4]
   de4ce:	bd08      	pop	{r3, pc}
   de4d0:	0003024c 	.word	0x0003024c

000de4d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   de4d4:	b508      	push	{r3, lr}
   de4d6:	4b02      	ldr	r3, [pc, #8]	; (de4e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   de4d8:	681b      	ldr	r3, [r3, #0]
   de4da:	695b      	ldr	r3, [r3, #20]
   de4dc:	9301      	str	r3, [sp, #4]
   de4de:	bd08      	pop	{r3, pc}
   de4e0:	0003024c 	.word	0x0003024c

000de4e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   de4e4:	b508      	push	{r3, lr}
   de4e6:	4b02      	ldr	r3, [pc, #8]	; (de4f0 <HAL_USB_USART_Receive_Data+0xc>)
   de4e8:	681b      	ldr	r3, [r3, #0]
   de4ea:	699b      	ldr	r3, [r3, #24]
   de4ec:	9301      	str	r3, [sp, #4]
   de4ee:	bd08      	pop	{r3, pc}
   de4f0:	0003024c 	.word	0x0003024c

000de4f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   de4f4:	b508      	push	{r3, lr}
   de4f6:	4b02      	ldr	r3, [pc, #8]	; (de500 <HAL_USB_USART_Send_Data+0xc>)
   de4f8:	681b      	ldr	r3, [r3, #0]
   de4fa:	69db      	ldr	r3, [r3, #28]
   de4fc:	9301      	str	r3, [sp, #4]
   de4fe:	bd08      	pop	{r3, pc}
   de500:	0003024c 	.word	0x0003024c

000de504 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   de504:	b508      	push	{r3, lr}
   de506:	4b02      	ldr	r3, [pc, #8]	; (de510 <HAL_USB_USART_Flush_Data+0xc>)
   de508:	681b      	ldr	r3, [r3, #0]
   de50a:	6a1b      	ldr	r3, [r3, #32]
   de50c:	9301      	str	r3, [sp, #4]
   de50e:	bd08      	pop	{r3, pc}
   de510:	0003024c 	.word	0x0003024c

000de514 <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   de514:	b508      	push	{r3, lr}
   de516:	4b02      	ldr	r3, [pc, #8]	; (de520 <wlan_connected_info+0xc>)
   de518:	681b      	ldr	r3, [r3, #0]
   de51a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   de51c:	9301      	str	r3, [sp, #4]
   de51e:	bd08      	pop	{r3, pc}
   de520:	00030274 	.word	0x00030274

000de524 <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   de524:	b508      	push	{r3, lr}
   de526:	4b02      	ldr	r3, [pc, #8]	; (de530 <LED_SetSignalingColor+0xc>)
   de528:	681b      	ldr	r3, [r3, #0]
   de52a:	685b      	ldr	r3, [r3, #4]
   de52c:	9301      	str	r3, [sp, #4]
   de52e:	bd08      	pop	{r3, pc}
   de530:	00030260 	.word	0x00030260

000de534 <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   de534:	b508      	push	{r3, lr}
   de536:	4b02      	ldr	r3, [pc, #8]	; (de540 <LED_Signaling_Start+0xc>)
   de538:	681b      	ldr	r3, [r3, #0]
   de53a:	689b      	ldr	r3, [r3, #8]
   de53c:	9301      	str	r3, [sp, #4]
   de53e:	bd08      	pop	{r3, pc}
   de540:	00030260 	.word	0x00030260

000de544 <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   de544:	b508      	push	{r3, lr}
   de546:	4b02      	ldr	r3, [pc, #8]	; (de550 <LED_Signaling_Stop+0xc>)
   de548:	681b      	ldr	r3, [r3, #0]
   de54a:	68db      	ldr	r3, [r3, #12]
   de54c:	9301      	str	r3, [sp, #4]
   de54e:	bd08      	pop	{r3, pc}
   de550:	00030260 	.word	0x00030260

000de554 <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   de554:	b508      	push	{r3, lr}
   de556:	4b02      	ldr	r3, [pc, #8]	; (de560 <LED_RGB_IsOverRidden+0xc>)
   de558:	681b      	ldr	r3, [r3, #0]
   de55a:	699b      	ldr	r3, [r3, #24]
   de55c:	9301      	str	r3, [sp, #4]
   de55e:	bd08      	pop	{r3, pc}
   de560:	00030260 	.word	0x00030260

000de564 <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   de564:	b508      	push	{r3, lr}
   de566:	4b02      	ldr	r3, [pc, #8]	; (de570 <LED_On+0xc>)
   de568:	681b      	ldr	r3, [r3, #0]
   de56a:	69db      	ldr	r3, [r3, #28]
   de56c:	9301      	str	r3, [sp, #4]
   de56e:	bd08      	pop	{r3, pc}
   de570:	00030260 	.word	0x00030260

000de574 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   de574:	b508      	push	{r3, lr}
   de576:	4b02      	ldr	r3, [pc, #8]	; (de580 <log_message+0xc>)
   de578:	681b      	ldr	r3, [r3, #0]
   de57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   de57c:	9301      	str	r3, [sp, #4]
   de57e:	bd08      	pop	{r3, pc}
   de580:	00030260 	.word	0x00030260

000de584 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   de584:	b508      	push	{r3, lr}
   de586:	4b02      	ldr	r3, [pc, #8]	; (de590 <system_mode+0xc>)
   de588:	681b      	ldr	r3, [r3, #0]
   de58a:	681b      	ldr	r3, [r3, #0]
   de58c:	9301      	str	r3, [sp, #4]
   de58e:	bd08      	pop	{r3, pc}
   de590:	00030220 	.word	0x00030220

000de594 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   de594:	b508      	push	{r3, lr}
   de596:	4b02      	ldr	r3, [pc, #8]	; (de5a0 <set_system_mode+0xc>)
   de598:	681b      	ldr	r3, [r3, #0]
   de59a:	685b      	ldr	r3, [r3, #4]
   de59c:	9301      	str	r3, [sp, #4]
   de59e:	bd08      	pop	{r3, pc}
   de5a0:	00030220 	.word	0x00030220

000de5a4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   de5a4:	b508      	push	{r3, lr}
   de5a6:	4b02      	ldr	r3, [pc, #8]	; (de5b0 <system_delay_ms+0xc>)
   de5a8:	681b      	ldr	r3, [r3, #0]
   de5aa:	695b      	ldr	r3, [r3, #20]
   de5ac:	9301      	str	r3, [sp, #4]
   de5ae:	bd08      	pop	{r3, pc}
   de5b0:	00030220 	.word	0x00030220

000de5b4 <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   de5b4:	b508      	push	{r3, lr}
   de5b6:	4b02      	ldr	r3, [pc, #8]	; (de5c0 <system_version_info+0xc>)
   de5b8:	681b      	ldr	r3, [r3, #0]
   de5ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de5bc:	9301      	str	r3, [sp, #4]
   de5be:	bd08      	pop	{r3, pc}
   de5c0:	00030220 	.word	0x00030220

000de5c4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   de5c4:	b508      	push	{r3, lr}
   de5c6:	4b02      	ldr	r3, [pc, #8]	; (de5d0 <application_thread_current+0xc>)
   de5c8:	681b      	ldr	r3, [r3, #0]
   de5ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   de5cc:	9301      	str	r3, [sp, #4]
   de5ce:	bd08      	pop	{r3, pc}
   de5d0:	00030220 	.word	0x00030220

000de5d4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   de5d4:	b508      	push	{r3, lr}
   de5d6:	4b02      	ldr	r3, [pc, #8]	; (de5e0 <application_thread_invoke+0xc>)
   de5d8:	681b      	ldr	r3, [r3, #0]
   de5da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   de5dc:	9301      	str	r3, [sp, #4]
   de5de:	bd08      	pop	{r3, pc}
   de5e0:	00030220 	.word	0x00030220

000de5e4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   de5e4:	b508      	push	{r3, lr}
   de5e6:	4b02      	ldr	r3, [pc, #8]	; (de5f0 <system_thread_get_state+0xc>)
   de5e8:	681b      	ldr	r3, [r3, #0]
   de5ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   de5ec:	9301      	str	r3, [sp, #4]
   de5ee:	bd08      	pop	{r3, pc}
   de5f0:	00030220 	.word	0x00030220

000de5f4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   de5f4:	b508      	push	{r3, lr}
   de5f6:	4b03      	ldr	r3, [pc, #12]	; (de604 <system_ctrl_set_app_request_handler+0x10>)
   de5f8:	681b      	ldr	r3, [r3, #0]
   de5fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   de5fe:	9301      	str	r3, [sp, #4]
   de600:	bd08      	pop	{r3, pc}
   de602:	0000      	.short	0x0000
   de604:	00030220 	.word	0x00030220

000de608 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   de608:	b508      	push	{r3, lr}
   de60a:	4b03      	ldr	r3, [pc, #12]	; (de618 <system_ctrl_set_result+0x10>)
   de60c:	681b      	ldr	r3, [r3, #0]
   de60e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   de612:	9301      	str	r3, [sp, #4]
   de614:	bd08      	pop	{r3, pc}
   de616:	0000      	.short	0x0000
   de618:	00030220 	.word	0x00030220

000de61c <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   de61c:	b508      	push	{r3, lr}
   de61e:	4b03      	ldr	r3, [pc, #12]	; (de62c <system_invoke_event_handler+0x10>)
   de620:	681b      	ldr	r3, [r3, #0]
   de622:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   de626:	9301      	str	r3, [sp, #4]
   de628:	bd08      	pop	{r3, pc}
   de62a:	0000      	.short	0x0000
   de62c:	00030220 	.word	0x00030220

000de630 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   de630:	b508      	push	{r3, lr}
   de632:	4b02      	ldr	r3, [pc, #8]	; (de63c <network_config+0xc>)
   de634:	681b      	ldr	r3, [r3, #0]
   de636:	681b      	ldr	r3, [r3, #0]
   de638:	9301      	str	r3, [sp, #4]
   de63a:	bd08      	pop	{r3, pc}
   de63c:	00030240 	.word	0x00030240

000de640 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   de640:	b508      	push	{r3, lr}
   de642:	4b02      	ldr	r3, [pc, #8]	; (de64c <network_connect+0xc>)
   de644:	681b      	ldr	r3, [r3, #0]
   de646:	685b      	ldr	r3, [r3, #4]
   de648:	9301      	str	r3, [sp, #4]
   de64a:	bd08      	pop	{r3, pc}
   de64c:	00030240 	.word	0x00030240

000de650 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   de650:	b508      	push	{r3, lr}
   de652:	4b02      	ldr	r3, [pc, #8]	; (de65c <network_connecting+0xc>)
   de654:	681b      	ldr	r3, [r3, #0]
   de656:	689b      	ldr	r3, [r3, #8]
   de658:	9301      	str	r3, [sp, #4]
   de65a:	bd08      	pop	{r3, pc}
   de65c:	00030240 	.word	0x00030240

000de660 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   de660:	b508      	push	{r3, lr}
   de662:	4b02      	ldr	r3, [pc, #8]	; (de66c <network_disconnect+0xc>)
   de664:	681b      	ldr	r3, [r3, #0]
   de666:	68db      	ldr	r3, [r3, #12]
   de668:	9301      	str	r3, [sp, #4]
   de66a:	bd08      	pop	{r3, pc}
   de66c:	00030240 	.word	0x00030240

000de670 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   de670:	b508      	push	{r3, lr}
   de672:	4b02      	ldr	r3, [pc, #8]	; (de67c <network_ready+0xc>)
   de674:	681b      	ldr	r3, [r3, #0]
   de676:	691b      	ldr	r3, [r3, #16]
   de678:	9301      	str	r3, [sp, #4]
   de67a:	bd08      	pop	{r3, pc}
   de67c:	00030240 	.word	0x00030240

000de680 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   de680:	b508      	push	{r3, lr}
   de682:	4b02      	ldr	r3, [pc, #8]	; (de68c <network_on+0xc>)
   de684:	681b      	ldr	r3, [r3, #0]
   de686:	695b      	ldr	r3, [r3, #20]
   de688:	9301      	str	r3, [sp, #4]
   de68a:	bd08      	pop	{r3, pc}
   de68c:	00030240 	.word	0x00030240

000de690 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   de690:	b508      	push	{r3, lr}
   de692:	4b02      	ldr	r3, [pc, #8]	; (de69c <network_off+0xc>)
   de694:	681b      	ldr	r3, [r3, #0]
   de696:	699b      	ldr	r3, [r3, #24]
   de698:	9301      	str	r3, [sp, #4]
   de69a:	bd08      	pop	{r3, pc}
   de69c:	00030240 	.word	0x00030240

000de6a0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   de6a0:	b508      	push	{r3, lr}
   de6a2:	4b02      	ldr	r3, [pc, #8]	; (de6ac <network_listen+0xc>)
   de6a4:	681b      	ldr	r3, [r3, #0]
   de6a6:	69db      	ldr	r3, [r3, #28]
   de6a8:	9301      	str	r3, [sp, #4]
   de6aa:	bd08      	pop	{r3, pc}
   de6ac:	00030240 	.word	0x00030240

000de6b0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   de6b0:	b508      	push	{r3, lr}
   de6b2:	4b02      	ldr	r3, [pc, #8]	; (de6bc <network_listening+0xc>)
   de6b4:	681b      	ldr	r3, [r3, #0]
   de6b6:	6a1b      	ldr	r3, [r3, #32]
   de6b8:	9301      	str	r3, [sp, #4]
   de6ba:	bd08      	pop	{r3, pc}
   de6bc:	00030240 	.word	0x00030240

000de6c0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   de6c0:	b508      	push	{r3, lr}
   de6c2:	4b02      	ldr	r3, [pc, #8]	; (de6cc <network_set_listen_timeout+0xc>)
   de6c4:	681b      	ldr	r3, [r3, #0]
   de6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de6c8:	9301      	str	r3, [sp, #4]
   de6ca:	bd08      	pop	{r3, pc}
   de6cc:	00030240 	.word	0x00030240

000de6d0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   de6d0:	b508      	push	{r3, lr}
   de6d2:	4b02      	ldr	r3, [pc, #8]	; (de6dc <network_get_listen_timeout+0xc>)
   de6d4:	681b      	ldr	r3, [r3, #0]
   de6d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   de6d8:	9301      	str	r3, [sp, #4]
   de6da:	bd08      	pop	{r3, pc}
   de6dc:	00030240 	.word	0x00030240

000de6e0 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   de6e0:	b508      	push	{r3, lr}
   de6e2:	4b02      	ldr	r3, [pc, #8]	; (de6ec <spark_variable+0xc>)
   de6e4:	681b      	ldr	r3, [r3, #0]
   de6e6:	681b      	ldr	r3, [r3, #0]
   de6e8:	9301      	str	r3, [sp, #4]
   de6ea:	bd08      	pop	{r3, pc}
   de6ec:	00030244 	.word	0x00030244

000de6f0 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   de6f0:	b508      	push	{r3, lr}
   de6f2:	4b02      	ldr	r3, [pc, #8]	; (de6fc <spark_process+0xc>)
   de6f4:	681b      	ldr	r3, [r3, #0]
   de6f6:	689b      	ldr	r3, [r3, #8]
   de6f8:	9301      	str	r3, [sp, #4]
   de6fa:	bd08      	pop	{r3, pc}
   de6fc:	00030244 	.word	0x00030244

000de700 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   de700:	b508      	push	{r3, lr}
   de702:	4b02      	ldr	r3, [pc, #8]	; (de70c <spark_cloud_flag_connected+0xc>)
   de704:	681b      	ldr	r3, [r3, #0]
   de706:	695b      	ldr	r3, [r3, #20]
   de708:	9301      	str	r3, [sp, #4]
   de70a:	bd08      	pop	{r3, pc}
   de70c:	00030244 	.word	0x00030244

000de710 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   de710:	b508      	push	{r3, lr}
   de712:	4b02      	ldr	r3, [pc, #8]	; (de71c <spark_send_event+0xc>)
   de714:	681b      	ldr	r3, [r3, #0]
   de716:	6a1b      	ldr	r3, [r3, #32]
   de718:	9301      	str	r3, [sp, #4]
   de71a:	bd08      	pop	{r3, pc}
   de71c:	00030244 	.word	0x00030244

000de720 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   de720:	b508      	push	{r3, lr}
   de722:	4b02      	ldr	r3, [pc, #8]	; (de72c <spark_subscribe+0xc>)
   de724:	681b      	ldr	r3, [r3, #0]
   de726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   de728:	9301      	str	r3, [sp, #4]
   de72a:	bd08      	pop	{r3, pc}
   de72c:	00030244 	.word	0x00030244

000de730 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   de730:	b508      	push	{r3, lr}
   de732:	4b02      	ldr	r3, [pc, #8]	; (de73c <spark_sync_time+0xc>)
   de734:	681b      	ldr	r3, [r3, #0]
   de736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   de738:	9301      	str	r3, [sp, #4]
   de73a:	bd08      	pop	{r3, pc}
   de73c:	00030244 	.word	0x00030244

000de740 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   de740:	b508      	push	{r3, lr}
   de742:	4b02      	ldr	r3, [pc, #8]	; (de74c <spark_sync_time_pending+0xc>)
   de744:	681b      	ldr	r3, [r3, #0]
   de746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de748:	9301      	str	r3, [sp, #4]
   de74a:	bd08      	pop	{r3, pc}
   de74c:	00030244 	.word	0x00030244

000de750 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   de750:	b508      	push	{r3, lr}
   de752:	4b02      	ldr	r3, [pc, #8]	; (de75c <spark_set_random_seed_from_cloud_handler+0xc>)
   de754:	681b      	ldr	r3, [r3, #0]
   de756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   de758:	9301      	str	r3, [sp, #4]
   de75a:	bd08      	pop	{r3, pc}
   de75c:	00030244 	.word	0x00030244

000de760 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   de760:	b508      	push	{r3, lr}
   de762:	4b02      	ldr	r3, [pc, #8]	; (de76c <malloc+0xc>)
   de764:	681b      	ldr	r3, [r3, #0]
   de766:	681b      	ldr	r3, [r3, #0]
   de768:	9301      	str	r3, [sp, #4]
   de76a:	bd08      	pop	{r3, pc}
   de76c:	0003021c 	.word	0x0003021c

000de770 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   de770:	b508      	push	{r3, lr}
   de772:	4b02      	ldr	r3, [pc, #8]	; (de77c <free+0xc>)
   de774:	681b      	ldr	r3, [r3, #0]
   de776:	685b      	ldr	r3, [r3, #4]
   de778:	9301      	str	r3, [sp, #4]
   de77a:	bd08      	pop	{r3, pc}
   de77c:	0003021c 	.word	0x0003021c

000de780 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   de780:	b508      	push	{r3, lr}
   de782:	4b02      	ldr	r3, [pc, #8]	; (de78c <realloc+0xc>)
   de784:	681b      	ldr	r3, [r3, #0]
   de786:	689b      	ldr	r3, [r3, #8]
   de788:	9301      	str	r3, [sp, #4]
   de78a:	bd08      	pop	{r3, pc}
   de78c:	0003021c 	.word	0x0003021c

000de790 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   de790:	b508      	push	{r3, lr}
   de792:	4b02      	ldr	r3, [pc, #8]	; (de79c <siscanf+0xc>)
   de794:	681b      	ldr	r3, [r3, #0]
   de796:	699b      	ldr	r3, [r3, #24]
   de798:	9301      	str	r3, [sp, #4]
   de79a:	bd08      	pop	{r3, pc}
   de79c:	0003021c 	.word	0x0003021c

000de7a0 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   de7a0:	b508      	push	{r3, lr}
   de7a2:	4b02      	ldr	r3, [pc, #8]	; (de7ac <abort+0xc>)
   de7a4:	681b      	ldr	r3, [r3, #0]
   de7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   de7a8:	9301      	str	r3, [sp, #4]
   de7aa:	bd08      	pop	{r3, pc}
   de7ac:	0003021c 	.word	0x0003021c

000de7b0 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   de7b0:	b508      	push	{r3, lr}
   de7b2:	4b02      	ldr	r3, [pc, #8]	; (de7bc <_malloc_r+0xc>)
   de7b4:	681b      	ldr	r3, [r3, #0]
   de7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   de7b8:	9301      	str	r3, [sp, #4]
   de7ba:	bd08      	pop	{r3, pc}
   de7bc:	0003021c 	.word	0x0003021c

000de7c0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   de7c0:	2200      	movs	r2, #0
   de7c2:	4611      	mov	r1, r2
   de7c4:	6840      	ldr	r0, [r0, #4]
   de7c6:	f7ff bf73 	b.w	de6b0 <network_listening>

000de7ca <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   de7ca:	2200      	movs	r2, #0
   de7cc:	4611      	mov	r1, r2
   de7ce:	6840      	ldr	r0, [r0, #4]
   de7d0:	f7ff bf7e 	b.w	de6d0 <network_get_listen_timeout>

000de7d4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   de7d4:	2200      	movs	r2, #0
   de7d6:	6840      	ldr	r0, [r0, #4]
   de7d8:	f7ff bf72 	b.w	de6c0 <network_set_listen_timeout>

000de7dc <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   de7dc:	2200      	movs	r2, #0
   de7de:	f081 0101 	eor.w	r1, r1, #1
   de7e2:	6840      	ldr	r0, [r0, #4]
   de7e4:	f7ff bf5c 	b.w	de6a0 <network_listen>

000de7e8 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   de7e8:	2300      	movs	r3, #0
   de7ea:	461a      	mov	r2, r3
   de7ec:	4619      	mov	r1, r3
   de7ee:	6840      	ldr	r0, [r0, #4]
   de7f0:	f7ff bf4e 	b.w	de690 <network_off>

000de7f4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   de7f4:	2300      	movs	r3, #0
   de7f6:	461a      	mov	r2, r3
   de7f8:	4619      	mov	r1, r3
   de7fa:	6840      	ldr	r0, [r0, #4]
   de7fc:	f7ff bf40 	b.w	de680 <network_on>

000de800 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   de800:	2200      	movs	r2, #0
   de802:	4611      	mov	r1, r2
   de804:	6840      	ldr	r0, [r0, #4]
   de806:	f7ff bf33 	b.w	de670 <network_ready>

000de80a <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   de80a:	2200      	movs	r2, #0
   de80c:	4611      	mov	r1, r2
   de80e:	6840      	ldr	r0, [r0, #4]
   de810:	f7ff bf1e 	b.w	de650 <network_connecting>

000de814 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   de814:	2200      	movs	r2, #0
   de816:	2102      	movs	r1, #2
   de818:	6840      	ldr	r0, [r0, #4]
   de81a:	f7ff bf21 	b.w	de660 <network_disconnect>

000de81e <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   de81e:	2300      	movs	r3, #0
   de820:	461a      	mov	r2, r3
   de822:	6840      	ldr	r0, [r0, #4]
   de824:	f7ff bf0c 	b.w	de640 <network_connect>

000de828 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   de828:	4b02      	ldr	r3, [pc, #8]	; (de834 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   de82a:	2203      	movs	r2, #3
   de82c:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   de82e:	4a02      	ldr	r2, [pc, #8]	; (de838 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   de830:	601a      	str	r2, [r3, #0]
   de832:	4770      	bx	lr
   de834:	2003e370 	.word	0x2003e370
   de838:	000e3b74 	.word	0x000e3b74

000de83c <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   de83c:	b510      	push	{r4, lr}
   de83e:	4604      	mov	r4, r0
{
    _spi = spi;
   de840:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   de842:	4608      	mov	r0, r1
   de844:	f7ff fc8e 	bl	de164 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   de848:	2300      	movs	r3, #0
   de84a:	6063      	str	r3, [r4, #4]
}
   de84c:	4620      	mov	r0, r4
   de84e:	bd10      	pop	{r4, pc}

000de850 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   de850:	7800      	ldrb	r0, [r0, #0]
   de852:	f7ff bc8f 	b.w	de174 <HAL_SPI_Is_Enabled>
	...

000de858 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   de858:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   de85a:	4c09      	ldr	r4, [pc, #36]	; (de880 <_GLOBAL__sub_I_System+0x28>)
   de85c:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   de85e:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   de862:	6020      	str	r0, [r4, #0]
   de864:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   de866:	71a0      	strb	r0, [r4, #6]
   de868:	8120      	strh	r0, [r4, #8]
   de86a:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   de86c:	f7ff fe92 	bl	de594 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   de870:	4620      	mov	r0, r4
   de872:	4a04      	ldr	r2, [pc, #16]	; (de884 <_GLOBAL__sub_I_System+0x2c>)
   de874:	4904      	ldr	r1, [pc, #16]	; (de888 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   de876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   de87a:	f001 bfef 	b.w	e085c <__aeabi_atexit>
   de87e:	bf00      	nop
   de880:	2003e378 	.word	0x2003e378
   de884:	2003e2e0 	.word	0x2003e2e0
   de888:	000d43ed 	.word	0x000d43ed

000de88c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   de88c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   de88e:	6804      	ldr	r4, [r0, #0]
   de890:	6b24      	ldr	r4, [r4, #48]	; 0x30
   de892:	46a4      	mov	ip, r4
    }
   de894:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   de898:	4760      	bx	ip

000de89a <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   de89a:	6803      	ldr	r3, [r0, #0]
   de89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   de89e:	4718      	bx	r3

000de8a0 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   de8a0:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   de8a2:	4770      	bx	lr

000de8a4 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   de8a4:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   de8a6:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   de8a8:	1a10      	subs	r0, r2, r0
   de8aa:	4770      	bx	lr

000de8ac <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   de8ac:	b513      	push	{r0, r1, r4, lr}
   de8ae:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   de8b0:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   de8b2:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   de8b6:	68d4      	ldr	r4, [r2, #12]
   de8b8:	4619      	mov	r1, r3
   de8ba:	2201      	movs	r2, #1
   de8bc:	47a0      	blx	r4
}
   de8be:	b002      	add	sp, #8
   de8c0:	bd10      	pop	{r4, pc}

000de8c2 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   de8c2:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   de8c4:	6803      	ldr	r3, [r0, #0]
   de8c6:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   de8c8:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   de8ca:	4798      	blx	r3
   de8cc:	b128      	cbz	r0, de8da <_ZN3UDP4readEv+0x18>
   de8ce:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   de8d0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de8d2:	1c59      	adds	r1, r3, #1
   de8d4:	86e1      	strh	r1, [r4, #54]	; 0x36
   de8d6:	5cd0      	ldrb	r0, [r2, r3]
   de8d8:	bd10      	pop	{r4, pc}
   de8da:	f04f 30ff 	mov.w	r0, #4294967295
}
   de8de:	bd10      	pop	{r4, pc}

000de8e0 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   de8e0:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   de8e2:	6803      	ldr	r3, [r0, #0]
   de8e4:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   de8e6:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   de8e8:	4798      	blx	r3
   de8ea:	b118      	cbz	r0, de8f4 <_ZN3UDP4peekEv+0x14>
   de8ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   de8ee:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   de8f0:	5cd0      	ldrb	r0, [r2, r3]
   de8f2:	bd10      	pop	{r4, pc}
   de8f4:	f04f 30ff 	mov.w	r0, #4294967295
}
   de8f8:	bd10      	pop	{r4, pc}

000de8fa <_ZN3UDP5flushEv>:

void UDP::flush() {
   de8fa:	4770      	bx	lr

000de8fc <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   de8fc:	b410      	push	{r4}
   de8fe:	4603      	mov	r3, r0
   de900:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   de902:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   de904:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   de906:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   de908:	6803      	ldr	r3, [r0, #0]
   de90a:	1a52      	subs	r2, r2, r1
   de90c:	68db      	ldr	r3, [r3, #12]
   de90e:	4421      	add	r1, r4
}
   de910:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   de914:	4718      	bx	r3

000de916 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   de916:	f1a0 0010 	sub.w	r0, r0, #16
   de91a:	f7ff bfef 	b.w	de8fc <_ZNK3UDP7printToER5Print>

000de91e <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   de91e:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   de920:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   de922:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   de924:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   de926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   de928:	4604      	mov	r4, r0
   de92a:	460f      	mov	r7, r1
   de92c:	4615      	mov	r5, r2
    stop();
   de92e:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   de930:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   de932:	4632      	mov	r2, r6
   de934:	2100      	movs	r1, #0
   de936:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   de938:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   de93a:	f002 ff0d 	bl	e1758 <memset>
    saddr.sin6_len = sizeof(saddr);
   de93e:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   de942:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   de944:	260a      	movs	r6, #10
   de946:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   de94a:	f7ff fcfb 	bl	de344 <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   de94e:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   de950:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   de954:	2102      	movs	r1, #2
   de956:	4630      	mov	r0, r6
   de958:	f7ff fda4 	bl	de4a4 <sock_socket>

    if (_sock < 0) {
   de95c:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   de95e:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   de960:	db24      	blt.n	de9ac <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   de962:	2204      	movs	r2, #4
   de964:	9200      	str	r2, [sp, #0]
   de966:	ab02      	add	r3, sp, #8
   de968:	f640 71ff 	movw	r1, #4095	; 0xfff
   de96c:	f7ff fd7a 	bl	de464 <sock_setsockopt>
   de970:	b9e0      	cbnz	r0, de9ac <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   de972:	b195      	cbz	r5, de99a <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   de974:	9003      	str	r0, [sp, #12]
   de976:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   de97a:	a903      	add	r1, sp, #12
   de97c:	b2e8      	uxtb	r0, r5
   de97e:	f7ff fc09 	bl	de194 <if_index_to_name>
   de982:	b998      	cbnz	r0, de9ac <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   de984:	2306      	movs	r3, #6
   de986:	9300      	str	r3, [sp, #0]
   de988:	f241 020b 	movw	r2, #4107	; 0x100b
   de98c:	ab03      	add	r3, sp, #12
   de98e:	f640 71ff 	movw	r1, #4095	; 0xfff
   de992:	6960      	ldr	r0, [r4, #20]
   de994:	f7ff fd66 	bl	de464 <sock_setsockopt>
   de998:	b940      	cbnz	r0, de9ac <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   de99a:	221c      	movs	r2, #28
   de99c:	a905      	add	r1, sp, #20
   de99e:	6960      	ldr	r0, [r4, #20]
   de9a0:	f7ff fd58 	bl	de454 <sock_bind>
   de9a4:	b910      	cbnz	r0, de9ac <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   de9a6:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   de9a8:	2001      	movs	r0, #1
   de9aa:	e004      	b.n	de9b6 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   de9ac:	6823      	ldr	r3, [r4, #0]
   de9ae:	4620      	mov	r0, r4
   de9b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   de9b2:	4798      	blx	r3
   de9b4:	2000      	movs	r0, #0
    }
    return bound;
}
   de9b6:	b00d      	add	sp, #52	; 0x34
   de9b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000de9ba <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   de9ba:	b510      	push	{r4, lr}
   de9bc:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   de9be:	6940      	ldr	r0, [r0, #20]
   de9c0:	2800      	cmp	r0, #0
   de9c2:	db01      	blt.n	de9c8 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   de9c4:	f7ff fd56 	bl	de474 <sock_close>
    }

    _sock = -1;
   de9c8:	f04f 33ff 	mov.w	r3, #4294967295
   de9cc:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   de9ce:	2300      	movs	r3, #0
   de9d0:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   de9d2:	8723      	strh	r3, [r4, #56]	; 0x38
   de9d4:	bd10      	pop	{r4, pc}

000de9d6 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   de9d6:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   de9d8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   de9da:	4605      	mov	r5, r0
   de9dc:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   de9de:	b113      	cbz	r3, de9e6 <_ZN3UDP5writeEPKhj+0x10>
   de9e0:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   de9e2:	1a24      	subs	r4, r4, r0
   de9e4:	e000      	b.n	de9e8 <_ZN3UDP5writeEPKhj+0x12>
   de9e6:	461c      	mov	r4, r3
   de9e8:	4294      	cmp	r4, r2
   de9ea:	bf28      	it	cs
   de9ec:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   de9ee:	4622      	mov	r2, r4
   de9f0:	4418      	add	r0, r3
   de9f2:	f002 fea6 	bl	e1742 <memcpy>
    _offset += size;
   de9f6:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   de9f8:	4423      	add	r3, r4
   de9fa:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   de9fc:	4620      	mov	r0, r4
   de9fe:	bd38      	pop	{r3, r4, r5, pc}

000dea00 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   dea00:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   dea02:	6803      	ldr	r3, [r0, #0]
   dea04:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   dea06:	4604      	mov	r4, r0
   dea08:	460e      	mov	r6, r1
   dea0a:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   dea0c:	4798      	blx	r3
   dea0e:	b188      	cbz	r0, dea34 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   dea10:	6823      	ldr	r3, [r4, #0]
   dea12:	4620      	mov	r0, r4
   dea14:	691b      	ldr	r3, [r3, #16]
   dea16:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   dea18:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dea1a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   dea1c:	4285      	cmp	r5, r0
   dea1e:	bfa8      	it	ge
   dea20:	4605      	movge	r5, r0
   dea22:	4419      	add	r1, r3
   dea24:	462a      	mov	r2, r5
   dea26:	4630      	mov	r0, r6
   dea28:	f002 fe8b 	bl	e1742 <memcpy>
        _offset += read;
   dea2c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   dea2e:	442b      	add	r3, r5
   dea30:	86e3      	strh	r3, [r4, #54]	; 0x36
   dea32:	e001      	b.n	dea38 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   dea34:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   dea38:	4628      	mov	r0, r5
   dea3a:	bd70      	pop	{r4, r5, r6, pc}

000dea3c <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   dea3c:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   dea3e:	4604      	mov	r4, r0
   dea40:	4b05      	ldr	r3, [pc, #20]	; (dea58 <_ZN3UDP8remoteIPEv+0x1c>)
   dea42:	f844 3b04 	str.w	r3, [r4], #4
   dea46:	f101 0520 	add.w	r5, r1, #32
   dea4a:	4606      	mov	r6, r0
   dea4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dea4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dea50:	682b      	ldr	r3, [r5, #0]
   dea52:	7023      	strb	r3, [r4, #0]
   dea54:	4630      	mov	r0, r6
   dea56:	bd70      	pop	{r4, r5, r6, pc}
   dea58:	000e3d38 	.word	0x000e3d38

000dea5c <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dea5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   dea5e:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dea60:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dea62:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dea64:	6a97      	ldr	r7, [r2, #40]	; 0x28
   dea66:	4a0a      	ldr	r2, [pc, #40]	; (dea90 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   dea68:	9202      	str	r2, [sp, #8]
   dea6a:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   dea6c:	468e      	mov	lr, r1
   dea6e:	4606      	mov	r6, r0
   dea70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dea72:	ac03      	add	r4, sp, #12
   dea74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dea76:	682b      	ldr	r3, [r5, #0]
   dea78:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   dea7a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   dea7e:	9300      	str	r3, [sp, #0]
   dea80:	4662      	mov	r2, ip
   dea82:	ab02      	add	r3, sp, #8
   dea84:	4671      	mov	r1, lr
   dea86:	4630      	mov	r0, r6
   dea88:	47b8      	blx	r7
    }
   dea8a:	b009      	add	sp, #36	; 0x24
   dea8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dea8e:	bf00      	nop
   dea90:	000e3d38 	.word	0x000e3d38

000dea94 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   dea94:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   dea96:	6803      	ldr	r3, [r0, #0]
   dea98:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   dea9c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   dea9e:	4b0d      	ldr	r3, [pc, #52]	; (dead4 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   deaa0:	b089      	sub	sp, #36	; 0x24
   deaa2:	f100 0620 	add.w	r6, r0, #32
   deaa6:	4604      	mov	r4, r0
   deaa8:	9302      	str	r3, [sp, #8]
   deaaa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   deaac:	ad03      	add	r5, sp, #12
   deaae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   deab0:	6833      	ldr	r3, [r6, #0]
   deab2:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   deab4:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   deab6:	9300      	str	r3, [sp, #0]
   deab8:	4672      	mov	r2, lr
   deaba:	ab02      	add	r3, sp, #8
   deabc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   deabe:	4620      	mov	r0, r4
   deac0:	47b8      	blx	r7
    flush(); // wait for send to complete
   deac2:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   deac4:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   deac6:	69db      	ldr	r3, [r3, #28]
   deac8:	4620      	mov	r0, r4
   deaca:	4798      	blx	r3
    return result;
}
   deacc:	4628      	mov	r0, r5
   deace:	b009      	add	sp, #36	; 0x24
   dead0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dead2:	bf00      	nop
   dead4:	000e3d38 	.word	0x000e3d38

000dead8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   dead8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   deada:	7843      	ldrb	r3, [r0, #1]
   deadc:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   deade:	b08d      	sub	sp, #52	; 0x34
   deae0:	4605      	mov	r5, r0
   deae2:	460c      	mov	r4, r1
   deae4:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   deae6:	d101      	bne.n	deaec <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   deae8:	1d01      	adds	r1, r0, #4
   deaea:	e033      	b.n	deb54 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   deaec:	2b0a      	cmp	r3, #10
   deaee:	d135      	bne.n	deb5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   deaf0:	2211      	movs	r2, #17
   deaf2:	2100      	movs	r1, #0
   deaf4:	a801      	add	r0, sp, #4
   deaf6:	f002 fe2f 	bl	e1758 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   deafa:	68ab      	ldr	r3, [r5, #8]
   deafc:	b943      	cbnz	r3, deb10 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   deafe:	68eb      	ldr	r3, [r5, #12]
   deb00:	b933      	cbnz	r3, deb10 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   deb02:	f64f 70ff 	movw	r0, #65535	; 0xffff
   deb06:	692e      	ldr	r6, [r5, #16]
   deb08:	f7ff fc0c 	bl	de324 <inet_htonl>
   deb0c:	4286      	cmp	r6, r0
   deb0e:	d01f      	beq.n	deb50 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   deb10:	f105 0308 	add.w	r3, r5, #8
   deb14:	ae01      	add	r6, sp, #4
   deb16:	f105 0e18 	add.w	lr, r5, #24
   deb1a:	6818      	ldr	r0, [r3, #0]
   deb1c:	6859      	ldr	r1, [r3, #4]
   deb1e:	4632      	mov	r2, r6
   deb20:	c203      	stmia	r2!, {r0, r1}
   deb22:	3308      	adds	r3, #8
   deb24:	4573      	cmp	r3, lr
   deb26:	4616      	mov	r6, r2
   deb28:	d1f7      	bne.n	deb1a <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   deb2a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   deb2c:	a901      	add	r1, sp, #4
   deb2e:	a806      	add	r0, sp, #24
   deb30:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   deb32:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   deb36:	f000 ff5b 	bl	df9f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   deb3a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   deb3c:	3404      	adds	r4, #4
   deb3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   deb40:	6833      	ldr	r3, [r6, #0]
   deb42:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   deb44:	b157      	cbz	r7, deb5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   deb46:	8868      	ldrh	r0, [r5, #2]
   deb48:	f7ff fbf4 	bl	de334 <inet_ntohs>
   deb4c:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   deb4e:	e005      	b.n	deb5c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   deb50:	f105 0114 	add.w	r1, r5, #20
   deb54:	4620      	mov	r0, r4
   deb56:	f000 ff80 	bl	dfa5a <_ZN9IPAddressaSEPKh>
   deb5a:	e7f3      	b.n	deb44 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   deb5c:	b00d      	add	sp, #52	; 0x34
   deb5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000deb60 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   deb60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   deb64:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   deb66:	ab0e      	add	r3, sp, #56	; 0x38
   deb68:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   deb6a:	4606      	mov	r6, r0
   deb6c:	4617      	mov	r7, r2
   deb6e:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   deb70:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   deb74:	462a      	mov	r2, r5
   deb76:	4629      	mov	r1, r5
   deb78:	f7ff fab4 	bl	de0e4 <netdb_getaddrinfo>
   deb7c:	2800      	cmp	r0, #0
   deb7e:	db1f      	blt.n	debc0 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   deb80:	9b01      	ldr	r3, [sp, #4]
   deb82:	b1fb      	cbz	r3, debc4 <_ZN3UDP11beginPacketEPKct+0x64>
   deb84:	695b      	ldr	r3, [r3, #20]
   deb86:	b1eb      	cbz	r3, debc4 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   deb88:	a802      	add	r0, sp, #8
   deb8a:	f000 ff23 	bl	df9d4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   deb8e:	9b01      	ldr	r3, [sp, #4]
   deb90:	462a      	mov	r2, r5
   deb92:	6958      	ldr	r0, [r3, #20]
   deb94:	a902      	add	r1, sp, #8
   deb96:	f7ff ff9f 	bl	dead8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   deb9a:	a802      	add	r0, sp, #8
   deb9c:	f000 ff3a 	bl	dfa14 <_ZNK9IPAddresscvbEv>
        if (addr) {
   deba0:	b180      	cbz	r0, debc4 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   deba2:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   deba4:	ad03      	add	r5, sp, #12
   deba6:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   debaa:	4b0b      	ldr	r3, [pc, #44]	; (debd8 <_ZN3UDP11beginPacketEPKct+0x78>)
   debac:	9308      	str	r3, [sp, #32]
   debae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   debb0:	ac09      	add	r4, sp, #36	; 0x24
   debb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   debb4:	682b      	ldr	r3, [r5, #0]
   debb6:	7023      	strb	r3, [r4, #0]
   debb8:	463a      	mov	r2, r7
   debba:	a908      	add	r1, sp, #32
   debbc:	4630      	mov	r0, r6
   debbe:	47c0      	blx	r8
   debc0:	4604      	mov	r4, r0
   debc2:	e001      	b.n	debc8 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   debc4:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   debc8:	9801      	ldr	r0, [sp, #4]
   debca:	f7ff fa83 	bl	de0d4 <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   debce:	4620      	mov	r0, r4
   debd0:	b00e      	add	sp, #56	; 0x38
   debd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   debd6:	bf00      	nop
   debd8:	000e3d38 	.word	0x000e3d38

000debdc <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   debdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   debe0:	f8d0 8014 	ldr.w	r8, [r0, #20]
   debe4:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   debe8:	b08c      	sub	sp, #48	; 0x30
   debea:	4605      	mov	r5, r0
   debec:	460c      	mov	r4, r1
   debee:	4617      	mov	r7, r2
   debf0:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   debf2:	db00      	blt.n	debf6 <_ZN3UDP13receivePacketEPhjm+0x1a>
   debf4:	b911      	cbnz	r1, debfc <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   debf6:	f04f 30ff 	mov.w	r0, #4294967295
   debfa:	e035      	b.n	dec68 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   debfc:	f04f 0a1c 	mov.w	sl, #28
   dec00:	ae05      	add	r6, sp, #20
   dec02:	4652      	mov	r2, sl
   dec04:	2100      	movs	r1, #0
   dec06:	4630      	mov	r0, r6
   dec08:	f002 fda6 	bl	e1758 <memset>
        socklen_t slen = sizeof(saddr);
   dec0c:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   dec10:	f1b9 0f00 	cmp.w	r9, #0
   dec14:	d014      	beq.n	dec40 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   dec16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dec1a:	fbb9 f1f2 	udiv	r1, r9, r2
   dec1e:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   dec20:	fb02 9111 	mls	r1, r2, r1, r9
   dec24:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dec26:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   dec28:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   dec2a:	9300      	str	r3, [sp, #0]
   dec2c:	f241 0206 	movw	r2, #4102	; 0x1006
   dec30:	ab03      	add	r3, sp, #12
   dec32:	f640 71ff 	movw	r1, #4095	; 0xfff
   dec36:	4640      	mov	r0, r8
   dec38:	f7ff fc14 	bl	de464 <sock_setsockopt>
            if (ret) {
   dec3c:	b108      	cbz	r0, dec42 <_ZN3UDP13receivePacketEPhjm+0x66>
   dec3e:	e013      	b.n	dec68 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   dec40:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dec42:	ab02      	add	r3, sp, #8
   dec44:	9301      	str	r3, [sp, #4]
   dec46:	4621      	mov	r1, r4
   dec48:	4603      	mov	r3, r0
   dec4a:	9600      	str	r6, [sp, #0]
   dec4c:	463a      	mov	r2, r7
   dec4e:	6968      	ldr	r0, [r5, #20]
   dec50:	f7ff fc18 	bl	de484 <sock_recvfrom>
        if (ret >= 0) {
   dec54:	1e04      	subs	r4, r0, #0
   dec56:	db06      	blt.n	dec66 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   dec58:	f105 0234 	add.w	r2, r5, #52	; 0x34
   dec5c:	f105 011c 	add.w	r1, r5, #28
   dec60:	4630      	mov	r0, r6
   dec62:	f7ff ff39 	bl	dead8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   dec66:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   dec68:	b00c      	add	sp, #48	; 0x30
   dec6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000dec6e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dec6e:	b538      	push	{r3, r4, r5, lr}
   dec70:	4605      	mov	r5, r0
   dec72:	4614      	mov	r4, r2
   dec74:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   dec76:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   dec78:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   dec7a:	d111      	bne.n	deca0 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   dec7c:	231c      	movs	r3, #28
   dec7e:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   dec80:	230a      	movs	r3, #10
   dec82:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   dec84:	f7ff fb5e 	bl	de344 <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dec88:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   dec8a:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   dec8e:	1d2b      	adds	r3, r5, #4
   dec90:	3514      	adds	r5, #20
   dec92:	f853 2b04 	ldr.w	r2, [r3], #4
   dec96:	f844 2b04 	str.w	r2, [r4], #4
   dec9a:	42ab      	cmp	r3, r5
   dec9c:	d1f9      	bne.n	dec92 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   dec9e:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   deca0:	2b04      	cmp	r3, #4
   deca2:	d10a      	bne.n	decba <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   deca4:	2310      	movs	r3, #16
   deca6:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   deca8:	2302      	movs	r3, #2
   decaa:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   decac:	f7ff fb4a 	bl	de344 <inet_htons>
   decb0:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   decb2:	6868      	ldr	r0, [r5, #4]
   decb4:	f7ff fb36 	bl	de324 <inet_htonl>
   decb8:	6060      	str	r0, [r4, #4]
   decba:	bd38      	pop	{r3, r4, r5, pc}

000decbc <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   decbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   decc0:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   decc2:	ac03      	add	r4, sp, #12
   decc4:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   decc6:	4699      	mov	r9, r3
   decc8:	4606      	mov	r6, r0
   decca:	460f      	mov	r7, r1
   deccc:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   decce:	2100      	movs	r1, #0
   decd0:	462a      	mov	r2, r5
   decd2:	4620      	mov	r0, r4
   decd4:	f002 fd40 	bl	e1758 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   decd8:	4622      	mov	r2, r4
   decda:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   decde:	4648      	mov	r0, r9
   dece0:	f7ff ffc5 	bl	dec6e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   dece4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   dece8:	b143      	cbz	r3, decfc <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   decea:	e88d 0030 	stmia.w	sp, {r4, r5}
   decee:	2300      	movs	r3, #0
   decf0:	4642      	mov	r2, r8
   decf2:	4639      	mov	r1, r7
   decf4:	6970      	ldr	r0, [r6, #20]
   decf6:	f7ff fbcd 	bl	de494 <sock_sendto>
   decfa:	e001      	b.n	ded00 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   decfc:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   ded00:	b00b      	add	sp, #44	; 0x2c
   ded02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000ded06 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   ded06:	b5f0      	push	{r4, r5, r6, r7, lr}
   ded08:	b091      	sub	sp, #68	; 0x44
   ded0a:	460c      	mov	r4, r1
   ded0c:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   ded0e:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   ded10:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   ded12:	a809      	add	r0, sp, #36	; 0x24
   ded14:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   ded16:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   ded18:	f002 fd1e 	bl	e1758 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   ded1c:	aa09      	add	r2, sp, #36	; 0x24
   ded1e:	2100      	movs	r1, #0
   ded20:	4620      	mov	r0, r4
   ded22:	f7ff ffa4 	bl	dec6e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   ded26:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   ded2a:	2b02      	cmp	r3, #2
   ded2c:	d12e      	bne.n	ded8c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   ded2e:	2300      	movs	r3, #0
   ded30:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   ded32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   ded34:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   ded36:	b1dd      	cbz	r5, ded70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   ded38:	a902      	add	r1, sp, #8
   ded3a:	4628      	mov	r0, r5
   ded3c:	f7ff fa32 	bl	de1a4 <if_get_by_index>
   ded40:	b9b0      	cbnz	r0, ded70 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   ded42:	a910      	add	r1, sp, #64	; 0x40
   ded44:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   ded48:	9802      	ldr	r0, [sp, #8]
   ded4a:	f7ff fa33 	bl	de1b4 <if_get_addrs>
   ded4e:	b960      	cbnz	r0, ded6a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   ded50:	9b03      	ldr	r3, [sp, #12]
   ded52:	b153      	cbz	r3, ded6a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   ded54:	68da      	ldr	r2, [r3, #12]
   ded56:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   ded58:	7851      	ldrb	r1, [r2, #1]
   ded5a:	2902      	cmp	r1, #2
   ded5c:	d103      	bne.n	ded66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   ded5e:	6852      	ldr	r2, [r2, #4]
   ded60:	b10a      	cbz	r2, ded66 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   ded62:	9205      	str	r2, [sp, #20]
   ded64:	e001      	b.n	ded6a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   ded66:	681b      	ldr	r3, [r3, #0]
   ded68:	e7f3      	b.n	ded52 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   ded6a:	9803      	ldr	r0, [sp, #12]
   ded6c:	f7ff fa2a 	bl	de1c4 <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   ded70:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   ded72:	f04f 0308 	mov.w	r3, #8
   ded76:	9300      	str	r3, [sp, #0]
   ded78:	bf18      	it	ne
   ded7a:	2203      	movne	r2, #3
   ded7c:	ab04      	add	r3, sp, #16
   ded7e:	bf08      	it	eq
   ded80:	2204      	moveq	r2, #4
   ded82:	2100      	movs	r1, #0
   ded84:	4630      	mov	r0, r6
   ded86:	f7ff fb6d 	bl	de464 <sock_setsockopt>
   ded8a:	e01e      	b.n	dedca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   ded8c:	2b0a      	cmp	r3, #10
   ded8e:	d11a      	bne.n	dedc6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   ded90:	ac04      	add	r4, sp, #16
   ded92:	2214      	movs	r2, #20
   ded94:	2100      	movs	r1, #0
   ded96:	4620      	mov	r0, r4
   ded98:	f002 fcde 	bl	e1758 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   ded9c:	ab0b      	add	r3, sp, #44	; 0x2c
   ded9e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   deda0:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   deda2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   deda6:	f04f 0314 	mov.w	r3, #20
   dedaa:	9300      	str	r3, [sp, #0]
   dedac:	bf18      	it	ne
   dedae:	220c      	movne	r2, #12
   dedb0:	4623      	mov	r3, r4
   dedb2:	bf08      	it	eq
   dedb4:	220d      	moveq	r2, #13
   dedb6:	2129      	movs	r1, #41	; 0x29
   dedb8:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   dedba:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   dedbc:	f7ff fb52 	bl	de464 <sock_setsockopt>
   dedc0:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   dedc4:	e001      	b.n	dedca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   dedc6:	f04f 30ff 	mov.w	r0, #4294967295
}
   dedca:	b011      	add	sp, #68	; 0x44
   dedcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dedd0 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   dedd0:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   dedd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dedd6:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dedd8:	4b0b      	ldr	r3, [pc, #44]	; (dee08 <_ZN3UDPC1Ev+0x38>)
   dedda:	f103 0208 	add.w	r2, r3, #8
   dedde:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dede0:	2500      	movs	r5, #0
   dede2:	6103      	str	r3, [r0, #16]
   dede4:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   dede8:	4604      	mov	r4, r0
   dedea:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   dedec:	6002      	str	r2, [r0, #0]
   dedee:	6143      	str	r3, [r0, #20]
   dedf0:	301c      	adds	r0, #28
   dedf2:	f000 fdef 	bl	df9d4 <_ZN9IPAddressC1Ev>
   dedf6:	f44f 7300 	mov.w	r3, #512	; 0x200
   dedfa:	86e5      	strh	r5, [r4, #54]	; 0x36
   dedfc:	8725      	strh	r5, [r4, #56]	; 0x38
   dedfe:	63e5      	str	r5, [r4, #60]	; 0x3c
   dee00:	6423      	str	r3, [r4, #64]	; 0x40
   dee02:	6465      	str	r5, [r4, #68]	; 0x44
}
   dee04:	4620      	mov	r0, r4
   dee06:	bd38      	pop	{r3, r4, r5, pc}
   dee08:	000e3ba0 	.word	0x000e3ba0

000dee0c <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dee0c:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   dee0e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   dee12:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   dee14:	b123      	cbz	r3, dee20 <_ZN3UDP13releaseBufferEv+0x14>
   dee16:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   dee18:	b110      	cbz	r0, dee20 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   dee1a:	2101      	movs	r1, #1
   dee1c:	f001 fd2c 	bl	e0878 <_ZdlPvj>
    }
    _buffer = NULL;
   dee20:	2300      	movs	r3, #0
   dee22:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   dee24:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   dee28:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dee2a:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   dee2c:	8723      	strh	r3, [r4, #56]	; 0x38
   dee2e:	bd10      	pop	{r4, pc}

000dee30 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   dee30:	b570      	push	{r4, r5, r6, lr}
   dee32:	4604      	mov	r4, r0
   dee34:	4616      	mov	r6, r2
   dee36:	460d      	mov	r5, r1
    releaseBuffer();
   dee38:	f7ff ffe8 	bl	dee0c <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   dee3c:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   dee3e:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   dee40:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   dee42:	b93e      	cbnz	r6, dee54 <_ZN3UDP9setBufferEjPh+0x24>
   dee44:	b135      	cbz	r5, dee54 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   dee46:	4628      	mov	r0, r5
   dee48:	f7f5 f929 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   dee4c:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   dee4e:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   dee50:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   dee54:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   dee56:	b103      	cbz	r3, dee5a <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   dee58:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   dee5a:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   dee5c:	3000      	adds	r0, #0
   dee5e:	bf18      	it	ne
   dee60:	2001      	movne	r0, #1
   dee62:	bd70      	pop	{r4, r5, r6, pc}

000dee64 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dee64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dee66:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dee68:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   dee6a:	4605      	mov	r5, r0
   dee6c:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   dee6e:	b91a      	cbnz	r2, dee78 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   dee70:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dee72:	b109      	cbz	r1, dee78 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   dee74:	f7ff ffdc 	bl	dee30 <_ZN3UDP9setBufferEjPh>
   dee78:	3404      	adds	r4, #4
   dee7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dee7c:	f105 0620 	add.w	r6, r5, #32
   dee80:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   dee82:	6823      	ldr	r3, [r4, #0]
   dee84:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dee86:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   dee88:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   dee8a:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   dee8c:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   dee8e:	6c28      	ldr	r0, [r5, #64]	; 0x40
   dee90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dee92 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dee92:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   dee94:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   dee96:	4604      	mov	r4, r0
   dee98:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   dee9a:	b91a      	cbnz	r2, deea4 <_ZN3UDP11parsePacketEm+0x12>
   dee9c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   dee9e:	b109      	cbz	r1, deea4 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   deea0:	f7ff ffc6 	bl	dee30 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   deea4:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   deea6:	2200      	movs	r2, #0
   deea8:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   deeaa:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   deeac:	b149      	cbz	r1, deec2 <_ZN3UDP11parsePacketEm+0x30>
   deeae:	6c22      	ldr	r2, [r4, #64]	; 0x40
   deeb0:	b13a      	cbz	r2, deec2 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   deeb2:	6823      	ldr	r3, [r4, #0]
   deeb4:	4620      	mov	r0, r4
   deeb6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   deeb8:	4633      	mov	r3, r6
   deeba:	47a8      	blx	r5
        if (result > 0) {
   deebc:	2800      	cmp	r0, #0
            _total = result;
   deebe:	bfc8      	it	gt
   deec0:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   deec2:	6823      	ldr	r3, [r4, #0]
   deec4:	4620      	mov	r0, r4
   deec6:	691b      	ldr	r3, [r3, #16]
}
   deec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   deecc:	4718      	bx	r3
	...

000deed0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   deed0:	b510      	push	{r4, lr}
   deed2:	4b07      	ldr	r3, [pc, #28]	; (deef0 <_ZN3UDPD1Ev+0x20>)
   deed4:	f103 0208 	add.w	r2, r3, #8
   deed8:	336c      	adds	r3, #108	; 0x6c
   deeda:	4604      	mov	r4, r0
   deedc:	6002      	str	r2, [r0, #0]
   deede:	6103      	str	r3, [r0, #16]
   deee0:	f7ff fd6b 	bl	de9ba <_ZN3UDP4stopEv>
   deee4:	4620      	mov	r0, r4
   deee6:	f7ff ff91 	bl	dee0c <_ZN3UDP13releaseBufferEv>
   deeea:	4620      	mov	r0, r4
   deeec:	bd10      	pop	{r4, pc}
   deeee:	bf00      	nop
   deef0:	000e3ba0 	.word	0x000e3ba0

000deef4 <_ZN3UDPD0Ev>:
   deef4:	b510      	push	{r4, lr}
   deef6:	4604      	mov	r4, r0
   deef8:	f7ff ffea 	bl	deed0 <_ZN3UDPD1Ev>
   deefc:	4620      	mov	r0, r4
   deefe:	214c      	movs	r1, #76	; 0x4c
   def00:	f001 fcba 	bl	e0878 <_ZdlPvj>
   def04:	4620      	mov	r0, r4
   def06:	bd10      	pop	{r4, pc}

000def08 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   def08:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   def0a:	6940      	ldr	r0, [r0, #20]
   def0c:	2800      	cmp	r0, #0
   def0e:	db04      	blt.n	def1a <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   def10:	2301      	movs	r3, #1
   def12:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   def16:	f7ff bef6 	b.w	ded06 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   def1a:	f04f 30ff 	mov.w	r0, #4294967295
   def1e:	4770      	bx	lr

000def20 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   def20:	b510      	push	{r4, lr}
   def22:	4604      	mov	r4, r0
{
	free(buffer);
   def24:	6800      	ldr	r0, [r0, #0]
   def26:	f7ff fc23 	bl	de770 <free>
}
   def2a:	4620      	mov	r0, r4
   def2c:	bd10      	pop	{r4, pc}

000def2e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   def2e:	b510      	push	{r4, lr}
   def30:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   def32:	6800      	ldr	r0, [r0, #0]
   def34:	b108      	cbz	r0, def3a <_ZN6String10invalidateEv+0xc>
   def36:	f7ff fc1b 	bl	de770 <free>
	buffer = NULL;
   def3a:	2300      	movs	r3, #0
   def3c:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   def3e:	60a3      	str	r3, [r4, #8]
   def40:	6063      	str	r3, [r4, #4]
   def42:	bd10      	pop	{r4, pc}

000def44 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   def44:	b538      	push	{r3, r4, r5, lr}
   def46:	4604      	mov	r4, r0
   def48:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   def4a:	6800      	ldr	r0, [r0, #0]
   def4c:	3101      	adds	r1, #1
   def4e:	f7ff fc17 	bl	de780 <realloc>
	if (newbuffer) {
   def52:	b110      	cbz	r0, def5a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   def54:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   def58:	2001      	movs	r0, #1
	}
	return 0;
}
   def5a:	bd38      	pop	{r3, r4, r5, pc}

000def5c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   def5c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   def5e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   def60:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   def62:	b113      	cbz	r3, def6a <_ZN6String7reserveEj+0xe>
   def64:	6843      	ldr	r3, [r0, #4]
   def66:	428b      	cmp	r3, r1
   def68:	d207      	bcs.n	def7a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   def6a:	4620      	mov	r0, r4
   def6c:	f7ff ffea 	bl	def44 <_ZN6String12changeBufferEj>
   def70:	b120      	cbz	r0, def7c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   def72:	68a3      	ldr	r3, [r4, #8]
   def74:	b90b      	cbnz	r3, def7a <_ZN6String7reserveEj+0x1e>
   def76:	6822      	ldr	r2, [r4, #0]
   def78:	7013      	strb	r3, [r2, #0]
   def7a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   def7c:	bd10      	pop	{r4, pc}

000def7e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   def7e:	b570      	push	{r4, r5, r6, lr}
   def80:	460e      	mov	r6, r1
	if (!reserve(length)) {
   def82:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   def84:	4604      	mov	r4, r0
   def86:	4615      	mov	r5, r2
	if (!reserve(length)) {
   def88:	f7ff ffe8 	bl	def5c <_ZN6String7reserveEj>
   def8c:	b918      	cbnz	r0, def96 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   def8e:	4620      	mov	r0, r4
   def90:	f7ff ffcd 	bl	def2e <_ZN6String10invalidateEv>
		return *this;
   def94:	e009      	b.n	defaa <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   def96:	462a      	mov	r2, r5
   def98:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   def9a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   def9c:	6820      	ldr	r0, [r4, #0]
   def9e:	f002 fbd0 	bl	e1742 <memcpy>
	buffer[len] = 0;
   defa2:	6822      	ldr	r2, [r4, #0]
   defa4:	68a3      	ldr	r3, [r4, #8]
   defa6:	2100      	movs	r1, #0
   defa8:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   defaa:	4620      	mov	r0, r4
   defac:	bd70      	pop	{r4, r5, r6, pc}

000defae <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   defae:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   defb0:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   defb2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   defb4:	6003      	str	r3, [r0, #0]
	capacity = 0;
   defb6:	6043      	str	r3, [r0, #4]
	len = 0;
   defb8:	6083      	str	r3, [r0, #8]
	flags = 0;
   defba:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   defbc:	460d      	mov	r5, r1
   defbe:	b139      	cbz	r1, defd0 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   defc0:	4608      	mov	r0, r1
   defc2:	f002 fc26 	bl	e1812 <strlen>
   defc6:	4629      	mov	r1, r5
   defc8:	4602      	mov	r2, r0
   defca:	4620      	mov	r0, r4
   defcc:	f7ff ffd7 	bl	def7e <_ZN6String4copyEPKcj>
}
   defd0:	4620      	mov	r0, r4
   defd2:	bd38      	pop	{r3, r4, r5, pc}

000defd4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   defd4:	b510      	push	{r4, lr}
   defd6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   defd8:	6800      	ldr	r0, [r0, #0]
   defda:	b108      	cbz	r0, defe0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   defdc:	f7ff f972 	bl	de2c4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   defe0:	4620      	mov	r0, r4
   defe2:	bd10      	pop	{r4, pc}

000defe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   defe4:	680b      	ldr	r3, [r1, #0]
   defe6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   defe8:	b113      	cbz	r3, deff0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   defea:	685a      	ldr	r2, [r3, #4]
   defec:	3201      	adds	r2, #1
   defee:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   deff0:	4770      	bx	lr
	...

000deff4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   deff4:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   deff6:	4c06      	ldr	r4, [pc, #24]	; (df010 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   deff8:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   deffa:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   deffc:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   deffe:	f7ff f959 	bl	de2b4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   df002:	4620      	mov	r0, r4
   df004:	4a03      	ldr	r2, [pc, #12]	; (df014 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   df006:	4904      	ldr	r1, [pc, #16]	; (df018 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   df008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   df00c:	f001 bc26 	b.w	e085c <__aeabi_atexit>
   df010:	2003e384 	.word	0x2003e384
   df014:	2003e2e0 	.word	0x2003e2e0
   df018:	000defd5 	.word	0x000defd5

000df01c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   df01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df01e:	4606      	mov	r6, r0
   df020:	460d      	mov	r5, r1
   df022:	188f      	adds	r7, r1, r2
  size_t n = 0;
   df024:	2400      	movs	r4, #0
  while (size--) {
   df026:	42bd      	cmp	r5, r7
   df028:	d00c      	beq.n	df044 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   df02a:	6833      	ldr	r3, [r6, #0]
   df02c:	f815 1b01 	ldrb.w	r1, [r5], #1
   df030:	689b      	ldr	r3, [r3, #8]
   df032:	4630      	mov	r0, r6
   df034:	4798      	blx	r3
     if (chunk>=0)
   df036:	2800      	cmp	r0, #0
   df038:	db01      	blt.n	df03e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   df03a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   df03c:	e7f3      	b.n	df026 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   df03e:	2c00      	cmp	r4, #0
   df040:	bf08      	it	eq
   df042:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   df044:	4620      	mov	r0, r4
   df046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df048 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   df048:	b570      	push	{r4, r5, r6, lr}
   df04a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   df04c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   df04e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   df050:	b149      	cbz	r1, df066 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   df052:	f002 fbde 	bl	e1812 <strlen>
   df056:	682b      	ldr	r3, [r5, #0]
   df058:	4602      	mov	r2, r0
   df05a:	4621      	mov	r1, r4
   df05c:	4628      	mov	r0, r5
   df05e:	68db      	ldr	r3, [r3, #12]
    }
   df060:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   df064:	4718      	bx	r3
    }
   df066:	bd70      	pop	{r4, r5, r6, pc}

000df068 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   df068:	6803      	ldr	r3, [r0, #0]
   df06a:	689b      	ldr	r3, [r3, #8]
   df06c:	4718      	bx	r3

000df06e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   df06e:	b530      	push	{r4, r5, lr}
   df070:	b08b      	sub	sp, #44	; 0x2c
   df072:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   df074:	2100      	movs	r1, #0
   df076:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   df07a:	2a01      	cmp	r2, #1
   df07c:	bf98      	it	ls
   df07e:	220a      	movls	r2, #10
   df080:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   df084:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   df088:	fb05 3312 	mls	r3, r5, r2, r3
   df08c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   df090:	2b09      	cmp	r3, #9
   df092:	bf94      	ite	ls
   df094:	3330      	addls	r3, #48	; 0x30
   df096:	3337      	addhi	r3, #55	; 0x37
   df098:	b2db      	uxtb	r3, r3
   df09a:	4621      	mov	r1, r4
   df09c:	f804 3901 	strb.w	r3, [r4], #-1
   df0a0:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   df0a2:	2d00      	cmp	r5, #0
   df0a4:	d1ee      	bne.n	df084 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   df0a6:	f7ff ffcf 	bl	df048 <_ZN5Print5writeEPKc>
}
   df0aa:	b00b      	add	sp, #44	; 0x2c
   df0ac:	bd30      	pop	{r4, r5, pc}

000df0ae <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   df0ae:	6800      	ldr	r0, [r0, #0]
   df0b0:	f7ff b910 	b.w	de2d4 <os_mutex_recursive_lock>

000df0b4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   df0b4:	4b01      	ldr	r3, [pc, #4]	; (df0bc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   df0b6:	4a02      	ldr	r2, [pc, #8]	; (df0c0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   df0b8:	601a      	str	r2, [r3, #0]
   df0ba:	4770      	bx	lr
   df0bc:	2003e388 	.word	0x2003e388
   df0c0:	000e3c83 	.word	0x000e3c83

000df0c4 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   df0c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   df0c6:	4b14      	ldr	r3, [pc, #80]	; (df118 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   df0c8:	4f14      	ldr	r7, [pc, #80]	; (df11c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   df0ca:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   df0cc:	4b14      	ldr	r3, [pc, #80]	; (df120 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   df0ce:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   df0d0:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   df0d2:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   df0d4:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   df0d6:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   df0d8:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   df0da:	d01b      	beq.n	df114 <_ZL22Refresh_UnixTime_Cachel+0x50>
   df0dc:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   df0de:	ad01      	add	r5, sp, #4
   df0e0:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   df0e4:	f002 fa22 	bl	e152c <localtime>
	calendar_time->tm_year += 1900;
   df0e8:	6943      	ldr	r3, [r0, #20]
   df0ea:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   df0ee:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   df0f0:	4604      	mov	r4, r0
   df0f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   df0f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   df0f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   df0f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   df0fa:	f8d4 e000 	ldr.w	lr, [r4]
   df0fe:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   df102:	ad01      	add	r5, sp, #4
   df104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df106:	4c07      	ldr	r4, [pc, #28]	; (df124 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   df108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df10a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df10c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   df10e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   df110:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   df114:	b00b      	add	sp, #44	; 0x2c
   df116:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df118:	2003e3bc 	.word	0x2003e3bc
   df11c:	2003e3b8 	.word	0x2003e3b8
   df120:	2003e3b4 	.word	0x2003e3b4
   df124:	2003e38c 	.word	0x2003e38c

000df128 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   df128:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   df12a:	2000      	movs	r0, #0
   df12c:	f7ff fb08 	bl	de740 <spark_sync_time_pending>
   df130:	b128      	cbz	r0, df13e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   df132:	f7ff fae5 	bl	de700 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   df136:	f080 0001 	eor.w	r0, r0, #1
   df13a:	b2c0      	uxtb	r0, r0
   df13c:	bd08      	pop	{r3, pc}
   df13e:	2001      	movs	r0, #1
    }
   df140:	bd08      	pop	{r3, pc}
	...

000df144 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   df144:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   df146:	f7ff ffbd 	bl	df0c4 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   df14a:	4b04      	ldr	r3, [pc, #16]	; (df15c <_ZN9TimeClass12hourFormat12El+0x18>)
   df14c:	6898      	ldr	r0, [r3, #8]
   df14e:	b118      	cbz	r0, df158 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   df150:	280c      	cmp	r0, #12
   df152:	dd02      	ble.n	df15a <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   df154:	380c      	subs	r0, #12
   df156:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   df158:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   df15a:	bd08      	pop	{r3, pc}
   df15c:	2003e38c 	.word	0x2003e38c

000df160 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   df160:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   df164:	eeb4 0ae7 	vcmpe.f32	s0, s15
   df168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   df16c:	d40f      	bmi.n	df18e <_ZN9TimeClass4zoneEf+0x2e>
   df16e:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   df172:	eeb4 0ae7 	vcmpe.f32	s0, s15
   df176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   df17a:	dc08      	bgt.n	df18e <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   df17c:	eddf 7a04 	vldr	s15, [pc, #16]	; df190 <_ZN9TimeClass4zoneEf+0x30>
   df180:	4b04      	ldr	r3, [pc, #16]	; (df194 <_ZN9TimeClass4zoneEf+0x34>)
   df182:	ee20 0a27 	vmul.f32	s0, s0, s15
   df186:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   df18a:	ed83 0a00 	vstr	s0, [r3]
   df18e:	4770      	bx	lr
   df190:	45610000 	.word	0x45610000
   df194:	2003e3bc 	.word	0x2003e3bc

000df198 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   df198:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   df19a:	2000      	movs	r0, #0
   df19c:	f7ff f862 	bl	de264 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   df1a0:	4604      	mov	r4, r0
   df1a2:	b968      	cbnz	r0, df1c0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   df1a4:	f7ff f9ee 	bl	de584 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   df1a8:	2801      	cmp	r0, #1
   df1aa:	d10b      	bne.n	df1c4 <_ZN9TimeClass7isValidEv+0x2c>
   df1ac:	4620      	mov	r0, r4
   df1ae:	f7ff fa19 	bl	de5e4 <system_thread_get_state>
   df1b2:	b938      	cbnz	r0, df1c4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   df1b4:	f7ff ffb8 	bl	df128 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   df1b8:	b930      	cbnz	r0, df1c8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   df1ba:	f7ff fa99 	bl	de6f0 <spark_process>
   df1be:	e7f9      	b.n	df1b4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   df1c0:	2001      	movs	r0, #1
   df1c2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   df1c4:	2000      	movs	r0, #0
   df1c6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   df1c8:	f7ff ffae 	bl	df128 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   df1cc:	2000      	movs	r0, #0
   df1ce:	f7ff f849 	bl	de264 <HAL_RTC_Time_Is_Valid>
   df1d2:	3000      	adds	r0, #0
   df1d4:	bf18      	it	ne
   df1d6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   df1d8:	bd10      	pop	{r4, pc}

000df1da <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   df1da:	b508      	push	{r3, lr}
    (void)isValid();
   df1dc:	f7ff ffdc 	bl	df198 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   df1e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   df1e4:	f7ff b81e 	b.w	de224 <HAL_RTC_Get_UnixTime>

000df1e8 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   df1e8:	b508      	push	{r3, lr}
	return hourFormat12(now());
   df1ea:	f7ff fff6 	bl	df1da <_ZN9TimeClass3nowEv>
}
   df1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   df1f2:	f7ff bfa7 	b.w	df144 <_ZN9TimeClass12hourFormat12El>
	...

000df1f8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   df1f8:	b508      	push	{r3, lr}
	return minute(now());
   df1fa:	f7ff ffee 	bl	df1da <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   df1fe:	f7ff ff61 	bl	df0c4 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   df202:	4b01      	ldr	r3, [pc, #4]	; (df208 <_ZN9TimeClass6minuteEv+0x10>)
   df204:	6858      	ldr	r0, [r3, #4]
   df206:	bd08      	pop	{r3, pc}
   df208:	2003e38c 	.word	0x2003e38c

000df20c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   df20c:	4b02      	ldr	r3, [pc, #8]	; (df218 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   df20e:	681a      	ldr	r2, [r3, #0]
   df210:	4b02      	ldr	r3, [pc, #8]	; (df21c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   df212:	601a      	str	r2, [r3, #0]
   df214:	4770      	bx	lr
   df216:	bf00      	nop
   df218:	2003e1f0 	.word	0x2003e1f0
   df21c:	2003e3b0 	.word	0x2003e3b0

000df220 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   df220:	2100      	movs	r1, #0
   df222:	f7ff b9bf 	b.w	de5a4 <system_delay_ms>

000df226 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   df226:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   df228:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   df22a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   df22c:	b113      	cbz	r3, df234 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   df22e:	2203      	movs	r2, #3
   df230:	4601      	mov	r1, r0
   df232:	4798      	blx	r3
    }
   df234:	4620      	mov	r0, r4
   df236:	bd10      	pop	{r4, pc}

000df238 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   df238:	b510      	push	{r4, lr}
   df23a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df23c:	f7ff fff3 	bl	df226 <_ZNSt14_Function_baseD1Ev>
   df240:	4620      	mov	r0, r4
   df242:	bd10      	pop	{r4, pc}

000df244 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   df244:	b510      	push	{r4, lr}
   df246:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   df248:	f7ff f984 	bl	de554 <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   df24c:	4284      	cmp	r4, r0
   df24e:	d008      	beq.n	df262 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   df250:	b11c      	cbz	r4, df25a <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   df252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   df256:	f7ff b96d 	b.w	de534 <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   df25a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   df25e:	f7ff b971 	b.w	de544 <LED_Signaling_Stop>
   df262:	bd10      	pop	{r4, pc}

000df264 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   df264:	b570      	push	{r4, r5, r6, lr}
   df266:	4605      	mov	r5, r0
   df268:	460e      	mov	r6, r1
   df26a:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   df26c:	f7ff f972 	bl	de554 <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   df270:	b150      	cbz	r0, df288 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   df272:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   df276:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   df27a:	f7ff f953 	bl	de524 <LED_SetSignalingColor>
    LED_On(LED_RGB);
   df27e:	20e7      	movs	r0, #231	; 0xe7
}
   df280:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   df284:	f7ff b96e 	b.w	de564 <LED_On>
   df288:	bd70      	pop	{r4, r5, r6, pc}

000df28a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   df28a:	b513      	push	{r0, r1, r4, lr}
   df28c:	460b      	mov	r3, r1
   df28e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df290:	c803      	ldmia	r0, {r0, r1}
   df292:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   df296:	e893 0003 	ldmia.w	r3, {r0, r1}
   df29a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   df29e:	e89d 0003 	ldmia.w	sp, {r0, r1}
   df2a2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   df2a6:	b002      	add	sp, #8
   df2a8:	bd10      	pop	{r4, pc}
	...

000df2ac <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df2ac:	4803      	ldr	r0, [pc, #12]	; (df2bc <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   df2ae:	4a04      	ldr	r2, [pc, #16]	; (df2c0 <_GLOBAL__sub_I_RGB+0x14>)
   df2b0:	4904      	ldr	r1, [pc, #16]	; (df2c4 <_GLOBAL__sub_I_RGB+0x18>)
   df2b2:	2300      	movs	r3, #0
   df2b4:	6083      	str	r3, [r0, #8]
   df2b6:	f001 bad1 	b.w	e085c <__aeabi_atexit>
   df2ba:	bf00      	nop
   df2bc:	2003e3c0 	.word	0x2003e3c0
   df2c0:	2003e2e0 	.word	0x2003e2e0
   df2c4:	000df239 	.word	0x000df239

000df2c8 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   df2c8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   df2ca:	4b0c      	ldr	r3, [pc, #48]	; (df2fc <serialEventRun+0x34>)
   df2cc:	b133      	cbz	r3, df2dc <serialEventRun+0x14>
   df2ce:	f000 fc2d 	bl	dfb2c <_Z16_fetch_usbserialv>
   df2d2:	6803      	ldr	r3, [r0, #0]
   df2d4:	691b      	ldr	r3, [r3, #16]
   df2d6:	4798      	blx	r3
   df2d8:	2800      	cmp	r0, #0
   df2da:	dc09      	bgt.n	df2f0 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   df2dc:	4b08      	ldr	r3, [pc, #32]	; (df300 <serialEventRun+0x38>)
   df2de:	b163      	cbz	r3, df2fa <serialEventRun+0x32>
   df2e0:	f000 fca6 	bl	dfc30 <_Z22__fetch_global_Serial1v>
   df2e4:	6803      	ldr	r3, [r0, #0]
   df2e6:	691b      	ldr	r3, [r3, #16]
   df2e8:	4798      	blx	r3
   df2ea:	2800      	cmp	r0, #0
   df2ec:	dc03      	bgt.n	df2f6 <serialEventRun+0x2e>
   df2ee:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   df2f0:	f3af 8000 	nop.w
   df2f4:	e7f2      	b.n	df2dc <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   df2f6:	f3af 8000 	nop.w
   df2fa:	bd08      	pop	{r3, pc}
	...

000df304 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   df304:	b508      	push	{r3, lr}
	serialEventRun();
   df306:	f7ff ffdf 	bl	df2c8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   df30a:	f7fe ff83 	bl	de214 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   df30e:	4b01      	ldr	r3, [pc, #4]	; (df314 <_post_loop+0x10>)
   df310:	6018      	str	r0, [r3, #0]
   df312:	bd08      	pop	{r3, pc}
   df314:	2003e700 	.word	0x2003e700

000df318 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   df318:	4802      	ldr	r0, [pc, #8]	; (df324 <_Z33system_initialize_user_backup_ramv+0xc>)
   df31a:	4a03      	ldr	r2, [pc, #12]	; (df328 <_Z33system_initialize_user_backup_ramv+0x10>)
   df31c:	4903      	ldr	r1, [pc, #12]	; (df32c <_Z33system_initialize_user_backup_ramv+0x14>)
   df31e:	1a12      	subs	r2, r2, r0
   df320:	f002 ba0f 	b.w	e1742 <memcpy>
   df324:	2003f400 	.word	0x2003f400
   df328:	2003f404 	.word	0x2003f404
   df32c:	000e4260 	.word	0x000e4260

000df330 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   df330:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df332:	2300      	movs	r3, #0
   df334:	9300      	str	r3, [sp, #0]
   df336:	461a      	mov	r2, r3
   df338:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df33c:	f7ff f964 	bl	de608 <system_ctrl_set_result>
}
   df340:	b003      	add	sp, #12
   df342:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000df348 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   df348:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   df34a:	8843      	ldrh	r3, [r0, #2]
   df34c:	2b0a      	cmp	r3, #10
   df34e:	d008      	beq.n	df362 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   df350:	2b50      	cmp	r3, #80	; 0x50
   df352:	d109      	bne.n	df368 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   df354:	4b09      	ldr	r3, [pc, #36]	; (df37c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   df356:	681b      	ldr	r3, [r3, #0]
   df358:	b13b      	cbz	r3, df36a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   df35a:	b003      	add	sp, #12
   df35c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   df360:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   df362:	f7ff ffe5 	bl	df330 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   df366:	e006      	b.n	df376 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   df368:	2300      	movs	r3, #0
   df36a:	9300      	str	r3, [sp, #0]
   df36c:	461a      	mov	r2, r3
   df36e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   df372:	f7ff f949 	bl	de608 <system_ctrl_set_result>
        break;
    }
}
   df376:	b003      	add	sp, #12
   df378:	f85d fb04 	ldr.w	pc, [sp], #4
   df37c:	2003e3d0 	.word	0x2003e3d0

000df380 <module_user_init_hook>:

void module_user_init_hook()
{
   df380:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   df382:	4c10      	ldr	r4, [pc, #64]	; (df3c4 <module_user_init_hook+0x44>)
   df384:	4d10      	ldr	r5, [pc, #64]	; (df3c8 <module_user_init_hook+0x48>)
   df386:	6823      	ldr	r3, [r4, #0]
   df388:	42ab      	cmp	r3, r5
   df38a:	4b10      	ldr	r3, [pc, #64]	; (df3cc <module_user_init_hook+0x4c>)
   df38c:	bf0c      	ite	eq
   df38e:	2201      	moveq	r2, #1
   df390:	2200      	movne	r2, #0
   df392:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   df394:	d002      	beq.n	df39c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   df396:	f7ff ffbf 	bl	df318 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   df39a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   df39c:	f7fe ff1a 	bl	de1d4 <HAL_RNG_GetRandomNumber>
   df3a0:	4604      	mov	r4, r0
    srand(seed);
   df3a2:	f002 f9e1 	bl	e1768 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   df3a6:	4b0a      	ldr	r3, [pc, #40]	; (df3d0 <module_user_init_hook+0x50>)
   df3a8:	b113      	cbz	r3, df3b0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   df3aa:	4620      	mov	r0, r4
   df3ac:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   df3b0:	2100      	movs	r1, #0
   df3b2:	4807      	ldr	r0, [pc, #28]	; (df3d0 <module_user_init_hook+0x50>)
   df3b4:	f7ff f9cc 	bl	de750 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   df3b8:	2100      	movs	r1, #0
   df3ba:	4806      	ldr	r0, [pc, #24]	; (df3d4 <module_user_init_hook+0x54>)
}
   df3bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   df3c0:	f7ff b918 	b.w	de5f4 <system_ctrl_set_app_request_handler>
   df3c4:	2003f400 	.word	0x2003f400
   df3c8:	9a271c1e 	.word	0x9a271c1e
   df3cc:	2003e3d4 	.word	0x2003e3d4
   df3d0:	00000000 	.word	0x00000000
   df3d4:	000df349 	.word	0x000df349

000df3d8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   df3d8:	4770      	bx	lr

000df3da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   df3da:	2000      	movs	r0, #0
   df3dc:	4770      	bx	lr

000df3de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   df3de:	b510      	push	{r4, lr}
   df3e0:	2110      	movs	r1, #16
   df3e2:	4604      	mov	r4, r0
   df3e4:	f001 fa48 	bl	e0878 <_ZdlPvj>
   df3e8:	4620      	mov	r0, r4
   df3ea:	bd10      	pop	{r4, pc}

000df3ec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   df3ec:	b508      	push	{r3, lr}
      { delete this; }
   df3ee:	b108      	cbz	r0, df3f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   df3f0:	f7ff fff5 	bl	df3de <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   df3f4:	bd08      	pop	{r3, pc}

000df3f6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   df3f6:	2200      	movs	r2, #0
   df3f8:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   df3fa:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   df3fc:	f64f 729c 	movw	r2, #65436	; 0xff9c
   df400:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   df402:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   df406:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   df408:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df40a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   df40c:	680c      	ldr	r4, [r1, #0]
   df40e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   df410:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   df412:	bd10      	pop	{r4, pc}

000df414 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   df414:	b510      	push	{r4, lr}
   df416:	4604      	mov	r4, r0
    free((void*)msg_);
   df418:	6800      	ldr	r0, [r0, #0]
   df41a:	f7ff f9a9 	bl	de770 <free>
}
   df41e:	4620      	mov	r0, r4
   df420:	bd10      	pop	{r4, pc}

000df422 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   df422:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   df424:	68c4      	ldr	r4, [r0, #12]
   df426:	b1f4      	cbz	r4, df466 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   df428:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   df42a:	2b02      	cmp	r3, #2
   df42c:	d103      	bne.n	df436 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   df42e:	f104 000c 	add.w	r0, r4, #12
   df432:	f7ff ffef 	bl	df414 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   df436:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   df438:	b135      	cbz	r5, df448 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df43a:	4628      	mov	r0, r5
   df43c:	f7ff fef3 	bl	df226 <_ZNSt14_Function_baseD1Ev>
   df440:	2110      	movs	r1, #16
   df442:	4628      	mov	r0, r5
   df444:	f001 fa18 	bl	e0878 <_ZdlPvj>
   df448:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   df44a:	b135      	cbz	r5, df45a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   df44c:	4628      	mov	r0, r5
   df44e:	f7ff feea 	bl	df226 <_ZNSt14_Function_baseD1Ev>
   df452:	2110      	movs	r1, #16
   df454:	4628      	mov	r0, r5
   df456:	f001 fa0f 	bl	e0878 <_ZdlPvj>
   df45a:	4620      	mov	r0, r4
   df45c:	2114      	movs	r1, #20
   df45e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   df462:	f001 ba09 	b.w	e0878 <_ZdlPvj>
   df466:	bd38      	pop	{r3, r4, r5, pc}

000df468 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   df468:	b513      	push	{r0, r1, r4, lr}
   df46a:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   df46c:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   df470:	2300      	movs	r3, #0
   df472:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   df474:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   df476:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   df478:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   df47a:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   df47c:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   df47e:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   df480:	f7fd fbce 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   df484:	4620      	mov	r0, r4
   df486:	b002      	add	sp, #8
   df488:	bd10      	pop	{r4, pc}

000df48a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   df48a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   df48c:	460c      	mov	r4, r1
   df48e:	ad02      	add	r5, sp, #8
   df490:	f854 3b04 	ldr.w	r3, [r4], #4
   df494:	f845 3d08 	str.w	r3, [r5, #-8]!
   df498:	4606      	mov	r6, r0
   df49a:	460f      	mov	r7, r1
   df49c:	a801      	add	r0, sp, #4
   df49e:	4621      	mov	r1, r4
   df4a0:	f7ff fda0 	bl	defe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   df4a4:	4629      	mov	r1, r5
   df4a6:	4630      	mov	r0, r6
   df4a8:	f7ff ffde 	bl	df468 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   df4ac:	a801      	add	r0, sp, #4
   df4ae:	f7fd fbb7 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   df4b2:	4620      	mov	r0, r4
   df4b4:	f7fd fbb4 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   df4b8:	4638      	mov	r0, r7
   df4ba:	2108      	movs	r1, #8
   df4bc:	f001 f9dc 	bl	e0878 <_ZdlPvj>
        return p;
    }
   df4c0:	4630      	mov	r0, r6
   df4c2:	b003      	add	sp, #12
   df4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000df4c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   df4c8:	b538      	push	{r3, r4, r5, lr}
   df4ca:	2300      	movs	r3, #0
   df4cc:	4604      	mov	r4, r0
   df4ce:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   df4d0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   df4d2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   df4d4:	f7f4 fde1 	bl	d409a <_Znwj>
   df4d8:	b128      	cbz	r0, df4e6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   df4da:	2301      	movs	r3, #1
   df4dc:	6043      	str	r3, [r0, #4]
   df4de:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   df4e0:	4b02      	ldr	r3, [pc, #8]	; (df4ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   df4e2:	6003      	str	r3, [r0, #0]
   df4e4:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   df4e6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   df4e8:	4620      	mov	r0, r4
   df4ea:	bd38      	pop	{r3, r4, r5, pc}
   df4ec:	000e3d1c 	.word	0x000e3d1c

000df4f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   df4f0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   df4f2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   df4f4:	b90a      	cbnz	r2, df4fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   df4f6:	f001 f9d2 	bl	e089e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   df4fa:	68c3      	ldr	r3, [r0, #12]
    }
   df4fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   df500:	4718      	bx	r3

000df502 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   df502:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   df504:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   df506:	f100 0110 	add.w	r1, r0, #16
   df50a:	f7ff fff1 	bl	df4f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   df50e:	bd08      	pop	{r3, pc}

000df510 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   df510:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   df512:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   df514:	b90a      	cbnz	r2, df51a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   df516:	f001 f9c2 	bl	e089e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   df51a:	68c3      	ldr	r3, [r0, #12]
    }
   df51c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   df520:	4718      	bx	r3

000df522 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   df522:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   df524:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   df526:	f100 0110 	add.w	r1, r0, #16
   df52a:	f7ff fff1 	bl	df510 <_ZNKSt8functionIFvRKbEEclES1_>
   df52e:	bd08      	pop	{r3, pc}

000df530 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   df530:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df532:	2300      	movs	r3, #0
   df534:	6083      	str	r3, [r0, #8]
   df536:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   df538:	4604      	mov	r4, r0
   df53a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   df53c:	b12b      	cbz	r3, df54a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   df53e:	2202      	movs	r2, #2
   df540:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   df542:	68eb      	ldr	r3, [r5, #12]
   df544:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   df546:	68ab      	ldr	r3, [r5, #8]
   df548:	60a3      	str	r3, [r4, #8]
	}
    }
   df54a:	4620      	mov	r0, r4
   df54c:	bd38      	pop	{r3, r4, r5, pc}
	...

000df550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   df550:	b5f0      	push	{r4, r5, r6, r7, lr}
   df552:	b089      	sub	sp, #36	; 0x24
   df554:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   df556:	4668      	mov	r0, sp
   df558:	f7ff ff4d 	bl	df3f6 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   df55c:	2300      	movs	r3, #0
   df55e:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   df562:	f04f 0202 	mov.w	r2, #2
   df566:	e8d4 3f4f 	ldrexb	r3, [r4]
   df56a:	2b00      	cmp	r3, #0
   df56c:	d103      	bne.n	df576 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   df56e:	e8c4 2f41 	strexb	r1, r2, [r4]
   df572:	2900      	cmp	r1, #0
   df574:	d1f7      	bne.n	df566 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   df576:	d002      	beq.n	df57e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   df578:	f88d 3008 	strb.w	r3, [sp, #8]
   df57c:	e063      	b.n	df646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   df57e:	f114 050c 	adds.w	r5, r4, #12
   df582:	d003      	beq.n	df58c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   df584:	4669      	mov	r1, sp
   df586:	4628      	mov	r0, r5
   df588:	f7ff ff35 	bl	df3f6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   df58c:	f3bf 8f5f 	dmb	sy
   df590:	2301      	movs	r3, #1
   df592:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   df594:	2000      	movs	r0, #0
   df596:	f104 0308 	add.w	r3, r4, #8
   df59a:	f3bf 8f5f 	dmb	sy
   df59e:	e853 6f00 	ldrex	r6, [r3]
   df5a2:	e843 0200 	strex	r2, r0, [r3]
   df5a6:	2a00      	cmp	r2, #0
   df5a8:	d1f9      	bne.n	df59e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   df5aa:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   df5ae:	2e00      	cmp	r6, #0
   df5b0:	d049      	beq.n	df646 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   df5b2:	f7ff f807 	bl	de5c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   df5b6:	b120      	cbz	r0, df5c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   df5b8:	4629      	mov	r1, r5
   df5ba:	4630      	mov	r0, r6
   df5bc:	f7ff ff98 	bl	df4f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   df5c0:	e03a      	b.n	df638 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   df5c2:	4631      	mov	r1, r6
   df5c4:	a802      	add	r0, sp, #8
   df5c6:	f7ff ffb3 	bl	df530 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   df5ca:	68e0      	ldr	r0, [r4, #12]
   df5cc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   df5d0:	b108      	cbz	r0, df5d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   df5d2:	f002 f903 	bl	e17dc <strdup>
   df5d6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   df5d8:	2010      	movs	r0, #16
   df5da:	f8ad 501c 	strh.w	r5, [sp, #28]
   df5de:	f7f4 fd5c 	bl	d409a <_Znwj>
   df5e2:	4605      	mov	r5, r0
   df5e4:	b1e8      	cbz	r0, df622 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df5e6:	2700      	movs	r7, #0
   df5e8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   df5ea:	2018      	movs	r0, #24
   df5ec:	f7f4 fd55 	bl	d409a <_Znwj>
   df5f0:	4604      	mov	r4, r0
   df5f2:	b188      	cbz	r0, df618 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   df5f4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df5f6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   df5f8:	a802      	add	r0, sp, #8
   df5fa:	f7ff fe46 	bl	df28a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df5fe:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   df600:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   df602:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df604:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   df606:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   df608:	a906      	add	r1, sp, #24
   df60a:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   df60c:	60e3      	str	r3, [r4, #12]
   df60e:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   df612:	9205      	str	r2, [sp, #20]
   df614:	f7ff feef 	bl	df3f6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   df618:	4b0d      	ldr	r3, [pc, #52]	; (df650 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   df61a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   df61c:	4b0d      	ldr	r3, [pc, #52]	; (df654 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   df61e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   df620:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   df622:	a806      	add	r0, sp, #24
   df624:	f7ff fef6 	bl	df414 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df628:	a802      	add	r0, sp, #8
   df62a:	f7ff fdfc 	bl	df226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   df62e:	2200      	movs	r2, #0
   df630:	4629      	mov	r1, r5
   df632:	4809      	ldr	r0, [pc, #36]	; (df658 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   df634:	f7fe ffce 	bl	de5d4 <application_thread_invoke>
   df638:	4630      	mov	r0, r6
   df63a:	f7ff fdf4 	bl	df226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   df63e:	2110      	movs	r1, #16
   df640:	4630      	mov	r0, r6
   df642:	f001 f919 	bl	e0878 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   df646:	4668      	mov	r0, sp
   df648:	f7ff fee4 	bl	df414 <_ZN8particle5ErrorD1Ev>
    }
   df64c:	b009      	add	sp, #36	; 0x24
   df64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df650:	000df503 	.word	0x000df503
   df654:	000df779 	.word	0x000df779
   df658:	000dfc7d 	.word	0x000dfc7d

000df65c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   df65c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   df660:	b08b      	sub	sp, #44	; 0x2c
   df662:	4606      	mov	r6, r0
   df664:	460f      	mov	r7, r1
   df666:	4690      	mov	r8, r2
   df668:	4699      	mov	r9, r3
   df66a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   df66e:	f7ff f847 	bl	de700 <spark_cloud_flag_connected>
   df672:	ad07      	add	r5, sp, #28
    if (!connected()) {
   df674:	4683      	mov	fp, r0
   df676:	bb30      	cbnz	r0, df6c6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   df678:	f64f 732e 	movw	r3, #65326	; 0xff2e
   df67c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   df67e:	a905      	add	r1, sp, #20
   df680:	4628      	mov	r0, r5
   df682:	f8ad 3018 	strh.w	r3, [sp, #24]
   df686:	f7ff feb6 	bl	df3f6 <_ZN8particle5ErrorC1EOS0_>
   df68a:	2014      	movs	r0, #20
   df68c:	f7f4 fd05 	bl	d409a <_Znwj>
   df690:	4604      	mov	r4, r0
   df692:	b158      	cbz	r0, df6ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   df694:	2302      	movs	r3, #2
   df696:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   df698:	2301      	movs	r3, #1
   df69a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   df69c:	f8c0 b004 	str.w	fp, [r0, #4]
   df6a0:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   df6a4:	4629      	mov	r1, r5
   df6a6:	300c      	adds	r0, #12
   df6a8:	f7ff fea5 	bl	df3f6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   df6ac:	4630      	mov	r0, r6
   df6ae:	4621      	mov	r1, r4
   df6b0:	f840 4b04 	str.w	r4, [r0], #4
   df6b4:	f7ff ff08 	bl	df4c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   df6b8:	4628      	mov	r0, r5
   df6ba:	f7ff feab 	bl	df414 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   df6be:	a805      	add	r0, sp, #20
   df6c0:	f7ff fea8 	bl	df414 <_ZN8particle5ErrorD1Ev>
   df6c4:	e052      	b.n	df76c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   df6c6:	2400      	movs	r4, #0
   df6c8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   df6ca:	2014      	movs	r0, #20
   df6cc:	606c      	str	r4, [r5, #4]
   df6ce:	60ac      	str	r4, [r5, #8]
   df6d0:	9307      	str	r3, [sp, #28]
   df6d2:	f7f4 fce2 	bl	d409a <_Znwj>
   df6d6:	4601      	mov	r1, r0
   df6d8:	b118      	cbz	r0, df6e2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   df6da:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   df6dc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   df6de:	6044      	str	r4, [r0, #4]
   df6e0:	6084      	str	r4, [r0, #8]
   df6e2:	a804      	add	r0, sp, #16
   df6e4:	9103      	str	r1, [sp, #12]
   df6e6:	f7ff feef 	bl	df4c8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   df6ea:	4b22      	ldr	r3, [pc, #136]	; (df774 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   df6ec:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   df6ee:	2008      	movs	r0, #8
   df6f0:	f7f4 fcd3 	bl	d409a <_Znwj>
   df6f4:	4604      	mov	r4, r0
   df6f6:	b128      	cbz	r0, df704 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   df6f8:	9b03      	ldr	r3, [sp, #12]
   df6fa:	f840 3b04 	str.w	r3, [r0], #4
   df6fe:	a904      	add	r1, sp, #16
   df700:	f7ff fc70 	bl	defe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   df704:	9500      	str	r5, [sp, #0]
   df706:	fa5f f38a 	uxtb.w	r3, sl
   df70a:	464a      	mov	r2, r9
   df70c:	4641      	mov	r1, r8
   df70e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   df710:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   df712:	f7fe fffd 	bl	de710 <spark_send_event>
   df716:	b920      	cbnz	r0, df722 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   df718:	9b03      	ldr	r3, [sp, #12]
   df71a:	785b      	ldrb	r3, [r3, #1]
   df71c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   df720:	b183      	cbz	r3, df744 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   df722:	9b03      	ldr	r3, [sp, #12]
   df724:	9305      	str	r3, [sp, #20]
   df726:	a904      	add	r1, sp, #16
   df728:	a806      	add	r0, sp, #24
   df72a:	f7ff fc5b 	bl	defe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   df72e:	a905      	add	r1, sp, #20
   df730:	4630      	mov	r0, r6
   df732:	f7ff fe99 	bl	df468 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   df736:	a806      	add	r0, sp, #24
   df738:	f7fd fa72 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   df73c:	a804      	add	r0, sp, #16
   df73e:	f7fd fa6f 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   df742:	e013      	b.n	df76c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   df744:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   df748:	a905      	add	r1, sp, #20
   df74a:	a803      	add	r0, sp, #12
   df74c:	9205      	str	r2, [sp, #20]
   df74e:	f8ad 3018 	strh.w	r3, [sp, #24]
   df752:	f7ff fefd 	bl	df550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   df756:	a805      	add	r0, sp, #20
   df758:	f7ff fe5c 	bl	df414 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   df75c:	a805      	add	r0, sp, #20
   df75e:	9909      	ldr	r1, [sp, #36]	; 0x24
   df760:	f7ff fe93 	bl	df48a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   df764:	a806      	add	r0, sp, #24
   df766:	f7fd fa5b 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   df76a:	e7da      	b.n	df722 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   df76c:	4630      	mov	r0, r6
   df76e:	b00b      	add	sp, #44	; 0x2c
   df770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   df774:	000df8e9 	.word	0x000df8e9

000df778 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   df778:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   df77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df77c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   df77e:	d006      	beq.n	df78e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   df780:	2a03      	cmp	r2, #3
   df782:	d017      	beq.n	df7b4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   df784:	2a01      	cmp	r2, #1
   df786:	d122      	bne.n	df7ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   df788:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   df78a:	6003      	str	r3, [r0, #0]
	      break;
   df78c:	e01f      	b.n	df7ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   df78e:	2018      	movs	r0, #24
   df790:	680e      	ldr	r6, [r1, #0]
   df792:	f7f4 fc82 	bl	d409a <_Znwj>
   df796:	4605      	mov	r5, r0
   df798:	b150      	cbz	r0, df7b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   df79a:	4631      	mov	r1, r6
   df79c:	f7ff fec8 	bl	df530 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   df7a0:	6930      	ldr	r0, [r6, #16]
   df7a2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   df7a6:	b108      	cbz	r0, df7ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   df7a8:	f002 f818 	bl	e17dc <strdup>
   df7ac:	6128      	str	r0, [r5, #16]
   df7ae:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   df7b0:	6025      	str	r5, [r4, #0]
   df7b2:	e00c      	b.n	df7ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   df7b4:	6804      	ldr	r4, [r0, #0]
   df7b6:	b154      	cbz	r4, df7ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   df7b8:	f104 0010 	add.w	r0, r4, #16
   df7bc:	f7ff fe2a 	bl	df414 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df7c0:	4620      	mov	r0, r4
   df7c2:	f7ff fd30 	bl	df226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   df7c6:	2118      	movs	r1, #24
   df7c8:	4620      	mov	r0, r4
   df7ca:	f001 f855 	bl	e0878 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   df7ce:	2000      	movs	r0, #0
   df7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df7d2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   df7d2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df7d4:	2300      	movs	r3, #0
   df7d6:	6083      	str	r3, [r0, #8]
   df7d8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   df7da:	4604      	mov	r4, r0
   df7dc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   df7de:	b12b      	cbz	r3, df7ec <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   df7e0:	2202      	movs	r2, #2
   df7e2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   df7e4:	68eb      	ldr	r3, [r5, #12]
   df7e6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   df7e8:	68ab      	ldr	r3, [r5, #8]
   df7ea:	60a3      	str	r3, [r4, #8]
	}
    }
   df7ec:	4620      	mov	r0, r4
   df7ee:	bd38      	pop	{r3, r4, r5, pc}

000df7f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   df7f0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   df7f2:	b570      	push	{r4, r5, r6, lr}
   df7f4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   df7f6:	d006      	beq.n	df806 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   df7f8:	2a03      	cmp	r2, #3
   df7fa:	d011      	beq.n	df820 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   df7fc:	2a01      	cmp	r2, #1
   df7fe:	d118      	bne.n	df832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   df800:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   df802:	6003      	str	r3, [r0, #0]
	      break;
   df804:	e015      	b.n	df832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   df806:	2014      	movs	r0, #20
   df808:	680e      	ldr	r6, [r1, #0]
   df80a:	f7f4 fc46 	bl	d409a <_Znwj>
   df80e:	4605      	mov	r5, r0
   df810:	b120      	cbz	r0, df81c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   df812:	4631      	mov	r1, r6
   df814:	f7ff ffdd 	bl	df7d2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   df818:	7c33      	ldrb	r3, [r6, #16]
   df81a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   df81c:	6025      	str	r5, [r4, #0]
   df81e:	e008      	b.n	df832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   df820:	6804      	ldr	r4, [r0, #0]
   df822:	b134      	cbz	r4, df832 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df824:	4620      	mov	r0, r4
   df826:	f7ff fcfe 	bl	df226 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   df82a:	2114      	movs	r1, #20
   df82c:	4620      	mov	r0, r4
   df82e:	f001 f823 	bl	e0878 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   df832:	2000      	movs	r0, #0
   df834:	bd70      	pop	{r4, r5, r6, pc}
	...

000df838 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   df838:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   df83a:	2300      	movs	r3, #0
   df83c:	b087      	sub	sp, #28
   df83e:	460c      	mov	r4, r1
   df840:	f3bf 8f5f 	dmb	sy
   df844:	e850 6f00 	ldrex	r6, [r0]
   df848:	e840 3200 	strex	r2, r3, [r0]
   df84c:	2a00      	cmp	r2, #0
   df84e:	d1f9      	bne.n	df844 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   df850:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   df854:	2e00      	cmp	r6, #0
   df856:	d03f      	beq.n	df8d8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   df858:	4618      	mov	r0, r3
   df85a:	f7fe feb3 	bl	de5c4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   df85e:	4607      	mov	r7, r0
   df860:	b120      	cbz	r0, df86c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   df862:	4621      	mov	r1, r4
   df864:	4630      	mov	r0, r6
   df866:	f7ff fe53 	bl	df510 <_ZNKSt8functionIFvRKbEEclES1_>
   df86a:	e02e      	b.n	df8ca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   df86c:	4631      	mov	r1, r6
   df86e:	a801      	add	r0, sp, #4
   df870:	f7ff ffaf 	bl	df7d2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   df874:	7823      	ldrb	r3, [r4, #0]
   df876:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   df87a:	2010      	movs	r0, #16
   df87c:	f7f4 fc0d 	bl	d409a <_Znwj>
   df880:	4605      	mov	r5, r0
   df882:	b1d0      	cbz	r0, df8ba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df884:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   df886:	2014      	movs	r0, #20
   df888:	f7f4 fc07 	bl	d409a <_Znwj>
   df88c:	4604      	mov	r4, r0
   df88e:	b178      	cbz	r0, df8b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   df890:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   df892:	4601      	mov	r1, r0
   df894:	a801      	add	r0, sp, #4
   df896:	f7ff fcf8 	bl	df28a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df89a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   df89c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   df89e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   df8a0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   df8a2:	9203      	str	r2, [sp, #12]
   df8a4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   df8a6:	60e3      	str	r3, [r4, #12]
   df8a8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   df8ac:	9204      	str	r2, [sp, #16]
   df8ae:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   df8b0:	4b0a      	ldr	r3, [pc, #40]	; (df8dc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   df8b2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   df8b4:	4b0a      	ldr	r3, [pc, #40]	; (df8e0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   df8b6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   df8b8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   df8ba:	a801      	add	r0, sp, #4
   df8bc:	f7ff fcb3 	bl	df226 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   df8c0:	2200      	movs	r2, #0
   df8c2:	4629      	mov	r1, r5
   df8c4:	4807      	ldr	r0, [pc, #28]	; (df8e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   df8c6:	f7fe fe85 	bl	de5d4 <application_thread_invoke>
   df8ca:	4630      	mov	r0, r6
   df8cc:	f7ff fcab 	bl	df226 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   df8d0:	2110      	movs	r1, #16
   df8d2:	4630      	mov	r0, r6
   df8d4:	f000 ffd0 	bl	e0878 <_ZdlPvj>
        }
    }
   df8d8:	b007      	add	sp, #28
   df8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df8dc:	000df523 	.word	0x000df523
   df8e0:	000df7f1 	.word	0x000df7f1
   df8e4:	000dfc7d 	.word	0x000dfc7d

000df8e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   df8e8:	b530      	push	{r4, r5, lr}
   df8ea:	b085      	sub	sp, #20
   df8ec:	4604      	mov	r4, r0
   df8ee:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   df8f0:	4668      	mov	r0, sp
   df8f2:	4611      	mov	r1, r2
   df8f4:	f7ff fdc9 	bl	df48a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   df8f8:	b17c      	cbz	r4, df91a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   df8fa:	b224      	sxth	r4, r4
   df8fc:	4628      	mov	r0, r5
   df8fe:	b10d      	cbz	r5, df904 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   df900:	f001 ff6c 	bl	e17dc <strdup>
   df904:	9002      	str	r0, [sp, #8]
   df906:	a902      	add	r1, sp, #8
   df908:	4668      	mov	r0, sp
   df90a:	f8ad 400c 	strh.w	r4, [sp, #12]
   df90e:	f7ff fe1f 	bl	df550 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   df912:	a802      	add	r0, sp, #8
   df914:	f7ff fd7e 	bl	df414 <_ZN8particle5ErrorD1Ev>
   df918:	e01d      	b.n	df956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   df91a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   df91c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   df920:	f04f 0201 	mov.w	r2, #1
   df924:	e8d0 3f4f 	ldrexb	r3, [r0]
   df928:	42a3      	cmp	r3, r4
   df92a:	d103      	bne.n	df934 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   df92c:	e8c0 2f41 	strexb	r1, r2, [r0]
   df930:	2900      	cmp	r1, #0
   df932:	d1f7      	bne.n	df924 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   df934:	d002      	beq.n	df93c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   df936:	f88d 3008 	strb.w	r3, [sp, #8]
   df93a:	e00c      	b.n	df956 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   df93c:	f110 010c 	adds.w	r1, r0, #12
   df940:	f04f 0301 	mov.w	r3, #1
   df944:	bf18      	it	ne
   df946:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   df948:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   df94c:	3004      	adds	r0, #4
   df94e:	f800 3c03 	strb.w	r3, [r0, #-3]
   df952:	f7ff ff71 	bl	df838 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   df956:	a801      	add	r0, sp, #4
   df958:	f7fd f962 	bl	dcc20 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   df95c:	b005      	add	sp, #20
   df95e:	bd30      	pop	{r4, r5, pc}

000df960 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   df960:	4770      	bx	lr

000df962 <_ZN9IPAddressD0Ev>:
   df962:	b510      	push	{r4, lr}
   df964:	2118      	movs	r1, #24
   df966:	4604      	mov	r4, r0
   df968:	f000 ff86 	bl	e0878 <_ZdlPvj>
   df96c:	4620      	mov	r0, r4
   df96e:	bd10      	pop	{r4, pc}

000df970 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   df970:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   df972:	7d03      	ldrb	r3, [r0, #20]
   df974:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   df976:	b08d      	sub	sp, #52	; 0x34
   df978:	460e      	mov	r6, r1
   df97a:	f100 0704 	add.w	r7, r0, #4
   df97e:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   df982:	d002      	beq.n	df98a <_ZNK9IPAddress7printToER5Print+0x1a>
   df984:	f100 0508 	add.w	r5, r0, #8
   df988:	e018      	b.n	df9bc <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   df98a:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   df98c:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   df98e:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   df992:	232f      	movs	r3, #47	; 0x2f
   df994:	462a      	mov	r2, r5
   df996:	200a      	movs	r0, #10
   df998:	f7fe fcb4 	bl	de304 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   df99c:	4628      	mov	r0, r5
   df99e:	f001 ff38 	bl	e1812 <strlen>
   df9a2:	6833      	ldr	r3, [r6, #0]
   df9a4:	4602      	mov	r2, r0
   df9a6:	68db      	ldr	r3, [r3, #12]
   df9a8:	4629      	mov	r1, r5
   df9aa:	4630      	mov	r0, r6
   df9ac:	4798      	blx	r3
   df9ae:	e00f      	b.n	df9d0 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   df9b0:	b124      	cbz	r4, df9bc <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   df9b2:	212e      	movs	r1, #46	; 0x2e
   df9b4:	4630      	mov	r0, r6
   df9b6:	f7ff fb57 	bl	df068 <_ZN5Print5printEc>
   df9ba:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   df9bc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   df9c0:	220a      	movs	r2, #10
   df9c2:	4630      	mov	r0, r6
   df9c4:	f7ff fb53 	bl	df06e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   df9c8:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   df9ca:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   df9cc:	d1f0      	bne.n	df9b0 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   df9ce:	4620      	mov	r0, r4
    }
    return n;
}
   df9d0:	b00d      	add	sp, #52	; 0x34
   df9d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df9d4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   df9d4:	b510      	push	{r4, lr}
   df9d6:	4b05      	ldr	r3, [pc, #20]	; (df9ec <_ZN9IPAddressC1Ev+0x18>)
   df9d8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   df9da:	2211      	movs	r2, #17
   df9dc:	f840 3b04 	str.w	r3, [r0], #4
   df9e0:	2100      	movs	r1, #0
   df9e2:	f001 feb9 	bl	e1758 <memset>
{
    clear();
}
   df9e6:	4620      	mov	r0, r4
   df9e8:	bd10      	pop	{r4, pc}
   df9ea:	bf00      	nop
   df9ec:	000e3d38 	.word	0x000e3d38

000df9f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   df9f0:	4603      	mov	r3, r0
   df9f2:	4a07      	ldr	r2, [pc, #28]	; (dfa10 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   df9f4:	b510      	push	{r4, lr}
   df9f6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   df9fa:	f101 0210 	add.w	r2, r1, #16
   df9fe:	f851 4b04 	ldr.w	r4, [r1], #4
   dfa02:	f843 4b04 	str.w	r4, [r3], #4
   dfa06:	4291      	cmp	r1, r2
   dfa08:	d1f9      	bne.n	df9fe <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   dfa0a:	780a      	ldrb	r2, [r1, #0]
   dfa0c:	701a      	strb	r2, [r3, #0]
}
   dfa0e:	bd10      	pop	{r4, pc}
   dfa10:	000e3d38 	.word	0x000e3d38

000dfa14 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   dfa14:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   dfa16:	2b04      	cmp	r3, #4
   dfa18:	d101      	bne.n	dfa1e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   dfa1a:	6840      	ldr	r0, [r0, #4]
   dfa1c:	e008      	b.n	dfa30 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   dfa1e:	2b06      	cmp	r3, #6
   dfa20:	d10a      	bne.n	dfa38 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dfa22:	6843      	ldr	r3, [r0, #4]
   dfa24:	b953      	cbnz	r3, dfa3c <_ZNK9IPAddresscvbEv+0x28>
   dfa26:	6883      	ldr	r3, [r0, #8]
   dfa28:	b943      	cbnz	r3, dfa3c <_ZNK9IPAddresscvbEv+0x28>
   dfa2a:	68c3      	ldr	r3, [r0, #12]
   dfa2c:	b933      	cbnz	r3, dfa3c <_ZNK9IPAddresscvbEv+0x28>
   dfa2e:	6900      	ldr	r0, [r0, #16]
   dfa30:	3000      	adds	r0, #0
   dfa32:	bf18      	it	ne
   dfa34:	2001      	movne	r0, #1
   dfa36:	4770      	bx	lr
    } else {
        return false;
   dfa38:	2000      	movs	r0, #0
   dfa3a:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   dfa3c:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   dfa3e:	4770      	bx	lr

000dfa40 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   dfa40:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   dfa42:	f89d 4008 	ldrb.w	r4, [sp, #8]
   dfa46:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   dfa4a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   dfa4e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   dfa52:	2304      	movs	r3, #4
   dfa54:	6041      	str	r1, [r0, #4]
   dfa56:	7503      	strb	r3, [r0, #20]
   dfa58:	bd10      	pop	{r4, pc}

000dfa5a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   dfa5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   dfa5c:	780d      	ldrb	r5, [r1, #0]
   dfa5e:	788b      	ldrb	r3, [r1, #2]
   dfa60:	784a      	ldrb	r2, [r1, #1]
   dfa62:	78c9      	ldrb	r1, [r1, #3]
   dfa64:	9100      	str	r1, [sp, #0]
   dfa66:	4629      	mov	r1, r5
   dfa68:	f7ff ffea 	bl	dfa40 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   dfa6c:	b003      	add	sp, #12
   dfa6e:	bd30      	pop	{r4, r5, pc}

000dfa70 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dfa70:	7441      	strb	r1, [r0, #17]
   dfa72:	4770      	bx	lr

000dfa74 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   dfa74:	4770      	bx	lr

000dfa76 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   dfa76:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   dfa78:	2100      	movs	r1, #0
   dfa7a:	7c00      	ldrb	r0, [r0, #16]
   dfa7c:	f7fe fd32 	bl	de4e4 <HAL_USB_USART_Receive_Data>
}
   dfa80:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dfa84:	bf28      	it	cs
   dfa86:	f04f 30ff 	movcs.w	r0, #4294967295
   dfa8a:	bd08      	pop	{r3, pc}

000dfa8c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   dfa8c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   dfa8e:	2101      	movs	r1, #1
   dfa90:	7c00      	ldrb	r0, [r0, #16]
   dfa92:	f7fe fd27 	bl	de4e4 <HAL_USB_USART_Receive_Data>
}
   dfa96:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dfa9a:	bf28      	it	cs
   dfa9c:	f04f 30ff 	movcs.w	r0, #4294967295
   dfaa0:	bd08      	pop	{r3, pc}

000dfaa2 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   dfaa2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   dfaa4:	7c00      	ldrb	r0, [r0, #16]
   dfaa6:	f7fe fd15 	bl	de4d4 <HAL_USB_USART_Available_Data_For_Write>
}
   dfaaa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dfaae:	bd08      	pop	{r3, pc}

000dfab0 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   dfab0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   dfab2:	7c00      	ldrb	r0, [r0, #16]
   dfab4:	f7fe fd06 	bl	de4c4 <HAL_USB_USART_Available_Data>
}
   dfab8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dfabc:	bd08      	pop	{r3, pc}

000dfabe <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   dfabe:	7c00      	ldrb	r0, [r0, #16]
   dfac0:	f7fe bd20 	b.w	de504 <HAL_USB_USART_Flush_Data>

000dfac4 <_ZN9USBSerialD0Ev>:
   dfac4:	b510      	push	{r4, lr}
   dfac6:	2114      	movs	r1, #20
   dfac8:	4604      	mov	r4, r0
   dfaca:	f000 fed5 	bl	e0878 <_ZdlPvj>
   dface:	4620      	mov	r0, r4
   dfad0:	bd10      	pop	{r4, pc}

000dfad2 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dfad2:	b538      	push	{r3, r4, r5, lr}
   dfad4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dfad6:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   dfad8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   dfada:	f7fe fcfb 	bl	de4d4 <HAL_USB_USART_Available_Data_For_Write>
   dfade:	2800      	cmp	r0, #0
   dfae0:	dc01      	bgt.n	dfae6 <_ZN9USBSerial5writeEh+0x14>
   dfae2:	7c60      	ldrb	r0, [r4, #17]
   dfae4:	b128      	cbz	r0, dfaf2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   dfae6:	4629      	mov	r1, r5
   dfae8:	7c20      	ldrb	r0, [r4, #16]
   dfaea:	f7fe fd03 	bl	de4f4 <HAL_USB_USART_Send_Data>
   dfaee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   dfaf2:	bd38      	pop	{r3, r4, r5, pc}

000dfaf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dfaf4:	b510      	push	{r4, lr}
   dfaf6:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   dfaf8:	2300      	movs	r3, #0
   dfafa:	6063      	str	r3, [r4, #4]
   dfafc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dfb00:	60a3      	str	r3, [r4, #8]
   dfb02:	4b05      	ldr	r3, [pc, #20]	; (dfb18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   dfb04:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   dfb06:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   dfb08:	4608      	mov	r0, r1
{
  _serial = serial;
   dfb0a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   dfb0c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   dfb0e:	4611      	mov	r1, r2
   dfb10:	f7fe fcd0 	bl	de4b4 <HAL_USB_USART_Init>
}
   dfb14:	4620      	mov	r0, r4
   dfb16:	bd10      	pop	{r4, pc}
   dfb18:	000e3d4c 	.word	0x000e3d4c

000dfb1c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dfb1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   dfb1e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   dfb20:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   dfb22:	2100      	movs	r1, #0
   dfb24:	f001 fe18 	bl	e1758 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   dfb28:	4620      	mov	r0, r4
   dfb2a:	bd10      	pop	{r4, pc}

000dfb2c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   dfb2c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dfb2e:	4d0e      	ldr	r5, [pc, #56]	; (dfb68 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   dfb30:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   dfb32:	a801      	add	r0, sp, #4
   dfb34:	f7ff fff2 	bl	dfb1c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   dfb38:	6829      	ldr	r1, [r5, #0]
   dfb3a:	f011 0401 	ands.w	r4, r1, #1
   dfb3e:	d110      	bne.n	dfb62 <_Z16_fetch_usbserialv+0x36>
   dfb40:	4628      	mov	r0, r5
   dfb42:	f7f4 fab2 	bl	d40aa <__cxa_guard_acquire>
   dfb46:	b160      	cbz	r0, dfb62 <_Z16_fetch_usbserialv+0x36>
   dfb48:	aa01      	add	r2, sp, #4
   dfb4a:	4621      	mov	r1, r4
   dfb4c:	4807      	ldr	r0, [pc, #28]	; (dfb6c <_Z16_fetch_usbserialv+0x40>)
   dfb4e:	f7ff ffd1 	bl	dfaf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   dfb52:	4628      	mov	r0, r5
   dfb54:	f7f4 faae 	bl	d40b4 <__cxa_guard_release>
   dfb58:	4a05      	ldr	r2, [pc, #20]	; (dfb70 <_Z16_fetch_usbserialv+0x44>)
   dfb5a:	4906      	ldr	r1, [pc, #24]	; (dfb74 <_Z16_fetch_usbserialv+0x48>)
   dfb5c:	4803      	ldr	r0, [pc, #12]	; (dfb6c <_Z16_fetch_usbserialv+0x40>)
   dfb5e:	f000 fe7d 	bl	e085c <__aeabi_atexit>
	return _usbserial;
}
   dfb62:	4802      	ldr	r0, [pc, #8]	; (dfb6c <_Z16_fetch_usbserialv+0x40>)
   dfb64:	b007      	add	sp, #28
   dfb66:	bd30      	pop	{r4, r5, pc}
   dfb68:	2003e3d8 	.word	0x2003e3d8
   dfb6c:	2003e3dc 	.word	0x2003e3dc
   dfb70:	2003e2e0 	.word	0x2003e2e0
   dfb74:	000dfa75 	.word	0x000dfa75

000dfb78 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   dfb78:	4770      	bx	lr

000dfb7a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   dfb7a:	7441      	strb	r1, [r0, #17]
   dfb7c:	4770      	bx	lr

000dfb7e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   dfb7e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   dfb80:	7c00      	ldrb	r0, [r0, #16]
   dfb82:	f7fe fc1f 	bl	de3c4 <HAL_USART_Available_Data_For_Write>
}
   dfb86:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dfb8a:	bd08      	pop	{r3, pc}

000dfb8c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   dfb8c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   dfb8e:	7c00      	ldrb	r0, [r0, #16]
   dfb90:	f7fe fbf0 	bl	de374 <HAL_USART_Available_Data>
}
   dfb94:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   dfb98:	bd08      	pop	{r3, pc}

000dfb9a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   dfb9a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   dfb9c:	7c00      	ldrb	r0, [r0, #16]
   dfb9e:	f7fe fbf9 	bl	de394 <HAL_USART_Peek_Data>
}
   dfba2:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dfba6:	bf28      	it	cs
   dfba8:	f04f 30ff 	movcs.w	r0, #4294967295
   dfbac:	bd08      	pop	{r3, pc}

000dfbae <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   dfbae:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   dfbb0:	7c00      	ldrb	r0, [r0, #16]
   dfbb2:	f7fe fbe7 	bl	de384 <HAL_USART_Read_Data>
}
   dfbb6:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   dfbba:	bf28      	it	cs
   dfbbc:	f04f 30ff 	movcs.w	r0, #4294967295
   dfbc0:	bd08      	pop	{r3, pc}

000dfbc2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   dfbc2:	7c00      	ldrb	r0, [r0, #16]
   dfbc4:	f7fe bbee 	b.w	de3a4 <HAL_USART_Flush_Data>

000dfbc8 <_ZN11USARTSerialD0Ev>:
   dfbc8:	b510      	push	{r4, lr}
   dfbca:	2114      	movs	r1, #20
   dfbcc:	4604      	mov	r4, r0
   dfbce:	f000 fe53 	bl	e0878 <_ZdlPvj>
   dfbd2:	4620      	mov	r0, r4
   dfbd4:	bd10      	pop	{r4, pc}

000dfbd6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   dfbd6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dfbd8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   dfbda:	4604      	mov	r4, r0
   dfbdc:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   dfbde:	b925      	cbnz	r5, dfbea <_ZN11USARTSerial5writeEh+0x14>
   dfbe0:	7c00      	ldrb	r0, [r0, #16]
   dfbe2:	f7fe fbef 	bl	de3c4 <HAL_USART_Available_Data_For_Write>
   dfbe6:	2800      	cmp	r0, #0
   dfbe8:	dd05      	ble.n	dfbf6 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dfbea:	4631      	mov	r1, r6
   dfbec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   dfbee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   dfbf2:	f7fe bbb7 	b.w	de364 <HAL_USART_Write_Data>
  }
  return 0;
}
   dfbf6:	4628      	mov	r0, r5
   dfbf8:	bd70      	pop	{r4, r5, r6, pc}
	...

000dfbfc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   dfbfc:	b510      	push	{r4, lr}
   dfbfe:	4604      	mov	r4, r0
   dfc00:	4608      	mov	r0, r1
   dfc02:	4611      	mov	r1, r2
   dfc04:	2200      	movs	r2, #0
   dfc06:	6062      	str	r2, [r4, #4]
   dfc08:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   dfc0c:	60a2      	str	r2, [r4, #8]
   dfc0e:	4a05      	ldr	r2, [pc, #20]	; (dfc24 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   dfc10:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   dfc12:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   dfc14:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   dfc16:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   dfc18:	461a      	mov	r2, r3
   dfc1a:	f7fe fb9b 	bl	de354 <HAL_USART_Init>
}
   dfc1e:	4620      	mov	r0, r4
   dfc20:	bd10      	pop	{r4, pc}
   dfc22:	bf00      	nop
   dfc24:	000e3d7c 	.word	0x000e3d7c

000dfc28 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   dfc28:	7c00      	ldrb	r0, [r0, #16]
   dfc2a:	f7fe bbc3 	b.w	de3b4 <HAL_USART_Is_Enabled>
	...

000dfc30 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   dfc30:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   dfc32:	4d0c      	ldr	r5, [pc, #48]	; (dfc64 <_Z22__fetch_global_Serial1v+0x34>)
   dfc34:	6829      	ldr	r1, [r5, #0]
   dfc36:	f011 0401 	ands.w	r4, r1, #1
   dfc3a:	d111      	bne.n	dfc60 <_Z22__fetch_global_Serial1v+0x30>
   dfc3c:	4628      	mov	r0, r5
   dfc3e:	f7f4 fa34 	bl	d40aa <__cxa_guard_acquire>
   dfc42:	b168      	cbz	r0, dfc60 <_Z22__fetch_global_Serial1v+0x30>
   dfc44:	4a08      	ldr	r2, [pc, #32]	; (dfc68 <_Z22__fetch_global_Serial1v+0x38>)
   dfc46:	4b09      	ldr	r3, [pc, #36]	; (dfc6c <_Z22__fetch_global_Serial1v+0x3c>)
   dfc48:	4809      	ldr	r0, [pc, #36]	; (dfc70 <_Z22__fetch_global_Serial1v+0x40>)
   dfc4a:	4621      	mov	r1, r4
   dfc4c:	f7ff ffd6 	bl	dfbfc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   dfc50:	4628      	mov	r0, r5
   dfc52:	f7f4 fa2f 	bl	d40b4 <__cxa_guard_release>
   dfc56:	4a07      	ldr	r2, [pc, #28]	; (dfc74 <_Z22__fetch_global_Serial1v+0x44>)
   dfc58:	4907      	ldr	r1, [pc, #28]	; (dfc78 <_Z22__fetch_global_Serial1v+0x48>)
   dfc5a:	4805      	ldr	r0, [pc, #20]	; (dfc70 <_Z22__fetch_global_Serial1v+0x40>)
   dfc5c:	f000 fdfe 	bl	e085c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   dfc60:	4803      	ldr	r0, [pc, #12]	; (dfc70 <_Z22__fetch_global_Serial1v+0x40>)
   dfc62:	bd38      	pop	{r3, r4, r5, pc}
   dfc64:	2003e488 	.word	0x2003e488
   dfc68:	2003e48c 	.word	0x2003e48c
   dfc6c:	2003e404 	.word	0x2003e404
   dfc70:	2003e3f0 	.word	0x2003e3f0
   dfc74:	2003e2e0 	.word	0x2003e2e0
   dfc78:	000dfb79 	.word	0x000dfb79

000dfc7c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   dfc7c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfc7e:	6883      	ldr	r3, [r0, #8]
   dfc80:	4604      	mov	r4, r0
   dfc82:	b90b      	cbnz	r3, dfc88 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   dfc84:	f000 fe0b 	bl	e089e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfc88:	68c3      	ldr	r3, [r0, #12]
   dfc8a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dfc8c:	68a3      	ldr	r3, [r4, #8]
   dfc8e:	b11b      	cbz	r3, dfc98 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dfc90:	2203      	movs	r2, #3
   dfc92:	4621      	mov	r1, r4
   dfc94:	4620      	mov	r0, r4
   dfc96:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dfc98:	4620      	mov	r0, r4
   dfc9a:	2110      	movs	r1, #16
}
   dfc9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   dfca0:	f000 bdea 	b.w	e0878 <_ZdlPvj>

000dfca4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   dfca4:	4770      	bx	lr

000dfca6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   dfca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dfca8:	4606      	mov	r6, r0
   dfcaa:	4615      	mov	r5, r2
   dfcac:	460c      	mov	r4, r1
   dfcae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dfcb0:	42bc      	cmp	r4, r7
   dfcb2:	d006      	beq.n	dfcc2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   dfcb4:	6833      	ldr	r3, [r6, #0]
   dfcb6:	f814 1b01 	ldrb.w	r1, [r4], #1
   dfcba:	689b      	ldr	r3, [r3, #8]
   dfcbc:	4630      	mov	r0, r6
   dfcbe:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   dfcc0:	e7f6      	b.n	dfcb0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   dfcc2:	4628      	mov	r0, r5
   dfcc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dfcc6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   dfcc6:	2200      	movs	r2, #0
   dfcc8:	7c00      	ldrb	r0, [r0, #16]
   dfcca:	f7fe bb8b 	b.w	de3e4 <HAL_I2C_Write_Data>

000dfcce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   dfcce:	2100      	movs	r1, #0
   dfcd0:	7c00      	ldrb	r0, [r0, #16]
   dfcd2:	f7fe bb8f 	b.w	de3f4 <HAL_I2C_Available_Data>

000dfcd6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   dfcd6:	2100      	movs	r1, #0
   dfcd8:	7c00      	ldrb	r0, [r0, #16]
   dfcda:	f7fe bb93 	b.w	de404 <HAL_I2C_Read_Data>

000dfcde <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   dfcde:	2100      	movs	r1, #0
   dfce0:	7c00      	ldrb	r0, [r0, #16]
   dfce2:	f7fe bb97 	b.w	de414 <HAL_I2C_Peek_Data>

000dfce6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   dfce6:	2100      	movs	r1, #0
   dfce8:	7c00      	ldrb	r0, [r0, #16]
   dfcea:	f7fe bb9b 	b.w	de424 <HAL_I2C_Flush_Data>

000dfcee <_ZN7TwoWireD0Ev>:
   dfcee:	b510      	push	{r4, lr}
   dfcf0:	2114      	movs	r1, #20
   dfcf2:	4604      	mov	r4, r0
   dfcf4:	f000 fdc0 	bl	e0878 <_ZdlPvj>
   dfcf8:	4620      	mov	r0, r4
   dfcfa:	bd10      	pop	{r4, pc}

000dfcfc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dfcfc:	b510      	push	{r4, lr}
   dfcfe:	4604      	mov	r4, r0
   dfd00:	2300      	movs	r3, #0
   dfd02:	6063      	str	r3, [r4, #4]
   dfd04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   dfd08:	60a3      	str	r3, [r4, #8]
   dfd0a:	4b04      	ldr	r3, [pc, #16]	; (dfd1c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   dfd0c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   dfd0e:	4608      	mov	r0, r1
   dfd10:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   dfd12:	4611      	mov	r1, r2
   dfd14:	f7fe fb96 	bl	de444 <HAL_I2C_Init>
}
   dfd18:	4620      	mov	r0, r4
   dfd1a:	bd10      	pop	{r4, pc}
   dfd1c:	000e3dac 	.word	0x000e3dac

000dfd20 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   dfd20:	2100      	movs	r1, #0
   dfd22:	7c00      	ldrb	r0, [r0, #16]
   dfd24:	f7fe bb86 	b.w	de434 <HAL_I2C_Is_Enabled>

000dfd28 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   dfd28:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   dfd2a:	2301      	movs	r3, #1
   dfd2c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   dfd2e:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   dfd30:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   dfd32:	b10b      	cbz	r3, dfd38 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   dfd34:	68c0      	ldr	r0, [r0, #12]
   dfd36:	e006      	b.n	dfd46 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dfd38:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   dfd3a:	b128      	cbz	r0, dfd48 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfd3c:	6883      	ldr	r3, [r0, #8]
   dfd3e:	b90b      	cbnz	r3, dfd44 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   dfd40:	f000 fdad 	bl	e089e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfd44:	68c3      	ldr	r3, [r0, #12]
   dfd46:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   dfd48:	2301      	movs	r3, #1
   dfd4a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   dfd4c:	2000      	movs	r0, #0
    }
   dfd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   dfd52:	f7fe bacf 	b.w	de2f4 <os_thread_exit>

000dfd56 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   dfd56:	2200      	movs	r2, #0
   dfd58:	4611      	mov	r1, r2
   dfd5a:	6840      	ldr	r0, [r0, #4]
   dfd5c:	f7fe bca8 	b.w	de6b0 <network_listening>

000dfd60 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   dfd60:	2200      	movs	r2, #0
   dfd62:	4611      	mov	r1, r2
   dfd64:	6840      	ldr	r0, [r0, #4]
   dfd66:	f7fe bcb3 	b.w	de6d0 <network_get_listen_timeout>

000dfd6a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   dfd6a:	2200      	movs	r2, #0
   dfd6c:	6840      	ldr	r0, [r0, #4]
   dfd6e:	f7fe bca7 	b.w	de6c0 <network_set_listen_timeout>

000dfd72 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   dfd72:	2200      	movs	r2, #0
   dfd74:	f081 0101 	eor.w	r1, r1, #1
   dfd78:	6840      	ldr	r0, [r0, #4]
   dfd7a:	f7fe bc91 	b.w	de6a0 <network_listen>

000dfd7e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   dfd7e:	2300      	movs	r3, #0
   dfd80:	461a      	mov	r2, r3
   dfd82:	2101      	movs	r1, #1
   dfd84:	6840      	ldr	r0, [r0, #4]
   dfd86:	f7fe bc83 	b.w	de690 <network_off>

000dfd8a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   dfd8a:	2300      	movs	r3, #0
   dfd8c:	461a      	mov	r2, r3
   dfd8e:	4619      	mov	r1, r3
   dfd90:	6840      	ldr	r0, [r0, #4]
   dfd92:	f7fe bc75 	b.w	de680 <network_on>

000dfd96 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   dfd96:	2200      	movs	r2, #0
   dfd98:	4611      	mov	r1, r2
   dfd9a:	6840      	ldr	r0, [r0, #4]
   dfd9c:	f7fe bc68 	b.w	de670 <network_ready>

000dfda0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   dfda0:	2200      	movs	r2, #0
   dfda2:	4611      	mov	r1, r2
   dfda4:	6840      	ldr	r0, [r0, #4]
   dfda6:	f7fe bc53 	b.w	de650 <network_connecting>

000dfdaa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   dfdaa:	2200      	movs	r2, #0
   dfdac:	2102      	movs	r1, #2
   dfdae:	6840      	ldr	r0, [r0, #4]
   dfdb0:	f7fe bc56 	b.w	de660 <network_disconnect>

000dfdb4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   dfdb4:	2300      	movs	r3, #0
   dfdb6:	461a      	mov	r2, r3
   dfdb8:	6840      	ldr	r0, [r0, #4]
   dfdba:	f7fe bc41 	b.w	de640 <network_connect>

000dfdbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   dfdbe:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dfdc0:	4605      	mov	r5, r0
   dfdc2:	b188      	cbz	r0, dfde8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dfdc4:	6804      	ldr	r4, [r0, #0]
   dfdc6:	b14c      	cbz	r4, dfddc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   dfdc8:	68a3      	ldr	r3, [r4, #8]
   dfdca:	b11b      	cbz	r3, dfdd4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dfdcc:	2203      	movs	r2, #3
   dfdce:	4621      	mov	r1, r4
   dfdd0:	4620      	mov	r0, r4
   dfdd2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dfdd4:	2110      	movs	r1, #16
   dfdd6:	4620      	mov	r0, r4
   dfdd8:	f000 fd4e 	bl	e0878 <_ZdlPvj>
   dfddc:	4628      	mov	r0, r5
   dfdde:	2114      	movs	r1, #20
      }
   dfde0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dfde4:	f000 bd48 	b.w	e0878 <_ZdlPvj>
   dfde8:	bd38      	pop	{r3, r4, r5, pc}

000dfdea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   dfdea:	b110      	cbz	r0, dfdf2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   dfdec:	6803      	ldr	r3, [r0, #0]
   dfdee:	685b      	ldr	r3, [r3, #4]
   dfdf0:	4718      	bx	r3
   dfdf2:	4770      	bx	lr

000dfdf4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   dfdf4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   dfdf6:	6803      	ldr	r3, [r0, #0]
   dfdf8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   dfdfa:	b1bb      	cbz	r3, dfe2c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   dfdfc:	6858      	ldr	r0, [r3, #4]
   dfdfe:	f7fe fa41 	bl	de284 <os_thread_is_current>
   dfe02:	b978      	cbnz	r0, dfe24 <_ZN6ThreadD1Ev+0x30>
   dfe04:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   dfe06:	7c5a      	ldrb	r2, [r3, #17]
   dfe08:	b912      	cbnz	r2, dfe10 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   dfe0a:	6858      	ldr	r0, [r3, #4]
   dfe0c:	f7fe fa42 	bl	de294 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   dfe10:	6823      	ldr	r3, [r4, #0]
   dfe12:	6858      	ldr	r0, [r3, #4]
   dfe14:	f7fe fa46 	bl	de2a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dfe18:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   dfe1a:	2300      	movs	r3, #0
   dfe1c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   dfe1e:	b128      	cbz	r0, dfe2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   dfe20:	f7ff ffcd 	bl	dfdbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dfe24:	6820      	ldr	r0, [r4, #0]
   dfe26:	b108      	cbz	r0, dfe2c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   dfe28:	f7ff ffc9 	bl	dfdbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   dfe2c:	4620      	mov	r0, r4
   dfe2e:	bd10      	pop	{r4, pc}

000dfe30 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   dfe30:	b538      	push	{r3, r4, r5, lr}
   dfe32:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dfe34:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   dfe38:	b108      	cbz	r0, dfe3e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   dfe3a:	f7f4 f934 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dfe3e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   dfe42:	b108      	cbz	r0, dfe48 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   dfe44:	f7fe fa3e 	bl	de2c4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dfe48:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   dfe4c:	b135      	cbz	r5, dfe5c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   dfe4e:	4628      	mov	r0, r5
   dfe50:	f7ff ffd0 	bl	dfdf4 <_ZN6ThreadD1Ev>
   dfe54:	2104      	movs	r1, #4
   dfe56:	4628      	mov	r0, r5
   dfe58:	f000 fd0e 	bl	e0878 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   dfe5c:	6820      	ldr	r0, [r4, #0]
   dfe5e:	b108      	cbz	r0, dfe64 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   dfe60:	f7ff ffc3 	bl	dfdea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   dfe64:	4620      	mov	r0, r4
   dfe66:	bd38      	pop	{r3, r4, r5, pc}

000dfe68 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   dfe68:	b510      	push	{r4, lr}
   dfe6a:	4b04      	ldr	r3, [pc, #16]	; (dfe7c <_ZN5spark9MeshClassD1Ev+0x14>)
   dfe6c:	4604      	mov	r4, r0
   dfe6e:	f840 3b08 	str.w	r3, [r0], #8
   dfe72:	f7ff ffdd 	bl	dfe30 <_ZN5spark11MeshPublishD1Ev>
   dfe76:	4620      	mov	r0, r4
   dfe78:	bd10      	pop	{r4, pc}
   dfe7a:	bf00      	nop
   dfe7c:	000e3dd4 	.word	0x000e3dd4

000dfe80 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   dfe80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dfe84:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   dfe86:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   dfe8a:	4606      	mov	r6, r0
   dfe8c:	4688      	mov	r8, r1
   dfe8e:	4691      	mov	r9, r2
   dfe90:	469a      	mov	sl, r3
   dfe92:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   dfe94:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   dfe96:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dfe98:	454b      	cmp	r3, r9
   dfe9a:	d129      	bne.n	dfef0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   dfe9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   dfe9e:	4553      	cmp	r3, sl
   dfea0:	d126      	bne.n	dfef0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   dfea2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   dfea6:	455b      	cmp	r3, fp
   dfea8:	d122      	bne.n	dfef0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   dfeaa:	2140      	movs	r1, #64	; 0x40
   dfeac:	4640      	mov	r0, r8
   dfeae:	f001 fccd 	bl	e184c <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   dfeb2:	4641      	mov	r1, r8
   dfeb4:	4602      	mov	r2, r0
   dfeb6:	4620      	mov	r0, r4
   dfeb8:	f001 fcb3 	bl	e1822 <strncmp>
   dfebc:	b9c0      	cbnz	r0, dfef0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   dfebe:	b16f      	cbz	r7, dfedc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   dfec0:	210c      	movs	r1, #12
   dfec2:	4638      	mov	r0, r7
   dfec4:	f001 fcc2 	bl	e184c <strnlen>
                if (id_len)
   dfec8:	4602      	mov	r2, r0
   dfeca:	b138      	cbz	r0, dfedc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   dfecc:	2358      	movs	r3, #88	; 0x58
   dfece:	fb03 6005 	mla	r0, r3, r5, r6
   dfed2:	4639      	mov	r1, r7
   dfed4:	3049      	adds	r0, #73	; 0x49
   dfed6:	f001 fca4 	bl	e1822 <strncmp>
   dfeda:	e004      	b.n	dfee6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   dfedc:	2058      	movs	r0, #88	; 0x58
   dfede:	fb00 6505 	mla	r5, r0, r5, r6
   dfee2:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   dfee6:	fab0 f080 	clz	r0, r0
   dfeea:	0940      	lsrs	r0, r0, #5
   dfeec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   dfef0:	3501      	adds	r5, #1
   dfef2:	2d05      	cmp	r5, #5
   dfef4:	f104 0458 	add.w	r4, r4, #88	; 0x58
   dfef8:	d1cd      	bne.n	dfe96 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   dfefa:	2000      	movs	r0, #0
}
   dfefc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000dff00 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   dff00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   dff04:	b085      	sub	sp, #20
   dff06:	4607      	mov	r7, r0
   dff08:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   dff0c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   dff0e:	9601      	str	r6, [sp, #4]
   dff10:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   dff14:	4689      	mov	r9, r1
   dff16:	9202      	str	r2, [sp, #8]
   dff18:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   dff1a:	f7ff ffb1 	bl	dfe80 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   dff1e:	2800      	cmp	r0, #0
   dff20:	d13c      	bne.n	dff9c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   dff22:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   dff24:	2358      	movs	r3, #88	; 0x58
   dff26:	fb03 7504 	mla	r5, r3, r4, r7
   dff2a:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   dff2e:	f1b8 0f00 	cmp.w	r8, #0
   dff32:	d12e      	bne.n	dff92 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   dff34:	2140      	movs	r1, #64	; 0x40
   dff36:	4648      	mov	r0, r9
   dff38:	f001 fc88 	bl	e184c <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   dff3c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   dff3e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   dff40:	4602      	mov	r2, r0
   dff42:	4628      	mov	r0, r5
   dff44:	f001 fbfd 	bl	e1742 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   dff48:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   dff4c:	4641      	mov	r1, r8
   dff4e:	eb05 000b 	add.w	r0, r5, fp
   dff52:	f001 fc01 	bl	e1758 <memset>
            event_handlers[i].handler = handler;
   dff56:	9b02      	ldr	r3, [sp, #8]
   dff58:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   dff5a:	9b03      	ldr	r3, [sp, #12]
   dff5c:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   dff5e:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   dff62:	b12e      	cbz	r6, dff70 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   dff64:	210c      	movs	r1, #12
   dff66:	4630      	mov	r0, r6
   dff68:	f001 fc70 	bl	e184c <strnlen>
   dff6c:	4605      	mov	r5, r0
   dff6e:	e000      	b.n	dff72 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   dff70:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   dff72:	2058      	movs	r0, #88	; 0x58
   dff74:	4344      	muls	r4, r0
   dff76:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   dff78:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   dff7a:	462a      	mov	r2, r5
   dff7c:	4631      	mov	r1, r6
   dff7e:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   dff80:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   dff82:	f001 fbde 	bl	e1742 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   dff86:	2000      	movs	r0, #0
   dff88:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   dff8c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   dff90:	e005      	b.n	dff9e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   dff92:	3401      	adds	r4, #1
   dff94:	2c05      	cmp	r4, #5
   dff96:	d1c6      	bne.n	dff26 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   dff98:	4802      	ldr	r0, [pc, #8]	; (dffa4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   dff9a:	e000      	b.n	dff9e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   dff9c:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   dff9e:	b005      	add	sp, #20
   dffa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dffa4:	fffffefc 	.word	0xfffffefc

000dffa8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   dffa8:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   dffaa:	2300      	movs	r3, #0
   dffac:	9301      	str	r3, [sp, #4]
   dffae:	9300      	str	r3, [sp, #0]
   dffb0:	f7ff ffa6 	bl	dff00 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   dffb4:	b003      	add	sp, #12
   dffb6:	f85d fb04 	ldr.w	pc, [sp], #4

000dffba <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   dffba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   dffbe:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   dffc0:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   dffc2:	460d      	mov	r5, r1
   dffc4:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   dffc6:	f001 fc24 	bl	e1812 <strlen>
   dffca:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   dffce:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   dffd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   dffd2:	b1ab      	cbz	r3, e0000 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   dffd4:	2140      	movs	r1, #64	; 0x40
   dffd6:	4620      	mov	r0, r4
   dffd8:	f001 fc38 	bl	e184c <strnlen>

        if (event_name_length < filter_length)
   dffdc:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   dffde:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   dffe0:	d30b      	bcc.n	dfffa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   dffe2:	4629      	mov	r1, r5
   dffe4:	4620      	mov	r0, r4
   dffe6:	f001 fb9d 	bl	e1724 <memcmp>
        if (0 == cmp)
   dffea:	b930      	cbnz	r0, dfffa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   dffec:	9000      	str	r0, [sp, #0]
   dffee:	4643      	mov	r3, r8
   dfff0:	462a      	mov	r2, r5
   dfff2:	4621      	mov	r1, r4
   dfff4:	2058      	movs	r0, #88	; 0x58
   dfff6:	f7fe fb11 	bl	de61c <system_invoke_event_handler>
   dfffa:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   dfffc:	42b4      	cmp	r4, r6
   dfffe:	d1e7      	bne.n	dffd0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   e0000:	b002      	add	sp, #8
   e0002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e0008 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   e0008:	b530      	push	{r4, r5, lr}
   e000a:	b08d      	sub	sp, #52	; 0x34
   e000c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   e000e:	2211      	movs	r2, #17
   e0010:	2100      	movs	r1, #0
   e0012:	a801      	add	r0, sp, #4
   e0014:	f001 fba0 	bl	e1758 <memset>
    addr.v = 6;
   e0018:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e001a:	aa01      	add	r2, sp, #4
   e001c:	4909      	ldr	r1, [pc, #36]	; (e0044 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   e001e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e0022:	200a      	movs	r0, #10
   e0024:	f7fe f976 	bl	de314 <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e0028:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   e002a:	a901      	add	r1, sp, #4
   e002c:	a806      	add	r0, sp, #24
   e002e:	f7ff fcdf 	bl	df9f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e0032:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0034:	3404      	adds	r4, #4
   e0036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0038:	682b      	ldr	r3, [r5, #0]
   e003a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   e003c:	2000      	movs	r0, #0
   e003e:	b00d      	add	sp, #52	; 0x34
   e0040:	bd30      	pop	{r4, r5, pc}
   e0042:	bf00      	nop
   e0044:	000e3e00 	.word	0x000e3e00

000e0048 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e004c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   e004e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0052:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   e0054:	4630      	mov	r0, r6
   e0056:	f7ff f82a 	bl	df0ae <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e005a:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e005c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0060:	f7fe f940 	bl	de2e4 <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   e0064:	2c00      	cmp	r4, #0
   e0066:	d063      	beq.n	e0130 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   e0068:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e006c:	b163      	cbz	r3, e0088 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   e006e:	6823      	ldr	r3, [r4, #0]
   e0070:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   e0074:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   e0076:	4620      	mov	r0, r4
   e0078:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e007c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   e0080:	47b8      	blx	r7
        if (len > 0) {
   e0082:	1e04      	subs	r4, r0, #0
   e0084:	dc13      	bgt.n	e00ae <_ZN5spark11MeshPublish4pollEv+0x66>
   e0086:	e056      	b.n	e0136 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   e0088:	492d      	ldr	r1, [pc, #180]	; (e0140 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   e008a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   e008e:	f000 fbf5 	bl	e087c <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0092:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   e0096:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   e009a:	b113      	cbz	r3, e00a2 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e009c:	4618      	mov	r0, r3
   e009e:	f7f4 f802 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   e00a2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e00a6:	2b00      	cmp	r3, #0
   e00a8:	d1e1      	bne.n	e006e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   e00aa:	4826      	ldr	r0, [pc, #152]	; (e0144 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   e00ac:	e044      	b.n	e0138 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   e00ae:	2320      	movs	r3, #32
   e00b0:	4a25      	ldr	r2, [pc, #148]	; (e0148 <_ZN5spark11MeshPublish4pollEv+0x100>)
   e00b2:	9302      	str	r3, [sp, #8]
   e00b4:	9200      	str	r2, [sp, #0]
   e00b6:	2300      	movs	r3, #0
   e00b8:	9401      	str	r4, [sp, #4]
   e00ba:	aa02      	add	r2, sp, #8
   e00bc:	4923      	ldr	r1, [pc, #140]	; (e014c <_ZN5spark11MeshPublish4pollEv+0x104>)
   e00be:	9303      	str	r3, [sp, #12]
   e00c0:	2001      	movs	r0, #1
   e00c2:	f7fe fa57 	bl	de574 <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e00c6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   e00ca:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   e00cc:	781b      	ldrb	r3, [r3, #0]
   e00ce:	bb6b      	cbnz	r3, e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   e00d0:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   e00d2:	4621      	mov	r1, r4
   e00d4:	4638      	mov	r0, r7
   e00d6:	f001 fbb9 	bl	e184c <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   e00da:	b338      	cbz	r0, e012c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   e00dc:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e00de:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   e00e0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e00e4:	dd22      	ble.n	e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e00e6:	5c3b      	ldrb	r3, [r7, r0]
   e00e8:	bb03      	cbnz	r3, e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   e00ea:	3c01      	subs	r4, #1
   e00ec:	d00e      	beq.n	e010c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   e00ee:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   e00f2:	4621      	mov	r1, r4
   e00f4:	4640      	mov	r0, r8
   e00f6:	f001 fba9 	bl	e184c <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   e00fa:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e00fc:	2c00      	cmp	r4, #0
   e00fe:	dd15      	ble.n	e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e0100:	f818 3000 	ldrb.w	r3, [r8, r0]
   e0104:	b993      	cbnz	r3, e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   e0106:	2c01      	cmp	r4, #1
   e0108:	d002      	beq.n	e0110 <_ZN5spark11MeshPublish4pollEv+0xc8>
   e010a:	e00f      	b.n	e012c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   e010c:	f8df 8044 	ldr.w	r8, [pc, #68]	; e0154 <_ZN5spark11MeshPublish4pollEv+0x10c>
   e0110:	4630      	mov	r0, r6
   e0112:	f7fe ffcc 	bl	df0ae <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   e0116:	4642      	mov	r2, r8
   e0118:	4639      	mov	r1, r7
   e011a:	1d28      	adds	r0, r5, #4
   e011c:	f7ff ff4d 	bl	dffba <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   e0120:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0124:	f7fe f8de 	bl	de2e4 <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0128:	2000      	movs	r0, #0
   e012a:	e005      	b.n	e0138 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   e012c:	4808      	ldr	r0, [pc, #32]	; (e0150 <_ZN5spark11MeshPublish4pollEv+0x108>)
   e012e:	e003      	b.n	e0138 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   e0130:	2064      	movs	r0, #100	; 0x64
   e0132:	f7fe f857 	bl	de1e4 <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0136:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   e0138:	b00a      	add	sp, #40	; 0x28
   e013a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e013e:	bf00      	nop
   e0140:	000e3ebc 	.word	0x000e3ebc
   e0144:	fffffefc 	.word	0xfffffefc
   e0148:	000e3e14 	.word	0x000e3e14
   e014c:	000e3e0d 	.word	0x000e3e0d
   e0150:	fffffee8 	.word	0xfffffee8
   e0154:	000e3cb4 	.word	0x000e3cb4

000e0158 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0158:	b510      	push	{r4, lr}
   e015a:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e015c:	f3bf 8f5f 	dmb	sy
   e0160:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   e0164:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   e0168:	b91b      	cbnz	r3, e0172 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   e016a:	4620      	mov	r0, r4
   e016c:	f7ff ff6c 	bl	e0048 <_ZN5spark11MeshPublish4pollEv>
   e0170:	e7f4      	b.n	e015c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   e0172:	bd10      	pop	{r4, pc}

000e0174 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>:
        HAL_Delay_Milliseconds(100);
    }
    return result;
}

int MeshClass::selectAntenna(MeshAntennaType antenna) {
   e0174:	b508      	push	{r3, lr}
   e0176:	4608      	mov	r0, r1
    CHECK(mesh_select_antenna((int)antenna, nullptr));
   e0178:	2100      	movs	r1, #0
   e017a:	f7fe f92b 	bl	de3d4 <mesh_select_antenna>
    return 0;
}
   e017e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   e0182:	bd08      	pop	{r3, pc}

000e0184 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   e0184:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0186:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0188:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e018a:	b144      	cbz	r4, e019e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e018c:	4620      	mov	r0, r4
   e018e:	f7ff fe31 	bl	dfdf4 <_ZN6ThreadD1Ev>
   e0192:	4620      	mov	r0, r4
   e0194:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   e0196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e019a:	f000 bb6d 	b.w	e0878 <_ZdlPvj>
   e019e:	bd10      	pop	{r4, pc}

000e01a0 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   e01a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e01a4:	4605      	mov	r5, r0
   e01a6:	b08a      	sub	sp, #40	; 0x28
   e01a8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e01ac:	f7fe ff7f 	bl	df0ae <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   e01b0:	682c      	ldr	r4, [r5, #0]
   e01b2:	2c00      	cmp	r4, #0
   e01b4:	d17b      	bne.n	e02ae <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   e01b6:	204c      	movs	r0, #76	; 0x4c
   e01b8:	f7f3 ff6f 	bl	d409a <_Znwj>
   e01bc:	4606      	mov	r6, r0
   e01be:	2800      	cmp	r0, #0
   e01c0:	d073      	beq.n	e02aa <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   e01c2:	f7fe fe05 	bl	dedd0 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   e01c6:	4622      	mov	r2, r4
   e01c8:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   e01cc:	4630      	mov	r0, r6
   e01ce:	f7fe fe2f 	bl	dee30 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e01d2:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   e01d4:	483a      	ldr	r0, [pc, #232]	; (e02c0 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e01d6:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   e01da:	f7fd ffd3 	bl	de184 <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   e01de:	6833      	ldr	r3, [r6, #0]
   e01e0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   e01e4:	6a1b      	ldr	r3, [r3, #32]
   e01e6:	f249 0169 	movw	r1, #36969	; 0x9069
   e01ea:	4630      	mov	r0, r6
   e01ec:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   e01ee:	a804      	add	r0, sp, #16
   e01f0:	f7ff fbf0 	bl	df9d4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   e01f4:	a804      	add	r0, sp, #16
   e01f6:	f7ff ff07 	bl	e0008 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   e01fa:	2800      	cmp	r0, #0
   e01fc:	db4a      	blt.n	e0294 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   e01fe:	a904      	add	r1, sp, #16
   e0200:	4630      	mov	r0, r6
   e0202:	f7fe fe81 	bl	def08 <_ZN3UDP13joinMulticastERK9IPAddress>
   e0206:	2800      	cmp	r0, #0
   e0208:	db44      	blt.n	e0294 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e020a:	f3bf 8f5f 	dmb	sy
   e020e:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   e0212:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0216:	492b      	ldr	r1, [pc, #172]	; (e02c4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0218:	2004      	movs	r0, #4
   e021a:	f000 fb31 	bl	e0880 <_ZnwjRKSt9nothrow_t>
   e021e:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   e0222:	4607      	mov	r7, r0
   e0224:	b348      	cbz	r0, e027a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   e0226:	4927      	ldr	r1, [pc, #156]	; (e02c4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0228:	2014      	movs	r0, #20
   e022a:	f000 fb29 	bl	e0880 <_ZnwjRKSt9nothrow_t>
   e022e:	b128      	cbz	r0, e023c <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   e0230:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0232:	6004      	str	r4, [r0, #0]
   e0234:	6044      	str	r4, [r0, #4]
   e0236:	6084      	str	r4, [r0, #8]
   e0238:	60c4      	str	r4, [r0, #12]
   e023a:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e023c:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   e023e:	b1b0      	cbz	r0, e026e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   e0240:	4b21      	ldr	r3, [pc, #132]	; (e02c8 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   e0242:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0244:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e0246:	4921      	ldr	r1, [pc, #132]	; (e02cc <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   e0248:	60dd      	str	r5, [r3, #12]
   e024a:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e024c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   e0250:	e88d 0009 	stmia.w	sp, {r0, r3}
   e0254:	2203      	movs	r2, #3
   e0256:	4b1e      	ldr	r3, [pc, #120]	; (e02d0 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   e0258:	3004      	adds	r0, #4
   e025a:	f7fe f80b 	bl	de274 <os_thread_create>
   e025e:	b930      	cbnz	r0, e026e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   e0260:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   e0262:	7c1b      	ldrb	r3, [r3, #16]
   e0264:	b94b      	cbnz	r3, e027a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   e0266:	2001      	movs	r0, #1
   e0268:	f7fd ffbc 	bl	de1e4 <HAL_Delay_Milliseconds>
   e026c:	e7f8      	b.n	e0260 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e026e:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0270:	2300      	movs	r3, #0
   e0272:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0274:	b108      	cbz	r0, e027a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   e0276:	f7ff fda2 	bl	dfdbe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   e027a:	4639      	mov	r1, r7
   e027c:	4640      	mov	r0, r8
   e027e:	f7ff ff81 	bl	e0184 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   e0282:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   e0286:	b13b      	cbz	r3, e0298 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0288:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   e028a:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e028c:	b130      	cbz	r0, e029c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   e028e:	f7ff fdac 	bl	dfdea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0292:	e00c      	b.n	e02ae <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   e0294:	4604      	mov	r4, r0
   e0296:	e003      	b.n	e02a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   e0298:	4c0e      	ldr	r4, [pc, #56]	; (e02d4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e029a:	e001      	b.n	e02a0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   e029c:	4604      	mov	r4, r0
   e029e:	e007      	b.n	e02b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e02a0:	b136      	cbz	r6, e02b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   e02a2:	4630      	mov	r0, r6
   e02a4:	f7ff fda1 	bl	dfdea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e02a8:	e002      	b.n	e02b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   e02aa:	4c0a      	ldr	r4, [pc, #40]	; (e02d4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e02ac:	e000      	b.n	e02b0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   e02ae:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e02b0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e02b4:	f7fe f816 	bl	de2e4 <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   e02b8:	4620      	mov	r0, r4
   e02ba:	b00a      	add	sp, #40	; 0x28
   e02bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e02c0:	000e3e24 	.word	0x000e3e24
   e02c4:	000e3ebc 	.word	0x000e3ebc
   e02c8:	000e0159 	.word	0x000e0159
   e02cc:	000e3e28 	.word	0x000e3e28
   e02d0:	000dfd29 	.word	0x000dfd29
   e02d4:	fffffefc 	.word	0xfffffefc

000e02d8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   e02d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e02da:	4605      	mov	r5, r0
   e02dc:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e02e0:	460e      	mov	r6, r1
   e02e2:	4617      	mov	r7, r2
   e02e4:	f7fe fee3 	bl	df0ae <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   e02e8:	4628      	mov	r0, r5
   e02ea:	f7ff ff59 	bl	e01a0 <_ZN5spark11MeshPublish13initializeUdpEv>
   e02ee:	2800      	cmp	r0, #0
   e02f0:	db07      	blt.n	e0302 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   e02f2:	463a      	mov	r2, r7
   e02f4:	4631      	mov	r1, r6
   e02f6:	1d28      	adds	r0, r5, #4
   e02f8:	f7ff fe56 	bl	dffa8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   e02fc:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   e0300:	e000      	b.n	e0304 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   e0302:	4604      	mov	r4, r0
   e0304:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0308:	f7fd ffec 	bl	de2e4 <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   e030c:	4620      	mov	r0, r4
   e030e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0310 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e0310:	b538      	push	{r3, r4, r5, lr}
   e0312:	4c0e      	ldr	r4, [pc, #56]	; (e034c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e0314:	4b0e      	ldr	r3, [pc, #56]	; (e0350 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e0316:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0318:	2500      	movs	r5, #0
   e031a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e031c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e0320:	6063      	str	r3, [r4, #4]
   e0322:	60a5      	str	r5, [r4, #8]
   e0324:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e0328:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e032c:	f7fd ffc2 	bl	de2b4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e0330:	4b08      	ldr	r3, [pc, #32]	; (e0354 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e0332:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e0336:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e033a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e033c:	4620      	mov	r0, r4
   e033e:	4a06      	ldr	r2, [pc, #24]	; (e0358 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e0340:	4906      	ldr	r1, [pc, #24]	; (e035c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e0342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e0346:	f000 ba89 	b.w	e085c <__aeabi_atexit>
   e034a:	bf00      	nop
   e034c:	2003e510 	.word	0x2003e510
   e0350:	000e3e90 	.word	0x000e3e90
   e0354:	000e3dd4 	.word	0x000e3dd4
   e0358:	2003e2e0 	.word	0x2003e2e0
   e035c:	000dfe69 	.word	0x000dfe69

000e0360 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e0360:	4770      	bx	lr

000e0362 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   e0362:	2001      	movs	r0, #1
   e0364:	4770      	bx	lr
	...

000e0368 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   e0368:	8983      	ldrh	r3, [r0, #12]
   e036a:	b11b      	cbz	r3, e0374 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   e036c:	6903      	ldr	r3, [r0, #16]
   e036e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0372:	d102      	bne.n	e037a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   e0374:	ed9f 0a05 	vldr	s0, [pc, #20]	; e038c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   e0378:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   e037a:	ee07 3a90 	vmov	s15, r3
   e037e:	ed9f 7a04 	vldr	s14, [pc, #16]	; e0390 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   e0382:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0386:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e038a:	4770      	bx	lr
   e038c:	00000000 	.word	0x00000000
   e0390:	42c80000 	.word	0x42c80000

000e0394 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   e0394:	8983      	ldrh	r3, [r0, #12]
   e0396:	b11b      	cbz	r3, e03a0 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   e0398:	6983      	ldr	r3, [r0, #24]
   e039a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e039e:	d102      	bne.n	e03a6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   e03a0:	ed9f 0a05 	vldr	s0, [pc, #20]	; e03b8 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   e03a4:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   e03a6:	ee07 3a90 	vmov	s15, r3
   e03aa:	ed9f 7a04 	vldr	s14, [pc, #16]	; e03bc <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   e03ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e03b2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e03b6:	4770      	bx	lr
   e03b8:	00000000 	.word	0x00000000
   e03bc:	42c80000 	.word	0x42c80000

000e03c0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e03c0:	2200      	movs	r2, #0
   e03c2:	4611      	mov	r1, r2
   e03c4:	6840      	ldr	r0, [r0, #4]
   e03c6:	f7fe b953 	b.w	de670 <network_ready>

000e03ca <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e03ca:	b510      	push	{r4, lr}
   e03cc:	2124      	movs	r1, #36	; 0x24
   e03ce:	4604      	mov	r4, r0
   e03d0:	f000 fa52 	bl	e0878 <_ZdlPvj>
   e03d4:	4620      	mov	r0, r4
   e03d6:	bd10      	pop	{r4, pc}

000e03d8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e03d8:	2200      	movs	r2, #0
   e03da:	4611      	mov	r1, r2
   e03dc:	6840      	ldr	r0, [r0, #4]
   e03de:	f7fe b967 	b.w	de6b0 <network_listening>

000e03e2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e03e2:	2200      	movs	r2, #0
   e03e4:	4611      	mov	r1, r2
   e03e6:	6840      	ldr	r0, [r0, #4]
   e03e8:	f7fe b972 	b.w	de6d0 <network_get_listen_timeout>

000e03ec <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e03ec:	2200      	movs	r2, #0
   e03ee:	6840      	ldr	r0, [r0, #4]
   e03f0:	f7fe b966 	b.w	de6c0 <network_set_listen_timeout>

000e03f4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e03f4:	2200      	movs	r2, #0
   e03f6:	f081 0101 	eor.w	r1, r1, #1
   e03fa:	6840      	ldr	r0, [r0, #4]
   e03fc:	f7fe b950 	b.w	de6a0 <network_listen>

000e0400 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e0400:	2300      	movs	r3, #0
   e0402:	461a      	mov	r2, r3
   e0404:	4619      	mov	r1, r3
   e0406:	6840      	ldr	r0, [r0, #4]
   e0408:	f7fe b942 	b.w	de690 <network_off>

000e040c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e040c:	2300      	movs	r3, #0
   e040e:	461a      	mov	r2, r3
   e0410:	4619      	mov	r1, r3
   e0412:	6840      	ldr	r0, [r0, #4]
   e0414:	f7fe b934 	b.w	de680 <network_on>

000e0418 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e0418:	2200      	movs	r2, #0
   e041a:	4611      	mov	r1, r2
   e041c:	6840      	ldr	r0, [r0, #4]
   e041e:	f7fe b917 	b.w	de650 <network_connecting>

000e0422 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e0422:	2200      	movs	r2, #0
   e0424:	2102      	movs	r1, #2
   e0426:	6840      	ldr	r0, [r0, #4]
   e0428:	f7fe b91a 	b.w	de660 <network_disconnect>

000e042c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e042c:	2300      	movs	r3, #0
   e042e:	461a      	mov	r2, r3
   e0430:	6840      	ldr	r0, [r0, #4]
   e0432:	f7fe b905 	b.w	de640 <network_connect>
	...

000e0438 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   e0438:	8983      	ldrh	r3, [r0, #12]
   e043a:	b17b      	cbz	r3, e045c <_ZNK10WiFiSignal10getQualityEv+0x24>
   e043c:	6a03      	ldr	r3, [r0, #32]
   e043e:	2b00      	cmp	r3, #0
   e0440:	db0c      	blt.n	e045c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   e0442:	ee07 3a90 	vmov	s15, r3
   e0446:	eddf 6a07 	vldr	s13, [pc, #28]	; e0464 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   e044a:	ed9f 0a07 	vldr	s0, [pc, #28]	; e0468 <_ZNK10WiFiSignal10getQualityEv+0x30>
   e044e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0452:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e0456:	ee27 0a80 	vmul.f32	s0, s15, s0
   e045a:	4770      	bx	lr
    }
    return -1.0f;
   e045c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0460:	4770      	bx	lr
   e0462:	bf00      	nop
   e0464:	477fff00 	.word	0x477fff00
   e0468:	42c80000 	.word	0x42c80000

000e046c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   e046c:	8983      	ldrh	r3, [r0, #12]
   e046e:	b17b      	cbz	r3, e0490 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   e0470:	6943      	ldr	r3, [r0, #20]
   e0472:	2b00      	cmp	r3, #0
   e0474:	db0c      	blt.n	e0490 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   e0476:	ee07 3a90 	vmov	s15, r3
   e047a:	eddf 6a07 	vldr	s13, [pc, #28]	; e0498 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   e047e:	ed9f 0a07 	vldr	s0, [pc, #28]	; e049c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   e0482:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0486:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e048a:	ee27 0a80 	vmul.f32	s0, s15, s0
   e048e:	4770      	bx	lr
    }
    return -1.0f;
   e0490:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0494:	4770      	bx	lr
   e0496:	bf00      	nop
   e0498:	477fff00 	.word	0x477fff00
   e049c:	42c80000 	.word	0x42c80000

000e04a0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e04a0:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   e04a2:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e04a4:	4606      	mov	r6, r0
    inf_ = inf;
   e04a6:	f100 040c 	add.w	r4, r0, #12
   e04aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e04ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e04ae:	e895 0003 	ldmia.w	r5, {r0, r1}
   e04b2:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   e04b6:	6933      	ldr	r3, [r6, #16]
   e04b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e04bc:	bf0e      	itee	eq
   e04be:	2302      	moveq	r3, #2
   e04c0:	2264      	movne	r2, #100	; 0x64
   e04c2:	fb93 f3f2 	sdivne	r3, r3, r2
   e04c6:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   e04c8:	69b3      	ldr	r3, [r6, #24]
   e04ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e04ce:	bf0e      	itee	eq
   e04d0:	2300      	moveq	r3, #0
   e04d2:	2264      	movne	r2, #100	; 0x64
   e04d4:	fb93 f3f2 	sdivne	r3, r3, r2
   e04d8:	60b3      	str	r3, [r6, #8]
    return true;
}
   e04da:	2001      	movs	r0, #1
   e04dc:	bd70      	pop	{r4, r5, r6, pc}
	...

000e04e0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   e04e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   e04e4:	4b16      	ldr	r3, [pc, #88]	; (e0540 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   e04e6:	6003      	str	r3, [r0, #0]
   e04e8:	2500      	movs	r5, #0
   e04ea:	4688      	mov	r8, r1
   e04ec:	2702      	movs	r7, #2
   e04ee:	2618      	movs	r6, #24
   e04f0:	b086      	sub	sp, #24
   e04f2:	6047      	str	r7, [r0, #4]
   e04f4:	6085      	str	r5, [r0, #8]
   e04f6:	4632      	mov	r2, r6
   e04f8:	4629      	mov	r1, r5
   e04fa:	4604      	mov	r4, r0
   e04fc:	300c      	adds	r0, #12
   e04fe:	f001 f92b 	bl	e1758 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   e0502:	462a      	mov	r2, r5
   e0504:	4629      	mov	r1, r5
   e0506:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e050a:	f7fe f8b1 	bl	de670 <network_ready>
   e050e:	b190      	cbz	r0, e0536 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   e0510:	4632      	mov	r2, r6
   e0512:	4629      	mov	r1, r5
   e0514:	4668      	mov	r0, sp
   e0516:	f001 f91f 	bl	e1758 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e051a:	462a      	mov	r2, r5
   e051c:	4669      	mov	r1, sp
   e051e:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   e0520:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e0524:	f7fd fff6 	bl	de514 <wlan_connected_info>
        if (r == 0) {
   e0528:	b920      	cbnz	r0, e0534 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   e052a:	4669      	mov	r1, sp
   e052c:	4620      	mov	r0, r4
   e052e:	f7ff ffb7 	bl	e04a0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   e0532:	e000      	b.n	e0536 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   e0534:	6067      	str	r7, [r4, #4]
        return sig;
    }
   e0536:	4620      	mov	r0, r4
   e0538:	b006      	add	sp, #24
   e053a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e053e:	bf00      	nop
   e0540:	000e3e6c 	.word	0x000e3e6c

000e0544 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e0544:	4b02      	ldr	r3, [pc, #8]	; (e0550 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e0546:	2204      	movs	r2, #4
   e0548:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e054a:	4a02      	ldr	r2, [pc, #8]	; (e0554 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e054c:	601a      	str	r2, [r3, #0]
   e054e:	4770      	bx	lr
   e0550:	2003e6e4 	.word	0x2003e6e4
   e0554:	000e3e38 	.word	0x000e3e38

000e0558 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e0558:	2300      	movs	r3, #0
   e055a:	461a      	mov	r2, r3
   e055c:	6840      	ldr	r0, [r0, #4]
   e055e:	f7fe b86f 	b.w	de640 <network_connect>

000e0562 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e0562:	2200      	movs	r2, #0
   e0564:	2102      	movs	r1, #2
   e0566:	6840      	ldr	r0, [r0, #4]
   e0568:	f7fe b87a 	b.w	de660 <network_disconnect>

000e056c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e056c:	2200      	movs	r2, #0
   e056e:	4611      	mov	r1, r2
   e0570:	6840      	ldr	r0, [r0, #4]
   e0572:	f7fe b86d 	b.w	de650 <network_connecting>

000e0576 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e0576:	2200      	movs	r2, #0
   e0578:	4611      	mov	r1, r2
   e057a:	6840      	ldr	r0, [r0, #4]
   e057c:	f7fe b878 	b.w	de670 <network_ready>

000e0580 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e0580:	2300      	movs	r3, #0
   e0582:	461a      	mov	r2, r3
   e0584:	4619      	mov	r1, r3
   e0586:	6840      	ldr	r0, [r0, #4]
   e0588:	f7fe b87a 	b.w	de680 <network_on>

000e058c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e058c:	2300      	movs	r3, #0
   e058e:	461a      	mov	r2, r3
   e0590:	4619      	mov	r1, r3
   e0592:	6840      	ldr	r0, [r0, #4]
   e0594:	f7fe b87c 	b.w	de690 <network_off>

000e0598 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e0598:	2200      	movs	r2, #0
   e059a:	f081 0101 	eor.w	r1, r1, #1
   e059e:	6840      	ldr	r0, [r0, #4]
   e05a0:	f7fe b87e 	b.w	de6a0 <network_listen>

000e05a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e05a4:	2200      	movs	r2, #0
   e05a6:	6840      	ldr	r0, [r0, #4]
   e05a8:	f7fe b88a 	b.w	de6c0 <network_set_listen_timeout>

000e05ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e05ac:	2200      	movs	r2, #0
   e05ae:	4611      	mov	r1, r2
   e05b0:	6840      	ldr	r0, [r0, #4]
   e05b2:	f7fe b88d 	b.w	de6d0 <network_get_listen_timeout>

000e05b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e05b6:	2200      	movs	r2, #0
   e05b8:	4611      	mov	r1, r2
   e05ba:	6840      	ldr	r0, [r0, #4]
   e05bc:	f7fe b878 	b.w	de6b0 <network_listening>

000e05c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e05c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e05c4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e05c6:	b095      	sub	sp, #84	; 0x54
   e05c8:	4616      	mov	r6, r2
   e05ca:	460d      	mov	r5, r1
   e05cc:	4607      	mov	r7, r0
    IPAddress addr;
   e05ce:	f7ff fa01 	bl	df9d4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e05d2:	4621      	mov	r1, r4
   e05d4:	2220      	movs	r2, #32
   e05d6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e05d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e05da:	f001 f8bd 	bl	e1758 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e05de:	2340      	movs	r3, #64	; 0x40
   e05e0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e05e2:	4621      	mov	r1, r4
   e05e4:	466b      	mov	r3, sp
   e05e6:	aa0c      	add	r2, sp, #48	; 0x30
   e05e8:	4630      	mov	r0, r6
   e05ea:	f7fd fd7b 	bl	de0e4 <netdb_getaddrinfo>
    if (!r) {
   e05ee:	4604      	mov	r4, r0
   e05f0:	2800      	cmp	r0, #0
   e05f2:	d144      	bne.n	e067e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e05f4:	4602      	mov	r2, r0
   e05f6:	2101      	movs	r1, #1
   e05f8:	6868      	ldr	r0, [r5, #4]
   e05fa:	f7fe f839 	bl	de670 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e05fe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e0600:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e0602:	4622      	mov	r2, r4
   e0604:	6868      	ldr	r0, [r5, #4]
   e0606:	f7fe f833 	bl	de670 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e060a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e060c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e060e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e0610:	2e00      	cmp	r6, #0
   e0612:	d034      	beq.n	e067e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e0614:	2900      	cmp	r1, #0
   e0616:	d132      	bne.n	e067e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e0618:	6873      	ldr	r3, [r6, #4]
   e061a:	2b02      	cmp	r3, #2
   e061c:	d002      	beq.n	e0624 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e061e:	2b0a      	cmp	r3, #10
   e0620:	d009      	beq.n	e0636 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e0622:	e02a      	b.n	e067a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e0624:	f1b8 0f00 	cmp.w	r8, #0
   e0628:	d027      	beq.n	e067a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e062a:	6971      	ldr	r1, [r6, #20]
   e062c:	4638      	mov	r0, r7
   e062e:	3104      	adds	r1, #4
   e0630:	f7ff fa13 	bl	dfa5a <_ZN9IPAddressaSEPKh>
   e0634:	e020      	b.n	e0678 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e0636:	f1b9 0f00 	cmp.w	r9, #0
   e063a:	d01e      	beq.n	e067a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e063c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e063e:	2211      	movs	r2, #17
   e0640:	a801      	add	r0, sp, #4
   e0642:	f001 f889 	bl	e1758 <memset>
                    a.v = 6;
   e0646:	2306      	movs	r3, #6
   e0648:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e064c:	ad01      	add	r5, sp, #4
   e064e:	f104 0308 	add.w	r3, r4, #8
   e0652:	3418      	adds	r4, #24
   e0654:	6818      	ldr	r0, [r3, #0]
   e0656:	6859      	ldr	r1, [r3, #4]
   e0658:	462a      	mov	r2, r5
   e065a:	c203      	stmia	r2!, {r0, r1}
   e065c:	3308      	adds	r3, #8
   e065e:	42a3      	cmp	r3, r4
   e0660:	4615      	mov	r5, r2
   e0662:	d1f7      	bne.n	e0654 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e0664:	a901      	add	r1, sp, #4
   e0666:	a806      	add	r0, sp, #24
   e0668:	ad07      	add	r5, sp, #28
   e066a:	f7ff f9c1 	bl	df9f0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0670:	1d3c      	adds	r4, r7, #4
   e0672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0674:	682b      	ldr	r3, [r5, #0]
   e0676:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e0678:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e067a:	69f6      	ldr	r6, [r6, #28]
   e067c:	e7c8      	b.n	e0610 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e067e:	9800      	ldr	r0, [sp, #0]
   e0680:	f7fd fd28 	bl	de0d4 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e0684:	4638      	mov	r0, r7
   e0686:	b015      	add	sp, #84	; 0x54
   e0688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e068c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e068c:	4b02      	ldr	r3, [pc, #8]	; (e0698 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e068e:	4a03      	ldr	r2, [pc, #12]	; (e069c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e0690:	601a      	str	r2, [r3, #0]
   e0692:	2200      	movs	r2, #0
   e0694:	605a      	str	r2, [r3, #4]
   e0696:	4770      	bx	lr
   e0698:	2003e6ec 	.word	0x2003e6ec
   e069c:	000e3e90 	.word	0x000e3e90

000e06a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e06a0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e06a2:	4e18      	ldr	r6, [pc, #96]	; (e0704 <pinAvailable+0x64>)
   e06a4:	6831      	ldr	r1, [r6, #0]
   e06a6:	f011 0501 	ands.w	r5, r1, #1
   e06aa:	4604      	mov	r4, r0
   e06ac:	d10a      	bne.n	e06c4 <pinAvailable+0x24>
   e06ae:	4630      	mov	r0, r6
   e06b0:	f7f3 fcfb 	bl	d40aa <__cxa_guard_acquire>
   e06b4:	b130      	cbz	r0, e06c4 <pinAvailable+0x24>
   e06b6:	4629      	mov	r1, r5
   e06b8:	4813      	ldr	r0, [pc, #76]	; (e0708 <pinAvailable+0x68>)
   e06ba:	f7fe f8bf 	bl	de83c <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e06be:	4630      	mov	r0, r6
   e06c0:	f7f3 fcf8 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   e06c4:	4810      	ldr	r0, [pc, #64]	; (e0708 <pinAvailable+0x68>)
   e06c6:	f7fe f8c3 	bl	de850 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e06ca:	b128      	cbz	r0, e06d8 <pinAvailable+0x38>
   e06cc:	f1a4 030b 	sub.w	r3, r4, #11
   e06d0:	2b02      	cmp	r3, #2
   e06d2:	d801      	bhi.n	e06d8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   e06d4:	2000      	movs	r0, #0
   e06d6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e06d8:	f000 f89a 	bl	e0810 <_Z19__fetch_global_Wirev>
   e06dc:	f7ff fb20 	bl	dfd20 <_ZN7TwoWire9isEnabledEv>
   e06e0:	b108      	cbz	r0, e06e6 <pinAvailable+0x46>
   e06e2:	2c01      	cmp	r4, #1
   e06e4:	d9f6      	bls.n	e06d4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e06e6:	f7ff faa3 	bl	dfc30 <_Z22__fetch_global_Serial1v>
   e06ea:	f7ff fa9d 	bl	dfc28 <_ZN11USARTSerial9isEnabledEv>
   e06ee:	b118      	cbz	r0, e06f8 <pinAvailable+0x58>
   e06f0:	f1a4 0309 	sub.w	r3, r4, #9
   e06f4:	2b01      	cmp	r3, #1
   e06f6:	d9ed      	bls.n	e06d4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e06f8:	2c23      	cmp	r4, #35	; 0x23
   e06fa:	bf8c      	ite	hi
   e06fc:	2000      	movhi	r0, #0
   e06fe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e0700:	bd70      	pop	{r4, r5, r6, pc}
   e0702:	bf00      	nop
   e0704:	2003e6f4 	.word	0x2003e6f4
   e0708:	2003e6f8 	.word	0x2003e6f8

000e070c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e070c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e070e:	b538      	push	{r3, r4, r5, lr}
   e0710:	4604      	mov	r4, r0
   e0712:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e0714:	d80a      	bhi.n	e072c <pinMode+0x20>
   e0716:	29ff      	cmp	r1, #255	; 0xff
   e0718:	d008      	beq.n	e072c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e071a:	f7ff ffc1 	bl	e06a0 <pinAvailable>
   e071e:	b128      	cbz	r0, e072c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e0720:	4629      	mov	r1, r5
   e0722:	4620      	mov	r0, r4
}
   e0724:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e0728:	f7fd bcf4 	b.w	de114 <HAL_Pin_Mode>
   e072c:	bd38      	pop	{r3, r4, r5, pc}

000e072e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e072e:	b538      	push	{r3, r4, r5, lr}
   e0730:	4604      	mov	r4, r0
   e0732:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e0734:	f7fd fcf6 	bl	de124 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e0738:	28ff      	cmp	r0, #255	; 0xff
   e073a:	d010      	beq.n	e075e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   e073c:	2806      	cmp	r0, #6
   e073e:	d804      	bhi.n	e074a <digitalWrite+0x1c>
   e0740:	234d      	movs	r3, #77	; 0x4d
   e0742:	fa23 f000 	lsr.w	r0, r3, r0
   e0746:	07c3      	lsls	r3, r0, #31
   e0748:	d409      	bmi.n	e075e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e074a:	4620      	mov	r0, r4
   e074c:	f7ff ffa8 	bl	e06a0 <pinAvailable>
   e0750:	b128      	cbz	r0, e075e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e0752:	4629      	mov	r1, r5
   e0754:	4620      	mov	r0, r4
}
   e0756:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   e075a:	f7fd bceb 	b.w	de134 <HAL_GPIO_Write>
   e075e:	bd38      	pop	{r3, r4, r5, pc}

000e0760 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   e0760:	b510      	push	{r4, lr}
   e0762:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e0764:	f7fd fcde 	bl	de124 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   e0768:	3804      	subs	r0, #4
   e076a:	b2c0      	uxtb	r0, r0
   e076c:	2801      	cmp	r0, #1
   e076e:	d908      	bls.n	e0782 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   e0770:	4620      	mov	r0, r4
   e0772:	f7ff ff95 	bl	e06a0 <pinAvailable>
   e0776:	b120      	cbz	r0, e0782 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e0778:	4620      	mov	r0, r4
}
   e077a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e077e:	f7fd bce1 	b.w	de144 <HAL_GPIO_Read>
}
   e0782:	2000      	movs	r0, #0
   e0784:	bd10      	pop	{r4, pc}

000e0786 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e0786:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   e0788:	b510      	push	{r4, lr}
   e078a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   e078c:	bf9c      	itt	ls
   e078e:	340e      	addls	r4, #14
   e0790:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e0792:	4620      	mov	r0, r4
   e0794:	f7ff ff84 	bl	e06a0 <pinAvailable>
   e0798:	b150      	cbz	r0, e07b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e079a:	2103      	movs	r1, #3
   e079c:	4620      	mov	r0, r4
   e079e:	f7fd fcb1 	bl	de104 <HAL_Validate_Pin_Function>
   e07a2:	2803      	cmp	r0, #3
   e07a4:	d104      	bne.n	e07b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e07a6:	4620      	mov	r0, r4
}
   e07a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e07ac:	f7fd bcd2 	b.w	de154 <HAL_ADC_Read>
}
   e07b0:	2000      	movs	r0, #0
   e07b2:	bd10      	pop	{r4, pc}

000e07b4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   e07b4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   e07b6:	4c07      	ldr	r4, [pc, #28]	; (e07d4 <_Z21__fetch_global_EEPROMv+0x20>)
   e07b8:	6823      	ldr	r3, [r4, #0]
   e07ba:	07db      	lsls	r3, r3, #31
   e07bc:	d408      	bmi.n	e07d0 <_Z21__fetch_global_EEPROMv+0x1c>
   e07be:	4620      	mov	r0, r4
   e07c0:	f7f3 fc73 	bl	d40aa <__cxa_guard_acquire>
   e07c4:	b120      	cbz	r0, e07d0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   e07c6:	f7fd fd35 	bl	de234 <HAL_EEPROM_Init>
   e07ca:	4620      	mov	r0, r4
   e07cc:	f7f3 fc72 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   e07d0:	4801      	ldr	r0, [pc, #4]	; (e07d8 <_Z21__fetch_global_EEPROMv+0x24>)
   e07d2:	bd10      	pop	{r4, pc}
   e07d4:	2003e704 	.word	0x2003e704
   e07d8:	2003e708 	.word	0x2003e708

000e07dc <_Z17acquireWireBufferv>:
   e07dc:	b570      	push	{r4, r5, r6, lr}
   e07de:	4604      	mov	r4, r0
   e07e0:	2514      	movs	r5, #20
   e07e2:	462a      	mov	r2, r5
   e07e4:	4e09      	ldr	r6, [pc, #36]	; (e080c <_Z17acquireWireBufferv+0x30>)
   e07e6:	2100      	movs	r1, #0
   e07e8:	f000 ffb6 	bl	e1758 <memset>
   e07ec:	8025      	strh	r5, [r4, #0]
   e07ee:	2520      	movs	r5, #32
   e07f0:	4631      	mov	r1, r6
   e07f2:	60a5      	str	r5, [r4, #8]
   e07f4:	6125      	str	r5, [r4, #16]
   e07f6:	4628      	mov	r0, r5
   e07f8:	f000 f840 	bl	e087c <_ZnajRKSt9nothrow_t>
   e07fc:	4631      	mov	r1, r6
   e07fe:	6060      	str	r0, [r4, #4]
   e0800:	4628      	mov	r0, r5
   e0802:	f000 f83b 	bl	e087c <_ZnajRKSt9nothrow_t>
   e0806:	60e0      	str	r0, [r4, #12]
   e0808:	4620      	mov	r0, r4
   e080a:	bd70      	pop	{r4, r5, r6, pc}
   e080c:	000e3ebc 	.word	0x000e3ebc

000e0810 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e0810:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e0812:	4d0e      	ldr	r5, [pc, #56]	; (e084c <_Z19__fetch_global_Wirev+0x3c>)
   e0814:	6829      	ldr	r1, [r5, #0]
   e0816:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e081a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e081c:	d113      	bne.n	e0846 <_Z19__fetch_global_Wirev+0x36>
   e081e:	4628      	mov	r0, r5
   e0820:	f7f3 fc43 	bl	d40aa <__cxa_guard_acquire>
   e0824:	b178      	cbz	r0, e0846 <_Z19__fetch_global_Wirev+0x36>
   e0826:	a801      	add	r0, sp, #4
   e0828:	f7ff ffd8 	bl	e07dc <_Z17acquireWireBufferv>
   e082c:	aa01      	add	r2, sp, #4
   e082e:	4621      	mov	r1, r4
   e0830:	4807      	ldr	r0, [pc, #28]	; (e0850 <_Z19__fetch_global_Wirev+0x40>)
   e0832:	f7ff fa63 	bl	dfcfc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   e0836:	4628      	mov	r0, r5
   e0838:	f7f3 fc3c 	bl	d40b4 <__cxa_guard_release>
   e083c:	4a05      	ldr	r2, [pc, #20]	; (e0854 <_Z19__fetch_global_Wirev+0x44>)
   e083e:	4906      	ldr	r1, [pc, #24]	; (e0858 <_Z19__fetch_global_Wirev+0x48>)
   e0840:	4803      	ldr	r0, [pc, #12]	; (e0850 <_Z19__fetch_global_Wirev+0x40>)
   e0842:	f000 f80b 	bl	e085c <__aeabi_atexit>
	return wire;
}
   e0846:	4802      	ldr	r0, [pc, #8]	; (e0850 <_Z19__fetch_global_Wirev+0x40>)
   e0848:	b007      	add	sp, #28
   e084a:	bd30      	pop	{r4, r5, pc}
   e084c:	2003e70c 	.word	0x2003e70c
   e0850:	2003e710 	.word	0x2003e710
   e0854:	2003e2e0 	.word	0x2003e2e0
   e0858:	000dfca5 	.word	0x000dfca5

000e085c <__aeabi_atexit>:
   e085c:	460b      	mov	r3, r1
   e085e:	4601      	mov	r1, r0
   e0860:	4618      	mov	r0, r3
   e0862:	f000 be55 	b.w	e1510 <__cxa_atexit>
	...

000e0868 <_ZSt15get_new_handlerv>:
   e0868:	4b02      	ldr	r3, [pc, #8]	; (e0874 <_ZSt15get_new_handlerv+0xc>)
   e086a:	6818      	ldr	r0, [r3, #0]
   e086c:	f3bf 8f5f 	dmb	sy
   e0870:	4770      	bx	lr
   e0872:	bf00      	nop
   e0874:	2003e724 	.word	0x2003e724

000e0878 <_ZdlPvj>:
   e0878:	f7f3 bc13 	b.w	d40a2 <_ZdlPv>

000e087c <_ZnajRKSt9nothrow_t>:
   e087c:	f000 b800 	b.w	e0880 <_ZnwjRKSt9nothrow_t>

000e0880 <_ZnwjRKSt9nothrow_t>:
   e0880:	b510      	push	{r4, lr}
   e0882:	2800      	cmp	r0, #0
   e0884:	bf14      	ite	ne
   e0886:	4604      	movne	r4, r0
   e0888:	2401      	moveq	r4, #1
   e088a:	4620      	mov	r0, r4
   e088c:	f7fd ff68 	bl	de760 <malloc>
   e0890:	b920      	cbnz	r0, e089c <_ZnwjRKSt9nothrow_t+0x1c>
   e0892:	f7ff ffe9 	bl	e0868 <_ZSt15get_new_handlerv>
   e0896:	b108      	cbz	r0, e089c <_ZnwjRKSt9nothrow_t+0x1c>
   e0898:	4780      	blx	r0
   e089a:	e7f6      	b.n	e088a <_ZnwjRKSt9nothrow_t+0xa>
   e089c:	bd10      	pop	{r4, pc}

000e089e <_ZSt25__throw_bad_function_callv>:
   e089e:	b508      	push	{r3, lr}
   e08a0:	f7fd ff7e 	bl	de7a0 <abort>

000e08a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e08a4:	4b18      	ldr	r3, [pc, #96]	; (e0908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e08a6:	681a      	ldr	r2, [r3, #0]
   e08a8:	07d1      	lsls	r1, r2, #31
   e08aa:	bf5c      	itt	pl
   e08ac:	2201      	movpl	r2, #1
   e08ae:	601a      	strpl	r2, [r3, #0]
   e08b0:	4b16      	ldr	r3, [pc, #88]	; (e090c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e08b2:	681a      	ldr	r2, [r3, #0]
   e08b4:	07d2      	lsls	r2, r2, #31
   e08b6:	bf5c      	itt	pl
   e08b8:	2201      	movpl	r2, #1
   e08ba:	601a      	strpl	r2, [r3, #0]
   e08bc:	4b14      	ldr	r3, [pc, #80]	; (e0910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e08be:	681a      	ldr	r2, [r3, #0]
   e08c0:	07d0      	lsls	r0, r2, #31
   e08c2:	bf5c      	itt	pl
   e08c4:	2201      	movpl	r2, #1
   e08c6:	601a      	strpl	r2, [r3, #0]
   e08c8:	4b12      	ldr	r3, [pc, #72]	; (e0914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e08ca:	681a      	ldr	r2, [r3, #0]
   e08cc:	07d1      	lsls	r1, r2, #31
   e08ce:	bf5c      	itt	pl
   e08d0:	2201      	movpl	r2, #1
   e08d2:	601a      	strpl	r2, [r3, #0]
   e08d4:	4b10      	ldr	r3, [pc, #64]	; (e0918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e08d6:	681a      	ldr	r2, [r3, #0]
   e08d8:	07d2      	lsls	r2, r2, #31
   e08da:	bf5c      	itt	pl
   e08dc:	2201      	movpl	r2, #1
   e08de:	601a      	strpl	r2, [r3, #0]
   e08e0:	4b0e      	ldr	r3, [pc, #56]	; (e091c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e08e2:	681a      	ldr	r2, [r3, #0]
   e08e4:	07d0      	lsls	r0, r2, #31
   e08e6:	bf5c      	itt	pl
   e08e8:	2201      	movpl	r2, #1
   e08ea:	601a      	strpl	r2, [r3, #0]
   e08ec:	4b0c      	ldr	r3, [pc, #48]	; (e0920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e08ee:	681a      	ldr	r2, [r3, #0]
   e08f0:	07d1      	lsls	r1, r2, #31
   e08f2:	bf5c      	itt	pl
   e08f4:	2201      	movpl	r2, #1
   e08f6:	601a      	strpl	r2, [r3, #0]
   e08f8:	4b0a      	ldr	r3, [pc, #40]	; (e0924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e08fa:	681a      	ldr	r2, [r3, #0]
   e08fc:	07d2      	lsls	r2, r2, #31
   e08fe:	bf5c      	itt	pl
   e0900:	2201      	movpl	r2, #1
   e0902:	601a      	strpl	r2, [r3, #0]
   e0904:	4770      	bx	lr
   e0906:	bf00      	nop
   e0908:	2003e744 	.word	0x2003e744
   e090c:	2003e740 	.word	0x2003e740
   e0910:	2003e73c 	.word	0x2003e73c
   e0914:	2003e738 	.word	0x2003e738
   e0918:	2003e734 	.word	0x2003e734
   e091c:	2003e730 	.word	0x2003e730
   e0920:	2003e72c 	.word	0x2003e72c
   e0924:	2003e728 	.word	0x2003e728

000e0928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e0928:	4b24      	ldr	r3, [pc, #144]	; (e09bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e092a:	681a      	ldr	r2, [r3, #0]
   e092c:	07d0      	lsls	r0, r2, #31
   e092e:	bf5c      	itt	pl
   e0930:	2201      	movpl	r2, #1
   e0932:	601a      	strpl	r2, [r3, #0]
   e0934:	4b22      	ldr	r3, [pc, #136]	; (e09c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e0936:	681a      	ldr	r2, [r3, #0]
   e0938:	07d1      	lsls	r1, r2, #31
   e093a:	bf5c      	itt	pl
   e093c:	2201      	movpl	r2, #1
   e093e:	601a      	strpl	r2, [r3, #0]
   e0940:	4b20      	ldr	r3, [pc, #128]	; (e09c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e0942:	681a      	ldr	r2, [r3, #0]
   e0944:	07d2      	lsls	r2, r2, #31
   e0946:	bf5c      	itt	pl
   e0948:	2201      	movpl	r2, #1
   e094a:	601a      	strpl	r2, [r3, #0]
   e094c:	4b1e      	ldr	r3, [pc, #120]	; (e09c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e094e:	681a      	ldr	r2, [r3, #0]
   e0950:	07d0      	lsls	r0, r2, #31
   e0952:	bf5c      	itt	pl
   e0954:	2201      	movpl	r2, #1
   e0956:	601a      	strpl	r2, [r3, #0]
   e0958:	4b1c      	ldr	r3, [pc, #112]	; (e09cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e095a:	681a      	ldr	r2, [r3, #0]
   e095c:	07d1      	lsls	r1, r2, #31
   e095e:	bf5c      	itt	pl
   e0960:	2201      	movpl	r2, #1
   e0962:	601a      	strpl	r2, [r3, #0]
   e0964:	4b1a      	ldr	r3, [pc, #104]	; (e09d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e0966:	681a      	ldr	r2, [r3, #0]
   e0968:	07d2      	lsls	r2, r2, #31
   e096a:	bf5c      	itt	pl
   e096c:	2201      	movpl	r2, #1
   e096e:	601a      	strpl	r2, [r3, #0]
   e0970:	4b18      	ldr	r3, [pc, #96]	; (e09d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e0972:	681a      	ldr	r2, [r3, #0]
   e0974:	07d0      	lsls	r0, r2, #31
   e0976:	bf5c      	itt	pl
   e0978:	2201      	movpl	r2, #1
   e097a:	601a      	strpl	r2, [r3, #0]
   e097c:	4b16      	ldr	r3, [pc, #88]	; (e09d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e097e:	681a      	ldr	r2, [r3, #0]
   e0980:	07d1      	lsls	r1, r2, #31
   e0982:	bf5c      	itt	pl
   e0984:	2201      	movpl	r2, #1
   e0986:	601a      	strpl	r2, [r3, #0]
   e0988:	4b14      	ldr	r3, [pc, #80]	; (e09dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e098a:	681a      	ldr	r2, [r3, #0]
   e098c:	07d2      	lsls	r2, r2, #31
   e098e:	bf5c      	itt	pl
   e0990:	2201      	movpl	r2, #1
   e0992:	601a      	strpl	r2, [r3, #0]
   e0994:	4b12      	ldr	r3, [pc, #72]	; (e09e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e0996:	681a      	ldr	r2, [r3, #0]
   e0998:	07d0      	lsls	r0, r2, #31
   e099a:	bf5c      	itt	pl
   e099c:	2201      	movpl	r2, #1
   e099e:	601a      	strpl	r2, [r3, #0]
   e09a0:	4b10      	ldr	r3, [pc, #64]	; (e09e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e09a2:	681a      	ldr	r2, [r3, #0]
   e09a4:	07d1      	lsls	r1, r2, #31
   e09a6:	bf5c      	itt	pl
   e09a8:	2201      	movpl	r2, #1
   e09aa:	601a      	strpl	r2, [r3, #0]
   e09ac:	4b0e      	ldr	r3, [pc, #56]	; (e09e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e09ae:	681a      	ldr	r2, [r3, #0]
   e09b0:	07d2      	lsls	r2, r2, #31
   e09b2:	bf5c      	itt	pl
   e09b4:	2201      	movpl	r2, #1
   e09b6:	601a      	strpl	r2, [r3, #0]
   e09b8:	4770      	bx	lr
   e09ba:	bf00      	nop
   e09bc:	2003e774 	.word	0x2003e774
   e09c0:	2003e770 	.word	0x2003e770
   e09c4:	2003e76c 	.word	0x2003e76c
   e09c8:	2003e768 	.word	0x2003e768
   e09cc:	2003e764 	.word	0x2003e764
   e09d0:	2003e760 	.word	0x2003e760
   e09d4:	2003e75c 	.word	0x2003e75c
   e09d8:	2003e758 	.word	0x2003e758
   e09dc:	2003e754 	.word	0x2003e754
   e09e0:	2003e750 	.word	0x2003e750
   e09e4:	2003e74c 	.word	0x2003e74c
   e09e8:	2003e748 	.word	0x2003e748

000e09ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e09ec:	4b24      	ldr	r3, [pc, #144]	; (e0a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e09ee:	681a      	ldr	r2, [r3, #0]
   e09f0:	07d0      	lsls	r0, r2, #31
   e09f2:	bf5c      	itt	pl
   e09f4:	2201      	movpl	r2, #1
   e09f6:	601a      	strpl	r2, [r3, #0]
   e09f8:	4b22      	ldr	r3, [pc, #136]	; (e0a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e09fa:	681a      	ldr	r2, [r3, #0]
   e09fc:	07d1      	lsls	r1, r2, #31
   e09fe:	bf5c      	itt	pl
   e0a00:	2201      	movpl	r2, #1
   e0a02:	601a      	strpl	r2, [r3, #0]
   e0a04:	4b20      	ldr	r3, [pc, #128]	; (e0a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e0a06:	681a      	ldr	r2, [r3, #0]
   e0a08:	07d2      	lsls	r2, r2, #31
   e0a0a:	bf5c      	itt	pl
   e0a0c:	2201      	movpl	r2, #1
   e0a0e:	601a      	strpl	r2, [r3, #0]
   e0a10:	4b1e      	ldr	r3, [pc, #120]	; (e0a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e0a12:	681a      	ldr	r2, [r3, #0]
   e0a14:	07d0      	lsls	r0, r2, #31
   e0a16:	bf5c      	itt	pl
   e0a18:	2201      	movpl	r2, #1
   e0a1a:	601a      	strpl	r2, [r3, #0]
   e0a1c:	4b1c      	ldr	r3, [pc, #112]	; (e0a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e0a1e:	681a      	ldr	r2, [r3, #0]
   e0a20:	07d1      	lsls	r1, r2, #31
   e0a22:	bf5c      	itt	pl
   e0a24:	2201      	movpl	r2, #1
   e0a26:	601a      	strpl	r2, [r3, #0]
   e0a28:	4b1a      	ldr	r3, [pc, #104]	; (e0a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e0a2a:	681a      	ldr	r2, [r3, #0]
   e0a2c:	07d2      	lsls	r2, r2, #31
   e0a2e:	bf5c      	itt	pl
   e0a30:	2201      	movpl	r2, #1
   e0a32:	601a      	strpl	r2, [r3, #0]
   e0a34:	4b18      	ldr	r3, [pc, #96]	; (e0a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e0a36:	681a      	ldr	r2, [r3, #0]
   e0a38:	07d0      	lsls	r0, r2, #31
   e0a3a:	bf5c      	itt	pl
   e0a3c:	2201      	movpl	r2, #1
   e0a3e:	601a      	strpl	r2, [r3, #0]
   e0a40:	4b16      	ldr	r3, [pc, #88]	; (e0a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e0a42:	681a      	ldr	r2, [r3, #0]
   e0a44:	07d1      	lsls	r1, r2, #31
   e0a46:	bf5c      	itt	pl
   e0a48:	2201      	movpl	r2, #1
   e0a4a:	601a      	strpl	r2, [r3, #0]
   e0a4c:	4b14      	ldr	r3, [pc, #80]	; (e0aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e0a4e:	681a      	ldr	r2, [r3, #0]
   e0a50:	07d2      	lsls	r2, r2, #31
   e0a52:	bf5c      	itt	pl
   e0a54:	2201      	movpl	r2, #1
   e0a56:	601a      	strpl	r2, [r3, #0]
   e0a58:	4b12      	ldr	r3, [pc, #72]	; (e0aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e0a5a:	681a      	ldr	r2, [r3, #0]
   e0a5c:	07d0      	lsls	r0, r2, #31
   e0a5e:	bf5c      	itt	pl
   e0a60:	2201      	movpl	r2, #1
   e0a62:	601a      	strpl	r2, [r3, #0]
   e0a64:	4b10      	ldr	r3, [pc, #64]	; (e0aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e0a66:	681a      	ldr	r2, [r3, #0]
   e0a68:	07d1      	lsls	r1, r2, #31
   e0a6a:	bf5c      	itt	pl
   e0a6c:	2201      	movpl	r2, #1
   e0a6e:	601a      	strpl	r2, [r3, #0]
   e0a70:	4b0e      	ldr	r3, [pc, #56]	; (e0aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e0a72:	681a      	ldr	r2, [r3, #0]
   e0a74:	07d2      	lsls	r2, r2, #31
   e0a76:	bf5c      	itt	pl
   e0a78:	2201      	movpl	r2, #1
   e0a7a:	601a      	strpl	r2, [r3, #0]
   e0a7c:	4770      	bx	lr
   e0a7e:	bf00      	nop
   e0a80:	2003e7a4 	.word	0x2003e7a4
   e0a84:	2003e7a0 	.word	0x2003e7a0
   e0a88:	2003e79c 	.word	0x2003e79c
   e0a8c:	2003e798 	.word	0x2003e798
   e0a90:	2003e794 	.word	0x2003e794
   e0a94:	2003e790 	.word	0x2003e790
   e0a98:	2003e78c 	.word	0x2003e78c
   e0a9c:	2003e788 	.word	0x2003e788
   e0aa0:	2003e784 	.word	0x2003e784
   e0aa4:	2003e780 	.word	0x2003e780
   e0aa8:	2003e77c 	.word	0x2003e77c
   e0aac:	2003e778 	.word	0x2003e778

000e0ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e0ab0:	4b18      	ldr	r3, [pc, #96]	; (e0b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e0ab2:	681a      	ldr	r2, [r3, #0]
   e0ab4:	07d1      	lsls	r1, r2, #31
   e0ab6:	bf5c      	itt	pl
   e0ab8:	2201      	movpl	r2, #1
   e0aba:	601a      	strpl	r2, [r3, #0]
   e0abc:	4b16      	ldr	r3, [pc, #88]	; (e0b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e0abe:	681a      	ldr	r2, [r3, #0]
   e0ac0:	07d2      	lsls	r2, r2, #31
   e0ac2:	bf5c      	itt	pl
   e0ac4:	2201      	movpl	r2, #1
   e0ac6:	601a      	strpl	r2, [r3, #0]
   e0ac8:	4b14      	ldr	r3, [pc, #80]	; (e0b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e0aca:	681a      	ldr	r2, [r3, #0]
   e0acc:	07d0      	lsls	r0, r2, #31
   e0ace:	bf5c      	itt	pl
   e0ad0:	2201      	movpl	r2, #1
   e0ad2:	601a      	strpl	r2, [r3, #0]
   e0ad4:	4b12      	ldr	r3, [pc, #72]	; (e0b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e0ad6:	681a      	ldr	r2, [r3, #0]
   e0ad8:	07d1      	lsls	r1, r2, #31
   e0ada:	bf5c      	itt	pl
   e0adc:	2201      	movpl	r2, #1
   e0ade:	601a      	strpl	r2, [r3, #0]
   e0ae0:	4b10      	ldr	r3, [pc, #64]	; (e0b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e0ae2:	681a      	ldr	r2, [r3, #0]
   e0ae4:	07d2      	lsls	r2, r2, #31
   e0ae6:	bf5c      	itt	pl
   e0ae8:	2201      	movpl	r2, #1
   e0aea:	601a      	strpl	r2, [r3, #0]
   e0aec:	4b0e      	ldr	r3, [pc, #56]	; (e0b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e0aee:	681a      	ldr	r2, [r3, #0]
   e0af0:	07d0      	lsls	r0, r2, #31
   e0af2:	bf5c      	itt	pl
   e0af4:	2201      	movpl	r2, #1
   e0af6:	601a      	strpl	r2, [r3, #0]
   e0af8:	4b0c      	ldr	r3, [pc, #48]	; (e0b2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e0afa:	681a      	ldr	r2, [r3, #0]
   e0afc:	07d1      	lsls	r1, r2, #31
   e0afe:	bf5c      	itt	pl
   e0b00:	2201      	movpl	r2, #1
   e0b02:	601a      	strpl	r2, [r3, #0]
   e0b04:	4b0a      	ldr	r3, [pc, #40]	; (e0b30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e0b06:	681a      	ldr	r2, [r3, #0]
   e0b08:	07d2      	lsls	r2, r2, #31
   e0b0a:	bf5c      	itt	pl
   e0b0c:	2201      	movpl	r2, #1
   e0b0e:	601a      	strpl	r2, [r3, #0]
   e0b10:	4770      	bx	lr
   e0b12:	bf00      	nop
   e0b14:	2003e7c4 	.word	0x2003e7c4
   e0b18:	2003e7c0 	.word	0x2003e7c0
   e0b1c:	2003e7bc 	.word	0x2003e7bc
   e0b20:	2003e7b8 	.word	0x2003e7b8
   e0b24:	2003e7b4 	.word	0x2003e7b4
   e0b28:	2003e7b0 	.word	0x2003e7b0
   e0b2c:	2003e7ac 	.word	0x2003e7ac
   e0b30:	2003e7a8 	.word	0x2003e7a8

000e0b34 <__aeabi_drsub>:
   e0b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e0b38:	e002      	b.n	e0b40 <__adddf3>
   e0b3a:	bf00      	nop

000e0b3c <__aeabi_dsub>:
   e0b3c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e0b40 <__adddf3>:
   e0b40:	b530      	push	{r4, r5, lr}
   e0b42:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e0b46:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e0b4a:	ea94 0f05 	teq	r4, r5
   e0b4e:	bf08      	it	eq
   e0b50:	ea90 0f02 	teqeq	r0, r2
   e0b54:	bf1f      	itttt	ne
   e0b56:	ea54 0c00 	orrsne.w	ip, r4, r0
   e0b5a:	ea55 0c02 	orrsne.w	ip, r5, r2
   e0b5e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e0b62:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0b66:	f000 80e2 	beq.w	e0d2e <__adddf3+0x1ee>
   e0b6a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e0b6e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e0b72:	bfb8      	it	lt
   e0b74:	426d      	neglt	r5, r5
   e0b76:	dd0c      	ble.n	e0b92 <__adddf3+0x52>
   e0b78:	442c      	add	r4, r5
   e0b7a:	ea80 0202 	eor.w	r2, r0, r2
   e0b7e:	ea81 0303 	eor.w	r3, r1, r3
   e0b82:	ea82 0000 	eor.w	r0, r2, r0
   e0b86:	ea83 0101 	eor.w	r1, r3, r1
   e0b8a:	ea80 0202 	eor.w	r2, r0, r2
   e0b8e:	ea81 0303 	eor.w	r3, r1, r3
   e0b92:	2d36      	cmp	r5, #54	; 0x36
   e0b94:	bf88      	it	hi
   e0b96:	bd30      	pophi	{r4, r5, pc}
   e0b98:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e0b9c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e0ba0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e0ba4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e0ba8:	d002      	beq.n	e0bb0 <__adddf3+0x70>
   e0baa:	4240      	negs	r0, r0
   e0bac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0bb0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e0bb4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e0bb8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e0bbc:	d002      	beq.n	e0bc4 <__adddf3+0x84>
   e0bbe:	4252      	negs	r2, r2
   e0bc0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e0bc4:	ea94 0f05 	teq	r4, r5
   e0bc8:	f000 80a7 	beq.w	e0d1a <__adddf3+0x1da>
   e0bcc:	f1a4 0401 	sub.w	r4, r4, #1
   e0bd0:	f1d5 0e20 	rsbs	lr, r5, #32
   e0bd4:	db0d      	blt.n	e0bf2 <__adddf3+0xb2>
   e0bd6:	fa02 fc0e 	lsl.w	ip, r2, lr
   e0bda:	fa22 f205 	lsr.w	r2, r2, r5
   e0bde:	1880      	adds	r0, r0, r2
   e0be0:	f141 0100 	adc.w	r1, r1, #0
   e0be4:	fa03 f20e 	lsl.w	r2, r3, lr
   e0be8:	1880      	adds	r0, r0, r2
   e0bea:	fa43 f305 	asr.w	r3, r3, r5
   e0bee:	4159      	adcs	r1, r3
   e0bf0:	e00e      	b.n	e0c10 <__adddf3+0xd0>
   e0bf2:	f1a5 0520 	sub.w	r5, r5, #32
   e0bf6:	f10e 0e20 	add.w	lr, lr, #32
   e0bfa:	2a01      	cmp	r2, #1
   e0bfc:	fa03 fc0e 	lsl.w	ip, r3, lr
   e0c00:	bf28      	it	cs
   e0c02:	f04c 0c02 	orrcs.w	ip, ip, #2
   e0c06:	fa43 f305 	asr.w	r3, r3, r5
   e0c0a:	18c0      	adds	r0, r0, r3
   e0c0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e0c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0c14:	d507      	bpl.n	e0c26 <__adddf3+0xe6>
   e0c16:	f04f 0e00 	mov.w	lr, #0
   e0c1a:	f1dc 0c00 	rsbs	ip, ip, #0
   e0c1e:	eb7e 0000 	sbcs.w	r0, lr, r0
   e0c22:	eb6e 0101 	sbc.w	r1, lr, r1
   e0c26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e0c2a:	d31b      	bcc.n	e0c64 <__adddf3+0x124>
   e0c2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e0c30:	d30c      	bcc.n	e0c4c <__adddf3+0x10c>
   e0c32:	0849      	lsrs	r1, r1, #1
   e0c34:	ea5f 0030 	movs.w	r0, r0, rrx
   e0c38:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e0c3c:	f104 0401 	add.w	r4, r4, #1
   e0c40:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e0c44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e0c48:	f080 809a 	bcs.w	e0d80 <__adddf3+0x240>
   e0c4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e0c50:	bf08      	it	eq
   e0c52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e0c56:	f150 0000 	adcs.w	r0, r0, #0
   e0c5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0c5e:	ea41 0105 	orr.w	r1, r1, r5
   e0c62:	bd30      	pop	{r4, r5, pc}
   e0c64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e0c68:	4140      	adcs	r0, r0
   e0c6a:	eb41 0101 	adc.w	r1, r1, r1
   e0c6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e0c72:	f1a4 0401 	sub.w	r4, r4, #1
   e0c76:	d1e9      	bne.n	e0c4c <__adddf3+0x10c>
   e0c78:	f091 0f00 	teq	r1, #0
   e0c7c:	bf04      	itt	eq
   e0c7e:	4601      	moveq	r1, r0
   e0c80:	2000      	moveq	r0, #0
   e0c82:	fab1 f381 	clz	r3, r1
   e0c86:	bf08      	it	eq
   e0c88:	3320      	addeq	r3, #32
   e0c8a:	f1a3 030b 	sub.w	r3, r3, #11
   e0c8e:	f1b3 0220 	subs.w	r2, r3, #32
   e0c92:	da0c      	bge.n	e0cae <__adddf3+0x16e>
   e0c94:	320c      	adds	r2, #12
   e0c96:	dd08      	ble.n	e0caa <__adddf3+0x16a>
   e0c98:	f102 0c14 	add.w	ip, r2, #20
   e0c9c:	f1c2 020c 	rsb	r2, r2, #12
   e0ca0:	fa01 f00c 	lsl.w	r0, r1, ip
   e0ca4:	fa21 f102 	lsr.w	r1, r1, r2
   e0ca8:	e00c      	b.n	e0cc4 <__adddf3+0x184>
   e0caa:	f102 0214 	add.w	r2, r2, #20
   e0cae:	bfd8      	it	le
   e0cb0:	f1c2 0c20 	rsble	ip, r2, #32
   e0cb4:	fa01 f102 	lsl.w	r1, r1, r2
   e0cb8:	fa20 fc0c 	lsr.w	ip, r0, ip
   e0cbc:	bfdc      	itt	le
   e0cbe:	ea41 010c 	orrle.w	r1, r1, ip
   e0cc2:	4090      	lslle	r0, r2
   e0cc4:	1ae4      	subs	r4, r4, r3
   e0cc6:	bfa2      	ittt	ge
   e0cc8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e0ccc:	4329      	orrge	r1, r5
   e0cce:	bd30      	popge	{r4, r5, pc}
   e0cd0:	ea6f 0404 	mvn.w	r4, r4
   e0cd4:	3c1f      	subs	r4, #31
   e0cd6:	da1c      	bge.n	e0d12 <__adddf3+0x1d2>
   e0cd8:	340c      	adds	r4, #12
   e0cda:	dc0e      	bgt.n	e0cfa <__adddf3+0x1ba>
   e0cdc:	f104 0414 	add.w	r4, r4, #20
   e0ce0:	f1c4 0220 	rsb	r2, r4, #32
   e0ce4:	fa20 f004 	lsr.w	r0, r0, r4
   e0ce8:	fa01 f302 	lsl.w	r3, r1, r2
   e0cec:	ea40 0003 	orr.w	r0, r0, r3
   e0cf0:	fa21 f304 	lsr.w	r3, r1, r4
   e0cf4:	ea45 0103 	orr.w	r1, r5, r3
   e0cf8:	bd30      	pop	{r4, r5, pc}
   e0cfa:	f1c4 040c 	rsb	r4, r4, #12
   e0cfe:	f1c4 0220 	rsb	r2, r4, #32
   e0d02:	fa20 f002 	lsr.w	r0, r0, r2
   e0d06:	fa01 f304 	lsl.w	r3, r1, r4
   e0d0a:	ea40 0003 	orr.w	r0, r0, r3
   e0d0e:	4629      	mov	r1, r5
   e0d10:	bd30      	pop	{r4, r5, pc}
   e0d12:	fa21 f004 	lsr.w	r0, r1, r4
   e0d16:	4629      	mov	r1, r5
   e0d18:	bd30      	pop	{r4, r5, pc}
   e0d1a:	f094 0f00 	teq	r4, #0
   e0d1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e0d22:	bf06      	itte	eq
   e0d24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e0d28:	3401      	addeq	r4, #1
   e0d2a:	3d01      	subne	r5, #1
   e0d2c:	e74e      	b.n	e0bcc <__adddf3+0x8c>
   e0d2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0d32:	bf18      	it	ne
   e0d34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e0d38:	d029      	beq.n	e0d8e <__adddf3+0x24e>
   e0d3a:	ea94 0f05 	teq	r4, r5
   e0d3e:	bf08      	it	eq
   e0d40:	ea90 0f02 	teqeq	r0, r2
   e0d44:	d005      	beq.n	e0d52 <__adddf3+0x212>
   e0d46:	ea54 0c00 	orrs.w	ip, r4, r0
   e0d4a:	bf04      	itt	eq
   e0d4c:	4619      	moveq	r1, r3
   e0d4e:	4610      	moveq	r0, r2
   e0d50:	bd30      	pop	{r4, r5, pc}
   e0d52:	ea91 0f03 	teq	r1, r3
   e0d56:	bf1e      	ittt	ne
   e0d58:	2100      	movne	r1, #0
   e0d5a:	2000      	movne	r0, #0
   e0d5c:	bd30      	popne	{r4, r5, pc}
   e0d5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e0d62:	d105      	bne.n	e0d70 <__adddf3+0x230>
   e0d64:	0040      	lsls	r0, r0, #1
   e0d66:	4149      	adcs	r1, r1
   e0d68:	bf28      	it	cs
   e0d6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e0d6e:	bd30      	pop	{r4, r5, pc}
   e0d70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e0d74:	bf3c      	itt	cc
   e0d76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e0d7a:	bd30      	popcc	{r4, r5, pc}
   e0d7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0d80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e0d84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e0d88:	f04f 0000 	mov.w	r0, #0
   e0d8c:	bd30      	pop	{r4, r5, pc}
   e0d8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e0d92:	bf1a      	itte	ne
   e0d94:	4619      	movne	r1, r3
   e0d96:	4610      	movne	r0, r2
   e0d98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e0d9c:	bf1c      	itt	ne
   e0d9e:	460b      	movne	r3, r1
   e0da0:	4602      	movne	r2, r0
   e0da2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e0da6:	bf06      	itte	eq
   e0da8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e0dac:	ea91 0f03 	teqeq	r1, r3
   e0db0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e0db4:	bd30      	pop	{r4, r5, pc}
   e0db6:	bf00      	nop

000e0db8 <__aeabi_ui2d>:
   e0db8:	f090 0f00 	teq	r0, #0
   e0dbc:	bf04      	itt	eq
   e0dbe:	2100      	moveq	r1, #0
   e0dc0:	4770      	bxeq	lr
   e0dc2:	b530      	push	{r4, r5, lr}
   e0dc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0dc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0dcc:	f04f 0500 	mov.w	r5, #0
   e0dd0:	f04f 0100 	mov.w	r1, #0
   e0dd4:	e750      	b.n	e0c78 <__adddf3+0x138>
   e0dd6:	bf00      	nop

000e0dd8 <__aeabi_i2d>:
   e0dd8:	f090 0f00 	teq	r0, #0
   e0ddc:	bf04      	itt	eq
   e0dde:	2100      	moveq	r1, #0
   e0de0:	4770      	bxeq	lr
   e0de2:	b530      	push	{r4, r5, lr}
   e0de4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0de8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0dec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e0df0:	bf48      	it	mi
   e0df2:	4240      	negmi	r0, r0
   e0df4:	f04f 0100 	mov.w	r1, #0
   e0df8:	e73e      	b.n	e0c78 <__adddf3+0x138>
   e0dfa:	bf00      	nop

000e0dfc <__aeabi_f2d>:
   e0dfc:	0042      	lsls	r2, r0, #1
   e0dfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e0e02:	ea4f 0131 	mov.w	r1, r1, rrx
   e0e06:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e0e0a:	bf1f      	itttt	ne
   e0e0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e0e10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0e14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e0e18:	4770      	bxne	lr
   e0e1a:	f092 0f00 	teq	r2, #0
   e0e1e:	bf14      	ite	ne
   e0e20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e0e24:	4770      	bxeq	lr
   e0e26:	b530      	push	{r4, r5, lr}
   e0e28:	f44f 7460 	mov.w	r4, #896	; 0x380
   e0e2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e0e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0e34:	e720      	b.n	e0c78 <__adddf3+0x138>
   e0e36:	bf00      	nop

000e0e38 <__aeabi_ul2d>:
   e0e38:	ea50 0201 	orrs.w	r2, r0, r1
   e0e3c:	bf08      	it	eq
   e0e3e:	4770      	bxeq	lr
   e0e40:	b530      	push	{r4, r5, lr}
   e0e42:	f04f 0500 	mov.w	r5, #0
   e0e46:	e00a      	b.n	e0e5e <__aeabi_l2d+0x16>

000e0e48 <__aeabi_l2d>:
   e0e48:	ea50 0201 	orrs.w	r2, r0, r1
   e0e4c:	bf08      	it	eq
   e0e4e:	4770      	bxeq	lr
   e0e50:	b530      	push	{r4, r5, lr}
   e0e52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e0e56:	d502      	bpl.n	e0e5e <__aeabi_l2d+0x16>
   e0e58:	4240      	negs	r0, r0
   e0e5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e0e5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e0e62:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e0e66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e0e6a:	f43f aedc 	beq.w	e0c26 <__adddf3+0xe6>
   e0e6e:	f04f 0203 	mov.w	r2, #3
   e0e72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0e76:	bf18      	it	ne
   e0e78:	3203      	addne	r2, #3
   e0e7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e0e7e:	bf18      	it	ne
   e0e80:	3203      	addne	r2, #3
   e0e82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e0e86:	f1c2 0320 	rsb	r3, r2, #32
   e0e8a:	fa00 fc03 	lsl.w	ip, r0, r3
   e0e8e:	fa20 f002 	lsr.w	r0, r0, r2
   e0e92:	fa01 fe03 	lsl.w	lr, r1, r3
   e0e96:	ea40 000e 	orr.w	r0, r0, lr
   e0e9a:	fa21 f102 	lsr.w	r1, r1, r2
   e0e9e:	4414      	add	r4, r2
   e0ea0:	e6c1      	b.n	e0c26 <__adddf3+0xe6>
   e0ea2:	bf00      	nop

000e0ea4 <__aeabi_dmul>:
   e0ea4:	b570      	push	{r4, r5, r6, lr}
   e0ea6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e0eaa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e0eae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e0eb2:	bf1d      	ittte	ne
   e0eb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e0eb8:	ea94 0f0c 	teqne	r4, ip
   e0ebc:	ea95 0f0c 	teqne	r5, ip
   e0ec0:	f000 f8de 	bleq	e1080 <__aeabi_dmul+0x1dc>
   e0ec4:	442c      	add	r4, r5
   e0ec6:	ea81 0603 	eor.w	r6, r1, r3
   e0eca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e0ece:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e0ed2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e0ed6:	bf18      	it	ne
   e0ed8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e0edc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0ee0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e0ee4:	d038      	beq.n	e0f58 <__aeabi_dmul+0xb4>
   e0ee6:	fba0 ce02 	umull	ip, lr, r0, r2
   e0eea:	f04f 0500 	mov.w	r5, #0
   e0eee:	fbe1 e502 	umlal	lr, r5, r1, r2
   e0ef2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e0ef6:	fbe0 e503 	umlal	lr, r5, r0, r3
   e0efa:	f04f 0600 	mov.w	r6, #0
   e0efe:	fbe1 5603 	umlal	r5, r6, r1, r3
   e0f02:	f09c 0f00 	teq	ip, #0
   e0f06:	bf18      	it	ne
   e0f08:	f04e 0e01 	orrne.w	lr, lr, #1
   e0f0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e0f10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e0f14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e0f18:	d204      	bcs.n	e0f24 <__aeabi_dmul+0x80>
   e0f1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e0f1e:	416d      	adcs	r5, r5
   e0f20:	eb46 0606 	adc.w	r6, r6, r6
   e0f24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e0f28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e0f2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e0f30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e0f34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e0f38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e0f3c:	bf88      	it	hi
   e0f3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e0f42:	d81e      	bhi.n	e0f82 <__aeabi_dmul+0xde>
   e0f44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e0f48:	bf08      	it	eq
   e0f4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e0f4e:	f150 0000 	adcs.w	r0, r0, #0
   e0f52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e0f56:	bd70      	pop	{r4, r5, r6, pc}
   e0f58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e0f5c:	ea46 0101 	orr.w	r1, r6, r1
   e0f60:	ea40 0002 	orr.w	r0, r0, r2
   e0f64:	ea81 0103 	eor.w	r1, r1, r3
   e0f68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e0f6c:	bfc2      	ittt	gt
   e0f6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   e0f72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e0f76:	bd70      	popgt	{r4, r5, r6, pc}
   e0f78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e0f7c:	f04f 0e00 	mov.w	lr, #0
   e0f80:	3c01      	subs	r4, #1
   e0f82:	f300 80ab 	bgt.w	e10dc <__aeabi_dmul+0x238>
   e0f86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e0f8a:	bfde      	ittt	le
   e0f8c:	2000      	movle	r0, #0
   e0f8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e0f92:	bd70      	pople	{r4, r5, r6, pc}
   e0f94:	f1c4 0400 	rsb	r4, r4, #0
   e0f98:	3c20      	subs	r4, #32
   e0f9a:	da35      	bge.n	e1008 <__aeabi_dmul+0x164>
   e0f9c:	340c      	adds	r4, #12
   e0f9e:	dc1b      	bgt.n	e0fd8 <__aeabi_dmul+0x134>
   e0fa0:	f104 0414 	add.w	r4, r4, #20
   e0fa4:	f1c4 0520 	rsb	r5, r4, #32
   e0fa8:	fa00 f305 	lsl.w	r3, r0, r5
   e0fac:	fa20 f004 	lsr.w	r0, r0, r4
   e0fb0:	fa01 f205 	lsl.w	r2, r1, r5
   e0fb4:	ea40 0002 	orr.w	r0, r0, r2
   e0fb8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e0fbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e0fc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e0fc4:	fa21 f604 	lsr.w	r6, r1, r4
   e0fc8:	eb42 0106 	adc.w	r1, r2, r6
   e0fcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e0fd0:	bf08      	it	eq
   e0fd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e0fd6:	bd70      	pop	{r4, r5, r6, pc}
   e0fd8:	f1c4 040c 	rsb	r4, r4, #12
   e0fdc:	f1c4 0520 	rsb	r5, r4, #32
   e0fe0:	fa00 f304 	lsl.w	r3, r0, r4
   e0fe4:	fa20 f005 	lsr.w	r0, r0, r5
   e0fe8:	fa01 f204 	lsl.w	r2, r1, r4
   e0fec:	ea40 0002 	orr.w	r0, r0, r2
   e0ff0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e0ff4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e0ff8:	f141 0100 	adc.w	r1, r1, #0
   e0ffc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1000:	bf08      	it	eq
   e1002:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1006:	bd70      	pop	{r4, r5, r6, pc}
   e1008:	f1c4 0520 	rsb	r5, r4, #32
   e100c:	fa00 f205 	lsl.w	r2, r0, r5
   e1010:	ea4e 0e02 	orr.w	lr, lr, r2
   e1014:	fa20 f304 	lsr.w	r3, r0, r4
   e1018:	fa01 f205 	lsl.w	r2, r1, r5
   e101c:	ea43 0302 	orr.w	r3, r3, r2
   e1020:	fa21 f004 	lsr.w	r0, r1, r4
   e1024:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1028:	fa21 f204 	lsr.w	r2, r1, r4
   e102c:	ea20 0002 	bic.w	r0, r0, r2
   e1030:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e1034:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1038:	bf08      	it	eq
   e103a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e103e:	bd70      	pop	{r4, r5, r6, pc}
   e1040:	f094 0f00 	teq	r4, #0
   e1044:	d10f      	bne.n	e1066 <__aeabi_dmul+0x1c2>
   e1046:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e104a:	0040      	lsls	r0, r0, #1
   e104c:	eb41 0101 	adc.w	r1, r1, r1
   e1050:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1054:	bf08      	it	eq
   e1056:	3c01      	subeq	r4, #1
   e1058:	d0f7      	beq.n	e104a <__aeabi_dmul+0x1a6>
   e105a:	ea41 0106 	orr.w	r1, r1, r6
   e105e:	f095 0f00 	teq	r5, #0
   e1062:	bf18      	it	ne
   e1064:	4770      	bxne	lr
   e1066:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e106a:	0052      	lsls	r2, r2, #1
   e106c:	eb43 0303 	adc.w	r3, r3, r3
   e1070:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1074:	bf08      	it	eq
   e1076:	3d01      	subeq	r5, #1
   e1078:	d0f7      	beq.n	e106a <__aeabi_dmul+0x1c6>
   e107a:	ea43 0306 	orr.w	r3, r3, r6
   e107e:	4770      	bx	lr
   e1080:	ea94 0f0c 	teq	r4, ip
   e1084:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1088:	bf18      	it	ne
   e108a:	ea95 0f0c 	teqne	r5, ip
   e108e:	d00c      	beq.n	e10aa <__aeabi_dmul+0x206>
   e1090:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1094:	bf18      	it	ne
   e1096:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e109a:	d1d1      	bne.n	e1040 <__aeabi_dmul+0x19c>
   e109c:	ea81 0103 	eor.w	r1, r1, r3
   e10a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e10a4:	f04f 0000 	mov.w	r0, #0
   e10a8:	bd70      	pop	{r4, r5, r6, pc}
   e10aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e10ae:	bf06      	itte	eq
   e10b0:	4610      	moveq	r0, r2
   e10b2:	4619      	moveq	r1, r3
   e10b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e10b8:	d019      	beq.n	e10ee <__aeabi_dmul+0x24a>
   e10ba:	ea94 0f0c 	teq	r4, ip
   e10be:	d102      	bne.n	e10c6 <__aeabi_dmul+0x222>
   e10c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e10c4:	d113      	bne.n	e10ee <__aeabi_dmul+0x24a>
   e10c6:	ea95 0f0c 	teq	r5, ip
   e10ca:	d105      	bne.n	e10d8 <__aeabi_dmul+0x234>
   e10cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e10d0:	bf1c      	itt	ne
   e10d2:	4610      	movne	r0, r2
   e10d4:	4619      	movne	r1, r3
   e10d6:	d10a      	bne.n	e10ee <__aeabi_dmul+0x24a>
   e10d8:	ea81 0103 	eor.w	r1, r1, r3
   e10dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e10e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e10e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e10e8:	f04f 0000 	mov.w	r0, #0
   e10ec:	bd70      	pop	{r4, r5, r6, pc}
   e10ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e10f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e10f6:	bd70      	pop	{r4, r5, r6, pc}

000e10f8 <__aeabi_ddiv>:
   e10f8:	b570      	push	{r4, r5, r6, lr}
   e10fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e10fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1102:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1106:	bf1d      	ittte	ne
   e1108:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e110c:	ea94 0f0c 	teqne	r4, ip
   e1110:	ea95 0f0c 	teqne	r5, ip
   e1114:	f000 f8a7 	bleq	e1266 <__aeabi_ddiv+0x16e>
   e1118:	eba4 0405 	sub.w	r4, r4, r5
   e111c:	ea81 0e03 	eor.w	lr, r1, r3
   e1120:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1124:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1128:	f000 8088 	beq.w	e123c <__aeabi_ddiv+0x144>
   e112c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1130:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e1134:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e1138:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e113c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e1140:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1144:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1148:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e114c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e1150:	429d      	cmp	r5, r3
   e1152:	bf08      	it	eq
   e1154:	4296      	cmpeq	r6, r2
   e1156:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e115a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e115e:	d202      	bcs.n	e1166 <__aeabi_ddiv+0x6e>
   e1160:	085b      	lsrs	r3, r3, #1
   e1162:	ea4f 0232 	mov.w	r2, r2, rrx
   e1166:	1ab6      	subs	r6, r6, r2
   e1168:	eb65 0503 	sbc.w	r5, r5, r3
   e116c:	085b      	lsrs	r3, r3, #1
   e116e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1172:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e1176:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e117a:	ebb6 0e02 	subs.w	lr, r6, r2
   e117e:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1182:	bf22      	ittt	cs
   e1184:	1ab6      	subcs	r6, r6, r2
   e1186:	4675      	movcs	r5, lr
   e1188:	ea40 000c 	orrcs.w	r0, r0, ip
   e118c:	085b      	lsrs	r3, r3, #1
   e118e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1192:	ebb6 0e02 	subs.w	lr, r6, r2
   e1196:	eb75 0e03 	sbcs.w	lr, r5, r3
   e119a:	bf22      	ittt	cs
   e119c:	1ab6      	subcs	r6, r6, r2
   e119e:	4675      	movcs	r5, lr
   e11a0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e11a4:	085b      	lsrs	r3, r3, #1
   e11a6:	ea4f 0232 	mov.w	r2, r2, rrx
   e11aa:	ebb6 0e02 	subs.w	lr, r6, r2
   e11ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   e11b2:	bf22      	ittt	cs
   e11b4:	1ab6      	subcs	r6, r6, r2
   e11b6:	4675      	movcs	r5, lr
   e11b8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e11bc:	085b      	lsrs	r3, r3, #1
   e11be:	ea4f 0232 	mov.w	r2, r2, rrx
   e11c2:	ebb6 0e02 	subs.w	lr, r6, r2
   e11c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e11ca:	bf22      	ittt	cs
   e11cc:	1ab6      	subcs	r6, r6, r2
   e11ce:	4675      	movcs	r5, lr
   e11d0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e11d4:	ea55 0e06 	orrs.w	lr, r5, r6
   e11d8:	d018      	beq.n	e120c <__aeabi_ddiv+0x114>
   e11da:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e11de:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e11e2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e11e6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e11ea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e11ee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e11f2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e11f6:	d1c0      	bne.n	e117a <__aeabi_ddiv+0x82>
   e11f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e11fc:	d10b      	bne.n	e1216 <__aeabi_ddiv+0x11e>
   e11fe:	ea41 0100 	orr.w	r1, r1, r0
   e1202:	f04f 0000 	mov.w	r0, #0
   e1206:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e120a:	e7b6      	b.n	e117a <__aeabi_ddiv+0x82>
   e120c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1210:	bf04      	itt	eq
   e1212:	4301      	orreq	r1, r0
   e1214:	2000      	moveq	r0, #0
   e1216:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e121a:	bf88      	it	hi
   e121c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1220:	f63f aeaf 	bhi.w	e0f82 <__aeabi_dmul+0xde>
   e1224:	ebb5 0c03 	subs.w	ip, r5, r3
   e1228:	bf04      	itt	eq
   e122a:	ebb6 0c02 	subseq.w	ip, r6, r2
   e122e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1232:	f150 0000 	adcs.w	r0, r0, #0
   e1236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e123a:	bd70      	pop	{r4, r5, r6, pc}
   e123c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e1240:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e1244:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e1248:	bfc2      	ittt	gt
   e124a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e124e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1252:	bd70      	popgt	{r4, r5, r6, pc}
   e1254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1258:	f04f 0e00 	mov.w	lr, #0
   e125c:	3c01      	subs	r4, #1
   e125e:	e690      	b.n	e0f82 <__aeabi_dmul+0xde>
   e1260:	ea45 0e06 	orr.w	lr, r5, r6
   e1264:	e68d      	b.n	e0f82 <__aeabi_dmul+0xde>
   e1266:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e126a:	ea94 0f0c 	teq	r4, ip
   e126e:	bf08      	it	eq
   e1270:	ea95 0f0c 	teqeq	r5, ip
   e1274:	f43f af3b 	beq.w	e10ee <__aeabi_dmul+0x24a>
   e1278:	ea94 0f0c 	teq	r4, ip
   e127c:	d10a      	bne.n	e1294 <__aeabi_ddiv+0x19c>
   e127e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1282:	f47f af34 	bne.w	e10ee <__aeabi_dmul+0x24a>
   e1286:	ea95 0f0c 	teq	r5, ip
   e128a:	f47f af25 	bne.w	e10d8 <__aeabi_dmul+0x234>
   e128e:	4610      	mov	r0, r2
   e1290:	4619      	mov	r1, r3
   e1292:	e72c      	b.n	e10ee <__aeabi_dmul+0x24a>
   e1294:	ea95 0f0c 	teq	r5, ip
   e1298:	d106      	bne.n	e12a8 <__aeabi_ddiv+0x1b0>
   e129a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e129e:	f43f aefd 	beq.w	e109c <__aeabi_dmul+0x1f8>
   e12a2:	4610      	mov	r0, r2
   e12a4:	4619      	mov	r1, r3
   e12a6:	e722      	b.n	e10ee <__aeabi_dmul+0x24a>
   e12a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e12ac:	bf18      	it	ne
   e12ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e12b2:	f47f aec5 	bne.w	e1040 <__aeabi_dmul+0x19c>
   e12b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e12ba:	f47f af0d 	bne.w	e10d8 <__aeabi_dmul+0x234>
   e12be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e12c2:	f47f aeeb 	bne.w	e109c <__aeabi_dmul+0x1f8>
   e12c6:	e712      	b.n	e10ee <__aeabi_dmul+0x24a>

000e12c8 <__gedf2>:
   e12c8:	f04f 3cff 	mov.w	ip, #4294967295
   e12cc:	e006      	b.n	e12dc <__cmpdf2+0x4>
   e12ce:	bf00      	nop

000e12d0 <__ledf2>:
   e12d0:	f04f 0c01 	mov.w	ip, #1
   e12d4:	e002      	b.n	e12dc <__cmpdf2+0x4>
   e12d6:	bf00      	nop

000e12d8 <__cmpdf2>:
   e12d8:	f04f 0c01 	mov.w	ip, #1
   e12dc:	f84d cd04 	str.w	ip, [sp, #-4]!
   e12e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e12e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e12e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e12ec:	bf18      	it	ne
   e12ee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e12f2:	d01b      	beq.n	e132c <__cmpdf2+0x54>
   e12f4:	b001      	add	sp, #4
   e12f6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e12fa:	bf0c      	ite	eq
   e12fc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e1300:	ea91 0f03 	teqne	r1, r3
   e1304:	bf02      	ittt	eq
   e1306:	ea90 0f02 	teqeq	r0, r2
   e130a:	2000      	moveq	r0, #0
   e130c:	4770      	bxeq	lr
   e130e:	f110 0f00 	cmn.w	r0, #0
   e1312:	ea91 0f03 	teq	r1, r3
   e1316:	bf58      	it	pl
   e1318:	4299      	cmppl	r1, r3
   e131a:	bf08      	it	eq
   e131c:	4290      	cmpeq	r0, r2
   e131e:	bf2c      	ite	cs
   e1320:	17d8      	asrcs	r0, r3, #31
   e1322:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e1326:	f040 0001 	orr.w	r0, r0, #1
   e132a:	4770      	bx	lr
   e132c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1330:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1334:	d102      	bne.n	e133c <__cmpdf2+0x64>
   e1336:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e133a:	d107      	bne.n	e134c <__cmpdf2+0x74>
   e133c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1340:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1344:	d1d6      	bne.n	e12f4 <__cmpdf2+0x1c>
   e1346:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e134a:	d0d3      	beq.n	e12f4 <__cmpdf2+0x1c>
   e134c:	f85d 0b04 	ldr.w	r0, [sp], #4
   e1350:	4770      	bx	lr
   e1352:	bf00      	nop

000e1354 <__aeabi_cdrcmple>:
   e1354:	4684      	mov	ip, r0
   e1356:	4610      	mov	r0, r2
   e1358:	4662      	mov	r2, ip
   e135a:	468c      	mov	ip, r1
   e135c:	4619      	mov	r1, r3
   e135e:	4663      	mov	r3, ip
   e1360:	e000      	b.n	e1364 <__aeabi_cdcmpeq>
   e1362:	bf00      	nop

000e1364 <__aeabi_cdcmpeq>:
   e1364:	b501      	push	{r0, lr}
   e1366:	f7ff ffb7 	bl	e12d8 <__cmpdf2>
   e136a:	2800      	cmp	r0, #0
   e136c:	bf48      	it	mi
   e136e:	f110 0f00 	cmnmi.w	r0, #0
   e1372:	bd01      	pop	{r0, pc}

000e1374 <__aeabi_dcmpeq>:
   e1374:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1378:	f7ff fff4 	bl	e1364 <__aeabi_cdcmpeq>
   e137c:	bf0c      	ite	eq
   e137e:	2001      	moveq	r0, #1
   e1380:	2000      	movne	r0, #0
   e1382:	f85d fb08 	ldr.w	pc, [sp], #8
   e1386:	bf00      	nop

000e1388 <__aeabi_dcmplt>:
   e1388:	f84d ed08 	str.w	lr, [sp, #-8]!
   e138c:	f7ff ffea 	bl	e1364 <__aeabi_cdcmpeq>
   e1390:	bf34      	ite	cc
   e1392:	2001      	movcc	r0, #1
   e1394:	2000      	movcs	r0, #0
   e1396:	f85d fb08 	ldr.w	pc, [sp], #8
   e139a:	bf00      	nop

000e139c <__aeabi_dcmple>:
   e139c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e13a0:	f7ff ffe0 	bl	e1364 <__aeabi_cdcmpeq>
   e13a4:	bf94      	ite	ls
   e13a6:	2001      	movls	r0, #1
   e13a8:	2000      	movhi	r0, #0
   e13aa:	f85d fb08 	ldr.w	pc, [sp], #8
   e13ae:	bf00      	nop

000e13b0 <__aeabi_dcmpge>:
   e13b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e13b4:	f7ff ffce 	bl	e1354 <__aeabi_cdrcmple>
   e13b8:	bf94      	ite	ls
   e13ba:	2001      	movls	r0, #1
   e13bc:	2000      	movhi	r0, #0
   e13be:	f85d fb08 	ldr.w	pc, [sp], #8
   e13c2:	bf00      	nop

000e13c4 <__aeabi_dcmpgt>:
   e13c4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e13c8:	f7ff ffc4 	bl	e1354 <__aeabi_cdrcmple>
   e13cc:	bf34      	ite	cc
   e13ce:	2001      	movcc	r0, #1
   e13d0:	2000      	movcs	r0, #0
   e13d2:	f85d fb08 	ldr.w	pc, [sp], #8
   e13d6:	bf00      	nop

000e13d8 <__aeabi_d2iz>:
   e13d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e13dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e13e0:	d215      	bcs.n	e140e <__aeabi_d2iz+0x36>
   e13e2:	d511      	bpl.n	e1408 <__aeabi_d2iz+0x30>
   e13e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e13e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e13ec:	d912      	bls.n	e1414 <__aeabi_d2iz+0x3c>
   e13ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e13f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e13f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e13fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e13fe:	fa23 f002 	lsr.w	r0, r3, r2
   e1402:	bf18      	it	ne
   e1404:	4240      	negne	r0, r0
   e1406:	4770      	bx	lr
   e1408:	f04f 0000 	mov.w	r0, #0
   e140c:	4770      	bx	lr
   e140e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1412:	d105      	bne.n	e1420 <__aeabi_d2iz+0x48>
   e1414:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e1418:	bf08      	it	eq
   e141a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e141e:	4770      	bx	lr
   e1420:	f04f 0000 	mov.w	r0, #0
   e1424:	4770      	bx	lr
   e1426:	bf00      	nop

000e1428 <__aeabi_d2uiz>:
   e1428:	004a      	lsls	r2, r1, #1
   e142a:	d211      	bcs.n	e1450 <__aeabi_d2uiz+0x28>
   e142c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1430:	d211      	bcs.n	e1456 <__aeabi_d2uiz+0x2e>
   e1432:	d50d      	bpl.n	e1450 <__aeabi_d2uiz+0x28>
   e1434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e143c:	d40e      	bmi.n	e145c <__aeabi_d2uiz+0x34>
   e143e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e1446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e144a:	fa23 f002 	lsr.w	r0, r3, r2
   e144e:	4770      	bx	lr
   e1450:	f04f 0000 	mov.w	r0, #0
   e1454:	4770      	bx	lr
   e1456:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e145a:	d102      	bne.n	e1462 <__aeabi_d2uiz+0x3a>
   e145c:	f04f 30ff 	mov.w	r0, #4294967295
   e1460:	4770      	bx	lr
   e1462:	f04f 0000 	mov.w	r0, #0
   e1466:	4770      	bx	lr

000e1468 <__aeabi_d2f>:
   e1468:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e146c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e1470:	bf24      	itt	cs
   e1472:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e1476:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e147a:	d90d      	bls.n	e1498 <__aeabi_d2f+0x30>
   e147c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e1480:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e1484:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e1488:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e148c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e1490:	bf08      	it	eq
   e1492:	f020 0001 	biceq.w	r0, r0, #1
   e1496:	4770      	bx	lr
   e1498:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e149c:	d121      	bne.n	e14e2 <__aeabi_d2f+0x7a>
   e149e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e14a2:	bfbc      	itt	lt
   e14a4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e14a8:	4770      	bxlt	lr
   e14aa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e14ae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e14b2:	f1c2 0218 	rsb	r2, r2, #24
   e14b6:	f1c2 0c20 	rsb	ip, r2, #32
   e14ba:	fa10 f30c 	lsls.w	r3, r0, ip
   e14be:	fa20 f002 	lsr.w	r0, r0, r2
   e14c2:	bf18      	it	ne
   e14c4:	f040 0001 	orrne.w	r0, r0, #1
   e14c8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e14cc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e14d0:	fa03 fc0c 	lsl.w	ip, r3, ip
   e14d4:	ea40 000c 	orr.w	r0, r0, ip
   e14d8:	fa23 f302 	lsr.w	r3, r3, r2
   e14dc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e14e0:	e7cc      	b.n	e147c <__aeabi_d2f+0x14>
   e14e2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e14e6:	d107      	bne.n	e14f8 <__aeabi_d2f+0x90>
   e14e8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e14ec:	bf1e      	ittt	ne
   e14ee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e14f2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e14f6:	4770      	bxne	lr
   e14f8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e14fc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e1500:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e1504:	4770      	bx	lr
   e1506:	bf00      	nop

000e1508 <atof>:
   e1508:	2100      	movs	r1, #0
   e150a:	f000 bfc9 	b.w	e24a0 <strtod>
	...

000e1510 <__cxa_atexit>:
   e1510:	b510      	push	{r4, lr}
   e1512:	4c05      	ldr	r4, [pc, #20]	; (e1528 <__cxa_atexit+0x18>)
   e1514:	4613      	mov	r3, r2
   e1516:	b12c      	cbz	r4, e1524 <__cxa_atexit+0x14>
   e1518:	460a      	mov	r2, r1
   e151a:	4601      	mov	r1, r0
   e151c:	2002      	movs	r0, #2
   e151e:	f3af 8000 	nop.w
   e1522:	bd10      	pop	{r4, pc}
   e1524:	4620      	mov	r0, r4
   e1526:	bd10      	pop	{r4, pc}
   e1528:	00000000 	.word	0x00000000

000e152c <localtime>:
   e152c:	b538      	push	{r3, r4, r5, lr}
   e152e:	4b07      	ldr	r3, [pc, #28]	; (e154c <localtime+0x20>)
   e1530:	681c      	ldr	r4, [r3, #0]
   e1532:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e1534:	4605      	mov	r5, r0
   e1536:	b91b      	cbnz	r3, e1540 <localtime+0x14>
   e1538:	2024      	movs	r0, #36	; 0x24
   e153a:	f7fd f911 	bl	de760 <malloc>
   e153e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e1540:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e1542:	4628      	mov	r0, r5
   e1544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1548:	f000 b802 	b.w	e1550 <localtime_r>
   e154c:	2003e258 	.word	0x2003e258

000e1550 <localtime_r>:
   e1550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1554:	460c      	mov	r4, r1
   e1556:	4680      	mov	r8, r0
   e1558:	f001 fdc4 	bl	e30e4 <__gettzinfo>
   e155c:	4621      	mov	r1, r4
   e155e:	4607      	mov	r7, r0
   e1560:	4640      	mov	r0, r8
   e1562:	f001 fdc3 	bl	e30ec <gmtime_r>
   e1566:	6946      	ldr	r6, [r0, #20]
   e1568:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e156c:	07b3      	lsls	r3, r6, #30
   e156e:	4604      	mov	r4, r0
   e1570:	d105      	bne.n	e157e <localtime_r+0x2e>
   e1572:	2264      	movs	r2, #100	; 0x64
   e1574:	fb96 f3f2 	sdiv	r3, r6, r2
   e1578:	fb02 6313 	mls	r3, r2, r3, r6
   e157c:	b94b      	cbnz	r3, e1592 <localtime_r+0x42>
   e157e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e1582:	fb96 f3f5 	sdiv	r3, r6, r5
   e1586:	fb05 6513 	mls	r5, r5, r3, r6
   e158a:	fab5 f385 	clz	r3, r5
   e158e:	095b      	lsrs	r3, r3, #5
   e1590:	e000      	b.n	e1594 <localtime_r+0x44>
   e1592:	2301      	movs	r3, #1
   e1594:	4a5f      	ldr	r2, [pc, #380]	; (e1714 <localtime_r+0x1c4>)
   e1596:	2530      	movs	r5, #48	; 0x30
   e1598:	fb05 2503 	mla	r5, r5, r3, r2
   e159c:	f001 f8b8 	bl	e2710 <__tz_lock>
   e15a0:	f001 f8b8 	bl	e2714 <_tzset_unlocked>
   e15a4:	4b5c      	ldr	r3, [pc, #368]	; (e1718 <localtime_r+0x1c8>)
   e15a6:	681b      	ldr	r3, [r3, #0]
   e15a8:	b1f3      	cbz	r3, e15e8 <localtime_r+0x98>
   e15aa:	687b      	ldr	r3, [r7, #4]
   e15ac:	429e      	cmp	r6, r3
   e15ae:	d105      	bne.n	e15bc <localtime_r+0x6c>
   e15b0:	6839      	ldr	r1, [r7, #0]
   e15b2:	f8d8 3000 	ldr.w	r3, [r8]
   e15b6:	69fa      	ldr	r2, [r7, #28]
   e15b8:	b941      	cbnz	r1, e15cc <localtime_r+0x7c>
   e15ba:	e00a      	b.n	e15d2 <localtime_r+0x82>
   e15bc:	4630      	mov	r0, r6
   e15be:	f000 ffff 	bl	e25c0 <__tzcalc_limits>
   e15c2:	2800      	cmp	r0, #0
   e15c4:	d1f4      	bne.n	e15b0 <localtime_r+0x60>
   e15c6:	f04f 33ff 	mov.w	r3, #4294967295
   e15ca:	e00d      	b.n	e15e8 <localtime_r+0x98>
   e15cc:	4293      	cmp	r3, r2
   e15ce:	db08      	blt.n	e15e2 <localtime_r+0x92>
   e15d0:	e001      	b.n	e15d6 <localtime_r+0x86>
   e15d2:	4293      	cmp	r3, r2
   e15d4:	da07      	bge.n	e15e6 <localtime_r+0x96>
   e15d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e15d8:	4293      	cmp	r3, r2
   e15da:	bfac      	ite	ge
   e15dc:	2300      	movge	r3, #0
   e15de:	2301      	movlt	r3, #1
   e15e0:	e002      	b.n	e15e8 <localtime_r+0x98>
   e15e2:	2300      	movs	r3, #0
   e15e4:	e000      	b.n	e15e8 <localtime_r+0x98>
   e15e6:	2301      	movs	r3, #1
   e15e8:	6223      	str	r3, [r4, #32]
   e15ea:	6a23      	ldr	r3, [r4, #32]
   e15ec:	2b01      	cmp	r3, #1
   e15ee:	bf0c      	ite	eq
   e15f0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e15f2:	6a39      	ldrne	r1, [r7, #32]
   e15f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e15f8:	203c      	movs	r0, #60	; 0x3c
   e15fa:	fb91 f6f3 	sdiv	r6, r1, r3
   e15fe:	fb03 1316 	mls	r3, r3, r6, r1
   e1602:	6861      	ldr	r1, [r4, #4]
   e1604:	fb93 f2f0 	sdiv	r2, r3, r0
   e1608:	fb00 3012 	mls	r0, r0, r2, r3
   e160c:	6823      	ldr	r3, [r4, #0]
   e160e:	1a89      	subs	r1, r1, r2
   e1610:	68a2      	ldr	r2, [r4, #8]
   e1612:	6061      	str	r1, [r4, #4]
   e1614:	1a1b      	subs	r3, r3, r0
   e1616:	1b92      	subs	r2, r2, r6
   e1618:	2b3b      	cmp	r3, #59	; 0x3b
   e161a:	6023      	str	r3, [r4, #0]
   e161c:	60a2      	str	r2, [r4, #8]
   e161e:	dd03      	ble.n	e1628 <localtime_r+0xd8>
   e1620:	3101      	adds	r1, #1
   e1622:	6061      	str	r1, [r4, #4]
   e1624:	3b3c      	subs	r3, #60	; 0x3c
   e1626:	e004      	b.n	e1632 <localtime_r+0xe2>
   e1628:	2b00      	cmp	r3, #0
   e162a:	da03      	bge.n	e1634 <localtime_r+0xe4>
   e162c:	3901      	subs	r1, #1
   e162e:	6061      	str	r1, [r4, #4]
   e1630:	333c      	adds	r3, #60	; 0x3c
   e1632:	6023      	str	r3, [r4, #0]
   e1634:	6863      	ldr	r3, [r4, #4]
   e1636:	2b3b      	cmp	r3, #59	; 0x3b
   e1638:	dd03      	ble.n	e1642 <localtime_r+0xf2>
   e163a:	3201      	adds	r2, #1
   e163c:	60a2      	str	r2, [r4, #8]
   e163e:	3b3c      	subs	r3, #60	; 0x3c
   e1640:	e004      	b.n	e164c <localtime_r+0xfc>
   e1642:	2b00      	cmp	r3, #0
   e1644:	da03      	bge.n	e164e <localtime_r+0xfe>
   e1646:	3a01      	subs	r2, #1
   e1648:	60a2      	str	r2, [r4, #8]
   e164a:	333c      	adds	r3, #60	; 0x3c
   e164c:	6063      	str	r3, [r4, #4]
   e164e:	68a3      	ldr	r3, [r4, #8]
   e1650:	2b17      	cmp	r3, #23
   e1652:	dd22      	ble.n	e169a <localtime_r+0x14a>
   e1654:	69e2      	ldr	r2, [r4, #28]
   e1656:	3201      	adds	r2, #1
   e1658:	61e2      	str	r2, [r4, #28]
   e165a:	69a2      	ldr	r2, [r4, #24]
   e165c:	3201      	adds	r2, #1
   e165e:	2a06      	cmp	r2, #6
   e1660:	bfc8      	it	gt
   e1662:	2200      	movgt	r2, #0
   e1664:	61a2      	str	r2, [r4, #24]
   e1666:	68e2      	ldr	r2, [r4, #12]
   e1668:	3b18      	subs	r3, #24
   e166a:	3201      	adds	r2, #1
   e166c:	60a3      	str	r3, [r4, #8]
   e166e:	6923      	ldr	r3, [r4, #16]
   e1670:	60e2      	str	r2, [r4, #12]
   e1672:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e1676:	428a      	cmp	r2, r1
   e1678:	dd46      	ble.n	e1708 <localtime_r+0x1b8>
   e167a:	3301      	adds	r3, #1
   e167c:	2b0c      	cmp	r3, #12
   e167e:	bf0c      	ite	eq
   e1680:	6963      	ldreq	r3, [r4, #20]
   e1682:	6123      	strne	r3, [r4, #16]
   e1684:	eba2 0201 	sub.w	r2, r2, r1
   e1688:	60e2      	str	r2, [r4, #12]
   e168a:	bf01      	itttt	eq
   e168c:	3301      	addeq	r3, #1
   e168e:	2200      	moveq	r2, #0
   e1690:	6122      	streq	r2, [r4, #16]
   e1692:	6163      	streq	r3, [r4, #20]
   e1694:	bf08      	it	eq
   e1696:	61e2      	streq	r2, [r4, #28]
   e1698:	e036      	b.n	e1708 <localtime_r+0x1b8>
   e169a:	2b00      	cmp	r3, #0
   e169c:	da34      	bge.n	e1708 <localtime_r+0x1b8>
   e169e:	69e2      	ldr	r2, [r4, #28]
   e16a0:	3a01      	subs	r2, #1
   e16a2:	61e2      	str	r2, [r4, #28]
   e16a4:	69a2      	ldr	r2, [r4, #24]
   e16a6:	3a01      	subs	r2, #1
   e16a8:	bf48      	it	mi
   e16aa:	2206      	movmi	r2, #6
   e16ac:	61a2      	str	r2, [r4, #24]
   e16ae:	68e2      	ldr	r2, [r4, #12]
   e16b0:	3318      	adds	r3, #24
   e16b2:	3a01      	subs	r2, #1
   e16b4:	60e2      	str	r2, [r4, #12]
   e16b6:	60a3      	str	r3, [r4, #8]
   e16b8:	bb32      	cbnz	r2, e1708 <localtime_r+0x1b8>
   e16ba:	6923      	ldr	r3, [r4, #16]
   e16bc:	3b01      	subs	r3, #1
   e16be:	d401      	bmi.n	e16c4 <localtime_r+0x174>
   e16c0:	6123      	str	r3, [r4, #16]
   e16c2:	e01d      	b.n	e1700 <localtime_r+0x1b0>
   e16c4:	230b      	movs	r3, #11
   e16c6:	6123      	str	r3, [r4, #16]
   e16c8:	6963      	ldr	r3, [r4, #20]
   e16ca:	1e5a      	subs	r2, r3, #1
   e16cc:	f012 0f03 	tst.w	r2, #3
   e16d0:	6162      	str	r2, [r4, #20]
   e16d2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e16d6:	d105      	bne.n	e16e4 <localtime_r+0x194>
   e16d8:	2164      	movs	r1, #100	; 0x64
   e16da:	fb93 f2f1 	sdiv	r2, r3, r1
   e16de:	fb01 3212 	mls	r2, r1, r2, r3
   e16e2:	b94a      	cbnz	r2, e16f8 <localtime_r+0x1a8>
   e16e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e16e8:	fb93 f2f1 	sdiv	r2, r3, r1
   e16ec:	fb01 3312 	mls	r3, r1, r2, r3
   e16f0:	fab3 f383 	clz	r3, r3
   e16f4:	095b      	lsrs	r3, r3, #5
   e16f6:	e000      	b.n	e16fa <localtime_r+0x1aa>
   e16f8:	2301      	movs	r3, #1
   e16fa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e16fe:	61e3      	str	r3, [r4, #28]
   e1700:	6923      	ldr	r3, [r4, #16]
   e1702:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e1706:	60e3      	str	r3, [r4, #12]
   e1708:	f001 f803 	bl	e2712 <__tz_unlock>
   e170c:	4620      	mov	r0, r4
   e170e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e1712:	bf00      	nop
   e1714:	000e402c 	.word	0x000e402c
   e1718:	2003e7e4 	.word	0x2003e7e4

000e171c <_localeconv_r>:
   e171c:	4800      	ldr	r0, [pc, #0]	; (e1720 <_localeconv_r+0x4>)
   e171e:	4770      	bx	lr
   e1720:	2003e25c 	.word	0x2003e25c

000e1724 <memcmp>:
   e1724:	b510      	push	{r4, lr}
   e1726:	3901      	subs	r1, #1
   e1728:	4402      	add	r2, r0
   e172a:	4290      	cmp	r0, r2
   e172c:	d007      	beq.n	e173e <memcmp+0x1a>
   e172e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e1732:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e1736:	42a3      	cmp	r3, r4
   e1738:	d0f7      	beq.n	e172a <memcmp+0x6>
   e173a:	1b18      	subs	r0, r3, r4
   e173c:	bd10      	pop	{r4, pc}
   e173e:	2000      	movs	r0, #0
   e1740:	bd10      	pop	{r4, pc}

000e1742 <memcpy>:
   e1742:	b510      	push	{r4, lr}
   e1744:	1e43      	subs	r3, r0, #1
   e1746:	440a      	add	r2, r1
   e1748:	4291      	cmp	r1, r2
   e174a:	d004      	beq.n	e1756 <memcpy+0x14>
   e174c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e1750:	f803 4f01 	strb.w	r4, [r3, #1]!
   e1754:	e7f8      	b.n	e1748 <memcpy+0x6>
   e1756:	bd10      	pop	{r4, pc}

000e1758 <memset>:
   e1758:	4402      	add	r2, r0
   e175a:	4603      	mov	r3, r0
   e175c:	4293      	cmp	r3, r2
   e175e:	d002      	beq.n	e1766 <memset+0xe>
   e1760:	f803 1b01 	strb.w	r1, [r3], #1
   e1764:	e7fa      	b.n	e175c <memset+0x4>
   e1766:	4770      	bx	lr

000e1768 <srand>:
   e1768:	b538      	push	{r3, r4, r5, lr}
   e176a:	4b12      	ldr	r3, [pc, #72]	; (e17b4 <srand+0x4c>)
   e176c:	681c      	ldr	r4, [r3, #0]
   e176e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e1770:	4605      	mov	r5, r0
   e1772:	b9d3      	cbnz	r3, e17aa <srand+0x42>
   e1774:	2018      	movs	r0, #24
   e1776:	f7fc fff3 	bl	de760 <malloc>
   e177a:	f243 330e 	movw	r3, #13070	; 0x330e
   e177e:	63a0      	str	r0, [r4, #56]	; 0x38
   e1780:	8003      	strh	r3, [r0, #0]
   e1782:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e1786:	8043      	strh	r3, [r0, #2]
   e1788:	f241 2334 	movw	r3, #4660	; 0x1234
   e178c:	8083      	strh	r3, [r0, #4]
   e178e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e1792:	80c3      	strh	r3, [r0, #6]
   e1794:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e1798:	8103      	strh	r3, [r0, #8]
   e179a:	2305      	movs	r3, #5
   e179c:	8143      	strh	r3, [r0, #10]
   e179e:	230b      	movs	r3, #11
   e17a0:	8183      	strh	r3, [r0, #12]
   e17a2:	2201      	movs	r2, #1
   e17a4:	2300      	movs	r3, #0
   e17a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e17aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e17ac:	2200      	movs	r2, #0
   e17ae:	611d      	str	r5, [r3, #16]
   e17b0:	615a      	str	r2, [r3, #20]
   e17b2:	bd38      	pop	{r3, r4, r5, pc}
   e17b4:	2003e258 	.word	0x2003e258

000e17b8 <strcmp>:
   e17b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   e17bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   e17c0:	2a01      	cmp	r2, #1
   e17c2:	bf28      	it	cs
   e17c4:	429a      	cmpcs	r2, r3
   e17c6:	d0f7      	beq.n	e17b8 <strcmp>
   e17c8:	1ad0      	subs	r0, r2, r3
   e17ca:	4770      	bx	lr

000e17cc <strcpy>:
   e17cc:	4603      	mov	r3, r0
   e17ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   e17d2:	f803 2b01 	strb.w	r2, [r3], #1
   e17d6:	2a00      	cmp	r2, #0
   e17d8:	d1f9      	bne.n	e17ce <strcpy+0x2>
   e17da:	4770      	bx	lr

000e17dc <strdup>:
   e17dc:	4b02      	ldr	r3, [pc, #8]	; (e17e8 <strdup+0xc>)
   e17de:	4601      	mov	r1, r0
   e17e0:	6818      	ldr	r0, [r3, #0]
   e17e2:	f000 b803 	b.w	e17ec <_strdup_r>
   e17e6:	bf00      	nop
   e17e8:	2003e258 	.word	0x2003e258

000e17ec <_strdup_r>:
   e17ec:	b570      	push	{r4, r5, r6, lr}
   e17ee:	4606      	mov	r6, r0
   e17f0:	4608      	mov	r0, r1
   e17f2:	460c      	mov	r4, r1
   e17f4:	f000 f80d 	bl	e1812 <strlen>
   e17f8:	1c45      	adds	r5, r0, #1
   e17fa:	4629      	mov	r1, r5
   e17fc:	4630      	mov	r0, r6
   e17fe:	f7fc ffd7 	bl	de7b0 <_malloc_r>
   e1802:	4606      	mov	r6, r0
   e1804:	b118      	cbz	r0, e180e <_strdup_r+0x22>
   e1806:	462a      	mov	r2, r5
   e1808:	4621      	mov	r1, r4
   e180a:	f7ff ff9a 	bl	e1742 <memcpy>
   e180e:	4630      	mov	r0, r6
   e1810:	bd70      	pop	{r4, r5, r6, pc}

000e1812 <strlen>:
   e1812:	4603      	mov	r3, r0
   e1814:	f813 2b01 	ldrb.w	r2, [r3], #1
   e1818:	2a00      	cmp	r2, #0
   e181a:	d1fb      	bne.n	e1814 <strlen+0x2>
   e181c:	1a18      	subs	r0, r3, r0
   e181e:	3801      	subs	r0, #1
   e1820:	4770      	bx	lr

000e1822 <strncmp>:
   e1822:	b530      	push	{r4, r5, lr}
   e1824:	b182      	cbz	r2, e1848 <strncmp+0x26>
   e1826:	1e45      	subs	r5, r0, #1
   e1828:	3901      	subs	r1, #1
   e182a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e182e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e1832:	42a3      	cmp	r3, r4
   e1834:	d106      	bne.n	e1844 <strncmp+0x22>
   e1836:	43ec      	mvns	r4, r5
   e1838:	4414      	add	r4, r2
   e183a:	42e0      	cmn	r0, r4
   e183c:	d001      	beq.n	e1842 <strncmp+0x20>
   e183e:	2b00      	cmp	r3, #0
   e1840:	d1f3      	bne.n	e182a <strncmp+0x8>
   e1842:	461c      	mov	r4, r3
   e1844:	1b18      	subs	r0, r3, r4
   e1846:	bd30      	pop	{r4, r5, pc}
   e1848:	4610      	mov	r0, r2
   e184a:	bd30      	pop	{r4, r5, pc}

000e184c <strnlen>:
   e184c:	b510      	push	{r4, lr}
   e184e:	4603      	mov	r3, r0
   e1850:	4401      	add	r1, r0
   e1852:	428b      	cmp	r3, r1
   e1854:	d004      	beq.n	e1860 <strnlen+0x14>
   e1856:	781a      	ldrb	r2, [r3, #0]
   e1858:	1c5c      	adds	r4, r3, #1
   e185a:	b10a      	cbz	r2, e1860 <strnlen+0x14>
   e185c:	4623      	mov	r3, r4
   e185e:	e7f8      	b.n	e1852 <strnlen+0x6>
   e1860:	1a18      	subs	r0, r3, r0
   e1862:	bd10      	pop	{r4, pc}

000e1864 <sulp>:
   e1864:	b570      	push	{r4, r5, r6, lr}
   e1866:	4604      	mov	r4, r0
   e1868:	460d      	mov	r5, r1
   e186a:	ec45 4b10 	vmov	d0, r4, r5
   e186e:	4616      	mov	r6, r2
   e1870:	f001 ff9a 	bl	e37a8 <__ulp>
   e1874:	ec51 0b10 	vmov	r0, r1, d0
   e1878:	b17e      	cbz	r6, e189a <sulp+0x36>
   e187a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e187e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1882:	2b00      	cmp	r3, #0
   e1884:	dd09      	ble.n	e189a <sulp+0x36>
   e1886:	051b      	lsls	r3, r3, #20
   e1888:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e188c:	2400      	movs	r4, #0
   e188e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e1892:	4622      	mov	r2, r4
   e1894:	462b      	mov	r3, r5
   e1896:	f7ff fb05 	bl	e0ea4 <__aeabi_dmul>
   e189a:	bd70      	pop	{r4, r5, r6, pc}
   e189c:	0000      	movs	r0, r0
	...

000e18a0 <_strtod_r>:
   e18a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e18a4:	b09d      	sub	sp, #116	; 0x74
   e18a6:	2300      	movs	r3, #0
   e18a8:	9002      	str	r0, [sp, #8]
   e18aa:	460c      	mov	r4, r1
   e18ac:	9213      	str	r2, [sp, #76]	; 0x4c
   e18ae:	9318      	str	r3, [sp, #96]	; 0x60
   e18b0:	f04f 0a00 	mov.w	sl, #0
   e18b4:	f04f 0b00 	mov.w	fp, #0
   e18b8:	9117      	str	r1, [sp, #92]	; 0x5c
   e18ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e18bc:	781a      	ldrb	r2, [r3, #0]
   e18be:	2a0d      	cmp	r2, #13
   e18c0:	d805      	bhi.n	e18ce <_strtod_r+0x2e>
   e18c2:	2a09      	cmp	r2, #9
   e18c4:	d213      	bcs.n	e18ee <_strtod_r+0x4e>
   e18c6:	2a00      	cmp	r2, #0
   e18c8:	f000 81ac 	beq.w	e1c24 <_strtod_r+0x384>
   e18cc:	e012      	b.n	e18f4 <_strtod_r+0x54>
   e18ce:	2a2b      	cmp	r2, #43	; 0x2b
   e18d0:	d004      	beq.n	e18dc <_strtod_r+0x3c>
   e18d2:	2a2d      	cmp	r2, #45	; 0x2d
   e18d4:	d004      	beq.n	e18e0 <_strtod_r+0x40>
   e18d6:	2a20      	cmp	r2, #32
   e18d8:	d10c      	bne.n	e18f4 <_strtod_r+0x54>
   e18da:	e008      	b.n	e18ee <_strtod_r+0x4e>
   e18dc:	2200      	movs	r2, #0
   e18de:	e000      	b.n	e18e2 <_strtod_r+0x42>
   e18e0:	2201      	movs	r2, #1
   e18e2:	920c      	str	r2, [sp, #48]	; 0x30
   e18e4:	1c5a      	adds	r2, r3, #1
   e18e6:	9217      	str	r2, [sp, #92]	; 0x5c
   e18e8:	785b      	ldrb	r3, [r3, #1]
   e18ea:	b92b      	cbnz	r3, e18f8 <_strtod_r+0x58>
   e18ec:	e19a      	b.n	e1c24 <_strtod_r+0x384>
   e18ee:	3301      	adds	r3, #1
   e18f0:	9317      	str	r3, [sp, #92]	; 0x5c
   e18f2:	e7e2      	b.n	e18ba <_strtod_r+0x1a>
   e18f4:	2300      	movs	r3, #0
   e18f6:	930c      	str	r3, [sp, #48]	; 0x30
   e18f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e18fa:	782b      	ldrb	r3, [r5, #0]
   e18fc:	2b30      	cmp	r3, #48	; 0x30
   e18fe:	d15c      	bne.n	e19ba <_strtod_r+0x11a>
   e1900:	786b      	ldrb	r3, [r5, #1]
   e1902:	2b58      	cmp	r3, #88	; 0x58
   e1904:	d001      	beq.n	e190a <_strtod_r+0x6a>
   e1906:	2b78      	cmp	r3, #120	; 0x78
   e1908:	d14c      	bne.n	e19a4 <_strtod_r+0x104>
   e190a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e190c:	9301      	str	r3, [sp, #4]
   e190e:	ab18      	add	r3, sp, #96	; 0x60
   e1910:	9300      	str	r3, [sp, #0]
   e1912:	4aa9      	ldr	r2, [pc, #676]	; (e1bb8 <_strtod_r+0x318>)
   e1914:	9802      	ldr	r0, [sp, #8]
   e1916:	ab19      	add	r3, sp, #100	; 0x64
   e1918:	a917      	add	r1, sp, #92	; 0x5c
   e191a:	f001 f8cc 	bl	e2ab6 <__gethex>
   e191e:	f010 0607 	ands.w	r6, r0, #7
   e1922:	4604      	mov	r4, r0
   e1924:	f000 8587 	beq.w	e2436 <_strtod_r+0xb96>
   e1928:	2e06      	cmp	r6, #6
   e192a:	d105      	bne.n	e1938 <_strtod_r+0x98>
   e192c:	3501      	adds	r5, #1
   e192e:	2300      	movs	r3, #0
   e1930:	9517      	str	r5, [sp, #92]	; 0x5c
   e1932:	930c      	str	r3, [sp, #48]	; 0x30
   e1934:	f000 bd7f 	b.w	e2436 <_strtod_r+0xb96>
   e1938:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e193a:	b13a      	cbz	r2, e194c <_strtod_r+0xac>
   e193c:	2135      	movs	r1, #53	; 0x35
   e193e:	a81a      	add	r0, sp, #104	; 0x68
   e1940:	f002 f81f 	bl	e3982 <__copybits>
   e1944:	9918      	ldr	r1, [sp, #96]	; 0x60
   e1946:	9802      	ldr	r0, [sp, #8]
   e1948:	f001 fc9d 	bl	e3286 <_Bfree>
   e194c:	2e06      	cmp	r6, #6
   e194e:	d822      	bhi.n	e1996 <_strtod_r+0xf6>
   e1950:	e8df f006 	tbb	[pc, r6]
   e1954:	18080d04 	.word	0x18080d04
   e1958:	0d1d      	.short	0x0d1d
   e195a:	04          	.byte	0x04
   e195b:	00          	.byte	0x00
   e195c:	f04f 0b00 	mov.w	fp, #0
   e1960:	46da      	mov	sl, fp
   e1962:	e018      	b.n	e1996 <_strtod_r+0xf6>
   e1964:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1968:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e196c:	e013      	b.n	e1996 <_strtod_r+0xf6>
   e196e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e1970:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e1972:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1976:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e197a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e197e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e1982:	e008      	b.n	e1996 <_strtod_r+0xf6>
   e1984:	f8df b234 	ldr.w	fp, [pc, #564]	; e1bbc <_strtod_r+0x31c>
   e1988:	f04f 0a00 	mov.w	sl, #0
   e198c:	e003      	b.n	e1996 <_strtod_r+0xf6>
   e198e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e1992:	f04f 3aff 	mov.w	sl, #4294967295
   e1996:	0721      	lsls	r1, r4, #28
   e1998:	f140 854d 	bpl.w	e2436 <_strtod_r+0xb96>
   e199c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e19a0:	f000 bd49 	b.w	e2436 <_strtod_r+0xb96>
   e19a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e19a6:	1c5a      	adds	r2, r3, #1
   e19a8:	9217      	str	r2, [sp, #92]	; 0x5c
   e19aa:	785b      	ldrb	r3, [r3, #1]
   e19ac:	2b30      	cmp	r3, #48	; 0x30
   e19ae:	d0f9      	beq.n	e19a4 <_strtod_r+0x104>
   e19b0:	2b00      	cmp	r3, #0
   e19b2:	f000 8540 	beq.w	e2436 <_strtod_r+0xb96>
   e19b6:	2301      	movs	r3, #1
   e19b8:	e000      	b.n	e19bc <_strtod_r+0x11c>
   e19ba:	2300      	movs	r3, #0
   e19bc:	f04f 0800 	mov.w	r8, #0
   e19c0:	9306      	str	r3, [sp, #24]
   e19c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e19c4:	9307      	str	r3, [sp, #28]
   e19c6:	f8cd 8014 	str.w	r8, [sp, #20]
   e19ca:	f8cd 8010 	str.w	r8, [sp, #16]
   e19ce:	220a      	movs	r2, #10
   e19d0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e19d2:	782e      	ldrb	r6, [r5, #0]
   e19d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e19d8:	b2d9      	uxtb	r1, r3
   e19da:	2909      	cmp	r1, #9
   e19dc:	d80e      	bhi.n	e19fc <_strtod_r+0x15c>
   e19de:	9904      	ldr	r1, [sp, #16]
   e19e0:	2908      	cmp	r1, #8
   e19e2:	bfdd      	ittte	le
   e19e4:	9905      	ldrle	r1, [sp, #20]
   e19e6:	fb02 3301 	mlale	r3, r2, r1, r3
   e19ea:	9305      	strle	r3, [sp, #20]
   e19ec:	fb02 3808 	mlagt	r8, r2, r8, r3
   e19f0:	9b04      	ldr	r3, [sp, #16]
   e19f2:	3501      	adds	r5, #1
   e19f4:	3301      	adds	r3, #1
   e19f6:	9304      	str	r3, [sp, #16]
   e19f8:	9517      	str	r5, [sp, #92]	; 0x5c
   e19fa:	e7e9      	b.n	e19d0 <_strtod_r+0x130>
   e19fc:	9802      	ldr	r0, [sp, #8]
   e19fe:	f7ff fe8d 	bl	e171c <_localeconv_r>
   e1a02:	6807      	ldr	r7, [r0, #0]
   e1a04:	9802      	ldr	r0, [sp, #8]
   e1a06:	f7ff fe89 	bl	e171c <_localeconv_r>
   e1a0a:	6800      	ldr	r0, [r0, #0]
   e1a0c:	f7ff ff01 	bl	e1812 <strlen>
   e1a10:	4639      	mov	r1, r7
   e1a12:	4602      	mov	r2, r0
   e1a14:	4628      	mov	r0, r5
   e1a16:	f7ff ff04 	bl	e1822 <strncmp>
   e1a1a:	4607      	mov	r7, r0
   e1a1c:	b128      	cbz	r0, e1a2a <_strtod_r+0x18a>
   e1a1e:	2000      	movs	r0, #0
   e1a20:	4633      	mov	r3, r6
   e1a22:	9d04      	ldr	r5, [sp, #16]
   e1a24:	4602      	mov	r2, r0
   e1a26:	4601      	mov	r1, r0
   e1a28:	e057      	b.n	e1ada <_strtod_r+0x23a>
   e1a2a:	9802      	ldr	r0, [sp, #8]
   e1a2c:	f7ff fe76 	bl	e171c <_localeconv_r>
   e1a30:	6800      	ldr	r0, [r0, #0]
   e1a32:	f7ff feee 	bl	e1812 <strlen>
   e1a36:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1a38:	181a      	adds	r2, r3, r0
   e1a3a:	9217      	str	r2, [sp, #92]	; 0x5c
   e1a3c:	9a04      	ldr	r2, [sp, #16]
   e1a3e:	5c1b      	ldrb	r3, [r3, r0]
   e1a40:	2a00      	cmp	r2, #0
   e1a42:	d142      	bne.n	e1aca <_strtod_r+0x22a>
   e1a44:	4610      	mov	r0, r2
   e1a46:	2b30      	cmp	r3, #48	; 0x30
   e1a48:	d105      	bne.n	e1a56 <_strtod_r+0x1b6>
   e1a4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1a4c:	1c5a      	adds	r2, r3, #1
   e1a4e:	9217      	str	r2, [sp, #92]	; 0x5c
   e1a50:	3001      	adds	r0, #1
   e1a52:	785b      	ldrb	r3, [r3, #1]
   e1a54:	e7f7      	b.n	e1a46 <_strtod_r+0x1a6>
   e1a56:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e1a5a:	2a08      	cmp	r2, #8
   e1a5c:	d843      	bhi.n	e1ae6 <_strtod_r+0x246>
   e1a5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e1a60:	9207      	str	r2, [sp, #28]
   e1a62:	4602      	mov	r2, r0
   e1a64:	2000      	movs	r0, #0
   e1a66:	4605      	mov	r5, r0
   e1a68:	3b30      	subs	r3, #48	; 0x30
   e1a6a:	f100 0101 	add.w	r1, r0, #1
   e1a6e:	d026      	beq.n	e1abe <_strtod_r+0x21e>
   e1a70:	440a      	add	r2, r1
   e1a72:	eb05 0c00 	add.w	ip, r5, r0
   e1a76:	4629      	mov	r1, r5
   e1a78:	260a      	movs	r6, #10
   e1a7a:	4561      	cmp	r1, ip
   e1a7c:	d00e      	beq.n	e1a9c <_strtod_r+0x1fc>
   e1a7e:	3101      	adds	r1, #1
   e1a80:	f101 3eff 	add.w	lr, r1, #4294967295
   e1a84:	f1be 0f08 	cmp.w	lr, #8
   e1a88:	dc03      	bgt.n	e1a92 <_strtod_r+0x1f2>
   e1a8a:	9f05      	ldr	r7, [sp, #20]
   e1a8c:	4377      	muls	r7, r6
   e1a8e:	9705      	str	r7, [sp, #20]
   e1a90:	e7f3      	b.n	e1a7a <_strtod_r+0x1da>
   e1a92:	2910      	cmp	r1, #16
   e1a94:	bfd8      	it	le
   e1a96:	fb06 f808 	mulle.w	r8, r6, r8
   e1a9a:	e7ee      	b.n	e1a7a <_strtod_r+0x1da>
   e1a9c:	4428      	add	r0, r5
   e1a9e:	2808      	cmp	r0, #8
   e1aa0:	f100 0501 	add.w	r5, r0, #1
   e1aa4:	dc05      	bgt.n	e1ab2 <_strtod_r+0x212>
   e1aa6:	9805      	ldr	r0, [sp, #20]
   e1aa8:	210a      	movs	r1, #10
   e1aaa:	fb01 3300 	mla	r3, r1, r0, r3
   e1aae:	9305      	str	r3, [sp, #20]
   e1ab0:	e004      	b.n	e1abc <_strtod_r+0x21c>
   e1ab2:	2d10      	cmp	r5, #16
   e1ab4:	bfdc      	itt	le
   e1ab6:	210a      	movle	r1, #10
   e1ab8:	fb01 3808 	mlale	r8, r1, r8, r3
   e1abc:	2100      	movs	r1, #0
   e1abe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1ac0:	1c58      	adds	r0, r3, #1
   e1ac2:	9017      	str	r0, [sp, #92]	; 0x5c
   e1ac4:	785b      	ldrb	r3, [r3, #1]
   e1ac6:	4608      	mov	r0, r1
   e1ac8:	e002      	b.n	e1ad0 <_strtod_r+0x230>
   e1aca:	9d04      	ldr	r5, [sp, #16]
   e1acc:	4638      	mov	r0, r7
   e1ace:	463a      	mov	r2, r7
   e1ad0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e1ad4:	2909      	cmp	r1, #9
   e1ad6:	d9c7      	bls.n	e1a68 <_strtod_r+0x1c8>
   e1ad8:	2101      	movs	r1, #1
   e1ada:	2b65      	cmp	r3, #101	; 0x65
   e1adc:	d001      	beq.n	e1ae2 <_strtod_r+0x242>
   e1ade:	2b45      	cmp	r3, #69	; 0x45
   e1ae0:	d151      	bne.n	e1b86 <_strtod_r+0x2e6>
   e1ae2:	b96d      	cbnz	r5, e1b00 <_strtod_r+0x260>
   e1ae4:	e004      	b.n	e1af0 <_strtod_r+0x250>
   e1ae6:	2b65      	cmp	r3, #101	; 0x65
   e1ae8:	f040 84b3 	bne.w	e2452 <_strtod_r+0xbb2>
   e1aec:	2200      	movs	r2, #0
   e1aee:	2101      	movs	r1, #1
   e1af0:	b928      	cbnz	r0, e1afe <_strtod_r+0x25e>
   e1af2:	9b06      	ldr	r3, [sp, #24]
   e1af4:	2b00      	cmp	r3, #0
   e1af6:	f000 8095 	beq.w	e1c24 <_strtod_r+0x384>
   e1afa:	4605      	mov	r5, r0
   e1afc:	e000      	b.n	e1b00 <_strtod_r+0x260>
   e1afe:	2500      	movs	r5, #0
   e1b00:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e1b02:	1c63      	adds	r3, r4, #1
   e1b04:	9317      	str	r3, [sp, #92]	; 0x5c
   e1b06:	7863      	ldrb	r3, [r4, #1]
   e1b08:	2b2b      	cmp	r3, #43	; 0x2b
   e1b0a:	d006      	beq.n	e1b1a <_strtod_r+0x27a>
   e1b0c:	2b2d      	cmp	r3, #45	; 0x2d
   e1b0e:	d002      	beq.n	e1b16 <_strtod_r+0x276>
   e1b10:	2600      	movs	r6, #0
   e1b12:	9603      	str	r6, [sp, #12]
   e1b14:	e006      	b.n	e1b24 <_strtod_r+0x284>
   e1b16:	2301      	movs	r3, #1
   e1b18:	e000      	b.n	e1b1c <_strtod_r+0x27c>
   e1b1a:	2300      	movs	r3, #0
   e1b1c:	9303      	str	r3, [sp, #12]
   e1b1e:	1ca3      	adds	r3, r4, #2
   e1b20:	9317      	str	r3, [sp, #92]	; 0x5c
   e1b22:	78a3      	ldrb	r3, [r4, #2]
   e1b24:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e1b28:	2e09      	cmp	r6, #9
   e1b2a:	d82b      	bhi.n	e1b84 <_strtod_r+0x2e4>
   e1b2c:	2b30      	cmp	r3, #48	; 0x30
   e1b2e:	d104      	bne.n	e1b3a <_strtod_r+0x29a>
   e1b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1b32:	1c5e      	adds	r6, r3, #1
   e1b34:	9617      	str	r6, [sp, #92]	; 0x5c
   e1b36:	785b      	ldrb	r3, [r3, #1]
   e1b38:	e7f8      	b.n	e1b2c <_strtod_r+0x28c>
   e1b3a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e1b3e:	2e08      	cmp	r6, #8
   e1b40:	d821      	bhi.n	e1b86 <_strtod_r+0x2e6>
   e1b42:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e1b46:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1b48:	f04f 0c0a 	mov.w	ip, #10
   e1b4c:	461f      	mov	r7, r3
   e1b4e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1b50:	1c5e      	adds	r6, r3, #1
   e1b52:	9617      	str	r6, [sp, #92]	; 0x5c
   e1b54:	785b      	ldrb	r3, [r3, #1]
   e1b56:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e1b5a:	f1b9 0f09 	cmp.w	r9, #9
   e1b5e:	d804      	bhi.n	e1b6a <_strtod_r+0x2ca>
   e1b60:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e1b64:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e1b68:	e7f1      	b.n	e1b4e <_strtod_r+0x2ae>
   e1b6a:	1bf6      	subs	r6, r6, r7
   e1b6c:	2e08      	cmp	r6, #8
   e1b6e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e1b72:	dc02      	bgt.n	e1b7a <_strtod_r+0x2da>
   e1b74:	45f1      	cmp	r9, lr
   e1b76:	bfa8      	it	ge
   e1b78:	46f1      	movge	r9, lr
   e1b7a:	9e03      	ldr	r6, [sp, #12]
   e1b7c:	b12e      	cbz	r6, e1b8a <_strtod_r+0x2ea>
   e1b7e:	f1c9 0900 	rsb	r9, r9, #0
   e1b82:	e002      	b.n	e1b8a <_strtod_r+0x2ea>
   e1b84:	9417      	str	r4, [sp, #92]	; 0x5c
   e1b86:	f04f 0900 	mov.w	r9, #0
   e1b8a:	2d00      	cmp	r5, #0
   e1b8c:	d153      	bne.n	e1c36 <_strtod_r+0x396>
   e1b8e:	2800      	cmp	r0, #0
   e1b90:	f040 8451 	bne.w	e2436 <_strtod_r+0xb96>
   e1b94:	9a06      	ldr	r2, [sp, #24]
   e1b96:	2a00      	cmp	r2, #0
   e1b98:	f040 844d 	bne.w	e2436 <_strtod_r+0xb96>
   e1b9c:	2900      	cmp	r1, #0
   e1b9e:	d141      	bne.n	e1c24 <_strtod_r+0x384>
   e1ba0:	2b4e      	cmp	r3, #78	; 0x4e
   e1ba2:	d020      	beq.n	e1be6 <_strtod_r+0x346>
   e1ba4:	dc02      	bgt.n	e1bac <_strtod_r+0x30c>
   e1ba6:	2b49      	cmp	r3, #73	; 0x49
   e1ba8:	d00a      	beq.n	e1bc0 <_strtod_r+0x320>
   e1baa:	e03b      	b.n	e1c24 <_strtod_r+0x384>
   e1bac:	2b69      	cmp	r3, #105	; 0x69
   e1bae:	d007      	beq.n	e1bc0 <_strtod_r+0x320>
   e1bb0:	2b6e      	cmp	r3, #110	; 0x6e
   e1bb2:	d018      	beq.n	e1be6 <_strtod_r+0x346>
   e1bb4:	e036      	b.n	e1c24 <_strtod_r+0x384>
   e1bb6:	bf00      	nop
   e1bb8:	000e408c 	.word	0x000e408c
   e1bbc:	7ff00000 	.word	0x7ff00000
   e1bc0:	49a8      	ldr	r1, [pc, #672]	; (e1e64 <_strtod_r+0x5c4>)
   e1bc2:	a817      	add	r0, sp, #92	; 0x5c
   e1bc4:	f001 f9a8 	bl	e2f18 <__match>
   e1bc8:	b360      	cbz	r0, e1c24 <_strtod_r+0x384>
   e1bca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1bcc:	49a6      	ldr	r1, [pc, #664]	; (e1e68 <_strtod_r+0x5c8>)
   e1bce:	3b01      	subs	r3, #1
   e1bd0:	a817      	add	r0, sp, #92	; 0x5c
   e1bd2:	9317      	str	r3, [sp, #92]	; 0x5c
   e1bd4:	f001 f9a0 	bl	e2f18 <__match>
   e1bd8:	b910      	cbnz	r0, e1be0 <_strtod_r+0x340>
   e1bda:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1bdc:	3301      	adds	r3, #1
   e1bde:	9317      	str	r3, [sp, #92]	; 0x5c
   e1be0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e1e84 <_strtod_r+0x5e4>
   e1be4:	e01a      	b.n	e1c1c <_strtod_r+0x37c>
   e1be6:	49a1      	ldr	r1, [pc, #644]	; (e1e6c <_strtod_r+0x5cc>)
   e1be8:	a817      	add	r0, sp, #92	; 0x5c
   e1bea:	f001 f995 	bl	e2f18 <__match>
   e1bee:	b1c8      	cbz	r0, e1c24 <_strtod_r+0x384>
   e1bf0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e1bf2:	781b      	ldrb	r3, [r3, #0]
   e1bf4:	2b28      	cmp	r3, #40	; 0x28
   e1bf6:	d10f      	bne.n	e1c18 <_strtod_r+0x378>
   e1bf8:	aa1a      	add	r2, sp, #104	; 0x68
   e1bfa:	499d      	ldr	r1, [pc, #628]	; (e1e70 <_strtod_r+0x5d0>)
   e1bfc:	a817      	add	r0, sp, #92	; 0x5c
   e1bfe:	f001 f99e 	bl	e2f3e <__hexnan>
   e1c02:	2805      	cmp	r0, #5
   e1c04:	d108      	bne.n	e1c18 <_strtod_r+0x378>
   e1c06:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e1c08:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e1c0c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e1c10:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e1c14:	f000 bc0f 	b.w	e2436 <_strtod_r+0xb96>
   e1c18:	f8df b26c 	ldr.w	fp, [pc, #620]	; e1e88 <_strtod_r+0x5e8>
   e1c1c:	f04f 0a00 	mov.w	sl, #0
   e1c20:	f000 bc09 	b.w	e2436 <_strtod_r+0xb96>
   e1c24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e1c26:	9417      	str	r4, [sp, #92]	; 0x5c
   e1c28:	2b00      	cmp	r3, #0
   e1c2a:	f000 840f 	beq.w	e244c <_strtod_r+0xbac>
   e1c2e:	2300      	movs	r3, #0
   e1c30:	930c      	str	r3, [sp, #48]	; 0x30
   e1c32:	f000 bc02 	b.w	e243a <_strtod_r+0xb9a>
   e1c36:	9b04      	ldr	r3, [sp, #16]
   e1c38:	9805      	ldr	r0, [sp, #20]
   e1c3a:	2b00      	cmp	r3, #0
   e1c3c:	bf08      	it	eq
   e1c3e:	462b      	moveq	r3, r5
   e1c40:	2d10      	cmp	r5, #16
   e1c42:	462c      	mov	r4, r5
   e1c44:	ebc2 0909 	rsb	r9, r2, r9
   e1c48:	bfa8      	it	ge
   e1c4a:	2410      	movge	r4, #16
   e1c4c:	9304      	str	r3, [sp, #16]
   e1c4e:	f7ff f8b3 	bl	e0db8 <__aeabi_ui2d>
   e1c52:	2c09      	cmp	r4, #9
   e1c54:	4682      	mov	sl, r0
   e1c56:	468b      	mov	fp, r1
   e1c58:	dd13      	ble.n	e1c82 <_strtod_r+0x3e2>
   e1c5a:	4b86      	ldr	r3, [pc, #536]	; (e1e74 <_strtod_r+0x5d4>)
   e1c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e1c60:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e1c64:	f7ff f91e 	bl	e0ea4 <__aeabi_dmul>
   e1c68:	4606      	mov	r6, r0
   e1c6a:	4640      	mov	r0, r8
   e1c6c:	460f      	mov	r7, r1
   e1c6e:	f7ff f8a3 	bl	e0db8 <__aeabi_ui2d>
   e1c72:	4602      	mov	r2, r0
   e1c74:	460b      	mov	r3, r1
   e1c76:	4630      	mov	r0, r6
   e1c78:	4639      	mov	r1, r7
   e1c7a:	f7fe ff61 	bl	e0b40 <__adddf3>
   e1c7e:	4682      	mov	sl, r0
   e1c80:	468b      	mov	fp, r1
   e1c82:	2d0f      	cmp	r5, #15
   e1c84:	dc36      	bgt.n	e1cf4 <_strtod_r+0x454>
   e1c86:	f1b9 0f00 	cmp.w	r9, #0
   e1c8a:	f000 83d4 	beq.w	e2436 <_strtod_r+0xb96>
   e1c8e:	dd24      	ble.n	e1cda <_strtod_r+0x43a>
   e1c90:	f1b9 0f16 	cmp.w	r9, #22
   e1c94:	dc07      	bgt.n	e1ca6 <_strtod_r+0x406>
   e1c96:	4d77      	ldr	r5, [pc, #476]	; (e1e74 <_strtod_r+0x5d4>)
   e1c98:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e1c9c:	4652      	mov	r2, sl
   e1c9e:	465b      	mov	r3, fp
   e1ca0:	e9d9 0100 	ldrd	r0, r1, [r9]
   e1ca4:	e014      	b.n	e1cd0 <_strtod_r+0x430>
   e1ca6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e1caa:	4599      	cmp	r9, r3
   e1cac:	dc22      	bgt.n	e1cf4 <_strtod_r+0x454>
   e1cae:	4c71      	ldr	r4, [pc, #452]	; (e1e74 <_strtod_r+0x5d4>)
   e1cb0:	f1c5 050f 	rsb	r5, r5, #15
   e1cb4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e1cb8:	ebc5 0509 	rsb	r5, r5, r9
   e1cbc:	4652      	mov	r2, sl
   e1cbe:	465b      	mov	r3, fp
   e1cc0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1cc4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e1cc8:	f7ff f8ec 	bl	e0ea4 <__aeabi_dmul>
   e1ccc:	e9d4 2300 	ldrd	r2, r3, [r4]
   e1cd0:	f7ff f8e8 	bl	e0ea4 <__aeabi_dmul>
   e1cd4:	4682      	mov	sl, r0
   e1cd6:	468b      	mov	fp, r1
   e1cd8:	e3ad      	b.n	e2436 <_strtod_r+0xb96>
   e1cda:	f119 0f16 	cmn.w	r9, #22
   e1cde:	db09      	blt.n	e1cf4 <_strtod_r+0x454>
   e1ce0:	4d64      	ldr	r5, [pc, #400]	; (e1e74 <_strtod_r+0x5d4>)
   e1ce2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e1ce6:	e9d9 2300 	ldrd	r2, r3, [r9]
   e1cea:	4650      	mov	r0, sl
   e1cec:	4659      	mov	r1, fp
   e1cee:	f7ff fa03 	bl	e10f8 <__aeabi_ddiv>
   e1cf2:	e7ef      	b.n	e1cd4 <_strtod_r+0x434>
   e1cf4:	1b2c      	subs	r4, r5, r4
   e1cf6:	444c      	add	r4, r9
   e1cf8:	2c00      	cmp	r4, #0
   e1cfa:	dd57      	ble.n	e1dac <_strtod_r+0x50c>
   e1cfc:	f014 010f 	ands.w	r1, r4, #15
   e1d00:	d00a      	beq.n	e1d18 <_strtod_r+0x478>
   e1d02:	4b5c      	ldr	r3, [pc, #368]	; (e1e74 <_strtod_r+0x5d4>)
   e1d04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e1d08:	4652      	mov	r2, sl
   e1d0a:	465b      	mov	r3, fp
   e1d0c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e1d10:	f7ff f8c8 	bl	e0ea4 <__aeabi_dmul>
   e1d14:	4682      	mov	sl, r0
   e1d16:	468b      	mov	fp, r1
   e1d18:	f034 040f 	bics.w	r4, r4, #15
   e1d1c:	f000 80b8 	beq.w	e1e90 <_strtod_r+0x5f0>
   e1d20:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e1d24:	dd0b      	ble.n	e1d3e <_strtod_r+0x49e>
   e1d26:	2400      	movs	r4, #0
   e1d28:	4625      	mov	r5, r4
   e1d2a:	9405      	str	r4, [sp, #20]
   e1d2c:	9404      	str	r4, [sp, #16]
   e1d2e:	9a02      	ldr	r2, [sp, #8]
   e1d30:	f8df b150 	ldr.w	fp, [pc, #336]	; e1e84 <_strtod_r+0x5e4>
   e1d34:	2322      	movs	r3, #34	; 0x22
   e1d36:	6013      	str	r3, [r2, #0]
   e1d38:	f04f 0a00 	mov.w	sl, #0
   e1d3c:	e187      	b.n	e204e <_strtod_r+0x7ae>
   e1d3e:	4e4e      	ldr	r6, [pc, #312]	; (e1e78 <_strtod_r+0x5d8>)
   e1d40:	2300      	movs	r3, #0
   e1d42:	1124      	asrs	r4, r4, #4
   e1d44:	4650      	mov	r0, sl
   e1d46:	4659      	mov	r1, fp
   e1d48:	4698      	mov	r8, r3
   e1d4a:	4637      	mov	r7, r6
   e1d4c:	2c01      	cmp	r4, #1
   e1d4e:	dd0b      	ble.n	e1d68 <_strtod_r+0x4c8>
   e1d50:	07e2      	lsls	r2, r4, #31
   e1d52:	d504      	bpl.n	e1d5e <_strtod_r+0x4be>
   e1d54:	e9d6 2300 	ldrd	r2, r3, [r6]
   e1d58:	f7ff f8a4 	bl	e0ea4 <__aeabi_dmul>
   e1d5c:	2301      	movs	r3, #1
   e1d5e:	f108 0801 	add.w	r8, r8, #1
   e1d62:	1064      	asrs	r4, r4, #1
   e1d64:	3608      	adds	r6, #8
   e1d66:	e7f1      	b.n	e1d4c <_strtod_r+0x4ac>
   e1d68:	b10b      	cbz	r3, e1d6e <_strtod_r+0x4ce>
   e1d6a:	4682      	mov	sl, r0
   e1d6c:	468b      	mov	fp, r1
   e1d6e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e1d72:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e1d76:	4652      	mov	r2, sl
   e1d78:	465b      	mov	r3, fp
   e1d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
   e1d7e:	f7ff f891 	bl	e0ea4 <__aeabi_dmul>
   e1d82:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e1d86:	468b      	mov	fp, r1
   e1d88:	460a      	mov	r2, r1
   e1d8a:	0d1b      	lsrs	r3, r3, #20
   e1d8c:	493b      	ldr	r1, [pc, #236]	; (e1e7c <_strtod_r+0x5dc>)
   e1d8e:	051b      	lsls	r3, r3, #20
   e1d90:	428b      	cmp	r3, r1
   e1d92:	4682      	mov	sl, r0
   e1d94:	d8c7      	bhi.n	e1d26 <_strtod_r+0x486>
   e1d96:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e1d9a:	428b      	cmp	r3, r1
   e1d9c:	bf86      	itte	hi
   e1d9e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e1e8c <_strtod_r+0x5ec>
   e1da2:	f04f 3aff 	movhi.w	sl, #4294967295
   e1da6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e1daa:	e071      	b.n	e1e90 <_strtod_r+0x5f0>
   e1dac:	d070      	beq.n	e1e90 <_strtod_r+0x5f0>
   e1dae:	4264      	negs	r4, r4
   e1db0:	f014 020f 	ands.w	r2, r4, #15
   e1db4:	d00a      	beq.n	e1dcc <_strtod_r+0x52c>
   e1db6:	4b2f      	ldr	r3, [pc, #188]	; (e1e74 <_strtod_r+0x5d4>)
   e1db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e1dbc:	4650      	mov	r0, sl
   e1dbe:	4659      	mov	r1, fp
   e1dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e1dc4:	f7ff f998 	bl	e10f8 <__aeabi_ddiv>
   e1dc8:	4682      	mov	sl, r0
   e1dca:	468b      	mov	fp, r1
   e1dcc:	1124      	asrs	r4, r4, #4
   e1dce:	d05f      	beq.n	e1e90 <_strtod_r+0x5f0>
   e1dd0:	2c1f      	cmp	r4, #31
   e1dd2:	dd04      	ble.n	e1dde <_strtod_r+0x53e>
   e1dd4:	2400      	movs	r4, #0
   e1dd6:	4625      	mov	r5, r4
   e1dd8:	9405      	str	r4, [sp, #20]
   e1dda:	9404      	str	r4, [sp, #16]
   e1ddc:	e130      	b.n	e2040 <_strtod_r+0x7a0>
   e1dde:	f014 0f10 	tst.w	r4, #16
   e1de2:	bf0c      	ite	eq
   e1de4:	2300      	moveq	r3, #0
   e1de6:	236a      	movne	r3, #106	; 0x6a
   e1de8:	4e25      	ldr	r6, [pc, #148]	; (e1e80 <_strtod_r+0x5e0>)
   e1dea:	9303      	str	r3, [sp, #12]
   e1dec:	4650      	mov	r0, sl
   e1dee:	4659      	mov	r1, fp
   e1df0:	2300      	movs	r3, #0
   e1df2:	2c00      	cmp	r4, #0
   e1df4:	dd09      	ble.n	e1e0a <_strtod_r+0x56a>
   e1df6:	07e2      	lsls	r2, r4, #31
   e1df8:	d504      	bpl.n	e1e04 <_strtod_r+0x564>
   e1dfa:	e9d6 2300 	ldrd	r2, r3, [r6]
   e1dfe:	f7ff f851 	bl	e0ea4 <__aeabi_dmul>
   e1e02:	2301      	movs	r3, #1
   e1e04:	1064      	asrs	r4, r4, #1
   e1e06:	3608      	adds	r6, #8
   e1e08:	e7f3      	b.n	e1df2 <_strtod_r+0x552>
   e1e0a:	b10b      	cbz	r3, e1e10 <_strtod_r+0x570>
   e1e0c:	4682      	mov	sl, r0
   e1e0e:	468b      	mov	fp, r1
   e1e10:	9b03      	ldr	r3, [sp, #12]
   e1e12:	b1eb      	cbz	r3, e1e50 <_strtod_r+0x5b0>
   e1e14:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e1e18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e1e1c:	2b00      	cmp	r3, #0
   e1e1e:	4659      	mov	r1, fp
   e1e20:	dd16      	ble.n	e1e50 <_strtod_r+0x5b0>
   e1e22:	2b1f      	cmp	r3, #31
   e1e24:	dd0e      	ble.n	e1e44 <_strtod_r+0x5a4>
   e1e26:	2b34      	cmp	r3, #52	; 0x34
   e1e28:	bfde      	ittt	le
   e1e2a:	3b20      	suble	r3, #32
   e1e2c:	f04f 32ff 	movle.w	r2, #4294967295
   e1e30:	fa02 f303 	lslle.w	r3, r2, r3
   e1e34:	f04f 0a00 	mov.w	sl, #0
   e1e38:	bfcc      	ite	gt
   e1e3a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e1e3e:	ea03 0b01 	andle.w	fp, r3, r1
   e1e42:	e005      	b.n	e1e50 <_strtod_r+0x5b0>
   e1e44:	f04f 32ff 	mov.w	r2, #4294967295
   e1e48:	fa02 f303 	lsl.w	r3, r2, r3
   e1e4c:	ea03 0a0a 	and.w	sl, r3, sl
   e1e50:	2200      	movs	r2, #0
   e1e52:	2300      	movs	r3, #0
   e1e54:	4650      	mov	r0, sl
   e1e56:	4659      	mov	r1, fp
   e1e58:	f7ff fa8c 	bl	e1374 <__aeabi_dcmpeq>
   e1e5c:	2800      	cmp	r0, #0
   e1e5e:	d1b9      	bne.n	e1dd4 <_strtod_r+0x534>
   e1e60:	e018      	b.n	e1e94 <_strtod_r+0x5f4>
   e1e62:	bf00      	nop
   e1e64:	000e40b4 	.word	0x000e40b4
   e1e68:	000e40b7 	.word	0x000e40b7
   e1e6c:	000e40bd 	.word	0x000e40bd
   e1e70:	000e40a0 	.word	0x000e40a0
   e1e74:	000e4128 	.word	0x000e4128
   e1e78:	000e41f0 	.word	0x000e41f0
   e1e7c:	7ca00000 	.word	0x7ca00000
   e1e80:	000e40c0 	.word	0x000e40c0
   e1e84:	7ff00000 	.word	0x7ff00000
   e1e88:	fff80000 	.word	0xfff80000
   e1e8c:	7fefffff 	.word	0x7fefffff
   e1e90:	2300      	movs	r3, #0
   e1e92:	9303      	str	r3, [sp, #12]
   e1e94:	9b05      	ldr	r3, [sp, #20]
   e1e96:	9300      	str	r3, [sp, #0]
   e1e98:	9a04      	ldr	r2, [sp, #16]
   e1e9a:	9907      	ldr	r1, [sp, #28]
   e1e9c:	9802      	ldr	r0, [sp, #8]
   e1e9e:	462b      	mov	r3, r5
   e1ea0:	f001 fa43 	bl	e332a <__s2b>
   e1ea4:	9005      	str	r0, [sp, #20]
   e1ea6:	2800      	cmp	r0, #0
   e1ea8:	f43f af3d 	beq.w	e1d26 <_strtod_r+0x486>
   e1eac:	f1b9 0f00 	cmp.w	r9, #0
   e1eb0:	f1c9 0300 	rsb	r3, r9, #0
   e1eb4:	bfa8      	it	ge
   e1eb6:	2300      	movge	r3, #0
   e1eb8:	930d      	str	r3, [sp, #52]	; 0x34
   e1eba:	2400      	movs	r4, #0
   e1ebc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e1ec0:	9312      	str	r3, [sp, #72]	; 0x48
   e1ec2:	4625      	mov	r5, r4
   e1ec4:	9b05      	ldr	r3, [sp, #20]
   e1ec6:	9802      	ldr	r0, [sp, #8]
   e1ec8:	6859      	ldr	r1, [r3, #4]
   e1eca:	f001 f9a7 	bl	e321c <_Balloc>
   e1ece:	9004      	str	r0, [sp, #16]
   e1ed0:	2800      	cmp	r0, #0
   e1ed2:	f43f af2c 	beq.w	e1d2e <_strtod_r+0x48e>
   e1ed6:	9b05      	ldr	r3, [sp, #20]
   e1ed8:	691a      	ldr	r2, [r3, #16]
   e1eda:	3202      	adds	r2, #2
   e1edc:	f103 010c 	add.w	r1, r3, #12
   e1ee0:	0092      	lsls	r2, r2, #2
   e1ee2:	300c      	adds	r0, #12
   e1ee4:	f7ff fc2d 	bl	e1742 <memcpy>
   e1ee8:	aa1a      	add	r2, sp, #104	; 0x68
   e1eea:	a919      	add	r1, sp, #100	; 0x64
   e1eec:	ec4b ab10 	vmov	d0, sl, fp
   e1ef0:	9802      	ldr	r0, [sp, #8]
   e1ef2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e1ef6:	f001 fccc 	bl	e3892 <__d2b>
   e1efa:	9018      	str	r0, [sp, #96]	; 0x60
   e1efc:	2800      	cmp	r0, #0
   e1efe:	f43f af16 	beq.w	e1d2e <_strtod_r+0x48e>
   e1f02:	2101      	movs	r1, #1
   e1f04:	9802      	ldr	r0, [sp, #8]
   e1f06:	f001 fa9b 	bl	e3440 <__i2b>
   e1f0a:	4605      	mov	r5, r0
   e1f0c:	2800      	cmp	r0, #0
   e1f0e:	f43f af0e 	beq.w	e1d2e <_strtod_r+0x48e>
   e1f12:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e1f14:	9903      	ldr	r1, [sp, #12]
   e1f16:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e1f18:	2b00      	cmp	r3, #0
   e1f1a:	bfad      	iteet	ge
   e1f1c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e1f1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e1f20:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e1f24:	eb02 0803 	addge.w	r8, r2, r3
   e1f28:	bfb8      	it	lt
   e1f2a:	1ad2      	sublt	r2, r2, r3
   e1f2c:	eba3 0301 	sub.w	r3, r3, r1
   e1f30:	4433      	add	r3, r6
   e1f32:	49b5      	ldr	r1, [pc, #724]	; (e2208 <_strtod_r+0x968>)
   e1f34:	bfa8      	it	ge
   e1f36:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e1f38:	3b01      	subs	r3, #1
   e1f3a:	428b      	cmp	r3, r1
   e1f3c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e1f40:	f280 808a 	bge.w	e2058 <_strtod_r+0x7b8>
   e1f44:	1ac9      	subs	r1, r1, r3
   e1f46:	291f      	cmp	r1, #31
   e1f48:	bfc8      	it	gt
   e1f4a:	4fb0      	ldrgt	r7, [pc, #704]	; (e220c <_strtod_r+0x96c>)
   e1f4c:	f04f 0901 	mov.w	r9, #1
   e1f50:	bfd4      	ite	le
   e1f52:	fa09 f301 	lslle.w	r3, r9, r1
   e1f56:	1aff      	subgt	r7, r7, r3
   e1f58:	eba6 0601 	sub.w	r6, r6, r1
   e1f5c:	bfd9      	ittee	le
   e1f5e:	9306      	strle	r3, [sp, #24]
   e1f60:	2700      	movle	r7, #0
   e1f62:	fa09 f707 	lslgt.w	r7, r9, r7
   e1f66:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e1f6a:	eb08 0906 	add.w	r9, r8, r6
   e1f6e:	9b03      	ldr	r3, [sp, #12]
   e1f70:	45c8      	cmp	r8, r9
   e1f72:	4416      	add	r6, r2
   e1f74:	441e      	add	r6, r3
   e1f76:	4643      	mov	r3, r8
   e1f78:	bfa8      	it	ge
   e1f7a:	464b      	movge	r3, r9
   e1f7c:	42b3      	cmp	r3, r6
   e1f7e:	bfa8      	it	ge
   e1f80:	4633      	movge	r3, r6
   e1f82:	2b00      	cmp	r3, #0
   e1f84:	bfc2      	ittt	gt
   e1f86:	ebc3 0909 	rsbgt	r9, r3, r9
   e1f8a:	1af6      	subgt	r6, r6, r3
   e1f8c:	ebc3 0808 	rsbgt	r8, r3, r8
   e1f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e1f92:	2b00      	cmp	r3, #0
   e1f94:	d164      	bne.n	e2060 <_strtod_r+0x7c0>
   e1f96:	f1b9 0f00 	cmp.w	r9, #0
   e1f9a:	dc7a      	bgt.n	e2092 <_strtod_r+0x7f2>
   e1f9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e1f9e:	2b00      	cmp	r3, #0
   e1fa0:	f040 8081 	bne.w	e20a6 <_strtod_r+0x806>
   e1fa4:	2e00      	cmp	r6, #0
   e1fa6:	f300 8088 	bgt.w	e20ba <_strtod_r+0x81a>
   e1faa:	f1b8 0f00 	cmp.w	r8, #0
   e1fae:	f300 808e 	bgt.w	e20ce <_strtod_r+0x82e>
   e1fb2:	9a04      	ldr	r2, [sp, #16]
   e1fb4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e1fb6:	9802      	ldr	r0, [sp, #8]
   e1fb8:	f001 fb97 	bl	e36ea <__mdiff>
   e1fbc:	4604      	mov	r4, r0
   e1fbe:	2800      	cmp	r0, #0
   e1fc0:	f43f aeb5 	beq.w	e1d2e <_strtod_r+0x48e>
   e1fc4:	68c3      	ldr	r3, [r0, #12]
   e1fc6:	9307      	str	r3, [sp, #28]
   e1fc8:	2300      	movs	r3, #0
   e1fca:	60c3      	str	r3, [r0, #12]
   e1fcc:	4629      	mov	r1, r5
   e1fce:	f001 fb70 	bl	e36b2 <__mcmp>
   e1fd2:	2800      	cmp	r0, #0
   e1fd4:	f280 8089 	bge.w	e20ea <_strtod_r+0x84a>
   e1fd8:	9b07      	ldr	r3, [sp, #28]
   e1fda:	2b00      	cmp	r3, #0
   e1fdc:	f040 8204 	bne.w	e23e8 <_strtod_r+0xb48>
   e1fe0:	f1ba 0f00 	cmp.w	sl, #0
   e1fe4:	f040 8200 	bne.w	e23e8 <_strtod_r+0xb48>
   e1fe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e1fec:	2b00      	cmp	r3, #0
   e1fee:	f040 81fb 	bne.w	e23e8 <_strtod_r+0xb48>
   e1ff2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e1ff6:	0d1b      	lsrs	r3, r3, #20
   e1ff8:	051b      	lsls	r3, r3, #20
   e1ffa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e1ffe:	f240 81f3 	bls.w	e23e8 <_strtod_r+0xb48>
   e2002:	6963      	ldr	r3, [r4, #20]
   e2004:	2b00      	cmp	r3, #0
   e2006:	d06c      	beq.n	e20e2 <_strtod_r+0x842>
   e2008:	4621      	mov	r1, r4
   e200a:	2201      	movs	r2, #1
   e200c:	9802      	ldr	r0, [sp, #8]
   e200e:	f001 faff 	bl	e3610 <__lshift>
   e2012:	4629      	mov	r1, r5
   e2014:	4604      	mov	r4, r0
   e2016:	f001 fb4c 	bl	e36b2 <__mcmp>
   e201a:	2800      	cmp	r0, #0
   e201c:	f340 81e4 	ble.w	e23e8 <_strtod_r+0xb48>
   e2020:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2024:	9a03      	ldr	r2, [sp, #12]
   e2026:	0d1b      	lsrs	r3, r3, #20
   e2028:	051b      	lsls	r3, r3, #20
   e202a:	2a00      	cmp	r2, #0
   e202c:	f000 808c 	beq.w	e2148 <_strtod_r+0x8a8>
   e2030:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2034:	f300 8088 	bgt.w	e2148 <_strtod_r+0x8a8>
   e2038:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e203c:	f300 81d6 	bgt.w	e23ec <_strtod_r+0xb4c>
   e2040:	9a02      	ldr	r2, [sp, #8]
   e2042:	2322      	movs	r3, #34	; 0x22
   e2044:	f04f 0a00 	mov.w	sl, #0
   e2048:	f04f 0b00 	mov.w	fp, #0
   e204c:	6013      	str	r3, [r2, #0]
   e204e:	9b05      	ldr	r3, [sp, #20]
   e2050:	2b00      	cmp	r3, #0
   e2052:	f040 81dc 	bne.w	e240e <_strtod_r+0xb6e>
   e2056:	e1ee      	b.n	e2436 <_strtod_r+0xb96>
   e2058:	2301      	movs	r3, #1
   e205a:	2700      	movs	r7, #0
   e205c:	9306      	str	r3, [sp, #24]
   e205e:	e784      	b.n	e1f6a <_strtod_r+0x6ca>
   e2060:	4629      	mov	r1, r5
   e2062:	461a      	mov	r2, r3
   e2064:	9802      	ldr	r0, [sp, #8]
   e2066:	f001 fa85 	bl	e3574 <__pow5mult>
   e206a:	4605      	mov	r5, r0
   e206c:	2800      	cmp	r0, #0
   e206e:	f43f ae5e 	beq.w	e1d2e <_strtod_r+0x48e>
   e2072:	4601      	mov	r1, r0
   e2074:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2076:	9802      	ldr	r0, [sp, #8]
   e2078:	f001 f9eb 	bl	e3452 <__multiply>
   e207c:	9007      	str	r0, [sp, #28]
   e207e:	2800      	cmp	r0, #0
   e2080:	f43f ae55 	beq.w	e1d2e <_strtod_r+0x48e>
   e2084:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2086:	9802      	ldr	r0, [sp, #8]
   e2088:	f001 f8fd 	bl	e3286 <_Bfree>
   e208c:	9b07      	ldr	r3, [sp, #28]
   e208e:	9318      	str	r3, [sp, #96]	; 0x60
   e2090:	e781      	b.n	e1f96 <_strtod_r+0x6f6>
   e2092:	464a      	mov	r2, r9
   e2094:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2096:	9802      	ldr	r0, [sp, #8]
   e2098:	f001 faba 	bl	e3610 <__lshift>
   e209c:	9018      	str	r0, [sp, #96]	; 0x60
   e209e:	2800      	cmp	r0, #0
   e20a0:	f47f af7c 	bne.w	e1f9c <_strtod_r+0x6fc>
   e20a4:	e643      	b.n	e1d2e <_strtod_r+0x48e>
   e20a6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e20a8:	9904      	ldr	r1, [sp, #16]
   e20aa:	9802      	ldr	r0, [sp, #8]
   e20ac:	f001 fa62 	bl	e3574 <__pow5mult>
   e20b0:	9004      	str	r0, [sp, #16]
   e20b2:	2800      	cmp	r0, #0
   e20b4:	f47f af76 	bne.w	e1fa4 <_strtod_r+0x704>
   e20b8:	e639      	b.n	e1d2e <_strtod_r+0x48e>
   e20ba:	4632      	mov	r2, r6
   e20bc:	9904      	ldr	r1, [sp, #16]
   e20be:	9802      	ldr	r0, [sp, #8]
   e20c0:	f001 faa6 	bl	e3610 <__lshift>
   e20c4:	9004      	str	r0, [sp, #16]
   e20c6:	2800      	cmp	r0, #0
   e20c8:	f47f af6f 	bne.w	e1faa <_strtod_r+0x70a>
   e20cc:	e62f      	b.n	e1d2e <_strtod_r+0x48e>
   e20ce:	4629      	mov	r1, r5
   e20d0:	4642      	mov	r2, r8
   e20d2:	9802      	ldr	r0, [sp, #8]
   e20d4:	f001 fa9c 	bl	e3610 <__lshift>
   e20d8:	4605      	mov	r5, r0
   e20da:	2800      	cmp	r0, #0
   e20dc:	f47f af69 	bne.w	e1fb2 <_strtod_r+0x712>
   e20e0:	e625      	b.n	e1d2e <_strtod_r+0x48e>
   e20e2:	6923      	ldr	r3, [r4, #16]
   e20e4:	2b01      	cmp	r3, #1
   e20e6:	dc8f      	bgt.n	e2008 <_strtod_r+0x768>
   e20e8:	e17e      	b.n	e23e8 <_strtod_r+0xb48>
   e20ea:	d161      	bne.n	e21b0 <_strtod_r+0x910>
   e20ec:	9a07      	ldr	r2, [sp, #28]
   e20ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e20f2:	b322      	cbz	r2, e213e <_strtod_r+0x89e>
   e20f4:	4946      	ldr	r1, [pc, #280]	; (e2210 <_strtod_r+0x970>)
   e20f6:	428b      	cmp	r3, r1
   e20f8:	465a      	mov	r2, fp
   e20fa:	d12e      	bne.n	e215a <_strtod_r+0x8ba>
   e20fc:	9b03      	ldr	r3, [sp, #12]
   e20fe:	4651      	mov	r1, sl
   e2100:	b163      	cbz	r3, e211c <_strtod_r+0x87c>
   e2102:	4b44      	ldr	r3, [pc, #272]	; (e2214 <_strtod_r+0x974>)
   e2104:	4013      	ands	r3, r2
   e2106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e210a:	d807      	bhi.n	e211c <_strtod_r+0x87c>
   e210c:	0d1b      	lsrs	r3, r3, #20
   e210e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2112:	f04f 30ff 	mov.w	r0, #4294967295
   e2116:	fa00 f303 	lsl.w	r3, r0, r3
   e211a:	e001      	b.n	e2120 <_strtod_r+0x880>
   e211c:	f04f 33ff 	mov.w	r3, #4294967295
   e2120:	428b      	cmp	r3, r1
   e2122:	d11a      	bne.n	e215a <_strtod_r+0x8ba>
   e2124:	493c      	ldr	r1, [pc, #240]	; (e2218 <_strtod_r+0x978>)
   e2126:	428a      	cmp	r2, r1
   e2128:	d102      	bne.n	e2130 <_strtod_r+0x890>
   e212a:	3301      	adds	r3, #1
   e212c:	f43f adff 	beq.w	e1d2e <_strtod_r+0x48e>
   e2130:	4b38      	ldr	r3, [pc, #224]	; (e2214 <_strtod_r+0x974>)
   e2132:	4013      	ands	r3, r2
   e2134:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e2138:	f04f 0a00 	mov.w	sl, #0
   e213c:	e154      	b.n	e23e8 <_strtod_r+0xb48>
   e213e:	b963      	cbnz	r3, e215a <_strtod_r+0x8ba>
   e2140:	f1ba 0f00 	cmp.w	sl, #0
   e2144:	d109      	bne.n	e215a <_strtod_r+0x8ba>
   e2146:	e76b      	b.n	e2020 <_strtod_r+0x780>
   e2148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e214c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e2150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e2154:	f04f 3aff 	mov.w	sl, #4294967295
   e2158:	e146      	b.n	e23e8 <_strtod_r+0xb48>
   e215a:	b117      	cbz	r7, e2162 <_strtod_r+0x8c2>
   e215c:	ea17 0f0b 	tst.w	r7, fp
   e2160:	e002      	b.n	e2168 <_strtod_r+0x8c8>
   e2162:	9b06      	ldr	r3, [sp, #24]
   e2164:	ea13 0f0a 	tst.w	r3, sl
   e2168:	f000 813e 	beq.w	e23e8 <_strtod_r+0xb48>
   e216c:	9b07      	ldr	r3, [sp, #28]
   e216e:	9a03      	ldr	r2, [sp, #12]
   e2170:	4650      	mov	r0, sl
   e2172:	4659      	mov	r1, fp
   e2174:	b153      	cbz	r3, e218c <_strtod_r+0x8ec>
   e2176:	f7ff fb75 	bl	e1864 <sulp>
   e217a:	4602      	mov	r2, r0
   e217c:	460b      	mov	r3, r1
   e217e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2182:	f7fe fcdd 	bl	e0b40 <__adddf3>
   e2186:	4682      	mov	sl, r0
   e2188:	468b      	mov	fp, r1
   e218a:	e12d      	b.n	e23e8 <_strtod_r+0xb48>
   e218c:	f7ff fb6a 	bl	e1864 <sulp>
   e2190:	4602      	mov	r2, r0
   e2192:	460b      	mov	r3, r1
   e2194:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2198:	f7fe fcd0 	bl	e0b3c <__aeabi_dsub>
   e219c:	2200      	movs	r2, #0
   e219e:	2300      	movs	r3, #0
   e21a0:	4682      	mov	sl, r0
   e21a2:	468b      	mov	fp, r1
   e21a4:	f7ff f8e6 	bl	e1374 <__aeabi_dcmpeq>
   e21a8:	2800      	cmp	r0, #0
   e21aa:	f47f af49 	bne.w	e2040 <_strtod_r+0x7a0>
   e21ae:	e11b      	b.n	e23e8 <_strtod_r+0xb48>
   e21b0:	4629      	mov	r1, r5
   e21b2:	4620      	mov	r0, r4
   e21b4:	f001 fbbb 	bl	e392e <__ratio>
   e21b8:	ec57 6b10 	vmov	r6, r7, d0
   e21bc:	2200      	movs	r2, #0
   e21be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e21c2:	ee10 0a10 	vmov	r0, s0
   e21c6:	4639      	mov	r1, r7
   e21c8:	f7ff f8e8 	bl	e139c <__aeabi_dcmple>
   e21cc:	2800      	cmp	r0, #0
   e21ce:	d042      	beq.n	e2256 <_strtod_r+0x9b6>
   e21d0:	9b07      	ldr	r3, [sp, #28]
   e21d2:	b123      	cbz	r3, e21de <_strtod_r+0x93e>
   e21d4:	f04f 0800 	mov.w	r8, #0
   e21d8:	f8df 9040 	ldr.w	r9, [pc, #64]	; e221c <_strtod_r+0x97c>
   e21dc:	e011      	b.n	e2202 <_strtod_r+0x962>
   e21de:	f1ba 0f00 	cmp.w	sl, #0
   e21e2:	d103      	bne.n	e21ec <_strtod_r+0x94c>
   e21e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e21e8:	b93b      	cbnz	r3, e21fa <_strtod_r+0x95a>
   e21ea:	e01b      	b.n	e2224 <_strtod_r+0x984>
   e21ec:	f1ba 0f01 	cmp.w	sl, #1
   e21f0:	d103      	bne.n	e21fa <_strtod_r+0x95a>
   e21f2:	f1bb 0f00 	cmp.w	fp, #0
   e21f6:	f43f af23 	beq.w	e2040 <_strtod_r+0x7a0>
   e21fa:	f8df 9024 	ldr.w	r9, [pc, #36]	; e2220 <_strtod_r+0x980>
   e21fe:	f04f 0800 	mov.w	r8, #0
   e2202:	2600      	movs	r6, #0
   e2204:	4f05      	ldr	r7, [pc, #20]	; (e221c <_strtod_r+0x97c>)
   e2206:	e039      	b.n	e227c <_strtod_r+0x9dc>
   e2208:	fffffc02 	.word	0xfffffc02
   e220c:	fffffbe2 	.word	0xfffffbe2
   e2210:	000fffff 	.word	0x000fffff
   e2214:	7ff00000 	.word	0x7ff00000
   e2218:	7fefffff 	.word	0x7fefffff
   e221c:	3ff00000 	.word	0x3ff00000
   e2220:	bff00000 	.word	0xbff00000
   e2224:	2200      	movs	r2, #0
   e2226:	4b98      	ldr	r3, [pc, #608]	; (e2488 <_strtod_r+0xbe8>)
   e2228:	4630      	mov	r0, r6
   e222a:	4639      	mov	r1, r7
   e222c:	f7ff f8ac 	bl	e1388 <__aeabi_dcmplt>
   e2230:	b940      	cbnz	r0, e2244 <_strtod_r+0x9a4>
   e2232:	4630      	mov	r0, r6
   e2234:	4639      	mov	r1, r7
   e2236:	2200      	movs	r2, #0
   e2238:	4b94      	ldr	r3, [pc, #592]	; (e248c <_strtod_r+0xbec>)
   e223a:	f7fe fe33 	bl	e0ea4 <__aeabi_dmul>
   e223e:	4606      	mov	r6, r0
   e2240:	460f      	mov	r7, r1
   e2242:	e001      	b.n	e2248 <_strtod_r+0x9a8>
   e2244:	4f91      	ldr	r7, [pc, #580]	; (e248c <_strtod_r+0xbec>)
   e2246:	2600      	movs	r6, #0
   e2248:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e224c:	9614      	str	r6, [sp, #80]	; 0x50
   e224e:	9315      	str	r3, [sp, #84]	; 0x54
   e2250:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e2254:	e012      	b.n	e227c <_strtod_r+0x9dc>
   e2256:	4b8d      	ldr	r3, [pc, #564]	; (e248c <_strtod_r+0xbec>)
   e2258:	4630      	mov	r0, r6
   e225a:	4639      	mov	r1, r7
   e225c:	2200      	movs	r2, #0
   e225e:	f7fe fe21 	bl	e0ea4 <__aeabi_dmul>
   e2262:	9b07      	ldr	r3, [sp, #28]
   e2264:	4606      	mov	r6, r0
   e2266:	460f      	mov	r7, r1
   e2268:	b923      	cbnz	r3, e2274 <_strtod_r+0x9d4>
   e226a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e226e:	900e      	str	r0, [sp, #56]	; 0x38
   e2270:	930f      	str	r3, [sp, #60]	; 0x3c
   e2272:	e001      	b.n	e2278 <_strtod_r+0x9d8>
   e2274:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e2278:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e227c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2280:	0d1b      	lsrs	r3, r3, #20
   e2282:	051b      	lsls	r3, r3, #20
   e2284:	9306      	str	r3, [sp, #24]
   e2286:	9a06      	ldr	r2, [sp, #24]
   e2288:	4b81      	ldr	r3, [pc, #516]	; (e2490 <_strtod_r+0xbf0>)
   e228a:	429a      	cmp	r2, r3
   e228c:	d12b      	bne.n	e22e6 <_strtod_r+0xa46>
   e228e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2292:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2296:	ec4b ab10 	vmov	d0, sl, fp
   e229a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e229e:	f001 fa83 	bl	e37a8 <__ulp>
   e22a2:	4640      	mov	r0, r8
   e22a4:	ec53 2b10 	vmov	r2, r3, d0
   e22a8:	4649      	mov	r1, r9
   e22aa:	f7fe fdfb 	bl	e0ea4 <__aeabi_dmul>
   e22ae:	4652      	mov	r2, sl
   e22b0:	465b      	mov	r3, fp
   e22b2:	f7fe fc45 	bl	e0b40 <__adddf3>
   e22b6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e22ba:	0d1b      	lsrs	r3, r3, #20
   e22bc:	4a75      	ldr	r2, [pc, #468]	; (e2494 <_strtod_r+0xbf4>)
   e22be:	051b      	lsls	r3, r3, #20
   e22c0:	4293      	cmp	r3, r2
   e22c2:	4682      	mov	sl, r0
   e22c4:	d90c      	bls.n	e22e0 <_strtod_r+0xa40>
   e22c6:	4b74      	ldr	r3, [pc, #464]	; (e2498 <_strtod_r+0xbf8>)
   e22c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e22ca:	429a      	cmp	r2, r3
   e22cc:	d103      	bne.n	e22d6 <_strtod_r+0xa36>
   e22ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e22d0:	3301      	adds	r3, #1
   e22d2:	f43f ad2c 	beq.w	e1d2e <_strtod_r+0x48e>
   e22d6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e2498 <_strtod_r+0xbf8>
   e22da:	f04f 3aff 	mov.w	sl, #4294967295
   e22de:	e072      	b.n	e23c6 <_strtod_r+0xb26>
   e22e0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e22e4:	e038      	b.n	e2358 <_strtod_r+0xab8>
   e22e6:	9b03      	ldr	r3, [sp, #12]
   e22e8:	b333      	cbz	r3, e2338 <_strtod_r+0xa98>
   e22ea:	9b06      	ldr	r3, [sp, #24]
   e22ec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e22f0:	d822      	bhi.n	e2338 <_strtod_r+0xa98>
   e22f2:	a35d      	add	r3, pc, #372	; (adr r3, e2468 <_strtod_r+0xbc8>)
   e22f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e22f8:	4630      	mov	r0, r6
   e22fa:	4639      	mov	r1, r7
   e22fc:	f7ff f84e 	bl	e139c <__aeabi_dcmple>
   e2300:	b1a8      	cbz	r0, e232e <_strtod_r+0xa8e>
   e2302:	4639      	mov	r1, r7
   e2304:	4630      	mov	r0, r6
   e2306:	f7ff f88f 	bl	e1428 <__aeabi_d2uiz>
   e230a:	2800      	cmp	r0, #0
   e230c:	bf08      	it	eq
   e230e:	2001      	moveq	r0, #1
   e2310:	f7fe fd52 	bl	e0db8 <__aeabi_ui2d>
   e2314:	9b07      	ldr	r3, [sp, #28]
   e2316:	4606      	mov	r6, r0
   e2318:	460f      	mov	r7, r1
   e231a:	b923      	cbnz	r3, e2326 <_strtod_r+0xa86>
   e231c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2320:	9010      	str	r0, [sp, #64]	; 0x40
   e2322:	9311      	str	r3, [sp, #68]	; 0x44
   e2324:	e001      	b.n	e232a <_strtod_r+0xa8a>
   e2326:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e232a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e232e:	9a06      	ldr	r2, [sp, #24]
   e2330:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e2334:	ebc2 0903 	rsb	r9, r2, r3
   e2338:	ed9d 0b08 	vldr	d0, [sp, #32]
   e233c:	f001 fa34 	bl	e37a8 <__ulp>
   e2340:	4640      	mov	r0, r8
   e2342:	ec53 2b10 	vmov	r2, r3, d0
   e2346:	4649      	mov	r1, r9
   e2348:	f7fe fdac 	bl	e0ea4 <__aeabi_dmul>
   e234c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2350:	f7fe fbf6 	bl	e0b40 <__adddf3>
   e2354:	4682      	mov	sl, r0
   e2356:	468b      	mov	fp, r1
   e2358:	9b03      	ldr	r3, [sp, #12]
   e235a:	bba3      	cbnz	r3, e23c6 <_strtod_r+0xb26>
   e235c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2360:	0d1b      	lsrs	r3, r3, #20
   e2362:	9a06      	ldr	r2, [sp, #24]
   e2364:	051b      	lsls	r3, r3, #20
   e2366:	429a      	cmp	r2, r3
   e2368:	46d8      	mov	r8, fp
   e236a:	d12c      	bne.n	e23c6 <_strtod_r+0xb26>
   e236c:	4639      	mov	r1, r7
   e236e:	4630      	mov	r0, r6
   e2370:	f7ff f832 	bl	e13d8 <__aeabi_d2iz>
   e2374:	f7fe fd30 	bl	e0dd8 <__aeabi_i2d>
   e2378:	460b      	mov	r3, r1
   e237a:	4602      	mov	r2, r0
   e237c:	4639      	mov	r1, r7
   e237e:	4630      	mov	r0, r6
   e2380:	f7fe fbdc 	bl	e0b3c <__aeabi_dsub>
   e2384:	9b07      	ldr	r3, [sp, #28]
   e2386:	4606      	mov	r6, r0
   e2388:	460f      	mov	r7, r1
   e238a:	b92b      	cbnz	r3, e2398 <_strtod_r+0xaf8>
   e238c:	f1ba 0f00 	cmp.w	sl, #0
   e2390:	d102      	bne.n	e2398 <_strtod_r+0xaf8>
   e2392:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2396:	b183      	cbz	r3, e23ba <_strtod_r+0xb1a>
   e2398:	a335      	add	r3, pc, #212	; (adr r3, e2470 <_strtod_r+0xbd0>)
   e239a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e239e:	4630      	mov	r0, r6
   e23a0:	4639      	mov	r1, r7
   e23a2:	f7fe fff1 	bl	e1388 <__aeabi_dcmplt>
   e23a6:	2800      	cmp	r0, #0
   e23a8:	d131      	bne.n	e240e <_strtod_r+0xb6e>
   e23aa:	a333      	add	r3, pc, #204	; (adr r3, e2478 <_strtod_r+0xbd8>)
   e23ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23b0:	4630      	mov	r0, r6
   e23b2:	4639      	mov	r1, r7
   e23b4:	f7ff f806 	bl	e13c4 <__aeabi_dcmpgt>
   e23b8:	e004      	b.n	e23c4 <_strtod_r+0xb24>
   e23ba:	a331      	add	r3, pc, #196	; (adr r3, e2480 <_strtod_r+0xbe0>)
   e23bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e23c0:	f7fe ffe2 	bl	e1388 <__aeabi_dcmplt>
   e23c4:	bb18      	cbnz	r0, e240e <_strtod_r+0xb6e>
   e23c6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e23c8:	9802      	ldr	r0, [sp, #8]
   e23ca:	f000 ff5c 	bl	e3286 <_Bfree>
   e23ce:	9904      	ldr	r1, [sp, #16]
   e23d0:	9802      	ldr	r0, [sp, #8]
   e23d2:	f000 ff58 	bl	e3286 <_Bfree>
   e23d6:	4629      	mov	r1, r5
   e23d8:	9802      	ldr	r0, [sp, #8]
   e23da:	f000 ff54 	bl	e3286 <_Bfree>
   e23de:	4621      	mov	r1, r4
   e23e0:	9802      	ldr	r0, [sp, #8]
   e23e2:	f000 ff50 	bl	e3286 <_Bfree>
   e23e6:	e56d      	b.n	e1ec4 <_strtod_r+0x624>
   e23e8:	9b03      	ldr	r3, [sp, #12]
   e23ea:	b183      	cbz	r3, e240e <_strtod_r+0xb6e>
   e23ec:	4b2b      	ldr	r3, [pc, #172]	; (e249c <_strtod_r+0xbfc>)
   e23ee:	930b      	str	r3, [sp, #44]	; 0x2c
   e23f0:	2300      	movs	r3, #0
   e23f2:	930a      	str	r3, [sp, #40]	; 0x28
   e23f4:	4650      	mov	r0, sl
   e23f6:	4659      	mov	r1, fp
   e23f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e23fc:	f7fe fd52 	bl	e0ea4 <__aeabi_dmul>
   e2400:	4682      	mov	sl, r0
   e2402:	468b      	mov	fp, r1
   e2404:	b919      	cbnz	r1, e240e <_strtod_r+0xb6e>
   e2406:	b910      	cbnz	r0, e240e <_strtod_r+0xb6e>
   e2408:	9a02      	ldr	r2, [sp, #8]
   e240a:	2322      	movs	r3, #34	; 0x22
   e240c:	6013      	str	r3, [r2, #0]
   e240e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2410:	9802      	ldr	r0, [sp, #8]
   e2412:	f000 ff38 	bl	e3286 <_Bfree>
   e2416:	9904      	ldr	r1, [sp, #16]
   e2418:	9802      	ldr	r0, [sp, #8]
   e241a:	f000 ff34 	bl	e3286 <_Bfree>
   e241e:	4629      	mov	r1, r5
   e2420:	9802      	ldr	r0, [sp, #8]
   e2422:	f000 ff30 	bl	e3286 <_Bfree>
   e2426:	9905      	ldr	r1, [sp, #20]
   e2428:	9802      	ldr	r0, [sp, #8]
   e242a:	f000 ff2c 	bl	e3286 <_Bfree>
   e242e:	4621      	mov	r1, r4
   e2430:	9802      	ldr	r0, [sp, #8]
   e2432:	f000 ff28 	bl	e3286 <_Bfree>
   e2436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2438:	b113      	cbz	r3, e2440 <_strtod_r+0xba0>
   e243a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e243c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e243e:	6013      	str	r3, [r2, #0]
   e2440:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2442:	b11b      	cbz	r3, e244c <_strtod_r+0xbac>
   e2444:	4652      	mov	r2, sl
   e2446:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e244a:	e007      	b.n	e245c <_strtod_r+0xbbc>
   e244c:	4652      	mov	r2, sl
   e244e:	465b      	mov	r3, fp
   e2450:	e004      	b.n	e245c <_strtod_r+0xbbc>
   e2452:	2500      	movs	r5, #0
   e2454:	462a      	mov	r2, r5
   e2456:	2101      	movs	r1, #1
   e2458:	f7ff bb41 	b.w	e1ade <_strtod_r+0x23e>
   e245c:	ec43 2b10 	vmov	d0, r2, r3
   e2460:	b01d      	add	sp, #116	; 0x74
   e2462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2466:	bf00      	nop
   e2468:	ffc00000 	.word	0xffc00000
   e246c:	41dfffff 	.word	0x41dfffff
   e2470:	94a03595 	.word	0x94a03595
   e2474:	3fdfffff 	.word	0x3fdfffff
   e2478:	35afe535 	.word	0x35afe535
   e247c:	3fe00000 	.word	0x3fe00000
   e2480:	94a03595 	.word	0x94a03595
   e2484:	3fcfffff 	.word	0x3fcfffff
   e2488:	3ff00000 	.word	0x3ff00000
   e248c:	3fe00000 	.word	0x3fe00000
   e2490:	7fe00000 	.word	0x7fe00000
   e2494:	7c9fffff 	.word	0x7c9fffff
   e2498:	7fefffff 	.word	0x7fefffff
   e249c:	39500000 	.word	0x39500000

000e24a0 <strtod>:
   e24a0:	4b02      	ldr	r3, [pc, #8]	; (e24ac <strtod+0xc>)
   e24a2:	460a      	mov	r2, r1
   e24a4:	4601      	mov	r1, r0
   e24a6:	6818      	ldr	r0, [r3, #0]
   e24a8:	f7ff b9fa 	b.w	e18a0 <_strtod_r>
   e24ac:	2003e258 	.word	0x2003e258

000e24b0 <_strtoul_r>:
   e24b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e24b4:	4680      	mov	r8, r0
   e24b6:	483c      	ldr	r0, [pc, #240]	; (e25a8 <_strtoul_r+0xf8>)
   e24b8:	f8d0 9000 	ldr.w	r9, [r0]
   e24bc:	460e      	mov	r6, r1
   e24be:	4635      	mov	r5, r6
   e24c0:	f815 4b01 	ldrb.w	r4, [r5], #1
   e24c4:	eb09 0004 	add.w	r0, r9, r4
   e24c8:	7840      	ldrb	r0, [r0, #1]
   e24ca:	f000 0008 	and.w	r0, r0, #8
   e24ce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e24d2:	b108      	cbz	r0, e24d8 <_strtoul_r+0x28>
   e24d4:	462e      	mov	r6, r5
   e24d6:	e7f2      	b.n	e24be <_strtoul_r+0xe>
   e24d8:	2c2d      	cmp	r4, #45	; 0x2d
   e24da:	d103      	bne.n	e24e4 <_strtoul_r+0x34>
   e24dc:	1cb5      	adds	r5, r6, #2
   e24de:	7874      	ldrb	r4, [r6, #1]
   e24e0:	2701      	movs	r7, #1
   e24e2:	e003      	b.n	e24ec <_strtoul_r+0x3c>
   e24e4:	2c2b      	cmp	r4, #43	; 0x2b
   e24e6:	bf04      	itt	eq
   e24e8:	7874      	ldrbeq	r4, [r6, #1]
   e24ea:	1cb5      	addeq	r5, r6, #2
   e24ec:	b113      	cbz	r3, e24f4 <_strtoul_r+0x44>
   e24ee:	2b10      	cmp	r3, #16
   e24f0:	d10a      	bne.n	e2508 <_strtoul_r+0x58>
   e24f2:	e053      	b.n	e259c <_strtoul_r+0xec>
   e24f4:	2c30      	cmp	r4, #48	; 0x30
   e24f6:	d14f      	bne.n	e2598 <_strtoul_r+0xe8>
   e24f8:	7828      	ldrb	r0, [r5, #0]
   e24fa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e24fe:	2858      	cmp	r0, #88	; 0x58
   e2500:	d145      	bne.n	e258e <_strtoul_r+0xde>
   e2502:	786c      	ldrb	r4, [r5, #1]
   e2504:	2310      	movs	r3, #16
   e2506:	3502      	adds	r5, #2
   e2508:	f04f 3cff 	mov.w	ip, #4294967295
   e250c:	2600      	movs	r6, #0
   e250e:	fbbc fcf3 	udiv	ip, ip, r3
   e2512:	fb03 fa0c 	mul.w	sl, r3, ip
   e2516:	ea6f 0a0a 	mvn.w	sl, sl
   e251a:	4630      	mov	r0, r6
   e251c:	eb09 0e04 	add.w	lr, r9, r4
   e2520:	f89e e001 	ldrb.w	lr, [lr, #1]
   e2524:	f01e 0f04 	tst.w	lr, #4
   e2528:	d001      	beq.n	e252e <_strtoul_r+0x7e>
   e252a:	3c30      	subs	r4, #48	; 0x30
   e252c:	e00b      	b.n	e2546 <_strtoul_r+0x96>
   e252e:	f01e 0e03 	ands.w	lr, lr, #3
   e2532:	d01a      	beq.n	e256a <_strtoul_r+0xba>
   e2534:	f1be 0f01 	cmp.w	lr, #1
   e2538:	bf0c      	ite	eq
   e253a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e253e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e2542:	ebce 0404 	rsb	r4, lr, r4
   e2546:	42a3      	cmp	r3, r4
   e2548:	dd0f      	ble.n	e256a <_strtoul_r+0xba>
   e254a:	2e00      	cmp	r6, #0
   e254c:	db08      	blt.n	e2560 <_strtoul_r+0xb0>
   e254e:	4560      	cmp	r0, ip
   e2550:	d806      	bhi.n	e2560 <_strtoul_r+0xb0>
   e2552:	d101      	bne.n	e2558 <_strtoul_r+0xa8>
   e2554:	4554      	cmp	r4, sl
   e2556:	dc03      	bgt.n	e2560 <_strtoul_r+0xb0>
   e2558:	fb03 4000 	mla	r0, r3, r0, r4
   e255c:	2601      	movs	r6, #1
   e255e:	e001      	b.n	e2564 <_strtoul_r+0xb4>
   e2560:	f04f 36ff 	mov.w	r6, #4294967295
   e2564:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2568:	e7d8      	b.n	e251c <_strtoul_r+0x6c>
   e256a:	2e00      	cmp	r6, #0
   e256c:	da07      	bge.n	e257e <_strtoul_r+0xce>
   e256e:	2322      	movs	r3, #34	; 0x22
   e2570:	f8c8 3000 	str.w	r3, [r8]
   e2574:	f04f 30ff 	mov.w	r0, #4294967295
   e2578:	b92a      	cbnz	r2, e2586 <_strtoul_r+0xd6>
   e257a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e257e:	b107      	cbz	r7, e2582 <_strtoul_r+0xd2>
   e2580:	4240      	negs	r0, r0
   e2582:	b172      	cbz	r2, e25a2 <_strtoul_r+0xf2>
   e2584:	b106      	cbz	r6, e2588 <_strtoul_r+0xd8>
   e2586:	1e69      	subs	r1, r5, #1
   e2588:	6011      	str	r1, [r2, #0]
   e258a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e258e:	2430      	movs	r4, #48	; 0x30
   e2590:	2b00      	cmp	r3, #0
   e2592:	d1b9      	bne.n	e2508 <_strtoul_r+0x58>
   e2594:	2308      	movs	r3, #8
   e2596:	e7b7      	b.n	e2508 <_strtoul_r+0x58>
   e2598:	230a      	movs	r3, #10
   e259a:	e7b5      	b.n	e2508 <_strtoul_r+0x58>
   e259c:	2c30      	cmp	r4, #48	; 0x30
   e259e:	d0ab      	beq.n	e24f8 <_strtoul_r+0x48>
   e25a0:	e7b2      	b.n	e2508 <_strtoul_r+0x58>
   e25a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e25a6:	bf00      	nop
   e25a8:	2003e1f4 	.word	0x2003e1f4

000e25ac <strtoul>:
   e25ac:	4613      	mov	r3, r2
   e25ae:	460a      	mov	r2, r1
   e25b0:	4601      	mov	r1, r0
   e25b2:	4802      	ldr	r0, [pc, #8]	; (e25bc <strtoul+0x10>)
   e25b4:	6800      	ldr	r0, [r0, #0]
   e25b6:	f7ff bf7b 	b.w	e24b0 <_strtoul_r>
   e25ba:	bf00      	nop
   e25bc:	2003e258 	.word	0x2003e258

000e25c0 <__tzcalc_limits>:
   e25c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e25c4:	4604      	mov	r4, r0
   e25c6:	f000 fd8d 	bl	e30e4 <__gettzinfo>
   e25ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e25ce:	429c      	cmp	r4, r3
   e25d0:	f340 8096 	ble.w	e2700 <__tzcalc_limits+0x140>
   e25d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e25d8:	18e3      	adds	r3, r4, r3
   e25da:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e25de:	109b      	asrs	r3, r3, #2
   e25e0:	f240 156d 	movw	r5, #365	; 0x16d
   e25e4:	fb05 3502 	mla	r5, r5, r2, r3
   e25e8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e25ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e25f0:	fb92 f3f3 	sdiv	r3, r2, r3
   e25f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e25f8:	442b      	add	r3, r5
   e25fa:	18a5      	adds	r5, r4, r2
   e25fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2600:	fb95 f5f2 	sdiv	r5, r5, r2
   e2604:	441d      	add	r5, r3
   e2606:	2364      	movs	r3, #100	; 0x64
   e2608:	fb94 f7f2 	sdiv	r7, r4, r2
   e260c:	fb94 f6f3 	sdiv	r6, r4, r3
   e2610:	fb02 4717 	mls	r7, r2, r7, r4
   e2614:	fb03 4616 	mls	r6, r3, r6, r4
   e2618:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e261c:	fab7 fe87 	clz	lr, r7
   e2620:	9301      	str	r3, [sp, #4]
   e2622:	f004 0303 	and.w	r3, r4, #3
   e2626:	6044      	str	r4, [r0, #4]
   e2628:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e262c:	4601      	mov	r1, r0
   e262e:	9300      	str	r3, [sp, #0]
   e2630:	f04f 0c07 	mov.w	ip, #7
   e2634:	7a0b      	ldrb	r3, [r1, #8]
   e2636:	2b4a      	cmp	r3, #74	; 0x4a
   e2638:	d10e      	bne.n	e2658 <__tzcalc_limits+0x98>
   e263a:	694b      	ldr	r3, [r1, #20]
   e263c:	9a00      	ldr	r2, [sp, #0]
   e263e:	18ec      	adds	r4, r5, r3
   e2640:	b902      	cbnz	r2, e2644 <__tzcalc_limits+0x84>
   e2642:	b906      	cbnz	r6, e2646 <__tzcalc_limits+0x86>
   e2644:	b927      	cbnz	r7, e2650 <__tzcalc_limits+0x90>
   e2646:	2b3b      	cmp	r3, #59	; 0x3b
   e2648:	bfd4      	ite	le
   e264a:	2300      	movle	r3, #0
   e264c:	2301      	movgt	r3, #1
   e264e:	e000      	b.n	e2652 <__tzcalc_limits+0x92>
   e2650:	2300      	movs	r3, #0
   e2652:	4423      	add	r3, r4
   e2654:	3b01      	subs	r3, #1
   e2656:	e03f      	b.n	e26d8 <__tzcalc_limits+0x118>
   e2658:	2b44      	cmp	r3, #68	; 0x44
   e265a:	d102      	bne.n	e2662 <__tzcalc_limits+0xa2>
   e265c:	694b      	ldr	r3, [r1, #20]
   e265e:	442b      	add	r3, r5
   e2660:	e03a      	b.n	e26d8 <__tzcalc_limits+0x118>
   e2662:	9b00      	ldr	r3, [sp, #0]
   e2664:	b92b      	cbnz	r3, e2672 <__tzcalc_limits+0xb2>
   e2666:	2e00      	cmp	r6, #0
   e2668:	bf0c      	ite	eq
   e266a:	46f0      	moveq	r8, lr
   e266c:	f04f 0801 	movne.w	r8, #1
   e2670:	e000      	b.n	e2674 <__tzcalc_limits+0xb4>
   e2672:	46f0      	mov	r8, lr
   e2674:	4b24      	ldr	r3, [pc, #144]	; (e2708 <__tzcalc_limits+0x148>)
   e2676:	68cc      	ldr	r4, [r1, #12]
   e2678:	2230      	movs	r2, #48	; 0x30
   e267a:	fb02 3808 	mla	r8, r2, r8, r3
   e267e:	f1a8 0a04 	sub.w	sl, r8, #4
   e2682:	46a9      	mov	r9, r5
   e2684:	2301      	movs	r3, #1
   e2686:	42a3      	cmp	r3, r4
   e2688:	da04      	bge.n	e2694 <__tzcalc_limits+0xd4>
   e268a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e268e:	3301      	adds	r3, #1
   e2690:	44d9      	add	r9, fp
   e2692:	e7f8      	b.n	e2686 <__tzcalc_limits+0xc6>
   e2694:	f109 0304 	add.w	r3, r9, #4
   e2698:	fb93 fbfc 	sdiv	fp, r3, ip
   e269c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e26a0:	2c01      	cmp	r4, #1
   e26a2:	ebca 0a03 	rsb	sl, sl, r3
   e26a6:	694b      	ldr	r3, [r1, #20]
   e26a8:	bfb8      	it	lt
   e26aa:	2401      	movlt	r4, #1
   e26ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e26b0:	ebb3 0a0a 	subs.w	sl, r3, sl
   e26b4:	690b      	ldr	r3, [r1, #16]
   e26b6:	f104 34ff 	add.w	r4, r4, #4294967295
   e26ba:	f103 33ff 	add.w	r3, r3, #4294967295
   e26be:	bf48      	it	mi
   e26c0:	f10a 0a07 	addmi.w	sl, sl, #7
   e26c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e26c8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e26cc:	4453      	add	r3, sl
   e26ce:	42a3      	cmp	r3, r4
   e26d0:	db01      	blt.n	e26d6 <__tzcalc_limits+0x116>
   e26d2:	3b07      	subs	r3, #7
   e26d4:	e7fb      	b.n	e26ce <__tzcalc_limits+0x10e>
   e26d6:	444b      	add	r3, r9
   e26d8:	698c      	ldr	r4, [r1, #24]
   e26da:	4a0c      	ldr	r2, [pc, #48]	; (e270c <__tzcalc_limits+0x14c>)
   e26dc:	fb02 4303 	mla	r3, r2, r3, r4
   e26e0:	6a0c      	ldr	r4, [r1, #32]
   e26e2:	4423      	add	r3, r4
   e26e4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e26e8:	9b01      	ldr	r3, [sp, #4]
   e26ea:	4299      	cmp	r1, r3
   e26ec:	d1a2      	bne.n	e2634 <__tzcalc_limits+0x74>
   e26ee:	69c3      	ldr	r3, [r0, #28]
   e26f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e26f2:	4293      	cmp	r3, r2
   e26f4:	bfac      	ite	ge
   e26f6:	2300      	movge	r3, #0
   e26f8:	2301      	movlt	r3, #1
   e26fa:	6003      	str	r3, [r0, #0]
   e26fc:	2001      	movs	r0, #1
   e26fe:	e000      	b.n	e2702 <__tzcalc_limits+0x142>
   e2700:	2000      	movs	r0, #0
   e2702:	b003      	add	sp, #12
   e2704:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2708:	000e402c 	.word	0x000e402c
   e270c:	00015180 	.word	0x00015180

000e2710 <__tz_lock>:
   e2710:	4770      	bx	lr

000e2712 <__tz_unlock>:
   e2712:	4770      	bx	lr

000e2714 <_tzset_unlocked>:
   e2714:	4b01      	ldr	r3, [pc, #4]	; (e271c <_tzset_unlocked+0x8>)
   e2716:	6818      	ldr	r0, [r3, #0]
   e2718:	f000 b802 	b.w	e2720 <_tzset_unlocked_r>
   e271c:	2003e258 	.word	0x2003e258

000e2720 <_tzset_unlocked_r>:
   e2720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2724:	b08d      	sub	sp, #52	; 0x34
   e2726:	4607      	mov	r7, r0
   e2728:	f000 fcdc 	bl	e30e4 <__gettzinfo>
   e272c:	49b0      	ldr	r1, [pc, #704]	; (e29f0 <_tzset_unlocked_r+0x2d0>)
   e272e:	4eb1      	ldr	r6, [pc, #708]	; (e29f4 <_tzset_unlocked_r+0x2d4>)
   e2730:	4604      	mov	r4, r0
   e2732:	4638      	mov	r0, r7
   e2734:	f000 fcce 	bl	e30d4 <_getenv_r>
   e2738:	4605      	mov	r5, r0
   e273a:	b960      	cbnz	r0, e2756 <_tzset_unlocked_r+0x36>
   e273c:	4bae      	ldr	r3, [pc, #696]	; (e29f8 <_tzset_unlocked_r+0x2d8>)
   e273e:	4aaf      	ldr	r2, [pc, #700]	; (e29fc <_tzset_unlocked_r+0x2dc>)
   e2740:	6018      	str	r0, [r3, #0]
   e2742:	4baf      	ldr	r3, [pc, #700]	; (e2a00 <_tzset_unlocked_r+0x2e0>)
   e2744:	6018      	str	r0, [r3, #0]
   e2746:	4baf      	ldr	r3, [pc, #700]	; (e2a04 <_tzset_unlocked_r+0x2e4>)
   e2748:	6830      	ldr	r0, [r6, #0]
   e274a:	601a      	str	r2, [r3, #0]
   e274c:	605a      	str	r2, [r3, #4]
   e274e:	f7fc f80f 	bl	de770 <free>
   e2752:	6035      	str	r5, [r6, #0]
   e2754:	e148      	b.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e2756:	6831      	ldr	r1, [r6, #0]
   e2758:	b979      	cbnz	r1, e277a <_tzset_unlocked_r+0x5a>
   e275a:	6830      	ldr	r0, [r6, #0]
   e275c:	f7fc f808 	bl	de770 <free>
   e2760:	4628      	mov	r0, r5
   e2762:	f7ff f856 	bl	e1812 <strlen>
   e2766:	1c41      	adds	r1, r0, #1
   e2768:	4638      	mov	r0, r7
   e276a:	f7fc f821 	bl	de7b0 <_malloc_r>
   e276e:	6030      	str	r0, [r6, #0]
   e2770:	b148      	cbz	r0, e2786 <_tzset_unlocked_r+0x66>
   e2772:	4629      	mov	r1, r5
   e2774:	f7ff f82a 	bl	e17cc <strcpy>
   e2778:	e005      	b.n	e2786 <_tzset_unlocked_r+0x66>
   e277a:	f7ff f81d 	bl	e17b8 <strcmp>
   e277e:	2800      	cmp	r0, #0
   e2780:	f000 8132 	beq.w	e29e8 <_tzset_unlocked_r+0x2c8>
   e2784:	e7e9      	b.n	e275a <_tzset_unlocked_r+0x3a>
   e2786:	782b      	ldrb	r3, [r5, #0]
   e2788:	4a9f      	ldr	r2, [pc, #636]	; (e2a08 <_tzset_unlocked_r+0x2e8>)
   e278a:	49a0      	ldr	r1, [pc, #640]	; (e2a0c <_tzset_unlocked_r+0x2ec>)
   e278c:	2b3a      	cmp	r3, #58	; 0x3a
   e278e:	bf08      	it	eq
   e2790:	3501      	addeq	r5, #1
   e2792:	ae0a      	add	r6, sp, #40	; 0x28
   e2794:	4633      	mov	r3, r6
   e2796:	4628      	mov	r0, r5
   e2798:	f7fb fffa 	bl	de790 <siscanf>
   e279c:	2800      	cmp	r0, #0
   e279e:	f340 8123 	ble.w	e29e8 <_tzset_unlocked_r+0x2c8>
   e27a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e27a4:	18ef      	adds	r7, r5, r3
   e27a6:	5ceb      	ldrb	r3, [r5, r3]
   e27a8:	2b2d      	cmp	r3, #45	; 0x2d
   e27aa:	d103      	bne.n	e27b4 <_tzset_unlocked_r+0x94>
   e27ac:	3701      	adds	r7, #1
   e27ae:	f04f 35ff 	mov.w	r5, #4294967295
   e27b2:	e003      	b.n	e27bc <_tzset_unlocked_r+0x9c>
   e27b4:	2b2b      	cmp	r3, #43	; 0x2b
   e27b6:	bf08      	it	eq
   e27b8:	3701      	addeq	r7, #1
   e27ba:	2501      	movs	r5, #1
   e27bc:	f10d 0a20 	add.w	sl, sp, #32
   e27c0:	f10d 0b1e 	add.w	fp, sp, #30
   e27c4:	f04f 0800 	mov.w	r8, #0
   e27c8:	9603      	str	r6, [sp, #12]
   e27ca:	f8cd a008 	str.w	sl, [sp, #8]
   e27ce:	9601      	str	r6, [sp, #4]
   e27d0:	f8cd b000 	str.w	fp, [sp]
   e27d4:	4633      	mov	r3, r6
   e27d6:	aa07      	add	r2, sp, #28
   e27d8:	498d      	ldr	r1, [pc, #564]	; (e2a10 <_tzset_unlocked_r+0x2f0>)
   e27da:	f8ad 801e 	strh.w	r8, [sp, #30]
   e27de:	4638      	mov	r0, r7
   e27e0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e27e4:	f7fb ffd4 	bl	de790 <siscanf>
   e27e8:	4540      	cmp	r0, r8
   e27ea:	f340 80fd 	ble.w	e29e8 <_tzset_unlocked_r+0x2c8>
   e27ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e27f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e27f6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e2a1c <_tzset_unlocked_r+0x2fc>
   e27fa:	213c      	movs	r1, #60	; 0x3c
   e27fc:	fb01 3302 	mla	r3, r1, r2, r3
   e2800:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e2804:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e2808:	fb01 3302 	mla	r3, r1, r2, r3
   e280c:	435d      	muls	r5, r3
   e280e:	6225      	str	r5, [r4, #32]
   e2810:	4d7c      	ldr	r5, [pc, #496]	; (e2a04 <_tzset_unlocked_r+0x2e4>)
   e2812:	4b7d      	ldr	r3, [pc, #500]	; (e2a08 <_tzset_unlocked_r+0x2e8>)
   e2814:	602b      	str	r3, [r5, #0]
   e2816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2818:	497c      	ldr	r1, [pc, #496]	; (e2a0c <_tzset_unlocked_r+0x2ec>)
   e281a:	441f      	add	r7, r3
   e281c:	464a      	mov	r2, r9
   e281e:	4633      	mov	r3, r6
   e2820:	4638      	mov	r0, r7
   e2822:	f7fb ffb5 	bl	de790 <siscanf>
   e2826:	4540      	cmp	r0, r8
   e2828:	dc08      	bgt.n	e283c <_tzset_unlocked_r+0x11c>
   e282a:	682b      	ldr	r3, [r5, #0]
   e282c:	606b      	str	r3, [r5, #4]
   e282e:	4b72      	ldr	r3, [pc, #456]	; (e29f8 <_tzset_unlocked_r+0x2d8>)
   e2830:	6a22      	ldr	r2, [r4, #32]
   e2832:	601a      	str	r2, [r3, #0]
   e2834:	4b72      	ldr	r3, [pc, #456]	; (e2a00 <_tzset_unlocked_r+0x2e0>)
   e2836:	f8c3 8000 	str.w	r8, [r3]
   e283a:	e0d5      	b.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e283c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e283e:	f8c5 9004 	str.w	r9, [r5, #4]
   e2842:	18fd      	adds	r5, r7, r3
   e2844:	5cfb      	ldrb	r3, [r7, r3]
   e2846:	2b2d      	cmp	r3, #45	; 0x2d
   e2848:	d103      	bne.n	e2852 <_tzset_unlocked_r+0x132>
   e284a:	3501      	adds	r5, #1
   e284c:	f04f 37ff 	mov.w	r7, #4294967295
   e2850:	e003      	b.n	e285a <_tzset_unlocked_r+0x13a>
   e2852:	2b2b      	cmp	r3, #43	; 0x2b
   e2854:	bf08      	it	eq
   e2856:	3501      	addeq	r5, #1
   e2858:	2701      	movs	r7, #1
   e285a:	2300      	movs	r3, #0
   e285c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2860:	f8ad 301e 	strh.w	r3, [sp, #30]
   e2864:	f8ad 3020 	strh.w	r3, [sp, #32]
   e2868:	930a      	str	r3, [sp, #40]	; 0x28
   e286a:	9603      	str	r6, [sp, #12]
   e286c:	f8cd a008 	str.w	sl, [sp, #8]
   e2870:	9601      	str	r6, [sp, #4]
   e2872:	f8cd b000 	str.w	fp, [sp]
   e2876:	4633      	mov	r3, r6
   e2878:	aa07      	add	r2, sp, #28
   e287a:	4965      	ldr	r1, [pc, #404]	; (e2a10 <_tzset_unlocked_r+0x2f0>)
   e287c:	4628      	mov	r0, r5
   e287e:	f7fb ff87 	bl	de790 <siscanf>
   e2882:	2800      	cmp	r0, #0
   e2884:	dc04      	bgt.n	e2890 <_tzset_unlocked_r+0x170>
   e2886:	6a23      	ldr	r3, [r4, #32]
   e2888:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e288c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e288e:	e00e      	b.n	e28ae <_tzset_unlocked_r+0x18e>
   e2890:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e2894:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e2898:	213c      	movs	r1, #60	; 0x3c
   e289a:	fb01 3302 	mla	r3, r1, r2, r3
   e289e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e28a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e28a6:	fb01 3302 	mla	r3, r1, r2, r3
   e28aa:	435f      	muls	r7, r3
   e28ac:	63e7      	str	r7, [r4, #60]	; 0x3c
   e28ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e28b0:	4627      	mov	r7, r4
   e28b2:	441d      	add	r5, r3
   e28b4:	f04f 0900 	mov.w	r9, #0
   e28b8:	782b      	ldrb	r3, [r5, #0]
   e28ba:	2b2c      	cmp	r3, #44	; 0x2c
   e28bc:	bf08      	it	eq
   e28be:	3501      	addeq	r5, #1
   e28c0:	f895 8000 	ldrb.w	r8, [r5]
   e28c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e28c8:	d126      	bne.n	e2918 <_tzset_unlocked_r+0x1f8>
   e28ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e28ce:	9302      	str	r3, [sp, #8]
   e28d0:	ab09      	add	r3, sp, #36	; 0x24
   e28d2:	9300      	str	r3, [sp, #0]
   e28d4:	9603      	str	r6, [sp, #12]
   e28d6:	9601      	str	r6, [sp, #4]
   e28d8:	4633      	mov	r3, r6
   e28da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e28de:	494d      	ldr	r1, [pc, #308]	; (e2a14 <_tzset_unlocked_r+0x2f4>)
   e28e0:	4628      	mov	r0, r5
   e28e2:	f7fb ff55 	bl	de790 <siscanf>
   e28e6:	2803      	cmp	r0, #3
   e28e8:	d17e      	bne.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e28ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e28ee:	1e4b      	subs	r3, r1, #1
   e28f0:	2b0b      	cmp	r3, #11
   e28f2:	d879      	bhi.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e28f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e28f8:	1e53      	subs	r3, r2, #1
   e28fa:	2b04      	cmp	r3, #4
   e28fc:	d874      	bhi.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e28fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e2902:	2b06      	cmp	r3, #6
   e2904:	d870      	bhi.n	e29e8 <_tzset_unlocked_r+0x2c8>
   e2906:	f887 8008 	strb.w	r8, [r7, #8]
   e290a:	60f9      	str	r1, [r7, #12]
   e290c:	613a      	str	r2, [r7, #16]
   e290e:	617b      	str	r3, [r7, #20]
   e2910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2912:	eb05 0803 	add.w	r8, r5, r3
   e2916:	e02a      	b.n	e296e <_tzset_unlocked_r+0x24e>
   e2918:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e291c:	bf06      	itte	eq
   e291e:	3501      	addeq	r5, #1
   e2920:	4643      	moveq	r3, r8
   e2922:	2344      	movne	r3, #68	; 0x44
   e2924:	220a      	movs	r2, #10
   e2926:	a90b      	add	r1, sp, #44	; 0x2c
   e2928:	4628      	mov	r0, r5
   e292a:	9305      	str	r3, [sp, #20]
   e292c:	f7ff fe3e 	bl	e25ac <strtoul>
   e2930:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e2934:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e2938:	4545      	cmp	r5, r8
   e293a:	9b05      	ldr	r3, [sp, #20]
   e293c:	d114      	bne.n	e2968 <_tzset_unlocked_r+0x248>
   e293e:	234d      	movs	r3, #77	; 0x4d
   e2940:	f1b9 0f00 	cmp.w	r9, #0
   e2944:	d107      	bne.n	e2956 <_tzset_unlocked_r+0x236>
   e2946:	7223      	strb	r3, [r4, #8]
   e2948:	2303      	movs	r3, #3
   e294a:	60e3      	str	r3, [r4, #12]
   e294c:	2302      	movs	r3, #2
   e294e:	6123      	str	r3, [r4, #16]
   e2950:	f8c4 9014 	str.w	r9, [r4, #20]
   e2954:	e00b      	b.n	e296e <_tzset_unlocked_r+0x24e>
   e2956:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e295a:	230b      	movs	r3, #11
   e295c:	62a3      	str	r3, [r4, #40]	; 0x28
   e295e:	2301      	movs	r3, #1
   e2960:	62e3      	str	r3, [r4, #44]	; 0x2c
   e2962:	2300      	movs	r3, #0
   e2964:	6323      	str	r3, [r4, #48]	; 0x30
   e2966:	e002      	b.n	e296e <_tzset_unlocked_r+0x24e>
   e2968:	b280      	uxth	r0, r0
   e296a:	723b      	strb	r3, [r7, #8]
   e296c:	6178      	str	r0, [r7, #20]
   e296e:	2302      	movs	r3, #2
   e2970:	f8ad 301c 	strh.w	r3, [sp, #28]
   e2974:	2300      	movs	r3, #0
   e2976:	f8ad 301e 	strh.w	r3, [sp, #30]
   e297a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e297e:	930a      	str	r3, [sp, #40]	; 0x28
   e2980:	f898 3000 	ldrb.w	r3, [r8]
   e2984:	2b2f      	cmp	r3, #47	; 0x2f
   e2986:	d10b      	bne.n	e29a0 <_tzset_unlocked_r+0x280>
   e2988:	9603      	str	r6, [sp, #12]
   e298a:	f8cd a008 	str.w	sl, [sp, #8]
   e298e:	9601      	str	r6, [sp, #4]
   e2990:	f8cd b000 	str.w	fp, [sp]
   e2994:	4633      	mov	r3, r6
   e2996:	aa07      	add	r2, sp, #28
   e2998:	491f      	ldr	r1, [pc, #124]	; (e2a18 <_tzset_unlocked_r+0x2f8>)
   e299a:	4640      	mov	r0, r8
   e299c:	f7fb fef8 	bl	de790 <siscanf>
   e29a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e29a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e29a8:	213c      	movs	r1, #60	; 0x3c
   e29aa:	fb01 3302 	mla	r3, r1, r2, r3
   e29ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e29b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e29b6:	fb01 3302 	mla	r3, r1, r2, r3
   e29ba:	61bb      	str	r3, [r7, #24]
   e29bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e29be:	f109 0901 	add.w	r9, r9, #1
   e29c2:	f1b9 0f02 	cmp.w	r9, #2
   e29c6:	4445      	add	r5, r8
   e29c8:	f107 071c 	add.w	r7, r7, #28
   e29cc:	f47f af74 	bne.w	e28b8 <_tzset_unlocked_r+0x198>
   e29d0:	6860      	ldr	r0, [r4, #4]
   e29d2:	f7ff fdf5 	bl	e25c0 <__tzcalc_limits>
   e29d6:	4b08      	ldr	r3, [pc, #32]	; (e29f8 <_tzset_unlocked_r+0x2d8>)
   e29d8:	6a22      	ldr	r2, [r4, #32]
   e29da:	601a      	str	r2, [r3, #0]
   e29dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e29de:	1a9b      	subs	r3, r3, r2
   e29e0:	4a07      	ldr	r2, [pc, #28]	; (e2a00 <_tzset_unlocked_r+0x2e0>)
   e29e2:	bf18      	it	ne
   e29e4:	2301      	movne	r3, #1
   e29e6:	6013      	str	r3, [r2, #0]
   e29e8:	b00d      	add	sp, #52	; 0x34
   e29ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e29ee:	bf00      	nop
   e29f0:	000e40e8 	.word	0x000e40e8
   e29f4:	2003e7e0 	.word	0x2003e7e0
   e29f8:	2003e7e8 	.word	0x2003e7e8
   e29fc:	000e40eb 	.word	0x000e40eb
   e2a00:	2003e7e4 	.word	0x2003e7e4
   e2a04:	2003e294 	.word	0x2003e294
   e2a08:	2003e7d3 	.word	0x2003e7d3
   e2a0c:	000e40ef 	.word	0x000e40ef
   e2a10:	000e4112 	.word	0x000e4112
   e2a14:	000e40fe 	.word	0x000e40fe
   e2a18:	000e4111 	.word	0x000e4111
   e2a1c:	2003e7c8 	.word	0x2003e7c8

000e2a20 <rshift>:
   e2a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   e2a22:	6906      	ldr	r6, [r0, #16]
   e2a24:	114b      	asrs	r3, r1, #5
   e2a26:	42b3      	cmp	r3, r6
   e2a28:	f100 0514 	add.w	r5, r0, #20
   e2a2c:	da27      	bge.n	e2a7e <rshift+0x5e>
   e2a2e:	f011 011f 	ands.w	r1, r1, #31
   e2a32:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e2a36:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e2a3a:	d101      	bne.n	e2a40 <rshift+0x20>
   e2a3c:	4629      	mov	r1, r5
   e2a3e:	e016      	b.n	e2a6e <rshift+0x4e>
   e2a40:	1d14      	adds	r4, r2, #4
   e2a42:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e2a46:	f1c1 0e20 	rsb	lr, r1, #32
   e2a4a:	40ca      	lsrs	r2, r1
   e2a4c:	462b      	mov	r3, r5
   e2a4e:	42b4      	cmp	r4, r6
   e2a50:	d209      	bcs.n	e2a66 <rshift+0x46>
   e2a52:	6827      	ldr	r7, [r4, #0]
   e2a54:	fa07 f70e 	lsl.w	r7, r7, lr
   e2a58:	433a      	orrs	r2, r7
   e2a5a:	f843 2b04 	str.w	r2, [r3], #4
   e2a5e:	f854 2b04 	ldr.w	r2, [r4], #4
   e2a62:	40ca      	lsrs	r2, r1
   e2a64:	e7f3      	b.n	e2a4e <rshift+0x2e>
   e2a66:	601a      	str	r2, [r3, #0]
   e2a68:	b152      	cbz	r2, e2a80 <rshift+0x60>
   e2a6a:	3304      	adds	r3, #4
   e2a6c:	e008      	b.n	e2a80 <rshift+0x60>
   e2a6e:	42b2      	cmp	r2, r6
   e2a70:	460b      	mov	r3, r1
   e2a72:	d205      	bcs.n	e2a80 <rshift+0x60>
   e2a74:	f852 3b04 	ldr.w	r3, [r2], #4
   e2a78:	f841 3b04 	str.w	r3, [r1], #4
   e2a7c:	e7f7      	b.n	e2a6e <rshift+0x4e>
   e2a7e:	462b      	mov	r3, r5
   e2a80:	1b5b      	subs	r3, r3, r5
   e2a82:	109b      	asrs	r3, r3, #2
   e2a84:	6103      	str	r3, [r0, #16]
   e2a86:	b903      	cbnz	r3, e2a8a <rshift+0x6a>
   e2a88:	6143      	str	r3, [r0, #20]
   e2a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e2a8c <__hexdig_fun>:
   e2a8c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e2a90:	2b09      	cmp	r3, #9
   e2a92:	d801      	bhi.n	e2a98 <__hexdig_fun+0xc>
   e2a94:	3820      	subs	r0, #32
   e2a96:	e00a      	b.n	e2aae <__hexdig_fun+0x22>
   e2a98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e2a9c:	2b05      	cmp	r3, #5
   e2a9e:	d801      	bhi.n	e2aa4 <__hexdig_fun+0x18>
   e2aa0:	3847      	subs	r0, #71	; 0x47
   e2aa2:	e004      	b.n	e2aae <__hexdig_fun+0x22>
   e2aa4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e2aa8:	2b05      	cmp	r3, #5
   e2aaa:	d802      	bhi.n	e2ab2 <__hexdig_fun+0x26>
   e2aac:	3827      	subs	r0, #39	; 0x27
   e2aae:	b2c0      	uxtb	r0, r0
   e2ab0:	4770      	bx	lr
   e2ab2:	2000      	movs	r0, #0
   e2ab4:	4770      	bx	lr

000e2ab6 <__gethex>:
   e2ab6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2aba:	b08b      	sub	sp, #44	; 0x2c
   e2abc:	468a      	mov	sl, r1
   e2abe:	4690      	mov	r8, r2
   e2ac0:	9306      	str	r3, [sp, #24]
   e2ac2:	9002      	str	r0, [sp, #8]
   e2ac4:	f7fe fe2a 	bl	e171c <_localeconv_r>
   e2ac8:	6803      	ldr	r3, [r0, #0]
   e2aca:	9303      	str	r3, [sp, #12]
   e2acc:	4618      	mov	r0, r3
   e2ace:	f7fe fea0 	bl	e1812 <strlen>
   e2ad2:	9b03      	ldr	r3, [sp, #12]
   e2ad4:	9001      	str	r0, [sp, #4]
   e2ad6:	4403      	add	r3, r0
   e2ad8:	f04f 0b00 	mov.w	fp, #0
   e2adc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e2ae0:	9307      	str	r3, [sp, #28]
   e2ae2:	f8da 3000 	ldr.w	r3, [sl]
   e2ae6:	3302      	adds	r3, #2
   e2ae8:	461f      	mov	r7, r3
   e2aea:	f813 0b01 	ldrb.w	r0, [r3], #1
   e2aee:	2830      	cmp	r0, #48	; 0x30
   e2af0:	d102      	bne.n	e2af8 <__gethex+0x42>
   e2af2:	f10b 0b01 	add.w	fp, fp, #1
   e2af6:	e7f7      	b.n	e2ae8 <__gethex+0x32>
   e2af8:	f7ff ffc8 	bl	e2a8c <__hexdig_fun>
   e2afc:	4604      	mov	r4, r0
   e2afe:	b9e0      	cbnz	r0, e2b3a <__gethex+0x84>
   e2b00:	9a01      	ldr	r2, [sp, #4]
   e2b02:	9903      	ldr	r1, [sp, #12]
   e2b04:	4638      	mov	r0, r7
   e2b06:	f7fe fe8c 	bl	e1822 <strncmp>
   e2b0a:	2800      	cmp	r0, #0
   e2b0c:	d134      	bne.n	e2b78 <__gethex+0xc2>
   e2b0e:	9b01      	ldr	r3, [sp, #4]
   e2b10:	5cf8      	ldrb	r0, [r7, r3]
   e2b12:	18fe      	adds	r6, r7, r3
   e2b14:	f7ff ffba 	bl	e2a8c <__hexdig_fun>
   e2b18:	b380      	cbz	r0, e2b7c <__gethex+0xc6>
   e2b1a:	4633      	mov	r3, r6
   e2b1c:	7818      	ldrb	r0, [r3, #0]
   e2b1e:	2830      	cmp	r0, #48	; 0x30
   e2b20:	461f      	mov	r7, r3
   e2b22:	f103 0301 	add.w	r3, r3, #1
   e2b26:	d0f9      	beq.n	e2b1c <__gethex+0x66>
   e2b28:	f7ff ffb0 	bl	e2a8c <__hexdig_fun>
   e2b2c:	fab0 f580 	clz	r5, r0
   e2b30:	096d      	lsrs	r5, r5, #5
   e2b32:	4634      	mov	r4, r6
   e2b34:	f04f 0b01 	mov.w	fp, #1
   e2b38:	e001      	b.n	e2b3e <__gethex+0x88>
   e2b3a:	2500      	movs	r5, #0
   e2b3c:	462c      	mov	r4, r5
   e2b3e:	463a      	mov	r2, r7
   e2b40:	4616      	mov	r6, r2
   e2b42:	3201      	adds	r2, #1
   e2b44:	7830      	ldrb	r0, [r6, #0]
   e2b46:	f7ff ffa1 	bl	e2a8c <__hexdig_fun>
   e2b4a:	2800      	cmp	r0, #0
   e2b4c:	d1f8      	bne.n	e2b40 <__gethex+0x8a>
   e2b4e:	9a01      	ldr	r2, [sp, #4]
   e2b50:	9903      	ldr	r1, [sp, #12]
   e2b52:	4630      	mov	r0, r6
   e2b54:	f7fe fe65 	bl	e1822 <strncmp>
   e2b58:	b950      	cbnz	r0, e2b70 <__gethex+0xba>
   e2b5a:	b954      	cbnz	r4, e2b72 <__gethex+0xbc>
   e2b5c:	9b01      	ldr	r3, [sp, #4]
   e2b5e:	18f4      	adds	r4, r6, r3
   e2b60:	4622      	mov	r2, r4
   e2b62:	4616      	mov	r6, r2
   e2b64:	3201      	adds	r2, #1
   e2b66:	7830      	ldrb	r0, [r6, #0]
   e2b68:	f7ff ff90 	bl	e2a8c <__hexdig_fun>
   e2b6c:	2800      	cmp	r0, #0
   e2b6e:	d1f8      	bne.n	e2b62 <__gethex+0xac>
   e2b70:	b134      	cbz	r4, e2b80 <__gethex+0xca>
   e2b72:	1ba4      	subs	r4, r4, r6
   e2b74:	00a4      	lsls	r4, r4, #2
   e2b76:	e003      	b.n	e2b80 <__gethex+0xca>
   e2b78:	463e      	mov	r6, r7
   e2b7a:	e000      	b.n	e2b7e <__gethex+0xc8>
   e2b7c:	4604      	mov	r4, r0
   e2b7e:	2501      	movs	r5, #1
   e2b80:	7833      	ldrb	r3, [r6, #0]
   e2b82:	2b50      	cmp	r3, #80	; 0x50
   e2b84:	d001      	beq.n	e2b8a <__gethex+0xd4>
   e2b86:	2b70      	cmp	r3, #112	; 0x70
   e2b88:	d12a      	bne.n	e2be0 <__gethex+0x12a>
   e2b8a:	7873      	ldrb	r3, [r6, #1]
   e2b8c:	2b2b      	cmp	r3, #43	; 0x2b
   e2b8e:	d008      	beq.n	e2ba2 <__gethex+0xec>
   e2b90:	2b2d      	cmp	r3, #45	; 0x2d
   e2b92:	d003      	beq.n	e2b9c <__gethex+0xe6>
   e2b94:	1c71      	adds	r1, r6, #1
   e2b96:	f04f 0900 	mov.w	r9, #0
   e2b9a:	e005      	b.n	e2ba8 <__gethex+0xf2>
   e2b9c:	f04f 0901 	mov.w	r9, #1
   e2ba0:	e001      	b.n	e2ba6 <__gethex+0xf0>
   e2ba2:	f04f 0900 	mov.w	r9, #0
   e2ba6:	1cb1      	adds	r1, r6, #2
   e2ba8:	7808      	ldrb	r0, [r1, #0]
   e2baa:	f7ff ff6f 	bl	e2a8c <__hexdig_fun>
   e2bae:	1e43      	subs	r3, r0, #1
   e2bb0:	b2db      	uxtb	r3, r3
   e2bb2:	2b18      	cmp	r3, #24
   e2bb4:	d814      	bhi.n	e2be0 <__gethex+0x12a>
   e2bb6:	f1a0 0210 	sub.w	r2, r0, #16
   e2bba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e2bbe:	f7ff ff65 	bl	e2a8c <__hexdig_fun>
   e2bc2:	1e43      	subs	r3, r0, #1
   e2bc4:	b2db      	uxtb	r3, r3
   e2bc6:	2b18      	cmp	r3, #24
   e2bc8:	d804      	bhi.n	e2bd4 <__gethex+0x11e>
   e2bca:	230a      	movs	r3, #10
   e2bcc:	fb03 0202 	mla	r2, r3, r2, r0
   e2bd0:	3a10      	subs	r2, #16
   e2bd2:	e7f2      	b.n	e2bba <__gethex+0x104>
   e2bd4:	f1b9 0f00 	cmp.w	r9, #0
   e2bd8:	d000      	beq.n	e2bdc <__gethex+0x126>
   e2bda:	4252      	negs	r2, r2
   e2bdc:	4414      	add	r4, r2
   e2bde:	e000      	b.n	e2be2 <__gethex+0x12c>
   e2be0:	4631      	mov	r1, r6
   e2be2:	f8ca 1000 	str.w	r1, [sl]
   e2be6:	b12d      	cbz	r5, e2bf4 <__gethex+0x13e>
   e2be8:	f1bb 0f00 	cmp.w	fp, #0
   e2bec:	bf14      	ite	ne
   e2bee:	2000      	movne	r0, #0
   e2bf0:	2006      	moveq	r0, #6
   e2bf2:	e17c      	b.n	e2eee <__gethex+0x438>
   e2bf4:	1bf3      	subs	r3, r6, r7
   e2bf6:	3b01      	subs	r3, #1
   e2bf8:	4629      	mov	r1, r5
   e2bfa:	2b07      	cmp	r3, #7
   e2bfc:	dd02      	ble.n	e2c04 <__gethex+0x14e>
   e2bfe:	3101      	adds	r1, #1
   e2c00:	105b      	asrs	r3, r3, #1
   e2c02:	e7fa      	b.n	e2bfa <__gethex+0x144>
   e2c04:	9802      	ldr	r0, [sp, #8]
   e2c06:	f000 fb09 	bl	e321c <_Balloc>
   e2c0a:	9b01      	ldr	r3, [sp, #4]
   e2c0c:	f100 0a14 	add.w	sl, r0, #20
   e2c10:	f04f 0900 	mov.w	r9, #0
   e2c14:	f1c3 0301 	rsb	r3, r3, #1
   e2c18:	4605      	mov	r5, r0
   e2c1a:	f8cd a010 	str.w	sl, [sp, #16]
   e2c1e:	46cb      	mov	fp, r9
   e2c20:	9308      	str	r3, [sp, #32]
   e2c22:	42b7      	cmp	r7, r6
   e2c24:	d22f      	bcs.n	e2c86 <__gethex+0x1d0>
   e2c26:	1e73      	subs	r3, r6, #1
   e2c28:	9305      	str	r3, [sp, #20]
   e2c2a:	9a07      	ldr	r2, [sp, #28]
   e2c2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e2c30:	4293      	cmp	r3, r2
   e2c32:	d00b      	beq.n	e2c4c <__gethex+0x196>
   e2c34:	f1bb 0f20 	cmp.w	fp, #32
   e2c38:	d116      	bne.n	e2c68 <__gethex+0x1b2>
   e2c3a:	9b04      	ldr	r3, [sp, #16]
   e2c3c:	f8c3 9000 	str.w	r9, [r3]
   e2c40:	3304      	adds	r3, #4
   e2c42:	f04f 0900 	mov.w	r9, #0
   e2c46:	9304      	str	r3, [sp, #16]
   e2c48:	46cb      	mov	fp, r9
   e2c4a:	e00d      	b.n	e2c68 <__gethex+0x1b2>
   e2c4c:	9b05      	ldr	r3, [sp, #20]
   e2c4e:	9a08      	ldr	r2, [sp, #32]
   e2c50:	4413      	add	r3, r2
   e2c52:	429f      	cmp	r7, r3
   e2c54:	d8ee      	bhi.n	e2c34 <__gethex+0x17e>
   e2c56:	4618      	mov	r0, r3
   e2c58:	9a01      	ldr	r2, [sp, #4]
   e2c5a:	9903      	ldr	r1, [sp, #12]
   e2c5c:	9309      	str	r3, [sp, #36]	; 0x24
   e2c5e:	f7fe fde0 	bl	e1822 <strncmp>
   e2c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e2c64:	b168      	cbz	r0, e2c82 <__gethex+0x1cc>
   e2c66:	e7e5      	b.n	e2c34 <__gethex+0x17e>
   e2c68:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e2c6c:	f7ff ff0e 	bl	e2a8c <__hexdig_fun>
   e2c70:	f000 000f 	and.w	r0, r0, #15
   e2c74:	fa00 f00b 	lsl.w	r0, r0, fp
   e2c78:	9b05      	ldr	r3, [sp, #20]
   e2c7a:	ea49 0900 	orr.w	r9, r9, r0
   e2c7e:	f10b 0b04 	add.w	fp, fp, #4
   e2c82:	461e      	mov	r6, r3
   e2c84:	e7cd      	b.n	e2c22 <__gethex+0x16c>
   e2c86:	9804      	ldr	r0, [sp, #16]
   e2c88:	f840 9b04 	str.w	r9, [r0], #4
   e2c8c:	ebca 0000 	rsb	r0, sl, r0
   e2c90:	1080      	asrs	r0, r0, #2
   e2c92:	6128      	str	r0, [r5, #16]
   e2c94:	0147      	lsls	r7, r0, #5
   e2c96:	4648      	mov	r0, r9
   e2c98:	f000 fb85 	bl	e33a6 <__hi0bits>
   e2c9c:	f8d8 6000 	ldr.w	r6, [r8]
   e2ca0:	1a38      	subs	r0, r7, r0
   e2ca2:	42b0      	cmp	r0, r6
   e2ca4:	dd26      	ble.n	e2cf4 <__gethex+0x23e>
   e2ca6:	1b87      	subs	r7, r0, r6
   e2ca8:	4639      	mov	r1, r7
   e2caa:	4628      	mov	r0, r5
   e2cac:	f000 fe83 	bl	e39b6 <__any_on>
   e2cb0:	b1c8      	cbz	r0, e2ce6 <__gethex+0x230>
   e2cb2:	1e7b      	subs	r3, r7, #1
   e2cb4:	1159      	asrs	r1, r3, #5
   e2cb6:	f003 021f 	and.w	r2, r3, #31
   e2cba:	f04f 0901 	mov.w	r9, #1
   e2cbe:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e2cc2:	fa09 f202 	lsl.w	r2, r9, r2
   e2cc6:	420a      	tst	r2, r1
   e2cc8:	d00e      	beq.n	e2ce8 <__gethex+0x232>
   e2cca:	454b      	cmp	r3, r9
   e2ccc:	dc02      	bgt.n	e2cd4 <__gethex+0x21e>
   e2cce:	f04f 0902 	mov.w	r9, #2
   e2cd2:	e009      	b.n	e2ce8 <__gethex+0x232>
   e2cd4:	1eb9      	subs	r1, r7, #2
   e2cd6:	4628      	mov	r0, r5
   e2cd8:	f000 fe6d 	bl	e39b6 <__any_on>
   e2cdc:	2800      	cmp	r0, #0
   e2cde:	d0f6      	beq.n	e2cce <__gethex+0x218>
   e2ce0:	f04f 0903 	mov.w	r9, #3
   e2ce4:	e000      	b.n	e2ce8 <__gethex+0x232>
   e2ce6:	4681      	mov	r9, r0
   e2ce8:	4639      	mov	r1, r7
   e2cea:	4628      	mov	r0, r5
   e2cec:	f7ff fe98 	bl	e2a20 <rshift>
   e2cf0:	443c      	add	r4, r7
   e2cf2:	e00c      	b.n	e2d0e <__gethex+0x258>
   e2cf4:	da09      	bge.n	e2d0a <__gethex+0x254>
   e2cf6:	1a37      	subs	r7, r6, r0
   e2cf8:	4629      	mov	r1, r5
   e2cfa:	463a      	mov	r2, r7
   e2cfc:	9802      	ldr	r0, [sp, #8]
   e2cfe:	f000 fc87 	bl	e3610 <__lshift>
   e2d02:	1be4      	subs	r4, r4, r7
   e2d04:	4605      	mov	r5, r0
   e2d06:	f100 0a14 	add.w	sl, r0, #20
   e2d0a:	f04f 0900 	mov.w	r9, #0
   e2d0e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2d12:	429c      	cmp	r4, r3
   e2d14:	dd08      	ble.n	e2d28 <__gethex+0x272>
   e2d16:	9802      	ldr	r0, [sp, #8]
   e2d18:	4629      	mov	r1, r5
   e2d1a:	f000 fab4 	bl	e3286 <_Bfree>
   e2d1e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2d20:	2300      	movs	r3, #0
   e2d22:	6013      	str	r3, [r2, #0]
   e2d24:	20a3      	movs	r0, #163	; 0xa3
   e2d26:	e0e2      	b.n	e2eee <__gethex+0x438>
   e2d28:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e2d2c:	4284      	cmp	r4, r0
   e2d2e:	da53      	bge.n	e2dd8 <__gethex+0x322>
   e2d30:	1b04      	subs	r4, r0, r4
   e2d32:	42a6      	cmp	r6, r4
   e2d34:	dc2e      	bgt.n	e2d94 <__gethex+0x2de>
   e2d36:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2d3a:	2b02      	cmp	r3, #2
   e2d3c:	d01a      	beq.n	e2d74 <__gethex+0x2be>
   e2d3e:	2b03      	cmp	r3, #3
   e2d40:	d01c      	beq.n	e2d7c <__gethex+0x2c6>
   e2d42:	2b01      	cmp	r3, #1
   e2d44:	d11d      	bne.n	e2d82 <__gethex+0x2cc>
   e2d46:	42a6      	cmp	r6, r4
   e2d48:	d11b      	bne.n	e2d82 <__gethex+0x2cc>
   e2d4a:	2e01      	cmp	r6, #1
   e2d4c:	dc0b      	bgt.n	e2d66 <__gethex+0x2b0>
   e2d4e:	9a06      	ldr	r2, [sp, #24]
   e2d50:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e2d54:	6013      	str	r3, [r2, #0]
   e2d56:	2301      	movs	r3, #1
   e2d58:	612b      	str	r3, [r5, #16]
   e2d5a:	f8ca 3000 	str.w	r3, [sl]
   e2d5e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2d60:	2062      	movs	r0, #98	; 0x62
   e2d62:	601d      	str	r5, [r3, #0]
   e2d64:	e0c3      	b.n	e2eee <__gethex+0x438>
   e2d66:	1e71      	subs	r1, r6, #1
   e2d68:	4628      	mov	r0, r5
   e2d6a:	f000 fe24 	bl	e39b6 <__any_on>
   e2d6e:	2800      	cmp	r0, #0
   e2d70:	d1ed      	bne.n	e2d4e <__gethex+0x298>
   e2d72:	e006      	b.n	e2d82 <__gethex+0x2cc>
   e2d74:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2d76:	2b00      	cmp	r3, #0
   e2d78:	d0e9      	beq.n	e2d4e <__gethex+0x298>
   e2d7a:	e002      	b.n	e2d82 <__gethex+0x2cc>
   e2d7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2d7e:	2b00      	cmp	r3, #0
   e2d80:	d1e5      	bne.n	e2d4e <__gethex+0x298>
   e2d82:	9802      	ldr	r0, [sp, #8]
   e2d84:	4629      	mov	r1, r5
   e2d86:	f000 fa7e 	bl	e3286 <_Bfree>
   e2d8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e2d8c:	2300      	movs	r3, #0
   e2d8e:	6013      	str	r3, [r2, #0]
   e2d90:	2050      	movs	r0, #80	; 0x50
   e2d92:	e0ac      	b.n	e2eee <__gethex+0x438>
   e2d94:	1e67      	subs	r7, r4, #1
   e2d96:	f1b9 0f00 	cmp.w	r9, #0
   e2d9a:	d106      	bne.n	e2daa <__gethex+0x2f4>
   e2d9c:	b13f      	cbz	r7, e2dae <__gethex+0x2f8>
   e2d9e:	4639      	mov	r1, r7
   e2da0:	4628      	mov	r0, r5
   e2da2:	f000 fe08 	bl	e39b6 <__any_on>
   e2da6:	4681      	mov	r9, r0
   e2da8:	e001      	b.n	e2dae <__gethex+0x2f8>
   e2daa:	f04f 0901 	mov.w	r9, #1
   e2dae:	117a      	asrs	r2, r7, #5
   e2db0:	2301      	movs	r3, #1
   e2db2:	f007 071f 	and.w	r7, r7, #31
   e2db6:	fa03 f707 	lsl.w	r7, r3, r7
   e2dba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e2dbe:	4621      	mov	r1, r4
   e2dc0:	421f      	tst	r7, r3
   e2dc2:	4628      	mov	r0, r5
   e2dc4:	bf18      	it	ne
   e2dc6:	f049 0902 	orrne.w	r9, r9, #2
   e2dca:	1b36      	subs	r6, r6, r4
   e2dcc:	f7ff fe28 	bl	e2a20 <rshift>
   e2dd0:	2702      	movs	r7, #2
   e2dd2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e2dd6:	e000      	b.n	e2dda <__gethex+0x324>
   e2dd8:	2701      	movs	r7, #1
   e2dda:	f1b9 0f00 	cmp.w	r9, #0
   e2dde:	f000 8081 	beq.w	e2ee4 <__gethex+0x42e>
   e2de2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e2de6:	2b02      	cmp	r3, #2
   e2de8:	d00e      	beq.n	e2e08 <__gethex+0x352>
   e2dea:	2b03      	cmp	r3, #3
   e2dec:	d010      	beq.n	e2e10 <__gethex+0x35a>
   e2dee:	2b01      	cmp	r3, #1
   e2df0:	d176      	bne.n	e2ee0 <__gethex+0x42a>
   e2df2:	f019 0f02 	tst.w	r9, #2
   e2df6:	d073      	beq.n	e2ee0 <__gethex+0x42a>
   e2df8:	f8da 0000 	ldr.w	r0, [sl]
   e2dfc:	ea49 0900 	orr.w	r9, r9, r0
   e2e00:	f019 0f01 	tst.w	r9, #1
   e2e04:	d107      	bne.n	e2e16 <__gethex+0x360>
   e2e06:	e06b      	b.n	e2ee0 <__gethex+0x42a>
   e2e08:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2e0a:	f1c3 0301 	rsb	r3, r3, #1
   e2e0e:	9315      	str	r3, [sp, #84]	; 0x54
   e2e10:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e2e12:	2b00      	cmp	r3, #0
   e2e14:	d064      	beq.n	e2ee0 <__gethex+0x42a>
   e2e16:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e2e1a:	f105 0314 	add.w	r3, r5, #20
   e2e1e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e2e22:	eb03 0109 	add.w	r1, r3, r9
   e2e26:	2000      	movs	r0, #0
   e2e28:	681a      	ldr	r2, [r3, #0]
   e2e2a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e2e2e:	d002      	beq.n	e2e36 <__gethex+0x380>
   e2e30:	3201      	adds	r2, #1
   e2e32:	601a      	str	r2, [r3, #0]
   e2e34:	e020      	b.n	e2e78 <__gethex+0x3c2>
   e2e36:	f843 0b04 	str.w	r0, [r3], #4
   e2e3a:	4299      	cmp	r1, r3
   e2e3c:	d8f4      	bhi.n	e2e28 <__gethex+0x372>
   e2e3e:	68ab      	ldr	r3, [r5, #8]
   e2e40:	459a      	cmp	sl, r3
   e2e42:	db12      	blt.n	e2e6a <__gethex+0x3b4>
   e2e44:	6869      	ldr	r1, [r5, #4]
   e2e46:	9802      	ldr	r0, [sp, #8]
   e2e48:	3101      	adds	r1, #1
   e2e4a:	f000 f9e7 	bl	e321c <_Balloc>
   e2e4e:	692a      	ldr	r2, [r5, #16]
   e2e50:	3202      	adds	r2, #2
   e2e52:	f105 010c 	add.w	r1, r5, #12
   e2e56:	4683      	mov	fp, r0
   e2e58:	0092      	lsls	r2, r2, #2
   e2e5a:	300c      	adds	r0, #12
   e2e5c:	f7fe fc71 	bl	e1742 <memcpy>
   e2e60:	4629      	mov	r1, r5
   e2e62:	9802      	ldr	r0, [sp, #8]
   e2e64:	f000 fa0f 	bl	e3286 <_Bfree>
   e2e68:	465d      	mov	r5, fp
   e2e6a:	692b      	ldr	r3, [r5, #16]
   e2e6c:	1c5a      	adds	r2, r3, #1
   e2e6e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e2e72:	612a      	str	r2, [r5, #16]
   e2e74:	2201      	movs	r2, #1
   e2e76:	615a      	str	r2, [r3, #20]
   e2e78:	2f02      	cmp	r7, #2
   e2e7a:	f105 0214 	add.w	r2, r5, #20
   e2e7e:	d111      	bne.n	e2ea4 <__gethex+0x3ee>
   e2e80:	f8d8 3000 	ldr.w	r3, [r8]
   e2e84:	3b01      	subs	r3, #1
   e2e86:	429e      	cmp	r6, r3
   e2e88:	d127      	bne.n	e2eda <__gethex+0x424>
   e2e8a:	1171      	asrs	r1, r6, #5
   e2e8c:	2301      	movs	r3, #1
   e2e8e:	f006 061f 	and.w	r6, r6, #31
   e2e92:	fa03 f606 	lsl.w	r6, r3, r6
   e2e96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e2e9a:	421e      	tst	r6, r3
   e2e9c:	bf0c      	ite	eq
   e2e9e:	2702      	moveq	r7, #2
   e2ea0:	2701      	movne	r7, #1
   e2ea2:	e01a      	b.n	e2eda <__gethex+0x424>
   e2ea4:	692b      	ldr	r3, [r5, #16]
   e2ea6:	459a      	cmp	sl, r3
   e2ea8:	da0a      	bge.n	e2ec0 <__gethex+0x40a>
   e2eaa:	2101      	movs	r1, #1
   e2eac:	4628      	mov	r0, r5
   e2eae:	f7ff fdb7 	bl	e2a20 <rshift>
   e2eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e2eb6:	3401      	adds	r4, #1
   e2eb8:	429c      	cmp	r4, r3
   e2eba:	f73f af2c 	bgt.w	e2d16 <__gethex+0x260>
   e2ebe:	e00b      	b.n	e2ed8 <__gethex+0x422>
   e2ec0:	f016 061f 	ands.w	r6, r6, #31
   e2ec4:	d008      	beq.n	e2ed8 <__gethex+0x422>
   e2ec6:	4491      	add	r9, r2
   e2ec8:	f1c6 0620 	rsb	r6, r6, #32
   e2ecc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e2ed0:	f000 fa69 	bl	e33a6 <__hi0bits>
   e2ed4:	42b0      	cmp	r0, r6
   e2ed6:	dbe8      	blt.n	e2eaa <__gethex+0x3f4>
   e2ed8:	2701      	movs	r7, #1
   e2eda:	f047 0720 	orr.w	r7, r7, #32
   e2ede:	e001      	b.n	e2ee4 <__gethex+0x42e>
   e2ee0:	f047 0710 	orr.w	r7, r7, #16
   e2ee4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e2ee6:	601d      	str	r5, [r3, #0]
   e2ee8:	9b06      	ldr	r3, [sp, #24]
   e2eea:	4638      	mov	r0, r7
   e2eec:	601c      	str	r4, [r3, #0]
   e2eee:	b00b      	add	sp, #44	; 0x2c
   e2ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e2ef4 <L_shift>:
   e2ef4:	f1c2 0208 	rsb	r2, r2, #8
   e2ef8:	0092      	lsls	r2, r2, #2
   e2efa:	b570      	push	{r4, r5, r6, lr}
   e2efc:	f1c2 0620 	rsb	r6, r2, #32
   e2f00:	6843      	ldr	r3, [r0, #4]
   e2f02:	6805      	ldr	r5, [r0, #0]
   e2f04:	fa03 f406 	lsl.w	r4, r3, r6
   e2f08:	432c      	orrs	r4, r5
   e2f0a:	40d3      	lsrs	r3, r2
   e2f0c:	6004      	str	r4, [r0, #0]
   e2f0e:	f840 3f04 	str.w	r3, [r0, #4]!
   e2f12:	4288      	cmp	r0, r1
   e2f14:	d3f4      	bcc.n	e2f00 <L_shift+0xc>
   e2f16:	bd70      	pop	{r4, r5, r6, pc}

000e2f18 <__match>:
   e2f18:	b530      	push	{r4, r5, lr}
   e2f1a:	6803      	ldr	r3, [r0, #0]
   e2f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2f20:	3301      	adds	r3, #1
   e2f22:	b14c      	cbz	r4, e2f38 <__match+0x20>
   e2f24:	781a      	ldrb	r2, [r3, #0]
   e2f26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e2f2a:	2d19      	cmp	r5, #25
   e2f2c:	bf98      	it	ls
   e2f2e:	3220      	addls	r2, #32
   e2f30:	42a2      	cmp	r2, r4
   e2f32:	d0f3      	beq.n	e2f1c <__match+0x4>
   e2f34:	2000      	movs	r0, #0
   e2f36:	bd30      	pop	{r4, r5, pc}
   e2f38:	6003      	str	r3, [r0, #0]
   e2f3a:	2001      	movs	r0, #1
   e2f3c:	bd30      	pop	{r4, r5, pc}

000e2f3e <__hexnan>:
   e2f3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2f42:	680b      	ldr	r3, [r1, #0]
   e2f44:	f8d0 b000 	ldr.w	fp, [r0]
   e2f48:	115e      	asrs	r6, r3, #5
   e2f4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e2f4e:	f013 031f 	ands.w	r3, r3, #31
   e2f52:	b085      	sub	sp, #20
   e2f54:	bf18      	it	ne
   e2f56:	3604      	addne	r6, #4
   e2f58:	1f35      	subs	r5, r6, #4
   e2f5a:	4617      	mov	r7, r2
   e2f5c:	2200      	movs	r2, #0
   e2f5e:	4682      	mov	sl, r0
   e2f60:	9301      	str	r3, [sp, #4]
   e2f62:	f846 2c04 	str.w	r2, [r6, #-4]
   e2f66:	46a8      	mov	r8, r5
   e2f68:	462c      	mov	r4, r5
   e2f6a:	9200      	str	r2, [sp, #0]
   e2f6c:	4691      	mov	r9, r2
   e2f6e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e2f72:	2900      	cmp	r1, #0
   e2f74:	d03c      	beq.n	e2ff0 <__hexnan+0xb2>
   e2f76:	4608      	mov	r0, r1
   e2f78:	9203      	str	r2, [sp, #12]
   e2f7a:	9102      	str	r1, [sp, #8]
   e2f7c:	f7ff fd86 	bl	e2a8c <__hexdig_fun>
   e2f80:	9a03      	ldr	r2, [sp, #12]
   e2f82:	bb00      	cbnz	r0, e2fc6 <__hexnan+0x88>
   e2f84:	9902      	ldr	r1, [sp, #8]
   e2f86:	2920      	cmp	r1, #32
   e2f88:	d816      	bhi.n	e2fb8 <__hexnan+0x7a>
   e2f8a:	9b00      	ldr	r3, [sp, #0]
   e2f8c:	4599      	cmp	r9, r3
   e2f8e:	ddee      	ble.n	e2f6e <__hexnan+0x30>
   e2f90:	4544      	cmp	r4, r8
   e2f92:	d205      	bcs.n	e2fa0 <__hexnan+0x62>
   e2f94:	2a07      	cmp	r2, #7
   e2f96:	dc03      	bgt.n	e2fa0 <__hexnan+0x62>
   e2f98:	4641      	mov	r1, r8
   e2f9a:	4620      	mov	r0, r4
   e2f9c:	f7ff ffaa 	bl	e2ef4 <L_shift>
   e2fa0:	42bc      	cmp	r4, r7
   e2fa2:	d923      	bls.n	e2fec <__hexnan+0xae>
   e2fa4:	2300      	movs	r3, #0
   e2fa6:	f1a4 0804 	sub.w	r8, r4, #4
   e2faa:	f844 3c04 	str.w	r3, [r4, #-4]
   e2fae:	f8cd 9000 	str.w	r9, [sp]
   e2fb2:	4644      	mov	r4, r8
   e2fb4:	461a      	mov	r2, r3
   e2fb6:	e7da      	b.n	e2f6e <__hexnan+0x30>
   e2fb8:	2929      	cmp	r1, #41	; 0x29
   e2fba:	d148      	bne.n	e304e <__hexnan+0x110>
   e2fbc:	f10b 0301 	add.w	r3, fp, #1
   e2fc0:	f8ca 3000 	str.w	r3, [sl]
   e2fc4:	e014      	b.n	e2ff0 <__hexnan+0xb2>
   e2fc6:	3201      	adds	r2, #1
   e2fc8:	2a08      	cmp	r2, #8
   e2fca:	f109 0901 	add.w	r9, r9, #1
   e2fce:	dd06      	ble.n	e2fde <__hexnan+0xa0>
   e2fd0:	42bc      	cmp	r4, r7
   e2fd2:	d9cc      	bls.n	e2f6e <__hexnan+0x30>
   e2fd4:	2300      	movs	r3, #0
   e2fd6:	f844 3c04 	str.w	r3, [r4, #-4]
   e2fda:	2201      	movs	r2, #1
   e2fdc:	3c04      	subs	r4, #4
   e2fde:	6821      	ldr	r1, [r4, #0]
   e2fe0:	f000 000f 	and.w	r0, r0, #15
   e2fe4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e2fe8:	6020      	str	r0, [r4, #0]
   e2fea:	e7c0      	b.n	e2f6e <__hexnan+0x30>
   e2fec:	2208      	movs	r2, #8
   e2fee:	e7be      	b.n	e2f6e <__hexnan+0x30>
   e2ff0:	f1b9 0f00 	cmp.w	r9, #0
   e2ff4:	d02b      	beq.n	e304e <__hexnan+0x110>
   e2ff6:	4544      	cmp	r4, r8
   e2ff8:	d205      	bcs.n	e3006 <__hexnan+0xc8>
   e2ffa:	2a07      	cmp	r2, #7
   e2ffc:	dc03      	bgt.n	e3006 <__hexnan+0xc8>
   e2ffe:	4641      	mov	r1, r8
   e3000:	4620      	mov	r0, r4
   e3002:	f7ff ff77 	bl	e2ef4 <L_shift>
   e3006:	42bc      	cmp	r4, r7
   e3008:	d90c      	bls.n	e3024 <__hexnan+0xe6>
   e300a:	463b      	mov	r3, r7
   e300c:	f854 2b04 	ldr.w	r2, [r4], #4
   e3010:	f843 2b04 	str.w	r2, [r3], #4
   e3014:	42a5      	cmp	r5, r4
   e3016:	d2f9      	bcs.n	e300c <__hexnan+0xce>
   e3018:	2200      	movs	r2, #0
   e301a:	f843 2b04 	str.w	r2, [r3], #4
   e301e:	429d      	cmp	r5, r3
   e3020:	d2fb      	bcs.n	e301a <__hexnan+0xdc>
   e3022:	e00b      	b.n	e303c <__hexnan+0xfe>
   e3024:	9b01      	ldr	r3, [sp, #4]
   e3026:	b14b      	cbz	r3, e303c <__hexnan+0xfe>
   e3028:	f1c3 0220 	rsb	r2, r3, #32
   e302c:	f04f 33ff 	mov.w	r3, #4294967295
   e3030:	40d3      	lsrs	r3, r2
   e3032:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e3036:	4013      	ands	r3, r2
   e3038:	f846 3c04 	str.w	r3, [r6, #-4]
   e303c:	682b      	ldr	r3, [r5, #0]
   e303e:	b943      	cbnz	r3, e3052 <__hexnan+0x114>
   e3040:	42bd      	cmp	r5, r7
   e3042:	d102      	bne.n	e304a <__hexnan+0x10c>
   e3044:	2301      	movs	r3, #1
   e3046:	602b      	str	r3, [r5, #0]
   e3048:	e003      	b.n	e3052 <__hexnan+0x114>
   e304a:	3d04      	subs	r5, #4
   e304c:	e7f6      	b.n	e303c <__hexnan+0xfe>
   e304e:	2004      	movs	r0, #4
   e3050:	e000      	b.n	e3054 <__hexnan+0x116>
   e3052:	2005      	movs	r0, #5
   e3054:	b005      	add	sp, #20
   e3056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e305c <_findenv_r>:
   e305c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3060:	4607      	mov	r7, r0
   e3062:	468b      	mov	fp, r1
   e3064:	4690      	mov	r8, r2
   e3066:	f000 fcd6 	bl	e3a16 <__env_lock>
   e306a:	4b19      	ldr	r3, [pc, #100]	; (e30d0 <_findenv_r+0x74>)
   e306c:	681d      	ldr	r5, [r3, #0]
   e306e:	469a      	mov	sl, r3
   e3070:	b13d      	cbz	r5, e3082 <_findenv_r+0x26>
   e3072:	465c      	mov	r4, fp
   e3074:	4623      	mov	r3, r4
   e3076:	f813 2b01 	ldrb.w	r2, [r3], #1
   e307a:	b142      	cbz	r2, e308e <_findenv_r+0x32>
   e307c:	2a3d      	cmp	r2, #61	; 0x3d
   e307e:	461c      	mov	r4, r3
   e3080:	d1f8      	bne.n	e3074 <_findenv_r+0x18>
   e3082:	4638      	mov	r0, r7
   e3084:	f000 fcc8 	bl	e3a18 <__env_unlock>
   e3088:	2000      	movs	r0, #0
   e308a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e308e:	ebcb 0404 	rsb	r4, fp, r4
   e3092:	46a9      	mov	r9, r5
   e3094:	f859 0b04 	ldr.w	r0, [r9], #4
   e3098:	2800      	cmp	r0, #0
   e309a:	d0f2      	beq.n	e3082 <_findenv_r+0x26>
   e309c:	4622      	mov	r2, r4
   e309e:	4659      	mov	r1, fp
   e30a0:	f7fe fbbf 	bl	e1822 <strncmp>
   e30a4:	b988      	cbnz	r0, e30ca <_findenv_r+0x6e>
   e30a6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e30aa:	191e      	adds	r6, r3, r4
   e30ac:	5d1b      	ldrb	r3, [r3, r4]
   e30ae:	2b3d      	cmp	r3, #61	; 0x3d
   e30b0:	d10b      	bne.n	e30ca <_findenv_r+0x6e>
   e30b2:	f8da 3000 	ldr.w	r3, [sl]
   e30b6:	1aed      	subs	r5, r5, r3
   e30b8:	10ad      	asrs	r5, r5, #2
   e30ba:	4638      	mov	r0, r7
   e30bc:	f8c8 5000 	str.w	r5, [r8]
   e30c0:	f000 fcaa 	bl	e3a18 <__env_unlock>
   e30c4:	1c70      	adds	r0, r6, #1
   e30c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e30ca:	464d      	mov	r5, r9
   e30cc:	e7e1      	b.n	e3092 <_findenv_r+0x36>
   e30ce:	bf00      	nop
   e30d0:	2003e2dc 	.word	0x2003e2dc

000e30d4 <_getenv_r>:
   e30d4:	b507      	push	{r0, r1, r2, lr}
   e30d6:	aa01      	add	r2, sp, #4
   e30d8:	f7ff ffc0 	bl	e305c <_findenv_r>
   e30dc:	b003      	add	sp, #12
   e30de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e30e4 <__gettzinfo>:
   e30e4:	4800      	ldr	r0, [pc, #0]	; (e30e8 <__gettzinfo+0x4>)
   e30e6:	4770      	bx	lr
   e30e8:	2003e29c 	.word	0x2003e29c

000e30ec <gmtime_r>:
   e30ec:	6802      	ldr	r2, [r0, #0]
   e30ee:	4b47      	ldr	r3, [pc, #284]	; (e320c <gmtime_r+0x120>)
   e30f0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e30f2:	fb92 f4f3 	sdiv	r4, r2, r3
   e30f6:	fb03 2214 	mls	r2, r3, r4, r2
   e30fa:	2a00      	cmp	r2, #0
   e30fc:	bfbc      	itt	lt
   e30fe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e3102:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e3106:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e310a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e310e:	fb92 f3f0 	sdiv	r3, r2, r0
   e3112:	fb00 2213 	mls	r2, r0, r3, r2
   e3116:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e311a:	bfac      	ite	ge
   e311c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e3120:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e3124:	608b      	str	r3, [r1, #8]
   e3126:	fb92 f3f0 	sdiv	r3, r2, r0
   e312a:	fb00 2213 	mls	r2, r0, r3, r2
   e312e:	604b      	str	r3, [r1, #4]
   e3130:	600a      	str	r2, [r1, #0]
   e3132:	2307      	movs	r3, #7
   e3134:	1ce2      	adds	r2, r4, #3
   e3136:	fb92 f3f3 	sdiv	r3, r2, r3
   e313a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e313e:	1ad3      	subs	r3, r2, r3
   e3140:	618b      	str	r3, [r1, #24]
   e3142:	4b33      	ldr	r3, [pc, #204]	; (e3210 <gmtime_r+0x124>)
   e3144:	4d33      	ldr	r5, [pc, #204]	; (e3214 <gmtime_r+0x128>)
   e3146:	fb94 f5f5 	sdiv	r5, r4, r5
   e314a:	fb03 4405 	mla	r4, r3, r5, r4
   e314e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e3152:	fbb4 f2f2 	udiv	r2, r4, r2
   e3156:	4422      	add	r2, r4
   e3158:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e315c:	fbb4 f3f7 	udiv	r3, r4, r7
   e3160:	1ad2      	subs	r2, r2, r3
   e3162:	482d      	ldr	r0, [pc, #180]	; (e3218 <gmtime_r+0x12c>)
   e3164:	fbb4 f0f0 	udiv	r0, r4, r0
   e3168:	f648 6694 	movw	r6, #36500	; 0x8e94
   e316c:	1a13      	subs	r3, r2, r0
   e316e:	fbb3 f6f6 	udiv	r6, r3, r6
   e3172:	4434      	add	r4, r6
   e3174:	f240 126d 	movw	r2, #365	; 0x16d
   e3178:	fbb3 f0f2 	udiv	r0, r3, r2
   e317c:	fbb3 f3f7 	udiv	r3, r3, r7
   e3180:	1ae3      	subs	r3, r4, r3
   e3182:	fb02 3310 	mls	r3, r2, r0, r3
   e3186:	2499      	movs	r4, #153	; 0x99
   e3188:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e318c:	3202      	adds	r2, #2
   e318e:	fbb2 f2f4 	udiv	r2, r2, r4
   e3192:	2a0a      	cmp	r2, #10
   e3194:	fb04 f402 	mul.w	r4, r4, r2
   e3198:	f104 0602 	add.w	r6, r4, #2
   e319c:	f04f 0405 	mov.w	r4, #5
   e31a0:	fbb6 f4f4 	udiv	r4, r6, r4
   e31a4:	bf34      	ite	cc
   e31a6:	2602      	movcc	r6, #2
   e31a8:	f06f 0609 	mvncs.w	r6, #9
   e31ac:	4416      	add	r6, r2
   e31ae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e31b2:	fb02 0505 	mla	r5, r2, r5, r0
   e31b6:	1c5f      	adds	r7, r3, #1
   e31b8:	2e01      	cmp	r6, #1
   e31ba:	bf98      	it	ls
   e31bc:	3501      	addls	r5, #1
   e31be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e31c2:	eba7 0704 	sub.w	r7, r7, r4
   e31c6:	d302      	bcc.n	e31ce <gmtime_r+0xe2>
   e31c8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e31cc:	e014      	b.n	e31f8 <gmtime_r+0x10c>
   e31ce:	0782      	lsls	r2, r0, #30
   e31d0:	d105      	bne.n	e31de <gmtime_r+0xf2>
   e31d2:	2464      	movs	r4, #100	; 0x64
   e31d4:	fbb0 f2f4 	udiv	r2, r0, r4
   e31d8:	fb04 0212 	mls	r2, r4, r2, r0
   e31dc:	b94a      	cbnz	r2, e31f2 <gmtime_r+0x106>
   e31de:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e31e2:	fbb0 f4f2 	udiv	r4, r0, r2
   e31e6:	fb02 0014 	mls	r0, r2, r4, r0
   e31ea:	fab0 f280 	clz	r2, r0
   e31ee:	0952      	lsrs	r2, r2, #5
   e31f0:	e000      	b.n	e31f4 <gmtime_r+0x108>
   e31f2:	2201      	movs	r2, #1
   e31f4:	333b      	adds	r3, #59	; 0x3b
   e31f6:	441a      	add	r2, r3
   e31f8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e31fc:	2300      	movs	r3, #0
   e31fe:	61ca      	str	r2, [r1, #28]
   e3200:	614d      	str	r5, [r1, #20]
   e3202:	610e      	str	r6, [r1, #16]
   e3204:	60cf      	str	r7, [r1, #12]
   e3206:	620b      	str	r3, [r1, #32]
   e3208:	4608      	mov	r0, r1
   e320a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e320c:	00015180 	.word	0x00015180
   e3210:	fffdc54f 	.word	0xfffdc54f
   e3214:	00023ab1 	.word	0x00023ab1
   e3218:	00023ab0 	.word	0x00023ab0

000e321c <_Balloc>:
   e321c:	b570      	push	{r4, r5, r6, lr}
   e321e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e3220:	4604      	mov	r4, r0
   e3222:	460e      	mov	r6, r1
   e3224:	b93d      	cbnz	r5, e3236 <_Balloc+0x1a>
   e3226:	2010      	movs	r0, #16
   e3228:	f7fb fa9a 	bl	de760 <malloc>
   e322c:	6260      	str	r0, [r4, #36]	; 0x24
   e322e:	6045      	str	r5, [r0, #4]
   e3230:	6085      	str	r5, [r0, #8]
   e3232:	6005      	str	r5, [r0, #0]
   e3234:	60c5      	str	r5, [r0, #12]
   e3236:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e3238:	68eb      	ldr	r3, [r5, #12]
   e323a:	b143      	cbz	r3, e324e <_Balloc+0x32>
   e323c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e323e:	68db      	ldr	r3, [r3, #12]
   e3240:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e3244:	b178      	cbz	r0, e3266 <_Balloc+0x4a>
   e3246:	6802      	ldr	r2, [r0, #0]
   e3248:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e324c:	e017      	b.n	e327e <_Balloc+0x62>
   e324e:	2221      	movs	r2, #33	; 0x21
   e3250:	2104      	movs	r1, #4
   e3252:	4620      	mov	r0, r4
   e3254:	f000 fbd1 	bl	e39fa <_calloc_r>
   e3258:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e325a:	60e8      	str	r0, [r5, #12]
   e325c:	68db      	ldr	r3, [r3, #12]
   e325e:	2b00      	cmp	r3, #0
   e3260:	d1ec      	bne.n	e323c <_Balloc+0x20>
   e3262:	2000      	movs	r0, #0
   e3264:	bd70      	pop	{r4, r5, r6, pc}
   e3266:	2101      	movs	r1, #1
   e3268:	fa01 f506 	lsl.w	r5, r1, r6
   e326c:	1d6a      	adds	r2, r5, #5
   e326e:	0092      	lsls	r2, r2, #2
   e3270:	4620      	mov	r0, r4
   e3272:	f000 fbc2 	bl	e39fa <_calloc_r>
   e3276:	2800      	cmp	r0, #0
   e3278:	d0f3      	beq.n	e3262 <_Balloc+0x46>
   e327a:	6046      	str	r6, [r0, #4]
   e327c:	6085      	str	r5, [r0, #8]
   e327e:	2300      	movs	r3, #0
   e3280:	6103      	str	r3, [r0, #16]
   e3282:	60c3      	str	r3, [r0, #12]
   e3284:	bd70      	pop	{r4, r5, r6, pc}

000e3286 <_Bfree>:
   e3286:	b570      	push	{r4, r5, r6, lr}
   e3288:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e328a:	4606      	mov	r6, r0
   e328c:	460d      	mov	r5, r1
   e328e:	b93c      	cbnz	r4, e32a0 <_Bfree+0x1a>
   e3290:	2010      	movs	r0, #16
   e3292:	f7fb fa65 	bl	de760 <malloc>
   e3296:	6270      	str	r0, [r6, #36]	; 0x24
   e3298:	6044      	str	r4, [r0, #4]
   e329a:	6084      	str	r4, [r0, #8]
   e329c:	6004      	str	r4, [r0, #0]
   e329e:	60c4      	str	r4, [r0, #12]
   e32a0:	b13d      	cbz	r5, e32b2 <_Bfree+0x2c>
   e32a2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e32a4:	686a      	ldr	r2, [r5, #4]
   e32a6:	68db      	ldr	r3, [r3, #12]
   e32a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e32ac:	6029      	str	r1, [r5, #0]
   e32ae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e32b2:	bd70      	pop	{r4, r5, r6, pc}

000e32b4 <__multadd>:
   e32b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e32b8:	690d      	ldr	r5, [r1, #16]
   e32ba:	461f      	mov	r7, r3
   e32bc:	4606      	mov	r6, r0
   e32be:	460c      	mov	r4, r1
   e32c0:	f101 0e14 	add.w	lr, r1, #20
   e32c4:	2300      	movs	r3, #0
   e32c6:	f8de 0000 	ldr.w	r0, [lr]
   e32ca:	b281      	uxth	r1, r0
   e32cc:	fb02 7101 	mla	r1, r2, r1, r7
   e32d0:	0c0f      	lsrs	r7, r1, #16
   e32d2:	0c00      	lsrs	r0, r0, #16
   e32d4:	fb02 7000 	mla	r0, r2, r0, r7
   e32d8:	b289      	uxth	r1, r1
   e32da:	3301      	adds	r3, #1
   e32dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e32e0:	429d      	cmp	r5, r3
   e32e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e32e6:	f84e 1b04 	str.w	r1, [lr], #4
   e32ea:	dcec      	bgt.n	e32c6 <__multadd+0x12>
   e32ec:	b1d7      	cbz	r7, e3324 <__multadd+0x70>
   e32ee:	68a3      	ldr	r3, [r4, #8]
   e32f0:	429d      	cmp	r5, r3
   e32f2:	db12      	blt.n	e331a <__multadd+0x66>
   e32f4:	6861      	ldr	r1, [r4, #4]
   e32f6:	4630      	mov	r0, r6
   e32f8:	3101      	adds	r1, #1
   e32fa:	f7ff ff8f 	bl	e321c <_Balloc>
   e32fe:	6922      	ldr	r2, [r4, #16]
   e3300:	3202      	adds	r2, #2
   e3302:	f104 010c 	add.w	r1, r4, #12
   e3306:	4680      	mov	r8, r0
   e3308:	0092      	lsls	r2, r2, #2
   e330a:	300c      	adds	r0, #12
   e330c:	f7fe fa19 	bl	e1742 <memcpy>
   e3310:	4621      	mov	r1, r4
   e3312:	4630      	mov	r0, r6
   e3314:	f7ff ffb7 	bl	e3286 <_Bfree>
   e3318:	4644      	mov	r4, r8
   e331a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e331e:	3501      	adds	r5, #1
   e3320:	615f      	str	r7, [r3, #20]
   e3322:	6125      	str	r5, [r4, #16]
   e3324:	4620      	mov	r0, r4
   e3326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e332a <__s2b>:
   e332a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e332e:	460c      	mov	r4, r1
   e3330:	4615      	mov	r5, r2
   e3332:	461f      	mov	r7, r3
   e3334:	2209      	movs	r2, #9
   e3336:	3308      	adds	r3, #8
   e3338:	4606      	mov	r6, r0
   e333a:	fb93 f3f2 	sdiv	r3, r3, r2
   e333e:	2100      	movs	r1, #0
   e3340:	2201      	movs	r2, #1
   e3342:	429a      	cmp	r2, r3
   e3344:	da02      	bge.n	e334c <__s2b+0x22>
   e3346:	0052      	lsls	r2, r2, #1
   e3348:	3101      	adds	r1, #1
   e334a:	e7fa      	b.n	e3342 <__s2b+0x18>
   e334c:	4630      	mov	r0, r6
   e334e:	f7ff ff65 	bl	e321c <_Balloc>
   e3352:	9b08      	ldr	r3, [sp, #32]
   e3354:	6143      	str	r3, [r0, #20]
   e3356:	2d09      	cmp	r5, #9
   e3358:	f04f 0301 	mov.w	r3, #1
   e335c:	6103      	str	r3, [r0, #16]
   e335e:	dd11      	ble.n	e3384 <__s2b+0x5a>
   e3360:	f104 0809 	add.w	r8, r4, #9
   e3364:	46c1      	mov	r9, r8
   e3366:	442c      	add	r4, r5
   e3368:	f819 3b01 	ldrb.w	r3, [r9], #1
   e336c:	4601      	mov	r1, r0
   e336e:	3b30      	subs	r3, #48	; 0x30
   e3370:	220a      	movs	r2, #10
   e3372:	4630      	mov	r0, r6
   e3374:	f7ff ff9e 	bl	e32b4 <__multadd>
   e3378:	45a1      	cmp	r9, r4
   e337a:	d1f5      	bne.n	e3368 <__s2b+0x3e>
   e337c:	eb08 0405 	add.w	r4, r8, r5
   e3380:	3c08      	subs	r4, #8
   e3382:	e001      	b.n	e3388 <__s2b+0x5e>
   e3384:	340a      	adds	r4, #10
   e3386:	2509      	movs	r5, #9
   e3388:	1b2d      	subs	r5, r5, r4
   e338a:	1963      	adds	r3, r4, r5
   e338c:	429f      	cmp	r7, r3
   e338e:	dd08      	ble.n	e33a2 <__s2b+0x78>
   e3390:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3394:	4601      	mov	r1, r0
   e3396:	3b30      	subs	r3, #48	; 0x30
   e3398:	220a      	movs	r2, #10
   e339a:	4630      	mov	r0, r6
   e339c:	f7ff ff8a 	bl	e32b4 <__multadd>
   e33a0:	e7f3      	b.n	e338a <__s2b+0x60>
   e33a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e33a6 <__hi0bits>:
   e33a6:	0c03      	lsrs	r3, r0, #16
   e33a8:	041b      	lsls	r3, r3, #16
   e33aa:	b913      	cbnz	r3, e33b2 <__hi0bits+0xc>
   e33ac:	0400      	lsls	r0, r0, #16
   e33ae:	2310      	movs	r3, #16
   e33b0:	e000      	b.n	e33b4 <__hi0bits+0xe>
   e33b2:	2300      	movs	r3, #0
   e33b4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e33b8:	bf04      	itt	eq
   e33ba:	0200      	lsleq	r0, r0, #8
   e33bc:	3308      	addeq	r3, #8
   e33be:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e33c2:	bf04      	itt	eq
   e33c4:	0100      	lsleq	r0, r0, #4
   e33c6:	3304      	addeq	r3, #4
   e33c8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e33cc:	bf04      	itt	eq
   e33ce:	0080      	lsleq	r0, r0, #2
   e33d0:	3302      	addeq	r3, #2
   e33d2:	2800      	cmp	r0, #0
   e33d4:	db03      	blt.n	e33de <__hi0bits+0x38>
   e33d6:	0042      	lsls	r2, r0, #1
   e33d8:	d503      	bpl.n	e33e2 <__hi0bits+0x3c>
   e33da:	1c58      	adds	r0, r3, #1
   e33dc:	4770      	bx	lr
   e33de:	4618      	mov	r0, r3
   e33e0:	4770      	bx	lr
   e33e2:	2020      	movs	r0, #32
   e33e4:	4770      	bx	lr

000e33e6 <__lo0bits>:
   e33e6:	6803      	ldr	r3, [r0, #0]
   e33e8:	f013 0207 	ands.w	r2, r3, #7
   e33ec:	d00b      	beq.n	e3406 <__lo0bits+0x20>
   e33ee:	07d9      	lsls	r1, r3, #31
   e33f0:	d422      	bmi.n	e3438 <__lo0bits+0x52>
   e33f2:	079a      	lsls	r2, r3, #30
   e33f4:	bf4b      	itete	mi
   e33f6:	085b      	lsrmi	r3, r3, #1
   e33f8:	089b      	lsrpl	r3, r3, #2
   e33fa:	6003      	strmi	r3, [r0, #0]
   e33fc:	6003      	strpl	r3, [r0, #0]
   e33fe:	bf4c      	ite	mi
   e3400:	2001      	movmi	r0, #1
   e3402:	2002      	movpl	r0, #2
   e3404:	4770      	bx	lr
   e3406:	b299      	uxth	r1, r3
   e3408:	b909      	cbnz	r1, e340e <__lo0bits+0x28>
   e340a:	0c1b      	lsrs	r3, r3, #16
   e340c:	2210      	movs	r2, #16
   e340e:	f013 0fff 	tst.w	r3, #255	; 0xff
   e3412:	bf04      	itt	eq
   e3414:	0a1b      	lsreq	r3, r3, #8
   e3416:	3208      	addeq	r2, #8
   e3418:	0719      	lsls	r1, r3, #28
   e341a:	bf04      	itt	eq
   e341c:	091b      	lsreq	r3, r3, #4
   e341e:	3204      	addeq	r2, #4
   e3420:	0799      	lsls	r1, r3, #30
   e3422:	bf04      	itt	eq
   e3424:	089b      	lsreq	r3, r3, #2
   e3426:	3202      	addeq	r2, #2
   e3428:	07d9      	lsls	r1, r3, #31
   e342a:	d402      	bmi.n	e3432 <__lo0bits+0x4c>
   e342c:	085b      	lsrs	r3, r3, #1
   e342e:	d005      	beq.n	e343c <__lo0bits+0x56>
   e3430:	3201      	adds	r2, #1
   e3432:	6003      	str	r3, [r0, #0]
   e3434:	4610      	mov	r0, r2
   e3436:	4770      	bx	lr
   e3438:	2000      	movs	r0, #0
   e343a:	4770      	bx	lr
   e343c:	2020      	movs	r0, #32
   e343e:	4770      	bx	lr

000e3440 <__i2b>:
   e3440:	b510      	push	{r4, lr}
   e3442:	460c      	mov	r4, r1
   e3444:	2101      	movs	r1, #1
   e3446:	f7ff fee9 	bl	e321c <_Balloc>
   e344a:	2201      	movs	r2, #1
   e344c:	6144      	str	r4, [r0, #20]
   e344e:	6102      	str	r2, [r0, #16]
   e3450:	bd10      	pop	{r4, pc}

000e3452 <__multiply>:
   e3452:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3456:	4614      	mov	r4, r2
   e3458:	690a      	ldr	r2, [r1, #16]
   e345a:	6923      	ldr	r3, [r4, #16]
   e345c:	429a      	cmp	r2, r3
   e345e:	bfb8      	it	lt
   e3460:	460b      	movlt	r3, r1
   e3462:	4688      	mov	r8, r1
   e3464:	bfbc      	itt	lt
   e3466:	46a0      	movlt	r8, r4
   e3468:	461c      	movlt	r4, r3
   e346a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e346e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e3472:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3476:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e347a:	eb07 0609 	add.w	r6, r7, r9
   e347e:	429e      	cmp	r6, r3
   e3480:	bfc8      	it	gt
   e3482:	3101      	addgt	r1, #1
   e3484:	f7ff feca 	bl	e321c <_Balloc>
   e3488:	f100 0514 	add.w	r5, r0, #20
   e348c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e3490:	462b      	mov	r3, r5
   e3492:	2200      	movs	r2, #0
   e3494:	4563      	cmp	r3, ip
   e3496:	d202      	bcs.n	e349e <__multiply+0x4c>
   e3498:	f843 2b04 	str.w	r2, [r3], #4
   e349c:	e7fa      	b.n	e3494 <__multiply+0x42>
   e349e:	f104 0214 	add.w	r2, r4, #20
   e34a2:	f108 0114 	add.w	r1, r8, #20
   e34a6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e34aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e34ae:	9300      	str	r3, [sp, #0]
   e34b0:	9b00      	ldr	r3, [sp, #0]
   e34b2:	9201      	str	r2, [sp, #4]
   e34b4:	4293      	cmp	r3, r2
   e34b6:	d957      	bls.n	e3568 <__multiply+0x116>
   e34b8:	f8b2 b000 	ldrh.w	fp, [r2]
   e34bc:	f1bb 0f00 	cmp.w	fp, #0
   e34c0:	d023      	beq.n	e350a <__multiply+0xb8>
   e34c2:	4689      	mov	r9, r1
   e34c4:	46ae      	mov	lr, r5
   e34c6:	f04f 0800 	mov.w	r8, #0
   e34ca:	f859 4b04 	ldr.w	r4, [r9], #4
   e34ce:	f8be a000 	ldrh.w	sl, [lr]
   e34d2:	b2a3      	uxth	r3, r4
   e34d4:	fb0b a303 	mla	r3, fp, r3, sl
   e34d8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e34dc:	f8de 4000 	ldr.w	r4, [lr]
   e34e0:	4443      	add	r3, r8
   e34e2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e34e6:	fb0b 840a 	mla	r4, fp, sl, r8
   e34ea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e34ee:	46f2      	mov	sl, lr
   e34f0:	b29b      	uxth	r3, r3
   e34f2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e34f6:	454f      	cmp	r7, r9
   e34f8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e34fc:	f84a 3b04 	str.w	r3, [sl], #4
   e3500:	d901      	bls.n	e3506 <__multiply+0xb4>
   e3502:	46d6      	mov	lr, sl
   e3504:	e7e1      	b.n	e34ca <__multiply+0x78>
   e3506:	f8ce 8004 	str.w	r8, [lr, #4]
   e350a:	9b01      	ldr	r3, [sp, #4]
   e350c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e3510:	3204      	adds	r2, #4
   e3512:	f1ba 0f00 	cmp.w	sl, #0
   e3516:	d021      	beq.n	e355c <__multiply+0x10a>
   e3518:	682b      	ldr	r3, [r5, #0]
   e351a:	462c      	mov	r4, r5
   e351c:	4689      	mov	r9, r1
   e351e:	f04f 0800 	mov.w	r8, #0
   e3522:	f8b9 e000 	ldrh.w	lr, [r9]
   e3526:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e352a:	fb0a be0e 	mla	lr, sl, lr, fp
   e352e:	44f0      	add	r8, lr
   e3530:	46a3      	mov	fp, r4
   e3532:	b29b      	uxth	r3, r3
   e3534:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e3538:	f84b 3b04 	str.w	r3, [fp], #4
   e353c:	f859 3b04 	ldr.w	r3, [r9], #4
   e3540:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e3544:	0c1b      	lsrs	r3, r3, #16
   e3546:	fb0a e303 	mla	r3, sl, r3, lr
   e354a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e354e:	454f      	cmp	r7, r9
   e3550:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e3554:	d901      	bls.n	e355a <__multiply+0x108>
   e3556:	465c      	mov	r4, fp
   e3558:	e7e3      	b.n	e3522 <__multiply+0xd0>
   e355a:	6063      	str	r3, [r4, #4]
   e355c:	3504      	adds	r5, #4
   e355e:	e7a7      	b.n	e34b0 <__multiply+0x5e>
   e3560:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e3564:	b913      	cbnz	r3, e356c <__multiply+0x11a>
   e3566:	3e01      	subs	r6, #1
   e3568:	2e00      	cmp	r6, #0
   e356a:	dcf9      	bgt.n	e3560 <__multiply+0x10e>
   e356c:	6106      	str	r6, [r0, #16]
   e356e:	b003      	add	sp, #12
   e3570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e3574 <__pow5mult>:
   e3574:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3578:	4615      	mov	r5, r2
   e357a:	f012 0203 	ands.w	r2, r2, #3
   e357e:	4606      	mov	r6, r0
   e3580:	460f      	mov	r7, r1
   e3582:	d007      	beq.n	e3594 <__pow5mult+0x20>
   e3584:	3a01      	subs	r2, #1
   e3586:	4c21      	ldr	r4, [pc, #132]	; (e360c <__pow5mult+0x98>)
   e3588:	2300      	movs	r3, #0
   e358a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e358e:	f7ff fe91 	bl	e32b4 <__multadd>
   e3592:	4607      	mov	r7, r0
   e3594:	10ad      	asrs	r5, r5, #2
   e3596:	d036      	beq.n	e3606 <__pow5mult+0x92>
   e3598:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e359a:	b93c      	cbnz	r4, e35ac <__pow5mult+0x38>
   e359c:	2010      	movs	r0, #16
   e359e:	f7fb f8df 	bl	de760 <malloc>
   e35a2:	6270      	str	r0, [r6, #36]	; 0x24
   e35a4:	6044      	str	r4, [r0, #4]
   e35a6:	6084      	str	r4, [r0, #8]
   e35a8:	6004      	str	r4, [r0, #0]
   e35aa:	60c4      	str	r4, [r0, #12]
   e35ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e35b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e35b4:	b94c      	cbnz	r4, e35ca <__pow5mult+0x56>
   e35b6:	f240 2171 	movw	r1, #625	; 0x271
   e35ba:	4630      	mov	r0, r6
   e35bc:	f7ff ff40 	bl	e3440 <__i2b>
   e35c0:	2300      	movs	r3, #0
   e35c2:	f8c8 0008 	str.w	r0, [r8, #8]
   e35c6:	4604      	mov	r4, r0
   e35c8:	6003      	str	r3, [r0, #0]
   e35ca:	f04f 0800 	mov.w	r8, #0
   e35ce:	07eb      	lsls	r3, r5, #31
   e35d0:	d50a      	bpl.n	e35e8 <__pow5mult+0x74>
   e35d2:	4639      	mov	r1, r7
   e35d4:	4622      	mov	r2, r4
   e35d6:	4630      	mov	r0, r6
   e35d8:	f7ff ff3b 	bl	e3452 <__multiply>
   e35dc:	4639      	mov	r1, r7
   e35de:	4681      	mov	r9, r0
   e35e0:	4630      	mov	r0, r6
   e35e2:	f7ff fe50 	bl	e3286 <_Bfree>
   e35e6:	464f      	mov	r7, r9
   e35e8:	106d      	asrs	r5, r5, #1
   e35ea:	d00c      	beq.n	e3606 <__pow5mult+0x92>
   e35ec:	6820      	ldr	r0, [r4, #0]
   e35ee:	b108      	cbz	r0, e35f4 <__pow5mult+0x80>
   e35f0:	4604      	mov	r4, r0
   e35f2:	e7ec      	b.n	e35ce <__pow5mult+0x5a>
   e35f4:	4622      	mov	r2, r4
   e35f6:	4621      	mov	r1, r4
   e35f8:	4630      	mov	r0, r6
   e35fa:	f7ff ff2a 	bl	e3452 <__multiply>
   e35fe:	6020      	str	r0, [r4, #0]
   e3600:	f8c0 8000 	str.w	r8, [r0]
   e3604:	e7f4      	b.n	e35f0 <__pow5mult+0x7c>
   e3606:	4638      	mov	r0, r7
   e3608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e360c:	000e4218 	.word	0x000e4218

000e3610 <__lshift>:
   e3610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3614:	460c      	mov	r4, r1
   e3616:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e361a:	6926      	ldr	r6, [r4, #16]
   e361c:	6849      	ldr	r1, [r1, #4]
   e361e:	68a3      	ldr	r3, [r4, #8]
   e3620:	4456      	add	r6, sl
   e3622:	4607      	mov	r7, r0
   e3624:	4691      	mov	r9, r2
   e3626:	1c75      	adds	r5, r6, #1
   e3628:	42ab      	cmp	r3, r5
   e362a:	da02      	bge.n	e3632 <__lshift+0x22>
   e362c:	3101      	adds	r1, #1
   e362e:	005b      	lsls	r3, r3, #1
   e3630:	e7fa      	b.n	e3628 <__lshift+0x18>
   e3632:	4638      	mov	r0, r7
   e3634:	f7ff fdf2 	bl	e321c <_Balloc>
   e3638:	2300      	movs	r3, #0
   e363a:	4680      	mov	r8, r0
   e363c:	f100 0114 	add.w	r1, r0, #20
   e3640:	461a      	mov	r2, r3
   e3642:	4553      	cmp	r3, sl
   e3644:	da03      	bge.n	e364e <__lshift+0x3e>
   e3646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e364a:	3301      	adds	r3, #1
   e364c:	e7f9      	b.n	e3642 <__lshift+0x32>
   e364e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e3652:	6920      	ldr	r0, [r4, #16]
   e3654:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e3658:	f019 091f 	ands.w	r9, r9, #31
   e365c:	f104 0114 	add.w	r1, r4, #20
   e3660:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e3664:	d014      	beq.n	e3690 <__lshift+0x80>
   e3666:	f1c9 0c20 	rsb	ip, r9, #32
   e366a:	2200      	movs	r2, #0
   e366c:	6808      	ldr	r0, [r1, #0]
   e366e:	fa00 f009 	lsl.w	r0, r0, r9
   e3672:	4302      	orrs	r2, r0
   e3674:	469a      	mov	sl, r3
   e3676:	f843 2b04 	str.w	r2, [r3], #4
   e367a:	f851 2b04 	ldr.w	r2, [r1], #4
   e367e:	458e      	cmp	lr, r1
   e3680:	fa22 f20c 	lsr.w	r2, r2, ip
   e3684:	d8f2      	bhi.n	e366c <__lshift+0x5c>
   e3686:	f8ca 2004 	str.w	r2, [sl, #4]
   e368a:	b142      	cbz	r2, e369e <__lshift+0x8e>
   e368c:	1cb5      	adds	r5, r6, #2
   e368e:	e006      	b.n	e369e <__lshift+0x8e>
   e3690:	3b04      	subs	r3, #4
   e3692:	f851 2b04 	ldr.w	r2, [r1], #4
   e3696:	f843 2f04 	str.w	r2, [r3, #4]!
   e369a:	458e      	cmp	lr, r1
   e369c:	d8f9      	bhi.n	e3692 <__lshift+0x82>
   e369e:	3d01      	subs	r5, #1
   e36a0:	4638      	mov	r0, r7
   e36a2:	f8c8 5010 	str.w	r5, [r8, #16]
   e36a6:	4621      	mov	r1, r4
   e36a8:	f7ff fded 	bl	e3286 <_Bfree>
   e36ac:	4640      	mov	r0, r8
   e36ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e36b2 <__mcmp>:
   e36b2:	6903      	ldr	r3, [r0, #16]
   e36b4:	690a      	ldr	r2, [r1, #16]
   e36b6:	1a9b      	subs	r3, r3, r2
   e36b8:	b510      	push	{r4, lr}
   e36ba:	d111      	bne.n	e36e0 <__mcmp+0x2e>
   e36bc:	0092      	lsls	r2, r2, #2
   e36be:	3014      	adds	r0, #20
   e36c0:	3114      	adds	r1, #20
   e36c2:	1883      	adds	r3, r0, r2
   e36c4:	440a      	add	r2, r1
   e36c6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e36ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e36ce:	428c      	cmp	r4, r1
   e36d0:	d002      	beq.n	e36d8 <__mcmp+0x26>
   e36d2:	d307      	bcc.n	e36e4 <__mcmp+0x32>
   e36d4:	2001      	movs	r0, #1
   e36d6:	bd10      	pop	{r4, pc}
   e36d8:	4298      	cmp	r0, r3
   e36da:	d3f4      	bcc.n	e36c6 <__mcmp+0x14>
   e36dc:	2000      	movs	r0, #0
   e36de:	bd10      	pop	{r4, pc}
   e36e0:	4618      	mov	r0, r3
   e36e2:	bd10      	pop	{r4, pc}
   e36e4:	f04f 30ff 	mov.w	r0, #4294967295
   e36e8:	bd10      	pop	{r4, pc}

000e36ea <__mdiff>:
   e36ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e36ee:	460c      	mov	r4, r1
   e36f0:	4607      	mov	r7, r0
   e36f2:	4611      	mov	r1, r2
   e36f4:	4620      	mov	r0, r4
   e36f6:	4615      	mov	r5, r2
   e36f8:	f7ff ffdb 	bl	e36b2 <__mcmp>
   e36fc:	1e06      	subs	r6, r0, #0
   e36fe:	d108      	bne.n	e3712 <__mdiff+0x28>
   e3700:	4631      	mov	r1, r6
   e3702:	4638      	mov	r0, r7
   e3704:	f7ff fd8a 	bl	e321c <_Balloc>
   e3708:	2301      	movs	r3, #1
   e370a:	6103      	str	r3, [r0, #16]
   e370c:	6146      	str	r6, [r0, #20]
   e370e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3712:	bfbc      	itt	lt
   e3714:	4623      	movlt	r3, r4
   e3716:	462c      	movlt	r4, r5
   e3718:	4638      	mov	r0, r7
   e371a:	6861      	ldr	r1, [r4, #4]
   e371c:	bfba      	itte	lt
   e371e:	461d      	movlt	r5, r3
   e3720:	2601      	movlt	r6, #1
   e3722:	2600      	movge	r6, #0
   e3724:	f7ff fd7a 	bl	e321c <_Balloc>
   e3728:	692b      	ldr	r3, [r5, #16]
   e372a:	60c6      	str	r6, [r0, #12]
   e372c:	6926      	ldr	r6, [r4, #16]
   e372e:	f105 0914 	add.w	r9, r5, #20
   e3732:	3414      	adds	r4, #20
   e3734:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e3738:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e373c:	f100 0514 	add.w	r5, r0, #20
   e3740:	f04f 0c00 	mov.w	ip, #0
   e3744:	f854 3b04 	ldr.w	r3, [r4], #4
   e3748:	f859 2b04 	ldr.w	r2, [r9], #4
   e374c:	fa1c f183 	uxtah	r1, ip, r3
   e3750:	fa1f fe82 	uxth.w	lr, r2
   e3754:	0c12      	lsrs	r2, r2, #16
   e3756:	ebce 0101 	rsb	r1, lr, r1
   e375a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e375e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e3762:	b289      	uxth	r1, r1
   e3764:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3768:	45c8      	cmp	r8, r9
   e376a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e376e:	46a6      	mov	lr, r4
   e3770:	f845 3b04 	str.w	r3, [r5], #4
   e3774:	d8e6      	bhi.n	e3744 <__mdiff+0x5a>
   e3776:	45be      	cmp	lr, r7
   e3778:	d20e      	bcs.n	e3798 <__mdiff+0xae>
   e377a:	f85e 1b04 	ldr.w	r1, [lr], #4
   e377e:	fa1c f281 	uxtah	r2, ip, r1
   e3782:	1413      	asrs	r3, r2, #16
   e3784:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e3788:	b292      	uxth	r2, r2
   e378a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e378e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e3792:	f845 2b04 	str.w	r2, [r5], #4
   e3796:	e7ee      	b.n	e3776 <__mdiff+0x8c>
   e3798:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e379c:	b90b      	cbnz	r3, e37a2 <__mdiff+0xb8>
   e379e:	3e01      	subs	r6, #1
   e37a0:	e7fa      	b.n	e3798 <__mdiff+0xae>
   e37a2:	6106      	str	r6, [r0, #16]
   e37a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e37a8 <__ulp>:
   e37a8:	4b12      	ldr	r3, [pc, #72]	; (e37f4 <__ulp+0x4c>)
   e37aa:	ee10 2a90 	vmov	r2, s1
   e37ae:	401a      	ands	r2, r3
   e37b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e37b4:	2b00      	cmp	r3, #0
   e37b6:	dd02      	ble.n	e37be <__ulp+0x16>
   e37b8:	2000      	movs	r0, #0
   e37ba:	4619      	mov	r1, r3
   e37bc:	e017      	b.n	e37ee <__ulp+0x46>
   e37be:	425b      	negs	r3, r3
   e37c0:	151b      	asrs	r3, r3, #20
   e37c2:	2b13      	cmp	r3, #19
   e37c4:	f04f 0000 	mov.w	r0, #0
   e37c8:	f04f 0100 	mov.w	r1, #0
   e37cc:	dc04      	bgt.n	e37d8 <__ulp+0x30>
   e37ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e37d2:	fa42 f103 	asr.w	r1, r2, r3
   e37d6:	e00a      	b.n	e37ee <__ulp+0x46>
   e37d8:	3b14      	subs	r3, #20
   e37da:	2b1e      	cmp	r3, #30
   e37dc:	f04f 0201 	mov.w	r2, #1
   e37e0:	bfda      	itte	le
   e37e2:	f1c3 031f 	rsble	r3, r3, #31
   e37e6:	fa02 f303 	lslle.w	r3, r2, r3
   e37ea:	4613      	movgt	r3, r2
   e37ec:	4618      	mov	r0, r3
   e37ee:	ec41 0b10 	vmov	d0, r0, r1
   e37f2:	4770      	bx	lr
   e37f4:	7ff00000 	.word	0x7ff00000

000e37f8 <__b2d>:
   e37f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e37fa:	6905      	ldr	r5, [r0, #16]
   e37fc:	f100 0614 	add.w	r6, r0, #20
   e3800:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e3804:	1f2f      	subs	r7, r5, #4
   e3806:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e380a:	4620      	mov	r0, r4
   e380c:	f7ff fdcb 	bl	e33a6 <__hi0bits>
   e3810:	f1c0 0320 	rsb	r3, r0, #32
   e3814:	280a      	cmp	r0, #10
   e3816:	600b      	str	r3, [r1, #0]
   e3818:	dc14      	bgt.n	e3844 <__b2d+0x4c>
   e381a:	f1c0 0e0b 	rsb	lr, r0, #11
   e381e:	fa24 f10e 	lsr.w	r1, r4, lr
   e3822:	42be      	cmp	r6, r7
   e3824:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e3828:	bf34      	ite	cc
   e382a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e382e:	2100      	movcs	r1, #0
   e3830:	3015      	adds	r0, #21
   e3832:	fa04 f000 	lsl.w	r0, r4, r0
   e3836:	fa21 f10e 	lsr.w	r1, r1, lr
   e383a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e383e:	ea40 0201 	orr.w	r2, r0, r1
   e3842:	e023      	b.n	e388c <__b2d+0x94>
   e3844:	42be      	cmp	r6, r7
   e3846:	bf3a      	itte	cc
   e3848:	f1a5 0708 	subcc.w	r7, r5, #8
   e384c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e3850:	2100      	movcs	r1, #0
   e3852:	380b      	subs	r0, #11
   e3854:	d015      	beq.n	e3882 <__b2d+0x8a>
   e3856:	4084      	lsls	r4, r0
   e3858:	f1c0 0520 	rsb	r5, r0, #32
   e385c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e3860:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e3864:	42b7      	cmp	r7, r6
   e3866:	fa21 fe05 	lsr.w	lr, r1, r5
   e386a:	ea44 030e 	orr.w	r3, r4, lr
   e386e:	bf8c      	ite	hi
   e3870:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e3874:	2400      	movls	r4, #0
   e3876:	fa01 f000 	lsl.w	r0, r1, r0
   e387a:	40ec      	lsrs	r4, r5
   e387c:	ea40 0204 	orr.w	r2, r0, r4
   e3880:	e004      	b.n	e388c <__b2d+0x94>
   e3882:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e3886:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e388a:	460a      	mov	r2, r1
   e388c:	ec43 2b10 	vmov	d0, r2, r3
   e3890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e3892 <__d2b>:
   e3892:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3896:	460e      	mov	r6, r1
   e3898:	2101      	movs	r1, #1
   e389a:	ec59 8b10 	vmov	r8, r9, d0
   e389e:	4615      	mov	r5, r2
   e38a0:	f7ff fcbc 	bl	e321c <_Balloc>
   e38a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e38a8:	4607      	mov	r7, r0
   e38aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e38ae:	b10c      	cbz	r4, e38b4 <__d2b+0x22>
   e38b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e38b4:	9301      	str	r3, [sp, #4]
   e38b6:	f1b8 0f00 	cmp.w	r8, #0
   e38ba:	d019      	beq.n	e38f0 <__d2b+0x5e>
   e38bc:	a802      	add	r0, sp, #8
   e38be:	f840 8d08 	str.w	r8, [r0, #-8]!
   e38c2:	f7ff fd90 	bl	e33e6 <__lo0bits>
   e38c6:	9b00      	ldr	r3, [sp, #0]
   e38c8:	b148      	cbz	r0, e38de <__d2b+0x4c>
   e38ca:	9a01      	ldr	r2, [sp, #4]
   e38cc:	f1c0 0120 	rsb	r1, r0, #32
   e38d0:	fa02 f101 	lsl.w	r1, r2, r1
   e38d4:	430b      	orrs	r3, r1
   e38d6:	40c2      	lsrs	r2, r0
   e38d8:	617b      	str	r3, [r7, #20]
   e38da:	9201      	str	r2, [sp, #4]
   e38dc:	e000      	b.n	e38e0 <__d2b+0x4e>
   e38de:	617b      	str	r3, [r7, #20]
   e38e0:	9b01      	ldr	r3, [sp, #4]
   e38e2:	61bb      	str	r3, [r7, #24]
   e38e4:	2b00      	cmp	r3, #0
   e38e6:	bf14      	ite	ne
   e38e8:	2102      	movne	r1, #2
   e38ea:	2101      	moveq	r1, #1
   e38ec:	6139      	str	r1, [r7, #16]
   e38ee:	e007      	b.n	e3900 <__d2b+0x6e>
   e38f0:	a801      	add	r0, sp, #4
   e38f2:	f7ff fd78 	bl	e33e6 <__lo0bits>
   e38f6:	9b01      	ldr	r3, [sp, #4]
   e38f8:	617b      	str	r3, [r7, #20]
   e38fa:	2101      	movs	r1, #1
   e38fc:	6139      	str	r1, [r7, #16]
   e38fe:	3020      	adds	r0, #32
   e3900:	b134      	cbz	r4, e3910 <__d2b+0x7e>
   e3902:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e3906:	4404      	add	r4, r0
   e3908:	6034      	str	r4, [r6, #0]
   e390a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e390e:	e009      	b.n	e3924 <__d2b+0x92>
   e3910:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e3914:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e3918:	6030      	str	r0, [r6, #0]
   e391a:	6918      	ldr	r0, [r3, #16]
   e391c:	f7ff fd43 	bl	e33a6 <__hi0bits>
   e3920:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e3924:	6028      	str	r0, [r5, #0]
   e3926:	4638      	mov	r0, r7
   e3928:	b003      	add	sp, #12
   e392a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e392e <__ratio>:
   e392e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e3932:	4688      	mov	r8, r1
   e3934:	4669      	mov	r1, sp
   e3936:	4681      	mov	r9, r0
   e3938:	f7ff ff5e 	bl	e37f8 <__b2d>
   e393c:	a901      	add	r1, sp, #4
   e393e:	4640      	mov	r0, r8
   e3940:	ec55 4b10 	vmov	r4, r5, d0
   e3944:	f7ff ff58 	bl	e37f8 <__b2d>
   e3948:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e394c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e3950:	1a9a      	subs	r2, r3, r2
   e3952:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e3956:	1ac9      	subs	r1, r1, r3
   e3958:	ec57 6b10 	vmov	r6, r7, d0
   e395c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e3960:	2b00      	cmp	r3, #0
   e3962:	bfcc      	ite	gt
   e3964:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e3968:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e396c:	4632      	mov	r2, r6
   e396e:	463b      	mov	r3, r7
   e3970:	4620      	mov	r0, r4
   e3972:	4629      	mov	r1, r5
   e3974:	f7fd fbc0 	bl	e10f8 <__aeabi_ddiv>
   e3978:	ec41 0b10 	vmov	d0, r0, r1
   e397c:	b003      	add	sp, #12
   e397e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e3982 <__copybits>:
   e3982:	3901      	subs	r1, #1
   e3984:	b510      	push	{r4, lr}
   e3986:	1149      	asrs	r1, r1, #5
   e3988:	6914      	ldr	r4, [r2, #16]
   e398a:	3101      	adds	r1, #1
   e398c:	f102 0314 	add.w	r3, r2, #20
   e3990:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e3994:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e3998:	42a3      	cmp	r3, r4
   e399a:	4602      	mov	r2, r0
   e399c:	d204      	bcs.n	e39a8 <__copybits+0x26>
   e399e:	f853 2b04 	ldr.w	r2, [r3], #4
   e39a2:	f840 2b04 	str.w	r2, [r0], #4
   e39a6:	e7f7      	b.n	e3998 <__copybits+0x16>
   e39a8:	2300      	movs	r3, #0
   e39aa:	428a      	cmp	r2, r1
   e39ac:	d202      	bcs.n	e39b4 <__copybits+0x32>
   e39ae:	f842 3b04 	str.w	r3, [r2], #4
   e39b2:	e7fa      	b.n	e39aa <__copybits+0x28>
   e39b4:	bd10      	pop	{r4, pc}

000e39b6 <__any_on>:
   e39b6:	f100 0214 	add.w	r2, r0, #20
   e39ba:	6900      	ldr	r0, [r0, #16]
   e39bc:	114b      	asrs	r3, r1, #5
   e39be:	4298      	cmp	r0, r3
   e39c0:	b510      	push	{r4, lr}
   e39c2:	db0c      	blt.n	e39de <__any_on+0x28>
   e39c4:	dd0c      	ble.n	e39e0 <__any_on+0x2a>
   e39c6:	f011 011f 	ands.w	r1, r1, #31
   e39ca:	d009      	beq.n	e39e0 <__any_on+0x2a>
   e39cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e39d0:	fa24 f001 	lsr.w	r0, r4, r1
   e39d4:	fa00 f101 	lsl.w	r1, r0, r1
   e39d8:	428c      	cmp	r4, r1
   e39da:	d10c      	bne.n	e39f6 <__any_on+0x40>
   e39dc:	e000      	b.n	e39e0 <__any_on+0x2a>
   e39de:	4603      	mov	r3, r0
   e39e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e39e4:	4293      	cmp	r3, r2
   e39e6:	d904      	bls.n	e39f2 <__any_on+0x3c>
   e39e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e39ec:	2900      	cmp	r1, #0
   e39ee:	d0f9      	beq.n	e39e4 <__any_on+0x2e>
   e39f0:	e001      	b.n	e39f6 <__any_on+0x40>
   e39f2:	2000      	movs	r0, #0
   e39f4:	bd10      	pop	{r4, pc}
   e39f6:	2001      	movs	r0, #1
   e39f8:	bd10      	pop	{r4, pc}

000e39fa <_calloc_r>:
   e39fa:	b538      	push	{r3, r4, r5, lr}
   e39fc:	fb02 f401 	mul.w	r4, r2, r1
   e3a00:	4621      	mov	r1, r4
   e3a02:	f7fa fed5 	bl	de7b0 <_malloc_r>
   e3a06:	4605      	mov	r5, r0
   e3a08:	b118      	cbz	r0, e3a12 <_calloc_r+0x18>
   e3a0a:	4622      	mov	r2, r4
   e3a0c:	2100      	movs	r1, #0
   e3a0e:	f7fd fea3 	bl	e1758 <memset>
   e3a12:	4628      	mov	r0, r5
   e3a14:	bd38      	pop	{r3, r4, r5, pc}

000e3a16 <__env_lock>:
   e3a16:	4770      	bx	lr

000e3a18 <__env_unlock>:
   e3a18:	4770      	bx	lr

000e3a1a <link_code_end>:
	...

000e3a1c <dynalib_user>:
   e3a1c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e3a2c:	0000 0000 6f6d 6564 0030 6f6d 6564 0031     ....mode0.mode1.
   e3a3c:	6553 7474 6e69 7367 5700 4669 0069 6953     Settings.WiFi.Si
   e3a4c:	2067 7453 6772 6874 5400 6d69 2065 6f7a     g Strgth.Time zo
   e3a5c:	656e 5300 7379 7620 7372 006e 7344 2070     ne.Sys vrsn.Dsp 
   e3a6c:	7477 7268 4700 7465 4320 324f 4700 7465     wthr.Get CO2.Get
   e3a7c:	7420 706d 4400 6b72 6320 726c 4d00 6e69      tmp.Drk clr.Min
   e3a8c:	2069 6c63 006b 4559 0053 4f4e 5200 4445     i clk.YES.NO.RED
   e3a9c:	4700 4552 4e45 4200 554c 0045 6850 746f     .GREEN.BLUE.Phot
   e3aac:	006f 6f43 0032 6e49 6973 6564 5420 6d65     o.Co2.Inside Tem
   e3abc:	0070 4545 5250 4d4f 6800 6f6f 2d6b 6572     p.EEPROM.hook-re
   e3acc:	7073 6e6f 6573 572f 6165 6874 7265 6800     sponse/Weather.h
   e3adc:	6f6f 2d6b 6572 7073 6e6f 6573 632f 326f     ook-response/co2
   e3aec:	6164 0074 6f68 6b6f 722d 7365 6f70 736e     dat.hook-respons
   e3afc:	2f65 7469 6d65 6470 7461 6800 6f6f 2d6b     e/itempdat.hook-
   e3b0c:	6572 7073 6e6f 6573 672f 7465 7453 7461     response/getStat
   e3b1c:	0065 6f74 6767 656c 7442 006e 6370 6f6c     e.toggleBtn.pclo
   e3b2c:	6b63 3939 0039 4f43 3a32 7400 676f 6c67     ck999.CO2:.toggl
   e3b3c:	0065 7462 706e 6572 7373 3939 0039 0000     e.btnpress999...
   e3b4c:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000e3b58 <CSWTCH.65>:
   e3b58:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   e3b68:	0050 0000                                   P...

000e3b6c <_ZTVN5spark13EthernetClassE>:
	...
   e3b74:	e81f 000d e815 000d e80b 000d e801 000d     ................
   e3b84:	e7f5 000d e7e9 000d e7dd 000d e7d5 000d     ................
   e3b94:	e7cb 000d e7c1 000d 05c1 000e               ............

000e3ba0 <_ZTV3UDP>:
	...
   e3ba8:	eed1 000d eef5 000d e8ad 000d e9d7 000d     ................
   e3bb8:	e8a5 000d e8c3 000d e8e1 000d e8fb 000d     ................
   e3bc8:	e91f 000d e9bb 000d ecbd 000d ea5d 000d     ............]...
   e3bd8:	ebdd 000d e88d 000d ee65 000d eb61 000d     ........e...a...
   e3be8:	ea95 000d ee93 000d ea01 000d e89b 000d     ................
   e3bf8:	ea3d 000d e8a1 000d e8fd 000d fff0 ffff     =...............
   e3c08:	0000 0000 e917 000d 6162 6475 5300 7265     ........baud.Ser
   e3c18:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   e3c28:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   e3c38:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   e3c48:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   e3c58:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   e3c68:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   e3c78:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   e3c88:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   e3c98:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   e3ca8:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   e3cb8:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   e3cc8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   e3cd8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   e3ce8:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   e3cf8:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e3d08:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e3d14 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e3d1c:	f3d9 000d f3df 000d f423 000d f3ed 000d     ........#.......
   e3d2c:	f3db 000d                                   ....

000e3d30 <_ZTV9IPAddress>:
	...
   e3d38:	f971 000d f961 000d f963 000d               q...a...c...

000e3d44 <_ZTV9USBSerial>:
	...
   e3d4c:	fa75 000d fac5 000d fad3 000d f01d 000d     u...............
   e3d5c:	fab1 000d fa77 000d fa8d 000d fabf 000d     ....w...........
   e3d6c:	faa3 000d fa71 000d                         ....q...

000e3d74 <_ZTV11USARTSerial>:
	...
   e3d7c:	fb79 000d fbc9 000d fbd7 000d f01d 000d     y...............
   e3d8c:	fb8d 000d fbaf 000d fb9b 000d fbc3 000d     ................
   e3d9c:	fb7b 000d fb7f 000d                         {.......

000e3da4 <_ZTV7TwoWire>:
	...
   e3dac:	fca5 000d fcef 000d fcc7 000d fca7 000d     ................
   e3dbc:	fccf 000d fcd7 000d fcdf 000d fce7 000d     ................

000e3dcc <_ZTVN5spark9MeshClassE>:
	...
   e3dd4:	fdb5 000d fdab 000d fda1 000d fd97 000d     ................
   e3de4:	fd8b 000d fd7f 000d fd73 000d fd6b 000d     ........s...k...
   e3df4:	fd61 000d fd57 000d 05c1 000e 6666 3330     a...W.......ff03
   e3e04:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   e3e14:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   e3e24:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000e3e30 <_ZTVN5spark9WiFiClassE>:
	...
   e3e38:	042d 000e 0423 000e 0419 000e 03c1 000e     -...#...........
   e3e48:	040d 000e 0401 000e 03f5 000e 03ed 000e     ................
   e3e58:	03e3 000e 03d9 000e 05c1 000e               ............

000e3e64 <_ZTV10WiFiSignal>:
	...
   e3e6c:	0361 000e 03cb 000e 0363 000e 046d 000e     a.......c...m...
   e3e7c:	0369 000e 0439 000e 0395 000e               i...9.......

000e3e88 <_ZTVN5spark12NetworkClassE>:
	...
   e3e90:	0559 000e 0563 000e 056d 000e 0577 000e     Y...c...m...w...
   e3ea0:	0581 000e 058d 000e 0599 000e 05a5 000e     ................
   e3eb0:	05ad 000e 05b7 000e 05c1 000e               ............

000e3ebc <_ZSt7nothrow>:
	...

000e3ebd <_ctype_>:
   e3ebd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e3ecd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e3edd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e3eed:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e3efd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e3f0d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e3f1d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e3f2d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e3f3d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e3fc0 <__sf_fake_stdin>:
	...

000e3fe0 <__sf_fake_stdout>:
	...

000e4000 <__sf_fake_stderr>:
	...
   e4020:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000e402c <__month_lengths>:
   e402c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e403c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e404c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e405c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e406c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e407c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e408c <fpi.5344>:
   e408c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e409c:	0000 0000                                   ....

000e40a0 <fpinan.5380>:
   e40a0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e40b0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000e40c0 <tinytens>:
   e40c0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e40d0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e40e0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   e40f0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   e4100:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   e4110:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   e4120:	2575 006e 0000 0000                         u%n.....

000e4128 <__mprec_tens>:
   e4128:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e4138:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e4148:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e4158:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e4168:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4178:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4188:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4198:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e41a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e41b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e41c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e41d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e41e8:	9db4 79d9 7843 44ea                         ...yCx.D

000e41f0 <__mprec_bigtens>:
   e41f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4200:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4210:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e4218 <p05.5387>:
   e4218:	0005 0000 0019 0000 007d 0000               ........}...

000e4224 <link_const_variable_data_end>:
   e4224:	000ddbd9 	.word	0x000ddbd9
   e4228:	000de0c1 	.word	0x000de0c1
   e422c:	000de829 	.word	0x000de829
   e4230:	000de859 	.word	0x000de859
   e4234:	000deff5 	.word	0x000deff5
   e4238:	000df0b5 	.word	0x000df0b5
   e423c:	000df20d 	.word	0x000df20d
   e4240:	000df2ad 	.word	0x000df2ad
   e4244:	000e0311 	.word	0x000e0311
   e4248:	000e0545 	.word	0x000e0545
   e424c:	000e068d 	.word	0x000e068d
   e4250:	000e08a5 	.word	0x000e08a5
   e4254:	000e0929 	.word	0x000e0929
   e4258:	000e09ed 	.word	0x000e09ed
   e425c:	000e0ab1 	.word	0x000e0ab1
