
c:/Users/mligh/OneDrive/Particle/ArgonClock/argonclock/target/1.5.2/argon/argonclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010d40  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e4d60  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e1f8  000e4d64  0002e1f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000508  2003e2e8  2003e2e8  0003e2e8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e4e54  000e4e54  00034e54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e4e7c  000e4e7c  00034e7c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00111972  00000000  00000000  00034e80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001384a  00000000  00000000  001467f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024eee  00000000  00000000  0015a03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d10  00000000  00000000  0017ef2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005230  00000000  00000000  00181c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003836d  00000000  00000000  00186e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f92e  00000000  00000000  001bf1d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108303  00000000  00000000  001eeb05  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eb40  00000000  00000000  002f6e08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00e f906 	bl	e2242 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00e f90b 	bl	e2258 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1f8 	.word	0x2003e1f8
   d404c:	000e4d64 	.word	0x000e4d64
   d4050:	2003e2e8 	.word	0x2003e2e8
   d4054:	2003e2e8 	.word	0x2003e2e8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f00b fef9 	bl	dfe54 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e4d60 	.word	0x000e4d60
   d4084:	000e4d24 	.word	0x000e4d24

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f009 b8f8 	b.w	dd27c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f009 f9f7 	bl	dd480 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f00b be9f 	b.w	dfdd8 <_post_loop>

000d409a <_Znwj>:
   d409a:	f00b b8bd 	b.w	df218 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f00b b8bb 	b.w	df218 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f00b b8c1 	b.w	df228 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f00b b8bf 	b.w	df228 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z8mshHdlr2PKcS0_>:
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d40bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40be:	4c0f      	ldr	r4, [pc, #60]	; (d40fc <_Z8mshHdlr2PKcS0_+0x40>)
   d40c0:	2300      	movs	r3, #0
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d40c2:	460d      	mov	r5, r1
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40c4:	6023      	str	r3, [r4, #0]
   d40c6:	4628      	mov	r0, r5
   d40c8:	f00e f923 	bl	e2312 <strlen>
   d40cc:	6823      	ldr	r3, [r4, #0]
   d40ce:	4298      	cmp	r0, r3
   d40d0:	d90f      	bls.n	d40f2 <_Z8mshHdlr2PKcS0_+0x36>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
   d40d2:	5cea      	ldrb	r2, [r5, r3]
   d40d4:	2a75      	cmp	r2, #117	; 0x75
   d40d6:	d109      	bne.n	d40ec <_Z8mshHdlr2PKcS0_+0x30>
   d40d8:	18ea      	adds	r2, r5, r3
   d40da:	7851      	ldrb	r1, [r2, #1]
   d40dc:	296c      	cmp	r1, #108	; 0x6c
   d40de:	d105      	bne.n	d40ec <_Z8mshHdlr2PKcS0_+0x30>
   d40e0:	7891      	ldrb	r1, [r2, #2]
   d40e2:	2974      	cmp	r1, #116	; 0x74
            dat[0] = data[i+5];
   d40e4:	bf04      	itt	eq
   d40e6:	7952      	ldrbeq	r2, [r2, #5]
   d40e8:	f88d 2004 	strbeq.w	r2, [sp, #4]
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40ec:	3301      	adds	r3, #1
   d40ee:	6023      	str	r3, [r4, #0]
   d40f0:	e7e9      	b.n	d40c6 <_Z8mshHdlr2PKcS0_+0xa>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
            dat[0] = data[i+5];
        }
    }
    lmpmode = atof(dat);
   d40f2:	a801      	add	r0, sp, #4
   d40f4:	f00d ff88 	bl	e2008 <atof>
    else{
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
   d40f8:	b003      	add	sp, #12
   d40fa:	bd30      	pop	{r4, r5, pc}
   d40fc:	2003e33c 	.word	0x2003e33c

000d4100 <_Z9itHandlerPKcS0_>:
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d4100:	b537      	push	{r0, r1, r2, r4, r5, lr}
    for(j=0;j<strlen(data);j++){
   d4102:	4c27      	ldr	r4, [pc, #156]	; (d41a0 <_Z9itHandlerPKcS0_+0xa0>)
   d4104:	2300      	movs	r3, #0
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d4106:	460d      	mov	r5, r1
    for(j=0;j<strlen(data);j++){
   d4108:	6023      	str	r3, [r4, #0]
   d410a:	4628      	mov	r0, r5
   d410c:	f00e f901 	bl	e2312 <strlen>
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4298      	cmp	r0, r3
   d4114:	d93c      	bls.n	d4190 <_Z9itHandlerPKcS0_+0x90>
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d4116:	5cea      	ldrb	r2, [r5, r3]
   d4118:	2a6c      	cmp	r2, #108	; 0x6c
   d411a:	d115      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d411c:	442b      	add	r3, r5
   d411e:	785a      	ldrb	r2, [r3, #1]
   d4120:	2a75      	cmp	r2, #117	; 0x75
   d4122:	d111      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4124:	789a      	ldrb	r2, [r3, #2]
   d4126:	2a65      	cmp	r2, #101	; 0x65
   d4128:	d10e      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d412a:	78da      	ldrb	r2, [r3, #3]
   d412c:	2a22      	cmp	r2, #34	; 0x22
   d412e:	d10b      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4130:	791a      	ldrb	r2, [r3, #4]
   d4132:	2a3a      	cmp	r2, #58	; 0x3a
   d4134:	d108      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4136:	795a      	ldrb	r2, [r3, #5]
   d4138:	2a22      	cmp	r2, #34	; 0x22
            tempdat[0] = data[j+6];
   d413a:	bf01      	itttt	eq
   d413c:	799a      	ldrbeq	r2, [r3, #6]
            tempdat[1] = data[j+7];
   d413e:	79db      	ldrbeq	r3, [r3, #7]
    for(j=0;j<strlen(data);j++){
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            tempdat[0] = data[j+6];
   d4140:	f88d 2004 	strbeq.w	r2, [sp, #4]
            tempdat[1] = data[j+7];
   d4144:	f88d 3005 	strbeq.w	r3, [sp, #5]
            //tempdat[2] = data[j+8];
            //tempdat[3] = data[j+9];
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
   d4148:	a801      	add	r0, sp, #4
   d414a:	f00d ff5d 	bl	e2008 <atof>
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
   d414e:	2200      	movs	r2, #0
   d4150:	ec51 0b10 	vmov	r0, r1, d0
   d4154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d4158:	f00d fa70 	bl	e163c <__aeabi_dsub>
   d415c:	f00d ff04 	bl	e1f68 <__aeabi_d2f>
   d4160:	f00d fbcc 	bl	e18fc <__aeabi_f2d>
   d4164:	a30c      	add	r3, pc, #48	; (adr r3, d4198 <_Z9itHandlerPKcS0_+0x98>)
   d4166:	e9d3 2300 	ldrd	r2, r3, [r3]
   d416a:	f00d fc1b 	bl	e19a4 <__aeabi_dmul>
   d416e:	4b0d      	ldr	r3, [pc, #52]	; (d41a4 <_Z9itHandlerPKcS0_+0xa4>)
   d4170:	2200      	movs	r2, #0
   d4172:	f00d fa65 	bl	e1640 <__adddf3>
   d4176:	f00d fef7 	bl	e1f68 <__aeabi_d2f>
   d417a:	ee07 0a90 	vmov	s15, r0
   d417e:	4b0a      	ldr	r3, [pc, #40]	; (d41a8 <_Z9itHandlerPKcS0_+0xa8>)
   d4180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4184:	edc3 7a00 	vstr	s15, [r3]
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	3301      	adds	r3, #1
   d418c:	6023      	str	r3, [r4, #0]
   d418e:	e7bc      	b.n	d410a <_Z9itHandlerPKcS0_+0xa>
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   d4190:	b003      	add	sp, #12
   d4192:	bd30      	pop	{r4, r5, pc}
   d4194:	f3af 8000 	nop.w
   d4198:	cccccccd 	.word	0xcccccccd
   d419c:	3ffccccc 	.word	0x3ffccccc
   d41a0:	2003e340 	.word	0x2003e340
   d41a4:	40400000 	.word	0x40400000
   d41a8:	2003e344 	.word	0x2003e344

000d41ac <_Z10myHandler2PKcS0_>:
    TC1 = TFahr/10;
    TC2 = TFahr%10;
    strip.show();
    delay(10);
}
void myHandler2(const char *event, const char *data) {
   d41ac:	b510      	push	{r4, lr}
   d41ae:	460c      	mov	r4, r1
    if(strcmp(data,"mode0")==0)
   d41b0:	4620      	mov	r0, r4
   d41b2:	4912      	ldr	r1, [pc, #72]	; (d41fc <_Z10myHandler2PKcS0_+0x50>)
   d41b4:	f00e f880 	bl	e22b8 <strcmp>
   d41b8:	b978      	cbnz	r0, d41da <_Z10myHandler2PKcS0_+0x2e>
    {
        if(analogRead(A4) > bound)
   d41ba:	200f      	movs	r0, #15
   d41bc:	f00d f863 	bl	e1286 <analogRead>
   d41c0:	4b0f      	ldr	r3, [pc, #60]	; (d4200 <_Z10myHandler2PKcS0_+0x54>)
   d41c2:	681b      	ldr	r3, [r3, #0]
   d41c4:	4298      	cmp	r0, r3
   d41c6:	dd08      	ble.n	d41da <_Z10myHandler2PKcS0_+0x2e>
        {
            strip.clear();
   d41c8:	480e      	ldr	r0, [pc, #56]	; (d4204 <_Z10myHandler2PKcS0_+0x58>)
   d41ca:	f00a fcc8 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
            scan = 2;
   d41ce:	4b0e      	ldr	r3, [pc, #56]	; (d4208 <_Z10myHandler2PKcS0_+0x5c>)
   d41d0:	2202      	movs	r2, #2
   d41d2:	601a      	str	r2, [r3, #0]
            dmode = 1;
   d41d4:	4b0d      	ldr	r3, [pc, #52]	; (d420c <_Z10myHandler2PKcS0_+0x60>)
   d41d6:	2201      	movs	r2, #1
   d41d8:	601a      	str	r2, [r3, #0]
        }
    }
    if(strcmp(data,"mode1")==0)
   d41da:	490d      	ldr	r1, [pc, #52]	; (d4210 <_Z10myHandler2PKcS0_+0x64>)
   d41dc:	4620      	mov	r0, r4
   d41de:	f00e f86b 	bl	e22b8 <strcmp>
   d41e2:	b948      	cbnz	r0, d41f8 <_Z10myHandler2PKcS0_+0x4c>
    {
        if(analogRead(A4) > bound)
   d41e4:	200f      	movs	r0, #15
   d41e6:	f00d f84e 	bl	e1286 <analogRead>
   d41ea:	4b05      	ldr	r3, [pc, #20]	; (d4200 <_Z10myHandler2PKcS0_+0x54>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	4298      	cmp	r0, r3
        {
            dmode = 2;
   d41f0:	bfc2      	ittt	gt
   d41f2:	4b06      	ldrgt	r3, [pc, #24]	; (d420c <_Z10myHandler2PKcS0_+0x60>)
   d41f4:	2202      	movgt	r2, #2
   d41f6:	601a      	strgt	r2, [r3, #0]
   d41f8:	bd10      	pop	{r4, pc}
   d41fa:	bf00      	nop
   d41fc:	000e4530 	.word	0x000e4530
   d4200:	2003e338 	.word	0x2003e338
   d4204:	2003e31c 	.word	0x2003e31c
   d4208:	2003e30c 	.word	0x2003e30c
   d420c:	2003e330 	.word	0x2003e330
   d4210:	000e4536 	.word	0x000e4536

000d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>:
     * @note The periodic functionality is not available for the Spark Core.
     */
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
   d4214:	b513      	push	{r0, r1, r4, lr}
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4216:	2400      	movs	r4, #0
   d4218:	4613      	mov	r3, r2
   d421a:	9401      	str	r4, [sp, #4]
   d421c:	9400      	str	r4, [sp, #0]
   d421e:	4622      	mov	r2, r4
   d4220:	f00a ffda 	bl	df1d8 <spark_subscribe>
    }
   d4224:	b002      	add	sp, #8
   d4226:	bd10      	pop	{r4, pc}

000d4228 <_ZN11EEPROMClass4readEi.isra.9>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4228:	f00a bd60 	b.w	decec <HAL_EEPROM_Read>

000d422c <_Z10co2HandlerPKcS0_>:
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d422c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for(j=0;j<strlen(data);j++){
   d4230:	4d51      	ldr	r5, [pc, #324]	; (d4378 <_Z10co2HandlerPKcS0_+0x14c>)
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d4232:	f8df 915c 	ldr.w	r9, [pc, #348]	; d4390 <_Z10co2HandlerPKcS0_+0x164>
   d4236:	f8df a144 	ldr.w	sl, [pc, #324]	; d437c <_Z10co2HandlerPKcS0_+0x150>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d423a:	2300      	movs	r3, #0
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d423c:	b085      	sub	sp, #20
   d423e:	460e      	mov	r6, r1
    for(j=0;j<strlen(data);j++){
   d4240:	602b      	str	r3, [r5, #0]
   d4242:	4630      	mov	r0, r6
   d4244:	f00e f865 	bl	e2312 <strlen>
   d4248:	682b      	ldr	r3, [r5, #0]
   d424a:	4298      	cmp	r0, r3
   d424c:	f240 8090 	bls.w	d4370 <_Z10co2HandlerPKcS0_+0x144>
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d4250:	5cf2      	ldrb	r2, [r6, r3]
   d4252:	2a6c      	cmp	r2, #108	; 0x6c
   d4254:	d11b      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
   d4256:	4433      	add	r3, r6
   d4258:	785a      	ldrb	r2, [r3, #1]
   d425a:	2a75      	cmp	r2, #117	; 0x75
   d425c:	d117      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
   d425e:	789a      	ldrb	r2, [r3, #2]
   d4260:	2a65      	cmp	r2, #101	; 0x65
   d4262:	d114      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
   d4264:	78da      	ldrb	r2, [r3, #3]
   d4266:	2a22      	cmp	r2, #34	; 0x22
   d4268:	d111      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
   d426a:	791a      	ldrb	r2, [r3, #4]
   d426c:	2a3a      	cmp	r2, #58	; 0x3a
   d426e:	d10e      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
   d4270:	795a      	ldrb	r2, [r3, #5]
   d4272:	2a22      	cmp	r2, #34	; 0x22
   d4274:	d10b      	bne.n	d428e <_Z10co2HandlerPKcS0_+0x62>
            codat[0] = data[j+6];
   d4276:	799a      	ldrb	r2, [r3, #6]
   d4278:	f88d 200c 	strb.w	r2, [sp, #12]
            codat[1] = data[j+7];
   d427c:	79da      	ldrb	r2, [r3, #7]
   d427e:	f88d 200d 	strb.w	r2, [sp, #13]
            codat[2] = data[j+8];
   d4282:	7a1a      	ldrb	r2, [r3, #8]
            codat[3] = data[j+9];
   d4284:	7a5b      	ldrb	r3, [r3, #9]
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            codat[0] = data[j+6];
            codat[1] = data[j+7];
            codat[2] = data[j+8];
   d4286:	f88d 200e 	strb.w	r2, [sp, #14]
            codat[3] = data[j+9];
   d428a:	f88d 300f 	strb.w	r3, [sp, #15]
        }
        codata = atof(codat);
   d428e:	a803      	add	r0, sp, #12
   d4290:	f00d feba 	bl	e2008 <atof>
        ico2 = (int)codata;
   d4294:	ec51 0b10 	vmov	r0, r1, d0
   d4298:	f00d fe66 	bl	e1f68 <__aeabi_d2f>
   d429c:	ee07 0a90 	vmov	s15, r0
   d42a0:	4b36      	ldr	r3, [pc, #216]	; (d437c <_Z10co2HandlerPKcS0_+0x150>)
   d42a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d42a6:	200f      	movs	r0, #15
            codat[1] = data[j+7];
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
   d42a8:	edc3 7a00 	vstr	s15, [r3]
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d42ac:	f00c ffeb 	bl	e1286 <analogRead>
   d42b0:	f8d9 3000 	ldr.w	r3, [r9]
   d42b4:	4298      	cmp	r0, r3
   d42b6:	da1c      	bge.n	d42f2 <_Z10co2HandlerPKcS0_+0xc6>
   d42b8:	f00c fffc 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   d42bc:	2003      	movs	r0, #3
   d42be:	f7ff ffb3 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   d42c2:	2801      	cmp	r0, #1
   d42c4:	d115      	bne.n	d42f2 <_Z10co2HandlerPKcS0_+0xc6>
   d42c6:	e018      	b.n	d42fa <_Z10co2HandlerPKcS0_+0xce>
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d42c8:	4b2d      	ldr	r3, [pc, #180]	; (d4380 <_Z10co2HandlerPKcS0_+0x154>)
                if(i>248 && i<256){
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
   d42ca:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d4394 <_Z10co2HandlerPKcS0_+0x168>
   d42ce:	4f2d      	ldr	r7, [pc, #180]	; (d4384 <_Z10co2HandlerPKcS0_+0x158>)
   d42d0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d4398 <_Z10co2HandlerPKcS0_+0x16c>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d42d4:	22f8      	movs	r2, #248	; 0xf8
   d42d6:	601a      	str	r2, [r3, #0]
   d42d8:	6821      	ldr	r1, [r4, #0]
   d42da:	f8da 3000 	ldr.w	r3, [sl]
   d42de:	f240 22ee 	movw	r2, #750	; 0x2ee
   d42e2:	fb93 f3f2 	sdiv	r3, r3, r2
   d42e6:	33f7      	adds	r3, #247	; 0xf7
   d42e8:	428b      	cmp	r3, r1
   d42ea:	da1b      	bge.n	d4324 <_Z10co2HandlerPKcS0_+0xf8>
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
                    }
                }
            }
            strip.show();
   d42ec:	4826      	ldr	r0, [pc, #152]	; (d4388 <_Z10co2HandlerPKcS0_+0x15c>)
   d42ee:	f00a fa65 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d42f2:	682b      	ldr	r3, [r5, #0]
   d42f4:	3301      	adds	r3, #1
   d42f6:	602b      	str	r3, [r5, #0]
   d42f8:	e7a3      	b.n	d4242 <_Z10co2HandlerPKcS0_+0x16>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d42fa:	4c21      	ldr	r4, [pc, #132]	; (d4380 <_Z10co2HandlerPKcS0_+0x154>)
   d42fc:	23f8      	movs	r3, #248	; 0xf8
   d42fe:	6023      	str	r3, [r4, #0]
   d4300:	4627      	mov	r7, r4
                strip.setPixelColor(i,0,0,0);
   d4302:	f04f 0800 	mov.w	r8, #0
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d4306:	6821      	ldr	r1, [r4, #0]
   d4308:	29ff      	cmp	r1, #255	; 0xff
   d430a:	dcdd      	bgt.n	d42c8 <_Z10co2HandlerPKcS0_+0x9c>
                strip.setPixelColor(i,0,0,0);
   d430c:	2300      	movs	r3, #0
   d430e:	461a      	mov	r2, r3
   d4310:	f8cd 8000 	str.w	r8, [sp]
   d4314:	b289      	uxth	r1, r1
   d4316:	481c      	ldr	r0, [pc, #112]	; (d4388 <_Z10co2HandlerPKcS0_+0x15c>)
   d4318:	f00a fbf2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d431c:	683b      	ldr	r3, [r7, #0]
   d431e:	3301      	adds	r3, #1
   d4320:	603b      	str	r3, [r7, #0]
   d4322:	e7f0      	b.n	d4306 <_Z10co2HandlerPKcS0_+0xda>
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
                if(i>248 && i<256){
   d4324:	f1a1 03f9 	sub.w	r3, r1, #249	; 0xf9
   d4328:	2b06      	cmp	r3, #6
   d432a:	d80a      	bhi.n	d4342 <_Z10co2HandlerPKcS0_+0x116>
                    strip.setPixelColor(i,rclock,gclock,bclock);
   d432c:	4817      	ldr	r0, [pc, #92]	; (d438c <_Z10co2HandlerPKcS0_+0x160>)
   d432e:	783b      	ldrb	r3, [r7, #0]
   d4330:	7800      	ldrb	r0, [r0, #0]
   d4332:	f898 2000 	ldrb.w	r2, [r8]
   d4336:	9000      	str	r0, [sp, #0]
   d4338:	b289      	uxth	r1, r1
   d433a:	4813      	ldr	r0, [pc, #76]	; (d4388 <_Z10co2HandlerPKcS0_+0x15c>)
   d433c:	f00a fbe0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d4340:	e012      	b.n	d4368 <_Z10co2HandlerPKcS0_+0x13c>
                }
                else if(i==248)
   d4342:	29f8      	cmp	r1, #248	; 0xf8
   d4344:	d110      	bne.n	d4368 <_Z10co2HandlerPKcS0_+0x13c>
                {
                    if(TFahr < 33){
   d4346:	f8db 3000 	ldr.w	r3, [fp]
   d434a:	4810      	ldr	r0, [pc, #64]	; (d438c <_Z10co2HandlerPKcS0_+0x160>)
   d434c:	2b20      	cmp	r3, #32
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d434e:	bfd6      	itet	le
   d4350:	7802      	ldrble	r2, [r0, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d4352:	7800      	ldrbgt	r0, [r0, #0]
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d4354:	f898 0000 	ldrble.w	r0, [r8]
   d4358:	783b      	ldrb	r3, [r7, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d435a:	bfc8      	it	gt
   d435c:	f898 2000 	ldrbgt.w	r2, [r8]
   d4360:	9000      	str	r0, [sp, #0]
   d4362:	4809      	ldr	r0, [pc, #36]	; (d4388 <_Z10co2HandlerPKcS0_+0x15c>)
   d4364:	f00a fbcc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d4368:	6823      	ldr	r3, [r4, #0]
   d436a:	3301      	adds	r3, #1
   d436c:	6023      	str	r3, [r4, #0]
   d436e:	e7b3      	b.n	d42d8 <_Z10co2HandlerPKcS0_+0xac>
                }
            }
            strip.show();
        }
    }
}
   d4370:	b005      	add	sp, #20
   d4372:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4376:	bf00      	nop
   d4378:	2003e340 	.word	0x2003e340
   d437c:	2003e308 	.word	0x2003e308
   d4380:	2003e33c 	.word	0x2003e33c
   d4384:	2003e314 	.word	0x2003e314
   d4388:	2003e31c 	.word	0x2003e31c
   d438c:	2003e35c 	.word	0x2003e35c
   d4390:	2003e338 	.word	0x2003e338
   d4394:	2003e358 	.word	0x2003e358
   d4398:	2003e354 	.word	0x2003e354

000d439c <_ZN11EEPROMClass5writeEih.isra.10>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d439c:	f00a bcae 	b.w	decfc <HAL_EEPROM_Write>

000d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d43a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43a2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d43a6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43a8:	f88d 3000 	strb.w	r3, [sp]
   d43ac:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d43ae:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43b0:	f00b febe 	bl	e0130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d43b4:	4628      	mov	r0, r5
   d43b6:	b003      	add	sp, #12
   d43b8:	bd30      	pop	{r4, r5, pc}

000d43ba <_Z5soundii>:
int ico2;
uint8_t eevalue;
int fdark;
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
   d43ba:	b510      	push	{r4, lr}
    tone(D3, freq, dur);
   d43bc:	460a      	mov	r2, r1
int ico2;
uint8_t eevalue;
int fdark;
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
   d43be:	460c      	mov	r4, r1
    tone(D3, freq, dur);
   d43c0:	4601      	mov	r1, r0
   d43c2:	2003      	movs	r0, #3
   d43c4:	f00c f942 	bl	e064c <tone>
    delay(dur);
   d43c8:	4620      	mov	r0, r4
}
   d43ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
int fdark;
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
   d43ce:	f00b bc91 	b.w	dfcf4 <delay>
	...

000d43d4 <_Z3numiiiii>:
    #else
        digitalWrite(ANTSW1, 0);
        digitalWrite(ANTSW2, 1);
    #endif*/
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d43d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43d8:	b085      	sub	sp, #20
   d43da:	461e      	mov	r6, r3
if(num == 1)
   d43dc:	2801      	cmp	r0, #1
    #else
        digitalWrite(ANTSW1, 0);
        digitalWrite(ANTSW2, 1);
    #endif*/
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d43de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d43e0:	9303      	str	r3, [sp, #12]
   d43e2:	460c      	mov	r4, r1
   d43e4:	4615      	mov	r5, r2
if(num == 1)
   d43e6:	f040 819b 	bne.w	d4720 <_Z3numiiiii+0x34c>
{
    if((pix/8)%2 == 1)
   d43ea:	4bcb      	ldr	r3, [pc, #812]	; (d4718 <_Z3numiiiii+0x344>)
   d43ec:	2708      	movs	r7, #8
   d43ee:	fb91 f7f7 	sdiv	r7, r1, r7
   d43f2:	403b      	ands	r3, r7
   d43f4:	2b00      	cmp	r3, #0
   d43f6:	bfbe      	ittt	lt
   d43f8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d43fc:	f063 0301 	ornlt	r3, r3, #1
   d4400:	3301      	addlt	r3, #1
   d4402:	2b01      	cmp	r3, #1
   d4404:	f040 80d0 	bne.w	d45a8 <_Z3numiiiii+0x1d4>
    {
        strip.setPixelColor(pix+23,R,G,B);
   d4408:	fa1f f881 	uxth.w	r8, r1
   d440c:	fa5f f982 	uxtb.w	r9, r2
   d4410:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4414:	48c1      	ldr	r0, [pc, #772]	; (d471c <_Z3numiiiii+0x348>)
   d4416:	f8cd b000 	str.w	fp, [sp]
   d441a:	fa5f fa86 	uxtb.w	sl, r6
   d441e:	f108 0117 	add.w	r1, r8, #23
   d4422:	464a      	mov	r2, r9
   d4424:	4653      	mov	r3, sl
   d4426:	b289      	uxth	r1, r1
   d4428:	f00a fb6a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d442c:	f108 0111 	add.w	r1, r8, #17
   d4430:	464a      	mov	r2, r9
   d4432:	4653      	mov	r3, sl
   d4434:	b289      	uxth	r1, r1
   d4436:	48b9      	ldr	r0, [pc, #740]	; (d471c <_Z3numiiiii+0x348>)
   d4438:	f8cd b000 	str.w	fp, [sp]
   d443c:	f00a fb60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4440:	f108 0112 	add.w	r1, r8, #18
   d4444:	464a      	mov	r2, r9
   d4446:	4653      	mov	r3, sl
   d4448:	b289      	uxth	r1, r1
   d444a:	48b4      	ldr	r0, [pc, #720]	; (d471c <_Z3numiiiii+0x348>)
   d444c:	f8cd b000 	str.w	fp, [sp]
   d4450:	f00a fb56 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4454:	f108 0113 	add.w	r1, r8, #19
   d4458:	464a      	mov	r2, r9
   d445a:	4653      	mov	r3, sl
   d445c:	b289      	uxth	r1, r1
   d445e:	48af      	ldr	r0, [pc, #700]	; (d471c <_Z3numiiiii+0x348>)
   d4460:	f8cd b000 	str.w	fp, [sp]
   d4464:	f00a fb4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4468:	f108 0114 	add.w	r1, r8, #20
   d446c:	464a      	mov	r2, r9
   d446e:	4653      	mov	r3, sl
   d4470:	b289      	uxth	r1, r1
   d4472:	48aa      	ldr	r0, [pc, #680]	; (d471c <_Z3numiiiii+0x348>)
   d4474:	f8cd b000 	str.w	fp, [sp]
   d4478:	f00a fb42 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d447c:	f108 0115 	add.w	r1, r8, #21
   d4480:	464a      	mov	r2, r9
   d4482:	4653      	mov	r3, sl
   d4484:	b289      	uxth	r1, r1
   d4486:	48a5      	ldr	r0, [pc, #660]	; (d471c <_Z3numiiiii+0x348>)
   d4488:	f8cd b000 	str.w	fp, [sp]
   d448c:	f00a fb38 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4490:	f108 0116 	add.w	r1, r8, #22
   d4494:	464a      	mov	r2, r9
   d4496:	4653      	mov	r3, sl
        
        strip.setPixelColor(pix,0,0,0);
   d4498:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
   d449c:	b289      	uxth	r1, r1
   d449e:	489f      	ldr	r0, [pc, #636]	; (d471c <_Z3numiiiii+0x348>)
   d44a0:	f8cd b000 	str.w	fp, [sp]
   d44a4:	f00a fb2c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d44a8:	464b      	mov	r3, r9
   d44aa:	464a      	mov	r2, r9
   d44ac:	4641      	mov	r1, r8
   d44ae:	489b      	ldr	r0, [pc, #620]	; (d471c <_Z3numiiiii+0x348>)
   d44b0:	f8cd 9000 	str.w	r9, [sp]
   d44b4:	f00a fb24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d44b8:	f108 0101 	add.w	r1, r8, #1
   d44bc:	464b      	mov	r3, r9
   d44be:	464a      	mov	r2, r9
   d44c0:	b289      	uxth	r1, r1
   d44c2:	4896      	ldr	r0, [pc, #600]	; (d471c <_Z3numiiiii+0x348>)
   d44c4:	f8cd 9000 	str.w	r9, [sp]
   d44c8:	f00a fb1a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d44cc:	f108 0110 	add.w	r1, r8, #16
   d44d0:	464b      	mov	r3, r9
   d44d2:	464a      	mov	r2, r9
   d44d4:	b289      	uxth	r1, r1
   d44d6:	4891      	ldr	r0, [pc, #580]	; (d471c <_Z3numiiiii+0x348>)
   d44d8:	f8cd 9000 	str.w	r9, [sp]
   d44dc:	f00a fb10 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,0,0,0);
   d44e0:	f108 31ff 	add.w	r1, r8, #4294967295
   d44e4:	464b      	mov	r3, r9
   d44e6:	464a      	mov	r2, r9
   d44e8:	b289      	uxth	r1, r1
   d44ea:	488c      	ldr	r0, [pc, #560]	; (d471c <_Z3numiiiii+0x348>)
   d44ec:	f8cd 9000 	str.w	r9, [sp]
   d44f0:	f00a fb06 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d44f4:	f1a8 0102 	sub.w	r1, r8, #2
   d44f8:	464b      	mov	r3, r9
   d44fa:	464a      	mov	r2, r9
   d44fc:	b289      	uxth	r1, r1
   d44fe:	4887      	ldr	r0, [pc, #540]	; (d471c <_Z3numiiiii+0x348>)
   d4500:	f8cd 9000 	str.w	r9, [sp]
   d4504:	f00a fafc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d4508:	f1a8 0103 	sub.w	r1, r8, #3
   d450c:	464b      	mov	r3, r9
   d450e:	464a      	mov	r2, r9
   d4510:	b289      	uxth	r1, r1
   d4512:	4882      	ldr	r0, [pc, #520]	; (d471c <_Z3numiiiii+0x348>)
   d4514:	f8cd 9000 	str.w	r9, [sp]
   d4518:	f00a faf2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d451c:	f1a8 0104 	sub.w	r1, r8, #4
   d4520:	464b      	mov	r3, r9
   d4522:	464a      	mov	r2, r9
   d4524:	b289      	uxth	r1, r1
   d4526:	487d      	ldr	r0, [pc, #500]	; (d471c <_Z3numiiiii+0x348>)
   d4528:	f8cd 9000 	str.w	r9, [sp]
   d452c:	f00a fae8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4530:	f1a8 0105 	sub.w	r1, r8, #5
   d4534:	464b      	mov	r3, r9
   d4536:	464a      	mov	r2, r9
   d4538:	b289      	uxth	r1, r1
   d453a:	4878      	ldr	r0, [pc, #480]	; (d471c <_Z3numiiiii+0x348>)
   d453c:	f8cd 9000 	str.w	r9, [sp]
   d4540:	f00a fade 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d4544:	f1a8 0106 	sub.w	r1, r8, #6
   d4548:	464b      	mov	r3, r9
   d454a:	464a      	mov	r2, r9
   d454c:	b289      	uxth	r1, r1
   d454e:	4873      	ldr	r0, [pc, #460]	; (d471c <_Z3numiiiii+0x348>)
   d4550:	f8cd 9000 	str.w	r9, [sp]
   d4554:	f00a fad4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d4558:	f108 0107 	add.w	r1, r8, #7
   d455c:	464b      	mov	r3, r9
   d455e:	464a      	mov	r2, r9
   d4560:	b289      	uxth	r1, r1
   d4562:	486e      	ldr	r0, [pc, #440]	; (d471c <_Z3numiiiii+0x348>)
   d4564:	f8cd 9000 	str.w	r9, [sp]
   d4568:	f00a faca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d456c:	f108 010a 	add.w	r1, r8, #10
   d4570:	464b      	mov	r3, r9
   d4572:	464a      	mov	r2, r9
   d4574:	b289      	uxth	r1, r1
   d4576:	4869      	ldr	r0, [pc, #420]	; (d471c <_Z3numiiiii+0x348>)
   d4578:	f8cd 9000 	str.w	r9, [sp]
   d457c:	f00a fac0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4580:	f108 0104 	add.w	r1, r8, #4
   d4584:	464b      	mov	r3, r9
   d4586:	464a      	mov	r2, r9
   d4588:	b289      	uxth	r1, r1
   d458a:	4864      	ldr	r0, [pc, #400]	; (d471c <_Z3numiiiii+0x348>)
   d458c:	f8cd 9000 	str.w	r9, [sp]
   d4590:	f00a fab6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d4594:	f108 010d 	add.w	r1, r8, #13
   d4598:	f8cd 9000 	str.w	r9, [sp]
   d459c:	464b      	mov	r3, r9
   d459e:	464a      	mov	r2, r9
   d45a0:	b289      	uxth	r1, r1
   d45a2:	485e      	ldr	r0, [pc, #376]	; (d471c <_Z3numiiiii+0x348>)
   d45a4:	f00a faac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d45a8:	f017 0701 	ands.w	r7, r7, #1
   d45ac:	f041 873e 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix+25,R,G,B);
   d45b0:	b2a4      	uxth	r4, r4
   d45b2:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d45b6:	4859      	ldr	r0, [pc, #356]	; (d471c <_Z3numiiiii+0x348>)
   d45b8:	f8cd 8000 	str.w	r8, [sp]
   d45bc:	b2ed      	uxtb	r5, r5
   d45be:	b2f6      	uxtb	r6, r6
   d45c0:	f104 0119 	add.w	r1, r4, #25
   d45c4:	4633      	mov	r3, r6
   d45c6:	462a      	mov	r2, r5
   d45c8:	b289      	uxth	r1, r1
   d45ca:	f00a fa99 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d45ce:	f104 011a 	add.w	r1, r4, #26
   d45d2:	4633      	mov	r3, r6
   d45d4:	462a      	mov	r2, r5
   d45d6:	b289      	uxth	r1, r1
   d45d8:	4850      	ldr	r0, [pc, #320]	; (d471c <_Z3numiiiii+0x348>)
   d45da:	f8cd 8000 	str.w	r8, [sp]
   d45de:	f00a fa8f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d45e2:	f104 011b 	add.w	r1, r4, #27
   d45e6:	4633      	mov	r3, r6
   d45e8:	462a      	mov	r2, r5
   d45ea:	b289      	uxth	r1, r1
   d45ec:	484b      	ldr	r0, [pc, #300]	; (d471c <_Z3numiiiii+0x348>)
   d45ee:	f8cd 8000 	str.w	r8, [sp]
   d45f2:	f00a fa85 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d45f6:	f104 011c 	add.w	r1, r4, #28
   d45fa:	4633      	mov	r3, r6
   d45fc:	462a      	mov	r2, r5
   d45fe:	b289      	uxth	r1, r1
   d4600:	4846      	ldr	r0, [pc, #280]	; (d471c <_Z3numiiiii+0x348>)
   d4602:	f8cd 8000 	str.w	r8, [sp]
   d4606:	f00a fa7b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d460a:	f104 011d 	add.w	r1, r4, #29
   d460e:	4633      	mov	r3, r6
   d4610:	462a      	mov	r2, r5
   d4612:	b289      	uxth	r1, r1
   d4614:	4841      	ldr	r0, [pc, #260]	; (d471c <_Z3numiiiii+0x348>)
   d4616:	f8cd 8000 	str.w	r8, [sp]
   d461a:	f00a fa71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d461e:	f104 011e 	add.w	r1, r4, #30
   d4622:	4633      	mov	r3, r6
   d4624:	462a      	mov	r2, r5
   d4626:	b289      	uxth	r1, r1
   d4628:	483c      	ldr	r0, [pc, #240]	; (d471c <_Z3numiiiii+0x348>)
   d462a:	f8cd 8000 	str.w	r8, [sp]
   d462e:	f00a fa67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4632:	f104 011f 	add.w	r1, r4, #31
   d4636:	4633      	mov	r3, r6
   d4638:	462a      	mov	r2, r5
   d463a:	b289      	uxth	r1, r1
   d463c:	4837      	ldr	r0, [pc, #220]	; (d471c <_Z3numiiiii+0x348>)
   d463e:	f8cd 8000 	str.w	r8, [sp]
   d4642:	f00a fa5d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d4646:	463b      	mov	r3, r7
   d4648:	463a      	mov	r2, r7
   d464a:	4621      	mov	r1, r4
   d464c:	4833      	ldr	r0, [pc, #204]	; (d471c <_Z3numiiiii+0x348>)
   d464e:	9700      	str	r7, [sp, #0]
   d4650:	f00a fa56 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d4654:	1c61      	adds	r1, r4, #1
   d4656:	463b      	mov	r3, r7
   d4658:	463a      	mov	r2, r7
   d465a:	b289      	uxth	r1, r1
   d465c:	482f      	ldr	r0, [pc, #188]	; (d471c <_Z3numiiiii+0x348>)
   d465e:	9700      	str	r7, [sp, #0]
   d4660:	f00a fa4e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4664:	1ca1      	adds	r1, r4, #2
   d4666:	463b      	mov	r3, r7
   d4668:	463a      	mov	r2, r7
   d466a:	b289      	uxth	r1, r1
   d466c:	482b      	ldr	r0, [pc, #172]	; (d471c <_Z3numiiiii+0x348>)
   d466e:	9700      	str	r7, [sp, #0]
   d4670:	f00a fa46 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d4674:	1ce1      	adds	r1, r4, #3
   d4676:	463b      	mov	r3, r7
   d4678:	463a      	mov	r2, r7
   d467a:	b289      	uxth	r1, r1
   d467c:	4827      	ldr	r0, [pc, #156]	; (d471c <_Z3numiiiii+0x348>)
   d467e:	9700      	str	r7, [sp, #0]
   d4680:	f00a fa3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4684:	1d21      	adds	r1, r4, #4
   d4686:	463b      	mov	r3, r7
   d4688:	463a      	mov	r2, r7
   d468a:	b289      	uxth	r1, r1
   d468c:	4823      	ldr	r0, [pc, #140]	; (d471c <_Z3numiiiii+0x348>)
   d468e:	9700      	str	r7, [sp, #0]
   d4690:	f00a fa36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d4694:	1d61      	adds	r1, r4, #5
   d4696:	463b      	mov	r3, r7
   d4698:	463a      	mov	r2, r7
   d469a:	b289      	uxth	r1, r1
   d469c:	481f      	ldr	r0, [pc, #124]	; (d471c <_Z3numiiiii+0x348>)
   d469e:	9700      	str	r7, [sp, #0]
   d46a0:	f00a fa2e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d46a4:	1da1      	adds	r1, r4, #6
   d46a6:	463b      	mov	r3, r7
   d46a8:	463a      	mov	r2, r7
   d46aa:	b289      	uxth	r1, r1
   d46ac:	481b      	ldr	r0, [pc, #108]	; (d471c <_Z3numiiiii+0x348>)
   d46ae:	9700      	str	r7, [sp, #0]
   d46b0:	f00a fa26 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d46b4:	f104 0109 	add.w	r1, r4, #9
   d46b8:	463b      	mov	r3, r7
   d46ba:	463a      	mov	r2, r7
   d46bc:	b289      	uxth	r1, r1
   d46be:	4817      	ldr	r0, [pc, #92]	; (d471c <_Z3numiiiii+0x348>)
   d46c0:	9700      	str	r7, [sp, #0]
   d46c2:	f00a fa1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d46c6:	f104 0116 	add.w	r1, r4, #22
   d46ca:	463b      	mov	r3, r7
   d46cc:	463a      	mov	r2, r7
   d46ce:	b289      	uxth	r1, r1
   d46d0:	4812      	ldr	r0, [pc, #72]	; (d471c <_Z3numiiiii+0x348>)
   d46d2:	9700      	str	r7, [sp, #0]
   d46d4:	f00a fa14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d46d8:	f104 010f 	add.w	r1, r4, #15
   d46dc:	463b      	mov	r3, r7
   d46de:	463a      	mov	r2, r7
   d46e0:	b289      	uxth	r1, r1
   d46e2:	480e      	ldr	r0, [pc, #56]	; (d471c <_Z3numiiiii+0x348>)
   d46e4:	9700      	str	r7, [sp, #0]
   d46e6:	f00a fa0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d46ea:	f104 0110 	add.w	r1, r4, #16
   d46ee:	463b      	mov	r3, r7
   d46f0:	463a      	mov	r2, r7
   d46f2:	b289      	uxth	r1, r1
   d46f4:	4809      	ldr	r0, [pc, #36]	; (d471c <_Z3numiiiii+0x348>)
   d46f6:	9700      	str	r7, [sp, #0]
   d46f8:	f00a fa02 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,0,0,0);
   d46fc:	f104 010c 	add.w	r1, r4, #12
   d4700:	b289      	uxth	r1, r1
   d4702:	9700      	str	r7, [sp, #0]
   d4704:	463b      	mov	r3, r7
   d4706:	463a      	mov	r2, r7
   d4708:	4804      	ldr	r0, [pc, #16]	; (d471c <_Z3numiiiii+0x348>)
   d470a:	f00a f9f9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d470e:	f104 0113 	add.w	r1, r4, #19
   d4712:	f000 bce3 	b.w	d50dc <_Z3numiiiii+0xd08>
   d4716:	bf00      	nop
   d4718:	80000001 	.word	0x80000001
   d471c:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 2)
   d4720:	2802      	cmp	r0, #2
   d4722:	f040 819b 	bne.w	d4a5c <_Z3numiiiii+0x688>
{
    if((pix/8)%2 == 1)
   d4726:	4bcb      	ldr	r3, [pc, #812]	; (d4a54 <_Z3numiiiii+0x680>)
   d4728:	f04f 0a08 	mov.w	sl, #8
   d472c:	fb91 fafa 	sdiv	sl, r1, sl
   d4730:	ea0a 0303 	and.w	r3, sl, r3
   d4734:	2b00      	cmp	r3, #0
   d4736:	bfbe      	ittt	lt
   d4738:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d473c:	f063 0301 	ornlt	r3, r3, #1
   d4740:	3301      	addlt	r3, #1
   d4742:	2b01      	cmp	r3, #1
   d4744:	f040 80c6 	bne.w	d48d4 <_Z3numiiiii+0x500>
    {
        strip.setPixelColor(pix,R,G,B);
   d4748:	b28f      	uxth	r7, r1
   d474a:	fa5f f882 	uxtb.w	r8, r2
   d474e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4752:	48c1      	ldr	r0, [pc, #772]	; (d4a58 <_Z3numiiiii+0x684>)
   d4754:	f8cd b000 	str.w	fp, [sp]
   d4758:	fa5f f986 	uxtb.w	r9, r6
   d475c:	4642      	mov	r2, r8
   d475e:	464b      	mov	r3, r9
   d4760:	4639      	mov	r1, r7
   d4762:	f00a f9cd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4766:	1c79      	adds	r1, r7, #1
   d4768:	4642      	mov	r2, r8
   d476a:	464b      	mov	r3, r9
   d476c:	b289      	uxth	r1, r1
   d476e:	48ba      	ldr	r0, [pc, #744]	; (d4a58 <_Z3numiiiii+0x684>)
   d4770:	f8cd b000 	str.w	fp, [sp]
   d4774:	f00a f9c4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4778:	f107 0110 	add.w	r1, r7, #16
   d477c:	4642      	mov	r2, r8
   d477e:	464b      	mov	r3, r9
   d4780:	b289      	uxth	r1, r1
   d4782:	48b5      	ldr	r0, [pc, #724]	; (d4a58 <_Z3numiiiii+0x684>)
   d4784:	f8cd b000 	str.w	fp, [sp]
   d4788:	f00a f9ba 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d478c:	f107 0111 	add.w	r1, r7, #17
   d4790:	4642      	mov	r2, r8
   d4792:	464b      	mov	r3, r9
   d4794:	b289      	uxth	r1, r1
   d4796:	48b0      	ldr	r0, [pc, #704]	; (d4a58 <_Z3numiiiii+0x684>)
   d4798:	f8cd b000 	str.w	fp, [sp]
   d479c:	f00a f9b0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d47a0:	f107 0112 	add.w	r1, r7, #18
   d47a4:	4642      	mov	r2, r8
   d47a6:	464b      	mov	r3, r9
   d47a8:	b289      	uxth	r1, r1
   d47aa:	48ab      	ldr	r0, [pc, #684]	; (d4a58 <_Z3numiiiii+0x684>)
   d47ac:	f8cd b000 	str.w	fp, [sp]
   d47b0:	f00a f9a6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d47b4:	f107 0113 	add.w	r1, r7, #19
   d47b8:	4642      	mov	r2, r8
   d47ba:	464b      	mov	r3, r9
   d47bc:	b289      	uxth	r1, r1
   d47be:	48a6      	ldr	r0, [pc, #664]	; (d4a58 <_Z3numiiiii+0x684>)
   d47c0:	f8cd b000 	str.w	fp, [sp]
   d47c4:	f00a f99c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d47c8:	f107 0114 	add.w	r1, r7, #20
   d47cc:	4642      	mov	r2, r8
   d47ce:	464b      	mov	r3, r9
   d47d0:	b289      	uxth	r1, r1
   d47d2:	48a1      	ldr	r0, [pc, #644]	; (d4a58 <_Z3numiiiii+0x684>)
   d47d4:	f8cd b000 	str.w	fp, [sp]
   d47d8:	f00a f992 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d47dc:	f107 010d 	add.w	r1, r7, #13
   d47e0:	4642      	mov	r2, r8
   d47e2:	464b      	mov	r3, r9
   d47e4:	b289      	uxth	r1, r1
   d47e6:	489c      	ldr	r0, [pc, #624]	; (d4a58 <_Z3numiiiii+0x684>)
   d47e8:	f8cd b000 	str.w	fp, [sp]
   d47ec:	f00a f988 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d47f0:	1d39      	adds	r1, r7, #4
   d47f2:	4642      	mov	r2, r8
   d47f4:	464b      	mov	r3, r9
   d47f6:	b289      	uxth	r1, r1
   d47f8:	4897      	ldr	r0, [pc, #604]	; (d4a58 <_Z3numiiiii+0x684>)
   d47fa:	f8cd b000 	str.w	fp, [sp]
   d47fe:	f00a f97f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4802:	1ef9      	subs	r1, r7, #3
   d4804:	4642      	mov	r2, r8
   d4806:	464b      	mov	r3, r9
   d4808:	b289      	uxth	r1, r1
   d480a:	4893      	ldr	r0, [pc, #588]	; (d4a58 <_Z3numiiiii+0x684>)
   d480c:	f8cd b000 	str.w	fp, [sp]
   d4810:	f00a f976 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d4814:	1f39      	subs	r1, r7, #4
   d4816:	4642      	mov	r2, r8
   d4818:	464b      	mov	r3, r9
   d481a:	b289      	uxth	r1, r1
   d481c:	488e      	ldr	r0, [pc, #568]	; (d4a58 <_Z3numiiiii+0x684>)
   d481e:	f8cd b000 	str.w	fp, [sp]
   d4822:	f00a f96d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d4826:	1f79      	subs	r1, r7, #5
   d4828:	4642      	mov	r2, r8
   d482a:	464b      	mov	r3, r9
   d482c:	b289      	uxth	r1, r1
   d482e:	488a      	ldr	r0, [pc, #552]	; (d4a58 <_Z3numiiiii+0x684>)
   d4830:	f8cd b000 	str.w	fp, [sp]
   d4834:	f00a f964 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4838:	1fb9      	subs	r1, r7, #6
   d483a:	4642      	mov	r2, r8
   d483c:	464b      	mov	r3, r9
   d483e:	b289      	uxth	r1, r1
   d4840:	4885      	ldr	r0, [pc, #532]	; (d4a58 <_Z3numiiiii+0x684>)
   d4842:	f8cd b000 	str.w	fp, [sp]
   d4846:	f00a f95b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d484a:	1df9      	adds	r1, r7, #7
   d484c:	4642      	mov	r2, r8
   d484e:	464b      	mov	r3, r9
   d4850:	b289      	uxth	r1, r1
   d4852:	4881      	ldr	r0, [pc, #516]	; (d4a58 <_Z3numiiiii+0x684>)
   d4854:	f8cd b000 	str.w	fp, [sp]
   d4858:	f00a f952 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d485c:	f107 010a 	add.w	r1, r7, #10
   d4860:	4642      	mov	r2, r8
   d4862:	464b      	mov	r3, r9
   d4864:	b289      	uxth	r1, r1
   d4866:	487c      	ldr	r0, [pc, #496]	; (d4a58 <_Z3numiiiii+0x684>)
   d4868:	f8cd b000 	str.w	fp, [sp]
   d486c:	f00a f948 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4870:	f107 0117 	add.w	r1, r7, #23
   d4874:	4642      	mov	r2, r8
   d4876:	464b      	mov	r3, r9
   d4878:	b289      	uxth	r1, r1
   d487a:	4877      	ldr	r0, [pc, #476]	; (d4a58 <_Z3numiiiii+0x684>)
   d487c:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4880:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix-4,R,G,B);
        strip.setPixelColor(pix-5,R,G,B);
        strip.setPixelColor(pix-6,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d4884:	f00a f93c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4888:	1e79      	subs	r1, r7, #1
   d488a:	4643      	mov	r3, r8
   d488c:	4642      	mov	r2, r8
   d488e:	b289      	uxth	r1, r1
   d4890:	4871      	ldr	r0, [pc, #452]	; (d4a58 <_Z3numiiiii+0x684>)
   d4892:	f8cd 8000 	str.w	r8, [sp]
   d4896:	f00a f933 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d489a:	1eb9      	subs	r1, r7, #2
   d489c:	4643      	mov	r3, r8
   d489e:	4642      	mov	r2, r8
   d48a0:	b289      	uxth	r1, r1
   d48a2:	486d      	ldr	r0, [pc, #436]	; (d4a58 <_Z3numiiiii+0x684>)
   d48a4:	f8cd 8000 	str.w	r8, [sp]
   d48a8:	f00a f92a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d48ac:	f107 0116 	add.w	r1, r7, #22
   d48b0:	4643      	mov	r3, r8
   d48b2:	4642      	mov	r2, r8
   d48b4:	b289      	uxth	r1, r1
   d48b6:	4868      	ldr	r0, [pc, #416]	; (d4a58 <_Z3numiiiii+0x684>)
   d48b8:	f8cd 8000 	str.w	r8, [sp]
   d48bc:	f00a f920 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,0,0,0);
   d48c0:	f107 0115 	add.w	r1, r7, #21
   d48c4:	f8cd 8000 	str.w	r8, [sp]
   d48c8:	4643      	mov	r3, r8
   d48ca:	4642      	mov	r2, r8
   d48cc:	b289      	uxth	r1, r1
   d48ce:	4862      	ldr	r0, [pc, #392]	; (d4a58 <_Z3numiiiii+0x684>)
   d48d0:	f00a f916 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d48d4:	f01a 0701 	ands.w	r7, sl, #1
   d48d8:	f041 85a8 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d48dc:	b2a4      	uxth	r4, r4
   d48de:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d48e2:	485d      	ldr	r0, [pc, #372]	; (d4a58 <_Z3numiiiii+0x684>)
   d48e4:	f8cd 8000 	str.w	r8, [sp]
   d48e8:	b2ed      	uxtb	r5, r5
   d48ea:	b2f6      	uxtb	r6, r6
   d48ec:	4633      	mov	r3, r6
   d48ee:	462a      	mov	r2, r5
   d48f0:	4621      	mov	r1, r4
   d48f2:	f00a f905 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d48f6:	f104 010f 	add.w	r1, r4, #15
   d48fa:	4633      	mov	r3, r6
   d48fc:	462a      	mov	r2, r5
   d48fe:	b289      	uxth	r1, r1
   d4900:	4855      	ldr	r0, [pc, #340]	; (d4a58 <_Z3numiiiii+0x684>)
   d4902:	f8cd 8000 	str.w	r8, [sp]
   d4906:	f00a f8fb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d490a:	f104 0110 	add.w	r1, r4, #16
   d490e:	4633      	mov	r3, r6
   d4910:	462a      	mov	r2, r5
   d4912:	b289      	uxth	r1, r1
   d4914:	4850      	ldr	r0, [pc, #320]	; (d4a58 <_Z3numiiiii+0x684>)
   d4916:	f8cd 8000 	str.w	r8, [sp]
   d491a:	f00a f8f1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d491e:	1ce1      	adds	r1, r4, #3
   d4920:	4633      	mov	r3, r6
   d4922:	462a      	mov	r2, r5
   d4924:	b289      	uxth	r1, r1
   d4926:	484c      	ldr	r0, [pc, #304]	; (d4a58 <_Z3numiiiii+0x684>)
   d4928:	f8cd 8000 	str.w	r8, [sp]
   d492c:	f00a f8e8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4930:	1d21      	adds	r1, r4, #4
   d4932:	4633      	mov	r3, r6
   d4934:	462a      	mov	r2, r5
   d4936:	b289      	uxth	r1, r1
   d4938:	4847      	ldr	r0, [pc, #284]	; (d4a58 <_Z3numiiiii+0x684>)
   d493a:	f8cd 8000 	str.w	r8, [sp]
   d493e:	f00a f8df 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d4942:	1d61      	adds	r1, r4, #5
   d4944:	4633      	mov	r3, r6
   d4946:	462a      	mov	r2, r5
   d4948:	b289      	uxth	r1, r1
   d494a:	4843      	ldr	r0, [pc, #268]	; (d4a58 <_Z3numiiiii+0x684>)
   d494c:	f8cd 8000 	str.w	r8, [sp]
   d4950:	f00a f8d6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4954:	1da1      	adds	r1, r4, #6
   d4956:	4633      	mov	r3, r6
   d4958:	462a      	mov	r2, r5
   d495a:	b289      	uxth	r1, r1
   d495c:	483e      	ldr	r0, [pc, #248]	; (d4a58 <_Z3numiiiii+0x684>)
   d495e:	f8cd 8000 	str.w	r8, [sp]
   d4962:	f00a f8cd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4966:	f104 011f 	add.w	r1, r4, #31
   d496a:	4633      	mov	r3, r6
   d496c:	462a      	mov	r2, r5
   d496e:	b289      	uxth	r1, r1
   d4970:	4839      	ldr	r0, [pc, #228]	; (d4a58 <_Z3numiiiii+0x684>)
   d4972:	f8cd 8000 	str.w	r8, [sp]
   d4976:	f00a f8c3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d497a:	f104 011e 	add.w	r1, r4, #30
   d497e:	4633      	mov	r3, r6
   d4980:	462a      	mov	r2, r5
   d4982:	b289      	uxth	r1, r1
   d4984:	4834      	ldr	r0, [pc, #208]	; (d4a58 <_Z3numiiiii+0x684>)
   d4986:	f8cd 8000 	str.w	r8, [sp]
   d498a:	f00a f8b9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d498e:	f104 011d 	add.w	r1, r4, #29
   d4992:	4633      	mov	r3, r6
   d4994:	462a      	mov	r2, r5
   d4996:	b289      	uxth	r1, r1
   d4998:	482f      	ldr	r0, [pc, #188]	; (d4a58 <_Z3numiiiii+0x684>)
   d499a:	f8cd 8000 	str.w	r8, [sp]
   d499e:	f00a f8af 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d49a2:	f104 011c 	add.w	r1, r4, #28
   d49a6:	4633      	mov	r3, r6
   d49a8:	462a      	mov	r2, r5
   d49aa:	b289      	uxth	r1, r1
   d49ac:	482a      	ldr	r0, [pc, #168]	; (d4a58 <_Z3numiiiii+0x684>)
   d49ae:	f8cd 8000 	str.w	r8, [sp]
   d49b2:	f00a f8a5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d49b6:	f104 010c 	add.w	r1, r4, #12
   d49ba:	4633      	mov	r3, r6
   d49bc:	462a      	mov	r2, r5
   d49be:	b289      	uxth	r1, r1
   d49c0:	4825      	ldr	r0, [pc, #148]	; (d4a58 <_Z3numiiiii+0x684>)
   d49c2:	f8cd 8000 	str.w	r8, [sp]
   d49c6:	f00a f89b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d49ca:	f104 0113 	add.w	r1, r4, #19
   d49ce:	4633      	mov	r3, r6
   d49d0:	462a      	mov	r2, r5
   d49d2:	b289      	uxth	r1, r1
   d49d4:	4820      	ldr	r0, [pc, #128]	; (d4a58 <_Z3numiiiii+0x684>)
   d49d6:	f8cd 8000 	str.w	r8, [sp]
   d49da:	f00a f891 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d49de:	f104 0109 	add.w	r1, r4, #9
   d49e2:	4633      	mov	r3, r6
   d49e4:	462a      	mov	r2, r5
   d49e6:	b289      	uxth	r1, r1
   d49e8:	481b      	ldr	r0, [pc, #108]	; (d4a58 <_Z3numiiiii+0x684>)
   d49ea:	f8cd 8000 	str.w	r8, [sp]
   d49ee:	f00a f887 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d49f2:	f104 0116 	add.w	r1, r4, #22
   d49f6:	4633      	mov	r3, r6
   d49f8:	462a      	mov	r2, r5
   d49fa:	b289      	uxth	r1, r1
   d49fc:	4816      	ldr	r0, [pc, #88]	; (d4a58 <_Z3numiiiii+0x684>)
   d49fe:	f8cd 8000 	str.w	r8, [sp]
   d4a02:	f00a f87d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4a06:	f104 0119 	add.w	r1, r4, #25
   d4a0a:	4633      	mov	r3, r6
   d4a0c:	462a      	mov	r2, r5
   d4a0e:	b289      	uxth	r1, r1
   d4a10:	4811      	ldr	r0, [pc, #68]	; (d4a58 <_Z3numiiiii+0x684>)
   d4a12:	f8cd 8000 	str.w	r8, [sp]
   d4a16:	f00a f873 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4a1a:	1c61      	adds	r1, r4, #1
   d4a1c:	463b      	mov	r3, r7
   d4a1e:	463a      	mov	r2, r7
   d4a20:	b289      	uxth	r1, r1
   d4a22:	480d      	ldr	r0, [pc, #52]	; (d4a58 <_Z3numiiiii+0x684>)
   d4a24:	9700      	str	r7, [sp, #0]
   d4a26:	f00a f86b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4a2a:	1ca1      	adds	r1, r4, #2
   d4a2c:	463b      	mov	r3, r7
   d4a2e:	463a      	mov	r2, r7
   d4a30:	b289      	uxth	r1, r1
   d4a32:	4809      	ldr	r0, [pc, #36]	; (d4a58 <_Z3numiiiii+0x684>)
   d4a34:	9700      	str	r7, [sp, #0]
   d4a36:	f00a f863 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,0,0,0);
   d4a3a:	f104 011a 	add.w	r1, r4, #26
   d4a3e:	b289      	uxth	r1, r1
   d4a40:	9700      	str	r7, [sp, #0]
   d4a42:	463b      	mov	r3, r7
   d4a44:	463a      	mov	r2, r7
   d4a46:	4804      	ldr	r0, [pc, #16]	; (d4a58 <_Z3numiiiii+0x684>)
   d4a48:	f00a f85a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,0,0,0);
   d4a4c:	f104 011b 	add.w	r1, r4, #27
   d4a50:	e344      	b.n	d50dc <_Z3numiiiii+0xd08>
   d4a52:	bf00      	nop
   d4a54:	80000001 	.word	0x80000001
   d4a58:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 3)
   d4a5c:	2803      	cmp	r0, #3
   d4a5e:	f040 819b 	bne.w	d4d98 <_Z3numiiiii+0x9c4>
{
    if((pix/8)%2 == 1)
   d4a62:	4bcb      	ldr	r3, [pc, #812]	; (d4d90 <_Z3numiiiii+0x9bc>)
   d4a64:	f04f 0a08 	mov.w	sl, #8
   d4a68:	fb91 fafa 	sdiv	sl, r1, sl
   d4a6c:	ea0a 0303 	and.w	r3, sl, r3
   d4a70:	2b00      	cmp	r3, #0
   d4a72:	bfbe      	ittt	lt
   d4a74:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4a78:	f063 0301 	ornlt	r3, r3, #1
   d4a7c:	3301      	addlt	r3, #1
   d4a7e:	2b01      	cmp	r3, #1
   d4a80:	f040 80c6 	bne.w	d4c10 <_Z3numiiiii+0x83c>
    {
        strip.setPixelColor(pix,R,G,B);
   d4a84:	b28f      	uxth	r7, r1
   d4a86:	fa5f f882 	uxtb.w	r8, r2
   d4a8a:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4a8e:	48c1      	ldr	r0, [pc, #772]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4a90:	f8cd b000 	str.w	fp, [sp]
   d4a94:	fa5f f986 	uxtb.w	r9, r6
   d4a98:	4642      	mov	r2, r8
   d4a9a:	464b      	mov	r3, r9
   d4a9c:	4639      	mov	r1, r7
   d4a9e:	f00a f82f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4aa2:	1c79      	adds	r1, r7, #1
   d4aa4:	4642      	mov	r2, r8
   d4aa6:	464b      	mov	r3, r9
   d4aa8:	b289      	uxth	r1, r1
   d4aaa:	48ba      	ldr	r0, [pc, #744]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4aac:	f8cd b000 	str.w	fp, [sp]
   d4ab0:	f00a f826 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4ab4:	f107 0110 	add.w	r1, r7, #16
   d4ab8:	4642      	mov	r2, r8
   d4aba:	464b      	mov	r3, r9
   d4abc:	b289      	uxth	r1, r1
   d4abe:	48b5      	ldr	r0, [pc, #724]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4ac0:	f8cd b000 	str.w	fp, [sp]
   d4ac4:	f00a f81c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4ac8:	f107 0112 	add.w	r1, r7, #18
   d4acc:	4642      	mov	r2, r8
   d4ace:	464b      	mov	r3, r9
   d4ad0:	b289      	uxth	r1, r1
   d4ad2:	48b0      	ldr	r0, [pc, #704]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4ad4:	f8cd b000 	str.w	fp, [sp]
   d4ad8:	f00a f812 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4adc:	f107 0113 	add.w	r1, r7, #19
   d4ae0:	4642      	mov	r2, r8
   d4ae2:	464b      	mov	r3, r9
   d4ae4:	b289      	uxth	r1, r1
   d4ae6:	48ab      	ldr	r0, [pc, #684]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4ae8:	f8cd b000 	str.w	fp, [sp]
   d4aec:	f00a f808 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d4af0:	f107 0115 	add.w	r1, r7, #21
   d4af4:	4642      	mov	r2, r8
   d4af6:	464b      	mov	r3, r9
   d4af8:	b289      	uxth	r1, r1
   d4afa:	48a6      	ldr	r0, [pc, #664]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4afc:	f8cd b000 	str.w	fp, [sp]
   d4b00:	f009 fffe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4b04:	f107 0116 	add.w	r1, r7, #22
   d4b08:	4642      	mov	r2, r8
   d4b0a:	464b      	mov	r3, r9
   d4b0c:	b289      	uxth	r1, r1
   d4b0e:	48a1      	ldr	r0, [pc, #644]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b10:	f8cd b000 	str.w	fp, [sp]
   d4b14:	f009 fff4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4b18:	1ef9      	subs	r1, r7, #3
   d4b1a:	4642      	mov	r2, r8
   d4b1c:	464b      	mov	r3, r9
   d4b1e:	b289      	uxth	r1, r1
   d4b20:	489c      	ldr	r0, [pc, #624]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b22:	f8cd b000 	str.w	fp, [sp]
   d4b26:	f009 ffeb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4b2a:	1fb9      	subs	r1, r7, #6
   d4b2c:	4642      	mov	r2, r8
   d4b2e:	464b      	mov	r3, r9
   d4b30:	b289      	uxth	r1, r1
   d4b32:	4898      	ldr	r0, [pc, #608]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b34:	f8cd b000 	str.w	fp, [sp]
   d4b38:	f009 ffe2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4b3c:	1d39      	adds	r1, r7, #4
   d4b3e:	4642      	mov	r2, r8
   d4b40:	464b      	mov	r3, r9
   d4b42:	b289      	uxth	r1, r1
   d4b44:	4893      	ldr	r0, [pc, #588]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b46:	f8cd b000 	str.w	fp, [sp]
   d4b4a:	f009 ffd9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d4b4e:	1df9      	adds	r1, r7, #7
   d4b50:	4642      	mov	r2, r8
   d4b52:	464b      	mov	r3, r9
   d4b54:	b289      	uxth	r1, r1
   d4b56:	488f      	ldr	r0, [pc, #572]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b58:	f8cd b000 	str.w	fp, [sp]
   d4b5c:	f009 ffd0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4b60:	f107 010d 	add.w	r1, r7, #13
   d4b64:	4642      	mov	r2, r8
   d4b66:	464b      	mov	r3, r9
   d4b68:	b289      	uxth	r1, r1
   d4b6a:	488a      	ldr	r0, [pc, #552]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b6c:	f8cd b000 	str.w	fp, [sp]
   d4b70:	f009 ffc6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d4b74:	f107 010a 	add.w	r1, r7, #10
   d4b78:	4642      	mov	r2, r8
   d4b7a:	464b      	mov	r3, r9
   d4b7c:	b289      	uxth	r1, r1
   d4b7e:	4885      	ldr	r0, [pc, #532]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b80:	f8cd b000 	str.w	fp, [sp]
   d4b84:	f009 ffbc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d4b88:	f107 0111 	add.w	r1, r7, #17
   d4b8c:	4642      	mov	r2, r8
   d4b8e:	464b      	mov	r3, r9
   d4b90:	b289      	uxth	r1, r1
   d4b92:	4880      	ldr	r0, [pc, #512]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4b94:	f8cd b000 	str.w	fp, [sp]
   d4b98:	f009 ffb2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4b9c:	f107 0117 	add.w	r1, r7, #23
   d4ba0:	4642      	mov	r2, r8
   d4ba2:	464b      	mov	r3, r9
   d4ba4:	b289      	uxth	r1, r1
   d4ba6:	487b      	ldr	r0, [pc, #492]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4ba8:	f8cd b000 	str.w	fp, [sp]
   d4bac:	f009 ffa8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4bb0:	f107 0114 	add.w	r1, r7, #20
   d4bb4:	4642      	mov	r2, r8
   d4bb6:	464b      	mov	r3, r9
   d4bb8:	b289      	uxth	r1, r1
   d4bba:	4876      	ldr	r0, [pc, #472]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4bbc:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4bc0:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
   d4bc4:	f009 ff9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4bc8:	1e79      	subs	r1, r7, #1
   d4bca:	4643      	mov	r3, r8
   d4bcc:	4642      	mov	r2, r8
   d4bce:	b289      	uxth	r1, r1
   d4bd0:	4870      	ldr	r0, [pc, #448]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4bd2:	f8cd 8000 	str.w	r8, [sp]
   d4bd6:	f009 ff93 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d4bda:	1eb9      	subs	r1, r7, #2
   d4bdc:	4643      	mov	r3, r8
   d4bde:	4642      	mov	r2, r8
   d4be0:	b289      	uxth	r1, r1
   d4be2:	486c      	ldr	r0, [pc, #432]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4be4:	f8cd 8000 	str.w	r8, [sp]
   d4be8:	f009 ff8a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d4bec:	1f39      	subs	r1, r7, #4
   d4bee:	4643      	mov	r3, r8
   d4bf0:	4642      	mov	r2, r8
   d4bf2:	b289      	uxth	r1, r1
   d4bf4:	4867      	ldr	r0, [pc, #412]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4bf6:	f8cd 8000 	str.w	r8, [sp]
   d4bfa:	f009 ff81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4bfe:	1f79      	subs	r1, r7, #5
   d4c00:	f8cd 8000 	str.w	r8, [sp]
   d4c04:	4643      	mov	r3, r8
   d4c06:	4642      	mov	r2, r8
   d4c08:	b289      	uxth	r1, r1
   d4c0a:	4862      	ldr	r0, [pc, #392]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c0c:	f009 ff78 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4c10:	f01a 0701 	ands.w	r7, sl, #1
   d4c14:	f041 840a 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4c18:	b2a4      	uxth	r4, r4
   d4c1a:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4c1e:	485d      	ldr	r0, [pc, #372]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c20:	f8cd 8000 	str.w	r8, [sp]
   d4c24:	b2ed      	uxtb	r5, r5
   d4c26:	b2f6      	uxtb	r6, r6
   d4c28:	4633      	mov	r3, r6
   d4c2a:	462a      	mov	r2, r5
   d4c2c:	4621      	mov	r1, r4
   d4c2e:	f009 ff67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d4c32:	f104 010f 	add.w	r1, r4, #15
   d4c36:	4633      	mov	r3, r6
   d4c38:	462a      	mov	r2, r5
   d4c3a:	b289      	uxth	r1, r1
   d4c3c:	4855      	ldr	r0, [pc, #340]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c3e:	f8cd 8000 	str.w	r8, [sp]
   d4c42:	f009 ff5d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4c46:	f104 0110 	add.w	r1, r4, #16
   d4c4a:	4633      	mov	r3, r6
   d4c4c:	462a      	mov	r2, r5
   d4c4e:	b289      	uxth	r1, r1
   d4c50:	4850      	ldr	r0, [pc, #320]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c52:	f8cd 8000 	str.w	r8, [sp]
   d4c56:	f009 ff53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d4c5a:	f104 011e 	add.w	r1, r4, #30
   d4c5e:	4633      	mov	r3, r6
   d4c60:	462a      	mov	r2, r5
   d4c62:	b289      	uxth	r1, r1
   d4c64:	484b      	ldr	r0, [pc, #300]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c66:	f8cd 8000 	str.w	r8, [sp]
   d4c6a:	f009 ff49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d4c6e:	f104 011d 	add.w	r1, r4, #29
   d4c72:	4633      	mov	r3, r6
   d4c74:	462a      	mov	r2, r5
   d4c76:	b289      	uxth	r1, r1
   d4c78:	4846      	ldr	r0, [pc, #280]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c7a:	f8cd 8000 	str.w	r8, [sp]
   d4c7e:	f009 ff3f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4c82:	1ce1      	adds	r1, r4, #3
   d4c84:	4633      	mov	r3, r6
   d4c86:	462a      	mov	r2, r5
   d4c88:	b289      	uxth	r1, r1
   d4c8a:	4842      	ldr	r0, [pc, #264]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4c8c:	f8cd 8000 	str.w	r8, [sp]
   d4c90:	f009 ff36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4c94:	f104 010c 	add.w	r1, r4, #12
   d4c98:	4633      	mov	r3, r6
   d4c9a:	462a      	mov	r2, r5
   d4c9c:	b289      	uxth	r1, r1
   d4c9e:	483d      	ldr	r0, [pc, #244]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4ca0:	f8cd 8000 	str.w	r8, [sp]
   d4ca4:	f009 ff2c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4ca8:	f104 0113 	add.w	r1, r4, #19
   d4cac:	4633      	mov	r3, r6
   d4cae:	462a      	mov	r2, r5
   d4cb0:	b289      	uxth	r1, r1
   d4cb2:	4838      	ldr	r0, [pc, #224]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4cb4:	f8cd 8000 	str.w	r8, [sp]
   d4cb8:	f009 ff22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d4cbc:	f104 011b 	add.w	r1, r4, #27
   d4cc0:	4633      	mov	r3, r6
   d4cc2:	462a      	mov	r2, r5
   d4cc4:	b289      	uxth	r1, r1
   d4cc6:	4833      	ldr	r0, [pc, #204]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4cc8:	f8cd 8000 	str.w	r8, [sp]
   d4ccc:	f009 ff18 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d4cd0:	f104 011a 	add.w	r1, r4, #26
   d4cd4:	4633      	mov	r3, r6
   d4cd6:	462a      	mov	r2, r5
   d4cd8:	b289      	uxth	r1, r1
   d4cda:	482e      	ldr	r0, [pc, #184]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4cdc:	f8cd 8000 	str.w	r8, [sp]
   d4ce0:	f009 ff0e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4ce4:	1da1      	adds	r1, r4, #6
   d4ce6:	4633      	mov	r3, r6
   d4ce8:	462a      	mov	r2, r5
   d4cea:	b289      	uxth	r1, r1
   d4cec:	4829      	ldr	r0, [pc, #164]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4cee:	f8cd 8000 	str.w	r8, [sp]
   d4cf2:	f009 ff05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d4cf6:	f104 0109 	add.w	r1, r4, #9
   d4cfa:	4633      	mov	r3, r6
   d4cfc:	462a      	mov	r2, r5
   d4cfe:	b289      	uxth	r1, r1
   d4d00:	4824      	ldr	r0, [pc, #144]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d02:	f8cd 8000 	str.w	r8, [sp]
   d4d06:	f009 fefb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4d0a:	f104 0116 	add.w	r1, r4, #22
   d4d0e:	4633      	mov	r3, r6
   d4d10:	462a      	mov	r2, r5
   d4d12:	b289      	uxth	r1, r1
   d4d14:	481f      	ldr	r0, [pc, #124]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d16:	f8cd 8000 	str.w	r8, [sp]
   d4d1a:	f009 fef1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4d1e:	f104 011f 	add.w	r1, r4, #31
   d4d22:	4633      	mov	r3, r6
   d4d24:	462a      	mov	r2, r5
   d4d26:	b289      	uxth	r1, r1
   d4d28:	481a      	ldr	r0, [pc, #104]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d2a:	f8cd 8000 	str.w	r8, [sp]
   d4d2e:	f009 fee7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4d32:	f104 0119 	add.w	r1, r4, #25
   d4d36:	4633      	mov	r3, r6
   d4d38:	462a      	mov	r2, r5
   d4d3a:	b289      	uxth	r1, r1
   d4d3c:	4815      	ldr	r0, [pc, #84]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d3e:	f8cd 8000 	str.w	r8, [sp]
   d4d42:	f009 fedd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d4d46:	f104 011c 	add.w	r1, r4, #28
   d4d4a:	4633      	mov	r3, r6
   d4d4c:	462a      	mov	r2, r5
   d4d4e:	b289      	uxth	r1, r1
   d4d50:	4810      	ldr	r0, [pc, #64]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d52:	f8cd 8000 	str.w	r8, [sp]
   d4d56:	f009 fed3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4d5a:	1c61      	adds	r1, r4, #1
   d4d5c:	463b      	mov	r3, r7
   d4d5e:	463a      	mov	r2, r7
   d4d60:	b289      	uxth	r1, r1
   d4d62:	480c      	ldr	r0, [pc, #48]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d64:	9700      	str	r7, [sp, #0]
   d4d66:	f009 fecb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4d6a:	1ca1      	adds	r1, r4, #2
   d4d6c:	463b      	mov	r3, r7
   d4d6e:	463a      	mov	r2, r7
   d4d70:	b289      	uxth	r1, r1
   d4d72:	4808      	ldr	r0, [pc, #32]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d74:	9700      	str	r7, [sp, #0]
   d4d76:	f009 fec3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4d7a:	1d21      	adds	r1, r4, #4
   d4d7c:	b289      	uxth	r1, r1
   d4d7e:	9700      	str	r7, [sp, #0]
   d4d80:	463b      	mov	r3, r7
   d4d82:	463a      	mov	r2, r7
   d4d84:	4803      	ldr	r0, [pc, #12]	; (d4d94 <_Z3numiiiii+0x9c0>)
   d4d86:	f009 febb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d4d8a:	1d61      	adds	r1, r4, #5
   d4d8c:	e1a6      	b.n	d50dc <_Z3numiiiii+0xd08>
   d4d8e:	bf00      	nop
   d4d90:	80000001 	.word	0x80000001
   d4d94:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 4)
   d4d98:	2804      	cmp	r0, #4
   d4d9a:	f040 81a8 	bne.w	d50ee <_Z3numiiiii+0xd1a>
{
    if((pix/8)%2 == 1)
   d4d9e:	4bcd      	ldr	r3, [pc, #820]	; (d50d4 <_Z3numiiiii+0xd00>)
   d4da0:	2708      	movs	r7, #8
   d4da2:	fb94 f7f7 	sdiv	r7, r4, r7
   d4da6:	403b      	ands	r3, r7
   d4da8:	2b00      	cmp	r3, #0
   d4daa:	bfbe      	ittt	lt
   d4dac:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4db0:	f063 0301 	ornlt	r3, r3, #1
   d4db4:	3301      	addlt	r3, #1
   d4db6:	2b01      	cmp	r3, #1
   d4db8:	f040 80d0 	bne.w	d4f5c <_Z3numiiiii+0xb88>
    {
        strip.setPixelColor(pix,R,G,B);
   d4dbc:	fa1f f884 	uxth.w	r8, r4
   d4dc0:	fa5f f985 	uxtb.w	r9, r5
   d4dc4:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4dc8:	48c3      	ldr	r0, [pc, #780]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4dca:	f8cd b000 	str.w	fp, [sp]
   d4dce:	fa5f fa86 	uxtb.w	sl, r6
   d4dd2:	464a      	mov	r2, r9
   d4dd4:	4653      	mov	r3, sl
   d4dd6:	4641      	mov	r1, r8
   d4dd8:	f009 fe92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d4ddc:	f108 31ff 	add.w	r1, r8, #4294967295
   d4de0:	464a      	mov	r2, r9
   d4de2:	4653      	mov	r3, sl
   d4de4:	b289      	uxth	r1, r1
   d4de6:	48bc      	ldr	r0, [pc, #752]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4de8:	f8cd b000 	str.w	fp, [sp]
   d4dec:	f009 fe88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d4df0:	f1a8 0102 	sub.w	r1, r8, #2
   d4df4:	464a      	mov	r2, r9
   d4df6:	4653      	mov	r3, sl
   d4df8:	b289      	uxth	r1, r1
   d4dfa:	48b7      	ldr	r0, [pc, #732]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4dfc:	f8cd b000 	str.w	fp, [sp]
   d4e00:	f009 fe7e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4e04:	f1a8 0103 	sub.w	r1, r8, #3
   d4e08:	464a      	mov	r2, r9
   d4e0a:	4653      	mov	r3, sl
   d4e0c:	b289      	uxth	r1, r1
   d4e0e:	48b2      	ldr	r0, [pc, #712]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e10:	f8cd b000 	str.w	fp, [sp]
   d4e14:	f009 fe74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4e18:	f108 0104 	add.w	r1, r8, #4
   d4e1c:	464a      	mov	r2, r9
   d4e1e:	4653      	mov	r3, sl
   d4e20:	b289      	uxth	r1, r1
   d4e22:	48ad      	ldr	r0, [pc, #692]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e24:	f8cd b000 	str.w	fp, [sp]
   d4e28:	f009 fe6a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4e2c:	f108 010d 	add.w	r1, r8, #13
   d4e30:	464a      	mov	r2, r9
   d4e32:	4653      	mov	r3, sl
   d4e34:	b289      	uxth	r1, r1
   d4e36:	48a8      	ldr	r0, [pc, #672]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e38:	f8cd b000 	str.w	fp, [sp]
   d4e3c:	f009 fe60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d4e40:	f108 0111 	add.w	r1, r8, #17
   d4e44:	464a      	mov	r2, r9
   d4e46:	4653      	mov	r3, sl
   d4e48:	b289      	uxth	r1, r1
   d4e4a:	48a3      	ldr	r0, [pc, #652]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e4c:	f8cd b000 	str.w	fp, [sp]
   d4e50:	f009 fe56 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4e54:	f108 0112 	add.w	r1, r8, #18
   d4e58:	464a      	mov	r2, r9
   d4e5a:	4653      	mov	r3, sl
   d4e5c:	b289      	uxth	r1, r1
   d4e5e:	489e      	ldr	r0, [pc, #632]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e60:	f8cd b000 	str.w	fp, [sp]
   d4e64:	f009 fe4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4e68:	f108 0113 	add.w	r1, r8, #19
   d4e6c:	464a      	mov	r2, r9
   d4e6e:	4653      	mov	r3, sl
   d4e70:	b289      	uxth	r1, r1
   d4e72:	4899      	ldr	r0, [pc, #612]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e74:	f8cd b000 	str.w	fp, [sp]
   d4e78:	f009 fe42 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4e7c:	f108 0114 	add.w	r1, r8, #20
   d4e80:	464a      	mov	r2, r9
   d4e82:	4653      	mov	r3, sl
   d4e84:	b289      	uxth	r1, r1
   d4e86:	4894      	ldr	r0, [pc, #592]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e88:	f8cd b000 	str.w	fp, [sp]
   d4e8c:	f009 fe38 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d4e90:	f108 0115 	add.w	r1, r8, #21
   d4e94:	464a      	mov	r2, r9
   d4e96:	4653      	mov	r3, sl
   d4e98:	b289      	uxth	r1, r1
   d4e9a:	488f      	ldr	r0, [pc, #572]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4e9c:	f8cd b000 	str.w	fp, [sp]
   d4ea0:	f009 fe2e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4ea4:	f108 0116 	add.w	r1, r8, #22
   d4ea8:	464a      	mov	r2, r9
   d4eaa:	4653      	mov	r3, sl
   d4eac:	b289      	uxth	r1, r1
   d4eae:	488a      	ldr	r0, [pc, #552]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4eb0:	f8cd b000 	str.w	fp, [sp]
   d4eb4:	f009 fe24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4eb8:	f108 0117 	add.w	r1, r8, #23
   d4ebc:	464a      	mov	r2, r9
   d4ebe:	4653      	mov	r3, sl
   d4ec0:	b289      	uxth	r1, r1
   d4ec2:	4885      	ldr	r0, [pc, #532]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4ec4:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix+1,0,0,0);
   d4ec8:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d4ecc:	f009 fe18 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4ed0:	f108 0101 	add.w	r1, r8, #1
   d4ed4:	464b      	mov	r3, r9
   d4ed6:	464a      	mov	r2, r9
   d4ed8:	b289      	uxth	r1, r1
   d4eda:	487f      	ldr	r0, [pc, #508]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4edc:	f8cd 9000 	str.w	r9, [sp]
   d4ee0:	f009 fe0e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d4ee4:	f108 0110 	add.w	r1, r8, #16
   d4ee8:	464b      	mov	r3, r9
   d4eea:	464a      	mov	r2, r9
   d4eec:	b289      	uxth	r1, r1
   d4eee:	487a      	ldr	r0, [pc, #488]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4ef0:	f8cd 9000 	str.w	r9, [sp]
   d4ef4:	f009 fe04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d4ef8:	f1a8 0104 	sub.w	r1, r8, #4
   d4efc:	464b      	mov	r3, r9
   d4efe:	464a      	mov	r2, r9
   d4f00:	b289      	uxth	r1, r1
   d4f02:	4875      	ldr	r0, [pc, #468]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f04:	f8cd 9000 	str.w	r9, [sp]
   d4f08:	f009 fdfa 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4f0c:	f1a8 0105 	sub.w	r1, r8, #5
   d4f10:	464b      	mov	r3, r9
   d4f12:	464a      	mov	r2, r9
   d4f14:	b289      	uxth	r1, r1
   d4f16:	4870      	ldr	r0, [pc, #448]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f18:	f8cd 9000 	str.w	r9, [sp]
   d4f1c:	f009 fdf0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d4f20:	f1a8 0106 	sub.w	r1, r8, #6
   d4f24:	464b      	mov	r3, r9
   d4f26:	464a      	mov	r2, r9
   d4f28:	b289      	uxth	r1, r1
   d4f2a:	486b      	ldr	r0, [pc, #428]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f2c:	f8cd 9000 	str.w	r9, [sp]
   d4f30:	f009 fde6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d4f34:	f108 0107 	add.w	r1, r8, #7
   d4f38:	464b      	mov	r3, r9
   d4f3a:	464a      	mov	r2, r9
   d4f3c:	b289      	uxth	r1, r1
   d4f3e:	4866      	ldr	r0, [pc, #408]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f40:	f8cd 9000 	str.w	r9, [sp]
   d4f44:	f009 fddc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d4f48:	f108 010a 	add.w	r1, r8, #10
   d4f4c:	f8cd 9000 	str.w	r9, [sp]
   d4f50:	464b      	mov	r3, r9
   d4f52:	464a      	mov	r2, r9
   d4f54:	b289      	uxth	r1, r1
   d4f56:	4860      	ldr	r0, [pc, #384]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f58:	f009 fdd2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4f5c:	f017 0701 	ands.w	r7, r7, #1
   d4f60:	f041 8264 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4f64:	b2a4      	uxth	r4, r4
   d4f66:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4f6a:	485b      	ldr	r0, [pc, #364]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f6c:	f8cd 8000 	str.w	r8, [sp]
   d4f70:	b2ed      	uxtb	r5, r5
   d4f72:	b2f6      	uxtb	r6, r6
   d4f74:	4633      	mov	r3, r6
   d4f76:	462a      	mov	r2, r5
   d4f78:	4621      	mov	r1, r4
   d4f7a:	f009 fdc1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4f7e:	1c61      	adds	r1, r4, #1
   d4f80:	4633      	mov	r3, r6
   d4f82:	462a      	mov	r2, r5
   d4f84:	b289      	uxth	r1, r1
   d4f86:	4854      	ldr	r0, [pc, #336]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f88:	f8cd 8000 	str.w	r8, [sp]
   d4f8c:	f009 fdb8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d4f90:	1ca1      	adds	r1, r4, #2
   d4f92:	4633      	mov	r3, r6
   d4f94:	462a      	mov	r2, r5
   d4f96:	b289      	uxth	r1, r1
   d4f98:	484f      	ldr	r0, [pc, #316]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4f9a:	f8cd 8000 	str.w	r8, [sp]
   d4f9e:	f009 fdaf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4fa2:	1ce1      	adds	r1, r4, #3
   d4fa4:	4633      	mov	r3, r6
   d4fa6:	462a      	mov	r2, r5
   d4fa8:	b289      	uxth	r1, r1
   d4faa:	484b      	ldr	r0, [pc, #300]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4fac:	f8cd 8000 	str.w	r8, [sp]
   d4fb0:	f009 fda6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4fb4:	f104 010c 	add.w	r1, r4, #12
   d4fb8:	4633      	mov	r3, r6
   d4fba:	462a      	mov	r2, r5
   d4fbc:	b289      	uxth	r1, r1
   d4fbe:	4846      	ldr	r0, [pc, #280]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4fc0:	f8cd 8000 	str.w	r8, [sp]
   d4fc4:	f009 fd9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4fc8:	f104 0113 	add.w	r1, r4, #19
   d4fcc:	4633      	mov	r3, r6
   d4fce:	462a      	mov	r2, r5
   d4fd0:	b289      	uxth	r1, r1
   d4fd2:	4841      	ldr	r0, [pc, #260]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4fd4:	f8cd 8000 	str.w	r8, [sp]
   d4fd8:	f009 fd92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4fdc:	f104 011f 	add.w	r1, r4, #31
   d4fe0:	4633      	mov	r3, r6
   d4fe2:	462a      	mov	r2, r5
   d4fe4:	b289      	uxth	r1, r1
   d4fe6:	483c      	ldr	r0, [pc, #240]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4fe8:	f8cd 8000 	str.w	r8, [sp]
   d4fec:	f009 fd88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d4ff0:	f104 011e 	add.w	r1, r4, #30
   d4ff4:	4633      	mov	r3, r6
   d4ff6:	462a      	mov	r2, r5
   d4ff8:	b289      	uxth	r1, r1
   d4ffa:	4837      	ldr	r0, [pc, #220]	; (d50d8 <_Z3numiiiii+0xd04>)
   d4ffc:	f8cd 8000 	str.w	r8, [sp]
   d5000:	f009 fd7e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5004:	f104 011d 	add.w	r1, r4, #29
   d5008:	4633      	mov	r3, r6
   d500a:	462a      	mov	r2, r5
   d500c:	b289      	uxth	r1, r1
   d500e:	4832      	ldr	r0, [pc, #200]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5010:	f8cd 8000 	str.w	r8, [sp]
   d5014:	f009 fd74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5018:	f104 011c 	add.w	r1, r4, #28
   d501c:	4633      	mov	r3, r6
   d501e:	462a      	mov	r2, r5
   d5020:	b289      	uxth	r1, r1
   d5022:	482d      	ldr	r0, [pc, #180]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5024:	f8cd 8000 	str.w	r8, [sp]
   d5028:	f009 fd6a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d502c:	f104 011b 	add.w	r1, r4, #27
   d5030:	4633      	mov	r3, r6
   d5032:	462a      	mov	r2, r5
   d5034:	b289      	uxth	r1, r1
   d5036:	4828      	ldr	r0, [pc, #160]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5038:	f8cd 8000 	str.w	r8, [sp]
   d503c:	f009 fd60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5040:	f104 011a 	add.w	r1, r4, #26
   d5044:	4633      	mov	r3, r6
   d5046:	462a      	mov	r2, r5
   d5048:	b289      	uxth	r1, r1
   d504a:	4823      	ldr	r0, [pc, #140]	; (d50d8 <_Z3numiiiii+0xd04>)
   d504c:	f8cd 8000 	str.w	r8, [sp]
   d5050:	f009 fd56 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5054:	f104 0119 	add.w	r1, r4, #25
   d5058:	4633      	mov	r3, r6
   d505a:	462a      	mov	r2, r5
   d505c:	b289      	uxth	r1, r1
   d505e:	481e      	ldr	r0, [pc, #120]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5060:	f8cd 8000 	str.w	r8, [sp]
   d5064:	f009 fd4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5068:	1d21      	adds	r1, r4, #4
   d506a:	463b      	mov	r3, r7
   d506c:	463a      	mov	r2, r7
   d506e:	b289      	uxth	r1, r1
   d5070:	4819      	ldr	r0, [pc, #100]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5072:	9700      	str	r7, [sp, #0]
   d5074:	f009 fd44 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5078:	1d61      	adds	r1, r4, #5
   d507a:	463b      	mov	r3, r7
   d507c:	463a      	mov	r2, r7
   d507e:	b289      	uxth	r1, r1
   d5080:	4815      	ldr	r0, [pc, #84]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5082:	9700      	str	r7, [sp, #0]
   d5084:	f009 fd3c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5088:	1da1      	adds	r1, r4, #6
   d508a:	463b      	mov	r3, r7
   d508c:	463a      	mov	r2, r7
   d508e:	b289      	uxth	r1, r1
   d5090:	4811      	ldr	r0, [pc, #68]	; (d50d8 <_Z3numiiiii+0xd04>)
   d5092:	9700      	str	r7, [sp, #0]
   d5094:	f009 fd34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d5098:	f104 0109 	add.w	r1, r4, #9
   d509c:	463b      	mov	r3, r7
   d509e:	463a      	mov	r2, r7
   d50a0:	b289      	uxth	r1, r1
   d50a2:	480d      	ldr	r0, [pc, #52]	; (d50d8 <_Z3numiiiii+0xd04>)
   d50a4:	9700      	str	r7, [sp, #0]
   d50a6:	f009 fd2b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d50aa:	f104 0116 	add.w	r1, r4, #22
   d50ae:	463b      	mov	r3, r7
   d50b0:	463a      	mov	r2, r7
   d50b2:	b289      	uxth	r1, r1
   d50b4:	4808      	ldr	r0, [pc, #32]	; (d50d8 <_Z3numiiiii+0xd04>)
   d50b6:	9700      	str	r7, [sp, #0]
   d50b8:	f009 fd22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d50bc:	f104 010f 	add.w	r1, r4, #15
   d50c0:	b289      	uxth	r1, r1
   d50c2:	9700      	str	r7, [sp, #0]
   d50c4:	463b      	mov	r3, r7
   d50c6:	463a      	mov	r2, r7
   d50c8:	4803      	ldr	r0, [pc, #12]	; (d50d8 <_Z3numiiiii+0xd04>)
   d50ca:	f009 fd19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d50ce:	f104 0110 	add.w	r1, r4, #16
   d50d2:	e003      	b.n	d50dc <_Z3numiiiii+0xd08>
   d50d4:	80000001 	.word	0x80000001
   d50d8:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+6,R,G,B);
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
        strip.setPixelColor(pix+29,0,0,0);
        strip.setPixelColor(pix+30,0,0,0);
   d50dc:	9700      	str	r7, [sp, #0]
   d50de:	463b      	mov	r3, r7
   d50e0:	463a      	mov	r2, r7
   d50e2:	b289      	uxth	r1, r1
   d50e4:	48ce      	ldr	r0, [pc, #824]	; (d5420 <_Z3numiiiii+0x104c>)
   d50e6:	f009 fd0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d50ea:	f001 b99f 	b.w	d642c <_Z3numiiiii+0x2058>
        strip.setPixelColor(pix+16,0,0,0);
        
        
    }
}
if(num == 5)
   d50ee:	2805      	cmp	r0, #5
   d50f0:	f040 819a 	bne.w	d5428 <_Z3numiiiii+0x1054>
{
    if((pix/8)%2 == 1)
   d50f4:	4bcb      	ldr	r3, [pc, #812]	; (d5424 <_Z3numiiiii+0x1050>)
   d50f6:	f04f 0a08 	mov.w	sl, #8
   d50fa:	fb94 fafa 	sdiv	sl, r4, sl
   d50fe:	ea0a 0303 	and.w	r3, sl, r3
   d5102:	2b00      	cmp	r3, #0
   d5104:	bfbe      	ittt	lt
   d5106:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d510a:	f063 0301 	ornlt	r3, r3, #1
   d510e:	3301      	addlt	r3, #1
   d5110:	2b01      	cmp	r3, #1
   d5112:	f040 80c6 	bne.w	d52a2 <_Z3numiiiii+0xece>
    {
        strip.setPixelColor(pix,R,G,B);
   d5116:	b2a7      	uxth	r7, r4
   d5118:	fa5f f885 	uxtb.w	r8, r5
   d511c:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d5120:	48bf      	ldr	r0, [pc, #764]	; (d5420 <_Z3numiiiii+0x104c>)
   d5122:	f8cd b000 	str.w	fp, [sp]
   d5126:	fa5f f986 	uxtb.w	r9, r6
   d512a:	4642      	mov	r2, r8
   d512c:	464b      	mov	r3, r9
   d512e:	4639      	mov	r1, r7
   d5130:	f009 fce6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5134:	1c79      	adds	r1, r7, #1
   d5136:	4642      	mov	r2, r8
   d5138:	464b      	mov	r3, r9
   d513a:	b289      	uxth	r1, r1
   d513c:	48b8      	ldr	r0, [pc, #736]	; (d5420 <_Z3numiiiii+0x104c>)
   d513e:	f8cd b000 	str.w	fp, [sp]
   d5142:	f009 fcdd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5146:	f107 0110 	add.w	r1, r7, #16
   d514a:	4642      	mov	r2, r8
   d514c:	464b      	mov	r3, r9
   d514e:	b289      	uxth	r1, r1
   d5150:	48b3      	ldr	r0, [pc, #716]	; (d5420 <_Z3numiiiii+0x104c>)
   d5152:	f8cd b000 	str.w	fp, [sp]
   d5156:	f009 fcd3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d515a:	f107 0111 	add.w	r1, r7, #17
   d515e:	4642      	mov	r2, r8
   d5160:	464b      	mov	r3, r9
   d5162:	b289      	uxth	r1, r1
   d5164:	48ae      	ldr	r0, [pc, #696]	; (d5420 <_Z3numiiiii+0x104c>)
   d5166:	f8cd b000 	str.w	fp, [sp]
   d516a:	f009 fcc9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d516e:	1e79      	subs	r1, r7, #1
   d5170:	4642      	mov	r2, r8
   d5172:	464b      	mov	r3, r9
   d5174:	b289      	uxth	r1, r1
   d5176:	48aa      	ldr	r0, [pc, #680]	; (d5420 <_Z3numiiiii+0x104c>)
   d5178:	f8cd b000 	str.w	fp, [sp]
   d517c:	f009 fcc0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5180:	1eb9      	subs	r1, r7, #2
   d5182:	4642      	mov	r2, r8
   d5184:	464b      	mov	r3, r9
   d5186:	b289      	uxth	r1, r1
   d5188:	48a5      	ldr	r0, [pc, #660]	; (d5420 <_Z3numiiiii+0x104c>)
   d518a:	f8cd b000 	str.w	fp, [sp]
   d518e:	f009 fcb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5192:	1ef9      	subs	r1, r7, #3
   d5194:	4642      	mov	r2, r8
   d5196:	464b      	mov	r3, r9
   d5198:	b289      	uxth	r1, r1
   d519a:	48a1      	ldr	r0, [pc, #644]	; (d5420 <_Z3numiiiii+0x104c>)
   d519c:	f8cd b000 	str.w	fp, [sp]
   d51a0:	f009 fcae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d51a4:	1fb9      	subs	r1, r7, #6
   d51a6:	4642      	mov	r2, r8
   d51a8:	464b      	mov	r3, r9
   d51aa:	b289      	uxth	r1, r1
   d51ac:	489c      	ldr	r0, [pc, #624]	; (d5420 <_Z3numiiiii+0x104c>)
   d51ae:	f8cd b000 	str.w	fp, [sp]
   d51b2:	f009 fca5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d51b6:	1d39      	adds	r1, r7, #4
   d51b8:	4642      	mov	r2, r8
   d51ba:	464b      	mov	r3, r9
   d51bc:	b289      	uxth	r1, r1
   d51be:	4898      	ldr	r0, [pc, #608]	; (d5420 <_Z3numiiiii+0x104c>)
   d51c0:	f8cd b000 	str.w	fp, [sp]
   d51c4:	f009 fc9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d51c8:	f107 010d 	add.w	r1, r7, #13
   d51cc:	4642      	mov	r2, r8
   d51ce:	464b      	mov	r3, r9
   d51d0:	b289      	uxth	r1, r1
   d51d2:	4893      	ldr	r0, [pc, #588]	; (d5420 <_Z3numiiiii+0x104c>)
   d51d4:	f8cd b000 	str.w	fp, [sp]
   d51d8:	f009 fc92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d51dc:	f107 0114 	add.w	r1, r7, #20
   d51e0:	4642      	mov	r2, r8
   d51e2:	464b      	mov	r3, r9
   d51e4:	b289      	uxth	r1, r1
   d51e6:	488e      	ldr	r0, [pc, #568]	; (d5420 <_Z3numiiiii+0x104c>)
   d51e8:	f8cd b000 	str.w	fp, [sp]
   d51ec:	f009 fc88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d51f0:	f107 0115 	add.w	r1, r7, #21
   d51f4:	4642      	mov	r2, r8
   d51f6:	464b      	mov	r3, r9
   d51f8:	b289      	uxth	r1, r1
   d51fa:	4889      	ldr	r0, [pc, #548]	; (d5420 <_Z3numiiiii+0x104c>)
   d51fc:	f8cd b000 	str.w	fp, [sp]
   d5200:	f009 fc7e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5204:	f107 0116 	add.w	r1, r7, #22
   d5208:	4642      	mov	r2, r8
   d520a:	464b      	mov	r3, r9
   d520c:	b289      	uxth	r1, r1
   d520e:	4884      	ldr	r0, [pc, #528]	; (d5420 <_Z3numiiiii+0x104c>)
   d5210:	f8cd b000 	str.w	fp, [sp]
   d5214:	f009 fc74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5218:	f107 0117 	add.w	r1, r7, #23
   d521c:	4642      	mov	r2, r8
   d521e:	464b      	mov	r3, r9
   d5220:	b289      	uxth	r1, r1
   d5222:	487f      	ldr	r0, [pc, #508]	; (d5420 <_Z3numiiiii+0x104c>)
   d5224:	f8cd b000 	str.w	fp, [sp]
   d5228:	f009 fc6a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d522c:	f107 010a 	add.w	r1, r7, #10
   d5230:	4642      	mov	r2, r8
   d5232:	464b      	mov	r3, r9
   d5234:	b289      	uxth	r1, r1
   d5236:	487a      	ldr	r0, [pc, #488]	; (d5420 <_Z3numiiiii+0x104c>)
   d5238:	f8cd b000 	str.w	fp, [sp]
   d523c:	f009 fc60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5240:	1df9      	adds	r1, r7, #7
   d5242:	4642      	mov	r2, r8
   d5244:	464b      	mov	r3, r9
   d5246:	b289      	uxth	r1, r1
   d5248:	4875      	ldr	r0, [pc, #468]	; (d5420 <_Z3numiiiii+0x104c>)
   d524a:	f8cd b000 	str.w	fp, [sp]

        strip.setPixelColor(pix-4,0,0,0);
   d524e:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
   d5252:	f009 fc55 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>

        strip.setPixelColor(pix-4,0,0,0);
   d5256:	1f39      	subs	r1, r7, #4
   d5258:	4643      	mov	r3, r8
   d525a:	4642      	mov	r2, r8
   d525c:	b289      	uxth	r1, r1
   d525e:	4870      	ldr	r0, [pc, #448]	; (d5420 <_Z3numiiiii+0x104c>)
   d5260:	f8cd 8000 	str.w	r8, [sp]
   d5264:	f009 fc4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5268:	1f79      	subs	r1, r7, #5
   d526a:	4643      	mov	r3, r8
   d526c:	4642      	mov	r2, r8
   d526e:	b289      	uxth	r1, r1
   d5270:	486b      	ldr	r0, [pc, #428]	; (d5420 <_Z3numiiiii+0x104c>)
   d5272:	f8cd 8000 	str.w	r8, [sp]
   d5276:	f009 fc43 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d527a:	f107 0113 	add.w	r1, r7, #19
   d527e:	4643      	mov	r3, r8
   d5280:	4642      	mov	r2, r8
   d5282:	b289      	uxth	r1, r1
   d5284:	4866      	ldr	r0, [pc, #408]	; (d5420 <_Z3numiiiii+0x104c>)
   d5286:	f8cd 8000 	str.w	r8, [sp]
   d528a:	f009 fc39 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d528e:	f107 0112 	add.w	r1, r7, #18
   d5292:	f8cd 8000 	str.w	r8, [sp]
   d5296:	4643      	mov	r3, r8
   d5298:	4642      	mov	r2, r8
   d529a:	b289      	uxth	r1, r1
   d529c:	4860      	ldr	r0, [pc, #384]	; (d5420 <_Z3numiiiii+0x104c>)
   d529e:	f009 fc2f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d52a2:	f01a 0701 	ands.w	r7, sl, #1
   d52a6:	f041 80c1 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d52aa:	b2a4      	uxth	r4, r4
   d52ac:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d52b0:	485b      	ldr	r0, [pc, #364]	; (d5420 <_Z3numiiiii+0x104c>)
   d52b2:	f8cd 8000 	str.w	r8, [sp]
   d52b6:	b2ed      	uxtb	r5, r5
   d52b8:	b2f6      	uxtb	r6, r6
   d52ba:	4633      	mov	r3, r6
   d52bc:	462a      	mov	r2, r5
   d52be:	4621      	mov	r1, r4
   d52c0:	f009 fc1e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d52c4:	f104 010f 	add.w	r1, r4, #15
   d52c8:	4633      	mov	r3, r6
   d52ca:	462a      	mov	r2, r5
   d52cc:	b289      	uxth	r1, r1
   d52ce:	4854      	ldr	r0, [pc, #336]	; (d5420 <_Z3numiiiii+0x104c>)
   d52d0:	f8cd 8000 	str.w	r8, [sp]
   d52d4:	f009 fc14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d52d8:	f104 0110 	add.w	r1, r4, #16
   d52dc:	4633      	mov	r3, r6
   d52de:	462a      	mov	r2, r5
   d52e0:	b289      	uxth	r1, r1
   d52e2:	484f      	ldr	r0, [pc, #316]	; (d5420 <_Z3numiiiii+0x104c>)
   d52e4:	f8cd 8000 	str.w	r8, [sp]
   d52e8:	f009 fc0a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d52ec:	f104 011f 	add.w	r1, r4, #31
   d52f0:	4633      	mov	r3, r6
   d52f2:	462a      	mov	r2, r5
   d52f4:	b289      	uxth	r1, r1
   d52f6:	484a      	ldr	r0, [pc, #296]	; (d5420 <_Z3numiiiii+0x104c>)
   d52f8:	f8cd 8000 	str.w	r8, [sp]
   d52fc:	f009 fc00 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5300:	1c61      	adds	r1, r4, #1
   d5302:	4633      	mov	r3, r6
   d5304:	462a      	mov	r2, r5
   d5306:	b289      	uxth	r1, r1
   d5308:	4845      	ldr	r0, [pc, #276]	; (d5420 <_Z3numiiiii+0x104c>)
   d530a:	f8cd 8000 	str.w	r8, [sp]
   d530e:	f009 fbf7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5312:	1ca1      	adds	r1, r4, #2
   d5314:	4633      	mov	r3, r6
   d5316:	462a      	mov	r2, r5
   d5318:	b289      	uxth	r1, r1
   d531a:	4841      	ldr	r0, [pc, #260]	; (d5420 <_Z3numiiiii+0x104c>)
   d531c:	f8cd 8000 	str.w	r8, [sp]
   d5320:	f009 fbee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5324:	1ce1      	adds	r1, r4, #3
   d5326:	4633      	mov	r3, r6
   d5328:	462a      	mov	r2, r5
   d532a:	b289      	uxth	r1, r1
   d532c:	483c      	ldr	r0, [pc, #240]	; (d5420 <_Z3numiiiii+0x104c>)
   d532e:	f8cd 8000 	str.w	r8, [sp]
   d5332:	f009 fbe5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5336:	f104 010c 	add.w	r1, r4, #12
   d533a:	4633      	mov	r3, r6
   d533c:	462a      	mov	r2, r5
   d533e:	b289      	uxth	r1, r1
   d5340:	4837      	ldr	r0, [pc, #220]	; (d5420 <_Z3numiiiii+0x104c>)
   d5342:	f8cd 8000 	str.w	r8, [sp]
   d5346:	f009 fbdb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d534a:	f104 0113 	add.w	r1, r4, #19
   d534e:	4633      	mov	r3, r6
   d5350:	462a      	mov	r2, r5
   d5352:	b289      	uxth	r1, r1
   d5354:	4832      	ldr	r0, [pc, #200]	; (d5420 <_Z3numiiiii+0x104c>)
   d5356:	f8cd 8000 	str.w	r8, [sp]
   d535a:	f009 fbd1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d535e:	f104 011c 	add.w	r1, r4, #28
   d5362:	4633      	mov	r3, r6
   d5364:	462a      	mov	r2, r5
   d5366:	b289      	uxth	r1, r1
   d5368:	482d      	ldr	r0, [pc, #180]	; (d5420 <_Z3numiiiii+0x104c>)
   d536a:	f8cd 8000 	str.w	r8, [sp]
   d536e:	f009 fbc7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5372:	f104 011b 	add.w	r1, r4, #27
   d5376:	4633      	mov	r3, r6
   d5378:	462a      	mov	r2, r5
   d537a:	b289      	uxth	r1, r1
   d537c:	4828      	ldr	r0, [pc, #160]	; (d5420 <_Z3numiiiii+0x104c>)
   d537e:	f8cd 8000 	str.w	r8, [sp]
   d5382:	f009 fbbd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5386:	f104 011a 	add.w	r1, r4, #26
   d538a:	4633      	mov	r3, r6
   d538c:	462a      	mov	r2, r5
   d538e:	b289      	uxth	r1, r1
   d5390:	4823      	ldr	r0, [pc, #140]	; (d5420 <_Z3numiiiii+0x104c>)
   d5392:	f8cd 8000 	str.w	r8, [sp]
   d5396:	f009 fbb3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d539a:	f104 0119 	add.w	r1, r4, #25
   d539e:	4633      	mov	r3, r6
   d53a0:	462a      	mov	r2, r5
   d53a2:	b289      	uxth	r1, r1
   d53a4:	481e      	ldr	r0, [pc, #120]	; (d5420 <_Z3numiiiii+0x104c>)
   d53a6:	f8cd 8000 	str.w	r8, [sp]
   d53aa:	f009 fba9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d53ae:	f104 0116 	add.w	r1, r4, #22
   d53b2:	4633      	mov	r3, r6
   d53b4:	462a      	mov	r2, r5
   d53b6:	b289      	uxth	r1, r1
   d53b8:	4819      	ldr	r0, [pc, #100]	; (d5420 <_Z3numiiiii+0x104c>)
   d53ba:	f8cd 8000 	str.w	r8, [sp]
   d53be:	f009 fb9f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d53c2:	f104 0109 	add.w	r1, r4, #9
   d53c6:	4633      	mov	r3, r6
   d53c8:	462a      	mov	r2, r5
   d53ca:	b289      	uxth	r1, r1
   d53cc:	4814      	ldr	r0, [pc, #80]	; (d5420 <_Z3numiiiii+0x104c>)
   d53ce:	f8cd 8000 	str.w	r8, [sp]
   d53d2:	f009 fb95 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d53d6:	1da1      	adds	r1, r4, #6
   d53d8:	4633      	mov	r3, r6
   d53da:	462a      	mov	r2, r5
   d53dc:	b289      	uxth	r1, r1
   d53de:	4810      	ldr	r0, [pc, #64]	; (d5420 <_Z3numiiiii+0x104c>)
   d53e0:	f8cd 8000 	str.w	r8, [sp]
   d53e4:	f009 fb8c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d53e8:	1d21      	adds	r1, r4, #4
   d53ea:	463b      	mov	r3, r7
   d53ec:	463a      	mov	r2, r7
   d53ee:	b289      	uxth	r1, r1
   d53f0:	480b      	ldr	r0, [pc, #44]	; (d5420 <_Z3numiiiii+0x104c>)
   d53f2:	9700      	str	r7, [sp, #0]
   d53f4:	f009 fb84 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d53f8:	1d61      	adds	r1, r4, #5
   d53fa:	463b      	mov	r3, r7
   d53fc:	463a      	mov	r2, r7
   d53fe:	b289      	uxth	r1, r1
   d5400:	4807      	ldr	r0, [pc, #28]	; (d5420 <_Z3numiiiii+0x104c>)
   d5402:	9700      	str	r7, [sp, #0]
   d5404:	f009 fb7c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,0,0,0);
   d5408:	f104 011d 	add.w	r1, r4, #29
   d540c:	b289      	uxth	r1, r1
   d540e:	9700      	str	r7, [sp, #0]
   d5410:	463b      	mov	r3, r7
   d5412:	463a      	mov	r2, r7
   d5414:	4802      	ldr	r0, [pc, #8]	; (d5420 <_Z3numiiiii+0x104c>)
   d5416:	f009 fb73 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d541a:	f104 011e 	add.w	r1, r4, #30
   d541e:	e65d      	b.n	d50dc <_Z3numiiiii+0xd08>
   d5420:	2003e31c 	.word	0x2003e31c
   d5424:	80000001 	.word	0x80000001
    }
}
if(num == 6)
   d5428:	2806      	cmp	r0, #6
   d542a:	f040 819d 	bne.w	d5768 <_Z3numiiiii+0x1394>
{
    if((pix/8)%2 == 1)
   d542e:	4bcc      	ldr	r3, [pc, #816]	; (d5760 <_Z3numiiiii+0x138c>)
   d5430:	f04f 0b08 	mov.w	fp, #8
   d5434:	fb94 fbfb 	sdiv	fp, r4, fp
   d5438:	ea0b 0303 	and.w	r3, fp, r3
   d543c:	2b00      	cmp	r3, #0
   d543e:	bfbe      	ittt	lt
   d5440:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5444:	f063 0301 	ornlt	r3, r3, #1
   d5448:	3301      	addlt	r3, #1
   d544a:	2b01      	cmp	r3, #1
   d544c:	f040 80c6 	bne.w	d55dc <_Z3numiiiii+0x1208>
    {
        strip.setPixelColor(pix,R,G,B);
   d5450:	b2a7      	uxth	r7, r4
   d5452:	fa5f f885 	uxtb.w	r8, r5
   d5456:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d545a:	48c2      	ldr	r0, [pc, #776]	; (d5764 <_Z3numiiiii+0x1390>)
   d545c:	f8cd a000 	str.w	sl, [sp]
   d5460:	fa5f f986 	uxtb.w	r9, r6
   d5464:	4642      	mov	r2, r8
   d5466:	464b      	mov	r3, r9
   d5468:	4639      	mov	r1, r7
   d546a:	f009 fb49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d546e:	1c79      	adds	r1, r7, #1
   d5470:	4642      	mov	r2, r8
   d5472:	464b      	mov	r3, r9
   d5474:	b289      	uxth	r1, r1
   d5476:	48bb      	ldr	r0, [pc, #748]	; (d5764 <_Z3numiiiii+0x1390>)
   d5478:	f8cd a000 	str.w	sl, [sp]
   d547c:	f009 fb40 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5480:	f107 0110 	add.w	r1, r7, #16
   d5484:	4642      	mov	r2, r8
   d5486:	464b      	mov	r3, r9
   d5488:	b289      	uxth	r1, r1
   d548a:	48b6      	ldr	r0, [pc, #728]	; (d5764 <_Z3numiiiii+0x1390>)
   d548c:	f8cd a000 	str.w	sl, [sp]
   d5490:	f009 fb36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5494:	f107 0111 	add.w	r1, r7, #17
   d5498:	4642      	mov	r2, r8
   d549a:	464b      	mov	r3, r9
   d549c:	b289      	uxth	r1, r1
   d549e:	48b1      	ldr	r0, [pc, #708]	; (d5764 <_Z3numiiiii+0x1390>)
   d54a0:	f8cd a000 	str.w	sl, [sp]
   d54a4:	f009 fb2c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d54a8:	1e79      	subs	r1, r7, #1
   d54aa:	4642      	mov	r2, r8
   d54ac:	464b      	mov	r3, r9
   d54ae:	b289      	uxth	r1, r1
   d54b0:	48ac      	ldr	r0, [pc, #688]	; (d5764 <_Z3numiiiii+0x1390>)
   d54b2:	f8cd a000 	str.w	sl, [sp]
   d54b6:	f009 fb23 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d54ba:	1eb9      	subs	r1, r7, #2
   d54bc:	4642      	mov	r2, r8
   d54be:	464b      	mov	r3, r9
   d54c0:	b289      	uxth	r1, r1
   d54c2:	48a8      	ldr	r0, [pc, #672]	; (d5764 <_Z3numiiiii+0x1390>)
   d54c4:	f8cd a000 	str.w	sl, [sp]
   d54c8:	f009 fb1a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d54cc:	1ef9      	subs	r1, r7, #3
   d54ce:	4642      	mov	r2, r8
   d54d0:	464b      	mov	r3, r9
   d54d2:	b289      	uxth	r1, r1
   d54d4:	48a3      	ldr	r0, [pc, #652]	; (d5764 <_Z3numiiiii+0x1390>)
   d54d6:	f8cd a000 	str.w	sl, [sp]
   d54da:	f009 fb11 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d54de:	1f39      	subs	r1, r7, #4
   d54e0:	4642      	mov	r2, r8
   d54e2:	464b      	mov	r3, r9
   d54e4:	b289      	uxth	r1, r1
   d54e6:	489f      	ldr	r0, [pc, #636]	; (d5764 <_Z3numiiiii+0x1390>)
   d54e8:	f8cd a000 	str.w	sl, [sp]
   d54ec:	f009 fb08 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d54f0:	1f79      	subs	r1, r7, #5
   d54f2:	4642      	mov	r2, r8
   d54f4:	464b      	mov	r3, r9
   d54f6:	b289      	uxth	r1, r1
   d54f8:	489a      	ldr	r0, [pc, #616]	; (d5764 <_Z3numiiiii+0x1390>)
   d54fa:	f8cd a000 	str.w	sl, [sp]
   d54fe:	f009 faff 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5502:	1fb9      	subs	r1, r7, #6
   d5504:	4642      	mov	r2, r8
   d5506:	464b      	mov	r3, r9
   d5508:	b289      	uxth	r1, r1
   d550a:	4896      	ldr	r0, [pc, #600]	; (d5764 <_Z3numiiiii+0x1390>)
   d550c:	f8cd a000 	str.w	sl, [sp]
   d5510:	f009 faf6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5514:	1df9      	adds	r1, r7, #7
   d5516:	4642      	mov	r2, r8
   d5518:	464b      	mov	r3, r9
   d551a:	b289      	uxth	r1, r1
   d551c:	4891      	ldr	r0, [pc, #580]	; (d5764 <_Z3numiiiii+0x1390>)
   d551e:	f8cd a000 	str.w	sl, [sp]
   d5522:	f009 faed 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d5526:	f107 010a 	add.w	r1, r7, #10
   d552a:	4642      	mov	r2, r8
   d552c:	464b      	mov	r3, r9
   d552e:	b289      	uxth	r1, r1
   d5530:	488c      	ldr	r0, [pc, #560]	; (d5764 <_Z3numiiiii+0x1390>)
   d5532:	f8cd a000 	str.w	sl, [sp]
   d5536:	f009 fae3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d553a:	f107 0117 	add.w	r1, r7, #23
   d553e:	4642      	mov	r2, r8
   d5540:	464b      	mov	r3, r9
   d5542:	b289      	uxth	r1, r1
   d5544:	4887      	ldr	r0, [pc, #540]	; (d5764 <_Z3numiiiii+0x1390>)
   d5546:	f8cd a000 	str.w	sl, [sp]
   d554a:	f009 fad9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d554e:	f107 0116 	add.w	r1, r7, #22
   d5552:	4642      	mov	r2, r8
   d5554:	464b      	mov	r3, r9
   d5556:	b289      	uxth	r1, r1
   d5558:	4882      	ldr	r0, [pc, #520]	; (d5764 <_Z3numiiiii+0x1390>)
   d555a:	f8cd a000 	str.w	sl, [sp]
   d555e:	f009 facf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5562:	f107 0115 	add.w	r1, r7, #21
   d5566:	4642      	mov	r2, r8
   d5568:	464b      	mov	r3, r9
   d556a:	b289      	uxth	r1, r1
   d556c:	487d      	ldr	r0, [pc, #500]	; (d5764 <_Z3numiiiii+0x1390>)
   d556e:	f8cd a000 	str.w	sl, [sp]
   d5572:	f009 fac5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5576:	f107 0114 	add.w	r1, r7, #20
   d557a:	4642      	mov	r2, r8
   d557c:	464b      	mov	r3, r9
   d557e:	b289      	uxth	r1, r1
   d5580:	4878      	ldr	r0, [pc, #480]	; (d5764 <_Z3numiiiii+0x1390>)
   d5582:	f8cd a000 	str.w	sl, [sp]
   d5586:	f009 fabb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d558a:	1d39      	adds	r1, r7, #4
   d558c:	4642      	mov	r2, r8
   d558e:	464b      	mov	r3, r9
   d5590:	b289      	uxth	r1, r1
   d5592:	4874      	ldr	r0, [pc, #464]	; (d5764 <_Z3numiiiii+0x1390>)
   d5594:	f8cd a000 	str.w	sl, [sp]
   d5598:	f009 fab2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d559c:	f107 010d 	add.w	r1, r7, #13
   d55a0:	4642      	mov	r2, r8
   d55a2:	464b      	mov	r3, r9
   d55a4:	b289      	uxth	r1, r1
   d55a6:	486f      	ldr	r0, [pc, #444]	; (d5764 <_Z3numiiiii+0x1390>)
   d55a8:	f8cd a000 	str.w	sl, [sp]
   d55ac:	f009 faa8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+19,0,0,0);
   d55b0:	f04f 0800 	mov.w	r8, #0
   d55b4:	f107 0113 	add.w	r1, r7, #19
   d55b8:	4643      	mov	r3, r8
   d55ba:	4642      	mov	r2, r8
   d55bc:	b289      	uxth	r1, r1
   d55be:	4869      	ldr	r0, [pc, #420]	; (d5764 <_Z3numiiiii+0x1390>)
   d55c0:	f8cd 8000 	str.w	r8, [sp]
   d55c4:	f009 fa9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d55c8:	f107 0112 	add.w	r1, r7, #18
   d55cc:	f8cd 8000 	str.w	r8, [sp]
   d55d0:	4643      	mov	r3, r8
   d55d2:	4642      	mov	r2, r8
   d55d4:	b289      	uxth	r1, r1
   d55d6:	4863      	ldr	r0, [pc, #396]	; (d5764 <_Z3numiiiii+0x1390>)
   d55d8:	f009 fa92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d55dc:	f01b 0701 	ands.w	r7, fp, #1
   d55e0:	f040 8724 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d55e4:	b2a4      	uxth	r4, r4
   d55e6:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d55ea:	485e      	ldr	r0, [pc, #376]	; (d5764 <_Z3numiiiii+0x1390>)
   d55ec:	f8cd 8000 	str.w	r8, [sp]
   d55f0:	b2ed      	uxtb	r5, r5
   d55f2:	b2f6      	uxtb	r6, r6
   d55f4:	4633      	mov	r3, r6
   d55f6:	462a      	mov	r2, r5
   d55f8:	4621      	mov	r1, r4
   d55fa:	f009 fa81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d55fe:	f104 010f 	add.w	r1, r4, #15
   d5602:	4633      	mov	r3, r6
   d5604:	462a      	mov	r2, r5
   d5606:	b289      	uxth	r1, r1
   d5608:	4856      	ldr	r0, [pc, #344]	; (d5764 <_Z3numiiiii+0x1390>)
   d560a:	f8cd 8000 	str.w	r8, [sp]
   d560e:	f009 fa77 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5612:	f104 0110 	add.w	r1, r4, #16
   d5616:	4633      	mov	r3, r6
   d5618:	462a      	mov	r2, r5
   d561a:	b289      	uxth	r1, r1
   d561c:	4851      	ldr	r0, [pc, #324]	; (d5764 <_Z3numiiiii+0x1390>)
   d561e:	f8cd 8000 	str.w	r8, [sp]
   d5622:	f009 fa6d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5626:	f104 011f 	add.w	r1, r4, #31
   d562a:	4633      	mov	r3, r6
   d562c:	462a      	mov	r2, r5
   d562e:	b289      	uxth	r1, r1
   d5630:	484c      	ldr	r0, [pc, #304]	; (d5764 <_Z3numiiiii+0x1390>)
   d5632:	f8cd 8000 	str.w	r8, [sp]
   d5636:	f009 fa63 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d563a:	1c61      	adds	r1, r4, #1
   d563c:	4633      	mov	r3, r6
   d563e:	462a      	mov	r2, r5
   d5640:	b289      	uxth	r1, r1
   d5642:	4848      	ldr	r0, [pc, #288]	; (d5764 <_Z3numiiiii+0x1390>)
   d5644:	f8cd 8000 	str.w	r8, [sp]
   d5648:	f009 fa5a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d564c:	1ca1      	adds	r1, r4, #2
   d564e:	4633      	mov	r3, r6
   d5650:	462a      	mov	r2, r5
   d5652:	b289      	uxth	r1, r1
   d5654:	4843      	ldr	r0, [pc, #268]	; (d5764 <_Z3numiiiii+0x1390>)
   d5656:	f8cd 8000 	str.w	r8, [sp]
   d565a:	f009 fa51 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d565e:	1ce1      	adds	r1, r4, #3
   d5660:	4633      	mov	r3, r6
   d5662:	462a      	mov	r2, r5
   d5664:	b289      	uxth	r1, r1
   d5666:	483f      	ldr	r0, [pc, #252]	; (d5764 <_Z3numiiiii+0x1390>)
   d5668:	f8cd 8000 	str.w	r8, [sp]
   d566c:	f009 fa48 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5670:	1d21      	adds	r1, r4, #4
   d5672:	4633      	mov	r3, r6
   d5674:	462a      	mov	r2, r5
   d5676:	b289      	uxth	r1, r1
   d5678:	483a      	ldr	r0, [pc, #232]	; (d5764 <_Z3numiiiii+0x1390>)
   d567a:	f8cd 8000 	str.w	r8, [sp]
   d567e:	f009 fa3f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d5682:	1d61      	adds	r1, r4, #5
   d5684:	4633      	mov	r3, r6
   d5686:	462a      	mov	r2, r5
   d5688:	b289      	uxth	r1, r1
   d568a:	4836      	ldr	r0, [pc, #216]	; (d5764 <_Z3numiiiii+0x1390>)
   d568c:	f8cd 8000 	str.w	r8, [sp]
   d5690:	f009 fa36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d5694:	1da1      	adds	r1, r4, #6
   d5696:	4633      	mov	r3, r6
   d5698:	462a      	mov	r2, r5
   d569a:	b289      	uxth	r1, r1
   d569c:	4831      	ldr	r0, [pc, #196]	; (d5764 <_Z3numiiiii+0x1390>)
   d569e:	f8cd 8000 	str.w	r8, [sp]
   d56a2:	f009 fa2d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d56a6:	f104 0109 	add.w	r1, r4, #9
   d56aa:	4633      	mov	r3, r6
   d56ac:	462a      	mov	r2, r5
   d56ae:	b289      	uxth	r1, r1
   d56b0:	482c      	ldr	r0, [pc, #176]	; (d5764 <_Z3numiiiii+0x1390>)
   d56b2:	f8cd 8000 	str.w	r8, [sp]
   d56b6:	f009 fa23 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d56ba:	f104 0116 	add.w	r1, r4, #22
   d56be:	4633      	mov	r3, r6
   d56c0:	462a      	mov	r2, r5
   d56c2:	b289      	uxth	r1, r1
   d56c4:	4827      	ldr	r0, [pc, #156]	; (d5764 <_Z3numiiiii+0x1390>)
   d56c6:	f8cd 8000 	str.w	r8, [sp]
   d56ca:	f009 fa19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d56ce:	f104 0119 	add.w	r1, r4, #25
   d56d2:	4633      	mov	r3, r6
   d56d4:	462a      	mov	r2, r5
   d56d6:	b289      	uxth	r1, r1
   d56d8:	4822      	ldr	r0, [pc, #136]	; (d5764 <_Z3numiiiii+0x1390>)
   d56da:	f8cd 8000 	str.w	r8, [sp]
   d56de:	f009 fa0f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d56e2:	f104 011a 	add.w	r1, r4, #26
   d56e6:	4633      	mov	r3, r6
   d56e8:	462a      	mov	r2, r5
   d56ea:	b289      	uxth	r1, r1
   d56ec:	481d      	ldr	r0, [pc, #116]	; (d5764 <_Z3numiiiii+0x1390>)
   d56ee:	f8cd 8000 	str.w	r8, [sp]
   d56f2:	f009 fa05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d56f6:	f104 011b 	add.w	r1, r4, #27
   d56fa:	4633      	mov	r3, r6
   d56fc:	462a      	mov	r2, r5
   d56fe:	b289      	uxth	r1, r1
   d5700:	4818      	ldr	r0, [pc, #96]	; (d5764 <_Z3numiiiii+0x1390>)
   d5702:	f8cd 8000 	str.w	r8, [sp]
   d5706:	f009 f9fb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d570a:	f104 011c 	add.w	r1, r4, #28
   d570e:	4633      	mov	r3, r6
   d5710:	462a      	mov	r2, r5
   d5712:	b289      	uxth	r1, r1
   d5714:	4813      	ldr	r0, [pc, #76]	; (d5764 <_Z3numiiiii+0x1390>)
   d5716:	f8cd 8000 	str.w	r8, [sp]
   d571a:	f009 f9f1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d571e:	f104 0113 	add.w	r1, r4, #19
   d5722:	4633      	mov	r3, r6
   d5724:	462a      	mov	r2, r5
   d5726:	b289      	uxth	r1, r1
   d5728:	480e      	ldr	r0, [pc, #56]	; (d5764 <_Z3numiiiii+0x1390>)
   d572a:	f8cd 8000 	str.w	r8, [sp]
   d572e:	f009 f9e7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5732:	f104 010c 	add.w	r1, r4, #12
   d5736:	4633      	mov	r3, r6
   d5738:	462a      	mov	r2, r5
   d573a:	b289      	uxth	r1, r1
   d573c:	4809      	ldr	r0, [pc, #36]	; (d5764 <_Z3numiiiii+0x1390>)
   d573e:	f8cd 8000 	str.w	r8, [sp]
   d5742:	f009 f9dd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+29,0,0,0);
   d5746:	f104 011d 	add.w	r1, r4, #29
   d574a:	b289      	uxth	r1, r1
   d574c:	9700      	str	r7, [sp, #0]
   d574e:	463b      	mov	r3, r7
   d5750:	463a      	mov	r2, r7
   d5752:	4804      	ldr	r0, [pc, #16]	; (d5764 <_Z3numiiiii+0x1390>)
   d5754:	f009 f9d4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d5758:	f104 011e 	add.w	r1, r4, #30
   d575c:	e1a4      	b.n	d5aa8 <_Z3numiiiii+0x16d4>
   d575e:	bf00      	nop
   d5760:	80000001 	.word	0x80000001
   d5764:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 7)
   d5768:	2807      	cmp	r0, #7
   d576a:	f000 81ab 	beq.w	d5ac4 <_Z3numiiiii+0x16f0>
        strip.setPixelColor(pix+22,0,0,0);
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
   d576e:	2808      	cmp	r0, #8
   d5770:	f000 84d6 	beq.w	d6120 <_Z3numiiiii+0x1d4c>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
    }
}
if(num == 9)
   d5774:	2809      	cmp	r0, #9
   d5776:	f040 8333 	bne.w	d5de0 <_Z3numiiiii+0x1a0c>
{
    if((pix/8)%2 == 1)
   d577a:	4bd0      	ldr	r3, [pc, #832]	; (d5abc <_Z3numiiiii+0x16e8>)
   d577c:	f04f 0b08 	mov.w	fp, #8
   d5780:	fb94 fbfb 	sdiv	fp, r4, fp
   d5784:	ea0b 0303 	and.w	r3, fp, r3
   d5788:	2b00      	cmp	r3, #0
   d578a:	bfbe      	ittt	lt
   d578c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5790:	f063 0301 	ornlt	r3, r3, #1
   d5794:	3301      	addlt	r3, #1
   d5796:	2b01      	cmp	r3, #1
   d5798:	f040 80c6 	bne.w	d5928 <_Z3numiiiii+0x1554>
    {
        strip.setPixelColor(pix,R,G,B);
   d579c:	b2a7      	uxth	r7, r4
   d579e:	fa5f f885 	uxtb.w	r8, r5
   d57a2:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d57a6:	48c6      	ldr	r0, [pc, #792]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d57a8:	f8cd a000 	str.w	sl, [sp]
   d57ac:	fa5f f986 	uxtb.w	r9, r6
   d57b0:	4642      	mov	r2, r8
   d57b2:	464b      	mov	r3, r9
   d57b4:	4639      	mov	r1, r7
   d57b6:	f009 f9a3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d57ba:	1c79      	adds	r1, r7, #1
   d57bc:	4642      	mov	r2, r8
   d57be:	464b      	mov	r3, r9
   d57c0:	b289      	uxth	r1, r1
   d57c2:	48bf      	ldr	r0, [pc, #764]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d57c4:	f8cd a000 	str.w	sl, [sp]
   d57c8:	f009 f99a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d57cc:	f107 0110 	add.w	r1, r7, #16
   d57d0:	4642      	mov	r2, r8
   d57d2:	464b      	mov	r3, r9
   d57d4:	b289      	uxth	r1, r1
   d57d6:	48ba      	ldr	r0, [pc, #744]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d57d8:	f8cd a000 	str.w	sl, [sp]
   d57dc:	f009 f990 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d57e0:	f107 0111 	add.w	r1, r7, #17
   d57e4:	4642      	mov	r2, r8
   d57e6:	464b      	mov	r3, r9
   d57e8:	b289      	uxth	r1, r1
   d57ea:	48b5      	ldr	r0, [pc, #724]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d57ec:	f8cd a000 	str.w	sl, [sp]
   d57f0:	f009 f986 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d57f4:	1e79      	subs	r1, r7, #1
   d57f6:	4642      	mov	r2, r8
   d57f8:	464b      	mov	r3, r9
   d57fa:	b289      	uxth	r1, r1
   d57fc:	48b0      	ldr	r0, [pc, #704]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d57fe:	f8cd a000 	str.w	sl, [sp]
   d5802:	f009 f97d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5806:	1eb9      	subs	r1, r7, #2
   d5808:	4642      	mov	r2, r8
   d580a:	464b      	mov	r3, r9
   d580c:	b289      	uxth	r1, r1
   d580e:	48ac      	ldr	r0, [pc, #688]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5810:	f8cd a000 	str.w	sl, [sp]
   d5814:	f009 f974 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5818:	1ef9      	subs	r1, r7, #3
   d581a:	4642      	mov	r2, r8
   d581c:	464b      	mov	r3, r9
   d581e:	b289      	uxth	r1, r1
   d5820:	48a7      	ldr	r0, [pc, #668]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5822:	f8cd a000 	str.w	sl, [sp]
   d5826:	f009 f96b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d582a:	f107 0117 	add.w	r1, r7, #23
   d582e:	4642      	mov	r2, r8
   d5830:	464b      	mov	r3, r9
   d5832:	b289      	uxth	r1, r1
   d5834:	48a2      	ldr	r0, [pc, #648]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5836:	f8cd a000 	str.w	sl, [sp]
   d583a:	f009 f961 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d583e:	f107 0116 	add.w	r1, r7, #22
   d5842:	4642      	mov	r2, r8
   d5844:	464b      	mov	r3, r9
   d5846:	b289      	uxth	r1, r1
   d5848:	489d      	ldr	r0, [pc, #628]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d584a:	f8cd a000 	str.w	sl, [sp]
   d584e:	f009 f957 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5852:	f107 0115 	add.w	r1, r7, #21
   d5856:	4642      	mov	r2, r8
   d5858:	464b      	mov	r3, r9
   d585a:	b289      	uxth	r1, r1
   d585c:	4898      	ldr	r0, [pc, #608]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d585e:	f8cd a000 	str.w	sl, [sp]
   d5862:	f009 f94d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5866:	f107 0114 	add.w	r1, r7, #20
   d586a:	4642      	mov	r2, r8
   d586c:	464b      	mov	r3, r9
   d586e:	b289      	uxth	r1, r1
   d5870:	4893      	ldr	r0, [pc, #588]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5872:	f8cd a000 	str.w	sl, [sp]
   d5876:	f009 f943 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d587a:	f107 0113 	add.w	r1, r7, #19
   d587e:	4642      	mov	r2, r8
   d5880:	464b      	mov	r3, r9
   d5882:	b289      	uxth	r1, r1
   d5884:	488e      	ldr	r0, [pc, #568]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5886:	f8cd a000 	str.w	sl, [sp]
   d588a:	f009 f939 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d588e:	f107 0112 	add.w	r1, r7, #18
   d5892:	4642      	mov	r2, r8
   d5894:	464b      	mov	r3, r9
   d5896:	b289      	uxth	r1, r1
   d5898:	4889      	ldr	r0, [pc, #548]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d589a:	f8cd a000 	str.w	sl, [sp]
   d589e:	f009 f92f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d58a2:	1d39      	adds	r1, r7, #4
   d58a4:	4642      	mov	r2, r8
   d58a6:	464b      	mov	r3, r9
   d58a8:	b289      	uxth	r1, r1
   d58aa:	4885      	ldr	r0, [pc, #532]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d58ac:	f8cd a000 	str.w	sl, [sp]
   d58b0:	f009 f926 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d58b4:	f107 010d 	add.w	r1, r7, #13
   d58b8:	4642      	mov	r2, r8
   d58ba:	464b      	mov	r3, r9
   d58bc:	b289      	uxth	r1, r1
   d58be:	4880      	ldr	r0, [pc, #512]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d58c0:	f8cd a000 	str.w	sl, [sp]
   d58c4:	f009 f91c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d58c8:	1fb9      	subs	r1, r7, #6
   d58ca:	4642      	mov	r2, r8
   d58cc:	464b      	mov	r3, r9
   d58ce:	b289      	uxth	r1, r1
   d58d0:	487b      	ldr	r0, [pc, #492]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d58d2:	f8cd a000 	str.w	sl, [sp]
   d58d6:	f009 f913 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d58da:	1df9      	adds	r1, r7, #7
   d58dc:	4642      	mov	r2, r8
   d58de:	464b      	mov	r3, r9
   d58e0:	b289      	uxth	r1, r1
   d58e2:	4877      	ldr	r0, [pc, #476]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d58e4:	f8cd a000 	str.w	sl, [sp]
   d58e8:	f009 f90a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d58ec:	f107 010a 	add.w	r1, r7, #10
   d58f0:	4642      	mov	r2, r8
   d58f2:	464b      	mov	r3, r9
   d58f4:	b289      	uxth	r1, r1
   d58f6:	4872      	ldr	r0, [pc, #456]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d58f8:	f8cd a000 	str.w	sl, [sp]
   d58fc:	f009 f900 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-4,0,0,0);
   d5900:	f04f 0800 	mov.w	r8, #0
   d5904:	1f39      	subs	r1, r7, #4
   d5906:	4643      	mov	r3, r8
   d5908:	4642      	mov	r2, r8
   d590a:	b289      	uxth	r1, r1
   d590c:	486c      	ldr	r0, [pc, #432]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d590e:	f8cd 8000 	str.w	r8, [sp]
   d5912:	f009 f8f5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5916:	1f79      	subs	r1, r7, #5
   d5918:	f8cd 8000 	str.w	r8, [sp]
   d591c:	4643      	mov	r3, r8
   d591e:	4642      	mov	r2, r8
   d5920:	b289      	uxth	r1, r1
   d5922:	4867      	ldr	r0, [pc, #412]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5924:	f009 f8ec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5928:	f01b 0701 	ands.w	r7, fp, #1
   d592c:	f040 857e 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5930:	b2a4      	uxth	r4, r4
   d5932:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5936:	4862      	ldr	r0, [pc, #392]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5938:	f8cd 8000 	str.w	r8, [sp]
   d593c:	b2ed      	uxtb	r5, r5
   d593e:	b2f6      	uxtb	r6, r6
   d5940:	4633      	mov	r3, r6
   d5942:	462a      	mov	r2, r5
   d5944:	4621      	mov	r1, r4
   d5946:	f009 f8db 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d594a:	1c61      	adds	r1, r4, #1
   d594c:	4633      	mov	r3, r6
   d594e:	462a      	mov	r2, r5
   d5950:	b289      	uxth	r1, r1
   d5952:	485b      	ldr	r0, [pc, #364]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5954:	f8cd 8000 	str.w	r8, [sp]
   d5958:	f009 f8d2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d595c:	1ca1      	adds	r1, r4, #2
   d595e:	4633      	mov	r3, r6
   d5960:	462a      	mov	r2, r5
   d5962:	b289      	uxth	r1, r1
   d5964:	4856      	ldr	r0, [pc, #344]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5966:	f8cd 8000 	str.w	r8, [sp]
   d596a:	f009 f8c9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d596e:	1ce1      	adds	r1, r4, #3
   d5970:	4633      	mov	r3, r6
   d5972:	462a      	mov	r2, r5
   d5974:	b289      	uxth	r1, r1
   d5976:	4852      	ldr	r0, [pc, #328]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5978:	f8cd 8000 	str.w	r8, [sp]
   d597c:	f009 f8c0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5980:	f104 0119 	add.w	r1, r4, #25
   d5984:	4633      	mov	r3, r6
   d5986:	462a      	mov	r2, r5
   d5988:	b289      	uxth	r1, r1
   d598a:	484d      	ldr	r0, [pc, #308]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d598c:	f8cd 8000 	str.w	r8, [sp]
   d5990:	f009 f8b6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5994:	f104 011a 	add.w	r1, r4, #26
   d5998:	4633      	mov	r3, r6
   d599a:	462a      	mov	r2, r5
   d599c:	b289      	uxth	r1, r1
   d599e:	4848      	ldr	r0, [pc, #288]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d59a0:	f8cd 8000 	str.w	r8, [sp]
   d59a4:	f009 f8ac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d59a8:	f104 011b 	add.w	r1, r4, #27
   d59ac:	4633      	mov	r3, r6
   d59ae:	462a      	mov	r2, r5
   d59b0:	b289      	uxth	r1, r1
   d59b2:	4843      	ldr	r0, [pc, #268]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d59b4:	f8cd 8000 	str.w	r8, [sp]
   d59b8:	f009 f8a2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d59bc:	f104 011c 	add.w	r1, r4, #28
   d59c0:	4633      	mov	r3, r6
   d59c2:	462a      	mov	r2, r5
   d59c4:	b289      	uxth	r1, r1
   d59c6:	483e      	ldr	r0, [pc, #248]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d59c8:	f8cd 8000 	str.w	r8, [sp]
   d59cc:	f009 f898 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d59d0:	f104 011d 	add.w	r1, r4, #29
   d59d4:	4633      	mov	r3, r6
   d59d6:	462a      	mov	r2, r5
   d59d8:	b289      	uxth	r1, r1
   d59da:	4839      	ldr	r0, [pc, #228]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d59dc:	f8cd 8000 	str.w	r8, [sp]
   d59e0:	f009 f88e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d59e4:	f104 011e 	add.w	r1, r4, #30
   d59e8:	4633      	mov	r3, r6
   d59ea:	462a      	mov	r2, r5
   d59ec:	b289      	uxth	r1, r1
   d59ee:	4834      	ldr	r0, [pc, #208]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d59f0:	f8cd 8000 	str.w	r8, [sp]
   d59f4:	f009 f884 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d59f8:	f104 011f 	add.w	r1, r4, #31
   d59fc:	4633      	mov	r3, r6
   d59fe:	462a      	mov	r2, r5
   d5a00:	b289      	uxth	r1, r1
   d5a02:	482f      	ldr	r0, [pc, #188]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a04:	f8cd 8000 	str.w	r8, [sp]
   d5a08:	f009 f87a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5a0c:	f104 010f 	add.w	r1, r4, #15
   d5a10:	4633      	mov	r3, r6
   d5a12:	462a      	mov	r2, r5
   d5a14:	b289      	uxth	r1, r1
   d5a16:	482a      	ldr	r0, [pc, #168]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a18:	f8cd 8000 	str.w	r8, [sp]
   d5a1c:	f009 f870 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5a20:	f104 0110 	add.w	r1, r4, #16
   d5a24:	4633      	mov	r3, r6
   d5a26:	462a      	mov	r2, r5
   d5a28:	b289      	uxth	r1, r1
   d5a2a:	4825      	ldr	r0, [pc, #148]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a2c:	f8cd 8000 	str.w	r8, [sp]
   d5a30:	f009 f866 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5a34:	f104 010c 	add.w	r1, r4, #12
   d5a38:	4633      	mov	r3, r6
   d5a3a:	462a      	mov	r2, r5
   d5a3c:	b289      	uxth	r1, r1
   d5a3e:	4820      	ldr	r0, [pc, #128]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a40:	f8cd 8000 	str.w	r8, [sp]
   d5a44:	f009 f85c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5a48:	f104 0113 	add.w	r1, r4, #19
   d5a4c:	4633      	mov	r3, r6
   d5a4e:	462a      	mov	r2, r5
   d5a50:	b289      	uxth	r1, r1
   d5a52:	481b      	ldr	r0, [pc, #108]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a54:	f8cd 8000 	str.w	r8, [sp]
   d5a58:	f009 f852 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d5a5c:	1da1      	adds	r1, r4, #6
   d5a5e:	4633      	mov	r3, r6
   d5a60:	462a      	mov	r2, r5
   d5a62:	b289      	uxth	r1, r1
   d5a64:	4816      	ldr	r0, [pc, #88]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a66:	f8cd 8000 	str.w	r8, [sp]
   d5a6a:	f009 f849 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d5a6e:	f104 0109 	add.w	r1, r4, #9
   d5a72:	4633      	mov	r3, r6
   d5a74:	462a      	mov	r2, r5
   d5a76:	b289      	uxth	r1, r1
   d5a78:	4811      	ldr	r0, [pc, #68]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a7a:	f8cd 8000 	str.w	r8, [sp]
   d5a7e:	f009 f83f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5a82:	f104 0116 	add.w	r1, r4, #22
   d5a86:	4633      	mov	r3, r6
   d5a88:	462a      	mov	r2, r5
   d5a8a:	b289      	uxth	r1, r1
   d5a8c:	480c      	ldr	r0, [pc, #48]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5a8e:	f8cd 8000 	str.w	r8, [sp]
   d5a92:	f009 f835 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5a96:	1d21      	adds	r1, r4, #4
   d5a98:	b289      	uxth	r1, r1
   d5a9a:	9700      	str	r7, [sp, #0]
   d5a9c:	463b      	mov	r3, r7
   d5a9e:	463a      	mov	r2, r7
   d5aa0:	4807      	ldr	r0, [pc, #28]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5aa2:	f009 f82d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5aa6:	1d61      	adds	r1, r4, #5
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5aa8:	970e      	str	r7, [sp, #56]	; 0x38
   d5aaa:	463b      	mov	r3, r7
   d5aac:	463a      	mov	r2, r7
   d5aae:	4804      	ldr	r0, [pc, #16]	; (d5ac0 <_Z3numiiiii+0x16ec>)
   d5ab0:	b289      	uxth	r1, r1
    }
}
}                           
   d5ab2:	b005      	add	sp, #20
   d5ab4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5ab8:	f009 b822 	b.w	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d5abc:	80000001 	.word	0x80000001
   d5ac0:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+30,0,0,0);
    }
}
if(num == 7)
{
    if((pix/8)%2 == 1)
   d5ac4:	4bc4      	ldr	r3, [pc, #784]	; (d5dd8 <_Z3numiiiii+0x1a04>)
   d5ac6:	2708      	movs	r7, #8
   d5ac8:	fb94 f7f7 	sdiv	r7, r4, r7
   d5acc:	403b      	ands	r3, r7
   d5ace:	2b00      	cmp	r3, #0
   d5ad0:	bfbe      	ittt	lt
   d5ad2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5ad6:	f063 0301 	ornlt	r3, r3, #1
   d5ada:	3301      	addlt	r3, #1
   d5adc:	2b01      	cmp	r3, #1
   d5ade:	f040 80d0 	bne.w	d5c82 <_Z3numiiiii+0x18ae>
    {
        strip.setPixelColor(pix,R,G,B);
   d5ae2:	fa1f f884 	uxth.w	r8, r4
   d5ae6:	fa5f f985 	uxtb.w	r9, r5
   d5aea:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d5aee:	48bb      	ldr	r0, [pc, #748]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5af0:	f8cd b000 	str.w	fp, [sp]
   d5af4:	fa5f fa86 	uxtb.w	sl, r6
   d5af8:	464a      	mov	r2, r9
   d5afa:	4653      	mov	r3, sl
   d5afc:	4641      	mov	r1, r8
   d5afe:	f008 ffff 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5b02:	f108 0101 	add.w	r1, r8, #1
   d5b06:	464a      	mov	r2, r9
   d5b08:	4653      	mov	r3, sl
   d5b0a:	b289      	uxth	r1, r1
   d5b0c:	48b3      	ldr	r0, [pc, #716]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b0e:	f8cd b000 	str.w	fp, [sp]
   d5b12:	f008 fff5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5b16:	f108 0110 	add.w	r1, r8, #16
   d5b1a:	464a      	mov	r2, r9
   d5b1c:	4653      	mov	r3, sl
   d5b1e:	b289      	uxth	r1, r1
   d5b20:	48ae      	ldr	r0, [pc, #696]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b22:	f8cd b000 	str.w	fp, [sp]
   d5b26:	f008 ffeb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5b2a:	f108 0111 	add.w	r1, r8, #17
   d5b2e:	464a      	mov	r2, r9
   d5b30:	4653      	mov	r3, sl
   d5b32:	b289      	uxth	r1, r1
   d5b34:	48a9      	ldr	r0, [pc, #676]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b36:	f8cd b000 	str.w	fp, [sp]
   d5b3a:	f008 ffe1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5b3e:	f108 0117 	add.w	r1, r8, #23
   d5b42:	464a      	mov	r2, r9
   d5b44:	4653      	mov	r3, sl
   d5b46:	b289      	uxth	r1, r1
   d5b48:	48a4      	ldr	r0, [pc, #656]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b4a:	f8cd b000 	str.w	fp, [sp]
   d5b4e:	f008 ffd7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5b52:	f108 0116 	add.w	r1, r8, #22
   d5b56:	464a      	mov	r2, r9
   d5b58:	4653      	mov	r3, sl
   d5b5a:	b289      	uxth	r1, r1
   d5b5c:	489f      	ldr	r0, [pc, #636]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b5e:	f8cd b000 	str.w	fp, [sp]
   d5b62:	f008 ffcd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5b66:	f108 0115 	add.w	r1, r8, #21
   d5b6a:	464a      	mov	r2, r9
   d5b6c:	4653      	mov	r3, sl
   d5b6e:	b289      	uxth	r1, r1
   d5b70:	489a      	ldr	r0, [pc, #616]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b72:	f8cd b000 	str.w	fp, [sp]
   d5b76:	f008 ffc3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5b7a:	f108 0114 	add.w	r1, r8, #20
   d5b7e:	464a      	mov	r2, r9
   d5b80:	4653      	mov	r3, sl
   d5b82:	b289      	uxth	r1, r1
   d5b84:	4895      	ldr	r0, [pc, #596]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b86:	f8cd b000 	str.w	fp, [sp]
   d5b8a:	f008 ffb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5b8e:	f108 0113 	add.w	r1, r8, #19
   d5b92:	464a      	mov	r2, r9
   d5b94:	4653      	mov	r3, sl
   d5b96:	b289      	uxth	r1, r1
   d5b98:	4890      	ldr	r0, [pc, #576]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5b9a:	f8cd b000 	str.w	fp, [sp]
   d5b9e:	f008 ffaf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5ba2:	f108 0112 	add.w	r1, r8, #18
   d5ba6:	464a      	mov	r2, r9
   d5ba8:	4653      	mov	r3, sl
   d5baa:	b289      	uxth	r1, r1
   d5bac:	488b      	ldr	r0, [pc, #556]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5bae:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d5bb2:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d5bb6:	f008 ffa3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d5bba:	f108 31ff 	add.w	r1, r8, #4294967295
   d5bbe:	464b      	mov	r3, r9
   d5bc0:	464a      	mov	r2, r9
   d5bc2:	b289      	uxth	r1, r1
   d5bc4:	4885      	ldr	r0, [pc, #532]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5bc6:	f8cd 9000 	str.w	r9, [sp]
   d5bca:	f008 ff99 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d5bce:	f1a8 0102 	sub.w	r1, r8, #2
   d5bd2:	464b      	mov	r3, r9
   d5bd4:	464a      	mov	r2, r9
   d5bd6:	b289      	uxth	r1, r1
   d5bd8:	4880      	ldr	r0, [pc, #512]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5bda:	f8cd 9000 	str.w	r9, [sp]
   d5bde:	f008 ff8f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d5be2:	f1a8 0103 	sub.w	r1, r8, #3
   d5be6:	464b      	mov	r3, r9
   d5be8:	464a      	mov	r2, r9
   d5bea:	b289      	uxth	r1, r1
   d5bec:	487b      	ldr	r0, [pc, #492]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5bee:	f8cd 9000 	str.w	r9, [sp]
   d5bf2:	f008 ff85 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d5bf6:	f1a8 0104 	sub.w	r1, r8, #4
   d5bfa:	464b      	mov	r3, r9
   d5bfc:	464a      	mov	r2, r9
   d5bfe:	b289      	uxth	r1, r1
   d5c00:	4876      	ldr	r0, [pc, #472]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c02:	f8cd 9000 	str.w	r9, [sp]
   d5c06:	f008 ff7b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5c0a:	f1a8 0105 	sub.w	r1, r8, #5
   d5c0e:	464b      	mov	r3, r9
   d5c10:	464a      	mov	r2, r9
   d5c12:	b289      	uxth	r1, r1
   d5c14:	4871      	ldr	r0, [pc, #452]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c16:	f8cd 9000 	str.w	r9, [sp]
   d5c1a:	f008 ff71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d5c1e:	f1a8 0106 	sub.w	r1, r8, #6
   d5c22:	464b      	mov	r3, r9
   d5c24:	464a      	mov	r2, r9
   d5c26:	b289      	uxth	r1, r1
   d5c28:	486c      	ldr	r0, [pc, #432]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c2a:	f8cd 9000 	str.w	r9, [sp]
   d5c2e:	f008 ff67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d5c32:	f108 0107 	add.w	r1, r8, #7
   d5c36:	464b      	mov	r3, r9
   d5c38:	464a      	mov	r2, r9
   d5c3a:	b289      	uxth	r1, r1
   d5c3c:	4867      	ldr	r0, [pc, #412]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c3e:	f8cd 9000 	str.w	r9, [sp]
   d5c42:	f008 ff5d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d5c46:	f108 010a 	add.w	r1, r8, #10
   d5c4a:	464b      	mov	r3, r9
   d5c4c:	464a      	mov	r2, r9
   d5c4e:	b289      	uxth	r1, r1
   d5c50:	4862      	ldr	r0, [pc, #392]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c52:	f8cd 9000 	str.w	r9, [sp]
   d5c56:	f008 ff53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5c5a:	f108 0104 	add.w	r1, r8, #4
   d5c5e:	464b      	mov	r3, r9
   d5c60:	464a      	mov	r2, r9
   d5c62:	b289      	uxth	r1, r1
   d5c64:	485d      	ldr	r0, [pc, #372]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c66:	f8cd 9000 	str.w	r9, [sp]
   d5c6a:	f008 ff49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d5c6e:	f108 010d 	add.w	r1, r8, #13
   d5c72:	f8cd 9000 	str.w	r9, [sp]
   d5c76:	464b      	mov	r3, r9
   d5c78:	464a      	mov	r2, r9
   d5c7a:	b289      	uxth	r1, r1
   d5c7c:	4857      	ldr	r0, [pc, #348]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c7e:	f008 ff3f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5c82:	f017 0701 	ands.w	r7, r7, #1
   d5c86:	f040 83d1 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5c8a:	b2a4      	uxth	r4, r4
   d5c8c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5c90:	4852      	ldr	r0, [pc, #328]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5c92:	f8cd 8000 	str.w	r8, [sp]
   d5c96:	b2ed      	uxtb	r5, r5
   d5c98:	b2f6      	uxtb	r6, r6
   d5c9a:	4633      	mov	r3, r6
   d5c9c:	462a      	mov	r2, r5
   d5c9e:	4621      	mov	r1, r4
   d5ca0:	f008 ff2e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5ca4:	f104 010f 	add.w	r1, r4, #15
   d5ca8:	4633      	mov	r3, r6
   d5caa:	462a      	mov	r2, r5
   d5cac:	b289      	uxth	r1, r1
   d5cae:	484b      	ldr	r0, [pc, #300]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5cb0:	f8cd 8000 	str.w	r8, [sp]
   d5cb4:	f008 ff24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5cb8:	f104 0110 	add.w	r1, r4, #16
   d5cbc:	4633      	mov	r3, r6
   d5cbe:	462a      	mov	r2, r5
   d5cc0:	b289      	uxth	r1, r1
   d5cc2:	4846      	ldr	r0, [pc, #280]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5cc4:	f8cd 8000 	str.w	r8, [sp]
   d5cc8:	f008 ff1a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5ccc:	f104 011f 	add.w	r1, r4, #31
   d5cd0:	4633      	mov	r3, r6
   d5cd2:	462a      	mov	r2, r5
   d5cd4:	b289      	uxth	r1, r1
   d5cd6:	4841      	ldr	r0, [pc, #260]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5cd8:	f8cd 8000 	str.w	r8, [sp]
   d5cdc:	f008 ff10 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d5ce0:	f104 011e 	add.w	r1, r4, #30
   d5ce4:	4633      	mov	r3, r6
   d5ce6:	462a      	mov	r2, r5
   d5ce8:	b289      	uxth	r1, r1
   d5cea:	483c      	ldr	r0, [pc, #240]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5cec:	f8cd 8000 	str.w	r8, [sp]
   d5cf0:	f008 ff06 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5cf4:	f104 011d 	add.w	r1, r4, #29
   d5cf8:	4633      	mov	r3, r6
   d5cfa:	462a      	mov	r2, r5
   d5cfc:	b289      	uxth	r1, r1
   d5cfe:	4837      	ldr	r0, [pc, #220]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d00:	f8cd 8000 	str.w	r8, [sp]
   d5d04:	f008 fefc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5d08:	f104 011c 	add.w	r1, r4, #28
   d5d0c:	4633      	mov	r3, r6
   d5d0e:	462a      	mov	r2, r5
   d5d10:	b289      	uxth	r1, r1
   d5d12:	4832      	ldr	r0, [pc, #200]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d14:	f8cd 8000 	str.w	r8, [sp]
   d5d18:	f008 fef2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5d1c:	f104 011b 	add.w	r1, r4, #27
   d5d20:	4633      	mov	r3, r6
   d5d22:	462a      	mov	r2, r5
   d5d24:	b289      	uxth	r1, r1
   d5d26:	482d      	ldr	r0, [pc, #180]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d28:	f8cd 8000 	str.w	r8, [sp]
   d5d2c:	f008 fee8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5d30:	f104 011a 	add.w	r1, r4, #26
   d5d34:	4633      	mov	r3, r6
   d5d36:	462a      	mov	r2, r5
   d5d38:	b289      	uxth	r1, r1
   d5d3a:	4828      	ldr	r0, [pc, #160]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d3c:	f8cd 8000 	str.w	r8, [sp]
   d5d40:	f008 fede 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5d44:	f104 0119 	add.w	r1, r4, #25
   d5d48:	4633      	mov	r3, r6
   d5d4a:	462a      	mov	r2, r5
   d5d4c:	b289      	uxth	r1, r1
   d5d4e:	4823      	ldr	r0, [pc, #140]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d50:	f8cd 8000 	str.w	r8, [sp]
   d5d54:	f008 fed4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d5d58:	1c61      	adds	r1, r4, #1
   d5d5a:	463b      	mov	r3, r7
   d5d5c:	463a      	mov	r2, r7
   d5d5e:	b289      	uxth	r1, r1
   d5d60:	481e      	ldr	r0, [pc, #120]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d62:	9700      	str	r7, [sp, #0]
   d5d64:	f008 fecc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d5d68:	1ca1      	adds	r1, r4, #2
   d5d6a:	463b      	mov	r3, r7
   d5d6c:	463a      	mov	r2, r7
   d5d6e:	b289      	uxth	r1, r1
   d5d70:	481a      	ldr	r0, [pc, #104]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d72:	9700      	str	r7, [sp, #0]
   d5d74:	f008 fec4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d5d78:	1ce1      	adds	r1, r4, #3
   d5d7a:	463b      	mov	r3, r7
   d5d7c:	463a      	mov	r2, r7
   d5d7e:	b289      	uxth	r1, r1
   d5d80:	4816      	ldr	r0, [pc, #88]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d82:	9700      	str	r7, [sp, #0]
   d5d84:	f008 febc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5d88:	1d21      	adds	r1, r4, #4
   d5d8a:	463b      	mov	r3, r7
   d5d8c:	463a      	mov	r2, r7
   d5d8e:	b289      	uxth	r1, r1
   d5d90:	4812      	ldr	r0, [pc, #72]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5d92:	9700      	str	r7, [sp, #0]
   d5d94:	f008 feb4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5d98:	1d61      	adds	r1, r4, #5
   d5d9a:	463b      	mov	r3, r7
   d5d9c:	463a      	mov	r2, r7
   d5d9e:	b289      	uxth	r1, r1
   d5da0:	480e      	ldr	r0, [pc, #56]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5da2:	9700      	str	r7, [sp, #0]
   d5da4:	f008 feac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5da8:	1da1      	adds	r1, r4, #6
   d5daa:	463b      	mov	r3, r7
   d5dac:	463a      	mov	r2, r7
   d5dae:	b289      	uxth	r1, r1
   d5db0:	480a      	ldr	r0, [pc, #40]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5db2:	9700      	str	r7, [sp, #0]
   d5db4:	f008 fea4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d5db8:	f104 0109 	add.w	r1, r4, #9
   d5dbc:	463b      	mov	r3, r7
   d5dbe:	463a      	mov	r2, r7
   d5dc0:	b289      	uxth	r1, r1
   d5dc2:	9700      	str	r7, [sp, #0]
   d5dc4:	4805      	ldr	r0, [pc, #20]	; (d5ddc <_Z3numiiiii+0x1a08>)
   d5dc6:	f008 fe9b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d5dca:	f104 0116 	add.w	r1, r4, #22
   d5dce:	9700      	str	r7, [sp, #0]
   d5dd0:	463b      	mov	r3, r7
   d5dd2:	463a      	mov	r2, r7
   d5dd4:	e18f      	b.n	d60f6 <_Z3numiiiii+0x1d22>
   d5dd6:	bf00      	nop
   d5dd8:	80000001 	.word	0x80000001
   d5ddc:	2003e31c 	.word	0x2003e31c
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
    }
}
if(num == 0)
   d5de0:	2800      	cmp	r0, #0
   d5de2:	f040 8323 	bne.w	d642c <_Z3numiiiii+0x2058>
{
    if((pix/8)%2 == 1)
   d5de6:	4bcc      	ldr	r3, [pc, #816]	; (d6118 <_Z3numiiiii+0x1d44>)
   d5de8:	f04f 0b08 	mov.w	fp, #8
   d5dec:	fb94 fbfb 	sdiv	fp, r4, fp
   d5df0:	ea0b 0303 	and.w	r3, fp, r3
   d5df4:	2b00      	cmp	r3, #0
   d5df6:	bfbe      	ittt	lt
   d5df8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5dfc:	f063 0301 	ornlt	r3, r3, #1
   d5e00:	3301      	addlt	r3, #1
   d5e02:	2b01      	cmp	r3, #1
   d5e04:	f040 80c6 	bne.w	d5f94 <_Z3numiiiii+0x1bc0>
    {
        strip.setPixelColor(pix,R,G,B);
   d5e08:	b2a7      	uxth	r7, r4
   d5e0a:	fa5f f885 	uxtb.w	r8, r5
   d5e0e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d5e12:	48c2      	ldr	r0, [pc, #776]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e14:	f8cd a000 	str.w	sl, [sp]
   d5e18:	fa5f f986 	uxtb.w	r9, r6
   d5e1c:	4642      	mov	r2, r8
   d5e1e:	464b      	mov	r3, r9
   d5e20:	4639      	mov	r1, r7
   d5e22:	f008 fe6d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d5e26:	1e79      	subs	r1, r7, #1
   d5e28:	4642      	mov	r2, r8
   d5e2a:	464b      	mov	r3, r9
   d5e2c:	b289      	uxth	r1, r1
   d5e2e:	48bb      	ldr	r0, [pc, #748]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e30:	f8cd a000 	str.w	sl, [sp]
   d5e34:	f008 fe64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5e38:	1eb9      	subs	r1, r7, #2
   d5e3a:	4642      	mov	r2, r8
   d5e3c:	464b      	mov	r3, r9
   d5e3e:	b289      	uxth	r1, r1
   d5e40:	48b6      	ldr	r0, [pc, #728]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e42:	f8cd a000 	str.w	sl, [sp]
   d5e46:	f008 fe5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5e4a:	1ef9      	subs	r1, r7, #3
   d5e4c:	4642      	mov	r2, r8
   d5e4e:	464b      	mov	r3, r9
   d5e50:	b289      	uxth	r1, r1
   d5e52:	48b2      	ldr	r0, [pc, #712]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e54:	f8cd a000 	str.w	sl, [sp]
   d5e58:	f008 fe52 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d5e5c:	1f39      	subs	r1, r7, #4
   d5e5e:	4642      	mov	r2, r8
   d5e60:	464b      	mov	r3, r9
   d5e62:	b289      	uxth	r1, r1
   d5e64:	48ad      	ldr	r0, [pc, #692]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e66:	f8cd a000 	str.w	sl, [sp]
   d5e6a:	f008 fe49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d5e6e:	1f79      	subs	r1, r7, #5
   d5e70:	4642      	mov	r2, r8
   d5e72:	464b      	mov	r3, r9
   d5e74:	b289      	uxth	r1, r1
   d5e76:	48a9      	ldr	r0, [pc, #676]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e78:	f8cd a000 	str.w	sl, [sp]
   d5e7c:	f008 fe40 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5e80:	1fb9      	subs	r1, r7, #6
   d5e82:	4642      	mov	r2, r8
   d5e84:	464b      	mov	r3, r9
   d5e86:	b289      	uxth	r1, r1
   d5e88:	48a4      	ldr	r0, [pc, #656]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e8a:	f8cd a000 	str.w	sl, [sp]
   d5e8e:	f008 fe37 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5e92:	1c79      	adds	r1, r7, #1
   d5e94:	4642      	mov	r2, r8
   d5e96:	464b      	mov	r3, r9
   d5e98:	b289      	uxth	r1, r1
   d5e9a:	48a0      	ldr	r0, [pc, #640]	; (d611c <_Z3numiiiii+0x1d48>)
   d5e9c:	f8cd a000 	str.w	sl, [sp]
   d5ea0:	f008 fe2e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5ea4:	1df9      	adds	r1, r7, #7
   d5ea6:	4642      	mov	r2, r8
   d5ea8:	464b      	mov	r3, r9
   d5eaa:	b289      	uxth	r1, r1
   d5eac:	489b      	ldr	r0, [pc, #620]	; (d611c <_Z3numiiiii+0x1d48>)
   d5eae:	f8cd a000 	str.w	sl, [sp]
   d5eb2:	f008 fe25 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5eb6:	f107 0110 	add.w	r1, r7, #16
   d5eba:	4642      	mov	r2, r8
   d5ebc:	464b      	mov	r3, r9
   d5ebe:	b289      	uxth	r1, r1
   d5ec0:	4896      	ldr	r0, [pc, #600]	; (d611c <_Z3numiiiii+0x1d48>)
   d5ec2:	f8cd a000 	str.w	sl, [sp]
   d5ec6:	f008 fe1b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d5eca:	f107 010a 	add.w	r1, r7, #10
   d5ece:	4642      	mov	r2, r8
   d5ed0:	464b      	mov	r3, r9
   d5ed2:	b289      	uxth	r1, r1
   d5ed4:	4891      	ldr	r0, [pc, #580]	; (d611c <_Z3numiiiii+0x1d48>)
   d5ed6:	f8cd a000 	str.w	sl, [sp]
   d5eda:	f008 fe11 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5ede:	f107 0111 	add.w	r1, r7, #17
   d5ee2:	4642      	mov	r2, r8
   d5ee4:	464b      	mov	r3, r9
   d5ee6:	b289      	uxth	r1, r1
   d5ee8:	488c      	ldr	r0, [pc, #560]	; (d611c <_Z3numiiiii+0x1d48>)
   d5eea:	f8cd a000 	str.w	sl, [sp]
   d5eee:	f008 fe07 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5ef2:	f107 0112 	add.w	r1, r7, #18
   d5ef6:	4642      	mov	r2, r8
   d5ef8:	464b      	mov	r3, r9
   d5efa:	b289      	uxth	r1, r1
   d5efc:	4887      	ldr	r0, [pc, #540]	; (d611c <_Z3numiiiii+0x1d48>)
   d5efe:	f8cd a000 	str.w	sl, [sp]
   d5f02:	f008 fdfd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5f06:	f107 0113 	add.w	r1, r7, #19
   d5f0a:	4642      	mov	r2, r8
   d5f0c:	464b      	mov	r3, r9
   d5f0e:	b289      	uxth	r1, r1
   d5f10:	4882      	ldr	r0, [pc, #520]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f12:	f8cd a000 	str.w	sl, [sp]
   d5f16:	f008 fdf3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5f1a:	f107 0114 	add.w	r1, r7, #20
   d5f1e:	4642      	mov	r2, r8
   d5f20:	464b      	mov	r3, r9
   d5f22:	b289      	uxth	r1, r1
   d5f24:	487d      	ldr	r0, [pc, #500]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f26:	f8cd a000 	str.w	sl, [sp]
   d5f2a:	f008 fde9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5f2e:	f107 0115 	add.w	r1, r7, #21
   d5f32:	4642      	mov	r2, r8
   d5f34:	464b      	mov	r3, r9
   d5f36:	b289      	uxth	r1, r1
   d5f38:	4878      	ldr	r0, [pc, #480]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f3a:	f8cd a000 	str.w	sl, [sp]
   d5f3e:	f008 fddf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5f42:	f107 0116 	add.w	r1, r7, #22
   d5f46:	4642      	mov	r2, r8
   d5f48:	464b      	mov	r3, r9
   d5f4a:	b289      	uxth	r1, r1
   d5f4c:	4873      	ldr	r0, [pc, #460]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f4e:	f8cd a000 	str.w	sl, [sp]
   d5f52:	f008 fdd5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5f56:	f107 0117 	add.w	r1, r7, #23
   d5f5a:	4642      	mov	r2, r8
   d5f5c:	464b      	mov	r3, r9
   d5f5e:	b289      	uxth	r1, r1
   d5f60:	486e      	ldr	r0, [pc, #440]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f62:	f8cd a000 	str.w	sl, [sp]
   d5f66:	f008 fdcb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5f6a:	f04f 0800 	mov.w	r8, #0
   d5f6e:	1d39      	adds	r1, r7, #4
   d5f70:	4643      	mov	r3, r8
   d5f72:	4642      	mov	r2, r8
   d5f74:	b289      	uxth	r1, r1
   d5f76:	4869      	ldr	r0, [pc, #420]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f78:	f8cd 8000 	str.w	r8, [sp]
   d5f7c:	f008 fdc0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d5f80:	f107 010d 	add.w	r1, r7, #13
   d5f84:	f8cd 8000 	str.w	r8, [sp]
   d5f88:	4643      	mov	r3, r8
   d5f8a:	4642      	mov	r2, r8
   d5f8c:	b289      	uxth	r1, r1
   d5f8e:	4863      	ldr	r0, [pc, #396]	; (d611c <_Z3numiiiii+0x1d48>)
   d5f90:	f008 fdb6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5f94:	f01b 0701 	ands.w	r7, fp, #1
   d5f98:	f040 8248 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5f9c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5fa0:	485e      	ldr	r0, [pc, #376]	; (d611c <_Z3numiiiii+0x1d48>)
   d5fa2:	f8cd 8000 	str.w	r8, [sp]
   d5fa6:	b2a4      	uxth	r4, r4
   d5fa8:	b2ed      	uxtb	r5, r5
   d5faa:	b2f6      	uxtb	r6, r6
   d5fac:	4633      	mov	r3, r6
   d5fae:	462a      	mov	r2, r5
   d5fb0:	4621      	mov	r1, r4
   d5fb2:	f008 fda5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5fb6:	1c61      	adds	r1, r4, #1
   d5fb8:	4633      	mov	r3, r6
   d5fba:	462a      	mov	r2, r5
   d5fbc:	b289      	uxth	r1, r1
   d5fbe:	4857      	ldr	r0, [pc, #348]	; (d611c <_Z3numiiiii+0x1d48>)
   d5fc0:	f8cd 8000 	str.w	r8, [sp]
   d5fc4:	f008 fd9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5fc8:	1ca1      	adds	r1, r4, #2
   d5fca:	4633      	mov	r3, r6
   d5fcc:	462a      	mov	r2, r5
   d5fce:	b289      	uxth	r1, r1
   d5fd0:	4852      	ldr	r0, [pc, #328]	; (d611c <_Z3numiiiii+0x1d48>)
   d5fd2:	f8cd 8000 	str.w	r8, [sp]
   d5fd6:	f008 fd93 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5fda:	1ce1      	adds	r1, r4, #3
   d5fdc:	4633      	mov	r3, r6
   d5fde:	462a      	mov	r2, r5
   d5fe0:	b289      	uxth	r1, r1
   d5fe2:	484e      	ldr	r0, [pc, #312]	; (d611c <_Z3numiiiii+0x1d48>)
   d5fe4:	f8cd 8000 	str.w	r8, [sp]
   d5fe8:	f008 fd8a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5fec:	1d21      	adds	r1, r4, #4
   d5fee:	4633      	mov	r3, r6
   d5ff0:	462a      	mov	r2, r5
   d5ff2:	b289      	uxth	r1, r1
   d5ff4:	4849      	ldr	r0, [pc, #292]	; (d611c <_Z3numiiiii+0x1d48>)
   d5ff6:	f8cd 8000 	str.w	r8, [sp]
   d5ffa:	f008 fd81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d5ffe:	1d61      	adds	r1, r4, #5
   d6000:	4633      	mov	r3, r6
   d6002:	462a      	mov	r2, r5
   d6004:	b289      	uxth	r1, r1
   d6006:	4845      	ldr	r0, [pc, #276]	; (d611c <_Z3numiiiii+0x1d48>)
   d6008:	f8cd 8000 	str.w	r8, [sp]
   d600c:	f008 fd78 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d6010:	1da1      	adds	r1, r4, #6
   d6012:	4633      	mov	r3, r6
   d6014:	462a      	mov	r2, r5
   d6016:	b289      	uxth	r1, r1
   d6018:	4840      	ldr	r0, [pc, #256]	; (d611c <_Z3numiiiii+0x1d48>)
   d601a:	f8cd 8000 	str.w	r8, [sp]
   d601e:	f008 fd6f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d6022:	f104 0109 	add.w	r1, r4, #9
   d6026:	4633      	mov	r3, r6
   d6028:	462a      	mov	r2, r5
   d602a:	b289      	uxth	r1, r1
   d602c:	483b      	ldr	r0, [pc, #236]	; (d611c <_Z3numiiiii+0x1d48>)
   d602e:	f8cd 8000 	str.w	r8, [sp]
   d6032:	f008 fd65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6036:	f104 0116 	add.w	r1, r4, #22
   d603a:	4633      	mov	r3, r6
   d603c:	462a      	mov	r2, r5
   d603e:	b289      	uxth	r1, r1
   d6040:	4836      	ldr	r0, [pc, #216]	; (d611c <_Z3numiiiii+0x1d48>)
   d6042:	f8cd 8000 	str.w	r8, [sp]
   d6046:	f008 fd5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d604a:	f104 0119 	add.w	r1, r4, #25
   d604e:	4633      	mov	r3, r6
   d6050:	462a      	mov	r2, r5
   d6052:	b289      	uxth	r1, r1
   d6054:	4831      	ldr	r0, [pc, #196]	; (d611c <_Z3numiiiii+0x1d48>)
   d6056:	f8cd 8000 	str.w	r8, [sp]
   d605a:	f008 fd51 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d605e:	f104 011a 	add.w	r1, r4, #26
   d6062:	4633      	mov	r3, r6
   d6064:	462a      	mov	r2, r5
   d6066:	b289      	uxth	r1, r1
   d6068:	482c      	ldr	r0, [pc, #176]	; (d611c <_Z3numiiiii+0x1d48>)
   d606a:	f8cd 8000 	str.w	r8, [sp]
   d606e:	f008 fd47 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d6072:	f104 011b 	add.w	r1, r4, #27
   d6076:	4633      	mov	r3, r6
   d6078:	462a      	mov	r2, r5
   d607a:	b289      	uxth	r1, r1
   d607c:	4827      	ldr	r0, [pc, #156]	; (d611c <_Z3numiiiii+0x1d48>)
   d607e:	f8cd 8000 	str.w	r8, [sp]
   d6082:	f008 fd3d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d6086:	f104 011c 	add.w	r1, r4, #28
   d608a:	4633      	mov	r3, r6
   d608c:	462a      	mov	r2, r5
   d608e:	b289      	uxth	r1, r1
   d6090:	4822      	ldr	r0, [pc, #136]	; (d611c <_Z3numiiiii+0x1d48>)
   d6092:	f8cd 8000 	str.w	r8, [sp]
   d6096:	f008 fd33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d609a:	f104 011d 	add.w	r1, r4, #29
   d609e:	4633      	mov	r3, r6
   d60a0:	462a      	mov	r2, r5
   d60a2:	b289      	uxth	r1, r1
   d60a4:	481d      	ldr	r0, [pc, #116]	; (d611c <_Z3numiiiii+0x1d48>)
   d60a6:	f8cd 8000 	str.w	r8, [sp]
   d60aa:	f008 fd29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d60ae:	f104 011e 	add.w	r1, r4, #30
   d60b2:	4633      	mov	r3, r6
   d60b4:	462a      	mov	r2, r5
   d60b6:	b289      	uxth	r1, r1
   d60b8:	4818      	ldr	r0, [pc, #96]	; (d611c <_Z3numiiiii+0x1d48>)
   d60ba:	f8cd 8000 	str.w	r8, [sp]
   d60be:	f008 fd1f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d60c2:	f104 011f 	add.w	r1, r4, #31
   d60c6:	4633      	mov	r3, r6
   d60c8:	462a      	mov	r2, r5
   d60ca:	b289      	uxth	r1, r1
   d60cc:	4813      	ldr	r0, [pc, #76]	; (d611c <_Z3numiiiii+0x1d48>)
   d60ce:	f8cd 8000 	str.w	r8, [sp]
   d60d2:	f008 fd15 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d60d6:	f104 010f 	add.w	r1, r4, #15
   d60da:	4633      	mov	r3, r6
   d60dc:	462a      	mov	r2, r5
   d60de:	b289      	uxth	r1, r1
   d60e0:	f8cd 8000 	str.w	r8, [sp]
   d60e4:	480d      	ldr	r0, [pc, #52]	; (d611c <_Z3numiiiii+0x1d48>)
   d60e6:	f008 fd0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d60ea:	f104 0110 	add.w	r1, r4, #16
   d60ee:	f8cd 8000 	str.w	r8, [sp]
   d60f2:	4633      	mov	r3, r6
   d60f4:	462a      	mov	r2, r5
   d60f6:	b289      	uxth	r1, r1
   d60f8:	4808      	ldr	r0, [pc, #32]	; (d611c <_Z3numiiiii+0x1d48>)
   d60fa:	f008 fd01 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+12,0,0,0);
   d60fe:	f104 010c 	add.w	r1, r4, #12
   d6102:	b289      	uxth	r1, r1
   d6104:	9700      	str	r7, [sp, #0]
   d6106:	463b      	mov	r3, r7
   d6108:	463a      	mov	r2, r7
   d610a:	4804      	ldr	r0, [pc, #16]	; (d611c <_Z3numiiiii+0x1d48>)
   d610c:	f008 fcf8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d6110:	f104 0113 	add.w	r1, r4, #19
   d6114:	e4c8      	b.n	d5aa8 <_Z3numiiiii+0x16d4>
   d6116:	bf00      	nop
   d6118:	80000001 	.word	0x80000001
   d611c:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
{
    if((pix/8)%2 == 1)
   d6120:	4bc4      	ldr	r3, [pc, #784]	; (d6434 <_Z3numiiiii+0x2060>)
   d6122:	fb94 fbf0 	sdiv	fp, r4, r0
   d6126:	ea0b 0303 	and.w	r3, fp, r3
   d612a:	2b00      	cmp	r3, #0
   d612c:	bfbe      	ittt	lt
   d612e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6132:	f063 0301 	ornlt	r3, r3, #1
   d6136:	3301      	addlt	r3, #1
   d6138:	2b01      	cmp	r3, #1
   d613a:	f040 80c4 	bne.w	d62c6 <_Z3numiiiii+0x1ef2>
    {
        strip.setPixelColor(pix,R,G,B);
   d613e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6142:	48bd      	ldr	r0, [pc, #756]	; (d6438 <_Z3numiiiii+0x2064>)
   d6144:	f8cd a000 	str.w	sl, [sp]
   d6148:	b2a7      	uxth	r7, r4
   d614a:	fa5f f885 	uxtb.w	r8, r5
   d614e:	fa5f f986 	uxtb.w	r9, r6
   d6152:	464b      	mov	r3, r9
   d6154:	4642      	mov	r2, r8
   d6156:	4639      	mov	r1, r7
   d6158:	f008 fcd2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d615c:	1c79      	adds	r1, r7, #1
   d615e:	464b      	mov	r3, r9
   d6160:	4642      	mov	r2, r8
   d6162:	b289      	uxth	r1, r1
   d6164:	48b4      	ldr	r0, [pc, #720]	; (d6438 <_Z3numiiiii+0x2064>)
   d6166:	f8cd a000 	str.w	sl, [sp]
   d616a:	f008 fcc9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d616e:	f107 0110 	add.w	r1, r7, #16
   d6172:	464b      	mov	r3, r9
   d6174:	4642      	mov	r2, r8
   d6176:	b289      	uxth	r1, r1
   d6178:	48af      	ldr	r0, [pc, #700]	; (d6438 <_Z3numiiiii+0x2064>)
   d617a:	f8cd a000 	str.w	sl, [sp]
   d617e:	f008 fcbf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d6182:	f107 0111 	add.w	r1, r7, #17
   d6186:	464b      	mov	r3, r9
   d6188:	4642      	mov	r2, r8
   d618a:	b289      	uxth	r1, r1
   d618c:	48aa      	ldr	r0, [pc, #680]	; (d6438 <_Z3numiiiii+0x2064>)
   d618e:	f8cd a000 	str.w	sl, [sp]
   d6192:	f008 fcb5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d6196:	1e79      	subs	r1, r7, #1
   d6198:	464b      	mov	r3, r9
   d619a:	4642      	mov	r2, r8
   d619c:	b289      	uxth	r1, r1
   d619e:	48a6      	ldr	r0, [pc, #664]	; (d6438 <_Z3numiiiii+0x2064>)
   d61a0:	f8cd a000 	str.w	sl, [sp]
   d61a4:	f008 fcac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d61a8:	1eb9      	subs	r1, r7, #2
   d61aa:	464b      	mov	r3, r9
   d61ac:	4642      	mov	r2, r8
   d61ae:	b289      	uxth	r1, r1
   d61b0:	48a1      	ldr	r0, [pc, #644]	; (d6438 <_Z3numiiiii+0x2064>)
   d61b2:	f8cd a000 	str.w	sl, [sp]
   d61b6:	f008 fca3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d61ba:	1ef9      	subs	r1, r7, #3
   d61bc:	464b      	mov	r3, r9
   d61be:	4642      	mov	r2, r8
   d61c0:	b289      	uxth	r1, r1
   d61c2:	489d      	ldr	r0, [pc, #628]	; (d6438 <_Z3numiiiii+0x2064>)
   d61c4:	f8cd a000 	str.w	sl, [sp]
   d61c8:	f008 fc9a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d61cc:	1f39      	subs	r1, r7, #4
   d61ce:	464b      	mov	r3, r9
   d61d0:	4642      	mov	r2, r8
   d61d2:	b289      	uxth	r1, r1
   d61d4:	4898      	ldr	r0, [pc, #608]	; (d6438 <_Z3numiiiii+0x2064>)
   d61d6:	f8cd a000 	str.w	sl, [sp]
   d61da:	f008 fc91 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d61de:	1f79      	subs	r1, r7, #5
   d61e0:	464b      	mov	r3, r9
   d61e2:	4642      	mov	r2, r8
   d61e4:	b289      	uxth	r1, r1
   d61e6:	4894      	ldr	r0, [pc, #592]	; (d6438 <_Z3numiiiii+0x2064>)
   d61e8:	f8cd a000 	str.w	sl, [sp]
   d61ec:	f008 fc88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d61f0:	1fb9      	subs	r1, r7, #6
   d61f2:	464b      	mov	r3, r9
   d61f4:	4642      	mov	r2, r8
   d61f6:	b289      	uxth	r1, r1
   d61f8:	488f      	ldr	r0, [pc, #572]	; (d6438 <_Z3numiiiii+0x2064>)
   d61fa:	f8cd a000 	str.w	sl, [sp]
   d61fe:	f008 fc7f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d6202:	1df9      	adds	r1, r7, #7
   d6204:	464b      	mov	r3, r9
   d6206:	4642      	mov	r2, r8
   d6208:	b289      	uxth	r1, r1
   d620a:	488b      	ldr	r0, [pc, #556]	; (d6438 <_Z3numiiiii+0x2064>)
   d620c:	f8cd a000 	str.w	sl, [sp]
   d6210:	f008 fc76 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d6214:	f107 010a 	add.w	r1, r7, #10
   d6218:	464b      	mov	r3, r9
   d621a:	4642      	mov	r2, r8
   d621c:	b289      	uxth	r1, r1
   d621e:	4886      	ldr	r0, [pc, #536]	; (d6438 <_Z3numiiiii+0x2064>)
   d6220:	f8cd a000 	str.w	sl, [sp]
   d6224:	f008 fc6c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d6228:	f107 0117 	add.w	r1, r7, #23
   d622c:	464b      	mov	r3, r9
   d622e:	4642      	mov	r2, r8
   d6230:	b289      	uxth	r1, r1
   d6232:	4881      	ldr	r0, [pc, #516]	; (d6438 <_Z3numiiiii+0x2064>)
   d6234:	f8cd a000 	str.w	sl, [sp]
   d6238:	f008 fc62 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d623c:	f107 0116 	add.w	r1, r7, #22
   d6240:	464b      	mov	r3, r9
   d6242:	4642      	mov	r2, r8
   d6244:	b289      	uxth	r1, r1
   d6246:	487c      	ldr	r0, [pc, #496]	; (d6438 <_Z3numiiiii+0x2064>)
   d6248:	f8cd a000 	str.w	sl, [sp]
   d624c:	f008 fc58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d6250:	f107 0115 	add.w	r1, r7, #21
   d6254:	464b      	mov	r3, r9
   d6256:	4642      	mov	r2, r8
   d6258:	b289      	uxth	r1, r1
   d625a:	4877      	ldr	r0, [pc, #476]	; (d6438 <_Z3numiiiii+0x2064>)
   d625c:	f8cd a000 	str.w	sl, [sp]
   d6260:	f008 fc4e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d6264:	f107 0114 	add.w	r1, r7, #20
   d6268:	464b      	mov	r3, r9
   d626a:	4642      	mov	r2, r8
   d626c:	b289      	uxth	r1, r1
   d626e:	4872      	ldr	r0, [pc, #456]	; (d6438 <_Z3numiiiii+0x2064>)
   d6270:	f8cd a000 	str.w	sl, [sp]
   d6274:	f008 fc44 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d6278:	f107 0113 	add.w	r1, r7, #19
   d627c:	464b      	mov	r3, r9
   d627e:	4642      	mov	r2, r8
   d6280:	b289      	uxth	r1, r1
   d6282:	486d      	ldr	r0, [pc, #436]	; (d6438 <_Z3numiiiii+0x2064>)
   d6284:	f8cd a000 	str.w	sl, [sp]
   d6288:	f008 fc3a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d628c:	f107 0112 	add.w	r1, r7, #18
   d6290:	464b      	mov	r3, r9
   d6292:	4642      	mov	r2, r8
   d6294:	b289      	uxth	r1, r1
   d6296:	4868      	ldr	r0, [pc, #416]	; (d6438 <_Z3numiiiii+0x2064>)
   d6298:	f8cd a000 	str.w	sl, [sp]
   d629c:	f008 fc30 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d62a0:	1d39      	adds	r1, r7, #4
   d62a2:	464b      	mov	r3, r9
   d62a4:	4642      	mov	r2, r8
   d62a6:	b289      	uxth	r1, r1
   d62a8:	4863      	ldr	r0, [pc, #396]	; (d6438 <_Z3numiiiii+0x2064>)
   d62aa:	f8cd a000 	str.w	sl, [sp]
   d62ae:	f008 fc27 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d62b2:	f107 010d 	add.w	r1, r7, #13
   d62b6:	f8cd a000 	str.w	sl, [sp]
   d62ba:	464b      	mov	r3, r9
   d62bc:	4642      	mov	r2, r8
   d62be:	b289      	uxth	r1, r1
   d62c0:	485d      	ldr	r0, [pc, #372]	; (d6438 <_Z3numiiiii+0x2064>)
   d62c2:	f008 fc1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d62c6:	f01b 0f01 	tst.w	fp, #1
   d62ca:	f040 80af 	bne.w	d642c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d62ce:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d62d2:	4859      	ldr	r0, [pc, #356]	; (d6438 <_Z3numiiiii+0x2064>)
   d62d4:	9700      	str	r7, [sp, #0]
   d62d6:	b2a4      	uxth	r4, r4
   d62d8:	b2ed      	uxtb	r5, r5
   d62da:	b2f6      	uxtb	r6, r6
   d62dc:	4633      	mov	r3, r6
   d62de:	462a      	mov	r2, r5
   d62e0:	4621      	mov	r1, r4
   d62e2:	f008 fc0d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d62e6:	1c61      	adds	r1, r4, #1
   d62e8:	4633      	mov	r3, r6
   d62ea:	462a      	mov	r2, r5
   d62ec:	b289      	uxth	r1, r1
   d62ee:	4852      	ldr	r0, [pc, #328]	; (d6438 <_Z3numiiiii+0x2064>)
   d62f0:	9700      	str	r7, [sp, #0]
   d62f2:	f008 fc05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d62f6:	1ca1      	adds	r1, r4, #2
   d62f8:	4633      	mov	r3, r6
   d62fa:	462a      	mov	r2, r5
   d62fc:	b289      	uxth	r1, r1
   d62fe:	484e      	ldr	r0, [pc, #312]	; (d6438 <_Z3numiiiii+0x2064>)
   d6300:	9700      	str	r7, [sp, #0]
   d6302:	f008 fbfd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d6306:	1ce1      	adds	r1, r4, #3
   d6308:	4633      	mov	r3, r6
   d630a:	462a      	mov	r2, r5
   d630c:	b289      	uxth	r1, r1
   d630e:	484a      	ldr	r0, [pc, #296]	; (d6438 <_Z3numiiiii+0x2064>)
   d6310:	9700      	str	r7, [sp, #0]
   d6312:	f008 fbf5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d6316:	1d21      	adds	r1, r4, #4
   d6318:	4633      	mov	r3, r6
   d631a:	462a      	mov	r2, r5
   d631c:	b289      	uxth	r1, r1
   d631e:	4846      	ldr	r0, [pc, #280]	; (d6438 <_Z3numiiiii+0x2064>)
   d6320:	9700      	str	r7, [sp, #0]
   d6322:	f008 fbed 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d6326:	1d61      	adds	r1, r4, #5
   d6328:	4633      	mov	r3, r6
   d632a:	462a      	mov	r2, r5
   d632c:	b289      	uxth	r1, r1
   d632e:	4842      	ldr	r0, [pc, #264]	; (d6438 <_Z3numiiiii+0x2064>)
   d6330:	9700      	str	r7, [sp, #0]
   d6332:	f008 fbe5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d6336:	1da1      	adds	r1, r4, #6
   d6338:	4633      	mov	r3, r6
   d633a:	462a      	mov	r2, r5
   d633c:	b289      	uxth	r1, r1
   d633e:	483e      	ldr	r0, [pc, #248]	; (d6438 <_Z3numiiiii+0x2064>)
   d6340:	9700      	str	r7, [sp, #0]
   d6342:	f008 fbdd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d6346:	f104 0109 	add.w	r1, r4, #9
   d634a:	4633      	mov	r3, r6
   d634c:	462a      	mov	r2, r5
   d634e:	b289      	uxth	r1, r1
   d6350:	4839      	ldr	r0, [pc, #228]	; (d6438 <_Z3numiiiii+0x2064>)
   d6352:	9700      	str	r7, [sp, #0]
   d6354:	f008 fbd4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6358:	f104 0116 	add.w	r1, r4, #22
   d635c:	4633      	mov	r3, r6
   d635e:	462a      	mov	r2, r5
   d6360:	b289      	uxth	r1, r1
   d6362:	4835      	ldr	r0, [pc, #212]	; (d6438 <_Z3numiiiii+0x2064>)
   d6364:	9700      	str	r7, [sp, #0]
   d6366:	f008 fbcb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d636a:	f104 0119 	add.w	r1, r4, #25
   d636e:	4633      	mov	r3, r6
   d6370:	462a      	mov	r2, r5
   d6372:	b289      	uxth	r1, r1
   d6374:	4830      	ldr	r0, [pc, #192]	; (d6438 <_Z3numiiiii+0x2064>)
   d6376:	9700      	str	r7, [sp, #0]
   d6378:	f008 fbc2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d637c:	f104 011a 	add.w	r1, r4, #26
   d6380:	4633      	mov	r3, r6
   d6382:	462a      	mov	r2, r5
   d6384:	b289      	uxth	r1, r1
   d6386:	482c      	ldr	r0, [pc, #176]	; (d6438 <_Z3numiiiii+0x2064>)
   d6388:	9700      	str	r7, [sp, #0]
   d638a:	f008 fbb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d638e:	f104 011b 	add.w	r1, r4, #27
   d6392:	4633      	mov	r3, r6
   d6394:	462a      	mov	r2, r5
   d6396:	b289      	uxth	r1, r1
   d6398:	4827      	ldr	r0, [pc, #156]	; (d6438 <_Z3numiiiii+0x2064>)
   d639a:	9700      	str	r7, [sp, #0]
   d639c:	f008 fbb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d63a0:	f104 011c 	add.w	r1, r4, #28
   d63a4:	4633      	mov	r3, r6
   d63a6:	462a      	mov	r2, r5
   d63a8:	b289      	uxth	r1, r1
   d63aa:	4823      	ldr	r0, [pc, #140]	; (d6438 <_Z3numiiiii+0x2064>)
   d63ac:	9700      	str	r7, [sp, #0]
   d63ae:	f008 fba7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d63b2:	f104 011d 	add.w	r1, r4, #29
   d63b6:	4633      	mov	r3, r6
   d63b8:	462a      	mov	r2, r5
   d63ba:	b289      	uxth	r1, r1
   d63bc:	481e      	ldr	r0, [pc, #120]	; (d6438 <_Z3numiiiii+0x2064>)
   d63be:	9700      	str	r7, [sp, #0]
   d63c0:	f008 fb9e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d63c4:	f104 011e 	add.w	r1, r4, #30
   d63c8:	4633      	mov	r3, r6
   d63ca:	462a      	mov	r2, r5
   d63cc:	b289      	uxth	r1, r1
   d63ce:	481a      	ldr	r0, [pc, #104]	; (d6438 <_Z3numiiiii+0x2064>)
   d63d0:	9700      	str	r7, [sp, #0]
   d63d2:	f008 fb95 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d63d6:	f104 011f 	add.w	r1, r4, #31
   d63da:	4633      	mov	r3, r6
   d63dc:	462a      	mov	r2, r5
   d63de:	b289      	uxth	r1, r1
   d63e0:	4815      	ldr	r0, [pc, #84]	; (d6438 <_Z3numiiiii+0x2064>)
   d63e2:	9700      	str	r7, [sp, #0]
   d63e4:	f008 fb8c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d63e8:	f104 010f 	add.w	r1, r4, #15
   d63ec:	4633      	mov	r3, r6
   d63ee:	462a      	mov	r2, r5
   d63f0:	b289      	uxth	r1, r1
   d63f2:	4811      	ldr	r0, [pc, #68]	; (d6438 <_Z3numiiiii+0x2064>)
   d63f4:	9700      	str	r7, [sp, #0]
   d63f6:	f008 fb83 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d63fa:	f104 0110 	add.w	r1, r4, #16
   d63fe:	4633      	mov	r3, r6
   d6400:	462a      	mov	r2, r5
   d6402:	b289      	uxth	r1, r1
   d6404:	480c      	ldr	r0, [pc, #48]	; (d6438 <_Z3numiiiii+0x2064>)
   d6406:	9700      	str	r7, [sp, #0]
   d6408:	f008 fb7a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d640c:	f104 010c 	add.w	r1, r4, #12
   d6410:	4633      	mov	r3, r6
   d6412:	462a      	mov	r2, r5
   d6414:	b289      	uxth	r1, r1
   d6416:	9700      	str	r7, [sp, #0]
   d6418:	4807      	ldr	r0, [pc, #28]	; (d6438 <_Z3numiiiii+0x2064>)
   d641a:	f008 fb71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d641e:	f104 0113 	add.w	r1, r4, #19
   d6422:	970e      	str	r7, [sp, #56]	; 0x38
   d6424:	4633      	mov	r3, r6
   d6426:	462a      	mov	r2, r5
   d6428:	f7ff bb41 	b.w	d5aae <_Z3numiiiii+0x16da>
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
   d642c:	b005      	add	sp, #20
   d642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6432:	bf00      	nop
   d6434:	80000001 	.word	0x80000001
   d6438:	2003e31c 	.word	0x2003e31c

000d643c <_Z4snumiiiii>:
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6440:	b085      	sub	sp, #20
   d6442:	461d      	mov	r5, r3
    if(num == 1)
   d6444:	2801      	cmp	r0, #1
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d6446:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6448:	9202      	str	r2, [sp, #8]
   d644a:	460c      	mov	r4, r1
   d644c:	9303      	str	r3, [sp, #12]
    if(num == 1)
   d644e:	f040 812d 	bne.w	d66ac <_Z4snumiiiii+0x270>
    {
        if((pix/8)%2 == 1)
   d6452:	4b94      	ldr	r3, [pc, #592]	; (d66a4 <_Z4snumiiiii+0x268>)
   d6454:	2608      	movs	r6, #8
   d6456:	fb91 f6f6 	sdiv	r6, r1, r6
   d645a:	4033      	ands	r3, r6
   d645c:	2b00      	cmp	r3, #0
   d645e:	bfbe      	ittt	lt
   d6460:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6464:	f063 0301 	ornlt	r3, r3, #1
   d6468:	3301      	addlt	r3, #1
   d646a:	2b01      	cmp	r3, #1
   d646c:	f040 8094 	bne.w	d6598 <_Z4snumiiiii+0x15c>
        {
            strip.setPixelColor(pix,0,0,0);
   d6470:	f04f 0800 	mov.w	r8, #0
   d6474:	b28f      	uxth	r7, r1
   d6476:	4643      	mov	r3, r8
   d6478:	4642      	mov	r2, r8
   d647a:	f8cd 8000 	str.w	r8, [sp]
   d647e:	4639      	mov	r1, r7
   d6480:	4889      	ldr	r0, [pc, #548]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6482:	f008 fb3d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6486:	1e79      	subs	r1, r7, #1
   d6488:	4643      	mov	r3, r8
   d648a:	4642      	mov	r2, r8
   d648c:	f8cd 8000 	str.w	r8, [sp]
   d6490:	b289      	uxth	r1, r1
   d6492:	4885      	ldr	r0, [pc, #532]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6494:	f008 fb34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d6498:	1eb9      	subs	r1, r7, #2
   d649a:	4643      	mov	r3, r8
   d649c:	4642      	mov	r2, r8
   d649e:	f8cd 8000 	str.w	r8, [sp]
   d64a2:	b289      	uxth	r1, r1
   d64a4:	4880      	ldr	r0, [pc, #512]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d64a6:	f008 fb2b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d64aa:	1ef9      	subs	r1, r7, #3
   d64ac:	4643      	mov	r3, r8
   d64ae:	4642      	mov	r2, r8
   d64b0:	f8cd 8000 	str.w	r8, [sp]
   d64b4:	b289      	uxth	r1, r1
   d64b6:	487c      	ldr	r0, [pc, #496]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d64b8:	f008 fb22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d64bc:	1f39      	subs	r1, r7, #4
   d64be:	4643      	mov	r3, r8
   d64c0:	4642      	mov	r2, r8
   d64c2:	f8cd 8000 	str.w	r8, [sp]
   d64c6:	b289      	uxth	r1, r1
   d64c8:	4877      	ldr	r0, [pc, #476]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d64ca:	f008 fb19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d64ce:	1c79      	adds	r1, r7, #1
   d64d0:	4643      	mov	r3, r8
   d64d2:	4642      	mov	r2, r8
   d64d4:	f8cd 8000 	str.w	r8, [sp]
   d64d8:	b289      	uxth	r1, r1
   d64da:	4873      	ldr	r0, [pc, #460]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d64dc:	f008 fb10 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d64e0:	1cb9      	adds	r1, r7, #2
   d64e2:	4643      	mov	r3, r8
   d64e4:	4642      	mov	r2, r8
   d64e6:	f8cd 8000 	str.w	r8, [sp]
   d64ea:	b289      	uxth	r1, r1
   d64ec:	486e      	ldr	r0, [pc, #440]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d64ee:	f008 fb07 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d64f2:	1cf9      	adds	r1, r7, #3
   d64f4:	4643      	mov	r3, r8
   d64f6:	4642      	mov	r2, r8
   d64f8:	f8cd 8000 	str.w	r8, [sp]
   d64fc:	b289      	uxth	r1, r1
   d64fe:	486a      	ldr	r0, [pc, #424]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6500:	f008 fafe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6504:	1d39      	adds	r1, r7, #4
   d6506:	4643      	mov	r3, r8
   d6508:	4642      	mov	r2, r8
   d650a:	f8cd 8000 	str.w	r8, [sp]
   d650e:	b289      	uxth	r1, r1
   d6510:	4865      	ldr	r0, [pc, #404]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6512:	f008 faf5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d6516:	1d79      	adds	r1, r7, #5
   d6518:	4643      	mov	r3, r8
   d651a:	4642      	mov	r2, r8
   d651c:	f8cd 8000 	str.w	r8, [sp]
   d6520:	b289      	uxth	r1, r1
   d6522:	4861      	ldr	r0, [pc, #388]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6524:	f008 faec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6528:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d652c:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6530:	485d      	ldr	r0, [pc, #372]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6532:	f8cd a000 	str.w	sl, [sp]
   d6536:	fa5f f985 	uxtb.w	r9, r5
   d653a:	f107 0110 	add.w	r1, r7, #16
   d653e:	464b      	mov	r3, r9
   d6540:	4642      	mov	r2, r8
   d6542:	b289      	uxth	r1, r1
   d6544:	f008 fadc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6548:	f107 010f 	add.w	r1, r7, #15
   d654c:	464b      	mov	r3, r9
   d654e:	4642      	mov	r2, r8
   d6550:	b289      	uxth	r1, r1
   d6552:	4855      	ldr	r0, [pc, #340]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6554:	f8cd a000 	str.w	sl, [sp]
   d6558:	f008 fad2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d655c:	f107 010e 	add.w	r1, r7, #14
   d6560:	464b      	mov	r3, r9
   d6562:	4642      	mov	r2, r8
   d6564:	b289      	uxth	r1, r1
   d6566:	4850      	ldr	r0, [pc, #320]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6568:	f8cd a000 	str.w	sl, [sp]
   d656c:	f008 fac8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6570:	f107 010d 	add.w	r1, r7, #13
   d6574:	464b      	mov	r3, r9
   d6576:	4642      	mov	r2, r8
   d6578:	b289      	uxth	r1, r1
   d657a:	484b      	ldr	r0, [pc, #300]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d657c:	f8cd a000 	str.w	sl, [sp]
   d6580:	f008 fabe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6584:	f107 010c 	add.w	r1, r7, #12
   d6588:	f8cd a000 	str.w	sl, [sp]
   d658c:	464b      	mov	r3, r9
   d658e:	4642      	mov	r2, r8
   d6590:	b289      	uxth	r1, r1
   d6592:	4845      	ldr	r0, [pc, #276]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6594:	f008 fab4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6598:	f016 0601 	ands.w	r6, r6, #1
   d659c:	f041 82e8 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,0,0,0);
   d65a0:	b2a4      	uxth	r4, r4
   d65a2:	4633      	mov	r3, r6
   d65a4:	4632      	mov	r2, r6
   d65a6:	9600      	str	r6, [sp, #0]
   d65a8:	4621      	mov	r1, r4
   d65aa:	483f      	ldr	r0, [pc, #252]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65ac:	f008 faa8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d65b0:	1c61      	adds	r1, r4, #1
   d65b2:	4633      	mov	r3, r6
   d65b4:	4632      	mov	r2, r6
   d65b6:	9600      	str	r6, [sp, #0]
   d65b8:	b289      	uxth	r1, r1
   d65ba:	483b      	ldr	r0, [pc, #236]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65bc:	f008 faa0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d65c0:	1ca1      	adds	r1, r4, #2
   d65c2:	4633      	mov	r3, r6
   d65c4:	4632      	mov	r2, r6
   d65c6:	9600      	str	r6, [sp, #0]
   d65c8:	b289      	uxth	r1, r1
   d65ca:	4837      	ldr	r0, [pc, #220]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65cc:	f008 fa98 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d65d0:	1ce1      	adds	r1, r4, #3
   d65d2:	4633      	mov	r3, r6
   d65d4:	4632      	mov	r2, r6
   d65d6:	9600      	str	r6, [sp, #0]
   d65d8:	b289      	uxth	r1, r1
   d65da:	4833      	ldr	r0, [pc, #204]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65dc:	f008 fa90 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d65e0:	1d21      	adds	r1, r4, #4
   d65e2:	4633      	mov	r3, r6
   d65e4:	4632      	mov	r2, r6
   d65e6:	9600      	str	r6, [sp, #0]
   d65e8:	b289      	uxth	r1, r1
   d65ea:	482f      	ldr	r0, [pc, #188]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65ec:	f008 fa88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d65f0:	f104 010b 	add.w	r1, r4, #11
   d65f4:	4633      	mov	r3, r6
   d65f6:	4632      	mov	r2, r6
   d65f8:	9600      	str	r6, [sp, #0]
   d65fa:	b289      	uxth	r1, r1
   d65fc:	482a      	ldr	r0, [pc, #168]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d65fe:	f008 fa7f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6602:	f104 010c 	add.w	r1, r4, #12
   d6606:	4633      	mov	r3, r6
   d6608:	4632      	mov	r2, r6
   d660a:	9600      	str	r6, [sp, #0]
   d660c:	b289      	uxth	r1, r1
   d660e:	4826      	ldr	r0, [pc, #152]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6610:	f008 fa76 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d6614:	f104 010d 	add.w	r1, r4, #13
   d6618:	4633      	mov	r3, r6
   d661a:	4632      	mov	r2, r6
   d661c:	9600      	str	r6, [sp, #0]
   d661e:	b289      	uxth	r1, r1
   d6620:	4821      	ldr	r0, [pc, #132]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6622:	f008 fa6d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6626:	f104 010e 	add.w	r1, r4, #14
   d662a:	4633      	mov	r3, r6
   d662c:	4632      	mov	r2, r6
   d662e:	9600      	str	r6, [sp, #0]
   d6630:	b289      	uxth	r1, r1
   d6632:	481d      	ldr	r0, [pc, #116]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6634:	f008 fa64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6638:	f104 010f 	add.w	r1, r4, #15
   d663c:	4633      	mov	r3, r6
   d663e:	4632      	mov	r2, r6
   d6640:	9600      	str	r6, [sp, #0]
   d6642:	b289      	uxth	r1, r1
   d6644:	4818      	ldr	r0, [pc, #96]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6646:	f008 fa5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d664a:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d664e:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d6652:	4815      	ldr	r0, [pc, #84]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6654:	9700      	str	r7, [sp, #0]
   d6656:	b2ed      	uxtb	r5, r5
   d6658:	f104 0110 	add.w	r1, r4, #16
   d665c:	462b      	mov	r3, r5
   d665e:	4632      	mov	r2, r6
   d6660:	b289      	uxth	r1, r1
   d6662:	f008 fa4d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6666:	f104 0111 	add.w	r1, r4, #17
   d666a:	462b      	mov	r3, r5
   d666c:	4632      	mov	r2, r6
   d666e:	b289      	uxth	r1, r1
   d6670:	480d      	ldr	r0, [pc, #52]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6672:	9700      	str	r7, [sp, #0]
   d6674:	f008 fa44 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6678:	f104 0112 	add.w	r1, r4, #18
   d667c:	462b      	mov	r3, r5
   d667e:	4632      	mov	r2, r6
   d6680:	b289      	uxth	r1, r1
   d6682:	4809      	ldr	r0, [pc, #36]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6684:	9700      	str	r7, [sp, #0]
   d6686:	f008 fa3b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d668a:	f104 0113 	add.w	r1, r4, #19
   d668e:	b289      	uxth	r1, r1
   d6690:	9700      	str	r7, [sp, #0]
   d6692:	462b      	mov	r3, r5
   d6694:	4632      	mov	r2, r6
   d6696:	4804      	ldr	r0, [pc, #16]	; (d66a8 <_Z4snumiiiii+0x26c>)
   d6698:	f008 fa32 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d669c:	f104 0114 	add.w	r1, r4, #20
   d66a0:	9700      	str	r7, [sp, #0]
   d66a2:	e139      	b.n	d6918 <_Z4snumiiiii+0x4dc>
   d66a4:	80000001 	.word	0x80000001
   d66a8:	2003e31c 	.word	0x2003e31c
        }
    }
    if(num == 2)
   d66ac:	2802      	cmp	r0, #2
   d66ae:	f040 813f 	bne.w	d6930 <_Z4snumiiiii+0x4f4>
    {
        if((pix/8)%2 == 1)
   d66b2:	4b9d      	ldr	r3, [pc, #628]	; (d6928 <_Z4snumiiiii+0x4ec>)
   d66b4:	2708      	movs	r7, #8
   d66b6:	fb91 f7f7 	sdiv	r7, r1, r7
   d66ba:	403b      	ands	r3, r7
   d66bc:	2b00      	cmp	r3, #0
   d66be:	bfbe      	ittt	lt
   d66c0:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d66c4:	f063 0301 	ornlt	r3, r3, #1
   d66c8:	3301      	addlt	r3, #1
   d66ca:	2b01      	cmp	r3, #1
   d66cc:	f040 8094 	bne.w	d67f8 <_Z4snumiiiii+0x3bc>
        {
            strip.setPixelColor(pix,R,G,B);
   d66d0:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d66d4:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d66d8:	4894      	ldr	r0, [pc, #592]	; (d692c <_Z4snumiiiii+0x4f0>)
   d66da:	f8cd a000 	str.w	sl, [sp]
   d66de:	b28e      	uxth	r6, r1
   d66e0:	fa5f f985 	uxtb.w	r9, r5
   d66e4:	464b      	mov	r3, r9
   d66e6:	4642      	mov	r2, r8
   d66e8:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d66ea:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 2)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d66ee:	f008 fa07 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d66f2:	1e71      	subs	r1, r6, #1
   d66f4:	465b      	mov	r3, fp
   d66f6:	465a      	mov	r2, fp
   d66f8:	b289      	uxth	r1, r1
   d66fa:	488c      	ldr	r0, [pc, #560]	; (d692c <_Z4snumiiiii+0x4f0>)
   d66fc:	f8cd b000 	str.w	fp, [sp]
   d6700:	f008 f9fe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6704:	1eb1      	subs	r1, r6, #2
   d6706:	464b      	mov	r3, r9
   d6708:	4642      	mov	r2, r8
   d670a:	b289      	uxth	r1, r1
   d670c:	4887      	ldr	r0, [pc, #540]	; (d692c <_Z4snumiiiii+0x4f0>)
   d670e:	f8cd a000 	str.w	sl, [sp]
   d6712:	f008 f9f5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d6716:	1ef1      	subs	r1, r6, #3
   d6718:	464b      	mov	r3, r9
   d671a:	4642      	mov	r2, r8
   d671c:	b289      	uxth	r1, r1
   d671e:	4883      	ldr	r0, [pc, #524]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6720:	f8cd a000 	str.w	sl, [sp]
   d6724:	f008 f9ec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6728:	1f31      	subs	r1, r6, #4
   d672a:	464b      	mov	r3, r9
   d672c:	4642      	mov	r2, r8
   d672e:	b289      	uxth	r1, r1
   d6730:	487e      	ldr	r0, [pc, #504]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6732:	f8cd a000 	str.w	sl, [sp]
   d6736:	f008 f9e3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d673a:	1c71      	adds	r1, r6, #1
   d673c:	464b      	mov	r3, r9
   d673e:	4642      	mov	r2, r8
   d6740:	b289      	uxth	r1, r1
   d6742:	487a      	ldr	r0, [pc, #488]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6744:	f8cd a000 	str.w	sl, [sp]
   d6748:	f008 f9da 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d674c:	1cb1      	adds	r1, r6, #2
   d674e:	465b      	mov	r3, fp
   d6750:	465a      	mov	r2, fp
   d6752:	b289      	uxth	r1, r1
   d6754:	4875      	ldr	r0, [pc, #468]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6756:	f8cd b000 	str.w	fp, [sp]
   d675a:	f008 f9d1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d675e:	1cf1      	adds	r1, r6, #3
   d6760:	464b      	mov	r3, r9
   d6762:	4642      	mov	r2, r8
   d6764:	b289      	uxth	r1, r1
   d6766:	4871      	ldr	r0, [pc, #452]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6768:	f8cd a000 	str.w	sl, [sp]
   d676c:	f008 f9c8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6770:	1d31      	adds	r1, r6, #4
   d6772:	465b      	mov	r3, fp
   d6774:	465a      	mov	r2, fp
   d6776:	b289      	uxth	r1, r1
   d6778:	486c      	ldr	r0, [pc, #432]	; (d692c <_Z4snumiiiii+0x4f0>)
   d677a:	f8cd b000 	str.w	fp, [sp]
   d677e:	f008 f9bf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6782:	1d71      	adds	r1, r6, #5
   d6784:	464b      	mov	r3, r9
   d6786:	4642      	mov	r2, r8
   d6788:	b289      	uxth	r1, r1
   d678a:	4868      	ldr	r0, [pc, #416]	; (d692c <_Z4snumiiiii+0x4f0>)
   d678c:	f8cd a000 	str.w	sl, [sp]
   d6790:	f008 f9b6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6794:	f106 0110 	add.w	r1, r6, #16
   d6798:	464b      	mov	r3, r9
   d679a:	4642      	mov	r2, r8
   d679c:	b289      	uxth	r1, r1
   d679e:	4863      	ldr	r0, [pc, #396]	; (d692c <_Z4snumiiiii+0x4f0>)
   d67a0:	f8cd a000 	str.w	sl, [sp]
   d67a4:	f008 f9ac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d67a8:	f106 010f 	add.w	r1, r6, #15
   d67ac:	464b      	mov	r3, r9
   d67ae:	4642      	mov	r2, r8
   d67b0:	b289      	uxth	r1, r1
   d67b2:	485e      	ldr	r0, [pc, #376]	; (d692c <_Z4snumiiiii+0x4f0>)
   d67b4:	f8cd a000 	str.w	sl, [sp]
   d67b8:	f008 f9a2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d67bc:	f106 010e 	add.w	r1, r6, #14
   d67c0:	464b      	mov	r3, r9
   d67c2:	4642      	mov	r2, r8
   d67c4:	b289      	uxth	r1, r1
   d67c6:	4859      	ldr	r0, [pc, #356]	; (d692c <_Z4snumiiiii+0x4f0>)
   d67c8:	f8cd a000 	str.w	sl, [sp]
   d67cc:	f008 f998 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d67d0:	f106 010d 	add.w	r1, r6, #13
   d67d4:	465b      	mov	r3, fp
   d67d6:	465a      	mov	r2, fp
   d67d8:	b289      	uxth	r1, r1
   d67da:	4854      	ldr	r0, [pc, #336]	; (d692c <_Z4snumiiiii+0x4f0>)
   d67dc:	f8cd b000 	str.w	fp, [sp]
   d67e0:	f008 f98e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d67e4:	f106 010c 	add.w	r1, r6, #12
   d67e8:	f8cd a000 	str.w	sl, [sp]
   d67ec:	464b      	mov	r3, r9
   d67ee:	4642      	mov	r2, r8
   d67f0:	b289      	uxth	r1, r1
   d67f2:	484e      	ldr	r0, [pc, #312]	; (d692c <_Z4snumiiiii+0x4f0>)
   d67f4:	f008 f984 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d67f8:	f017 0701 	ands.w	r7, r7, #1
   d67fc:	f041 81b8 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6800:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6804:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6808:	4848      	ldr	r0, [pc, #288]	; (d692c <_Z4snumiiiii+0x4f0>)
   d680a:	f8cd 8000 	str.w	r8, [sp]
   d680e:	b2a4      	uxth	r4, r4
   d6810:	b2ed      	uxtb	r5, r5
   d6812:	462b      	mov	r3, r5
   d6814:	4632      	mov	r2, r6
   d6816:	4621      	mov	r1, r4
   d6818:	f008 f972 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d681c:	1c61      	adds	r1, r4, #1
   d681e:	463b      	mov	r3, r7
   d6820:	463a      	mov	r2, r7
   d6822:	b289      	uxth	r1, r1
   d6824:	4841      	ldr	r0, [pc, #260]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6826:	9700      	str	r7, [sp, #0]
   d6828:	f008 f96a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d682c:	1ca1      	adds	r1, r4, #2
   d682e:	462b      	mov	r3, r5
   d6830:	4632      	mov	r2, r6
   d6832:	b289      	uxth	r1, r1
   d6834:	483d      	ldr	r0, [pc, #244]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6836:	f8cd 8000 	str.w	r8, [sp]
   d683a:	f008 f961 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d683e:	1ce1      	adds	r1, r4, #3
   d6840:	462b      	mov	r3, r5
   d6842:	4632      	mov	r2, r6
   d6844:	b289      	uxth	r1, r1
   d6846:	4839      	ldr	r0, [pc, #228]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6848:	f8cd 8000 	str.w	r8, [sp]
   d684c:	f008 f958 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6850:	1d21      	adds	r1, r4, #4
   d6852:	462b      	mov	r3, r5
   d6854:	4632      	mov	r2, r6
   d6856:	b289      	uxth	r1, r1
   d6858:	4834      	ldr	r0, [pc, #208]	; (d692c <_Z4snumiiiii+0x4f0>)
   d685a:	f8cd 8000 	str.w	r8, [sp]
   d685e:	f008 f94f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6862:	f104 010b 	add.w	r1, r4, #11
   d6866:	462b      	mov	r3, r5
   d6868:	4632      	mov	r2, r6
   d686a:	b289      	uxth	r1, r1
   d686c:	482f      	ldr	r0, [pc, #188]	; (d692c <_Z4snumiiiii+0x4f0>)
   d686e:	f8cd 8000 	str.w	r8, [sp]
   d6872:	f008 f945 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6876:	f104 010c 	add.w	r1, r4, #12
   d687a:	463b      	mov	r3, r7
   d687c:	463a      	mov	r2, r7
   d687e:	b289      	uxth	r1, r1
   d6880:	482a      	ldr	r0, [pc, #168]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6882:	9700      	str	r7, [sp, #0]
   d6884:	f008 f93c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6888:	f104 010d 	add.w	r1, r4, #13
   d688c:	462b      	mov	r3, r5
   d688e:	4632      	mov	r2, r6
   d6890:	b289      	uxth	r1, r1
   d6892:	4826      	ldr	r0, [pc, #152]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6894:	f8cd 8000 	str.w	r8, [sp]
   d6898:	f008 f932 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d689c:	f104 010e 	add.w	r1, r4, #14
   d68a0:	463b      	mov	r3, r7
   d68a2:	463a      	mov	r2, r7
   d68a4:	b289      	uxth	r1, r1
   d68a6:	4821      	ldr	r0, [pc, #132]	; (d692c <_Z4snumiiiii+0x4f0>)
   d68a8:	9700      	str	r7, [sp, #0]
   d68aa:	f008 f929 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d68ae:	f104 010f 	add.w	r1, r4, #15
   d68b2:	462b      	mov	r3, r5
   d68b4:	4632      	mov	r2, r6
   d68b6:	b289      	uxth	r1, r1
   d68b8:	481c      	ldr	r0, [pc, #112]	; (d692c <_Z4snumiiiii+0x4f0>)
   d68ba:	f8cd 8000 	str.w	r8, [sp]
   d68be:	f008 f91f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d68c2:	f104 0110 	add.w	r1, r4, #16
   d68c6:	462b      	mov	r3, r5
   d68c8:	4632      	mov	r2, r6
   d68ca:	b289      	uxth	r1, r1
   d68cc:	4817      	ldr	r0, [pc, #92]	; (d692c <_Z4snumiiiii+0x4f0>)
   d68ce:	f8cd 8000 	str.w	r8, [sp]
   d68d2:	f008 f915 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d68d6:	f104 0111 	add.w	r1, r4, #17
   d68da:	462b      	mov	r3, r5
   d68dc:	4632      	mov	r2, r6
   d68de:	b289      	uxth	r1, r1
   d68e0:	4812      	ldr	r0, [pc, #72]	; (d692c <_Z4snumiiiii+0x4f0>)
   d68e2:	f8cd 8000 	str.w	r8, [sp]
   d68e6:	f008 f90b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d68ea:	f104 0112 	add.w	r1, r4, #18
   d68ee:	462b      	mov	r3, r5
   d68f0:	4632      	mov	r2, r6
   d68f2:	b289      	uxth	r1, r1
   d68f4:	f8cd 8000 	str.w	r8, [sp]
   d68f8:	480c      	ldr	r0, [pc, #48]	; (d692c <_Z4snumiiiii+0x4f0>)
   d68fa:	f008 f901 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,0,0,0);
   d68fe:	f104 0113 	add.w	r1, r4, #19
   d6902:	9700      	str	r7, [sp, #0]
   d6904:	463b      	mov	r3, r7
   d6906:	463a      	mov	r2, r7
   d6908:	b289      	uxth	r1, r1
   d690a:	4808      	ldr	r0, [pc, #32]	; (d692c <_Z4snumiiiii+0x4f0>)
   d690c:	f008 f8f8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d6910:	f104 0114 	add.w	r1, r4, #20
   d6914:	f8cd 8000 	str.w	r8, [sp]
   d6918:	462b      	mov	r3, r5
   d691a:	4632      	mov	r2, r6
   d691c:	b289      	uxth	r1, r1
   d691e:	4803      	ldr	r0, [pc, #12]	; (d692c <_Z4snumiiiii+0x4f0>)
   d6920:	f008 f8ee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d6924:	f001 b924 	b.w	d7b70 <_Z4snumiiiii+0x1734>
   d6928:	80000001 	.word	0x80000001
   d692c:	2003e31c 	.word	0x2003e31c
        }
    }
    if(num == 3)
   d6930:	2803      	cmp	r0, #3
   d6932:	f040 811d 	bne.w	d6b70 <_Z4snumiiiii+0x734>
    {
        if((pix/8)%2 == 1)
   d6936:	4b8c      	ldr	r3, [pc, #560]	; (d6b68 <_Z4snumiiiii+0x72c>)
   d6938:	2708      	movs	r7, #8
   d693a:	fb91 f7f7 	sdiv	r7, r1, r7
   d693e:	403b      	ands	r3, r7
   d6940:	2b00      	cmp	r3, #0
   d6942:	bfbe      	ittt	lt
   d6944:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6948:	f063 0301 	ornlt	r3, r3, #1
   d694c:	3301      	addlt	r3, #1
   d694e:	2b01      	cmp	r3, #1
   d6950:	f040 8094 	bne.w	d6a7c <_Z4snumiiiii+0x640>
        {
            strip.setPixelColor(pix,R,G,B);
   d6954:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6958:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d695c:	4883      	ldr	r0, [pc, #524]	; (d6b6c <_Z4snumiiiii+0x730>)
   d695e:	f8cd a000 	str.w	sl, [sp]
   d6962:	b28e      	uxth	r6, r1
   d6964:	fa5f f985 	uxtb.w	r9, r5
   d6968:	464b      	mov	r3, r9
   d696a:	4642      	mov	r2, r8
   d696c:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d696e:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 3)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d6972:	f008 f8c5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6976:	1e71      	subs	r1, r6, #1
   d6978:	465b      	mov	r3, fp
   d697a:	465a      	mov	r2, fp
   d697c:	b289      	uxth	r1, r1
   d697e:	487b      	ldr	r0, [pc, #492]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6980:	f8cd b000 	str.w	fp, [sp]
   d6984:	f008 f8bc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6988:	1eb1      	subs	r1, r6, #2
   d698a:	464b      	mov	r3, r9
   d698c:	4642      	mov	r2, r8
   d698e:	b289      	uxth	r1, r1
   d6990:	4876      	ldr	r0, [pc, #472]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6992:	f8cd a000 	str.w	sl, [sp]
   d6996:	f008 f8b3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d699a:	1ef1      	subs	r1, r6, #3
   d699c:	465b      	mov	r3, fp
   d699e:	465a      	mov	r2, fp
   d69a0:	b289      	uxth	r1, r1
   d69a2:	4872      	ldr	r0, [pc, #456]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69a4:	f8cd b000 	str.w	fp, [sp]
   d69a8:	f008 f8aa 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d69ac:	1f31      	subs	r1, r6, #4
   d69ae:	464b      	mov	r3, r9
   d69b0:	4642      	mov	r2, r8
   d69b2:	b289      	uxth	r1, r1
   d69b4:	486d      	ldr	r0, [pc, #436]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69b6:	f8cd a000 	str.w	sl, [sp]
   d69ba:	f008 f8a1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d69be:	1c71      	adds	r1, r6, #1
   d69c0:	464b      	mov	r3, r9
   d69c2:	4642      	mov	r2, r8
   d69c4:	b289      	uxth	r1, r1
   d69c6:	4869      	ldr	r0, [pc, #420]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69c8:	f8cd a000 	str.w	sl, [sp]
   d69cc:	f008 f898 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d69d0:	1cb1      	adds	r1, r6, #2
   d69d2:	465b      	mov	r3, fp
   d69d4:	465a      	mov	r2, fp
   d69d6:	b289      	uxth	r1, r1
   d69d8:	4864      	ldr	r0, [pc, #400]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69da:	f8cd b000 	str.w	fp, [sp]
   d69de:	f008 f88f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d69e2:	1cf1      	adds	r1, r6, #3
   d69e4:	464b      	mov	r3, r9
   d69e6:	4642      	mov	r2, r8
   d69e8:	b289      	uxth	r1, r1
   d69ea:	4860      	ldr	r0, [pc, #384]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69ec:	f8cd a000 	str.w	sl, [sp]
   d69f0:	f008 f886 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d69f4:	1d31      	adds	r1, r6, #4
   d69f6:	465b      	mov	r3, fp
   d69f8:	465a      	mov	r2, fp
   d69fa:	b289      	uxth	r1, r1
   d69fc:	485b      	ldr	r0, [pc, #364]	; (d6b6c <_Z4snumiiiii+0x730>)
   d69fe:	f8cd b000 	str.w	fp, [sp]
   d6a02:	f008 f87d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6a06:	1d71      	adds	r1, r6, #5
   d6a08:	464b      	mov	r3, r9
   d6a0a:	4642      	mov	r2, r8
   d6a0c:	b289      	uxth	r1, r1
   d6a0e:	4857      	ldr	r0, [pc, #348]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a10:	f8cd a000 	str.w	sl, [sp]
   d6a14:	f008 f874 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6a18:	f106 0110 	add.w	r1, r6, #16
   d6a1c:	464b      	mov	r3, r9
   d6a1e:	4642      	mov	r2, r8
   d6a20:	b289      	uxth	r1, r1
   d6a22:	4852      	ldr	r0, [pc, #328]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a24:	f8cd a000 	str.w	sl, [sp]
   d6a28:	f008 f86a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6a2c:	f106 010f 	add.w	r1, r6, #15
   d6a30:	464b      	mov	r3, r9
   d6a32:	4642      	mov	r2, r8
   d6a34:	b289      	uxth	r1, r1
   d6a36:	484d      	ldr	r0, [pc, #308]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a38:	f8cd a000 	str.w	sl, [sp]
   d6a3c:	f008 f860 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6a40:	f106 010e 	add.w	r1, r6, #14
   d6a44:	464b      	mov	r3, r9
   d6a46:	4642      	mov	r2, r8
   d6a48:	b289      	uxth	r1, r1
   d6a4a:	4848      	ldr	r0, [pc, #288]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a4c:	f8cd a000 	str.w	sl, [sp]
   d6a50:	f008 f856 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6a54:	f106 010d 	add.w	r1, r6, #13
   d6a58:	464b      	mov	r3, r9
   d6a5a:	4642      	mov	r2, r8
   d6a5c:	b289      	uxth	r1, r1
   d6a5e:	4843      	ldr	r0, [pc, #268]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a60:	f8cd a000 	str.w	sl, [sp]
   d6a64:	f008 f84c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6a68:	f106 010c 	add.w	r1, r6, #12
   d6a6c:	f8cd a000 	str.w	sl, [sp]
   d6a70:	464b      	mov	r3, r9
   d6a72:	4642      	mov	r2, r8
   d6a74:	b289      	uxth	r1, r1
   d6a76:	483d      	ldr	r0, [pc, #244]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a78:	f008 f842 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6a7c:	f017 0701 	ands.w	r7, r7, #1
   d6a80:	f041 8076 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6a84:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6a88:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6a8c:	4837      	ldr	r0, [pc, #220]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6a8e:	f8cd 8000 	str.w	r8, [sp]
   d6a92:	b2a4      	uxth	r4, r4
   d6a94:	b2ed      	uxtb	r5, r5
   d6a96:	462b      	mov	r3, r5
   d6a98:	4632      	mov	r2, r6
   d6a9a:	4621      	mov	r1, r4
   d6a9c:	f008 f830 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6aa0:	1c61      	adds	r1, r4, #1
   d6aa2:	463b      	mov	r3, r7
   d6aa4:	463a      	mov	r2, r7
   d6aa6:	b289      	uxth	r1, r1
   d6aa8:	4830      	ldr	r0, [pc, #192]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6aaa:	9700      	str	r7, [sp, #0]
   d6aac:	f008 f828 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6ab0:	1ca1      	adds	r1, r4, #2
   d6ab2:	462b      	mov	r3, r5
   d6ab4:	4632      	mov	r2, r6
   d6ab6:	b289      	uxth	r1, r1
   d6ab8:	482c      	ldr	r0, [pc, #176]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6aba:	f8cd 8000 	str.w	r8, [sp]
   d6abe:	f008 f81f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6ac2:	1ce1      	adds	r1, r4, #3
   d6ac4:	463b      	mov	r3, r7
   d6ac6:	463a      	mov	r2, r7
   d6ac8:	b289      	uxth	r1, r1
   d6aca:	4828      	ldr	r0, [pc, #160]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6acc:	9700      	str	r7, [sp, #0]
   d6ace:	f008 f817 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6ad2:	1d21      	adds	r1, r4, #4
   d6ad4:	462b      	mov	r3, r5
   d6ad6:	4632      	mov	r2, r6
   d6ad8:	b289      	uxth	r1, r1
   d6ada:	4824      	ldr	r0, [pc, #144]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6adc:	f8cd 8000 	str.w	r8, [sp]
   d6ae0:	f008 f80e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6ae4:	f104 010b 	add.w	r1, r4, #11
   d6ae8:	462b      	mov	r3, r5
   d6aea:	4632      	mov	r2, r6
   d6aec:	b289      	uxth	r1, r1
   d6aee:	481f      	ldr	r0, [pc, #124]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6af0:	f8cd 8000 	str.w	r8, [sp]
   d6af4:	f008 f804 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6af8:	f104 010c 	add.w	r1, r4, #12
   d6afc:	463b      	mov	r3, r7
   d6afe:	463a      	mov	r2, r7
   d6b00:	b289      	uxth	r1, r1
   d6b02:	481a      	ldr	r0, [pc, #104]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6b04:	9700      	str	r7, [sp, #0]
   d6b06:	f007 fffb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6b0a:	f104 010d 	add.w	r1, r4, #13
   d6b0e:	462b      	mov	r3, r5
   d6b10:	4632      	mov	r2, r6
   d6b12:	b289      	uxth	r1, r1
   d6b14:	4815      	ldr	r0, [pc, #84]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6b16:	f8cd 8000 	str.w	r8, [sp]
   d6b1a:	f007 fff1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6b1e:	f104 010e 	add.w	r1, r4, #14
   d6b22:	463b      	mov	r3, r7
   d6b24:	463a      	mov	r2, r7
   d6b26:	b289      	uxth	r1, r1
   d6b28:	4810      	ldr	r0, [pc, #64]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6b2a:	9700      	str	r7, [sp, #0]
   d6b2c:	f007 ffe8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6b30:	f104 010f 	add.w	r1, r4, #15
   d6b34:	462b      	mov	r3, r5
   d6b36:	4632      	mov	r2, r6
   d6b38:	b289      	uxth	r1, r1
   d6b3a:	480c      	ldr	r0, [pc, #48]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6b3c:	f8cd 8000 	str.w	r8, [sp]
   d6b40:	f007 ffde 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6b44:	f104 0110 	add.w	r1, r4, #16
   d6b48:	462b      	mov	r3, r5
   d6b4a:	4632      	mov	r2, r6
   d6b4c:	b289      	uxth	r1, r1
   d6b4e:	f8cd 8000 	str.w	r8, [sp]
   d6b52:	4806      	ldr	r0, [pc, #24]	; (d6b6c <_Z4snumiiiii+0x730>)
   d6b54:	f007 ffd4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6b58:	f104 0111 	add.w	r1, r4, #17
   d6b5c:	f8cd 8000 	str.w	r8, [sp]
   d6b60:	462b      	mov	r3, r5
   d6b62:	4632      	mov	r2, r6
   d6b64:	e121      	b.n	d6daa <_Z4snumiiiii+0x96e>
   d6b66:	bf00      	nop
   d6b68:	80000001 	.word	0x80000001
   d6b6c:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
   d6b70:	2804      	cmp	r0, #4
   d6b72:	f000 8133 	beq.w	d6ddc <_Z4snumiiiii+0x9a0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 5)
   d6b76:	2805      	cmp	r0, #5
   d6b78:	f040 826e 	bne.w	d7058 <_Z4snumiiiii+0xc1c>
    {
        if((pix/8)%2 == 1)
   d6b7c:	4b95      	ldr	r3, [pc, #596]	; (d6dd4 <_Z4snumiiiii+0x998>)
   d6b7e:	2708      	movs	r7, #8
   d6b80:	fb94 f7f7 	sdiv	r7, r4, r7
   d6b84:	403b      	ands	r3, r7
   d6b86:	2b00      	cmp	r3, #0
   d6b88:	bfbe      	ittt	lt
   d6b8a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6b8e:	f063 0301 	ornlt	r3, r3, #1
   d6b92:	3301      	addlt	r3, #1
   d6b94:	2b01      	cmp	r3, #1
   d6b96:	f040 8094 	bne.w	d6cc2 <_Z4snumiiiii+0x886>
        {
            strip.setPixelColor(pix,R,G,B);
   d6b9a:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6b9e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6ba2:	488d      	ldr	r0, [pc, #564]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6ba4:	f8cd a000 	str.w	sl, [sp]
   d6ba8:	b2a6      	uxth	r6, r4
   d6baa:	fa5f f985 	uxtb.w	r9, r5
   d6bae:	464b      	mov	r3, r9
   d6bb0:	4642      	mov	r2, r8
   d6bb2:	4631      	mov	r1, r6
   d6bb4:	f007 ffa4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6bb8:	1e71      	subs	r1, r6, #1
   d6bba:	464b      	mov	r3, r9
   d6bbc:	4642      	mov	r2, r8
   d6bbe:	b289      	uxth	r1, r1
   d6bc0:	4885      	ldr	r0, [pc, #532]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6bc2:	f8cd a000 	str.w	sl, [sp]
   d6bc6:	f007 ff9b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6bca:	1eb1      	subs	r1, r6, #2
   d6bcc:	464b      	mov	r3, r9
   d6bce:	4642      	mov	r2, r8
   d6bd0:	b289      	uxth	r1, r1
   d6bd2:	4881      	ldr	r0, [pc, #516]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6bd4:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d6bd8:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d6bdc:	f007 ff90 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6be0:	1ef1      	subs	r1, r6, #3
   d6be2:	465b      	mov	r3, fp
   d6be4:	465a      	mov	r2, fp
   d6be6:	b289      	uxth	r1, r1
   d6be8:	487b      	ldr	r0, [pc, #492]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6bea:	f8cd b000 	str.w	fp, [sp]
   d6bee:	f007 ff87 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6bf2:	1f31      	subs	r1, r6, #4
   d6bf4:	464b      	mov	r3, r9
   d6bf6:	4642      	mov	r2, r8
   d6bf8:	b289      	uxth	r1, r1
   d6bfa:	4877      	ldr	r0, [pc, #476]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6bfc:	f8cd a000 	str.w	sl, [sp]
   d6c00:	f007 ff7e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6c04:	1c71      	adds	r1, r6, #1
   d6c06:	464b      	mov	r3, r9
   d6c08:	4642      	mov	r2, r8
   d6c0a:	b289      	uxth	r1, r1
   d6c0c:	4872      	ldr	r0, [pc, #456]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c0e:	f8cd a000 	str.w	sl, [sp]
   d6c12:	f007 ff75 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6c16:	1cb1      	adds	r1, r6, #2
   d6c18:	465b      	mov	r3, fp
   d6c1a:	465a      	mov	r2, fp
   d6c1c:	b289      	uxth	r1, r1
   d6c1e:	486e      	ldr	r0, [pc, #440]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c20:	f8cd b000 	str.w	fp, [sp]
   d6c24:	f007 ff6c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6c28:	1cf1      	adds	r1, r6, #3
   d6c2a:	464b      	mov	r3, r9
   d6c2c:	4642      	mov	r2, r8
   d6c2e:	b289      	uxth	r1, r1
   d6c30:	4869      	ldr	r0, [pc, #420]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c32:	f8cd a000 	str.w	sl, [sp]
   d6c36:	f007 ff63 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6c3a:	1d31      	adds	r1, r6, #4
   d6c3c:	465b      	mov	r3, fp
   d6c3e:	465a      	mov	r2, fp
   d6c40:	b289      	uxth	r1, r1
   d6c42:	4865      	ldr	r0, [pc, #404]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c44:	f8cd b000 	str.w	fp, [sp]
   d6c48:	f007 ff5a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6c4c:	1d71      	adds	r1, r6, #5
   d6c4e:	464b      	mov	r3, r9
   d6c50:	4642      	mov	r2, r8
   d6c52:	b289      	uxth	r1, r1
   d6c54:	4860      	ldr	r0, [pc, #384]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c56:	f8cd a000 	str.w	sl, [sp]
   d6c5a:	f007 ff51 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6c5e:	f106 0110 	add.w	r1, r6, #16
   d6c62:	464b      	mov	r3, r9
   d6c64:	4642      	mov	r2, r8
   d6c66:	b289      	uxth	r1, r1
   d6c68:	485b      	ldr	r0, [pc, #364]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c6a:	f8cd a000 	str.w	sl, [sp]
   d6c6e:	f007 ff47 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6c72:	f106 010f 	add.w	r1, r6, #15
   d6c76:	465b      	mov	r3, fp
   d6c78:	465a      	mov	r2, fp
   d6c7a:	b289      	uxth	r1, r1
   d6c7c:	4856      	ldr	r0, [pc, #344]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c7e:	f8cd b000 	str.w	fp, [sp]
   d6c82:	f007 ff3d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6c86:	f106 010e 	add.w	r1, r6, #14
   d6c8a:	464b      	mov	r3, r9
   d6c8c:	4642      	mov	r2, r8
   d6c8e:	b289      	uxth	r1, r1
   d6c90:	4851      	ldr	r0, [pc, #324]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6c92:	f8cd a000 	str.w	sl, [sp]
   d6c96:	f007 ff33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6c9a:	f106 010d 	add.w	r1, r6, #13
   d6c9e:	464b      	mov	r3, r9
   d6ca0:	4642      	mov	r2, r8
   d6ca2:	b289      	uxth	r1, r1
   d6ca4:	484c      	ldr	r0, [pc, #304]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6ca6:	f8cd a000 	str.w	sl, [sp]
   d6caa:	f007 ff29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6cae:	f106 010c 	add.w	r1, r6, #12
   d6cb2:	f8cd a000 	str.w	sl, [sp]
   d6cb6:	464b      	mov	r3, r9
   d6cb8:	4642      	mov	r2, r8
   d6cba:	b289      	uxth	r1, r1
   d6cbc:	4846      	ldr	r0, [pc, #280]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6cbe:	f007 ff1f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6cc2:	f017 0701 	ands.w	r7, r7, #1
   d6cc6:	f040 8753 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6cca:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6cce:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6cd2:	4841      	ldr	r0, [pc, #260]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6cd4:	f8cd 8000 	str.w	r8, [sp]
   d6cd8:	b2a4      	uxth	r4, r4
   d6cda:	b2ed      	uxtb	r5, r5
   d6cdc:	462b      	mov	r3, r5
   d6cde:	4632      	mov	r2, r6
   d6ce0:	4621      	mov	r1, r4
   d6ce2:	f007 ff0d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6ce6:	1c61      	adds	r1, r4, #1
   d6ce8:	462b      	mov	r3, r5
   d6cea:	4632      	mov	r2, r6
   d6cec:	b289      	uxth	r1, r1
   d6cee:	483a      	ldr	r0, [pc, #232]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6cf0:	f8cd 8000 	str.w	r8, [sp]
   d6cf4:	f007 ff04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6cf8:	1ca1      	adds	r1, r4, #2
   d6cfa:	462b      	mov	r3, r5
   d6cfc:	4632      	mov	r2, r6
   d6cfe:	b289      	uxth	r1, r1
   d6d00:	4835      	ldr	r0, [pc, #212]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d02:	f8cd 8000 	str.w	r8, [sp]
   d6d06:	f007 fefb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6d0a:	1ce1      	adds	r1, r4, #3
   d6d0c:	463b      	mov	r3, r7
   d6d0e:	463a      	mov	r2, r7
   d6d10:	b289      	uxth	r1, r1
   d6d12:	4831      	ldr	r0, [pc, #196]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d14:	9700      	str	r7, [sp, #0]
   d6d16:	f007 fef3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6d1a:	1d21      	adds	r1, r4, #4
   d6d1c:	462b      	mov	r3, r5
   d6d1e:	4632      	mov	r2, r6
   d6d20:	b289      	uxth	r1, r1
   d6d22:	482d      	ldr	r0, [pc, #180]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d24:	f8cd 8000 	str.w	r8, [sp]
   d6d28:	f007 feea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6d2c:	f104 010b 	add.w	r1, r4, #11
   d6d30:	462b      	mov	r3, r5
   d6d32:	4632      	mov	r2, r6
   d6d34:	b289      	uxth	r1, r1
   d6d36:	4828      	ldr	r0, [pc, #160]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d38:	f8cd 8000 	str.w	r8, [sp]
   d6d3c:	f007 fee0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6d40:	f104 010c 	add.w	r1, r4, #12
   d6d44:	463b      	mov	r3, r7
   d6d46:	463a      	mov	r2, r7
   d6d48:	b289      	uxth	r1, r1
   d6d4a:	4823      	ldr	r0, [pc, #140]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d4c:	9700      	str	r7, [sp, #0]
   d6d4e:	f007 fed7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6d52:	f104 010d 	add.w	r1, r4, #13
   d6d56:	462b      	mov	r3, r5
   d6d58:	4632      	mov	r2, r6
   d6d5a:	b289      	uxth	r1, r1
   d6d5c:	481e      	ldr	r0, [pc, #120]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d5e:	f8cd 8000 	str.w	r8, [sp]
   d6d62:	f007 fecd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6d66:	f104 010e 	add.w	r1, r4, #14
   d6d6a:	463b      	mov	r3, r7
   d6d6c:	463a      	mov	r2, r7
   d6d6e:	b289      	uxth	r1, r1
   d6d70:	4819      	ldr	r0, [pc, #100]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d72:	9700      	str	r7, [sp, #0]
   d6d74:	f007 fec4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6d78:	f104 010f 	add.w	r1, r4, #15
   d6d7c:	462b      	mov	r3, r5
   d6d7e:	4632      	mov	r2, r6
   d6d80:	b289      	uxth	r1, r1
   d6d82:	4815      	ldr	r0, [pc, #84]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d84:	f8cd 8000 	str.w	r8, [sp]
   d6d88:	f007 feba 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6d8c:	f104 0110 	add.w	r1, r4, #16
   d6d90:	462b      	mov	r3, r5
   d6d92:	4632      	mov	r2, r6
   d6d94:	b289      	uxth	r1, r1
   d6d96:	f8cd 8000 	str.w	r8, [sp]
   d6d9a:	480f      	ldr	r0, [pc, #60]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6d9c:	f007 feb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d6da0:	f104 0111 	add.w	r1, r4, #17
   d6da4:	9700      	str	r7, [sp, #0]
   d6da6:	463b      	mov	r3, r7
   d6da8:	463a      	mov	r2, r7
   d6daa:	b289      	uxth	r1, r1
   d6dac:	480a      	ldr	r0, [pc, #40]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6dae:	f007 fea7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6db2:	f104 0112 	add.w	r1, r4, #18
   d6db6:	462b      	mov	r3, r5
   d6db8:	4632      	mov	r2, r6
   d6dba:	b289      	uxth	r1, r1
   d6dbc:	f8cd 8000 	str.w	r8, [sp]
   d6dc0:	4805      	ldr	r0, [pc, #20]	; (d6dd8 <_Z4snumiiiii+0x99c>)
   d6dc2:	f007 fe9d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d6dc6:	f104 0113 	add.w	r1, r4, #19
   d6dca:	f8cd 8000 	str.w	r8, [sp]
   d6dce:	462b      	mov	r3, r5
   d6dd0:	4632      	mov	r2, r6
   d6dd2:	e599      	b.n	d6908 <_Z4snumiiiii+0x4cc>
   d6dd4:	80000001 	.word	0x80000001
   d6dd8:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
    {
        if((pix/8)%2 == 1)
   d6ddc:	4b9c      	ldr	r3, [pc, #624]	; (d7050 <_Z4snumiiiii+0xc14>)
   d6dde:	2608      	movs	r6, #8
   d6de0:	fb94 f6f6 	sdiv	r6, r4, r6
   d6de4:	4033      	ands	r3, r6
   d6de6:	2b00      	cmp	r3, #0
   d6de8:	bfbe      	ittt	lt
   d6dea:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6dee:	f063 0301 	ornlt	r3, r3, #1
   d6df2:	3301      	addlt	r3, #1
   d6df4:	2b01      	cmp	r3, #1
   d6df6:	f040 8094 	bne.w	d6f22 <_Z4snumiiiii+0xae6>
        {
            strip.setPixelColor(pix,R,G,B);
   d6dfa:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d6dfe:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d6e02:	4894      	ldr	r0, [pc, #592]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e04:	f8cd b000 	str.w	fp, [sp]
   d6e08:	b2a7      	uxth	r7, r4
   d6e0a:	fa5f fa85 	uxtb.w	sl, r5
   d6e0e:	4653      	mov	r3, sl
   d6e10:	464a      	mov	r2, r9
   d6e12:	4639      	mov	r1, r7
   d6e14:	f007 fe74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6e18:	1e79      	subs	r1, r7, #1
   d6e1a:	4653      	mov	r3, sl
   d6e1c:	464a      	mov	r2, r9
   d6e1e:	b289      	uxth	r1, r1
   d6e20:	488c      	ldr	r0, [pc, #560]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e22:	f8cd b000 	str.w	fp, [sp]
   d6e26:	f007 fe6b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6e2a:	1eb9      	subs	r1, r7, #2
   d6e2c:	4653      	mov	r3, sl
   d6e2e:	464a      	mov	r2, r9
   d6e30:	b289      	uxth	r1, r1
   d6e32:	4888      	ldr	r0, [pc, #544]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e34:	f8cd b000 	str.w	fp, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d6e38:	f04f 0800 	mov.w	r8, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d6e3c:	f007 fe60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6e40:	1ef9      	subs	r1, r7, #3
   d6e42:	4643      	mov	r3, r8
   d6e44:	4642      	mov	r2, r8
   d6e46:	b289      	uxth	r1, r1
   d6e48:	4882      	ldr	r0, [pc, #520]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e4a:	f8cd 8000 	str.w	r8, [sp]
   d6e4e:	f007 fe57 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d6e52:	1f39      	subs	r1, r7, #4
   d6e54:	4643      	mov	r3, r8
   d6e56:	4642      	mov	r2, r8
   d6e58:	b289      	uxth	r1, r1
   d6e5a:	487e      	ldr	r0, [pc, #504]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e5c:	f8cd 8000 	str.w	r8, [sp]
   d6e60:	f007 fe4e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6e64:	1c79      	adds	r1, r7, #1
   d6e66:	4643      	mov	r3, r8
   d6e68:	4642      	mov	r2, r8
   d6e6a:	b289      	uxth	r1, r1
   d6e6c:	4879      	ldr	r0, [pc, #484]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e6e:	f8cd 8000 	str.w	r8, [sp]
   d6e72:	f007 fe45 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6e76:	1cb9      	adds	r1, r7, #2
   d6e78:	4643      	mov	r3, r8
   d6e7a:	4642      	mov	r2, r8
   d6e7c:	b289      	uxth	r1, r1
   d6e7e:	4875      	ldr	r0, [pc, #468]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e80:	f8cd 8000 	str.w	r8, [sp]
   d6e84:	f007 fe3c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6e88:	1cf9      	adds	r1, r7, #3
   d6e8a:	4653      	mov	r3, sl
   d6e8c:	464a      	mov	r2, r9
   d6e8e:	b289      	uxth	r1, r1
   d6e90:	4870      	ldr	r0, [pc, #448]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6e92:	f8cd b000 	str.w	fp, [sp]
   d6e96:	f007 fe33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6e9a:	1d39      	adds	r1, r7, #4
   d6e9c:	4643      	mov	r3, r8
   d6e9e:	4642      	mov	r2, r8
   d6ea0:	b289      	uxth	r1, r1
   d6ea2:	486c      	ldr	r0, [pc, #432]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6ea4:	f8cd 8000 	str.w	r8, [sp]
   d6ea8:	f007 fe2a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d6eac:	1d79      	adds	r1, r7, #5
   d6eae:	4643      	mov	r3, r8
   d6eb0:	4642      	mov	r2, r8
   d6eb2:	b289      	uxth	r1, r1
   d6eb4:	4867      	ldr	r0, [pc, #412]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6eb6:	f8cd 8000 	str.w	r8, [sp]
   d6eba:	f007 fe21 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6ebe:	f107 0110 	add.w	r1, r7, #16
   d6ec2:	4653      	mov	r3, sl
   d6ec4:	464a      	mov	r2, r9
   d6ec6:	b289      	uxth	r1, r1
   d6ec8:	4862      	ldr	r0, [pc, #392]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6eca:	f8cd b000 	str.w	fp, [sp]
   d6ece:	f007 fe17 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6ed2:	f107 010f 	add.w	r1, r7, #15
   d6ed6:	4653      	mov	r3, sl
   d6ed8:	464a      	mov	r2, r9
   d6eda:	b289      	uxth	r1, r1
   d6edc:	485d      	ldr	r0, [pc, #372]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6ede:	f8cd b000 	str.w	fp, [sp]
   d6ee2:	f007 fe0d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6ee6:	f107 010e 	add.w	r1, r7, #14
   d6eea:	4653      	mov	r3, sl
   d6eec:	464a      	mov	r2, r9
   d6eee:	b289      	uxth	r1, r1
   d6ef0:	4858      	ldr	r0, [pc, #352]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6ef2:	f8cd b000 	str.w	fp, [sp]
   d6ef6:	f007 fe03 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6efa:	f107 010d 	add.w	r1, r7, #13
   d6efe:	4653      	mov	r3, sl
   d6f00:	464a      	mov	r2, r9
   d6f02:	b289      	uxth	r1, r1
   d6f04:	4853      	ldr	r0, [pc, #332]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f06:	f8cd b000 	str.w	fp, [sp]
   d6f0a:	f007 fdf9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6f0e:	f107 010c 	add.w	r1, r7, #12
   d6f12:	f8cd b000 	str.w	fp, [sp]
   d6f16:	4653      	mov	r3, sl
   d6f18:	464a      	mov	r2, r9
   d6f1a:	b289      	uxth	r1, r1
   d6f1c:	484d      	ldr	r0, [pc, #308]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f1e:	f007 fdef 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6f22:	f016 0601 	ands.w	r6, r6, #1
   d6f26:	f040 8623 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6f2a:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d6f2e:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6f32:	f8cd 8000 	str.w	r8, [sp]
   d6f36:	b2a4      	uxth	r4, r4
   d6f38:	b2ed      	uxtb	r5, r5
   d6f3a:	462b      	mov	r3, r5
   d6f3c:	463a      	mov	r2, r7
   d6f3e:	4621      	mov	r1, r4
   d6f40:	4844      	ldr	r0, [pc, #272]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f42:	f007 fddd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6f46:	1c61      	adds	r1, r4, #1
   d6f48:	462b      	mov	r3, r5
   d6f4a:	463a      	mov	r2, r7
   d6f4c:	f8cd 8000 	str.w	r8, [sp]
   d6f50:	b289      	uxth	r1, r1
   d6f52:	4840      	ldr	r0, [pc, #256]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f54:	f007 fdd4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6f58:	1ca1      	adds	r1, r4, #2
   d6f5a:	462b      	mov	r3, r5
   d6f5c:	463a      	mov	r2, r7
   d6f5e:	f8cd 8000 	str.w	r8, [sp]
   d6f62:	b289      	uxth	r1, r1
   d6f64:	483b      	ldr	r0, [pc, #236]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f66:	f007 fdcb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6f6a:	1ce1      	adds	r1, r4, #3
   d6f6c:	4633      	mov	r3, r6
   d6f6e:	4632      	mov	r2, r6
   d6f70:	9600      	str	r6, [sp, #0]
   d6f72:	b289      	uxth	r1, r1
   d6f74:	4837      	ldr	r0, [pc, #220]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f76:	f007 fdc3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6f7a:	1d21      	adds	r1, r4, #4
   d6f7c:	4633      	mov	r3, r6
   d6f7e:	4632      	mov	r2, r6
   d6f80:	9600      	str	r6, [sp, #0]
   d6f82:	b289      	uxth	r1, r1
   d6f84:	4833      	ldr	r0, [pc, #204]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f86:	f007 fdbb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d6f8a:	f104 010b 	add.w	r1, r4, #11
   d6f8e:	4633      	mov	r3, r6
   d6f90:	4632      	mov	r2, r6
   d6f92:	9600      	str	r6, [sp, #0]
   d6f94:	b289      	uxth	r1, r1
   d6f96:	482f      	ldr	r0, [pc, #188]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6f98:	f007 fdb2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6f9c:	f104 010c 	add.w	r1, r4, #12
   d6fa0:	4633      	mov	r3, r6
   d6fa2:	4632      	mov	r2, r6
   d6fa4:	9600      	str	r6, [sp, #0]
   d6fa6:	b289      	uxth	r1, r1
   d6fa8:	482a      	ldr	r0, [pc, #168]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6faa:	f007 fda9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6fae:	f104 010d 	add.w	r1, r4, #13
   d6fb2:	462b      	mov	r3, r5
   d6fb4:	463a      	mov	r2, r7
   d6fb6:	f8cd 8000 	str.w	r8, [sp]
   d6fba:	b289      	uxth	r1, r1
   d6fbc:	4825      	ldr	r0, [pc, #148]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6fbe:	f007 fd9f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6fc2:	f104 010e 	add.w	r1, r4, #14
   d6fc6:	4633      	mov	r3, r6
   d6fc8:	4632      	mov	r2, r6
   d6fca:	9600      	str	r6, [sp, #0]
   d6fcc:	b289      	uxth	r1, r1
   d6fce:	4821      	ldr	r0, [pc, #132]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6fd0:	f007 fd96 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6fd4:	f104 010f 	add.w	r1, r4, #15
   d6fd8:	4633      	mov	r3, r6
   d6fda:	4632      	mov	r2, r6
   d6fdc:	9600      	str	r6, [sp, #0]
   d6fde:	b289      	uxth	r1, r1
   d6fe0:	481c      	ldr	r0, [pc, #112]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6fe2:	f007 fd8d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6fe6:	f104 0110 	add.w	r1, r4, #16
   d6fea:	462b      	mov	r3, r5
   d6fec:	463a      	mov	r2, r7
   d6fee:	f8cd 8000 	str.w	r8, [sp]
   d6ff2:	b289      	uxth	r1, r1
   d6ff4:	4817      	ldr	r0, [pc, #92]	; (d7054 <_Z4snumiiiii+0xc18>)
   d6ff6:	f007 fd83 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6ffa:	f104 0111 	add.w	r1, r4, #17
   d6ffe:	462b      	mov	r3, r5
   d7000:	463a      	mov	r2, r7
   d7002:	f8cd 8000 	str.w	r8, [sp]
   d7006:	b289      	uxth	r1, r1
   d7008:	4812      	ldr	r0, [pc, #72]	; (d7054 <_Z4snumiiiii+0xc18>)
   d700a:	f007 fd79 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d700e:	f104 0112 	add.w	r1, r4, #18
   d7012:	462b      	mov	r3, r5
   d7014:	463a      	mov	r2, r7
   d7016:	f8cd 8000 	str.w	r8, [sp]
   d701a:	b289      	uxth	r1, r1
   d701c:	480d      	ldr	r0, [pc, #52]	; (d7054 <_Z4snumiiiii+0xc18>)
   d701e:	f007 fd6f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d7022:	f104 0113 	add.w	r1, r4, #19
   d7026:	462b      	mov	r3, r5
   d7028:	463a      	mov	r2, r7
   d702a:	f8cd 8000 	str.w	r8, [sp]
   d702e:	b289      	uxth	r1, r1
   d7030:	4808      	ldr	r0, [pc, #32]	; (d7054 <_Z4snumiiiii+0xc18>)
   d7032:	f007 fd65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7036:	f104 0114 	add.w	r1, r4, #20
   d703a:	f8cd 8000 	str.w	r8, [sp]
   d703e:	462b      	mov	r3, r5
   d7040:	463a      	mov	r2, r7
   d7042:	b289      	uxth	r1, r1
   d7044:	4803      	ldr	r0, [pc, #12]	; (d7054 <_Z4snumiiiii+0xc18>)
   d7046:	f007 fd5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d704a:	f000 bd91 	b.w	d7b70 <_Z4snumiiiii+0x1734>
   d704e:	bf00      	nop
   d7050:	80000001 	.word	0x80000001
   d7054:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 6)
   d7058:	2806      	cmp	r0, #6
   d705a:	f040 811d 	bne.w	d7298 <_Z4snumiiiii+0xe5c>
    {
        if((pix/8)%2 == 1)
   d705e:	4b8c      	ldr	r3, [pc, #560]	; (d7290 <_Z4snumiiiii+0xe54>)
   d7060:	2708      	movs	r7, #8
   d7062:	fb94 f7f7 	sdiv	r7, r4, r7
   d7066:	403b      	ands	r3, r7
   d7068:	2b00      	cmp	r3, #0
   d706a:	bfbe      	ittt	lt
   d706c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7070:	f063 0301 	ornlt	r3, r3, #1
   d7074:	3301      	addlt	r3, #1
   d7076:	2b01      	cmp	r3, #1
   d7078:	f040 8094 	bne.w	d71a4 <_Z4snumiiiii+0xd68>
        {
            strip.setPixelColor(pix,R,G,B);
   d707c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7080:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7084:	4883      	ldr	r0, [pc, #524]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7086:	f8cd a000 	str.w	sl, [sp]
   d708a:	b2a6      	uxth	r6, r4
   d708c:	fa5f f985 	uxtb.w	r9, r5
   d7090:	464b      	mov	r3, r9
   d7092:	4642      	mov	r2, r8
   d7094:	4631      	mov	r1, r6
   d7096:	f007 fd33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d709a:	1e71      	subs	r1, r6, #1
   d709c:	464b      	mov	r3, r9
   d709e:	4642      	mov	r2, r8
   d70a0:	b289      	uxth	r1, r1
   d70a2:	487c      	ldr	r0, [pc, #496]	; (d7294 <_Z4snumiiiii+0xe58>)
   d70a4:	f8cd a000 	str.w	sl, [sp]
   d70a8:	f007 fd2a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d70ac:	1eb1      	subs	r1, r6, #2
   d70ae:	464b      	mov	r3, r9
   d70b0:	4642      	mov	r2, r8
   d70b2:	b289      	uxth	r1, r1
   d70b4:	4877      	ldr	r0, [pc, #476]	; (d7294 <_Z4snumiiiii+0xe58>)
   d70b6:	f8cd a000 	str.w	sl, [sp]
   d70ba:	f007 fd21 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d70be:	1ef1      	subs	r1, r6, #3
   d70c0:	464b      	mov	r3, r9
   d70c2:	4642      	mov	r2, r8
   d70c4:	b289      	uxth	r1, r1
   d70c6:	4873      	ldr	r0, [pc, #460]	; (d7294 <_Z4snumiiiii+0xe58>)
   d70c8:	f8cd a000 	str.w	sl, [sp]
   d70cc:	f007 fd18 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d70d0:	1f31      	subs	r1, r6, #4
   d70d2:	464b      	mov	r3, r9
   d70d4:	4642      	mov	r2, r8
   d70d6:	b289      	uxth	r1, r1
   d70d8:	486e      	ldr	r0, [pc, #440]	; (d7294 <_Z4snumiiiii+0xe58>)
   d70da:	f8cd a000 	str.w	sl, [sp]
   d70de:	f007 fd0f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d70e2:	1c71      	adds	r1, r6, #1
   d70e4:	464b      	mov	r3, r9
   d70e6:	4642      	mov	r2, r8
   d70e8:	b289      	uxth	r1, r1
   d70ea:	486a      	ldr	r0, [pc, #424]	; (d7294 <_Z4snumiiiii+0xe58>)
   d70ec:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d70f0:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d70f4:	f007 fd04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d70f8:	1cb1      	adds	r1, r6, #2
   d70fa:	465b      	mov	r3, fp
   d70fc:	465a      	mov	r2, fp
   d70fe:	b289      	uxth	r1, r1
   d7100:	4864      	ldr	r0, [pc, #400]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7102:	f8cd b000 	str.w	fp, [sp]
   d7106:	f007 fcfb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d710a:	1cf1      	adds	r1, r6, #3
   d710c:	464b      	mov	r3, r9
   d710e:	4642      	mov	r2, r8
   d7110:	b289      	uxth	r1, r1
   d7112:	4860      	ldr	r0, [pc, #384]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7114:	f8cd a000 	str.w	sl, [sp]
   d7118:	f007 fcf2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d711c:	1d31      	adds	r1, r6, #4
   d711e:	465b      	mov	r3, fp
   d7120:	465a      	mov	r2, fp
   d7122:	b289      	uxth	r1, r1
   d7124:	485b      	ldr	r0, [pc, #364]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7126:	f8cd b000 	str.w	fp, [sp]
   d712a:	f007 fce9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d712e:	1d71      	adds	r1, r6, #5
   d7130:	464b      	mov	r3, r9
   d7132:	4642      	mov	r2, r8
   d7134:	b289      	uxth	r1, r1
   d7136:	4857      	ldr	r0, [pc, #348]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7138:	f8cd a000 	str.w	sl, [sp]
   d713c:	f007 fce0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7140:	f106 0110 	add.w	r1, r6, #16
   d7144:	464b      	mov	r3, r9
   d7146:	4642      	mov	r2, r8
   d7148:	b289      	uxth	r1, r1
   d714a:	4852      	ldr	r0, [pc, #328]	; (d7294 <_Z4snumiiiii+0xe58>)
   d714c:	f8cd a000 	str.w	sl, [sp]
   d7150:	f007 fcd6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d7154:	f106 010f 	add.w	r1, r6, #15
   d7158:	465b      	mov	r3, fp
   d715a:	465a      	mov	r2, fp
   d715c:	b289      	uxth	r1, r1
   d715e:	484d      	ldr	r0, [pc, #308]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7160:	f8cd b000 	str.w	fp, [sp]
   d7164:	f007 fccc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7168:	f106 010e 	add.w	r1, r6, #14
   d716c:	464b      	mov	r3, r9
   d716e:	4642      	mov	r2, r8
   d7170:	b289      	uxth	r1, r1
   d7172:	4848      	ldr	r0, [pc, #288]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7174:	f8cd a000 	str.w	sl, [sp]
   d7178:	f007 fcc2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d717c:	f106 010d 	add.w	r1, r6, #13
   d7180:	464b      	mov	r3, r9
   d7182:	4642      	mov	r2, r8
   d7184:	b289      	uxth	r1, r1
   d7186:	4843      	ldr	r0, [pc, #268]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7188:	f8cd a000 	str.w	sl, [sp]
   d718c:	f007 fcb8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7190:	f106 010c 	add.w	r1, r6, #12
   d7194:	f8cd a000 	str.w	sl, [sp]
   d7198:	464b      	mov	r3, r9
   d719a:	4642      	mov	r2, r8
   d719c:	b289      	uxth	r1, r1
   d719e:	483d      	ldr	r0, [pc, #244]	; (d7294 <_Z4snumiiiii+0xe58>)
   d71a0:	f007 fcae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d71a4:	f017 0701 	ands.w	r7, r7, #1
   d71a8:	f040 84e2 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d71ac:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d71b0:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d71b4:	4837      	ldr	r0, [pc, #220]	; (d7294 <_Z4snumiiiii+0xe58>)
   d71b6:	f8cd 8000 	str.w	r8, [sp]
   d71ba:	b2a4      	uxth	r4, r4
   d71bc:	b2ed      	uxtb	r5, r5
   d71be:	462b      	mov	r3, r5
   d71c0:	4632      	mov	r2, r6
   d71c2:	4621      	mov	r1, r4
   d71c4:	f007 fc9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d71c8:	1c61      	adds	r1, r4, #1
   d71ca:	462b      	mov	r3, r5
   d71cc:	4632      	mov	r2, r6
   d71ce:	b289      	uxth	r1, r1
   d71d0:	4830      	ldr	r0, [pc, #192]	; (d7294 <_Z4snumiiiii+0xe58>)
   d71d2:	f8cd 8000 	str.w	r8, [sp]
   d71d6:	f007 fc93 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d71da:	1ca1      	adds	r1, r4, #2
   d71dc:	462b      	mov	r3, r5
   d71de:	4632      	mov	r2, r6
   d71e0:	b289      	uxth	r1, r1
   d71e2:	482c      	ldr	r0, [pc, #176]	; (d7294 <_Z4snumiiiii+0xe58>)
   d71e4:	f8cd 8000 	str.w	r8, [sp]
   d71e8:	f007 fc8a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d71ec:	1ce1      	adds	r1, r4, #3
   d71ee:	462b      	mov	r3, r5
   d71f0:	4632      	mov	r2, r6
   d71f2:	b289      	uxth	r1, r1
   d71f4:	4827      	ldr	r0, [pc, #156]	; (d7294 <_Z4snumiiiii+0xe58>)
   d71f6:	f8cd 8000 	str.w	r8, [sp]
   d71fa:	f007 fc81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d71fe:	1d21      	adds	r1, r4, #4
   d7200:	462b      	mov	r3, r5
   d7202:	4632      	mov	r2, r6
   d7204:	b289      	uxth	r1, r1
   d7206:	4823      	ldr	r0, [pc, #140]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7208:	f8cd 8000 	str.w	r8, [sp]
   d720c:	f007 fc78 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7210:	f104 010b 	add.w	r1, r4, #11
   d7214:	462b      	mov	r3, r5
   d7216:	4632      	mov	r2, r6
   d7218:	b289      	uxth	r1, r1
   d721a:	481e      	ldr	r0, [pc, #120]	; (d7294 <_Z4snumiiiii+0xe58>)
   d721c:	f8cd 8000 	str.w	r8, [sp]
   d7220:	f007 fc6e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7224:	f104 010c 	add.w	r1, r4, #12
   d7228:	463b      	mov	r3, r7
   d722a:	463a      	mov	r2, r7
   d722c:	b289      	uxth	r1, r1
   d722e:	4819      	ldr	r0, [pc, #100]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7230:	9700      	str	r7, [sp, #0]
   d7232:	f007 fc65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7236:	f104 010d 	add.w	r1, r4, #13
   d723a:	462b      	mov	r3, r5
   d723c:	4632      	mov	r2, r6
   d723e:	b289      	uxth	r1, r1
   d7240:	4814      	ldr	r0, [pc, #80]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7242:	f8cd 8000 	str.w	r8, [sp]
   d7246:	f007 fc5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d724a:	f104 010e 	add.w	r1, r4, #14
   d724e:	463b      	mov	r3, r7
   d7250:	463a      	mov	r2, r7
   d7252:	b289      	uxth	r1, r1
   d7254:	480f      	ldr	r0, [pc, #60]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7256:	9700      	str	r7, [sp, #0]
   d7258:	f007 fc52 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d725c:	f104 010f 	add.w	r1, r4, #15
   d7260:	462b      	mov	r3, r5
   d7262:	4632      	mov	r2, r6
   d7264:	b289      	uxth	r1, r1
   d7266:	480b      	ldr	r0, [pc, #44]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7268:	f8cd 8000 	str.w	r8, [sp]
   d726c:	f007 fc48 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7270:	f104 0110 	add.w	r1, r4, #16
   d7274:	462b      	mov	r3, r5
   d7276:	4632      	mov	r2, r6
   d7278:	b289      	uxth	r1, r1
   d727a:	f8cd 8000 	str.w	r8, [sp]
   d727e:	4805      	ldr	r0, [pc, #20]	; (d7294 <_Z4snumiiiii+0xe58>)
   d7280:	f007 fc3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d7284:	f104 0111 	add.w	r1, r4, #17
   d7288:	9700      	str	r7, [sp, #0]
   d728a:	463b      	mov	r3, r7
   d728c:	463a      	mov	r2, r7
   d728e:	e124      	b.n	d74da <_Z4snumiiiii+0x109e>
   d7290:	80000001 	.word	0x80000001
   d7294:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
   d7298:	2807      	cmp	r0, #7
   d729a:	f000 8147 	beq.w	d752c <_Z4snumiiiii+0x10f0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
   d729e:	2808      	cmp	r0, #8
   d72a0:	f000 8236 	beq.w	d7710 <_Z4snumiiiii+0x12d4>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 9)
   d72a4:	2809      	cmp	r0, #9
   d72a6:	f040 836f 	bne.w	d7988 <_Z4snumiiiii+0x154c>
    {
        if((pix/8)%2 == 1)
   d72aa:	4b9e      	ldr	r3, [pc, #632]	; (d7524 <_Z4snumiiiii+0x10e8>)
   d72ac:	2708      	movs	r7, #8
   d72ae:	fb94 f7f7 	sdiv	r7, r4, r7
   d72b2:	403b      	ands	r3, r7
   d72b4:	2b00      	cmp	r3, #0
   d72b6:	bfbe      	ittt	lt
   d72b8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d72bc:	f063 0301 	ornlt	r3, r3, #1
   d72c0:	3301      	addlt	r3, #1
   d72c2:	2b01      	cmp	r3, #1
   d72c4:	f040 8094 	bne.w	d73f0 <_Z4snumiiiii+0xfb4>
        {
            strip.setPixelColor(pix,R,G,B);
   d72c8:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d72cc:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d72d0:	4895      	ldr	r0, [pc, #596]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d72d2:	f8cd a000 	str.w	sl, [sp]
   d72d6:	b2a6      	uxth	r6, r4
   d72d8:	fa5f f985 	uxtb.w	r9, r5
   d72dc:	464b      	mov	r3, r9
   d72de:	4642      	mov	r2, r8
   d72e0:	4631      	mov	r1, r6
   d72e2:	f007 fc0d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d72e6:	1e71      	subs	r1, r6, #1
   d72e8:	464b      	mov	r3, r9
   d72ea:	4642      	mov	r2, r8
   d72ec:	b289      	uxth	r1, r1
   d72ee:	488e      	ldr	r0, [pc, #568]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d72f0:	f8cd a000 	str.w	sl, [sp]
   d72f4:	f007 fc04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d72f8:	1eb1      	subs	r1, r6, #2
   d72fa:	464b      	mov	r3, r9
   d72fc:	4642      	mov	r2, r8
   d72fe:	b289      	uxth	r1, r1
   d7300:	4889      	ldr	r0, [pc, #548]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7302:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d7306:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d730a:	f007 fbf9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d730e:	1ef1      	subs	r1, r6, #3
   d7310:	465b      	mov	r3, fp
   d7312:	465a      	mov	r2, fp
   d7314:	b289      	uxth	r1, r1
   d7316:	4884      	ldr	r0, [pc, #528]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7318:	f8cd b000 	str.w	fp, [sp]
   d731c:	f007 fbf0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7320:	1f31      	subs	r1, r6, #4
   d7322:	464b      	mov	r3, r9
   d7324:	4642      	mov	r2, r8
   d7326:	b289      	uxth	r1, r1
   d7328:	487f      	ldr	r0, [pc, #508]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d732a:	f8cd a000 	str.w	sl, [sp]
   d732e:	f007 fbe7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7332:	1c71      	adds	r1, r6, #1
   d7334:	464b      	mov	r3, r9
   d7336:	4642      	mov	r2, r8
   d7338:	b289      	uxth	r1, r1
   d733a:	487b      	ldr	r0, [pc, #492]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d733c:	f8cd a000 	str.w	sl, [sp]
   d7340:	f007 fbde 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7344:	1cb1      	adds	r1, r6, #2
   d7346:	465b      	mov	r3, fp
   d7348:	465a      	mov	r2, fp
   d734a:	b289      	uxth	r1, r1
   d734c:	4876      	ldr	r0, [pc, #472]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d734e:	f8cd b000 	str.w	fp, [sp]
   d7352:	f007 fbd5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7356:	1cf1      	adds	r1, r6, #3
   d7358:	464b      	mov	r3, r9
   d735a:	4642      	mov	r2, r8
   d735c:	b289      	uxth	r1, r1
   d735e:	4872      	ldr	r0, [pc, #456]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7360:	f8cd a000 	str.w	sl, [sp]
   d7364:	f007 fbcc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7368:	1d31      	adds	r1, r6, #4
   d736a:	465b      	mov	r3, fp
   d736c:	465a      	mov	r2, fp
   d736e:	b289      	uxth	r1, r1
   d7370:	486d      	ldr	r0, [pc, #436]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7372:	f8cd b000 	str.w	fp, [sp]
   d7376:	f007 fbc3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d737a:	1d71      	adds	r1, r6, #5
   d737c:	464b      	mov	r3, r9
   d737e:	4642      	mov	r2, r8
   d7380:	b289      	uxth	r1, r1
   d7382:	4869      	ldr	r0, [pc, #420]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7384:	f8cd a000 	str.w	sl, [sp]
   d7388:	f007 fbba 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d738c:	f106 0110 	add.w	r1, r6, #16
   d7390:	464b      	mov	r3, r9
   d7392:	4642      	mov	r2, r8
   d7394:	b289      	uxth	r1, r1
   d7396:	4864      	ldr	r0, [pc, #400]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7398:	f8cd a000 	str.w	sl, [sp]
   d739c:	f007 fbb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d73a0:	f106 010f 	add.w	r1, r6, #15
   d73a4:	464b      	mov	r3, r9
   d73a6:	4642      	mov	r2, r8
   d73a8:	b289      	uxth	r1, r1
   d73aa:	485f      	ldr	r0, [pc, #380]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d73ac:	f8cd a000 	str.w	sl, [sp]
   d73b0:	f007 fba6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d73b4:	f106 010e 	add.w	r1, r6, #14
   d73b8:	464b      	mov	r3, r9
   d73ba:	4642      	mov	r2, r8
   d73bc:	b289      	uxth	r1, r1
   d73be:	485a      	ldr	r0, [pc, #360]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d73c0:	f8cd a000 	str.w	sl, [sp]
   d73c4:	f007 fb9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d73c8:	f106 010d 	add.w	r1, r6, #13
   d73cc:	464b      	mov	r3, r9
   d73ce:	4642      	mov	r2, r8
   d73d0:	b289      	uxth	r1, r1
   d73d2:	4855      	ldr	r0, [pc, #340]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d73d4:	f8cd a000 	str.w	sl, [sp]
   d73d8:	f007 fb92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d73dc:	f106 010c 	add.w	r1, r6, #12
   d73e0:	f8cd a000 	str.w	sl, [sp]
   d73e4:	464b      	mov	r3, r9
   d73e6:	4642      	mov	r2, r8
   d73e8:	b289      	uxth	r1, r1
   d73ea:	484f      	ldr	r0, [pc, #316]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d73ec:	f007 fb88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d73f0:	f017 0701 	ands.w	r7, r7, #1
   d73f4:	f040 83bc 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d73f8:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d73fc:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7400:	4849      	ldr	r0, [pc, #292]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7402:	f8cd 8000 	str.w	r8, [sp]
   d7406:	b2a4      	uxth	r4, r4
   d7408:	b2ed      	uxtb	r5, r5
   d740a:	462b      	mov	r3, r5
   d740c:	4632      	mov	r2, r6
   d740e:	4621      	mov	r1, r4
   d7410:	f007 fb76 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7414:	1c61      	adds	r1, r4, #1
   d7416:	462b      	mov	r3, r5
   d7418:	4632      	mov	r2, r6
   d741a:	b289      	uxth	r1, r1
   d741c:	4842      	ldr	r0, [pc, #264]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d741e:	f8cd 8000 	str.w	r8, [sp]
   d7422:	f007 fb6d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7426:	1ca1      	adds	r1, r4, #2
   d7428:	462b      	mov	r3, r5
   d742a:	4632      	mov	r2, r6
   d742c:	b289      	uxth	r1, r1
   d742e:	483e      	ldr	r0, [pc, #248]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7430:	f8cd 8000 	str.w	r8, [sp]
   d7434:	f007 fb64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7438:	1ce1      	adds	r1, r4, #3
   d743a:	463b      	mov	r3, r7
   d743c:	463a      	mov	r2, r7
   d743e:	b289      	uxth	r1, r1
   d7440:	4839      	ldr	r0, [pc, #228]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7442:	9700      	str	r7, [sp, #0]
   d7444:	f007 fb5c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7448:	1d21      	adds	r1, r4, #4
   d744a:	462b      	mov	r3, r5
   d744c:	4632      	mov	r2, r6
   d744e:	b289      	uxth	r1, r1
   d7450:	4835      	ldr	r0, [pc, #212]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7452:	f8cd 8000 	str.w	r8, [sp]
   d7456:	f007 fb53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d745a:	f104 010b 	add.w	r1, r4, #11
   d745e:	462b      	mov	r3, r5
   d7460:	4632      	mov	r2, r6
   d7462:	b289      	uxth	r1, r1
   d7464:	4830      	ldr	r0, [pc, #192]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7466:	f8cd 8000 	str.w	r8, [sp]
   d746a:	f007 fb49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d746e:	f104 010c 	add.w	r1, r4, #12
   d7472:	463b      	mov	r3, r7
   d7474:	463a      	mov	r2, r7
   d7476:	b289      	uxth	r1, r1
   d7478:	9700      	str	r7, [sp, #0]
   d747a:	482b      	ldr	r0, [pc, #172]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d747c:	f007 fb40 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7480:	f104 010d 	add.w	r1, r4, #13
   d7484:	f8cd 8000 	str.w	r8, [sp]
   d7488:	462b      	mov	r3, r5
   d748a:	4632      	mov	r2, r6
            strip.setPixelColor(pix+2,R,G,B);
            strip.setPixelColor(pix+3,R,G,B);
            strip.setPixelColor(pix+4,R,G,B);
            strip.setPixelColor(pix+11,R,G,B);
            strip.setPixelColor(pix+12,0,0,0);
            strip.setPixelColor(pix+13,0,0,0);
   d748c:	b289      	uxth	r1, r1
   d748e:	4826      	ldr	r0, [pc, #152]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7490:	f007 fb36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d7494:	f104 010e 	add.w	r1, r4, #14
   d7498:	463b      	mov	r3, r7
   d749a:	463a      	mov	r2, r7
   d749c:	b289      	uxth	r1, r1
   d749e:	4822      	ldr	r0, [pc, #136]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d74a0:	9700      	str	r7, [sp, #0]
   d74a2:	f007 fb2d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d74a6:	f104 010f 	add.w	r1, r4, #15
   d74aa:	462b      	mov	r3, r5
   d74ac:	4632      	mov	r2, r6
   d74ae:	b289      	uxth	r1, r1
   d74b0:	481d      	ldr	r0, [pc, #116]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d74b2:	f8cd 8000 	str.w	r8, [sp]
   d74b6:	f007 fb23 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d74ba:	f104 0110 	add.w	r1, r4, #16
   d74be:	462b      	mov	r3, r5
   d74c0:	4632      	mov	r2, r6
   d74c2:	b289      	uxth	r1, r1
   d74c4:	f8cd 8000 	str.w	r8, [sp]
   d74c8:	4817      	ldr	r0, [pc, #92]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d74ca:	f007 fb19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d74ce:	f104 0111 	add.w	r1, r4, #17
   d74d2:	f8cd 8000 	str.w	r8, [sp]
   d74d6:	462b      	mov	r3, r5
   d74d8:	4632      	mov	r2, r6
   d74da:	b289      	uxth	r1, r1
   d74dc:	4812      	ldr	r0, [pc, #72]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d74de:	f007 fb0f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d74e2:	f104 0112 	add.w	r1, r4, #18
   d74e6:	462b      	mov	r3, r5
   d74e8:	4632      	mov	r2, r6
   d74ea:	b289      	uxth	r1, r1
   d74ec:	480e      	ldr	r0, [pc, #56]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d74ee:	f8cd 8000 	str.w	r8, [sp]
   d74f2:	f007 fb05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d74f6:	f104 0113 	add.w	r1, r4, #19
   d74fa:	462b      	mov	r3, r5
   d74fc:	4632      	mov	r2, r6
   d74fe:	b289      	uxth	r1, r1
   d7500:	f8cd 8000 	str.w	r8, [sp]
   d7504:	4808      	ldr	r0, [pc, #32]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7506:	f007 fafb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d750a:	f104 0114 	add.w	r1, r4, #20
   d750e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d7512:	462b      	mov	r3, r5
   d7514:	4632      	mov	r2, r6
   d7516:	4804      	ldr	r0, [pc, #16]	; (d7528 <_Z4snumiiiii+0x10ec>)
   d7518:	b289      	uxth	r1, r1
        }
    }
}                           
   d751a:	b005      	add	sp, #20
   d751c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            strip.setPixelColor(pix+15,R,G,B);
            strip.setPixelColor(pix+16,R,G,B);
            strip.setPixelColor(pix+17,R,G,B);
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
   d7520:	f007 baee 	b.w	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d7524:	80000001 	.word	0x80000001
   d7528:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
   d752c:	4b76      	ldr	r3, [pc, #472]	; (d7708 <_Z4snumiiiii+0x12cc>)
   d752e:	2608      	movs	r6, #8
   d7530:	fb94 f6f6 	sdiv	r6, r4, r6
   d7534:	4033      	ands	r3, r6
   d7536:	2b00      	cmp	r3, #0
   d7538:	bfbe      	ittt	lt
   d753a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d753e:	f063 0301 	ornlt	r3, r3, #1
   d7542:	3301      	addlt	r3, #1
   d7544:	2b01      	cmp	r3, #1
   d7546:	f040 8095 	bne.w	d7674 <_Z4snumiiiii+0x1238>
        {
            strip.setPixelColor(pix,R,G,B);
   d754a:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d754e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d7552:	486e      	ldr	r0, [pc, #440]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7554:	f8cd b000 	str.w	fp, [sp]
   d7558:	fa1f f884 	uxth.w	r8, r4
   d755c:	fa5f fa85 	uxtb.w	sl, r5
   d7560:	4653      	mov	r3, sl
   d7562:	464a      	mov	r2, r9
   d7564:	4641      	mov	r1, r8
            strip.setPixelColor(pix-1,0,0,0);
   d7566:	2700      	movs	r7, #0
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d7568:	f007 faca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d756c:	f108 31ff 	add.w	r1, r8, #4294967295
   d7570:	463b      	mov	r3, r7
   d7572:	463a      	mov	r2, r7
   d7574:	b289      	uxth	r1, r1
   d7576:	4865      	ldr	r0, [pc, #404]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7578:	9700      	str	r7, [sp, #0]
   d757a:	f007 fac1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d757e:	f1a8 0102 	sub.w	r1, r8, #2
   d7582:	463b      	mov	r3, r7
   d7584:	463a      	mov	r2, r7
   d7586:	b289      	uxth	r1, r1
   d7588:	4860      	ldr	r0, [pc, #384]	; (d770c <_Z4snumiiiii+0x12d0>)
   d758a:	9700      	str	r7, [sp, #0]
   d758c:	f007 fab8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d7590:	f1a8 0103 	sub.w	r1, r8, #3
   d7594:	463b      	mov	r3, r7
   d7596:	463a      	mov	r2, r7
   d7598:	b289      	uxth	r1, r1
   d759a:	485c      	ldr	r0, [pc, #368]	; (d770c <_Z4snumiiiii+0x12d0>)
   d759c:	9700      	str	r7, [sp, #0]
   d759e:	f007 faaf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d75a2:	f1a8 0104 	sub.w	r1, r8, #4
   d75a6:	463b      	mov	r3, r7
   d75a8:	463a      	mov	r2, r7
   d75aa:	b289      	uxth	r1, r1
   d75ac:	4857      	ldr	r0, [pc, #348]	; (d770c <_Z4snumiiiii+0x12d0>)
   d75ae:	9700      	str	r7, [sp, #0]
   d75b0:	f007 faa6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d75b4:	f108 0101 	add.w	r1, r8, #1
   d75b8:	4653      	mov	r3, sl
   d75ba:	464a      	mov	r2, r9
   d75bc:	b289      	uxth	r1, r1
   d75be:	4853      	ldr	r0, [pc, #332]	; (d770c <_Z4snumiiiii+0x12d0>)
   d75c0:	f8cd b000 	str.w	fp, [sp]
   d75c4:	f007 fa9c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d75c8:	f108 0102 	add.w	r1, r8, #2
   d75cc:	463b      	mov	r3, r7
   d75ce:	463a      	mov	r2, r7
   d75d0:	b289      	uxth	r1, r1
   d75d2:	484e      	ldr	r0, [pc, #312]	; (d770c <_Z4snumiiiii+0x12d0>)
   d75d4:	9700      	str	r7, [sp, #0]
   d75d6:	f007 fa93 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d75da:	f108 0103 	add.w	r1, r8, #3
   d75de:	463b      	mov	r3, r7
   d75e0:	463a      	mov	r2, r7
   d75e2:	b289      	uxth	r1, r1
   d75e4:	4849      	ldr	r0, [pc, #292]	; (d770c <_Z4snumiiiii+0x12d0>)
   d75e6:	9700      	str	r7, [sp, #0]
   d75e8:	f007 fa8a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d75ec:	f108 0104 	add.w	r1, r8, #4
   d75f0:	463b      	mov	r3, r7
   d75f2:	463a      	mov	r2, r7
   d75f4:	b289      	uxth	r1, r1
   d75f6:	4845      	ldr	r0, [pc, #276]	; (d770c <_Z4snumiiiii+0x12d0>)
   d75f8:	9700      	str	r7, [sp, #0]
   d75fa:	f007 fa81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d75fe:	f108 0105 	add.w	r1, r8, #5
   d7602:	463b      	mov	r3, r7
   d7604:	463a      	mov	r2, r7
   d7606:	b289      	uxth	r1, r1
   d7608:	4840      	ldr	r0, [pc, #256]	; (d770c <_Z4snumiiiii+0x12d0>)
   d760a:	9700      	str	r7, [sp, #0]
   d760c:	f007 fa78 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7610:	f108 0110 	add.w	r1, r8, #16
   d7614:	4653      	mov	r3, sl
   d7616:	464a      	mov	r2, r9
   d7618:	b289      	uxth	r1, r1
   d761a:	483c      	ldr	r0, [pc, #240]	; (d770c <_Z4snumiiiii+0x12d0>)
   d761c:	f8cd b000 	str.w	fp, [sp]
   d7620:	f007 fa6e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7624:	f108 010f 	add.w	r1, r8, #15
   d7628:	4653      	mov	r3, sl
   d762a:	464a      	mov	r2, r9
   d762c:	b289      	uxth	r1, r1
   d762e:	4837      	ldr	r0, [pc, #220]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7630:	f8cd b000 	str.w	fp, [sp]
   d7634:	f007 fa64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7638:	f108 010e 	add.w	r1, r8, #14
   d763c:	4653      	mov	r3, sl
   d763e:	464a      	mov	r2, r9
   d7640:	b289      	uxth	r1, r1
   d7642:	4832      	ldr	r0, [pc, #200]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7644:	f8cd b000 	str.w	fp, [sp]
   d7648:	f007 fa5a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d764c:	f108 010d 	add.w	r1, r8, #13
   d7650:	4653      	mov	r3, sl
   d7652:	464a      	mov	r2, r9
   d7654:	b289      	uxth	r1, r1
   d7656:	482d      	ldr	r0, [pc, #180]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7658:	f8cd b000 	str.w	fp, [sp]
   d765c:	f007 fa50 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7660:	f108 010c 	add.w	r1, r8, #12
   d7664:	f8cd b000 	str.w	fp, [sp]
   d7668:	4653      	mov	r3, sl
   d766a:	464a      	mov	r2, r9
   d766c:	b289      	uxth	r1, r1
   d766e:	4827      	ldr	r0, [pc, #156]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7670:	f007 fa46 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7674:	f016 0601 	ands.w	r6, r6, #1
   d7678:	f040 827a 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d767c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7680:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7684:	4821      	ldr	r0, [pc, #132]	; (d770c <_Z4snumiiiii+0x12d0>)
   d7686:	f8cd 8000 	str.w	r8, [sp]
   d768a:	b2a4      	uxth	r4, r4
   d768c:	b2ed      	uxtb	r5, r5
   d768e:	462b      	mov	r3, r5
   d7690:	463a      	mov	r2, r7
   d7692:	4621      	mov	r1, r4
   d7694:	f007 fa34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d7698:	1c61      	adds	r1, r4, #1
   d769a:	4633      	mov	r3, r6
   d769c:	4632      	mov	r2, r6
   d769e:	b289      	uxth	r1, r1
   d76a0:	481a      	ldr	r0, [pc, #104]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76a2:	9600      	str	r6, [sp, #0]
   d76a4:	f007 fa2c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d76a8:	1ca1      	adds	r1, r4, #2
   d76aa:	4633      	mov	r3, r6
   d76ac:	4632      	mov	r2, r6
   d76ae:	b289      	uxth	r1, r1
   d76b0:	4816      	ldr	r0, [pc, #88]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76b2:	9600      	str	r6, [sp, #0]
   d76b4:	f007 fa24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d76b8:	1ce1      	adds	r1, r4, #3
   d76ba:	4633      	mov	r3, r6
   d76bc:	4632      	mov	r2, r6
   d76be:	b289      	uxth	r1, r1
   d76c0:	4812      	ldr	r0, [pc, #72]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76c2:	9600      	str	r6, [sp, #0]
   d76c4:	f007 fa1c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d76c8:	1d21      	adds	r1, r4, #4
   d76ca:	4633      	mov	r3, r6
   d76cc:	4632      	mov	r2, r6
   d76ce:	b289      	uxth	r1, r1
   d76d0:	480e      	ldr	r0, [pc, #56]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76d2:	9600      	str	r6, [sp, #0]
   d76d4:	f007 fa14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d76d8:	f104 010b 	add.w	r1, r4, #11
   d76dc:	4633      	mov	r3, r6
   d76de:	4632      	mov	r2, r6
   d76e0:	b289      	uxth	r1, r1
   d76e2:	480a      	ldr	r0, [pc, #40]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76e4:	9600      	str	r6, [sp, #0]
   d76e6:	f007 fa0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d76ea:	f104 010c 	add.w	r1, r4, #12
   d76ee:	4633      	mov	r3, r6
   d76f0:	4632      	mov	r2, r6
   d76f2:	b289      	uxth	r1, r1
   d76f4:	9600      	str	r6, [sp, #0]
   d76f6:	4805      	ldr	r0, [pc, #20]	; (d770c <_Z4snumiiiii+0x12d0>)
   d76f8:	f007 fa02 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d76fc:	f104 010d 	add.w	r1, r4, #13
   d7700:	9600      	str	r6, [sp, #0]
   d7702:	4633      	mov	r3, r6
   d7704:	4632      	mov	r2, r6
   d7706:	e0f4      	b.n	d78f2 <_Z4snumiiiii+0x14b6>
   d7708:	80000001 	.word	0x80000001
   d770c:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
    {
        if((pix/8)%2 == 1)
   d7710:	4b9b      	ldr	r3, [pc, #620]	; (d7980 <_Z4snumiiiii+0x1544>)
   d7712:	fb94 f6f0 	sdiv	r6, r4, r0
   d7716:	4033      	ands	r3, r6
   d7718:	2b00      	cmp	r3, #0
   d771a:	bfbe      	ittt	lt
   d771c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7720:	f063 0301 	ornlt	r3, r3, #1
   d7724:	3301      	addlt	r3, #1
   d7726:	2b01      	cmp	r3, #1
   d7728:	f040 8094 	bne.w	d7854 <_Z4snumiiiii+0x1418>
        {
            strip.setPixelColor(pix,R,G,B);
   d772c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7730:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7734:	4893      	ldr	r0, [pc, #588]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7736:	f8cd a000 	str.w	sl, [sp]
   d773a:	b2a7      	uxth	r7, r4
   d773c:	fa5f f985 	uxtb.w	r9, r5
   d7740:	464b      	mov	r3, r9
   d7742:	4642      	mov	r2, r8
   d7744:	4639      	mov	r1, r7
   d7746:	f007 f9db 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d774a:	1e79      	subs	r1, r7, #1
   d774c:	464b      	mov	r3, r9
   d774e:	4642      	mov	r2, r8
   d7750:	b289      	uxth	r1, r1
   d7752:	488c      	ldr	r0, [pc, #560]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7754:	f8cd a000 	str.w	sl, [sp]
   d7758:	f007 f9d2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d775c:	1eb9      	subs	r1, r7, #2
   d775e:	464b      	mov	r3, r9
   d7760:	4642      	mov	r2, r8
   d7762:	b289      	uxth	r1, r1
   d7764:	4887      	ldr	r0, [pc, #540]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7766:	f8cd a000 	str.w	sl, [sp]
   d776a:	f007 f9c9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d776e:	1ef9      	subs	r1, r7, #3
   d7770:	464b      	mov	r3, r9
   d7772:	4642      	mov	r2, r8
   d7774:	b289      	uxth	r1, r1
   d7776:	4883      	ldr	r0, [pc, #524]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7778:	f8cd a000 	str.w	sl, [sp]
   d777c:	f007 f9c0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7780:	1f39      	subs	r1, r7, #4
   d7782:	464b      	mov	r3, r9
   d7784:	4642      	mov	r2, r8
   d7786:	b289      	uxth	r1, r1
   d7788:	487e      	ldr	r0, [pc, #504]	; (d7984 <_Z4snumiiiii+0x1548>)
   d778a:	f8cd a000 	str.w	sl, [sp]
   d778e:	f007 f9b7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7792:	1c79      	adds	r1, r7, #1
   d7794:	464b      	mov	r3, r9
   d7796:	4642      	mov	r2, r8
   d7798:	b289      	uxth	r1, r1
   d779a:	487a      	ldr	r0, [pc, #488]	; (d7984 <_Z4snumiiiii+0x1548>)
   d779c:	f8cd a000 	str.w	sl, [sp]
   d77a0:	f007 f9ae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d77a4:	f04f 0b00 	mov.w	fp, #0
   d77a8:	1cb9      	adds	r1, r7, #2
   d77aa:	465b      	mov	r3, fp
   d77ac:	465a      	mov	r2, fp
   d77ae:	b289      	uxth	r1, r1
   d77b0:	4874      	ldr	r0, [pc, #464]	; (d7984 <_Z4snumiiiii+0x1548>)
   d77b2:	f8cd b000 	str.w	fp, [sp]
   d77b6:	f007 f9a3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d77ba:	1cf9      	adds	r1, r7, #3
   d77bc:	464b      	mov	r3, r9
   d77be:	4642      	mov	r2, r8
   d77c0:	b289      	uxth	r1, r1
   d77c2:	4870      	ldr	r0, [pc, #448]	; (d7984 <_Z4snumiiiii+0x1548>)
   d77c4:	f8cd a000 	str.w	sl, [sp]
   d77c8:	f007 f99a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d77cc:	1d39      	adds	r1, r7, #4
   d77ce:	465b      	mov	r3, fp
   d77d0:	465a      	mov	r2, fp
   d77d2:	b289      	uxth	r1, r1
   d77d4:	486b      	ldr	r0, [pc, #428]	; (d7984 <_Z4snumiiiii+0x1548>)
   d77d6:	f8cd b000 	str.w	fp, [sp]
   d77da:	f007 f991 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d77de:	1d79      	adds	r1, r7, #5
   d77e0:	464b      	mov	r3, r9
   d77e2:	4642      	mov	r2, r8
   d77e4:	b289      	uxth	r1, r1
   d77e6:	4867      	ldr	r0, [pc, #412]	; (d7984 <_Z4snumiiiii+0x1548>)
   d77e8:	f8cd a000 	str.w	sl, [sp]
   d77ec:	f007 f988 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d77f0:	f107 0110 	add.w	r1, r7, #16
   d77f4:	464b      	mov	r3, r9
   d77f6:	4642      	mov	r2, r8
   d77f8:	b289      	uxth	r1, r1
   d77fa:	4862      	ldr	r0, [pc, #392]	; (d7984 <_Z4snumiiiii+0x1548>)
   d77fc:	f8cd a000 	str.w	sl, [sp]
   d7800:	f007 f97e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7804:	f107 010f 	add.w	r1, r7, #15
   d7808:	464b      	mov	r3, r9
   d780a:	4642      	mov	r2, r8
   d780c:	b289      	uxth	r1, r1
   d780e:	485d      	ldr	r0, [pc, #372]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7810:	f8cd a000 	str.w	sl, [sp]
   d7814:	f007 f974 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7818:	f107 010e 	add.w	r1, r7, #14
   d781c:	464b      	mov	r3, r9
   d781e:	4642      	mov	r2, r8
   d7820:	b289      	uxth	r1, r1
   d7822:	4858      	ldr	r0, [pc, #352]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7824:	f8cd a000 	str.w	sl, [sp]
   d7828:	f007 f96a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d782c:	f107 010d 	add.w	r1, r7, #13
   d7830:	464b      	mov	r3, r9
   d7832:	4642      	mov	r2, r8
   d7834:	b289      	uxth	r1, r1
   d7836:	4853      	ldr	r0, [pc, #332]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7838:	f8cd a000 	str.w	sl, [sp]
   d783c:	f007 f960 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7840:	f107 010c 	add.w	r1, r7, #12
   d7844:	f8cd a000 	str.w	sl, [sp]
   d7848:	464b      	mov	r3, r9
   d784a:	4642      	mov	r2, r8
   d784c:	b289      	uxth	r1, r1
   d784e:	484d      	ldr	r0, [pc, #308]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7850:	f007 f956 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7854:	f016 0601 	ands.w	r6, r6, #1
   d7858:	f040 818a 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d785c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7860:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7864:	4847      	ldr	r0, [pc, #284]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7866:	f8cd 8000 	str.w	r8, [sp]
   d786a:	b2a4      	uxth	r4, r4
   d786c:	b2ed      	uxtb	r5, r5
   d786e:	462b      	mov	r3, r5
   d7870:	463a      	mov	r2, r7
   d7872:	4621      	mov	r1, r4
   d7874:	f007 f944 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7878:	1c61      	adds	r1, r4, #1
   d787a:	462b      	mov	r3, r5
   d787c:	463a      	mov	r2, r7
   d787e:	b289      	uxth	r1, r1
   d7880:	4840      	ldr	r0, [pc, #256]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7882:	f8cd 8000 	str.w	r8, [sp]
   d7886:	f007 f93b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d788a:	1ca1      	adds	r1, r4, #2
   d788c:	462b      	mov	r3, r5
   d788e:	463a      	mov	r2, r7
   d7890:	b289      	uxth	r1, r1
   d7892:	483c      	ldr	r0, [pc, #240]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7894:	f8cd 8000 	str.w	r8, [sp]
   d7898:	f007 f932 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d789c:	1ce1      	adds	r1, r4, #3
   d789e:	462b      	mov	r3, r5
   d78a0:	463a      	mov	r2, r7
   d78a2:	b289      	uxth	r1, r1
   d78a4:	4837      	ldr	r0, [pc, #220]	; (d7984 <_Z4snumiiiii+0x1548>)
   d78a6:	f8cd 8000 	str.w	r8, [sp]
   d78aa:	f007 f929 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d78ae:	1d21      	adds	r1, r4, #4
   d78b0:	462b      	mov	r3, r5
   d78b2:	463a      	mov	r2, r7
   d78b4:	b289      	uxth	r1, r1
   d78b6:	4833      	ldr	r0, [pc, #204]	; (d7984 <_Z4snumiiiii+0x1548>)
   d78b8:	f8cd 8000 	str.w	r8, [sp]
   d78bc:	f007 f920 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d78c0:	f104 010b 	add.w	r1, r4, #11
   d78c4:	462b      	mov	r3, r5
   d78c6:	463a      	mov	r2, r7
   d78c8:	b289      	uxth	r1, r1
   d78ca:	482e      	ldr	r0, [pc, #184]	; (d7984 <_Z4snumiiiii+0x1548>)
   d78cc:	f8cd 8000 	str.w	r8, [sp]
   d78d0:	f007 f916 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d78d4:	f104 010c 	add.w	r1, r4, #12
   d78d8:	4633      	mov	r3, r6
   d78da:	4632      	mov	r2, r6
   d78dc:	b289      	uxth	r1, r1
   d78de:	9600      	str	r6, [sp, #0]
   d78e0:	4828      	ldr	r0, [pc, #160]	; (d7984 <_Z4snumiiiii+0x1548>)
   d78e2:	f007 f90d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d78e6:	f104 010d 	add.w	r1, r4, #13
   d78ea:	f8cd 8000 	str.w	r8, [sp]
   d78ee:	462b      	mov	r3, r5
   d78f0:	463a      	mov	r2, r7
   d78f2:	b289      	uxth	r1, r1
   d78f4:	4823      	ldr	r0, [pc, #140]	; (d7984 <_Z4snumiiiii+0x1548>)
   d78f6:	f007 f903 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d78fa:	f104 010e 	add.w	r1, r4, #14
   d78fe:	4633      	mov	r3, r6
   d7900:	4632      	mov	r2, r6
   d7902:	b289      	uxth	r1, r1
   d7904:	481f      	ldr	r0, [pc, #124]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7906:	9600      	str	r6, [sp, #0]
   d7908:	f007 f8fa 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d790c:	f104 010f 	add.w	r1, r4, #15
   d7910:	462b      	mov	r3, r5
   d7912:	463a      	mov	r2, r7
   d7914:	b289      	uxth	r1, r1
   d7916:	481b      	ldr	r0, [pc, #108]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7918:	f8cd 8000 	str.w	r8, [sp]
   d791c:	f007 f8f0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7920:	f104 0110 	add.w	r1, r4, #16
   d7924:	462b      	mov	r3, r5
   d7926:	463a      	mov	r2, r7
   d7928:	b289      	uxth	r1, r1
   d792a:	4816      	ldr	r0, [pc, #88]	; (d7984 <_Z4snumiiiii+0x1548>)
   d792c:	f8cd 8000 	str.w	r8, [sp]
   d7930:	f007 f8e6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d7934:	f104 0111 	add.w	r1, r4, #17
   d7938:	462b      	mov	r3, r5
   d793a:	463a      	mov	r2, r7
   d793c:	b289      	uxth	r1, r1
   d793e:	4811      	ldr	r0, [pc, #68]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7940:	f8cd 8000 	str.w	r8, [sp]
   d7944:	f007 f8dc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d7948:	f104 0112 	add.w	r1, r4, #18
   d794c:	462b      	mov	r3, r5
   d794e:	463a      	mov	r2, r7
   d7950:	b289      	uxth	r1, r1
   d7952:	480c      	ldr	r0, [pc, #48]	; (d7984 <_Z4snumiiiii+0x1548>)
   d7954:	f8cd 8000 	str.w	r8, [sp]
   d7958:	f007 f8d2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d795c:	f104 0113 	add.w	r1, r4, #19
   d7960:	462b      	mov	r3, r5
   d7962:	463a      	mov	r2, r7
   d7964:	b289      	uxth	r1, r1
   d7966:	f8cd 8000 	str.w	r8, [sp]
   d796a:	4806      	ldr	r0, [pc, #24]	; (d7984 <_Z4snumiiiii+0x1548>)
   d796c:	f007 f8c8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7970:	f104 0114 	add.w	r1, r4, #20
   d7974:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d7978:	462b      	mov	r3, r5
   d797a:	463a      	mov	r2, r7
   d797c:	e5cb      	b.n	d7516 <_Z4snumiiiii+0x10da>
   d797e:	bf00      	nop
   d7980:	80000001 	.word	0x80000001
   d7984:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 0)
   d7988:	2800      	cmp	r0, #0
   d798a:	f040 80f1 	bne.w	d7b70 <_Z4snumiiiii+0x1734>
    {
        if((pix/8)%2 == 1)
   d798e:	4b7a      	ldr	r3, [pc, #488]	; (d7b78 <_Z4snumiiiii+0x173c>)
   d7990:	2708      	movs	r7, #8
   d7992:	fb94 f7f7 	sdiv	r7, r4, r7
   d7996:	403b      	ands	r3, r7
   d7998:	2b00      	cmp	r3, #0
   d799a:	bfbe      	ittt	lt
   d799c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d79a0:	f063 0301 	ornlt	r3, r3, #1
   d79a4:	3301      	addlt	r3, #1
   d79a6:	2b01      	cmp	r3, #1
   d79a8:	f040 8094 	bne.w	d7ad4 <_Z4snumiiiii+0x1698>
        {
            strip.setPixelColor(pix,R,G,B);
   d79ac:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d79b0:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d79b4:	4871      	ldr	r0, [pc, #452]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d79b6:	f8cd a000 	str.w	sl, [sp]
   d79ba:	b2a6      	uxth	r6, r4
   d79bc:	fa5f f985 	uxtb.w	r9, r5
   d79c0:	464b      	mov	r3, r9
   d79c2:	4642      	mov	r2, r8
   d79c4:	4631      	mov	r1, r6
   d79c6:	f007 f89b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d79ca:	1e71      	subs	r1, r6, #1
   d79cc:	464b      	mov	r3, r9
   d79ce:	4642      	mov	r2, r8
   d79d0:	b289      	uxth	r1, r1
   d79d2:	486a      	ldr	r0, [pc, #424]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d79d4:	f8cd a000 	str.w	sl, [sp]
   d79d8:	f007 f892 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d79dc:	1eb1      	subs	r1, r6, #2
   d79de:	464b      	mov	r3, r9
   d79e0:	4642      	mov	r2, r8
   d79e2:	b289      	uxth	r1, r1
   d79e4:	4865      	ldr	r0, [pc, #404]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d79e6:	f8cd a000 	str.w	sl, [sp]
   d79ea:	f007 f889 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d79ee:	1ef1      	subs	r1, r6, #3
   d79f0:	464b      	mov	r3, r9
   d79f2:	4642      	mov	r2, r8
   d79f4:	b289      	uxth	r1, r1
   d79f6:	4861      	ldr	r0, [pc, #388]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d79f8:	f8cd a000 	str.w	sl, [sp]
   d79fc:	f007 f880 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7a00:	1f31      	subs	r1, r6, #4
   d7a02:	464b      	mov	r3, r9
   d7a04:	4642      	mov	r2, r8
   d7a06:	b289      	uxth	r1, r1
   d7a08:	485c      	ldr	r0, [pc, #368]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a0a:	f8cd a000 	str.w	sl, [sp]
   d7a0e:	f007 f877 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7a12:	1c71      	adds	r1, r6, #1
   d7a14:	464b      	mov	r3, r9
   d7a16:	4642      	mov	r2, r8
   d7a18:	b289      	uxth	r1, r1
   d7a1a:	4858      	ldr	r0, [pc, #352]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a1c:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d7a20:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d7a24:	f007 f86c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7a28:	1cb1      	adds	r1, r6, #2
   d7a2a:	465b      	mov	r3, fp
   d7a2c:	465a      	mov	r2, fp
   d7a2e:	b289      	uxth	r1, r1
   d7a30:	4852      	ldr	r0, [pc, #328]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a32:	f8cd b000 	str.w	fp, [sp]
   d7a36:	f007 f863 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7a3a:	1cf1      	adds	r1, r6, #3
   d7a3c:	465b      	mov	r3, fp
   d7a3e:	465a      	mov	r2, fp
   d7a40:	b289      	uxth	r1, r1
   d7a42:	484e      	ldr	r0, [pc, #312]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a44:	f8cd b000 	str.w	fp, [sp]
   d7a48:	f007 f85a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7a4c:	1d31      	adds	r1, r6, #4
   d7a4e:	465b      	mov	r3, fp
   d7a50:	465a      	mov	r2, fp
   d7a52:	b289      	uxth	r1, r1
   d7a54:	4849      	ldr	r0, [pc, #292]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a56:	f8cd b000 	str.w	fp, [sp]
   d7a5a:	f007 f851 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d7a5e:	1d71      	adds	r1, r6, #5
   d7a60:	464b      	mov	r3, r9
   d7a62:	4642      	mov	r2, r8
   d7a64:	b289      	uxth	r1, r1
   d7a66:	4845      	ldr	r0, [pc, #276]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a68:	f8cd a000 	str.w	sl, [sp]
   d7a6c:	f007 f848 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7a70:	f106 0110 	add.w	r1, r6, #16
   d7a74:	464b      	mov	r3, r9
   d7a76:	4642      	mov	r2, r8
   d7a78:	b289      	uxth	r1, r1
   d7a7a:	4840      	ldr	r0, [pc, #256]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a7c:	f8cd a000 	str.w	sl, [sp]
   d7a80:	f007 f83e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7a84:	f106 010f 	add.w	r1, r6, #15
   d7a88:	464b      	mov	r3, r9
   d7a8a:	4642      	mov	r2, r8
   d7a8c:	b289      	uxth	r1, r1
   d7a8e:	483b      	ldr	r0, [pc, #236]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7a90:	f8cd a000 	str.w	sl, [sp]
   d7a94:	f007 f834 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7a98:	f106 010e 	add.w	r1, r6, #14
   d7a9c:	464b      	mov	r3, r9
   d7a9e:	4642      	mov	r2, r8
   d7aa0:	b289      	uxth	r1, r1
   d7aa2:	4836      	ldr	r0, [pc, #216]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7aa4:	f8cd a000 	str.w	sl, [sp]
   d7aa8:	f007 f82a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7aac:	f106 010d 	add.w	r1, r6, #13
   d7ab0:	464b      	mov	r3, r9
   d7ab2:	4642      	mov	r2, r8
   d7ab4:	b289      	uxth	r1, r1
   d7ab6:	4831      	ldr	r0, [pc, #196]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7ab8:	f8cd a000 	str.w	sl, [sp]
   d7abc:	f007 f820 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7ac0:	f106 010c 	add.w	r1, r6, #12
   d7ac4:	f8cd a000 	str.w	sl, [sp]
   d7ac8:	464b      	mov	r3, r9
   d7aca:	4642      	mov	r2, r8
   d7acc:	b289      	uxth	r1, r1
   d7ace:	482b      	ldr	r0, [pc, #172]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7ad0:	f007 f816 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7ad4:	f017 0701 	ands.w	r7, r7, #1
   d7ad8:	d14a      	bne.n	d7b70 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d7ada:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d7ade:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7ae2:	4826      	ldr	r0, [pc, #152]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7ae4:	f8cd 8000 	str.w	r8, [sp]
   d7ae8:	b2a4      	uxth	r4, r4
   d7aea:	b2ed      	uxtb	r5, r5
   d7aec:	462b      	mov	r3, r5
   d7aee:	4632      	mov	r2, r6
   d7af0:	4621      	mov	r1, r4
   d7af2:	f007 f805 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7af6:	1c61      	adds	r1, r4, #1
   d7af8:	462b      	mov	r3, r5
   d7afa:	4632      	mov	r2, r6
   d7afc:	b289      	uxth	r1, r1
   d7afe:	481f      	ldr	r0, [pc, #124]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b00:	f8cd 8000 	str.w	r8, [sp]
   d7b04:	f006 fffc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7b08:	1ca1      	adds	r1, r4, #2
   d7b0a:	462b      	mov	r3, r5
   d7b0c:	4632      	mov	r2, r6
   d7b0e:	b289      	uxth	r1, r1
   d7b10:	481a      	ldr	r0, [pc, #104]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b12:	f8cd 8000 	str.w	r8, [sp]
   d7b16:	f006 fff3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7b1a:	1ce1      	adds	r1, r4, #3
   d7b1c:	462b      	mov	r3, r5
   d7b1e:	4632      	mov	r2, r6
   d7b20:	b289      	uxth	r1, r1
   d7b22:	4816      	ldr	r0, [pc, #88]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b24:	f8cd 8000 	str.w	r8, [sp]
   d7b28:	f006 ffea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7b2c:	1d21      	adds	r1, r4, #4
   d7b2e:	462b      	mov	r3, r5
   d7b30:	4632      	mov	r2, r6
   d7b32:	b289      	uxth	r1, r1
   d7b34:	4811      	ldr	r0, [pc, #68]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b36:	f8cd 8000 	str.w	r8, [sp]
   d7b3a:	f006 ffe1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7b3e:	f104 010b 	add.w	r1, r4, #11
   d7b42:	462b      	mov	r3, r5
   d7b44:	4632      	mov	r2, r6
   d7b46:	b289      	uxth	r1, r1
   d7b48:	480c      	ldr	r0, [pc, #48]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b4a:	f8cd 8000 	str.w	r8, [sp]
   d7b4e:	f006 ffd7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7b52:	f104 010c 	add.w	r1, r4, #12
   d7b56:	463b      	mov	r3, r7
   d7b58:	463a      	mov	r2, r7
   d7b5a:	b289      	uxth	r1, r1
   d7b5c:	9700      	str	r7, [sp, #0]
   d7b5e:	4807      	ldr	r0, [pc, #28]	; (d7b7c <_Z4snumiiiii+0x1740>)
   d7b60:	f006 ffce 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d7b64:	f104 010d 	add.w	r1, r4, #13
   d7b68:	9700      	str	r7, [sp, #0]
   d7b6a:	463b      	mov	r3, r7
   d7b6c:	463a      	mov	r2, r7
   d7b6e:	e48d      	b.n	d748c <_Z4snumiiiii+0x1050>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
   d7b70:	b005      	add	sp, #20
   d7b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b76:	bf00      	nop
   d7b78:	80000001 	.word	0x80000001
   d7b7c:	2003e31c 	.word	0x2003e31c

000d7b80 <_Z6letterciiii>:
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(ltr == 'a')
   d7b82:	2861      	cmp	r0, #97	; 0x61
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7b84:	9d08      	ldr	r5, [sp, #32]
    if(ltr == 'a')
   d7b86:	d118      	bne.n	d7bba <_Z6letterciiii+0x3a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7b88:	b28c      	uxth	r4, r1
   d7b8a:	b2d6      	uxtb	r6, r2
   d7b8c:	b2df      	uxtb	r7, r3
   d7b8e:	b2ed      	uxtb	r5, r5
   d7b90:	f104 010c 	add.w	r1, r4, #12
   d7b94:	463b      	mov	r3, r7
   d7b96:	4632      	mov	r2, r6
   d7b98:	b289      	uxth	r1, r1
   d7b9a:	48ac      	ldr	r0, [pc, #688]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7b9c:	9500      	str	r5, [sp, #0]
   d7b9e:	f006 ffaf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7ba2:	f104 010d 	add.w	r1, r4, #13
   d7ba6:	b289      	uxth	r1, r1
   d7ba8:	9500      	str	r5, [sp, #0]
   d7baa:	463b      	mov	r3, r7
   d7bac:	4632      	mov	r2, r6
   d7bae:	48a7      	ldr	r0, [pc, #668]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7bb0:	f006 ffa6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7bb4:	f104 0111 	add.w	r1, r4, #17
   d7bb8:	e2d7      	b.n	d816a <_Z6letterciiii+0x5ea>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'b')
   d7bba:	2862      	cmp	r0, #98	; 0x62
   d7bbc:	d13c      	bne.n	d7c38 <_Z6letterciiii+0xb8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7bbe:	b28c      	uxth	r4, r1
   d7bc0:	b2d6      	uxtb	r6, r2
   d7bc2:	b2df      	uxtb	r7, r3
   d7bc4:	b2ed      	uxtb	r5, r5
   d7bc6:	f104 010b 	add.w	r1, r4, #11
   d7bca:	463b      	mov	r3, r7
   d7bcc:	4632      	mov	r2, r6
   d7bce:	b289      	uxth	r1, r1
   d7bd0:	489e      	ldr	r0, [pc, #632]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7bd2:	9500      	str	r5, [sp, #0]
   d7bd4:	f006 ff94 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7bd8:	f104 010c 	add.w	r1, r4, #12
   d7bdc:	463b      	mov	r3, r7
   d7bde:	4632      	mov	r2, r6
   d7be0:	b289      	uxth	r1, r1
   d7be2:	489a      	ldr	r0, [pc, #616]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7be4:	9500      	str	r5, [sp, #0]
   d7be6:	f006 ff8b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7bea:	f104 010d 	add.w	r1, r4, #13
   d7bee:	463b      	mov	r3, r7
   d7bf0:	4632      	mov	r2, r6
   d7bf2:	b289      	uxth	r1, r1
   d7bf4:	4895      	ldr	r0, [pc, #596]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7bf6:	9500      	str	r5, [sp, #0]
   d7bf8:	f006 ff82 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7bfc:	f104 010e 	add.w	r1, r4, #14
   d7c00:	463b      	mov	r3, r7
   d7c02:	4632      	mov	r2, r6
   d7c04:	b289      	uxth	r1, r1
   d7c06:	4891      	ldr	r0, [pc, #580]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c08:	9500      	str	r5, [sp, #0]
   d7c0a:	f006 ff79 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7c0e:	f104 010f 	add.w	r1, r4, #15
   d7c12:	463b      	mov	r3, r7
   d7c14:	4632      	mov	r2, r6
   d7c16:	b289      	uxth	r1, r1
   d7c18:	488c      	ldr	r0, [pc, #560]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c1a:	9500      	str	r5, [sp, #0]
   d7c1c:	f006 ff70 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7c20:	f104 0112 	add.w	r1, r4, #18
   d7c24:	b289      	uxth	r1, r1
   d7c26:	9500      	str	r5, [sp, #0]
   d7c28:	463b      	mov	r3, r7
   d7c2a:	4632      	mov	r2, r6
   d7c2c:	4887      	ldr	r0, [pc, #540]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c2e:	f006 ff67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7c32:	f104 0114 	add.w	r1, r4, #20
   d7c36:	e0f5      	b.n	d7e24 <_Z6letterciiii+0x2a4>
        strip.setPixelColor(pix+28,R,G,B);
    }
    if(ltr == 'c')
   d7c38:	2863      	cmp	r0, #99	; 0x63
   d7c3a:	d12b      	bne.n	d7c94 <_Z6letterciiii+0x114>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7c3c:	b28c      	uxth	r4, r1
   d7c3e:	b2d6      	uxtb	r6, r2
   d7c40:	b2df      	uxtb	r7, r3
   d7c42:	b2ed      	uxtb	r5, r5
   d7c44:	f104 010c 	add.w	r1, r4, #12
   d7c48:	463b      	mov	r3, r7
   d7c4a:	4632      	mov	r2, r6
   d7c4c:	b289      	uxth	r1, r1
   d7c4e:	487f      	ldr	r0, [pc, #508]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c50:	9500      	str	r5, [sp, #0]
   d7c52:	f006 ff55 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7c56:	f104 010d 	add.w	r1, r4, #13
   d7c5a:	463b      	mov	r3, r7
   d7c5c:	4632      	mov	r2, r6
   d7c5e:	b289      	uxth	r1, r1
   d7c60:	487a      	ldr	r0, [pc, #488]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c62:	9500      	str	r5, [sp, #0]
   d7c64:	f006 ff4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7c68:	f104 0111 	add.w	r1, r4, #17
   d7c6c:	463b      	mov	r3, r7
   d7c6e:	4632      	mov	r2, r6
   d7c70:	b289      	uxth	r1, r1
   d7c72:	4876      	ldr	r0, [pc, #472]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c74:	9500      	str	r5, [sp, #0]
   d7c76:	f006 ff43 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7c7a:	f104 0114 	add.w	r1, r4, #20
   d7c7e:	b289      	uxth	r1, r1
   d7c80:	9500      	str	r5, [sp, #0]
   d7c82:	463b      	mov	r3, r7
   d7c84:	4632      	mov	r2, r6
   d7c86:	4871      	ldr	r0, [pc, #452]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7c88:	f006 ff3a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7c8c:	f104 011b 	add.w	r1, r4, #27
   d7c90:	f000 bfd6 	b.w	d8c40 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'd')
   d7c94:	2864      	cmp	r0, #100	; 0x64
   d7c96:	d110      	bne.n	d7cba <_Z6letterciiii+0x13a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7c98:	b28c      	uxth	r4, r1
   d7c9a:	b2d6      	uxtb	r6, r2
   d7c9c:	b2df      	uxtb	r7, r3
   d7c9e:	b2ed      	uxtb	r5, r5
   d7ca0:	f104 010c 	add.w	r1, r4, #12
   d7ca4:	b289      	uxth	r1, r1
   d7ca6:	9500      	str	r5, [sp, #0]
   d7ca8:	463b      	mov	r3, r7
   d7caa:	4632      	mov	r2, r6
   d7cac:	4867      	ldr	r0, [pc, #412]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7cae:	f006 ff27 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7cb2:	f104 0112 	add.w	r1, r4, #18
   d7cb6:	f001 b86f 	b.w	d8d98 <_Z6letterciiii+0x1218>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'e')
   d7cba:	2865      	cmp	r0, #101	; 0x65
   d7cbc:	d12a      	bne.n	d7d14 <_Z6letterciiii+0x194>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7cbe:	b28c      	uxth	r4, r1
   d7cc0:	b2d6      	uxtb	r6, r2
   d7cc2:	b2df      	uxtb	r7, r3
   d7cc4:	b2ed      	uxtb	r5, r5
   d7cc6:	f104 010c 	add.w	r1, r4, #12
   d7cca:	463b      	mov	r3, r7
   d7ccc:	4632      	mov	r2, r6
   d7cce:	b289      	uxth	r1, r1
   d7cd0:	485e      	ldr	r0, [pc, #376]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7cd2:	9500      	str	r5, [sp, #0]
   d7cd4:	f006 ff14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7cd8:	f104 010d 	add.w	r1, r4, #13
   d7cdc:	463b      	mov	r3, r7
   d7cde:	4632      	mov	r2, r6
   d7ce0:	b289      	uxth	r1, r1
   d7ce2:	485a      	ldr	r0, [pc, #360]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7ce4:	9500      	str	r5, [sp, #0]
   d7ce6:	f006 ff0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7cea:	f104 010e 	add.w	r1, r4, #14
   d7cee:	463b      	mov	r3, r7
   d7cf0:	4632      	mov	r2, r6
   d7cf2:	b289      	uxth	r1, r1
   d7cf4:	4855      	ldr	r0, [pc, #340]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7cf6:	9500      	str	r5, [sp, #0]
   d7cf8:	f006 ff02 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7cfc:	f104 0110 	add.w	r1, r4, #16
   d7d00:	b289      	uxth	r1, r1
   d7d02:	9500      	str	r5, [sp, #0]
   d7d04:	463b      	mov	r3, r7
   d7d06:	4632      	mov	r2, r6
   d7d08:	4850      	ldr	r0, [pc, #320]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d0a:	f006 fef9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7d0e:	f104 0112 	add.w	r1, r4, #18
   d7d12:	e316      	b.n	d8342 <_Z6letterciiii+0x7c2>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'f')
   d7d14:	2866      	cmp	r0, #102	; 0x66
   d7d16:	d122      	bne.n	d7d5e <_Z6letterciiii+0x1de>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7d18:	b28c      	uxth	r4, r1
   d7d1a:	b2d6      	uxtb	r6, r2
   d7d1c:	b2df      	uxtb	r7, r3
   d7d1e:	b2ed      	uxtb	r5, r5
   d7d20:	f104 010b 	add.w	r1, r4, #11
   d7d24:	463b      	mov	r3, r7
   d7d26:	4632      	mov	r2, r6
   d7d28:	b289      	uxth	r1, r1
   d7d2a:	4848      	ldr	r0, [pc, #288]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d2c:	9500      	str	r5, [sp, #0]
   d7d2e:	f006 fee7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7d32:	f104 010c 	add.w	r1, r4, #12
   d7d36:	463b      	mov	r3, r7
   d7d38:	4632      	mov	r2, r6
   d7d3a:	b289      	uxth	r1, r1
   d7d3c:	4843      	ldr	r0, [pc, #268]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d3e:	9500      	str	r5, [sp, #0]
   d7d40:	f006 fede 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7d44:	f104 010d 	add.w	r1, r4, #13
   d7d48:	b289      	uxth	r1, r1
   d7d4a:	9500      	str	r5, [sp, #0]
   d7d4c:	463b      	mov	r3, r7
   d7d4e:	4632      	mov	r2, r6
   d7d50:	483e      	ldr	r0, [pc, #248]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d52:	f006 fed5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7d56:	f104 010e 	add.w	r1, r4, #14
   d7d5a:	f000 bc4b 	b.w	d85f4 <_Z6letterciiii+0xa74>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'g')
   d7d5e:	2867      	cmp	r0, #103	; 0x67
   d7d60:	d122      	bne.n	d7da8 <_Z6letterciiii+0x228>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7d62:	b28c      	uxth	r4, r1
   d7d64:	b2d6      	uxtb	r6, r2
   d7d66:	b2df      	uxtb	r7, r3
   d7d68:	b2ed      	uxtb	r5, r5
   d7d6a:	f104 010b 	add.w	r1, r4, #11
   d7d6e:	463b      	mov	r3, r7
   d7d70:	4632      	mov	r2, r6
   d7d72:	b289      	uxth	r1, r1
   d7d74:	4835      	ldr	r0, [pc, #212]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d76:	9500      	str	r5, [sp, #0]
   d7d78:	f006 fec2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7d7c:	f104 010e 	add.w	r1, r4, #14
   d7d80:	463b      	mov	r3, r7
   d7d82:	4632      	mov	r2, r6
   d7d84:	b289      	uxth	r1, r1
   d7d86:	4831      	ldr	r0, [pc, #196]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d88:	9500      	str	r5, [sp, #0]
   d7d8a:	f006 feb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7d8e:	f104 0110 	add.w	r1, r4, #16
   d7d92:	b289      	uxth	r1, r1
   d7d94:	9500      	str	r5, [sp, #0]
   d7d96:	463b      	mov	r3, r7
   d7d98:	4632      	mov	r2, r6
   d7d9a:	482c      	ldr	r0, [pc, #176]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7d9c:	f006 feb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7da0:	f104 0112 	add.w	r1, r4, #18
   d7da4:	f001 b82e 	b.w	d8e04 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'h')
   d7da8:	2868      	cmp	r0, #104	; 0x68
   d7daa:	d146      	bne.n	d7e3a <_Z6letterciiii+0x2ba>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7dac:	b28c      	uxth	r4, r1
   d7dae:	b2d6      	uxtb	r6, r2
   d7db0:	b2df      	uxtb	r7, r3
   d7db2:	b2ed      	uxtb	r5, r5
   d7db4:	f104 010b 	add.w	r1, r4, #11
   d7db8:	463b      	mov	r3, r7
   d7dba:	4632      	mov	r2, r6
   d7dbc:	b289      	uxth	r1, r1
   d7dbe:	4823      	ldr	r0, [pc, #140]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7dc0:	9500      	str	r5, [sp, #0]
   d7dc2:	f006 fe9d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7dc6:	f104 010c 	add.w	r1, r4, #12
   d7dca:	463b      	mov	r3, r7
   d7dcc:	4632      	mov	r2, r6
   d7dce:	b289      	uxth	r1, r1
   d7dd0:	481e      	ldr	r0, [pc, #120]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7dd2:	9500      	str	r5, [sp, #0]
   d7dd4:	f006 fe94 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7dd8:	f104 010d 	add.w	r1, r4, #13
   d7ddc:	463b      	mov	r3, r7
   d7dde:	4632      	mov	r2, r6
   d7de0:	b289      	uxth	r1, r1
   d7de2:	481a      	ldr	r0, [pc, #104]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7de4:	9500      	str	r5, [sp, #0]
   d7de6:	f006 fe8b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7dea:	f104 010e 	add.w	r1, r4, #14
   d7dee:	463b      	mov	r3, r7
   d7df0:	4632      	mov	r2, r6
   d7df2:	b289      	uxth	r1, r1
   d7df4:	4815      	ldr	r0, [pc, #84]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7df6:	9500      	str	r5, [sp, #0]
   d7df8:	f006 fe82 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7dfc:	f104 010f 	add.w	r1, r4, #15
   d7e00:	463b      	mov	r3, r7
   d7e02:	4632      	mov	r2, r6
   d7e04:	b289      	uxth	r1, r1
   d7e06:	4811      	ldr	r0, [pc, #68]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7e08:	9500      	str	r5, [sp, #0]
   d7e0a:	f006 fe79 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7e0e:	f104 0112 	add.w	r1, r4, #18
   d7e12:	b289      	uxth	r1, r1
   d7e14:	9500      	str	r5, [sp, #0]
   d7e16:	463b      	mov	r3, r7
   d7e18:	4632      	mov	r2, r6
   d7e1a:	480c      	ldr	r0, [pc, #48]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7e1c:	f006 fe70 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7e20:	f104 011b 	add.w	r1, r4, #27
   d7e24:	b289      	uxth	r1, r1
   d7e26:	9500      	str	r5, [sp, #0]
   d7e28:	463b      	mov	r3, r7
   d7e2a:	4632      	mov	r2, r6
   d7e2c:	4807      	ldr	r0, [pc, #28]	; (d7e4c <_Z6letterciiii+0x2cc>)
   d7e2e:	f006 fe67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7e32:	f104 011c 	add.w	r1, r4, #28
   d7e36:	f000 bf0c 	b.w	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'i')
   d7e3a:	2869      	cmp	r0, #105	; 0x69
   d7e3c:	d108      	bne.n	d7e50 <_Z6letterciiii+0x2d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d7e3e:	b28c      	uxth	r4, r1
   d7e40:	b2d6      	uxtb	r6, r2
   d7e42:	b2df      	uxtb	r7, r3
   d7e44:	b2ed      	uxtb	r5, r5
   d7e46:	f104 010f 	add.w	r1, r4, #15
   d7e4a:	e064      	b.n	d7f16 <_Z6letterciiii+0x396>
   d7e4c:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+11,R,G,B);
    }
    if(ltr == 'j')
   d7e50:	286a      	cmp	r0, #106	; 0x6a
   d7e52:	d122      	bne.n	d7e9a <_Z6letterciiii+0x31a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7e54:	b28c      	uxth	r4, r1
   d7e56:	b2d6      	uxtb	r6, r2
   d7e58:	b2df      	uxtb	r7, r3
   d7e5a:	b2ed      	uxtb	r5, r5
   d7e5c:	f104 010c 	add.w	r1, r4, #12
   d7e60:	463b      	mov	r3, r7
   d7e62:	4632      	mov	r2, r6
   d7e64:	b289      	uxth	r1, r1
   d7e66:	48b7      	ldr	r0, [pc, #732]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7e68:	9500      	str	r5, [sp, #0]
   d7e6a:	f006 fe49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7e6e:	f104 0114 	add.w	r1, r4, #20
   d7e72:	463b      	mov	r3, r7
   d7e74:	4632      	mov	r2, r6
   d7e76:	b289      	uxth	r1, r1
   d7e78:	48b2      	ldr	r0, [pc, #712]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7e7a:	9500      	str	r5, [sp, #0]
   d7e7c:	f006 fe40 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7e80:	f104 011c 	add.w	r1, r4, #28
   d7e84:	b289      	uxth	r1, r1
   d7e86:	9500      	str	r5, [sp, #0]
   d7e88:	463b      	mov	r3, r7
   d7e8a:	4632      	mov	r2, r6
   d7e8c:	48ad      	ldr	r0, [pc, #692]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7e8e:	f006 fe37 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d7e92:	f104 011d 	add.w	r1, r4, #29
   d7e96:	f001 b886 	b.w	d8fa6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'k')
   d7e9a:	286b      	cmp	r0, #107	; 0x6b
   d7e9c:	d12a      	bne.n	d7ef4 <_Z6letterciiii+0x374>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7e9e:	b28c      	uxth	r4, r1
   d7ea0:	b2d6      	uxtb	r6, r2
   d7ea2:	b2df      	uxtb	r7, r3
   d7ea4:	b2ed      	uxtb	r5, r5
   d7ea6:	f104 010b 	add.w	r1, r4, #11
   d7eaa:	463b      	mov	r3, r7
   d7eac:	4632      	mov	r2, r6
   d7eae:	b289      	uxth	r1, r1
   d7eb0:	48a4      	ldr	r0, [pc, #656]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7eb2:	9500      	str	r5, [sp, #0]
   d7eb4:	f006 fe24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7eb8:	f104 010c 	add.w	r1, r4, #12
   d7ebc:	463b      	mov	r3, r7
   d7ebe:	4632      	mov	r2, r6
   d7ec0:	b289      	uxth	r1, r1
   d7ec2:	48a0      	ldr	r0, [pc, #640]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7ec4:	9500      	str	r5, [sp, #0]
   d7ec6:	f006 fe1b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7eca:	f104 010d 	add.w	r1, r4, #13
   d7ece:	463b      	mov	r3, r7
   d7ed0:	4632      	mov	r2, r6
   d7ed2:	b289      	uxth	r1, r1
   d7ed4:	489b      	ldr	r0, [pc, #620]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7ed6:	9500      	str	r5, [sp, #0]
   d7ed8:	f006 fe12 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7edc:	f104 010e 	add.w	r1, r4, #14
   d7ee0:	b289      	uxth	r1, r1
   d7ee2:	9500      	str	r5, [sp, #0]
   d7ee4:	463b      	mov	r3, r7
   d7ee6:	4632      	mov	r2, r6
   d7ee8:	4896      	ldr	r0, [pc, #600]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7eea:	f006 fe09 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7eee:	f104 010f 	add.w	r1, r4, #15
   d7ef2:	e1cb      	b.n	d828c <_Z6letterciiii+0x70c>
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'l')
   d7ef4:	286c      	cmp	r0, #108	; 0x6c
   d7ef6:	d12b      	bne.n	d7f50 <_Z6letterciiii+0x3d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d7ef8:	b28c      	uxth	r4, r1
   d7efa:	b2d6      	uxtb	r6, r2
   d7efc:	b2df      	uxtb	r7, r3
   d7efe:	b2ed      	uxtb	r5, r5
   d7f00:	f104 010f 	add.w	r1, r4, #15
   d7f04:	b289      	uxth	r1, r1
   d7f06:	9500      	str	r5, [sp, #0]
   d7f08:	463b      	mov	r3, r7
   d7f0a:	4632      	mov	r2, r6
   d7f0c:	488d      	ldr	r0, [pc, #564]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f0e:	f006 fdf7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7f12:	f104 010e 	add.w	r1, r4, #14
   d7f16:	463b      	mov	r3, r7
   d7f18:	4632      	mov	r2, r6
   d7f1a:	b289      	uxth	r1, r1
   d7f1c:	4889      	ldr	r0, [pc, #548]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f1e:	9500      	str	r5, [sp, #0]
   d7f20:	f006 fdee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7f24:	f104 010d 	add.w	r1, r4, #13
   d7f28:	463b      	mov	r3, r7
   d7f2a:	4632      	mov	r2, r6
   d7f2c:	b289      	uxth	r1, r1
   d7f2e:	4885      	ldr	r0, [pc, #532]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f30:	9500      	str	r5, [sp, #0]
   d7f32:	f006 fde5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f36:	f104 010c 	add.w	r1, r4, #12
   d7f3a:	b289      	uxth	r1, r1
   d7f3c:	9500      	str	r5, [sp, #0]
   d7f3e:	463b      	mov	r3, r7
   d7f40:	4632      	mov	r2, r6
   d7f42:	4880      	ldr	r0, [pc, #512]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f44:	f006 fddc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d7f48:	f104 010b 	add.w	r1, r4, #11
   d7f4c:	f000 be81 	b.w	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'm')
   d7f50:	286d      	cmp	r0, #109	; 0x6d
   d7f52:	d134      	bne.n	d7fbe <_Z6letterciiii+0x43e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7f54:	b28c      	uxth	r4, r1
   d7f56:	b2d6      	uxtb	r6, r2
   d7f58:	b2df      	uxtb	r7, r3
   d7f5a:	b2ed      	uxtb	r5, r5
   d7f5c:	f104 010b 	add.w	r1, r4, #11
   d7f60:	463b      	mov	r3, r7
   d7f62:	4632      	mov	r2, r6
   d7f64:	b289      	uxth	r1, r1
   d7f66:	4877      	ldr	r0, [pc, #476]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f68:	9500      	str	r5, [sp, #0]
   d7f6a:	f006 fdc9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f6e:	f104 010c 	add.w	r1, r4, #12
   d7f72:	463b      	mov	r3, r7
   d7f74:	4632      	mov	r2, r6
   d7f76:	b289      	uxth	r1, r1
   d7f78:	4872      	ldr	r0, [pc, #456]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f7a:	9500      	str	r5, [sp, #0]
   d7f7c:	f006 fdc0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7f80:	f104 0112 	add.w	r1, r4, #18
   d7f84:	463b      	mov	r3, r7
   d7f86:	4632      	mov	r2, r6
   d7f88:	b289      	uxth	r1, r1
   d7f8a:	486e      	ldr	r0, [pc, #440]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f8c:	9500      	str	r5, [sp, #0]
   d7f8e:	f006 fdb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7f92:	f104 011b 	add.w	r1, r4, #27
   d7f96:	463b      	mov	r3, r7
   d7f98:	4632      	mov	r2, r6
   d7f9a:	b289      	uxth	r1, r1
   d7f9c:	4869      	ldr	r0, [pc, #420]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7f9e:	9500      	str	r5, [sp, #0]
   d7fa0:	f006 fdae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7fa4:	f104 011c 	add.w	r1, r4, #28
   d7fa8:	b289      	uxth	r1, r1
   d7faa:	9500      	str	r5, [sp, #0]
   d7fac:	463b      	mov	r3, r7
   d7fae:	4632      	mov	r2, r6
   d7fb0:	4864      	ldr	r0, [pc, #400]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7fb2:	f006 fda5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+34,R,G,B);
   d7fb6:	f104 0122 	add.w	r1, r4, #34	; 0x22
   d7fba:	f000 bcce 	b.w	d895a <_Z6letterciiii+0xdda>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+43,R,G,B);
    }
    if(ltr == 'n')
   d7fbe:	286e      	cmp	r0, #110	; 0x6e
   d7fc0:	d12a      	bne.n	d8018 <_Z6letterciiii+0x498>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7fc2:	b28c      	uxth	r4, r1
   d7fc4:	b2d6      	uxtb	r6, r2
   d7fc6:	b2df      	uxtb	r7, r3
   d7fc8:	b2ed      	uxtb	r5, r5
   d7fca:	f104 010b 	add.w	r1, r4, #11
   d7fce:	463b      	mov	r3, r7
   d7fd0:	4632      	mov	r2, r6
   d7fd2:	b289      	uxth	r1, r1
   d7fd4:	485b      	ldr	r0, [pc, #364]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7fd6:	9500      	str	r5, [sp, #0]
   d7fd8:	f006 fd92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7fdc:	f104 010c 	add.w	r1, r4, #12
   d7fe0:	463b      	mov	r3, r7
   d7fe2:	4632      	mov	r2, r6
   d7fe4:	b289      	uxth	r1, r1
   d7fe6:	4857      	ldr	r0, [pc, #348]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7fe8:	9500      	str	r5, [sp, #0]
   d7fea:	f006 fd89 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7fee:	f104 010d 	add.w	r1, r4, #13
   d7ff2:	463b      	mov	r3, r7
   d7ff4:	4632      	mov	r2, r6
   d7ff6:	b289      	uxth	r1, r1
   d7ff8:	4852      	ldr	r0, [pc, #328]	; (d8144 <_Z6letterciiii+0x5c4>)
   d7ffa:	9500      	str	r5, [sp, #0]
   d7ffc:	f006 fd80 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8000:	f104 010e 	add.w	r1, r4, #14
   d8004:	b289      	uxth	r1, r1
   d8006:	9500      	str	r5, [sp, #0]
   d8008:	463b      	mov	r3, r7
   d800a:	4632      	mov	r2, r6
   d800c:	484d      	ldr	r0, [pc, #308]	; (d8144 <_Z6letterciiii+0x5c4>)
   d800e:	f006 fd77 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8012:	f104 0111 	add.w	r1, r4, #17
   d8016:	e0b1      	b.n	d817c <_Z6letterciiii+0x5fc>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'o')
   d8018:	286f      	cmp	r0, #111	; 0x6f
   d801a:	d118      	bne.n	d804e <_Z6letterciiii+0x4ce>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d801c:	b28c      	uxth	r4, r1
   d801e:	b2d6      	uxtb	r6, r2
   d8020:	b2df      	uxtb	r7, r3
   d8022:	b2ed      	uxtb	r5, r5
   d8024:	f104 010c 	add.w	r1, r4, #12
   d8028:	463b      	mov	r3, r7
   d802a:	4632      	mov	r2, r6
   d802c:	b289      	uxth	r1, r1
   d802e:	4845      	ldr	r0, [pc, #276]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8030:	9500      	str	r5, [sp, #0]
   d8032:	f006 fd65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8036:	f104 010d 	add.w	r1, r4, #13
   d803a:	b289      	uxth	r1, r1
   d803c:	9500      	str	r5, [sp, #0]
   d803e:	463b      	mov	r3, r7
   d8040:	4632      	mov	r2, r6
   d8042:	4840      	ldr	r0, [pc, #256]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8044:	f006 fd5c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8048:	f104 0111 	add.w	r1, r4, #17
   d804c:	e0b1      	b.n	d81b2 <_Z6letterciiii+0x632>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'p')
   d804e:	2870      	cmp	r0, #112	; 0x70
   d8050:	f000 852a 	beq.w	d8aa8 <_Z6letterciiii+0xf28>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'q')
   d8054:	2871      	cmp	r0, #113	; 0x71
   d8056:	d10f      	bne.n	d8078 <_Z6letterciiii+0x4f8>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d8058:	b28c      	uxth	r4, r1
   d805a:	b2d6      	uxtb	r6, r2
   d805c:	b2df      	uxtb	r7, r3
   d805e:	b2ed      	uxtb	r5, r5
   d8060:	f104 010e 	add.w	r1, r4, #14
   d8064:	b289      	uxth	r1, r1
   d8066:	9500      	str	r5, [sp, #0]
   d8068:	463b      	mov	r3, r7
   d806a:	4632      	mov	r2, r6
   d806c:	4835      	ldr	r0, [pc, #212]	; (d8144 <_Z6letterciiii+0x5c4>)
   d806e:	f006 fd47 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8072:	f104 0110 	add.w	r1, r4, #16
   d8076:	e347      	b.n	d8708 <_Z6letterciiii+0xb88>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'r')
   d8078:	2872      	cmp	r0, #114	; 0x72
   d807a:	d12a      	bne.n	d80d2 <_Z6letterciiii+0x552>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d807c:	b28c      	uxth	r4, r1
   d807e:	b2d6      	uxtb	r6, r2
   d8080:	b2df      	uxtb	r7, r3
   d8082:	b2ed      	uxtb	r5, r5
   d8084:	f104 010b 	add.w	r1, r4, #11
   d8088:	463b      	mov	r3, r7
   d808a:	4632      	mov	r2, r6
   d808c:	b289      	uxth	r1, r1
   d808e:	482d      	ldr	r0, [pc, #180]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8090:	9500      	str	r5, [sp, #0]
   d8092:	f006 fd35 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8096:	f104 010c 	add.w	r1, r4, #12
   d809a:	463b      	mov	r3, r7
   d809c:	4632      	mov	r2, r6
   d809e:	b289      	uxth	r1, r1
   d80a0:	4828      	ldr	r0, [pc, #160]	; (d8144 <_Z6letterciiii+0x5c4>)
   d80a2:	9500      	str	r5, [sp, #0]
   d80a4:	f006 fd2c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d80a8:	f104 010d 	add.w	r1, r4, #13
   d80ac:	463b      	mov	r3, r7
   d80ae:	4632      	mov	r2, r6
   d80b0:	b289      	uxth	r1, r1
   d80b2:	4824      	ldr	r0, [pc, #144]	; (d8144 <_Z6letterciiii+0x5c4>)
   d80b4:	9500      	str	r5, [sp, #0]
   d80b6:	f006 fd23 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d80ba:	f104 010e 	add.w	r1, r4, #14
   d80be:	b289      	uxth	r1, r1
   d80c0:	9500      	str	r5, [sp, #0]
   d80c2:	463b      	mov	r3, r7
   d80c4:	4632      	mov	r2, r6
   d80c6:	481f      	ldr	r0, [pc, #124]	; (d8144 <_Z6letterciiii+0x5c4>)
   d80c8:	f006 fd1a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d80cc:	f104 0111 	add.w	r1, r4, #17
   d80d0:	e0ee      	b.n	d82b0 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 's')
   d80d2:	2873      	cmp	r0, #115	; 0x73
   d80d4:	f000 85ca 	beq.w	d8c6c <_Z6letterciiii+0x10ec>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 't')
   d80d8:	2874      	cmp	r0, #116	; 0x74
   d80da:	d135      	bne.n	d8148 <_Z6letterciiii+0x5c8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d80dc:	b28c      	uxth	r4, r1
   d80de:	b2d6      	uxtb	r6, r2
   d80e0:	b2df      	uxtb	r7, r3
   d80e2:	b2ed      	uxtb	r5, r5
   d80e4:	f104 010d 	add.w	r1, r4, #13
   d80e8:	463b      	mov	r3, r7
   d80ea:	4632      	mov	r2, r6
   d80ec:	b289      	uxth	r1, r1
   d80ee:	4815      	ldr	r0, [pc, #84]	; (d8144 <_Z6letterciiii+0x5c4>)
   d80f0:	9500      	str	r5, [sp, #0]
   d80f2:	f006 fd05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d80f6:	f104 0110 	add.w	r1, r4, #16
   d80fa:	463b      	mov	r3, r7
   d80fc:	4632      	mov	r2, r6
   d80fe:	b289      	uxth	r1, r1
   d8100:	4810      	ldr	r0, [pc, #64]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8102:	9500      	str	r5, [sp, #0]
   d8104:	f006 fcfc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8108:	f104 0111 	add.w	r1, r4, #17
   d810c:	463b      	mov	r3, r7
   d810e:	4632      	mov	r2, r6
   d8110:	b289      	uxth	r1, r1
   d8112:	480c      	ldr	r0, [pc, #48]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8114:	9500      	str	r5, [sp, #0]
   d8116:	f006 fcf3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d811a:	f104 0112 	add.w	r1, r4, #18
   d811e:	463b      	mov	r3, r7
   d8120:	4632      	mov	r2, r6
   d8122:	b289      	uxth	r1, r1
   d8124:	4807      	ldr	r0, [pc, #28]	; (d8144 <_Z6letterciiii+0x5c4>)
   d8126:	9500      	str	r5, [sp, #0]
   d8128:	f006 fcea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d812c:	f104 0113 	add.w	r1, r4, #19
   d8130:	b289      	uxth	r1, r1
   d8132:	9500      	str	r5, [sp, #0]
   d8134:	463b      	mov	r3, r7
   d8136:	4632      	mov	r2, r6
   d8138:	4802      	ldr	r0, [pc, #8]	; (d8144 <_Z6letterciiii+0x5c4>)
   d813a:	f006 fce1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d813e:	f104 0114 	add.w	r1, r4, #20
   d8142:	e0b5      	b.n	d82b0 <_Z6letterciiii+0x730>
   d8144:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'u')
   d8148:	2875      	cmp	r0, #117	; 0x75
   d814a:	d121      	bne.n	d8190 <_Z6letterciiii+0x610>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d814c:	b28c      	uxth	r4, r1
   d814e:	b2d6      	uxtb	r6, r2
   d8150:	b2df      	uxtb	r7, r3
   d8152:	b2ed      	uxtb	r5, r5
   d8154:	f104 010c 	add.w	r1, r4, #12
   d8158:	b289      	uxth	r1, r1
   d815a:	9500      	str	r5, [sp, #0]
   d815c:	463b      	mov	r3, r7
   d815e:	4632      	mov	r2, r6
   d8160:	48a1      	ldr	r0, [pc, #644]	; (d83e8 <_Z6letterciiii+0x868>)
   d8162:	f006 fccd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8166:	f104 010d 	add.w	r1, r4, #13
   d816a:	b289      	uxth	r1, r1
   d816c:	9500      	str	r5, [sp, #0]
   d816e:	463b      	mov	r3, r7
   d8170:	4632      	mov	r2, r6
   d8172:	489d      	ldr	r0, [pc, #628]	; (d83e8 <_Z6letterciiii+0x868>)
   d8174:	f006 fcc4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8178:	f104 0114 	add.w	r1, r4, #20
   d817c:	b289      	uxth	r1, r1
   d817e:	9500      	str	r5, [sp, #0]
   d8180:	463b      	mov	r3, r7
   d8182:	4632      	mov	r2, r6
   d8184:	4898      	ldr	r0, [pc, #608]	; (d83e8 <_Z6letterciiii+0x868>)
   d8186:	f006 fcbb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d818a:	f104 011b 	add.w	r1, r4, #27
   d818e:	e019      	b.n	d81c4 <_Z6letterciiii+0x644>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'v')
   d8190:	2876      	cmp	r0, #118	; 0x76
   d8192:	d121      	bne.n	d81d8 <_Z6letterciiii+0x658>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8194:	b28c      	uxth	r4, r1
   d8196:	b2d6      	uxtb	r6, r2
   d8198:	b2df      	uxtb	r7, r3
   d819a:	b2ed      	uxtb	r5, r5
   d819c:	f104 010c 	add.w	r1, r4, #12
   d81a0:	b289      	uxth	r1, r1
   d81a2:	9500      	str	r5, [sp, #0]
   d81a4:	463b      	mov	r3, r7
   d81a6:	4632      	mov	r2, r6
   d81a8:	488f      	ldr	r0, [pc, #572]	; (d83e8 <_Z6letterciiii+0x868>)
   d81aa:	f006 fca9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d81ae:	f104 010d 	add.w	r1, r4, #13
   d81b2:	b289      	uxth	r1, r1
   d81b4:	9500      	str	r5, [sp, #0]
   d81b6:	463b      	mov	r3, r7
   d81b8:	4632      	mov	r2, r6
   d81ba:	488b      	ldr	r0, [pc, #556]	; (d83e8 <_Z6letterciiii+0x868>)
   d81bc:	f006 fca0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d81c0:	f104 0114 	add.w	r1, r4, #20
   d81c4:	b289      	uxth	r1, r1
   d81c6:	9500      	str	r5, [sp, #0]
   d81c8:	463b      	mov	r3, r7
   d81ca:	4632      	mov	r2, r6
   d81cc:	4886      	ldr	r0, [pc, #536]	; (d83e8 <_Z6letterciiii+0x868>)
   d81ce:	f006 fc97 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d81d2:	f104 011c 	add.w	r1, r4, #28
   d81d6:	e06b      	b.n	d82b0 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'w')
   d81d8:	2877      	cmp	r0, #119	; 0x77
   d81da:	d146      	bne.n	d826a <_Z6letterciiii+0x6ea>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d81dc:	b28c      	uxth	r4, r1
   d81de:	b2d6      	uxtb	r6, r2
   d81e0:	b2df      	uxtb	r7, r3
   d81e2:	b2ed      	uxtb	r5, r5
   d81e4:	f104 010c 	add.w	r1, r4, #12
   d81e8:	463b      	mov	r3, r7
   d81ea:	4632      	mov	r2, r6
   d81ec:	b289      	uxth	r1, r1
   d81ee:	487e      	ldr	r0, [pc, #504]	; (d83e8 <_Z6letterciiii+0x868>)
   d81f0:	9500      	str	r5, [sp, #0]
   d81f2:	f006 fc85 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d81f6:	f104 010d 	add.w	r1, r4, #13
   d81fa:	463b      	mov	r3, r7
   d81fc:	4632      	mov	r2, r6
   d81fe:	b289      	uxth	r1, r1
   d8200:	4879      	ldr	r0, [pc, #484]	; (d83e8 <_Z6letterciiii+0x868>)
   d8202:	9500      	str	r5, [sp, #0]
   d8204:	f006 fc7c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8208:	f104 0114 	add.w	r1, r4, #20
   d820c:	463b      	mov	r3, r7
   d820e:	4632      	mov	r2, r6
   d8210:	b289      	uxth	r1, r1
   d8212:	4875      	ldr	r0, [pc, #468]	; (d83e8 <_Z6letterciiii+0x868>)
   d8214:	9500      	str	r5, [sp, #0]
   d8216:	f006 fc73 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d821a:	f104 011c 	add.w	r1, r4, #28
   d821e:	463b      	mov	r3, r7
   d8220:	4632      	mov	r2, r6
   d8222:	b289      	uxth	r1, r1
   d8224:	4870      	ldr	r0, [pc, #448]	; (d83e8 <_Z6letterciiii+0x868>)
   d8226:	9500      	str	r5, [sp, #0]
   d8228:	f006 fc6a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d822c:	f104 011d 	add.w	r1, r4, #29
   d8230:	463b      	mov	r3, r7
   d8232:	4632      	mov	r2, r6
   d8234:	b289      	uxth	r1, r1
   d8236:	486c      	ldr	r0, [pc, #432]	; (d83e8 <_Z6letterciiii+0x868>)
   d8238:	9500      	str	r5, [sp, #0]
   d823a:	f006 fc61 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d823e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8242:	463b      	mov	r3, r7
   d8244:	4632      	mov	r2, r6
   d8246:	b289      	uxth	r1, r1
   d8248:	4867      	ldr	r0, [pc, #412]	; (d83e8 <_Z6letterciiii+0x868>)
   d824a:	9500      	str	r5, [sp, #0]
   d824c:	f006 fc58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8250:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8254:	b289      	uxth	r1, r1
   d8256:	9500      	str	r5, [sp, #0]
   d8258:	463b      	mov	r3, r7
   d825a:	4632      	mov	r2, r6
   d825c:	4862      	ldr	r0, [pc, #392]	; (d83e8 <_Z6letterciiii+0x868>)
   d825e:	f006 fc4f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8262:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8266:	f000 bcf4 	b.w	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'x')
   d826a:	2878      	cmp	r0, #120	; 0x78
   d826c:	d12b      	bne.n	d82c6 <_Z6letterciiii+0x746>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d826e:	b28c      	uxth	r4, r1
   d8270:	b2d6      	uxtb	r6, r2
   d8272:	b2df      	uxtb	r7, r3
   d8274:	b2ed      	uxtb	r5, r5
   d8276:	f104 010b 	add.w	r1, r4, #11
   d827a:	b289      	uxth	r1, r1
   d827c:	9500      	str	r5, [sp, #0]
   d827e:	463b      	mov	r3, r7
   d8280:	4632      	mov	r2, r6
   d8282:	4859      	ldr	r0, [pc, #356]	; (d83e8 <_Z6letterciiii+0x868>)
   d8284:	f006 fc3c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8288:	f104 010d 	add.w	r1, r4, #13
   d828c:	463b      	mov	r3, r7
   d828e:	4632      	mov	r2, r6
   d8290:	b289      	uxth	r1, r1
   d8292:	4855      	ldr	r0, [pc, #340]	; (d83e8 <_Z6letterciiii+0x868>)
   d8294:	9500      	str	r5, [sp, #0]
   d8296:	f006 fc33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d829a:	f104 0113 	add.w	r1, r4, #19
   d829e:	b289      	uxth	r1, r1
   d82a0:	9500      	str	r5, [sp, #0]
   d82a2:	463b      	mov	r3, r7
   d82a4:	4632      	mov	r2, r6
   d82a6:	4850      	ldr	r0, [pc, #320]	; (d83e8 <_Z6letterciiii+0x868>)
   d82a8:	f006 fc2a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d82ac:	f104 011b 	add.w	r1, r4, #27
   d82b0:	b289      	uxth	r1, r1
   d82b2:	9500      	str	r5, [sp, #0]
   d82b4:	463b      	mov	r3, r7
   d82b6:	4632      	mov	r2, r6
   d82b8:	484b      	ldr	r0, [pc, #300]	; (d83e8 <_Z6letterciiii+0x868>)
   d82ba:	f006 fc21 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d82be:	f104 011d 	add.w	r1, r4, #29
   d82c2:	f000 bcc6 	b.w	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'y')
   d82c6:	2879      	cmp	r0, #121	; 0x79
   d82c8:	d118      	bne.n	d82fc <_Z6letterciiii+0x77c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d82ca:	b28c      	uxth	r4, r1
   d82cc:	b2d6      	uxtb	r6, r2
   d82ce:	b2df      	uxtb	r7, r3
   d82d0:	b2ed      	uxtb	r5, r5
   d82d2:	f104 010b 	add.w	r1, r4, #11
   d82d6:	463b      	mov	r3, r7
   d82d8:	4632      	mov	r2, r6
   d82da:	b289      	uxth	r1, r1
   d82dc:	4842      	ldr	r0, [pc, #264]	; (d83e8 <_Z6letterciiii+0x868>)
   d82de:	9500      	str	r5, [sp, #0]
   d82e0:	f006 fc0e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d82e4:	f104 010e 	add.w	r1, r4, #14
   d82e8:	b289      	uxth	r1, r1
   d82ea:	9500      	str	r5, [sp, #0]
   d82ec:	463b      	mov	r3, r7
   d82ee:	4632      	mov	r2, r6
   d82f0:	483d      	ldr	r0, [pc, #244]	; (d83e8 <_Z6letterciiii+0x868>)
   d82f2:	f006 fc05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d82f6:	f104 0112 	add.w	r1, r4, #18
   d82fa:	e3b7      	b.n	d8a6c <_Z6letterciiii+0xeec>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'z')
   d82fc:	287a      	cmp	r0, #122	; 0x7a
   d82fe:	d133      	bne.n	d8368 <_Z6letterciiii+0x7e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8300:	b28c      	uxth	r4, r1
   d8302:	b2d6      	uxtb	r6, r2
   d8304:	b2df      	uxtb	r7, r3
   d8306:	b2ed      	uxtb	r5, r5
   d8308:	f104 010b 	add.w	r1, r4, #11
   d830c:	463b      	mov	r3, r7
   d830e:	4632      	mov	r2, r6
   d8310:	b289      	uxth	r1, r1
   d8312:	4835      	ldr	r0, [pc, #212]	; (d83e8 <_Z6letterciiii+0x868>)
   d8314:	9500      	str	r5, [sp, #0]
   d8316:	f006 fbf3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d831a:	f104 010e 	add.w	r1, r4, #14
   d831e:	463b      	mov	r3, r7
   d8320:	4632      	mov	r2, r6
   d8322:	b289      	uxth	r1, r1
   d8324:	4830      	ldr	r0, [pc, #192]	; (d83e8 <_Z6letterciiii+0x868>)
   d8326:	9500      	str	r5, [sp, #0]
   d8328:	f006 fbea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d832c:	f104 0111 	add.w	r1, r4, #17
   d8330:	b289      	uxth	r1, r1
   d8332:	9500      	str	r5, [sp, #0]
   d8334:	463b      	mov	r3, r7
   d8336:	4632      	mov	r2, r6
   d8338:	482b      	ldr	r0, [pc, #172]	; (d83e8 <_Z6letterciiii+0x868>)
   d833a:	f006 fbe1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d833e:	f104 0113 	add.w	r1, r4, #19
   d8342:	463b      	mov	r3, r7
   d8344:	4632      	mov	r2, r6
   d8346:	b289      	uxth	r1, r1
   d8348:	4827      	ldr	r0, [pc, #156]	; (d83e8 <_Z6letterciiii+0x868>)
   d834a:	9500      	str	r5, [sp, #0]
   d834c:	f006 fbd8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8350:	f104 0114 	add.w	r1, r4, #20
   d8354:	b289      	uxth	r1, r1
   d8356:	9500      	str	r5, [sp, #0]
   d8358:	463b      	mov	r3, r7
   d835a:	4632      	mov	r2, r6
   d835c:	4822      	ldr	r0, [pc, #136]	; (d83e8 <_Z6letterciiii+0x868>)
   d835e:	f006 fbcf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8362:	f104 011b 	add.w	r1, r4, #27
   d8366:	e393      	b.n	d8a90 <_Z6letterciiii+0xf10>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'A')
   d8368:	2841      	cmp	r0, #65	; 0x41
   d836a:	d13f      	bne.n	d83ec <_Z6letterciiii+0x86c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d836c:	b28c      	uxth	r4, r1
   d836e:	b2d6      	uxtb	r6, r2
   d8370:	b2df      	uxtb	r7, r3
   d8372:	b2ed      	uxtb	r5, r5
   d8374:	f104 010b 	add.w	r1, r4, #11
   d8378:	463b      	mov	r3, r7
   d837a:	4632      	mov	r2, r6
   d837c:	b289      	uxth	r1, r1
   d837e:	481a      	ldr	r0, [pc, #104]	; (d83e8 <_Z6letterciiii+0x868>)
   d8380:	9500      	str	r5, [sp, #0]
   d8382:	f006 fbbd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8386:	f104 010c 	add.w	r1, r4, #12
   d838a:	463b      	mov	r3, r7
   d838c:	4632      	mov	r2, r6
   d838e:	b289      	uxth	r1, r1
   d8390:	4815      	ldr	r0, [pc, #84]	; (d83e8 <_Z6letterciiii+0x868>)
   d8392:	9500      	str	r5, [sp, #0]
   d8394:	f006 fbb4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8398:	f104 010d 	add.w	r1, r4, #13
   d839c:	463b      	mov	r3, r7
   d839e:	4632      	mov	r2, r6
   d83a0:	b289      	uxth	r1, r1
   d83a2:	4811      	ldr	r0, [pc, #68]	; (d83e8 <_Z6letterciiii+0x868>)
   d83a4:	9500      	str	r5, [sp, #0]
   d83a6:	f006 fbab 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d83aa:	f104 010e 	add.w	r1, r4, #14
   d83ae:	463b      	mov	r3, r7
   d83b0:	4632      	mov	r2, r6
   d83b2:	b289      	uxth	r1, r1
   d83b4:	480c      	ldr	r0, [pc, #48]	; (d83e8 <_Z6letterciiii+0x868>)
   d83b6:	9500      	str	r5, [sp, #0]
   d83b8:	f006 fba2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d83bc:	f104 0110 	add.w	r1, r4, #16
   d83c0:	463b      	mov	r3, r7
   d83c2:	4632      	mov	r2, r6
   d83c4:	b289      	uxth	r1, r1
   d83c6:	4808      	ldr	r0, [pc, #32]	; (d83e8 <_Z6letterciiii+0x868>)
   d83c8:	9500      	str	r5, [sp, #0]
   d83ca:	f006 fb99 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d83ce:	f104 0112 	add.w	r1, r4, #18
   d83d2:	b289      	uxth	r1, r1
   d83d4:	9500      	str	r5, [sp, #0]
   d83d6:	463b      	mov	r3, r7
   d83d8:	4632      	mov	r2, r6
   d83da:	4803      	ldr	r0, [pc, #12]	; (d83e8 <_Z6letterciiii+0x868>)
   d83dc:	f006 fb90 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d83e0:	f104 011b 	add.w	r1, r4, #27
   d83e4:	e34b      	b.n	d8a7e <_Z6letterciiii+0xefe>
   d83e6:	bf00      	nop
   d83e8:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'B')
   d83ec:	2842      	cmp	r0, #66	; 0x42
   d83ee:	d145      	bne.n	d847c <_Z6letterciiii+0x8fc>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d83f0:	b28c      	uxth	r4, r1
   d83f2:	b2d6      	uxtb	r6, r2
   d83f4:	b2df      	uxtb	r7, r3
   d83f6:	b2ed      	uxtb	r5, r5
   d83f8:	f104 010b 	add.w	r1, r4, #11
   d83fc:	463b      	mov	r3, r7
   d83fe:	4632      	mov	r2, r6
   d8400:	b289      	uxth	r1, r1
   d8402:	48aa      	ldr	r0, [pc, #680]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8404:	9500      	str	r5, [sp, #0]
   d8406:	f006 fb7b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d840a:	f104 010c 	add.w	r1, r4, #12
   d840e:	463b      	mov	r3, r7
   d8410:	4632      	mov	r2, r6
   d8412:	b289      	uxth	r1, r1
   d8414:	48a5      	ldr	r0, [pc, #660]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8416:	9500      	str	r5, [sp, #0]
   d8418:	f006 fb72 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d841c:	f104 010d 	add.w	r1, r4, #13
   d8420:	463b      	mov	r3, r7
   d8422:	4632      	mov	r2, r6
   d8424:	b289      	uxth	r1, r1
   d8426:	48a1      	ldr	r0, [pc, #644]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8428:	9500      	str	r5, [sp, #0]
   d842a:	f006 fb69 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d842e:	f104 010e 	add.w	r1, r4, #14
   d8432:	463b      	mov	r3, r7
   d8434:	4632      	mov	r2, r6
   d8436:	b289      	uxth	r1, r1
   d8438:	489c      	ldr	r0, [pc, #624]	; (d86ac <_Z6letterciiii+0xb2c>)
   d843a:	9500      	str	r5, [sp, #0]
   d843c:	f006 fb60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8440:	f104 010f 	add.w	r1, r4, #15
   d8444:	463b      	mov	r3, r7
   d8446:	4632      	mov	r2, r6
   d8448:	b289      	uxth	r1, r1
   d844a:	4898      	ldr	r0, [pc, #608]	; (d86ac <_Z6letterciiii+0xb2c>)
   d844c:	9500      	str	r5, [sp, #0]
   d844e:	f006 fb57 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8452:	f104 0110 	add.w	r1, r4, #16
   d8456:	463b      	mov	r3, r7
   d8458:	4632      	mov	r2, r6
   d845a:	b289      	uxth	r1, r1
   d845c:	4893      	ldr	r0, [pc, #588]	; (d86ac <_Z6letterciiii+0xb2c>)
   d845e:	9500      	str	r5, [sp, #0]
   d8460:	f006 fb4e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8464:	f104 0112 	add.w	r1, r4, #18
   d8468:	b289      	uxth	r1, r1
   d846a:	9500      	str	r5, [sp, #0]
   d846c:	463b      	mov	r3, r7
   d846e:	4632      	mov	r2, r6
   d8470:	488e      	ldr	r0, [pc, #568]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8472:	f006 fb45 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8476:	f104 0114 	add.w	r1, r4, #20
   d847a:	e3d8      	b.n	d8c2e <_Z6letterciiii+0x10ae>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'C')
   d847c:	2843      	cmp	r0, #67	; 0x43
   d847e:	d121      	bne.n	d84c4 <_Z6letterciiii+0x944>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8480:	b28c      	uxth	r4, r1
   d8482:	b2d6      	uxtb	r6, r2
   d8484:	b2df      	uxtb	r7, r3
   d8486:	b2ed      	uxtb	r5, r5
   d8488:	f104 010c 	add.w	r1, r4, #12
   d848c:	463b      	mov	r3, r7
   d848e:	4632      	mov	r2, r6
   d8490:	b289      	uxth	r1, r1
   d8492:	4886      	ldr	r0, [pc, #536]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8494:	9500      	str	r5, [sp, #0]
   d8496:	f006 fb33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d849a:	f104 010d 	add.w	r1, r4, #13
   d849e:	463b      	mov	r3, r7
   d84a0:	4632      	mov	r2, r6
   d84a2:	b289      	uxth	r1, r1
   d84a4:	4881      	ldr	r0, [pc, #516]	; (d86ac <_Z6letterciiii+0xb2c>)
   d84a6:	9500      	str	r5, [sp, #0]
   d84a8:	f006 fb2a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d84ac:	f104 010e 	add.w	r1, r4, #14
   d84b0:	b289      	uxth	r1, r1
   d84b2:	9500      	str	r5, [sp, #0]
   d84b4:	463b      	mov	r3, r7
   d84b6:	4632      	mov	r2, r6
   d84b8:	487c      	ldr	r0, [pc, #496]	; (d86ac <_Z6letterciiii+0xb2c>)
   d84ba:	f006 fb21 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d84be:	f104 0110 	add.w	r1, r4, #16
   d84c2:	e160      	b.n	d8786 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'D')
   d84c4:	2844      	cmp	r0, #68	; 0x44
   d84c6:	d12a      	bne.n	d851e <_Z6letterciiii+0x99e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d84c8:	b28c      	uxth	r4, r1
   d84ca:	b2d6      	uxtb	r6, r2
   d84cc:	b2df      	uxtb	r7, r3
   d84ce:	b2ed      	uxtb	r5, r5
   d84d0:	f104 010b 	add.w	r1, r4, #11
   d84d4:	463b      	mov	r3, r7
   d84d6:	4632      	mov	r2, r6
   d84d8:	b289      	uxth	r1, r1
   d84da:	4874      	ldr	r0, [pc, #464]	; (d86ac <_Z6letterciiii+0xb2c>)
   d84dc:	9500      	str	r5, [sp, #0]
   d84de:	f006 fb0f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d84e2:	f104 010c 	add.w	r1, r4, #12
   d84e6:	463b      	mov	r3, r7
   d84e8:	4632      	mov	r2, r6
   d84ea:	b289      	uxth	r1, r1
   d84ec:	486f      	ldr	r0, [pc, #444]	; (d86ac <_Z6letterciiii+0xb2c>)
   d84ee:	9500      	str	r5, [sp, #0]
   d84f0:	f006 fb06 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d84f4:	f104 010d 	add.w	r1, r4, #13
   d84f8:	463b      	mov	r3, r7
   d84fa:	4632      	mov	r2, r6
   d84fc:	b289      	uxth	r1, r1
   d84fe:	486b      	ldr	r0, [pc, #428]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8500:	9500      	str	r5, [sp, #0]
   d8502:	f006 fafd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8506:	f104 010e 	add.w	r1, r4, #14
   d850a:	b289      	uxth	r1, r1
   d850c:	9500      	str	r5, [sp, #0]
   d850e:	463b      	mov	r3, r7
   d8510:	4632      	mov	r2, r6
   d8512:	4866      	ldr	r0, [pc, #408]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8514:	f006 faf4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8518:	f104 010f 	add.w	r1, r4, #15
   d851c:	e29d      	b.n	d8a5a <_Z6letterciiii+0xeda>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'E')
   d851e:	2845      	cmp	r0, #69	; 0x45
   d8520:	d13c      	bne.n	d859c <_Z6letterciiii+0xa1c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8522:	b28c      	uxth	r4, r1
   d8524:	b2d6      	uxtb	r6, r2
   d8526:	b2df      	uxtb	r7, r3
   d8528:	b2ed      	uxtb	r5, r5
   d852a:	f104 010b 	add.w	r1, r4, #11
   d852e:	463b      	mov	r3, r7
   d8530:	4632      	mov	r2, r6
   d8532:	b289      	uxth	r1, r1
   d8534:	485d      	ldr	r0, [pc, #372]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8536:	9500      	str	r5, [sp, #0]
   d8538:	f006 fae2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d853c:	f104 010c 	add.w	r1, r4, #12
   d8540:	463b      	mov	r3, r7
   d8542:	4632      	mov	r2, r6
   d8544:	b289      	uxth	r1, r1
   d8546:	4859      	ldr	r0, [pc, #356]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8548:	9500      	str	r5, [sp, #0]
   d854a:	f006 fad9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d854e:	f104 010d 	add.w	r1, r4, #13
   d8552:	463b      	mov	r3, r7
   d8554:	4632      	mov	r2, r6
   d8556:	b289      	uxth	r1, r1
   d8558:	4854      	ldr	r0, [pc, #336]	; (d86ac <_Z6letterciiii+0xb2c>)
   d855a:	9500      	str	r5, [sp, #0]
   d855c:	f006 fad0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8560:	f104 010e 	add.w	r1, r4, #14
   d8564:	463b      	mov	r3, r7
   d8566:	4632      	mov	r2, r6
   d8568:	b289      	uxth	r1, r1
   d856a:	4850      	ldr	r0, [pc, #320]	; (d86ac <_Z6letterciiii+0xb2c>)
   d856c:	9500      	str	r5, [sp, #0]
   d856e:	f006 fac7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8572:	f104 010f 	add.w	r1, r4, #15
   d8576:	463b      	mov	r3, r7
   d8578:	4632      	mov	r2, r6
   d857a:	b289      	uxth	r1, r1
   d857c:	484b      	ldr	r0, [pc, #300]	; (d86ac <_Z6letterciiii+0xb2c>)
   d857e:	9500      	str	r5, [sp, #0]
   d8580:	f006 fabe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8584:	f104 0110 	add.w	r1, r4, #16
   d8588:	b289      	uxth	r1, r1
   d858a:	9500      	str	r5, [sp, #0]
   d858c:	463b      	mov	r3, r7
   d858e:	4632      	mov	r2, r6
   d8590:	4846      	ldr	r0, [pc, #280]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8592:	f006 fab5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8596:	f104 0112 	add.w	r1, r4, #18
   d859a:	e0f4      	b.n	d8786 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'F')
   d859c:	2846      	cmp	r0, #70	; 0x46
   d859e:	d13d      	bne.n	d861c <_Z6letterciiii+0xa9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d85a0:	b28c      	uxth	r4, r1
   d85a2:	b2d6      	uxtb	r6, r2
   d85a4:	b2df      	uxtb	r7, r3
   d85a6:	b2ed      	uxtb	r5, r5
   d85a8:	f104 010b 	add.w	r1, r4, #11
   d85ac:	463b      	mov	r3, r7
   d85ae:	4632      	mov	r2, r6
   d85b0:	b289      	uxth	r1, r1
   d85b2:	483e      	ldr	r0, [pc, #248]	; (d86ac <_Z6letterciiii+0xb2c>)
   d85b4:	9500      	str	r5, [sp, #0]
   d85b6:	f006 faa3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d85ba:	f104 010c 	add.w	r1, r4, #12
   d85be:	463b      	mov	r3, r7
   d85c0:	4632      	mov	r2, r6
   d85c2:	b289      	uxth	r1, r1
   d85c4:	4839      	ldr	r0, [pc, #228]	; (d86ac <_Z6letterciiii+0xb2c>)
   d85c6:	9500      	str	r5, [sp, #0]
   d85c8:	f006 fa9a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d85cc:	f104 010d 	add.w	r1, r4, #13
   d85d0:	463b      	mov	r3, r7
   d85d2:	4632      	mov	r2, r6
   d85d4:	b289      	uxth	r1, r1
   d85d6:	4835      	ldr	r0, [pc, #212]	; (d86ac <_Z6letterciiii+0xb2c>)
   d85d8:	9500      	str	r5, [sp, #0]
   d85da:	f006 fa91 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d85de:	f104 010e 	add.w	r1, r4, #14
   d85e2:	b289      	uxth	r1, r1
   d85e4:	9500      	str	r5, [sp, #0]
   d85e6:	463b      	mov	r3, r7
   d85e8:	4632      	mov	r2, r6
   d85ea:	4830      	ldr	r0, [pc, #192]	; (d86ac <_Z6letterciiii+0xb2c>)
   d85ec:	f006 fa88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d85f0:	f104 010f 	add.w	r1, r4, #15
   d85f4:	463b      	mov	r3, r7
   d85f6:	4632      	mov	r2, r6
   d85f8:	b289      	uxth	r1, r1
   d85fa:	482c      	ldr	r0, [pc, #176]	; (d86ac <_Z6letterciiii+0xb2c>)
   d85fc:	9500      	str	r5, [sp, #0]
   d85fe:	f006 fa7f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8602:	f104 0110 	add.w	r1, r4, #16
   d8606:	b289      	uxth	r1, r1
   d8608:	9500      	str	r5, [sp, #0]
   d860a:	463b      	mov	r3, r7
   d860c:	4632      	mov	r2, r6
   d860e:	4827      	ldr	r0, [pc, #156]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8610:	f006 fa76 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8614:	f104 0112 	add.w	r1, r4, #18
   d8618:	f000 bcc5 	b.w	d8fa6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'G')
   d861c:	2847      	cmp	r0, #71	; 0x47
   d861e:	d147      	bne.n	d86b0 <_Z6letterciiii+0xb30>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8620:	b28c      	uxth	r4, r1
   d8622:	b2d6      	uxtb	r6, r2
   d8624:	b2df      	uxtb	r7, r3
   d8626:	b2ed      	uxtb	r5, r5
   d8628:	f104 010b 	add.w	r1, r4, #11
   d862c:	463b      	mov	r3, r7
   d862e:	4632      	mov	r2, r6
   d8630:	b289      	uxth	r1, r1
   d8632:	481e      	ldr	r0, [pc, #120]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8634:	9500      	str	r5, [sp, #0]
   d8636:	f006 fa63 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d863a:	f104 010c 	add.w	r1, r4, #12
   d863e:	463b      	mov	r3, r7
   d8640:	4632      	mov	r2, r6
   d8642:	b289      	uxth	r1, r1
   d8644:	4819      	ldr	r0, [pc, #100]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8646:	9500      	str	r5, [sp, #0]
   d8648:	f006 fa5a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d864c:	f104 010d 	add.w	r1, r4, #13
   d8650:	463b      	mov	r3, r7
   d8652:	4632      	mov	r2, r6
   d8654:	b289      	uxth	r1, r1
   d8656:	4815      	ldr	r0, [pc, #84]	; (d86ac <_Z6letterciiii+0xb2c>)
   d8658:	9500      	str	r5, [sp, #0]
   d865a:	f006 fa51 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d865e:	f104 010e 	add.w	r1, r4, #14
   d8662:	463b      	mov	r3, r7
   d8664:	4632      	mov	r2, r6
   d8666:	b289      	uxth	r1, r1
   d8668:	4810      	ldr	r0, [pc, #64]	; (d86ac <_Z6letterciiii+0xb2c>)
   d866a:	9500      	str	r5, [sp, #0]
   d866c:	f006 fa48 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8670:	f104 010f 	add.w	r1, r4, #15
   d8674:	463b      	mov	r3, r7
   d8676:	4632      	mov	r2, r6
   d8678:	b289      	uxth	r1, r1
   d867a:	480c      	ldr	r0, [pc, #48]	; (d86ac <_Z6letterciiii+0xb2c>)
   d867c:	9500      	str	r5, [sp, #0]
   d867e:	f006 fa3f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8682:	f104 0110 	add.w	r1, r4, #16
   d8686:	463b      	mov	r3, r7
   d8688:	4632      	mov	r2, r6
   d868a:	b289      	uxth	r1, r1
   d868c:	4807      	ldr	r0, [pc, #28]	; (d86ac <_Z6letterciiii+0xb2c>)
   d868e:	9500      	str	r5, [sp, #0]
   d8690:	f006 fa36 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8694:	f104 0114 	add.w	r1, r4, #20
   d8698:	b289      	uxth	r1, r1
   d869a:	9500      	str	r5, [sp, #0]
   d869c:	463b      	mov	r3, r7
   d869e:	4632      	mov	r2, r6
   d86a0:	4802      	ldr	r0, [pc, #8]	; (d86ac <_Z6letterciiii+0xb2c>)
   d86a2:	f006 fa2d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d86a6:	f104 011b 	add.w	r1, r4, #27
   d86aa:	e309      	b.n	d8cc0 <_Z6letterciiii+0x1140>
   d86ac:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'H')
   d86b0:	2848      	cmp	r0, #72	; 0x48
   d86b2:	d133      	bne.n	d871c <_Z6letterciiii+0xb9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d86b4:	b28c      	uxth	r4, r1
   d86b6:	b2d6      	uxtb	r6, r2
   d86b8:	b2df      	uxtb	r7, r3
   d86ba:	b2ed      	uxtb	r5, r5
   d86bc:	f104 010b 	add.w	r1, r4, #11
   d86c0:	463b      	mov	r3, r7
   d86c2:	4632      	mov	r2, r6
   d86c4:	b289      	uxth	r1, r1
   d86c6:	48ae      	ldr	r0, [pc, #696]	; (d8980 <_Z6letterciiii+0xe00>)
   d86c8:	9500      	str	r5, [sp, #0]
   d86ca:	f006 fa19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d86ce:	f104 010c 	add.w	r1, r4, #12
   d86d2:	463b      	mov	r3, r7
   d86d4:	4632      	mov	r2, r6
   d86d6:	b289      	uxth	r1, r1
   d86d8:	48a9      	ldr	r0, [pc, #676]	; (d8980 <_Z6letterciiii+0xe00>)
   d86da:	9500      	str	r5, [sp, #0]
   d86dc:	f006 fa10 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d86e0:	f104 010d 	add.w	r1, r4, #13
   d86e4:	463b      	mov	r3, r7
   d86e6:	4632      	mov	r2, r6
   d86e8:	b289      	uxth	r1, r1
   d86ea:	48a5      	ldr	r0, [pc, #660]	; (d8980 <_Z6letterciiii+0xe00>)
   d86ec:	9500      	str	r5, [sp, #0]
   d86ee:	f006 fa07 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d86f2:	f104 010e 	add.w	r1, r4, #14
   d86f6:	b289      	uxth	r1, r1
   d86f8:	9500      	str	r5, [sp, #0]
   d86fa:	463b      	mov	r3, r7
   d86fc:	4632      	mov	r2, r6
   d86fe:	48a0      	ldr	r0, [pc, #640]	; (d8980 <_Z6letterciiii+0xe00>)
   d8700:	f006 f9fe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8704:	f104 010f 	add.w	r1, r4, #15
   d8708:	b289      	uxth	r1, r1
   d870a:	9500      	str	r5, [sp, #0]
   d870c:	463b      	mov	r3, r7
   d870e:	4632      	mov	r2, r6
   d8710:	489b      	ldr	r0, [pc, #620]	; (d8980 <_Z6letterciiii+0xe00>)
   d8712:	f006 f9f5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8716:	f104 0112 	add.w	r1, r4, #18
   d871a:	e346      	b.n	d8daa <_Z6letterciiii+0x122a>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'I')
   d871c:	2849      	cmp	r0, #73	; 0x49
   d871e:	d145      	bne.n	d87ac <_Z6letterciiii+0xc2c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8720:	b28c      	uxth	r4, r1
   d8722:	b2d6      	uxtb	r6, r2
   d8724:	b2df      	uxtb	r7, r3
   d8726:	b2ed      	uxtb	r5, r5
   d8728:	f104 010b 	add.w	r1, r4, #11
   d872c:	463b      	mov	r3, r7
   d872e:	4632      	mov	r2, r6
   d8730:	b289      	uxth	r1, r1
   d8732:	4893      	ldr	r0, [pc, #588]	; (d8980 <_Z6letterciiii+0xe00>)
   d8734:	9500      	str	r5, [sp, #0]
   d8736:	f006 f9e3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d873a:	f104 010f 	add.w	r1, r4, #15
   d873e:	463b      	mov	r3, r7
   d8740:	4632      	mov	r2, r6
   d8742:	b289      	uxth	r1, r1
   d8744:	488e      	ldr	r0, [pc, #568]	; (d8980 <_Z6letterciiii+0xe00>)
   d8746:	9500      	str	r5, [sp, #0]
   d8748:	f006 f9da 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d874c:	f104 0110 	add.w	r1, r4, #16
   d8750:	463b      	mov	r3, r7
   d8752:	4632      	mov	r2, r6
   d8754:	b289      	uxth	r1, r1
   d8756:	488a      	ldr	r0, [pc, #552]	; (d8980 <_Z6letterciiii+0xe00>)
   d8758:	9500      	str	r5, [sp, #0]
   d875a:	f006 f9d1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d875e:	f104 0111 	add.w	r1, r4, #17
   d8762:	463b      	mov	r3, r7
   d8764:	4632      	mov	r2, r6
   d8766:	b289      	uxth	r1, r1
   d8768:	4885      	ldr	r0, [pc, #532]	; (d8980 <_Z6letterciiii+0xe00>)
   d876a:	9500      	str	r5, [sp, #0]
   d876c:	f006 f9c8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8770:	f104 0112 	add.w	r1, r4, #18
   d8774:	b289      	uxth	r1, r1
   d8776:	9500      	str	r5, [sp, #0]
   d8778:	463b      	mov	r3, r7
   d877a:	4632      	mov	r2, r6
   d877c:	4880      	ldr	r0, [pc, #512]	; (d8980 <_Z6letterciiii+0xe00>)
   d877e:	f006 f9bf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8782:	f104 0113 	add.w	r1, r4, #19
   d8786:	463b      	mov	r3, r7
   d8788:	4632      	mov	r2, r6
   d878a:	b289      	uxth	r1, r1
   d878c:	487c      	ldr	r0, [pc, #496]	; (d8980 <_Z6letterciiii+0xe00>)
   d878e:	9500      	str	r5, [sp, #0]
   d8790:	f006 f9b6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8794:	f104 0114 	add.w	r1, r4, #20
   d8798:	b289      	uxth	r1, r1
   d879a:	9500      	str	r5, [sp, #0]
   d879c:	463b      	mov	r3, r7
   d879e:	4632      	mov	r2, r6
   d87a0:	4877      	ldr	r0, [pc, #476]	; (d8980 <_Z6letterciiii+0xe00>)
   d87a2:	f006 f9ad 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d87a6:	f104 011b 	add.w	r1, r4, #27
   d87aa:	e3fc      	b.n	d8fa6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'J')
   d87ac:	284a      	cmp	r0, #74	; 0x4a
   d87ae:	d118      	bne.n	d87e2 <_Z6letterciiii+0xc62>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d87b0:	b28c      	uxth	r4, r1
   d87b2:	b2d6      	uxtb	r6, r2
   d87b4:	b2df      	uxtb	r7, r3
   d87b6:	b2ed      	uxtb	r5, r5
   d87b8:	f104 010c 	add.w	r1, r4, #12
   d87bc:	463b      	mov	r3, r7
   d87be:	4632      	mov	r2, r6
   d87c0:	b289      	uxth	r1, r1
   d87c2:	486f      	ldr	r0, [pc, #444]	; (d8980 <_Z6letterciiii+0xe00>)
   d87c4:	9500      	str	r5, [sp, #0]
   d87c6:	f006 f99b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d87ca:	f104 010f 	add.w	r1, r4, #15
   d87ce:	b289      	uxth	r1, r1
   d87d0:	9500      	str	r5, [sp, #0]
   d87d2:	463b      	mov	r3, r7
   d87d4:	4632      	mov	r2, r6
   d87d6:	486a      	ldr	r0, [pc, #424]	; (d8980 <_Z6letterciiii+0xe00>)
   d87d8:	f006 f992 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d87dc:	f104 0110 	add.w	r1, r4, #16
   d87e0:	e310      	b.n	d8e04 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'K')
   d87e2:	284b      	cmp	r0, #75	; 0x4b
   d87e4:	d118      	bne.n	d8818 <_Z6letterciiii+0xc98>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d87e6:	b28c      	uxth	r4, r1
   d87e8:	b2d6      	uxtb	r6, r2
   d87ea:	b2df      	uxtb	r7, r3
   d87ec:	b2ed      	uxtb	r5, r5
   d87ee:	f104 010b 	add.w	r1, r4, #11
   d87f2:	463b      	mov	r3, r7
   d87f4:	4632      	mov	r2, r6
   d87f6:	b289      	uxth	r1, r1
   d87f8:	4861      	ldr	r0, [pc, #388]	; (d8980 <_Z6letterciiii+0xe00>)
   d87fa:	9500      	str	r5, [sp, #0]
   d87fc:	f006 f980 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8800:	f104 010c 	add.w	r1, r4, #12
   d8804:	b289      	uxth	r1, r1
   d8806:	9500      	str	r5, [sp, #0]
   d8808:	463b      	mov	r3, r7
   d880a:	4632      	mov	r2, r6
   d880c:	485c      	ldr	r0, [pc, #368]	; (d8980 <_Z6letterciiii+0xe00>)
   d880e:	f006 f977 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8812:	f104 010d 	add.w	r1, r4, #13
   d8816:	e390      	b.n	d8f3a <_Z6letterciiii+0x13ba>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'L')
   d8818:	284c      	cmp	r0, #76	; 0x4c
   d881a:	d13c      	bne.n	d8896 <_Z6letterciiii+0xd16>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d881c:	b28c      	uxth	r4, r1
   d881e:	b2d6      	uxtb	r6, r2
   d8820:	b2df      	uxtb	r7, r3
   d8822:	b2ed      	uxtb	r5, r5
   d8824:	f104 010b 	add.w	r1, r4, #11
   d8828:	463b      	mov	r3, r7
   d882a:	4632      	mov	r2, r6
   d882c:	b289      	uxth	r1, r1
   d882e:	4854      	ldr	r0, [pc, #336]	; (d8980 <_Z6letterciiii+0xe00>)
   d8830:	9500      	str	r5, [sp, #0]
   d8832:	f006 f965 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8836:	f104 010c 	add.w	r1, r4, #12
   d883a:	463b      	mov	r3, r7
   d883c:	4632      	mov	r2, r6
   d883e:	b289      	uxth	r1, r1
   d8840:	484f      	ldr	r0, [pc, #316]	; (d8980 <_Z6letterciiii+0xe00>)
   d8842:	9500      	str	r5, [sp, #0]
   d8844:	f006 f95c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8848:	f104 010d 	add.w	r1, r4, #13
   d884c:	463b      	mov	r3, r7
   d884e:	4632      	mov	r2, r6
   d8850:	b289      	uxth	r1, r1
   d8852:	484b      	ldr	r0, [pc, #300]	; (d8980 <_Z6letterciiii+0xe00>)
   d8854:	9500      	str	r5, [sp, #0]
   d8856:	f006 f953 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d885a:	f104 010e 	add.w	r1, r4, #14
   d885e:	463b      	mov	r3, r7
   d8860:	4632      	mov	r2, r6
   d8862:	b289      	uxth	r1, r1
   d8864:	4846      	ldr	r0, [pc, #280]	; (d8980 <_Z6letterciiii+0xe00>)
   d8866:	9500      	str	r5, [sp, #0]
   d8868:	f006 f94a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d886c:	f104 010f 	add.w	r1, r4, #15
   d8870:	463b      	mov	r3, r7
   d8872:	4632      	mov	r2, r6
   d8874:	b289      	uxth	r1, r1
   d8876:	4842      	ldr	r0, [pc, #264]	; (d8980 <_Z6letterciiii+0xe00>)
   d8878:	9500      	str	r5, [sp, #0]
   d887a:	f006 f941 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d887e:	f104 0114 	add.w	r1, r4, #20
   d8882:	b289      	uxth	r1, r1
   d8884:	9500      	str	r5, [sp, #0]
   d8886:	463b      	mov	r3, r7
   d8888:	4632      	mov	r2, r6
   d888a:	483d      	ldr	r0, [pc, #244]	; (d8980 <_Z6letterciiii+0xe00>)
   d888c:	f006 f938 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8890:	f104 011b 	add.w	r1, r4, #27
   d8894:	e1dd      	b.n	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'M')
   d8896:	284d      	cmp	r0, #77	; 0x4d
   d8898:	d174      	bne.n	d8984 <_Z6letterciiii+0xe04>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d889a:	b28c      	uxth	r4, r1
   d889c:	b2d6      	uxtb	r6, r2
   d889e:	b2df      	uxtb	r7, r3
   d88a0:	b2ed      	uxtb	r5, r5
   d88a2:	f104 0111 	add.w	r1, r4, #17
   d88a6:	463b      	mov	r3, r7
   d88a8:	4632      	mov	r2, r6
   d88aa:	b289      	uxth	r1, r1
   d88ac:	4834      	ldr	r0, [pc, #208]	; (d8980 <_Z6letterciiii+0xe00>)
   d88ae:	9500      	str	r5, [sp, #0]
   d88b0:	f006 f926 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d88b4:	f104 010b 	add.w	r1, r4, #11
   d88b8:	463b      	mov	r3, r7
   d88ba:	4632      	mov	r2, r6
   d88bc:	b289      	uxth	r1, r1
   d88be:	4830      	ldr	r0, [pc, #192]	; (d8980 <_Z6letterciiii+0xe00>)
   d88c0:	9500      	str	r5, [sp, #0]
   d88c2:	f006 f91d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d88c6:	f104 010c 	add.w	r1, r4, #12
   d88ca:	463b      	mov	r3, r7
   d88cc:	4632      	mov	r2, r6
   d88ce:	b289      	uxth	r1, r1
   d88d0:	482b      	ldr	r0, [pc, #172]	; (d8980 <_Z6letterciiii+0xe00>)
   d88d2:	9500      	str	r5, [sp, #0]
   d88d4:	f006 f914 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d88d8:	f104 010d 	add.w	r1, r4, #13
   d88dc:	463b      	mov	r3, r7
   d88de:	4632      	mov	r2, r6
   d88e0:	b289      	uxth	r1, r1
   d88e2:	4827      	ldr	r0, [pc, #156]	; (d8980 <_Z6letterciiii+0xe00>)
   d88e4:	9500      	str	r5, [sp, #0]
   d88e6:	f006 f90b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d88ea:	f104 010e 	add.w	r1, r4, #14
   d88ee:	463b      	mov	r3, r7
   d88f0:	4632      	mov	r2, r6
   d88f2:	b289      	uxth	r1, r1
   d88f4:	4822      	ldr	r0, [pc, #136]	; (d8980 <_Z6letterciiii+0xe00>)
   d88f6:	9500      	str	r5, [sp, #0]
   d88f8:	f006 f902 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d88fc:	f104 010f 	add.w	r1, r4, #15
   d8900:	463b      	mov	r3, r7
   d8902:	4632      	mov	r2, r6
   d8904:	b289      	uxth	r1, r1
   d8906:	481e      	ldr	r0, [pc, #120]	; (d8980 <_Z6letterciiii+0xe00>)
   d8908:	9500      	str	r5, [sp, #0]
   d890a:	f006 f8f9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d890e:	f104 011d 	add.w	r1, r4, #29
   d8912:	463b      	mov	r3, r7
   d8914:	4632      	mov	r2, r6
   d8916:	b289      	uxth	r1, r1
   d8918:	4819      	ldr	r0, [pc, #100]	; (d8980 <_Z6letterciiii+0xe00>)
   d891a:	9500      	str	r5, [sp, #0]
   d891c:	f006 f8f0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,R,G,B);
   d8920:	f104 0121 	add.w	r1, r4, #33	; 0x21
   d8924:	463b      	mov	r3, r7
   d8926:	4632      	mov	r2, r6
   d8928:	b289      	uxth	r1, r1
   d892a:	4815      	ldr	r0, [pc, #84]	; (d8980 <_Z6letterciiii+0xe00>)
   d892c:	9500      	str	r5, [sp, #0]
   d892e:	f006 f8e7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d8932:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d8936:	463b      	mov	r3, r7
   d8938:	4632      	mov	r2, r6
   d893a:	b289      	uxth	r1, r1
   d893c:	4810      	ldr	r0, [pc, #64]	; (d8980 <_Z6letterciiii+0xe00>)
   d893e:	9500      	str	r5, [sp, #0]
   d8940:	f006 f8de 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d8944:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d8948:	b289      	uxth	r1, r1
   d894a:	9500      	str	r5, [sp, #0]
   d894c:	463b      	mov	r3, r7
   d894e:	4632      	mov	r2, r6
   d8950:	480b      	ldr	r0, [pc, #44]	; (d8980 <_Z6letterciiii+0xe00>)
   d8952:	f006 f8d5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8956:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d895a:	463b      	mov	r3, r7
   d895c:	4632      	mov	r2, r6
   d895e:	b289      	uxth	r1, r1
   d8960:	4807      	ldr	r0, [pc, #28]	; (d8980 <_Z6letterciiii+0xe00>)
   d8962:	9500      	str	r5, [sp, #0]
   d8964:	f006 f8cc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8968:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d896c:	b289      	uxth	r1, r1
   d896e:	9500      	str	r5, [sp, #0]
   d8970:	463b      	mov	r3, r7
   d8972:	4632      	mov	r2, r6
   d8974:	4802      	ldr	r0, [pc, #8]	; (d8980 <_Z6letterciiii+0xe00>)
   d8976:	f006 f8c3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d897a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d897e:	e168      	b.n	d8c52 <_Z6letterciiii+0x10d2>
   d8980:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'N')
   d8984:	284e      	cmp	r0, #78	; 0x4e
   d8986:	d14e      	bne.n	d8a26 <_Z6letterciiii+0xea6>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d8988:	b28c      	uxth	r4, r1
   d898a:	b2d6      	uxtb	r6, r2
   d898c:	b2df      	uxtb	r7, r3
   d898e:	b2ed      	uxtb	r5, r5
   d8990:	f104 0111 	add.w	r1, r4, #17
   d8994:	463b      	mov	r3, r7
   d8996:	4632      	mov	r2, r6
   d8998:	b289      	uxth	r1, r1
   d899a:	48b2      	ldr	r0, [pc, #712]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d899c:	9500      	str	r5, [sp, #0]
   d899e:	f006 f8af 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d89a2:	f104 010b 	add.w	r1, r4, #11
   d89a6:	463b      	mov	r3, r7
   d89a8:	4632      	mov	r2, r6
   d89aa:	b289      	uxth	r1, r1
   d89ac:	48ad      	ldr	r0, [pc, #692]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d89ae:	9500      	str	r5, [sp, #0]
   d89b0:	f006 f8a6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d89b4:	f104 010c 	add.w	r1, r4, #12
   d89b8:	463b      	mov	r3, r7
   d89ba:	4632      	mov	r2, r6
   d89bc:	b289      	uxth	r1, r1
   d89be:	48a9      	ldr	r0, [pc, #676]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d89c0:	9500      	str	r5, [sp, #0]
   d89c2:	f006 f89d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d89c6:	f104 010d 	add.w	r1, r4, #13
   d89ca:	463b      	mov	r3, r7
   d89cc:	4632      	mov	r2, r6
   d89ce:	b289      	uxth	r1, r1
   d89d0:	48a4      	ldr	r0, [pc, #656]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d89d2:	9500      	str	r5, [sp, #0]
   d89d4:	f006 f894 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d89d8:	f104 010e 	add.w	r1, r4, #14
   d89dc:	463b      	mov	r3, r7
   d89de:	4632      	mov	r2, r6
   d89e0:	b289      	uxth	r1, r1
   d89e2:	48a0      	ldr	r0, [pc, #640]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d89e4:	9500      	str	r5, [sp, #0]
   d89e6:	f006 f88b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d89ea:	f104 010f 	add.w	r1, r4, #15
   d89ee:	463b      	mov	r3, r7
   d89f0:	4632      	mov	r2, r6
   d89f2:	b289      	uxth	r1, r1
   d89f4:	489b      	ldr	r0, [pc, #620]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d89f6:	9500      	str	r5, [sp, #0]
   d89f8:	f006 f882 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d89fc:	f104 011d 	add.w	r1, r4, #29
   d8a00:	463b      	mov	r3, r7
   d8a02:	4632      	mov	r2, r6
   d8a04:	b289      	uxth	r1, r1
   d8a06:	4897      	ldr	r0, [pc, #604]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a08:	9500      	str	r5, [sp, #0]
   d8a0a:	f006 f879 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+35,R,G,B);
   d8a0e:	f104 0123 	add.w	r1, r4, #35	; 0x23
   d8a12:	b289      	uxth	r1, r1
   d8a14:	9500      	str	r5, [sp, #0]
   d8a16:	463b      	mov	r3, r7
   d8a18:	4632      	mov	r2, r6
   d8a1a:	4892      	ldr	r0, [pc, #584]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a1c:	f006 f870 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d8a20:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d8a24:	e251      	b.n	d8eca <_Z6letterciiii+0x134a>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+45,R,G,B);
        strip.setPixelColor(pix+46,R,G,B);
        strip.setPixelColor(pix+47,R,G,B);
    }
    if(ltr == 'O')
   d8a26:	284f      	cmp	r0, #79	; 0x4f
   d8a28:	d13c      	bne.n	d8aa4 <_Z6letterciiii+0xf24>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8a2a:	b28c      	uxth	r4, r1
   d8a2c:	b2d6      	uxtb	r6, r2
   d8a2e:	b2df      	uxtb	r7, r3
   d8a30:	b2ed      	uxtb	r5, r5
   d8a32:	f104 010c 	add.w	r1, r4, #12
   d8a36:	463b      	mov	r3, r7
   d8a38:	4632      	mov	r2, r6
   d8a3a:	b289      	uxth	r1, r1
   d8a3c:	4889      	ldr	r0, [pc, #548]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a3e:	9500      	str	r5, [sp, #0]
   d8a40:	f006 f85e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8a44:	f104 010d 	add.w	r1, r4, #13
   d8a48:	b289      	uxth	r1, r1
   d8a4a:	9500      	str	r5, [sp, #0]
   d8a4c:	463b      	mov	r3, r7
   d8a4e:	4632      	mov	r2, r6
   d8a50:	4884      	ldr	r0, [pc, #528]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a52:	f006 f855 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8a56:	f104 010e 	add.w	r1, r4, #14
   d8a5a:	b289      	uxth	r1, r1
   d8a5c:	9500      	str	r5, [sp, #0]
   d8a5e:	463b      	mov	r3, r7
   d8a60:	4632      	mov	r2, r6
   d8a62:	4880      	ldr	r0, [pc, #512]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a64:	f006 f84c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8a68:	f104 0110 	add.w	r1, r4, #16
   d8a6c:	b289      	uxth	r1, r1
   d8a6e:	9500      	str	r5, [sp, #0]
   d8a70:	463b      	mov	r3, r7
   d8a72:	4632      	mov	r2, r6
   d8a74:	487b      	ldr	r0, [pc, #492]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a76:	f006 f843 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8a7a:	f104 0114 	add.w	r1, r4, #20
   d8a7e:	b289      	uxth	r1, r1
   d8a80:	9500      	str	r5, [sp, #0]
   d8a82:	463b      	mov	r3, r7
   d8a84:	4632      	mov	r2, r6
   d8a86:	4877      	ldr	r0, [pc, #476]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a88:	f006 f83a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8a8c:	f104 011c 	add.w	r1, r4, #28
   d8a90:	b289      	uxth	r1, r1
   d8a92:	9500      	str	r5, [sp, #0]
   d8a94:	463b      	mov	r3, r7
   d8a96:	4632      	mov	r2, r6
   d8a98:	4872      	ldr	r0, [pc, #456]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8a9a:	f006 f831 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8a9e:	f104 011d 	add.w	r1, r4, #29
   d8aa2:	e0cd      	b.n	d8c40 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'P')
   d8aa4:	2850      	cmp	r0, #80	; 0x50
   d8aa6:	d13c      	bne.n	d8b22 <_Z6letterciiii+0xfa2>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8aa8:	b28c      	uxth	r4, r1
   d8aaa:	b2d6      	uxtb	r6, r2
   d8aac:	b2df      	uxtb	r7, r3
   d8aae:	b2ed      	uxtb	r5, r5
   d8ab0:	f104 010b 	add.w	r1, r4, #11
   d8ab4:	463b      	mov	r3, r7
   d8ab6:	4632      	mov	r2, r6
   d8ab8:	b289      	uxth	r1, r1
   d8aba:	486a      	ldr	r0, [pc, #424]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8abc:	9500      	str	r5, [sp, #0]
   d8abe:	f006 f81f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8ac2:	f104 010c 	add.w	r1, r4, #12
   d8ac6:	463b      	mov	r3, r7
   d8ac8:	4632      	mov	r2, r6
   d8aca:	b289      	uxth	r1, r1
   d8acc:	4865      	ldr	r0, [pc, #404]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8ace:	9500      	str	r5, [sp, #0]
   d8ad0:	f006 f816 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8ad4:	f104 010d 	add.w	r1, r4, #13
   d8ad8:	463b      	mov	r3, r7
   d8ada:	4632      	mov	r2, r6
   d8adc:	b289      	uxth	r1, r1
   d8ade:	4861      	ldr	r0, [pc, #388]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8ae0:	9500      	str	r5, [sp, #0]
   d8ae2:	f006 f80d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8ae6:	f104 010e 	add.w	r1, r4, #14
   d8aea:	463b      	mov	r3, r7
   d8aec:	4632      	mov	r2, r6
   d8aee:	b289      	uxth	r1, r1
   d8af0:	485c      	ldr	r0, [pc, #368]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8af2:	9500      	str	r5, [sp, #0]
   d8af4:	f006 f804 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8af8:	f104 010f 	add.w	r1, r4, #15
   d8afc:	463b      	mov	r3, r7
   d8afe:	4632      	mov	r2, r6
   d8b00:	b289      	uxth	r1, r1
   d8b02:	4858      	ldr	r0, [pc, #352]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b04:	9500      	str	r5, [sp, #0]
   d8b06:	f005 fffb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8b0a:	f104 0110 	add.w	r1, r4, #16
   d8b0e:	b289      	uxth	r1, r1
   d8b10:	9500      	str	r5, [sp, #0]
   d8b12:	463b      	mov	r3, r7
   d8b14:	4632      	mov	r2, r6
   d8b16:	4853      	ldr	r0, [pc, #332]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b18:	f005 fff2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8b1c:	f104 0112 	add.w	r1, r4, #18
   d8b20:	e182      	b.n	d8e28 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Q')
   d8b22:	2851      	cmp	r0, #81	; 0x51
   d8b24:	d13c      	bne.n	d8ba0 <_Z6letterciiii+0x1020>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8b26:	b28c      	uxth	r4, r1
   d8b28:	b2d6      	uxtb	r6, r2
   d8b2a:	b2df      	uxtb	r7, r3
   d8b2c:	b2ed      	uxtb	r5, r5
   d8b2e:	f104 010c 	add.w	r1, r4, #12
   d8b32:	463b      	mov	r3, r7
   d8b34:	4632      	mov	r2, r6
   d8b36:	b289      	uxth	r1, r1
   d8b38:	484a      	ldr	r0, [pc, #296]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b3a:	9500      	str	r5, [sp, #0]
   d8b3c:	f005 ffe0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8b40:	f104 010d 	add.w	r1, r4, #13
   d8b44:	463b      	mov	r3, r7
   d8b46:	4632      	mov	r2, r6
   d8b48:	b289      	uxth	r1, r1
   d8b4a:	4846      	ldr	r0, [pc, #280]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b4c:	9500      	str	r5, [sp, #0]
   d8b4e:	f005 ffd7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8b52:	f104 010e 	add.w	r1, r4, #14
   d8b56:	463b      	mov	r3, r7
   d8b58:	4632      	mov	r2, r6
   d8b5a:	b289      	uxth	r1, r1
   d8b5c:	4841      	ldr	r0, [pc, #260]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b5e:	9500      	str	r5, [sp, #0]
   d8b60:	f005 ffce 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8b64:	f104 010f 	add.w	r1, r4, #15
   d8b68:	463b      	mov	r3, r7
   d8b6a:	4632      	mov	r2, r6
   d8b6c:	b289      	uxth	r1, r1
   d8b6e:	483d      	ldr	r0, [pc, #244]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b70:	9500      	str	r5, [sp, #0]
   d8b72:	f005 ffc5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8b76:	f104 0110 	add.w	r1, r4, #16
   d8b7a:	463b      	mov	r3, r7
   d8b7c:	4632      	mov	r2, r6
   d8b7e:	b289      	uxth	r1, r1
   d8b80:	4838      	ldr	r0, [pc, #224]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b82:	9500      	str	r5, [sp, #0]
   d8b84:	f005 ffbc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8b88:	f104 0113 	add.w	r1, r4, #19
   d8b8c:	b289      	uxth	r1, r1
   d8b8e:	9500      	str	r5, [sp, #0]
   d8b90:	463b      	mov	r3, r7
   d8b92:	4632      	mov	r2, r6
   d8b94:	4833      	ldr	r0, [pc, #204]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8b96:	f005 ffb3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8b9a:	f104 011b 	add.w	r1, r4, #27
   d8b9e:	e143      	b.n	d8e28 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'R')
   d8ba0:	2852      	cmp	r0, #82	; 0x52
   d8ba2:	d161      	bne.n	d8c68 <_Z6letterciiii+0x10e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8ba4:	b28c      	uxth	r4, r1
   d8ba6:	b2d6      	uxtb	r6, r2
   d8ba8:	b2df      	uxtb	r7, r3
   d8baa:	b2ed      	uxtb	r5, r5
   d8bac:	f104 010b 	add.w	r1, r4, #11
   d8bb0:	463b      	mov	r3, r7
   d8bb2:	4632      	mov	r2, r6
   d8bb4:	b289      	uxth	r1, r1
   d8bb6:	482b      	ldr	r0, [pc, #172]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8bb8:	9500      	str	r5, [sp, #0]
   d8bba:	f005 ffa1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8bbe:	f104 010c 	add.w	r1, r4, #12
   d8bc2:	463b      	mov	r3, r7
   d8bc4:	4632      	mov	r2, r6
   d8bc6:	b289      	uxth	r1, r1
   d8bc8:	4826      	ldr	r0, [pc, #152]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8bca:	9500      	str	r5, [sp, #0]
   d8bcc:	f005 ff98 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8bd0:	f104 010d 	add.w	r1, r4, #13
   d8bd4:	463b      	mov	r3, r7
   d8bd6:	4632      	mov	r2, r6
   d8bd8:	b289      	uxth	r1, r1
   d8bda:	4822      	ldr	r0, [pc, #136]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8bdc:	9500      	str	r5, [sp, #0]
   d8bde:	f005 ff8f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8be2:	f104 010e 	add.w	r1, r4, #14
   d8be6:	463b      	mov	r3, r7
   d8be8:	4632      	mov	r2, r6
   d8bea:	b289      	uxth	r1, r1
   d8bec:	481d      	ldr	r0, [pc, #116]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8bee:	9500      	str	r5, [sp, #0]
   d8bf0:	f005 ff86 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8bf4:	f104 010f 	add.w	r1, r4, #15
   d8bf8:	463b      	mov	r3, r7
   d8bfa:	4632      	mov	r2, r6
   d8bfc:	b289      	uxth	r1, r1
   d8bfe:	4819      	ldr	r0, [pc, #100]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c00:	9500      	str	r5, [sp, #0]
   d8c02:	f005 ff7d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8c06:	f104 0110 	add.w	r1, r4, #16
   d8c0a:	463b      	mov	r3, r7
   d8c0c:	4632      	mov	r2, r6
   d8c0e:	b289      	uxth	r1, r1
   d8c10:	4814      	ldr	r0, [pc, #80]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c12:	9500      	str	r5, [sp, #0]
   d8c14:	f005 ff74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8c18:	f104 0112 	add.w	r1, r4, #18
   d8c1c:	b289      	uxth	r1, r1
   d8c1e:	9500      	str	r5, [sp, #0]
   d8c20:	463b      	mov	r3, r7
   d8c22:	4632      	mov	r2, r6
   d8c24:	480f      	ldr	r0, [pc, #60]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c26:	f005 ff6b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8c2a:	f104 011b 	add.w	r1, r4, #27
   d8c2e:	b289      	uxth	r1, r1
   d8c30:	9500      	str	r5, [sp, #0]
   d8c32:	463b      	mov	r3, r7
   d8c34:	4632      	mov	r2, r6
   d8c36:	480b      	ldr	r0, [pc, #44]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c38:	f005 ff62 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8c3c:	f104 011c 	add.w	r1, r4, #28
   d8c40:	b289      	uxth	r1, r1
   d8c42:	9500      	str	r5, [sp, #0]
   d8c44:	463b      	mov	r3, r7
   d8c46:	4632      	mov	r2, r6
   d8c48:	4806      	ldr	r0, [pc, #24]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c4a:	f005 ff59 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d8c4e:	f104 011e 	add.w	r1, r4, #30
   d8c52:	9500      	str	r5, [sp, #0]
   d8c54:	463b      	mov	r3, r7
   d8c56:	4632      	mov	r2, r6
   d8c58:	b289      	uxth	r1, r1
   d8c5a:	4802      	ldr	r0, [pc, #8]	; (d8c64 <_Z6letterciiii+0x10e4>)
   d8c5c:	f005 ff50 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d8c60:	e302      	b.n	d9268 <_Z6letterciiii+0x16e8>
   d8c62:	bf00      	nop
   d8c64:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'S')
   d8c68:	2853      	cmp	r0, #83	; 0x53
   d8c6a:	d133      	bne.n	d8cd4 <_Z6letterciiii+0x1154>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8c6c:	b28c      	uxth	r4, r1
   d8c6e:	b2d6      	uxtb	r6, r2
   d8c70:	b2df      	uxtb	r7, r3
   d8c72:	b2ed      	uxtb	r5, r5
   d8c74:	f104 010b 	add.w	r1, r4, #11
   d8c78:	463b      	mov	r3, r7
   d8c7a:	4632      	mov	r2, r6
   d8c7c:	b289      	uxth	r1, r1
   d8c7e:	48a5      	ldr	r0, [pc, #660]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8c80:	9500      	str	r5, [sp, #0]
   d8c82:	f005 ff3d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8c86:	f104 010e 	add.w	r1, r4, #14
   d8c8a:	463b      	mov	r3, r7
   d8c8c:	4632      	mov	r2, r6
   d8c8e:	b289      	uxth	r1, r1
   d8c90:	48a0      	ldr	r0, [pc, #640]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8c92:	9500      	str	r5, [sp, #0]
   d8c94:	f005 ff34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8c98:	f104 0110 	add.w	r1, r4, #16
   d8c9c:	463b      	mov	r3, r7
   d8c9e:	4632      	mov	r2, r6
   d8ca0:	b289      	uxth	r1, r1
   d8ca2:	489c      	ldr	r0, [pc, #624]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8ca4:	9500      	str	r5, [sp, #0]
   d8ca6:	f005 ff2b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8caa:	f104 0112 	add.w	r1, r4, #18
   d8cae:	b289      	uxth	r1, r1
   d8cb0:	9500      	str	r5, [sp, #0]
   d8cb2:	463b      	mov	r3, r7
   d8cb4:	4632      	mov	r2, r6
   d8cb6:	4897      	ldr	r0, [pc, #604]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8cb8:	f005 ff22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8cbc:	f104 0114 	add.w	r1, r4, #20
   d8cc0:	b289      	uxth	r1, r1
   d8cc2:	9500      	str	r5, [sp, #0]
   d8cc4:	463b      	mov	r3, r7
   d8cc6:	4632      	mov	r2, r6
   d8cc8:	4892      	ldr	r0, [pc, #584]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8cca:	f005 ff19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8cce:	f104 011c 	add.w	r1, r4, #28
   d8cd2:	e168      	b.n	d8fa6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'T')
   d8cd4:	2854      	cmp	r0, #84	; 0x54
   d8cd6:	d133      	bne.n	d8d40 <_Z6letterciiii+0x11c0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d8cd8:	b28c      	uxth	r4, r1
   d8cda:	b2d6      	uxtb	r6, r2
   d8cdc:	b2df      	uxtb	r7, r3
   d8cde:	b2ed      	uxtb	r5, r5
   d8ce0:	f104 010f 	add.w	r1, r4, #15
   d8ce4:	463b      	mov	r3, r7
   d8ce6:	4632      	mov	r2, r6
   d8ce8:	b289      	uxth	r1, r1
   d8cea:	488a      	ldr	r0, [pc, #552]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8cec:	9500      	str	r5, [sp, #0]
   d8cee:	f005 ff07 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8cf2:	f104 0110 	add.w	r1, r4, #16
   d8cf6:	463b      	mov	r3, r7
   d8cf8:	4632      	mov	r2, r6
   d8cfa:	b289      	uxth	r1, r1
   d8cfc:	4885      	ldr	r0, [pc, #532]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8cfe:	9500      	str	r5, [sp, #0]
   d8d00:	f005 fefe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8d04:	f104 0111 	add.w	r1, r4, #17
   d8d08:	463b      	mov	r3, r7
   d8d0a:	4632      	mov	r2, r6
   d8d0c:	b289      	uxth	r1, r1
   d8d0e:	4881      	ldr	r0, [pc, #516]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d10:	9500      	str	r5, [sp, #0]
   d8d12:	f005 fef5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8d16:	f104 0112 	add.w	r1, r4, #18
   d8d1a:	463b      	mov	r3, r7
   d8d1c:	4632      	mov	r2, r6
   d8d1e:	b289      	uxth	r1, r1
   d8d20:	487c      	ldr	r0, [pc, #496]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d22:	9500      	str	r5, [sp, #0]
   d8d24:	f005 feec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8d28:	f104 0113 	add.w	r1, r4, #19
   d8d2c:	b289      	uxth	r1, r1
   d8d2e:	9500      	str	r5, [sp, #0]
   d8d30:	463b      	mov	r3, r7
   d8d32:	4632      	mov	r2, r6
   d8d34:	4877      	ldr	r0, [pc, #476]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d36:	f005 fee3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8d3a:	f104 0114 	add.w	r1, r4, #20
   d8d3e:	e132      	b.n	d8fa6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'U')
   d8d40:	2855      	cmp	r0, #85	; 0x55
   d8d42:	d13c      	bne.n	d8dbe <_Z6letterciiii+0x123e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8d44:	b28c      	uxth	r4, r1
   d8d46:	b2d6      	uxtb	r6, r2
   d8d48:	b2df      	uxtb	r7, r3
   d8d4a:	b2ed      	uxtb	r5, r5
   d8d4c:	f104 010b 	add.w	r1, r4, #11
   d8d50:	463b      	mov	r3, r7
   d8d52:	4632      	mov	r2, r6
   d8d54:	b289      	uxth	r1, r1
   d8d56:	486f      	ldr	r0, [pc, #444]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d58:	9500      	str	r5, [sp, #0]
   d8d5a:	f005 fed1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8d5e:	f104 010c 	add.w	r1, r4, #12
   d8d62:	463b      	mov	r3, r7
   d8d64:	4632      	mov	r2, r6
   d8d66:	b289      	uxth	r1, r1
   d8d68:	486a      	ldr	r0, [pc, #424]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d6a:	9500      	str	r5, [sp, #0]
   d8d6c:	f005 fec8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8d70:	f104 010d 	add.w	r1, r4, #13
   d8d74:	463b      	mov	r3, r7
   d8d76:	4632      	mov	r2, r6
   d8d78:	b289      	uxth	r1, r1
   d8d7a:	4866      	ldr	r0, [pc, #408]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d7c:	9500      	str	r5, [sp, #0]
   d8d7e:	f005 febf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8d82:	f104 010e 	add.w	r1, r4, #14
   d8d86:	b289      	uxth	r1, r1
   d8d88:	9500      	str	r5, [sp, #0]
   d8d8a:	463b      	mov	r3, r7
   d8d8c:	4632      	mov	r2, r6
   d8d8e:	4861      	ldr	r0, [pc, #388]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8d90:	f005 feb6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8d94:	f104 010f 	add.w	r1, r4, #15
   d8d98:	b289      	uxth	r1, r1
   d8d9a:	9500      	str	r5, [sp, #0]
   d8d9c:	463b      	mov	r3, r7
   d8d9e:	4632      	mov	r2, r6
   d8da0:	485c      	ldr	r0, [pc, #368]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8da2:	f005 fead 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8da6:	f104 0114 	add.w	r1, r4, #20
   d8daa:	b289      	uxth	r1, r1
   d8dac:	9500      	str	r5, [sp, #0]
   d8dae:	463b      	mov	r3, r7
   d8db0:	4632      	mov	r2, r6
   d8db2:	4858      	ldr	r0, [pc, #352]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8db4:	f005 fea4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8db8:	f104 011b 	add.w	r1, r4, #27
   d8dbc:	e02b      	b.n	d8e16 <_Z6letterciiii+0x1296>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'V')
   d8dbe:	2856      	cmp	r0, #86	; 0x56
   d8dc0:	d13c      	bne.n	d8e3c <_Z6letterciiii+0x12bc>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8dc2:	b28c      	uxth	r4, r1
   d8dc4:	b2d6      	uxtb	r6, r2
   d8dc6:	b2df      	uxtb	r7, r3
   d8dc8:	b2ed      	uxtb	r5, r5
   d8dca:	f104 010c 	add.w	r1, r4, #12
   d8dce:	463b      	mov	r3, r7
   d8dd0:	4632      	mov	r2, r6
   d8dd2:	b289      	uxth	r1, r1
   d8dd4:	484f      	ldr	r0, [pc, #316]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8dd6:	9500      	str	r5, [sp, #0]
   d8dd8:	f005 fe92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8ddc:	f104 010d 	add.w	r1, r4, #13
   d8de0:	463b      	mov	r3, r7
   d8de2:	4632      	mov	r2, r6
   d8de4:	b289      	uxth	r1, r1
   d8de6:	484b      	ldr	r0, [pc, #300]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8de8:	9500      	str	r5, [sp, #0]
   d8dea:	f005 fe89 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8dee:	f104 010e 	add.w	r1, r4, #14
   d8df2:	b289      	uxth	r1, r1
   d8df4:	9500      	str	r5, [sp, #0]
   d8df6:	463b      	mov	r3, r7
   d8df8:	4632      	mov	r2, r6
   d8dfa:	4846      	ldr	r0, [pc, #280]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8dfc:	f005 fe80 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8e00:	f104 010f 	add.w	r1, r4, #15
   d8e04:	b289      	uxth	r1, r1
   d8e06:	9500      	str	r5, [sp, #0]
   d8e08:	463b      	mov	r3, r7
   d8e0a:	4632      	mov	r2, r6
   d8e0c:	4841      	ldr	r0, [pc, #260]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e0e:	f005 fe77 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8e12:	f104 0114 	add.w	r1, r4, #20
   d8e16:	b289      	uxth	r1, r1
   d8e18:	9500      	str	r5, [sp, #0]
   d8e1a:	463b      	mov	r3, r7
   d8e1c:	4632      	mov	r2, r6
   d8e1e:	483d      	ldr	r0, [pc, #244]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e20:	f005 fe6e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8e24:	f104 011c 	add.w	r1, r4, #28
   d8e28:	b289      	uxth	r1, r1
   d8e2a:	9500      	str	r5, [sp, #0]
   d8e2c:	463b      	mov	r3, r7
   d8e2e:	4632      	mov	r2, r6
   d8e30:	4838      	ldr	r0, [pc, #224]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e32:	f005 fe65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8e36:	f104 011d 	add.w	r1, r4, #29
   d8e3a:	e0ab      	b.n	d8f94 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'W')
   d8e3c:	2857      	cmp	r0, #87	; 0x57
   d8e3e:	d16b      	bne.n	d8f18 <_Z6letterciiii+0x1398>
    {
        strip.setPixelColor(pix+20,R,G,B);
   d8e40:	b28c      	uxth	r4, r1
   d8e42:	b2d6      	uxtb	r6, r2
   d8e44:	b2df      	uxtb	r7, r3
   d8e46:	b2ed      	uxtb	r5, r5
   d8e48:	f104 0114 	add.w	r1, r4, #20
   d8e4c:	463b      	mov	r3, r7
   d8e4e:	4632      	mov	r2, r6
   d8e50:	b289      	uxth	r1, r1
   d8e52:	4830      	ldr	r0, [pc, #192]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e54:	9500      	str	r5, [sp, #0]
   d8e56:	f005 fe53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8e5a:	f104 010e 	add.w	r1, r4, #14
   d8e5e:	463b      	mov	r3, r7
   d8e60:	4632      	mov	r2, r6
   d8e62:	b289      	uxth	r1, r1
   d8e64:	482b      	ldr	r0, [pc, #172]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e66:	9500      	str	r5, [sp, #0]
   d8e68:	f005 fe4a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8e6c:	f104 010c 	add.w	r1, r4, #12
   d8e70:	463b      	mov	r3, r7
   d8e72:	4632      	mov	r2, r6
   d8e74:	b289      	uxth	r1, r1
   d8e76:	4827      	ldr	r0, [pc, #156]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e78:	9500      	str	r5, [sp, #0]
   d8e7a:	f005 fe41 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8e7e:	f104 010d 	add.w	r1, r4, #13
   d8e82:	463b      	mov	r3, r7
   d8e84:	4632      	mov	r2, r6
   d8e86:	b289      	uxth	r1, r1
   d8e88:	4822      	ldr	r0, [pc, #136]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e8a:	9500      	str	r5, [sp, #0]
   d8e8c:	f005 fe38 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8e90:	f104 010f 	add.w	r1, r4, #15
   d8e94:	463b      	mov	r3, r7
   d8e96:	4632      	mov	r2, r6
   d8e98:	b289      	uxth	r1, r1
   d8e9a:	481e      	ldr	r0, [pc, #120]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8e9c:	9500      	str	r5, [sp, #0]
   d8e9e:	f005 fe2f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8ea2:	f104 011c 	add.w	r1, r4, #28
   d8ea6:	463b      	mov	r3, r7
   d8ea8:	4632      	mov	r2, r6
   d8eaa:	b289      	uxth	r1, r1
   d8eac:	4819      	ldr	r0, [pc, #100]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8eae:	9500      	str	r5, [sp, #0]
   d8eb0:	f005 fe26 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8eb4:	f104 011d 	add.w	r1, r4, #29
   d8eb8:	b289      	uxth	r1, r1
   d8eba:	9500      	str	r5, [sp, #0]
   d8ebc:	463b      	mov	r3, r7
   d8ebe:	4632      	mov	r2, r6
   d8ec0:	4814      	ldr	r0, [pc, #80]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8ec2:	f005 fe1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d8ec6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8eca:	463b      	mov	r3, r7
   d8ecc:	4632      	mov	r2, r6
   d8ece:	b289      	uxth	r1, r1
   d8ed0:	4810      	ldr	r0, [pc, #64]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8ed2:	9500      	str	r5, [sp, #0]
   d8ed4:	f005 fe14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8ed8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8edc:	463b      	mov	r3, r7
   d8ede:	4632      	mov	r2, r6
   d8ee0:	b289      	uxth	r1, r1
   d8ee2:	480c      	ldr	r0, [pc, #48]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8ee4:	9500      	str	r5, [sp, #0]
   d8ee6:	f005 fe0b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8eea:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8eee:	463b      	mov	r3, r7
   d8ef0:	4632      	mov	r2, r6
   d8ef2:	b289      	uxth	r1, r1
   d8ef4:	4807      	ldr	r0, [pc, #28]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8ef6:	9500      	str	r5, [sp, #0]
   d8ef8:	f005 fe02 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d8efc:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d8f00:	b289      	uxth	r1, r1
   d8f02:	9500      	str	r5, [sp, #0]
   d8f04:	463b      	mov	r3, r7
   d8f06:	4632      	mov	r2, r6
   d8f08:	4802      	ldr	r0, [pc, #8]	; (d8f14 <_Z6letterciiii+0x1394>)
   d8f0a:	f005 fdf9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d8f0e:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d8f12:	e69e      	b.n	d8c52 <_Z6letterciiii+0x10d2>
   d8f14:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'X')
   d8f18:	2858      	cmp	r0, #88	; 0x58
   d8f1a:	d14e      	bne.n	d8fba <_Z6letterciiii+0x143a>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8f1c:	b28c      	uxth	r4, r1
   d8f1e:	b2d6      	uxtb	r6, r2
   d8f20:	b2df      	uxtb	r7, r3
   d8f22:	b2ed      	uxtb	r5, r5
   d8f24:	f104 010b 	add.w	r1, r4, #11
   d8f28:	b289      	uxth	r1, r1
   d8f2a:	9500      	str	r5, [sp, #0]
   d8f2c:	463b      	mov	r3, r7
   d8f2e:	4632      	mov	r2, r6
   d8f30:	48a2      	ldr	r0, [pc, #648]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f32:	f005 fde5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8f36:	f104 010c 	add.w	r1, r4, #12
   d8f3a:	463b      	mov	r3, r7
   d8f3c:	4632      	mov	r2, r6
   d8f3e:	b289      	uxth	r1, r1
   d8f40:	489e      	ldr	r0, [pc, #632]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f42:	9500      	str	r5, [sp, #0]
   d8f44:	f005 fddc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8f48:	f104 010e 	add.w	r1, r4, #14
   d8f4c:	463b      	mov	r3, r7
   d8f4e:	4632      	mov	r2, r6
   d8f50:	b289      	uxth	r1, r1
   d8f52:	489a      	ldr	r0, [pc, #616]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f54:	9500      	str	r5, [sp, #0]
   d8f56:	f005 fdd3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8f5a:	f104 010f 	add.w	r1, r4, #15
   d8f5e:	463b      	mov	r3, r7
   d8f60:	4632      	mov	r2, r6
   d8f62:	b289      	uxth	r1, r1
   d8f64:	4895      	ldr	r0, [pc, #596]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f66:	9500      	str	r5, [sp, #0]
   d8f68:	f005 fdca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8f6c:	f104 0112 	add.w	r1, r4, #18
   d8f70:	463b      	mov	r3, r7
   d8f72:	4632      	mov	r2, r6
   d8f74:	b289      	uxth	r1, r1
   d8f76:	4891      	ldr	r0, [pc, #580]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f78:	9500      	str	r5, [sp, #0]
   d8f7a:	f005 fdc1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8f7e:	f104 011b 	add.w	r1, r4, #27
   d8f82:	b289      	uxth	r1, r1
   d8f84:	9500      	str	r5, [sp, #0]
   d8f86:	463b      	mov	r3, r7
   d8f88:	4632      	mov	r2, r6
   d8f8a:	488c      	ldr	r0, [pc, #560]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f8c:	f005 fdb8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8f90:	f104 011c 	add.w	r1, r4, #28
   d8f94:	b289      	uxth	r1, r1
   d8f96:	9500      	str	r5, [sp, #0]
   d8f98:	463b      	mov	r3, r7
   d8f9a:	4632      	mov	r2, r6
   d8f9c:	4887      	ldr	r0, [pc, #540]	; (d91bc <_Z6letterciiii+0x163c>)
   d8f9e:	f005 fdaf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d8fa2:	f104 011e 	add.w	r1, r4, #30
   d8fa6:	b289      	uxth	r1, r1
   d8fa8:	9500      	str	r5, [sp, #0]
   d8faa:	463b      	mov	r3, r7
   d8fac:	4632      	mov	r2, r6
   d8fae:	4883      	ldr	r0, [pc, #524]	; (d91bc <_Z6letterciiii+0x163c>)
   d8fb0:	f005 fda6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d8fb4:	f104 011f 	add.w	r1, r4, #31
   d8fb8:	e64b      	b.n	d8c52 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'Y')
   d8fba:	2859      	cmp	r0, #89	; 0x59
   d8fbc:	d12a      	bne.n	d9014 <_Z6letterciiii+0x1494>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d8fbe:	b28c      	uxth	r4, r1
   d8fc0:	b2d6      	uxtb	r6, r2
   d8fc2:	b2df      	uxtb	r7, r3
   d8fc4:	b2ed      	uxtb	r5, r5
   d8fc6:	f104 010e 	add.w	r1, r4, #14
   d8fca:	463b      	mov	r3, r7
   d8fcc:	4632      	mov	r2, r6
   d8fce:	b289      	uxth	r1, r1
   d8fd0:	487a      	ldr	r0, [pc, #488]	; (d91bc <_Z6letterciiii+0x163c>)
   d8fd2:	9500      	str	r5, [sp, #0]
   d8fd4:	f005 fd94 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8fd8:	f104 010f 	add.w	r1, r4, #15
   d8fdc:	463b      	mov	r3, r7
   d8fde:	4632      	mov	r2, r6
   d8fe0:	b289      	uxth	r1, r1
   d8fe2:	4876      	ldr	r0, [pc, #472]	; (d91bc <_Z6letterciiii+0x163c>)
   d8fe4:	9500      	str	r5, [sp, #0]
   d8fe6:	f005 fd8b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8fea:	f104 0112 	add.w	r1, r4, #18
   d8fee:	463b      	mov	r3, r7
   d8ff0:	4632      	mov	r2, r6
   d8ff2:	b289      	uxth	r1, r1
   d8ff4:	4871      	ldr	r0, [pc, #452]	; (d91bc <_Z6letterciiii+0x163c>)
   d8ff6:	9500      	str	r5, [sp, #0]
   d8ff8:	f005 fd82 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8ffc:	f104 0113 	add.w	r1, r4, #19
   d9000:	b289      	uxth	r1, r1
   d9002:	9500      	str	r5, [sp, #0]
   d9004:	463b      	mov	r3, r7
   d9006:	4632      	mov	r2, r6
   d9008:	486c      	ldr	r0, [pc, #432]	; (d91bc <_Z6letterciiii+0x163c>)
   d900a:	f005 fd79 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d900e:	f104 0114 	add.w	r1, r4, #20
   d9012:	e7bf      	b.n	d8f94 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Z')
   d9014:	285a      	cmp	r0, #90	; 0x5a
   d9016:	d13c      	bne.n	d9092 <_Z6letterciiii+0x1512>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9018:	b28c      	uxth	r4, r1
   d901a:	b2d6      	uxtb	r6, r2
   d901c:	b2df      	uxtb	r7, r3
   d901e:	b2ed      	uxtb	r5, r5
   d9020:	f104 010b 	add.w	r1, r4, #11
   d9024:	463b      	mov	r3, r7
   d9026:	4632      	mov	r2, r6
   d9028:	b289      	uxth	r1, r1
   d902a:	4864      	ldr	r0, [pc, #400]	; (d91bc <_Z6letterciiii+0x163c>)
   d902c:	9500      	str	r5, [sp, #0]
   d902e:	f005 fd67 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d9032:	f104 010c 	add.w	r1, r4, #12
   d9036:	463b      	mov	r3, r7
   d9038:	4632      	mov	r2, r6
   d903a:	b289      	uxth	r1, r1
   d903c:	485f      	ldr	r0, [pc, #380]	; (d91bc <_Z6letterciiii+0x163c>)
   d903e:	9500      	str	r5, [sp, #0]
   d9040:	f005 fd5e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9044:	f104 010f 	add.w	r1, r4, #15
   d9048:	463b      	mov	r3, r7
   d904a:	4632      	mov	r2, r6
   d904c:	b289      	uxth	r1, r1
   d904e:	485b      	ldr	r0, [pc, #364]	; (d91bc <_Z6letterciiii+0x163c>)
   d9050:	9500      	str	r5, [sp, #0]
   d9052:	f005 fd55 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d9056:	f104 0110 	add.w	r1, r4, #16
   d905a:	463b      	mov	r3, r7
   d905c:	4632      	mov	r2, r6
   d905e:	b289      	uxth	r1, r1
   d9060:	4856      	ldr	r0, [pc, #344]	; (d91bc <_Z6letterciiii+0x163c>)
   d9062:	9500      	str	r5, [sp, #0]
   d9064:	f005 fd4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9068:	f104 0112 	add.w	r1, r4, #18
   d906c:	463b      	mov	r3, r7
   d906e:	4632      	mov	r2, r6
   d9070:	b289      	uxth	r1, r1
   d9072:	4852      	ldr	r0, [pc, #328]	; (d91bc <_Z6letterciiii+0x163c>)
   d9074:	9500      	str	r5, [sp, #0]
   d9076:	f005 fd43 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d907a:	f104 0114 	add.w	r1, r4, #20
   d907e:	b289      	uxth	r1, r1
   d9080:	9500      	str	r5, [sp, #0]
   d9082:	463b      	mov	r3, r7
   d9084:	4632      	mov	r2, r6
   d9086:	484d      	ldr	r0, [pc, #308]	; (d91bc <_Z6letterciiii+0x163c>)
   d9088:	f005 fd3a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d908c:	f104 011b 	add.w	r1, r4, #27
   d9090:	e780      	b.n	d8f94 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == '0')
   d9092:	2830      	cmp	r0, #48	; 0x30
   d9094:	d105      	bne.n	d90a2 <_Z6letterciiii+0x1522>
    {
        snum(0,pix+15,R,G,B);
   d9096:	9500      	str	r5, [sp, #0]
   d9098:	310f      	adds	r1, #15
   d909a:	2000      	movs	r0, #0
   d909c:	f7fd f9ce 	bl	d643c <_Z4snumiiiii>
   d90a0:	e0e2      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '1')
   d90a2:	2831      	cmp	r0, #49	; 0x31
   d90a4:	d105      	bne.n	d90b2 <_Z6letterciiii+0x1532>
    {
        snum(1,pix+15,R,G,B);
   d90a6:	9500      	str	r5, [sp, #0]
   d90a8:	310f      	adds	r1, #15
   d90aa:	2001      	movs	r0, #1
   d90ac:	f7fd f9c6 	bl	d643c <_Z4snumiiiii>
   d90b0:	e0da      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '2')
   d90b2:	2832      	cmp	r0, #50	; 0x32
   d90b4:	d105      	bne.n	d90c2 <_Z6letterciiii+0x1542>
    {
        snum(2,pix+15,R,G,B);
   d90b6:	9500      	str	r5, [sp, #0]
   d90b8:	310f      	adds	r1, #15
   d90ba:	2002      	movs	r0, #2
   d90bc:	f7fd f9be 	bl	d643c <_Z4snumiiiii>
   d90c0:	e0d2      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '3')
   d90c2:	2833      	cmp	r0, #51	; 0x33
   d90c4:	d105      	bne.n	d90d2 <_Z6letterciiii+0x1552>
    {
        snum(3,pix+15,R,G,B);
   d90c6:	9500      	str	r5, [sp, #0]
   d90c8:	310f      	adds	r1, #15
   d90ca:	2003      	movs	r0, #3
   d90cc:	f7fd f9b6 	bl	d643c <_Z4snumiiiii>
   d90d0:	e0ca      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '4')
   d90d2:	2834      	cmp	r0, #52	; 0x34
   d90d4:	d105      	bne.n	d90e2 <_Z6letterciiii+0x1562>
    {
        snum(4,pix+15,R,G,B);
   d90d6:	9500      	str	r5, [sp, #0]
   d90d8:	310f      	adds	r1, #15
   d90da:	2004      	movs	r0, #4
   d90dc:	f7fd f9ae 	bl	d643c <_Z4snumiiiii>
   d90e0:	e0c2      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '5')
   d90e2:	2835      	cmp	r0, #53	; 0x35
   d90e4:	d105      	bne.n	d90f2 <_Z6letterciiii+0x1572>
    {
        snum(5,pix+15,R,G,B);
   d90e6:	9500      	str	r5, [sp, #0]
   d90e8:	310f      	adds	r1, #15
   d90ea:	2005      	movs	r0, #5
   d90ec:	f7fd f9a6 	bl	d643c <_Z4snumiiiii>
   d90f0:	e0ba      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '6')
   d90f2:	2836      	cmp	r0, #54	; 0x36
   d90f4:	d105      	bne.n	d9102 <_Z6letterciiii+0x1582>
    {
        snum(6,pix+15,R,G,B);
   d90f6:	9500      	str	r5, [sp, #0]
   d90f8:	310f      	adds	r1, #15
   d90fa:	2006      	movs	r0, #6
   d90fc:	f7fd f99e 	bl	d643c <_Z4snumiiiii>
   d9100:	e0b2      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '7')
   d9102:	2837      	cmp	r0, #55	; 0x37
   d9104:	d105      	bne.n	d9112 <_Z6letterciiii+0x1592>
    {
        snum(7,pix+15,R,G,B);
   d9106:	9500      	str	r5, [sp, #0]
   d9108:	310f      	adds	r1, #15
   d910a:	2007      	movs	r0, #7
   d910c:	f7fd f996 	bl	d643c <_Z4snumiiiii>
   d9110:	e0aa      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '8')
   d9112:	2838      	cmp	r0, #56	; 0x38
   d9114:	d105      	bne.n	d9122 <_Z6letterciiii+0x15a2>
    {
        snum(8,pix+15,R,G,B);
   d9116:	9500      	str	r5, [sp, #0]
   d9118:	310f      	adds	r1, #15
   d911a:	2008      	movs	r0, #8
   d911c:	f7fd f98e 	bl	d643c <_Z4snumiiiii>
   d9120:	e0a2      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '9')
   d9122:	2839      	cmp	r0, #57	; 0x39
   d9124:	d105      	bne.n	d9132 <_Z6letterciiii+0x15b2>
    {
        snum(9,pix+15,R,G,B);
   d9126:	9500      	str	r5, [sp, #0]
   d9128:	310f      	adds	r1, #15
   d912a:	2009      	movs	r0, #9
   d912c:	f7fd f986 	bl	d643c <_Z4snumiiiii>
   d9130:	e09a      	b.n	d9268 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '!')
   d9132:	2821      	cmp	r0, #33	; 0x21
   d9134:	d124      	bne.n	d9180 <_Z6letterciiii+0x1600>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9136:	b28c      	uxth	r4, r1
   d9138:	b2d6      	uxtb	r6, r2
   d913a:	b2df      	uxtb	r7, r3
   d913c:	b2ed      	uxtb	r5, r5
   d913e:	f104 010b 	add.w	r1, r4, #11
   d9142:	463b      	mov	r3, r7
   d9144:	4632      	mov	r2, r6
   d9146:	b289      	uxth	r1, r1
   d9148:	481c      	ldr	r0, [pc, #112]	; (d91bc <_Z6letterciiii+0x163c>)
   d914a:	9500      	str	r5, [sp, #0]
   d914c:	f005 fcd8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d9150:	f104 010d 	add.w	r1, r4, #13
   d9154:	463b      	mov	r3, r7
   d9156:	4632      	mov	r2, r6
   d9158:	b289      	uxth	r1, r1
   d915a:	4818      	ldr	r0, [pc, #96]	; (d91bc <_Z6letterciiii+0x163c>)
   d915c:	9500      	str	r5, [sp, #0]
   d915e:	f005 fccf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d9162:	f104 010e 	add.w	r1, r4, #14
   d9166:	463b      	mov	r3, r7
   d9168:	4632      	mov	r2, r6
   d916a:	b289      	uxth	r1, r1
   d916c:	9500      	str	r5, [sp, #0]
   d916e:	4813      	ldr	r0, [pc, #76]	; (d91bc <_Z6letterciiii+0x163c>)
   d9170:	f005 fcc6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9174:	f104 010f 	add.w	r1, r4, #15
   d9178:	9508      	str	r5, [sp, #32]
   d917a:	463b      	mov	r3, r7
   d917c:	4632      	mov	r2, r6
   d917e:	e06c      	b.n	d925a <_Z6letterciiii+0x16da>
    }
    if(ltr == '.')
   d9180:	282e      	cmp	r0, #46	; 0x2e
   d9182:	d105      	bne.n	d9190 <_Z6letterciiii+0x1610>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9184:	b2ed      	uxtb	r5, r5
   d9186:	310b      	adds	r1, #11
   d9188:	9508      	str	r5, [sp, #32]
   d918a:	b2db      	uxtb	r3, r3
   d918c:	b2d2      	uxtb	r2, r2
   d918e:	e064      	b.n	d925a <_Z6letterciiii+0x16da>
    }
    if(ltr == ':')
   d9190:	283a      	cmp	r0, #58	; 0x3a
   d9192:	d115      	bne.n	d91c0 <_Z6letterciiii+0x1640>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d9194:	b28c      	uxth	r4, r1
   d9196:	b2d6      	uxtb	r6, r2
   d9198:	b2df      	uxtb	r7, r3
   d919a:	b2ed      	uxtb	r5, r5
   d919c:	f104 010c 	add.w	r1, r4, #12
   d91a0:	463b      	mov	r3, r7
   d91a2:	4632      	mov	r2, r6
   d91a4:	b289      	uxth	r1, r1
   d91a6:	9500      	str	r5, [sp, #0]
   d91a8:	4804      	ldr	r0, [pc, #16]	; (d91bc <_Z6letterciiii+0x163c>)
   d91aa:	f005 fca9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d91ae:	f104 010e 	add.w	r1, r4, #14
   d91b2:	9508      	str	r5, [sp, #32]
   d91b4:	463b      	mov	r3, r7
   d91b6:	4632      	mov	r2, r6
   d91b8:	e04f      	b.n	d925a <_Z6letterciiii+0x16da>
   d91ba:	bf00      	nop
   d91bc:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == '+')
   d91c0:	282b      	cmp	r0, #43	; 0x2b
   d91c2:	d12d      	bne.n	d9220 <_Z6letterciiii+0x16a0>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d91c4:	b28c      	uxth	r4, r1
   d91c6:	b2d6      	uxtb	r6, r2
   d91c8:	b2df      	uxtb	r7, r3
   d91ca:	b2ed      	uxtb	r5, r5
   d91cc:	f104 010d 	add.w	r1, r4, #13
   d91d0:	463b      	mov	r3, r7
   d91d2:	4632      	mov	r2, r6
   d91d4:	b289      	uxth	r1, r1
   d91d6:	4825      	ldr	r0, [pc, #148]	; (d926c <_Z6letterciiii+0x16ec>)
   d91d8:	9500      	str	r5, [sp, #0]
   d91da:	f005 fc91 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d91de:	f104 0112 	add.w	r1, r4, #18
   d91e2:	463b      	mov	r3, r7
   d91e4:	4632      	mov	r2, r6
   d91e6:	b289      	uxth	r1, r1
   d91e8:	4820      	ldr	r0, [pc, #128]	; (d926c <_Z6letterciiii+0x16ec>)
   d91ea:	9500      	str	r5, [sp, #0]
   d91ec:	f005 fc88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d91f0:	f104 011d 	add.w	r1, r4, #29
   d91f4:	463b      	mov	r3, r7
   d91f6:	4632      	mov	r2, r6
   d91f8:	b289      	uxth	r1, r1
   d91fa:	481c      	ldr	r0, [pc, #112]	; (d926c <_Z6letterciiii+0x16ec>)
   d91fc:	9500      	str	r5, [sp, #0]
   d91fe:	f005 fc7f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d9202:	f104 0111 	add.w	r1, r4, #17
   d9206:	463b      	mov	r3, r7
   d9208:	4632      	mov	r2, r6
   d920a:	b289      	uxth	r1, r1
   d920c:	9500      	str	r5, [sp, #0]
   d920e:	4817      	ldr	r0, [pc, #92]	; (d926c <_Z6letterciiii+0x16ec>)
   d9210:	f005 fc76 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d9214:	f104 0113 	add.w	r1, r4, #19
   d9218:	9508      	str	r5, [sp, #32]
   d921a:	463b      	mov	r3, r7
   d921c:	4632      	mov	r2, r6
   d921e:	e01c      	b.n	d925a <_Z6letterciiii+0x16da>
    }
    if(ltr == '-')
   d9220:	282d      	cmp	r0, #45	; 0x2d
   d9222:	d121      	bne.n	d9268 <_Z6letterciiii+0x16e8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d9224:	b28c      	uxth	r4, r1
   d9226:	b2d7      	uxtb	r7, r2
   d9228:	b2de      	uxtb	r6, r3
   d922a:	b2ed      	uxtb	r5, r5
   d922c:	f104 010d 	add.w	r1, r4, #13
   d9230:	4633      	mov	r3, r6
   d9232:	463a      	mov	r2, r7
   d9234:	b289      	uxth	r1, r1
   d9236:	480d      	ldr	r0, [pc, #52]	; (d926c <_Z6letterciiii+0x16ec>)
   d9238:	9500      	str	r5, [sp, #0]
   d923a:	f005 fc61 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d923e:	f104 011d 	add.w	r1, r4, #29
   d9242:	4633      	mov	r3, r6
   d9244:	463a      	mov	r2, r7
   d9246:	b289      	uxth	r1, r1
   d9248:	9500      	str	r5, [sp, #0]
   d924a:	4808      	ldr	r0, [pc, #32]	; (d926c <_Z6letterciiii+0x16ec>)
   d924c:	f005 fc58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9250:	f104 0112 	add.w	r1, r4, #18
   d9254:	9508      	str	r5, [sp, #32]
   d9256:	4633      	mov	r3, r6
   d9258:	463a      	mov	r2, r7
   d925a:	4804      	ldr	r0, [pc, #16]	; (d926c <_Z6letterciiii+0x16ec>)
   d925c:	b289      	uxth	r1, r1
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d925e:	b003      	add	sp, #12
   d9260:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    }
    if(ltr == '-')
    {
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d9264:	f005 bc4c 	b.w	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d9268:	b003      	add	sp, #12
   d926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d926c:	2003e31c 	.word	0x2003e31c

000d9270 <_Z7strdispPKciiii>:
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9270:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9274:	4d28      	ldr	r5, [pc, #160]	; (d9318 <_Z7strdispPKciiii+0xa8>)
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9276:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d927a:	2600      	movs	r6, #0
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d927c:	4682      	mov	sl, r0
   d927e:	460c      	mov	r4, r1
   d9280:	4617      	mov	r7, r2
   d9282:	4698      	mov	r8, r3
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9284:	602e      	str	r6, [r5, #0]
   d9286:	4650      	mov	r0, sl
   d9288:	f009 f843 	bl	e2312 <strlen>
   d928c:	682b      	ldr	r3, [r5, #0]
   d928e:	4298      	cmp	r0, r3
   d9290:	d93c      	bls.n	d930c <_Z7strdispPKciiii+0x9c>
    {
        if(wrd[i] == 'i' || wrd[i] == 'l' || wrd[i] == '.' || wrd[i] == '!')
   d9292:	f81a 0003 	ldrb.w	r0, [sl, r3]
   d9296:	2869      	cmp	r0, #105	; 0x69
   d9298:	d005      	beq.n	d92a6 <_Z7strdispPKciiii+0x36>
   d929a:	286c      	cmp	r0, #108	; 0x6c
   d929c:	d003      	beq.n	d92a6 <_Z7strdispPKciiii+0x36>
   d929e:	282e      	cmp	r0, #46	; 0x2e
   d92a0:	d001      	beq.n	d92a6 <_Z7strdispPKciiii+0x36>
   d92a2:	2821      	cmp	r0, #33	; 0x21
   d92a4:	d108      	bne.n	d92b8 <_Z7strdispPKciiii+0x48>
        {
            letter(wrd[i],pnum,R,G,B);
   d92a6:	4621      	mov	r1, r4
   d92a8:	f8cd 9000 	str.w	r9, [sp]
   d92ac:	4643      	mov	r3, r8
   d92ae:	463a      	mov	r2, r7
   d92b0:	f7fe fc66 	bl	d7b80 <_Z6letterciiii>
            pnum=pnum+16;
   d92b4:	3410      	adds	r4, #16
   d92b6:	e025      	b.n	d9304 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == 'm' || wrd[i] == 'w' || wrd[i] == 'W' || wrd[i] == 'M' || wrd[i] == 'N')
   d92b8:	286d      	cmp	r0, #109	; 0x6d
   d92ba:	d007      	beq.n	d92cc <_Z7strdispPKciiii+0x5c>
   d92bc:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   d92c0:	2b57      	cmp	r3, #87	; 0x57
   d92c2:	d003      	beq.n	d92cc <_Z7strdispPKciiii+0x5c>
   d92c4:	f1a0 034d 	sub.w	r3, r0, #77	; 0x4d
   d92c8:	2b01      	cmp	r3, #1
   d92ca:	d808      	bhi.n	d92de <_Z7strdispPKciiii+0x6e>
        {
            letter(wrd[i],pnum,R,G,B);
   d92cc:	4621      	mov	r1, r4
   d92ce:	f8cd 9000 	str.w	r9, [sp]
   d92d2:	4643      	mov	r3, r8
   d92d4:	463a      	mov	r2, r7
   d92d6:	f7fe fc53 	bl	d7b80 <_Z6letterciiii>
            pnum=pnum+48;
   d92da:	3430      	adds	r4, #48	; 0x30
   d92dc:	e012      	b.n	d9304 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == ' ')
   d92de:	2820      	cmp	r0, #32
   d92e0:	d108      	bne.n	d92f4 <_Z7strdispPKciiii+0x84>
        {
            letter('l',pnum,0,0,0);
   d92e2:	2300      	movs	r3, #0
   d92e4:	4621      	mov	r1, r4
   d92e6:	9600      	str	r6, [sp, #0]
   d92e8:	461a      	mov	r2, r3
   d92ea:	206c      	movs	r0, #108	; 0x6c
   d92ec:	f7fe fc48 	bl	d7b80 <_Z6letterciiii>
            pnum=pnum+16;
   d92f0:	3410      	adds	r4, #16
   d92f2:	e007      	b.n	d9304 <_Z7strdispPKciiii+0x94>
        }
        else
        {
            letter(wrd[i],pnum,R,G,B);
   d92f4:	4621      	mov	r1, r4
   d92f6:	f8cd 9000 	str.w	r9, [sp]
   d92fa:	4643      	mov	r3, r8
   d92fc:	463a      	mov	r2, r7
   d92fe:	f7fe fc3f 	bl	d7b80 <_Z6letterciiii>
            pnum=pnum+32;
   d9302:	3420      	adds	r4, #32
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9304:	682b      	ldr	r3, [r5, #0]
   d9306:	3301      	adds	r3, #1
   d9308:	602b      	str	r3, [r5, #0]
   d930a:	e7bc      	b.n	d9286 <_Z7strdispPKciiii+0x16>
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d930c:	4803      	ldr	r0, [pc, #12]	; (d931c <_Z7strdispPKciiii+0xac>)
}                
   d930e:	b002      	add	sp, #8
   d9310:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d9314:	f005 ba52 	b.w	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   d9318:	2003e33c 	.word	0x2003e33c
   d931c:	2003e31c 	.word	0x2003e31c

000d9320 <_Z4dimgii>:
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix){                     //Code block for displaying a still weather animation when in dark mode
    if(cnum > 299 && cnum < 322)
   d9320:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   d9324:	2b15      	cmp	r3, #21
        strip.show();
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix){                     //Code block for displaying a still weather animation when in dark mode
   d9326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(cnum > 299 && cnum < 322)
   d9328:	d821      	bhi.n	d936e <_Z4dimgii+0x4e>
    {
        strip.setPixelColor(inpix+10,rclock,gclock,bclock);
   d932a:	4d47      	ldr	r5, [pc, #284]	; (d9448 <_Z4dimgii+0x128>)
   d932c:	4f47      	ldr	r7, [pc, #284]	; (d944c <_Z4dimgii+0x12c>)
   d932e:	4e48      	ldr	r6, [pc, #288]	; (d9450 <_Z4dimgii+0x130>)
   d9330:	7828      	ldrb	r0, [r5, #0]
   d9332:	783b      	ldrb	r3, [r7, #0]
   d9334:	7832      	ldrb	r2, [r6, #0]
   d9336:	9000      	str	r0, [sp, #0]
   d9338:	b28c      	uxth	r4, r1
   d933a:	f104 010a 	add.w	r1, r4, #10
   d933e:	b289      	uxth	r1, r1
   d9340:	4844      	ldr	r0, [pc, #272]	; (d9454 <_Z4dimgii+0x134>)
   d9342:	f005 fbdd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,rclock,gclock,bclock);
   d9346:	7828      	ldrb	r0, [r5, #0]
   d9348:	783b      	ldrb	r3, [r7, #0]
   d934a:	7832      	ldrb	r2, [r6, #0]
   d934c:	9000      	str	r0, [sp, #0]
   d934e:	f104 0119 	add.w	r1, r4, #25
   d9352:	b289      	uxth	r1, r1
   d9354:	483f      	ldr	r0, [pc, #252]	; (d9454 <_Z4dimgii+0x134>)
   d9356:	f005 fbd3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   d935a:	342b      	adds	r4, #43	; 0x2b
   d935c:	7829      	ldrb	r1, [r5, #0]
   d935e:	783b      	ldrb	r3, [r7, #0]
   d9360:	7832      	ldrb	r2, [r6, #0]
   d9362:	9100      	str	r1, [sp, #0]
   d9364:	483b      	ldr	r0, [pc, #236]	; (d9454 <_Z4dimgii+0x134>)
   d9366:	b2a1      	uxth	r1, r4
   d9368:	f005 fbca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d936c:	e069      	b.n	d9442 <_Z4dimgii+0x122>
    }
    else if(cnum > 199 && cnum < 235)
   d936e:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
   d9372:	2b22      	cmp	r3, #34	; 0x22
   d9374:	d826      	bhi.n	d93c4 <_Z4dimgii+0xa4>
    {
        strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   d9376:	4d34      	ldr	r5, [pc, #208]	; (d9448 <_Z4dimgii+0x128>)
   d9378:	4f34      	ldr	r7, [pc, #208]	; (d944c <_Z4dimgii+0x12c>)
   d937a:	4e35      	ldr	r6, [pc, #212]	; (d9450 <_Z4dimgii+0x130>)
   d937c:	7828      	ldrb	r0, [r5, #0]
   d937e:	783b      	ldrb	r3, [r7, #0]
   d9380:	7832      	ldrb	r2, [r6, #0]
   d9382:	9000      	str	r0, [sp, #0]
   d9384:	b28c      	uxth	r4, r1
   d9386:	f104 011c 	add.w	r1, r4, #28
   d938a:	b289      	uxth	r1, r1
   d938c:	4831      	ldr	r0, [pc, #196]	; (d9454 <_Z4dimgii+0x134>)
   d938e:	f005 fbb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d9392:	7828      	ldrb	r0, [r5, #0]
   d9394:	783b      	ldrb	r3, [r7, #0]
   d9396:	7832      	ldrb	r2, [r6, #0]
   d9398:	9000      	str	r0, [sp, #0]
   d939a:	f104 0114 	add.w	r1, r4, #20
   d939e:	b289      	uxth	r1, r1
   d93a0:	482c      	ldr	r0, [pc, #176]	; (d9454 <_Z4dimgii+0x134>)
   d93a2:	f005 fbad 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   d93a6:	7828      	ldrb	r0, [r5, #0]
   d93a8:	783b      	ldrb	r3, [r7, #0]
   d93aa:	7832      	ldrb	r2, [r6, #0]
   d93ac:	9000      	str	r0, [sp, #0]
   d93ae:	f104 011a 	add.w	r1, r4, #26
   d93b2:	b289      	uxth	r1, r1
   d93b4:	4827      	ldr	r0, [pc, #156]	; (d9454 <_Z4dimgii+0x134>)
   d93b6:	f005 fba3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   d93ba:	783b      	ldrb	r3, [r7, #0]
   d93bc:	7832      	ldrb	r2, [r6, #0]
   d93be:	f104 0116 	add.w	r1, r4, #22
   d93c2:	e033      	b.n	d942c <_Z4dimgii+0x10c>
    }
    else if(cnum > 499 && cnum < 533)
   d93c4:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   d93c8:	2b20      	cmp	r3, #32
   d93ca:	d836      	bhi.n	d943a <_Z4dimgii+0x11a>
    {
        strip.setPixelColor(inpix+12,rclock,gclock,bclock);
   d93cc:	4d1e      	ldr	r5, [pc, #120]	; (d9448 <_Z4dimgii+0x128>)
   d93ce:	4f1f      	ldr	r7, [pc, #124]	; (d944c <_Z4dimgii+0x12c>)
   d93d0:	4e1f      	ldr	r6, [pc, #124]	; (d9450 <_Z4dimgii+0x130>)
   d93d2:	7828      	ldrb	r0, [r5, #0]
   d93d4:	783b      	ldrb	r3, [r7, #0]
   d93d6:	7832      	ldrb	r2, [r6, #0]
   d93d8:	9000      	str	r0, [sp, #0]
   d93da:	b28c      	uxth	r4, r1
   d93dc:	f104 010c 	add.w	r1, r4, #12
   d93e0:	b289      	uxth	r1, r1
   d93e2:	481c      	ldr	r0, [pc, #112]	; (d9454 <_Z4dimgii+0x134>)
   d93e4:	f005 fb8c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   d93e8:	7828      	ldrb	r0, [r5, #0]
   d93ea:	783b      	ldrb	r3, [r7, #0]
   d93ec:	7832      	ldrb	r2, [r6, #0]
   d93ee:	9000      	str	r0, [sp, #0]
   d93f0:	f104 0116 	add.w	r1, r4, #22
   d93f4:	b289      	uxth	r1, r1
   d93f6:	4817      	ldr	r0, [pc, #92]	; (d9454 <_Z4dimgii+0x134>)
   d93f8:	f005 fb82 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   d93fc:	7828      	ldrb	r0, [r5, #0]
   d93fe:	783b      	ldrb	r3, [r7, #0]
   d9400:	7832      	ldrb	r2, [r6, #0]
   d9402:	9000      	str	r0, [sp, #0]
   d9404:	f104 011b 	add.w	r1, r4, #27
   d9408:	b289      	uxth	r1, r1
   d940a:	4812      	ldr	r0, [pc, #72]	; (d9454 <_Z4dimgii+0x134>)
   d940c:	f005 fb78 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   d9410:	7828      	ldrb	r0, [r5, #0]
   d9412:	783b      	ldrb	r3, [r7, #0]
   d9414:	7832      	ldrb	r2, [r6, #0]
   d9416:	9000      	str	r0, [sp, #0]
   d9418:	f104 0125 	add.w	r1, r4, #37	; 0x25
   d941c:	b289      	uxth	r1, r1
   d941e:	480d      	ldr	r0, [pc, #52]	; (d9454 <_Z4dimgii+0x134>)
   d9420:	f005 fb6e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   d9424:	783b      	ldrb	r3, [r7, #0]
   d9426:	7832      	ldrb	r2, [r6, #0]
   d9428:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d942c:	7828      	ldrb	r0, [r5, #0]
   d942e:	9000      	str	r0, [sp, #0]
   d9430:	b289      	uxth	r1, r1
   d9432:	4808      	ldr	r0, [pc, #32]	; (d9454 <_Z4dimgii+0x134>)
   d9434:	f005 fb64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9438:	e003      	b.n	d9442 <_Z4dimgii+0x122>
    }
    else if(cnum > 599 && cnum < 630)                                    //Snow
   d943a:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   d943e:	281d      	cmp	r0, #29
   d9440:	d9c4      	bls.n	d93cc <_Z4dimgii+0xac>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
   d9442:	b003      	add	sp, #12
   d9444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9446:	bf00      	nop
   d9448:	2003e35c 	.word	0x2003e35c
   d944c:	2003e314 	.word	0x2003e314
   d9450:	2003e354 	.word	0x2003e354
   d9454:	2003e31c 	.word	0x2003e31c

000d9458 <_Z9conditionii>:
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cltr[0] == 'd')
   d945c:	4bd6      	ldr	r3, [pc, #856]	; (d97b8 <_Z9conditionii+0x360>)
   d945e:	781b      	ldrb	r3, [r3, #0]
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9460:	b085      	sub	sp, #20
    if(cltr[0] == 'd')
   d9462:	2b64      	cmp	r3, #100	; 0x64
   d9464:	f2a0 3222 	subw	r2, r0, #802	; 0x322
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9468:	4606      	mov	r6, r0
   d946a:	460c      	mov	r4, r1
   d946c:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
   d9470:	9203      	str	r2, [sp, #12]
   d9472:	f5a0 7b16 	sub.w	fp, r0, #600	; 0x258
    if(cltr[0] == 'd')
   d9476:	f040 863d 	bne.w	da0f4 <_Z9conditionii+0xc9c>
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
   d947a:	2b01      	cmp	r3, #1
   d947c:	d904      	bls.n	d9488 <_Z9conditionii+0x30>
   d947e:	f240 23d1 	movw	r3, #721	; 0x2d1
   d9482:	4298      	cmp	r0, r3
   d9484:	f040 81c5 	bne.w	d9812 <_Z9conditionii+0x3ba>
        {
            strip.setPixelColor(inpix+3,rclock/1.8,gclock*1.3,0);
   d9488:	f8df 9334 	ldr.w	r9, [pc, #820]	; d97c0 <_Z9conditionii+0x368>
   d948c:	f8df 8334 	ldr.w	r8, [pc, #820]	; d97c4 <_Z9conditionii+0x36c>
   d9490:	f8d9 0000 	ldr.w	r0, [r9]
   d9494:	f008 fa20 	bl	e18d8 <__aeabi_i2d>
   d9498:	a3c3      	add	r3, pc, #780	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d949a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d949e:	f008 fa81 	bl	e19a4 <__aeabi_dmul>
   d94a2:	f008 fd41 	bl	e1f28 <__aeabi_d2uiz>
   d94a6:	fa5f fa80 	uxtb.w	sl, r0
   d94aa:	f8d8 0000 	ldr.w	r0, [r8]
   d94ae:	f008 fa13 	bl	e18d8 <__aeabi_i2d>
   d94b2:	a3bf      	add	r3, pc, #764	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d94b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94b8:	f008 fb9e 	bl	e1bf8 <__aeabi_ddiv>
   d94bc:	f008 fd34 	bl	e1f28 <__aeabi_d2uiz>
   d94c0:	b2a5      	uxth	r5, r4
   d94c2:	2700      	movs	r7, #0
   d94c4:	1ce9      	adds	r1, r5, #3
   d94c6:	4653      	mov	r3, sl
   d94c8:	b2c2      	uxtb	r2, r0
   d94ca:	b289      	uxth	r1, r1
   d94cc:	48bb      	ldr	r0, [pc, #748]	; (d97bc <_Z9conditionii+0x364>)
   d94ce:	9700      	str	r7, [sp, #0]
   d94d0:	f005 fb16 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock/1.8,gclock*1.3,0);
   d94d4:	f8d9 0000 	ldr.w	r0, [r9]
   d94d8:	f008 f9fe 	bl	e18d8 <__aeabi_i2d>
   d94dc:	a3b2      	add	r3, pc, #712	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d94de:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94e2:	f008 fa5f 	bl	e19a4 <__aeabi_dmul>
   d94e6:	f008 fd1f 	bl	e1f28 <__aeabi_d2uiz>
   d94ea:	fa5f fa80 	uxtb.w	sl, r0
   d94ee:	f8d8 0000 	ldr.w	r0, [r8]
   d94f2:	f008 f9f1 	bl	e18d8 <__aeabi_i2d>
   d94f6:	a3ae      	add	r3, pc, #696	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d94f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94fc:	f008 fb7c 	bl	e1bf8 <__aeabi_ddiv>
   d9500:	f008 fd12 	bl	e1f28 <__aeabi_d2uiz>
   d9504:	f105 0112 	add.w	r1, r5, #18
   d9508:	4653      	mov	r3, sl
   d950a:	b2c2      	uxtb	r2, r0
   d950c:	b289      	uxth	r1, r1
   d950e:	48ab      	ldr	r0, [pc, #684]	; (d97bc <_Z9conditionii+0x364>)
   d9510:	9700      	str	r7, [sp, #0]
   d9512:	f005 faf5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,rclock/1.8,gclock*1.3,0);
   d9516:	f8d9 0000 	ldr.w	r0, [r9]
   d951a:	f008 f9dd 	bl	e18d8 <__aeabi_i2d>
   d951e:	a3a2      	add	r3, pc, #648	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d9520:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9524:	f008 fa3e 	bl	e19a4 <__aeabi_dmul>
   d9528:	f008 fcfe 	bl	e1f28 <__aeabi_d2uiz>
   d952c:	fa5f fa80 	uxtb.w	sl, r0
   d9530:	f8d8 0000 	ldr.w	r0, [r8]
   d9534:	f008 f9d0 	bl	e18d8 <__aeabi_i2d>
   d9538:	a39d      	add	r3, pc, #628	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d953a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d953e:	f008 fb5b 	bl	e1bf8 <__aeabi_ddiv>
   d9542:	f008 fcf1 	bl	e1f28 <__aeabi_d2uiz>
   d9546:	f105 0113 	add.w	r1, r5, #19
   d954a:	4653      	mov	r3, sl
   d954c:	b2c2      	uxtb	r2, r0
   d954e:	b289      	uxth	r1, r1
   d9550:	489a      	ldr	r0, [pc, #616]	; (d97bc <_Z9conditionii+0x364>)
   d9552:	9700      	str	r7, [sp, #0]
   d9554:	f005 fad4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/1.8,gclock*1.3,0);
   d9558:	f8d9 0000 	ldr.w	r0, [r9]
   d955c:	f008 f9bc 	bl	e18d8 <__aeabi_i2d>
   d9560:	a391      	add	r3, pc, #580	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d9562:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9566:	f008 fa1d 	bl	e19a4 <__aeabi_dmul>
   d956a:	f008 fcdd 	bl	e1f28 <__aeabi_d2uiz>
   d956e:	fa5f fa80 	uxtb.w	sl, r0
   d9572:	f8d8 0000 	ldr.w	r0, [r8]
   d9576:	f008 f9af 	bl	e18d8 <__aeabi_i2d>
   d957a:	a38d      	add	r3, pc, #564	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d957c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9580:	f008 fb3a 	bl	e1bf8 <__aeabi_ddiv>
   d9584:	f008 fcd0 	bl	e1f28 <__aeabi_d2uiz>
   d9588:	f105 0114 	add.w	r1, r5, #20
   d958c:	4653      	mov	r3, sl
   d958e:	b2c2      	uxtb	r2, r0
   d9590:	b289      	uxth	r1, r1
   d9592:	488a      	ldr	r0, [pc, #552]	; (d97bc <_Z9conditionii+0x364>)
   d9594:	9700      	str	r7, [sp, #0]
   d9596:	f005 fab3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock/1.8,gclock*1.3,0);
   d959a:	f8d9 0000 	ldr.w	r0, [r9]
   d959e:	f008 f99b 	bl	e18d8 <__aeabi_i2d>
   d95a2:	a381      	add	r3, pc, #516	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d95a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95a8:	f008 f9fc 	bl	e19a4 <__aeabi_dmul>
   d95ac:	f008 fcbc 	bl	e1f28 <__aeabi_d2uiz>
   d95b0:	fa5f fa80 	uxtb.w	sl, r0
   d95b4:	f8d8 0000 	ldr.w	r0, [r8]
   d95b8:	f008 f98e 	bl	e18d8 <__aeabi_i2d>
   d95bc:	a37c      	add	r3, pc, #496	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d95be:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95c2:	f008 fb19 	bl	e1bf8 <__aeabi_ddiv>
   d95c6:	f008 fcaf 	bl	e1f28 <__aeabi_d2uiz>
   d95ca:	f105 011f 	add.w	r1, r5, #31
   d95ce:	4653      	mov	r3, sl
   d95d0:	b2c2      	uxtb	r2, r0
   d95d2:	b289      	uxth	r1, r1
   d95d4:	4879      	ldr	r0, [pc, #484]	; (d97bc <_Z9conditionii+0x364>)
   d95d6:	9700      	str	r7, [sp, #0]
   d95d8:	f005 fa92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock/1.8,gclock*1.3,0);
   d95dc:	f8d9 0000 	ldr.w	r0, [r9]
   d95e0:	f008 f97a 	bl	e18d8 <__aeabi_i2d>
   d95e4:	a370      	add	r3, pc, #448	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d95e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95ea:	f008 f9db 	bl	e19a4 <__aeabi_dmul>
   d95ee:	f008 fc9b 	bl	e1f28 <__aeabi_d2uiz>
   d95f2:	fa5f fa80 	uxtb.w	sl, r0
   d95f6:	f8d8 0000 	ldr.w	r0, [r8]
   d95fa:	f008 f96d 	bl	e18d8 <__aeabi_i2d>
   d95fe:	a36c      	add	r3, pc, #432	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d9600:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9604:	f008 faf8 	bl	e1bf8 <__aeabi_ddiv>
   d9608:	f008 fc8e 	bl	e1f28 <__aeabi_d2uiz>
   d960c:	f105 011d 	add.w	r1, r5, #29
   d9610:	4653      	mov	r3, sl
   d9612:	b2c2      	uxtb	r2, r0
   d9614:	b289      	uxth	r1, r1
   d9616:	4869      	ldr	r0, [pc, #420]	; (d97bc <_Z9conditionii+0x364>)
   d9618:	9700      	str	r7, [sp, #0]
   d961a:	f005 fa71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock/1.8,gclock*1.3,0);
   d961e:	f8d9 0000 	ldr.w	r0, [r9]
   d9622:	f008 f959 	bl	e18d8 <__aeabi_i2d>
   d9626:	a360      	add	r3, pc, #384	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d9628:	e9d3 2300 	ldrd	r2, r3, [r3]
   d962c:	f008 f9ba 	bl	e19a4 <__aeabi_dmul>
   d9630:	f008 fc7a 	bl	e1f28 <__aeabi_d2uiz>
   d9634:	fa5f fa80 	uxtb.w	sl, r0
   d9638:	f8d8 0000 	ldr.w	r0, [r8]
   d963c:	f008 f94c 	bl	e18d8 <__aeabi_i2d>
   d9640:	a35b      	add	r3, pc, #364	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d9642:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9646:	f008 fad7 	bl	e1bf8 <__aeabi_ddiv>
   d964a:	f008 fc6d 	bl	e1f28 <__aeabi_d2uiz>
   d964e:	f105 011c 	add.w	r1, r5, #28
   d9652:	4653      	mov	r3, sl
   d9654:	b2c2      	uxtb	r2, r0
   d9656:	b289      	uxth	r1, r1
   d9658:	4858      	ldr	r0, [pc, #352]	; (d97bc <_Z9conditionii+0x364>)
   d965a:	9700      	str	r7, [sp, #0]
   d965c:	f005 fa50 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/1.8,gclock*1.3,0);
   d9660:	f8d9 0000 	ldr.w	r0, [r9]
   d9664:	f008 f938 	bl	e18d8 <__aeabi_i2d>
   d9668:	a34f      	add	r3, pc, #316	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d966a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d966e:	f008 f999 	bl	e19a4 <__aeabi_dmul>
   d9672:	f008 fc59 	bl	e1f28 <__aeabi_d2uiz>
   d9676:	fa5f fa80 	uxtb.w	sl, r0
   d967a:	f8d8 0000 	ldr.w	r0, [r8]
   d967e:	f008 f92b 	bl	e18d8 <__aeabi_i2d>
   d9682:	a34b      	add	r3, pc, #300	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d9684:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9688:	f008 fab6 	bl	e1bf8 <__aeabi_ddiv>
   d968c:	f008 fc4c 	bl	e1f28 <__aeabi_d2uiz>
   d9690:	f105 011b 	add.w	r1, r5, #27
   d9694:	4653      	mov	r3, sl
   d9696:	b2c2      	uxtb	r2, r0
   d9698:	b289      	uxth	r1, r1
   d969a:	4848      	ldr	r0, [pc, #288]	; (d97bc <_Z9conditionii+0x364>)
   d969c:	9700      	str	r7, [sp, #0]
   d969e:	f005 fa2f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/1.8,gclock*1.3,0);
   d96a2:	f8d9 0000 	ldr.w	r0, [r9]
   d96a6:	f008 f917 	bl	e18d8 <__aeabi_i2d>
   d96aa:	a33f      	add	r3, pc, #252	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d96ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96b0:	f008 f978 	bl	e19a4 <__aeabi_dmul>
   d96b4:	f008 fc38 	bl	e1f28 <__aeabi_d2uiz>
   d96b8:	fa5f fa80 	uxtb.w	sl, r0
   d96bc:	f8d8 0000 	ldr.w	r0, [r8]
   d96c0:	f008 f90a 	bl	e18d8 <__aeabi_i2d>
   d96c4:	a33a      	add	r3, pc, #232	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d96c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96ca:	f008 fa95 	bl	e1bf8 <__aeabi_ddiv>
   d96ce:	f008 fc2b 	bl	e1f28 <__aeabi_d2uiz>
   d96d2:	f105 0119 	add.w	r1, r5, #25
   d96d6:	4653      	mov	r3, sl
   d96d8:	b2c2      	uxtb	r2, r0
   d96da:	b289      	uxth	r1, r1
   d96dc:	4837      	ldr	r0, [pc, #220]	; (d97bc <_Z9conditionii+0x364>)
   d96de:	9700      	str	r7, [sp, #0]
   d96e0:	f005 fa0e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock/1.8,gclock*1.3,0);
   d96e4:	f8d9 0000 	ldr.w	r0, [r9]
   d96e8:	f008 f8f6 	bl	e18d8 <__aeabi_i2d>
   d96ec:	a32e      	add	r3, pc, #184	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d96ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96f2:	f008 f957 	bl	e19a4 <__aeabi_dmul>
   d96f6:	f008 fc17 	bl	e1f28 <__aeabi_d2uiz>
   d96fa:	fa5f fa80 	uxtb.w	sl, r0
   d96fe:	f8d8 0000 	ldr.w	r0, [r8]
   d9702:	f008 f8e9 	bl	e18d8 <__aeabi_i2d>
   d9706:	a32a      	add	r3, pc, #168	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d9708:	e9d3 2300 	ldrd	r2, r3, [r3]
   d970c:	f008 fa74 	bl	e1bf8 <__aeabi_ddiv>
   d9710:	f008 fc0a 	bl	e1f28 <__aeabi_d2uiz>
   d9714:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9718:	4653      	mov	r3, sl
   d971a:	b2c2      	uxtb	r2, r0
   d971c:	b289      	uxth	r1, r1
   d971e:	4827      	ldr	r0, [pc, #156]	; (d97bc <_Z9conditionii+0x364>)
   d9720:	9700      	str	r7, [sp, #0]
   d9722:	f005 f9ed 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock/1.8,gclock*1.3,0);
   d9726:	f8d9 0000 	ldr.w	r0, [r9]
   d972a:	f008 f8d5 	bl	e18d8 <__aeabi_i2d>
   d972e:	a31e      	add	r3, pc, #120	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d9730:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9734:	f008 f936 	bl	e19a4 <__aeabi_dmul>
   d9738:	f008 fbf6 	bl	e1f28 <__aeabi_d2uiz>
   d973c:	fa5f fa80 	uxtb.w	sl, r0
   d9740:	f8d8 0000 	ldr.w	r0, [r8]
   d9744:	f008 f8c8 	bl	e18d8 <__aeabi_i2d>
   d9748:	a319      	add	r3, pc, #100	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d974a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d974e:	f008 fa53 	bl	e1bf8 <__aeabi_ddiv>
   d9752:	f008 fbe9 	bl	e1f28 <__aeabi_d2uiz>
   d9756:	f105 0123 	add.w	r1, r5, #35	; 0x23
   d975a:	4653      	mov	r3, sl
   d975c:	b2c2      	uxtb	r2, r0
   d975e:	b289      	uxth	r1, r1
   d9760:	4816      	ldr	r0, [pc, #88]	; (d97bc <_Z9conditionii+0x364>)
   d9762:	9700      	str	r7, [sp, #0]
   d9764:	f005 f9cc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/1.8,gclock*1.3,0);
   d9768:	f8d9 0000 	ldr.w	r0, [r9]
   d976c:	f008 f8b4 	bl	e18d8 <__aeabi_i2d>
   d9770:	a30d      	add	r3, pc, #52	; (adr r3, d97a8 <_Z9conditionii+0x350>)
   d9772:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9776:	f008 f915 	bl	e19a4 <__aeabi_dmul>
   d977a:	f008 fbd5 	bl	e1f28 <__aeabi_d2uiz>
   d977e:	fa5f fa80 	uxtb.w	sl, r0
   d9782:	f8d8 0000 	ldr.w	r0, [r8]
   d9786:	f008 f8a7 	bl	e18d8 <__aeabi_i2d>
   d978a:	a309      	add	r3, pc, #36	; (adr r3, d97b0 <_Z9conditionii+0x358>)
   d978c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9790:	f008 fa32 	bl	e1bf8 <__aeabi_ddiv>
   d9794:	f008 fbc8 	bl	e1f28 <__aeabi_d2uiz>
   d9798:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d979c:	b2c2      	uxtb	r2, r0
   d979e:	4653      	mov	r3, sl
   d97a0:	b289      	uxth	r1, r1
   d97a2:	e011      	b.n	d97c8 <_Z9conditionii+0x370>
   d97a4:	f3af 8000 	nop.w
   d97a8:	cccccccd 	.word	0xcccccccd
   d97ac:	3ff4cccc 	.word	0x3ff4cccc
   d97b0:	cccccccd 	.word	0xcccccccd
   d97b4:	3ffccccc 	.word	0x3ffccccc
   d97b8:	2003e360 	.word	0x2003e360
   d97bc:	2003e31c 	.word	0x2003e31c
   d97c0:	2003e314 	.word	0x2003e314
   d97c4:	2003e354 	.word	0x2003e354
   d97c8:	48c7      	ldr	r0, [pc, #796]	; (d9ae8 <_Z9conditionii+0x690>)
   d97ca:	9700      	str	r7, [sp, #0]
   d97cc:	f005 f998 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock/1.8,gclock*1.3,0);
   d97d0:	f8d9 0000 	ldr.w	r0, [r9]
   d97d4:	f008 f880 	bl	e18d8 <__aeabi_i2d>
   d97d8:	a3bd      	add	r3, pc, #756	; (adr r3, d9ad0 <_Z9conditionii+0x678>)
   d97da:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97de:	f008 f8e1 	bl	e19a4 <__aeabi_dmul>
   d97e2:	f008 fba1 	bl	e1f28 <__aeabi_d2uiz>
   d97e6:	fa5f f980 	uxtb.w	r9, r0
   d97ea:	f8d8 0000 	ldr.w	r0, [r8]
   d97ee:	f008 f873 	bl	e18d8 <__aeabi_i2d>
   d97f2:	a3b9      	add	r3, pc, #740	; (adr r3, d9ad8 <_Z9conditionii+0x680>)
   d97f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97f8:	f008 f9fe 	bl	e1bf8 <__aeabi_ddiv>
   d97fc:	f008 fb94 	bl	e1f28 <__aeabi_d2uiz>
   d9800:	f105 0133 	add.w	r1, r5, #51	; 0x33
   d9804:	b2c2      	uxtb	r2, r0
   d9806:	9700      	str	r7, [sp, #0]
   d9808:	464b      	mov	r3, r9
   d980a:	b289      	uxth	r1, r1
   d980c:	48b6      	ldr	r0, [pc, #728]	; (d9ae8 <_Z9conditionii+0x690>)
   d980e:	f005 f977 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
   d9812:	9b03      	ldr	r3, [sp, #12]
   d9814:	2b01      	cmp	r3, #1
   d9816:	f200 812d 	bhi.w	d9a74 <_Z9conditionii+0x61c>
        {
            strip.setPixelColor(inpix+3,rclock,gclock*1.9,0);
   d981a:	f8df 82d8 	ldr.w	r8, [pc, #728]	; d9af4 <_Z9conditionii+0x69c>
   d981e:	4fb3      	ldr	r7, [pc, #716]	; (d9aec <_Z9conditionii+0x694>)
   d9820:	f8d8 0000 	ldr.w	r0, [r8]
   d9824:	f008 f858 	bl	e18d8 <__aeabi_i2d>
   d9828:	a3ad      	add	r3, pc, #692	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d982a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d982e:	f008 f8b9 	bl	e19a4 <__aeabi_dmul>
   d9832:	f008 fb79 	bl	e1f28 <__aeabi_d2uiz>
   d9836:	b2a5      	uxth	r5, r4
   d9838:	f04f 0900 	mov.w	r9, #0
   d983c:	1ce9      	adds	r1, r5, #3
   d983e:	783a      	ldrb	r2, [r7, #0]
   d9840:	f8cd 9000 	str.w	r9, [sp]
   d9844:	b2c3      	uxtb	r3, r0
   d9846:	b289      	uxth	r1, r1
   d9848:	48a7      	ldr	r0, [pc, #668]	; (d9ae8 <_Z9conditionii+0x690>)
   d984a:	f005 f959 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock*1.9,0);
   d984e:	f8d8 0000 	ldr.w	r0, [r8]
   d9852:	f008 f841 	bl	e18d8 <__aeabi_i2d>
   d9856:	a3a2      	add	r3, pc, #648	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d9858:	e9d3 2300 	ldrd	r2, r3, [r3]
   d985c:	f008 f8a2 	bl	e19a4 <__aeabi_dmul>
   d9860:	f008 fb62 	bl	e1f28 <__aeabi_d2uiz>
   d9864:	f105 0112 	add.w	r1, r5, #18
   d9868:	783a      	ldrb	r2, [r7, #0]
   d986a:	f8cd 9000 	str.w	r9, [sp]
   d986e:	b2c3      	uxtb	r3, r0
   d9870:	b289      	uxth	r1, r1
   d9872:	489d      	ldr	r0, [pc, #628]	; (d9ae8 <_Z9conditionii+0x690>)
   d9874:	f005 f944 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,rclock,gclock*1.9,0);
   d9878:	f8d8 0000 	ldr.w	r0, [r8]
   d987c:	f008 f82c 	bl	e18d8 <__aeabi_i2d>
   d9880:	a397      	add	r3, pc, #604	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d9882:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9886:	f008 f88d 	bl	e19a4 <__aeabi_dmul>
   d988a:	f008 fb4d 	bl	e1f28 <__aeabi_d2uiz>
   d988e:	f105 0113 	add.w	r1, r5, #19
   d9892:	783a      	ldrb	r2, [r7, #0]
   d9894:	f8cd 9000 	str.w	r9, [sp]
   d9898:	b2c3      	uxtb	r3, r0
   d989a:	b289      	uxth	r1, r1
   d989c:	4892      	ldr	r0, [pc, #584]	; (d9ae8 <_Z9conditionii+0x690>)
   d989e:	f005 f92f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock*1.9,0);
   d98a2:	f8d8 0000 	ldr.w	r0, [r8]
   d98a6:	f008 f817 	bl	e18d8 <__aeabi_i2d>
   d98aa:	a38d      	add	r3, pc, #564	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d98ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98b0:	f008 f878 	bl	e19a4 <__aeabi_dmul>
   d98b4:	f008 fb38 	bl	e1f28 <__aeabi_d2uiz>
   d98b8:	f105 011f 	add.w	r1, r5, #31
   d98bc:	783a      	ldrb	r2, [r7, #0]
   d98be:	f8cd 9000 	str.w	r9, [sp]
   d98c2:	b2c3      	uxtb	r3, r0
   d98c4:	b289      	uxth	r1, r1
   d98c6:	4888      	ldr	r0, [pc, #544]	; (d9ae8 <_Z9conditionii+0x690>)
   d98c8:	f005 f91a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock*1.9,0);
   d98cc:	f8d8 0000 	ldr.w	r0, [r8]
   d98d0:	f008 f802 	bl	e18d8 <__aeabi_i2d>
   d98d4:	a382      	add	r3, pc, #520	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d98d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98da:	f008 f863 	bl	e19a4 <__aeabi_dmul>
   d98de:	f008 fb23 	bl	e1f28 <__aeabi_d2uiz>
   d98e2:	f105 011d 	add.w	r1, r5, #29
   d98e6:	783a      	ldrb	r2, [r7, #0]
   d98e8:	f8cd 9000 	str.w	r9, [sp]
   d98ec:	b2c3      	uxtb	r3, r0
   d98ee:	b289      	uxth	r1, r1
   d98f0:	487d      	ldr	r0, [pc, #500]	; (d9ae8 <_Z9conditionii+0x690>)
   d98f2:	f005 f905 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.9,0);
   d98f6:	f8d8 0000 	ldr.w	r0, [r8]
   d98fa:	f007 ffed 	bl	e18d8 <__aeabi_i2d>
   d98fe:	a378      	add	r3, pc, #480	; (adr r3, d9ae0 <_Z9conditionii+0x688>)
   d9900:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9904:	f008 f84e 	bl	e19a4 <__aeabi_dmul>
   d9908:	f008 fb0e 	bl	e1f28 <__aeabi_d2uiz>
   d990c:	783a      	ldrb	r2, [r7, #0]
   d990e:	f8cd 9000 	str.w	r9, [sp]
   d9912:	f105 0122 	add.w	r1, r5, #34	; 0x22
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d9916:	f8df 91d8 	ldr.w	r9, [pc, #472]	; d9af0 <_Z9conditionii+0x698>
            strip.setPixelColor(inpix+3,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+18,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+19,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+31,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+29,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+34,rclock,gclock*1.9,0);
   d991a:	b2c3      	uxtb	r3, r0
   d991c:	b289      	uxth	r1, r1
   d991e:	4872      	ldr	r0, [pc, #456]	; (d9ae8 <_Z9conditionii+0x690>)
   d9920:	f005 f8ee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d9924:	f899 0000 	ldrb.w	r0, [r9]
   d9928:	f898 3000 	ldrb.w	r3, [r8]
   d992c:	783a      	ldrb	r2, [r7, #0]
   d992e:	9000      	str	r0, [sp, #0]
   d9930:	f105 0114 	add.w	r1, r5, #20
   d9934:	b289      	uxth	r1, r1
   d9936:	486c      	ldr	r0, [pc, #432]	; (d9ae8 <_Z9conditionii+0x690>)
   d9938:	f005 f8e2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   d993c:	f899 0000 	ldrb.w	r0, [r9]
   d9940:	f898 3000 	ldrb.w	r3, [r8]
   d9944:	783a      	ldrb	r2, [r7, #0]
   d9946:	9000      	str	r0, [sp, #0]
   d9948:	f105 011a 	add.w	r1, r5, #26
   d994c:	b289      	uxth	r1, r1
   d994e:	4866      	ldr	r0, [pc, #408]	; (d9ae8 <_Z9conditionii+0x690>)
   d9950:	f005 f8d6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   d9954:	f899 0000 	ldrb.w	r0, [r9]
   d9958:	f898 3000 	ldrb.w	r3, [r8]
   d995c:	783a      	ldrb	r2, [r7, #0]
   d995e:	9000      	str	r0, [sp, #0]
   d9960:	f105 011b 	add.w	r1, r5, #27
   d9964:	b289      	uxth	r1, r1
   d9966:	4860      	ldr	r0, [pc, #384]	; (d9ae8 <_Z9conditionii+0x690>)
   d9968:	f005 f8ca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   d996c:	f899 0000 	ldrb.w	r0, [r9]
   d9970:	f898 3000 	ldrb.w	r3, [r8]
   d9974:	783a      	ldrb	r2, [r7, #0]
   d9976:	9000      	str	r0, [sp, #0]
   d9978:	f105 011c 	add.w	r1, r5, #28
   d997c:	b289      	uxth	r1, r1
   d997e:	485a      	ldr	r0, [pc, #360]	; (d9ae8 <_Z9conditionii+0x690>)
   d9980:	f005 f8be 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock,bclock);
   d9984:	f899 0000 	ldrb.w	r0, [r9]
   d9988:	f898 3000 	ldrb.w	r3, [r8]
   d998c:	783a      	ldrb	r2, [r7, #0]
   d998e:	9000      	str	r0, [sp, #0]
   d9990:	f105 0123 	add.w	r1, r5, #35	; 0x23
   d9994:	b289      	uxth	r1, r1
   d9996:	4854      	ldr	r0, [pc, #336]	; (d9ae8 <_Z9conditionii+0x690>)
   d9998:	f005 f8b2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   d999c:	f899 0000 	ldrb.w	r0, [r9]
   d99a0:	f898 3000 	ldrb.w	r3, [r8]
   d99a4:	783a      	ldrb	r2, [r7, #0]
   d99a6:	9000      	str	r0, [sp, #0]
   d99a8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d99ac:	b289      	uxth	r1, r1
   d99ae:	484e      	ldr	r0, [pc, #312]	; (d9ae8 <_Z9conditionii+0x690>)
   d99b0:	f005 f8a6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   d99b4:	f899 0000 	ldrb.w	r0, [r9]
   d99b8:	f898 3000 	ldrb.w	r3, [r8]
   d99bc:	783a      	ldrb	r2, [r7, #0]
   d99be:	9000      	str	r0, [sp, #0]
   d99c0:	f105 0125 	add.w	r1, r5, #37	; 0x25
   d99c4:	b289      	uxth	r1, r1
   d99c6:	4848      	ldr	r0, [pc, #288]	; (d9ae8 <_Z9conditionii+0x690>)
   d99c8:	f005 f89a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);
   d99cc:	f899 0000 	ldrb.w	r0, [r9]
   d99d0:	f898 3000 	ldrb.w	r3, [r8]
   d99d4:	783a      	ldrb	r2, [r7, #0]
   d99d6:	9000      	str	r0, [sp, #0]
   d99d8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   d99dc:	b289      	uxth	r1, r1
   d99de:	4842      	ldr	r0, [pc, #264]	; (d9ae8 <_Z9conditionii+0x690>)
   d99e0:	f005 f88e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   d99e4:	f899 0000 	ldrb.w	r0, [r9]
   d99e8:	f898 3000 	ldrb.w	r3, [r8]
   d99ec:	783a      	ldrb	r2, [r7, #0]
   d99ee:	9000      	str	r0, [sp, #0]
   d99f0:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   d99f4:	b289      	uxth	r1, r1
   d99f6:	483c      	ldr	r0, [pc, #240]	; (d9ae8 <_Z9conditionii+0x690>)
   d99f8:	f005 f882 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   d99fc:	f899 0000 	ldrb.w	r0, [r9]
   d9a00:	f898 3000 	ldrb.w	r3, [r8]
   d9a04:	783a      	ldrb	r2, [r7, #0]
   d9a06:	9000      	str	r0, [sp, #0]
   d9a08:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d9a0c:	b289      	uxth	r1, r1
   d9a0e:	4836      	ldr	r0, [pc, #216]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a10:	f005 f876 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
   d9a14:	f899 0000 	ldrb.w	r0, [r9]
   d9a18:	f898 3000 	ldrb.w	r3, [r8]
   d9a1c:	783a      	ldrb	r2, [r7, #0]
   d9a1e:	9000      	str	r0, [sp, #0]
   d9a20:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d9a24:	b289      	uxth	r1, r1
   d9a26:	4830      	ldr	r0, [pc, #192]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a28:	f005 f86a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
   d9a2c:	f899 0000 	ldrb.w	r0, [r9]
   d9a30:	f898 3000 	ldrb.w	r3, [r8]
   d9a34:	783a      	ldrb	r2, [r7, #0]
   d9a36:	9000      	str	r0, [sp, #0]
   d9a38:	f105 0133 	add.w	r1, r5, #51	; 0x33
   d9a3c:	b289      	uxth	r1, r1
   d9a3e:	482a      	ldr	r0, [pc, #168]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a40:	f005 f85e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
   d9a44:	f899 0000 	ldrb.w	r0, [r9]
   d9a48:	f898 3000 	ldrb.w	r3, [r8]
   d9a4c:	783a      	ldrb	r2, [r7, #0]
   d9a4e:	9000      	str	r0, [sp, #0]
   d9a50:	f105 0135 	add.w	r1, r5, #53	; 0x35
   d9a54:	b289      	uxth	r1, r1
   d9a56:	4824      	ldr	r0, [pc, #144]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a58:	f005 f852 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
   d9a5c:	f899 0000 	ldrb.w	r0, [r9]
   d9a60:	f898 3000 	ldrb.w	r3, [r8]
   d9a64:	783a      	ldrb	r2, [r7, #0]
   d9a66:	9000      	str	r0, [sp, #0]
   d9a68:	f105 013b 	add.w	r1, r5, #59	; 0x3b
   d9a6c:	b289      	uxth	r1, r1
   d9a6e:	481e      	ldr	r0, [pc, #120]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a70:	f005 f846 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   d9a74:	f1bb 0f1d 	cmp.w	fp, #29
   d9a78:	f200 80ec 	bhi.w	d9c54 <_Z9conditionii+0x7fc>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9a7c:	4f1c      	ldr	r7, [pc, #112]	; (d9af0 <_Z9conditionii+0x698>)
   d9a7e:	f8df 9074 	ldr.w	r9, [pc, #116]	; d9af4 <_Z9conditionii+0x69c>
   d9a82:	f8df 8068 	ldr.w	r8, [pc, #104]	; d9aec <_Z9conditionii+0x694>
   d9a86:	7838      	ldrb	r0, [r7, #0]
   d9a88:	f899 3000 	ldrb.w	r3, [r9]
   d9a8c:	f898 2000 	ldrb.w	r2, [r8]
   d9a90:	9000      	str	r0, [sp, #0]
   d9a92:	b2a5      	uxth	r5, r4
   d9a94:	1c69      	adds	r1, r5, #1
   d9a96:	b289      	uxth	r1, r1
   d9a98:	4813      	ldr	r0, [pc, #76]	; (d9ae8 <_Z9conditionii+0x690>)
   d9a9a:	f005 f831 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9a9e:	7838      	ldrb	r0, [r7, #0]
   d9aa0:	f899 3000 	ldrb.w	r3, [r9]
   d9aa4:	f898 2000 	ldrb.w	r2, [r8]
   d9aa8:	9000      	str	r0, [sp, #0]
   d9aaa:	f105 011f 	add.w	r1, r5, #31
   d9aae:	b289      	uxth	r1, r1
   d9ab0:	480d      	ldr	r0, [pc, #52]	; (d9ae8 <_Z9conditionii+0x690>)
   d9ab2:	f005 f825 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9ab6:	7838      	ldrb	r0, [r7, #0]
   d9ab8:	f899 3000 	ldrb.w	r3, [r9]
   d9abc:	f898 2000 	ldrb.w	r2, [r8]
   d9ac0:	9000      	str	r0, [sp, #0]
   d9ac2:	f105 010f 	add.w	r1, r5, #15
   d9ac6:	b289      	uxth	r1, r1
   d9ac8:	e016      	b.n	d9af8 <_Z9conditionii+0x6a0>
   d9aca:	bf00      	nop
   d9acc:	f3af 8000 	nop.w
   d9ad0:	cccccccd 	.word	0xcccccccd
   d9ad4:	3ff4cccc 	.word	0x3ff4cccc
   d9ad8:	cccccccd 	.word	0xcccccccd
   d9adc:	3ffccccc 	.word	0x3ffccccc
   d9ae0:	66666666 	.word	0x66666666
   d9ae4:	3ffe6666 	.word	0x3ffe6666
   d9ae8:	2003e31c 	.word	0x2003e31c
   d9aec:	2003e354 	.word	0x2003e354
   d9af0:	2003e35c 	.word	0x2003e35c
   d9af4:	2003e314 	.word	0x2003e314
   d9af8:	4855      	ldr	r0, [pc, #340]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9afa:	f005 f801 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9afe:	7838      	ldrb	r0, [r7, #0]
   d9b00:	f899 3000 	ldrb.w	r3, [r9]
   d9b04:	f898 2000 	ldrb.w	r2, [r8]
   d9b08:	9000      	str	r0, [sp, #0]
   d9b0a:	f105 010e 	add.w	r1, r5, #14
   d9b0e:	b289      	uxth	r1, r1
   d9b10:	484f      	ldr	r0, [pc, #316]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b12:	f004 fff5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9b16:	7838      	ldrb	r0, [r7, #0]
   d9b18:	f899 3000 	ldrb.w	r3, [r9]
   d9b1c:	f898 2000 	ldrb.w	r2, [r8]
   d9b20:	9000      	str	r0, [sp, #0]
   d9b22:	f105 010d 	add.w	r1, r5, #13
   d9b26:	b289      	uxth	r1, r1
   d9b28:	4849      	ldr	r0, [pc, #292]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b2a:	f004 ffe9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9b2e:	7838      	ldrb	r0, [r7, #0]
   d9b30:	f899 3000 	ldrb.w	r3, [r9]
   d9b34:	f898 2000 	ldrb.w	r2, [r8]
   d9b38:	9000      	str	r0, [sp, #0]
   d9b3a:	f105 0110 	add.w	r1, r5, #16
   d9b3e:	b289      	uxth	r1, r1
   d9b40:	4843      	ldr	r0, [pc, #268]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b42:	f004 ffdd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9b46:	7838      	ldrb	r0, [r7, #0]
   d9b48:	f899 3000 	ldrb.w	r3, [r9]
   d9b4c:	f898 2000 	ldrb.w	r2, [r8]
   d9b50:	9000      	str	r0, [sp, #0]
   d9b52:	f105 0111 	add.w	r1, r5, #17
   d9b56:	b289      	uxth	r1, r1
   d9b58:	483d      	ldr	r0, [pc, #244]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b5a:	f004 ffd1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9b5e:	7838      	ldrb	r0, [r7, #0]
   d9b60:	f899 3000 	ldrb.w	r3, [r9]
   d9b64:	f898 2000 	ldrb.w	r2, [r8]
   d9b68:	9000      	str	r0, [sp, #0]
   d9b6a:	f105 0112 	add.w	r1, r5, #18
   d9b6e:	b289      	uxth	r1, r1
   d9b70:	4837      	ldr	r0, [pc, #220]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b72:	f004 ffc5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9b76:	7838      	ldrb	r0, [r7, #0]
   d9b78:	f899 3000 	ldrb.w	r3, [r9]
   d9b7c:	f898 2000 	ldrb.w	r2, [r8]
   d9b80:	9000      	str	r0, [sp, #0]
   d9b82:	f105 011e 	add.w	r1, r5, #30
   d9b86:	b289      	uxth	r1, r1
   d9b88:	4831      	ldr	r0, [pc, #196]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9b8a:	f004 ffb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9b8e:	7838      	ldrb	r0, [r7, #0]
   d9b90:	f899 3000 	ldrb.w	r3, [r9]
   d9b94:	f898 2000 	ldrb.w	r2, [r8]
   d9b98:	9000      	str	r0, [sp, #0]
   d9b9a:	f105 011d 	add.w	r1, r5, #29
   d9b9e:	b289      	uxth	r1, r1
   d9ba0:	482b      	ldr	r0, [pc, #172]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9ba2:	f004 ffad 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9ba6:	7838      	ldrb	r0, [r7, #0]
   d9ba8:	f899 3000 	ldrb.w	r3, [r9]
   d9bac:	f898 2000 	ldrb.w	r2, [r8]
   d9bb0:	9000      	str	r0, [sp, #0]
   d9bb2:	f105 0120 	add.w	r1, r5, #32
   d9bb6:	b289      	uxth	r1, r1
   d9bb8:	4825      	ldr	r0, [pc, #148]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9bba:	f004 ffa1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9bbe:	7838      	ldrb	r0, [r7, #0]
   d9bc0:	f899 3000 	ldrb.w	r3, [r9]
   d9bc4:	f898 2000 	ldrb.w	r2, [r8]
   d9bc8:	9000      	str	r0, [sp, #0]
   d9bca:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9bce:	b289      	uxth	r1, r1
   d9bd0:	481f      	ldr	r0, [pc, #124]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9bd2:	f004 ff95 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9bd6:	7838      	ldrb	r0, [r7, #0]
   d9bd8:	f899 3000 	ldrb.w	r3, [r9]
   d9bdc:	f898 2000 	ldrb.w	r2, [r8]
   d9be0:	9000      	str	r0, [sp, #0]
   d9be2:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9be6:	b289      	uxth	r1, r1
   d9be8:	4819      	ldr	r0, [pc, #100]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9bea:	f004 ff89 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9bee:	7838      	ldrb	r0, [r7, #0]
   d9bf0:	f899 3000 	ldrb.w	r3, [r9]
   d9bf4:	f898 2000 	ldrb.w	r2, [r8]
   d9bf8:	9000      	str	r0, [sp, #0]
   d9bfa:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9bfe:	b289      	uxth	r1, r1
   d9c00:	4813      	ldr	r0, [pc, #76]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9c02:	f004 ff7d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9c06:	7838      	ldrb	r0, [r7, #0]
   d9c08:	f899 3000 	ldrb.w	r3, [r9]
   d9c0c:	f898 2000 	ldrb.w	r2, [r8]
   d9c10:	9000      	str	r0, [sp, #0]
   d9c12:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9c16:	b289      	uxth	r1, r1
   d9c18:	480d      	ldr	r0, [pc, #52]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9c1a:	f004 ff71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9c1e:	7838      	ldrb	r0, [r7, #0]
   d9c20:	f899 3000 	ldrb.w	r3, [r9]
   d9c24:	f898 2000 	ldrb.w	r2, [r8]
   d9c28:	9000      	str	r0, [sp, #0]
   d9c2a:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9c2e:	b289      	uxth	r1, r1
   d9c30:	4807      	ldr	r0, [pc, #28]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9c32:	f004 ff65 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9c36:	7838      	ldrb	r0, [r7, #0]
   d9c38:	f899 3000 	ldrb.w	r3, [r9]
   d9c3c:	f898 2000 	ldrb.w	r2, [r8]
   d9c40:	9000      	str	r0, [sp, #0]
   d9c42:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9c46:	b289      	uxth	r1, r1
   d9c48:	4801      	ldr	r0, [pc, #4]	; (d9c50 <_Z9conditionii+0x7f8>)
   d9c4a:	f004 ff59 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9c4e:	e0df      	b.n	d9e10 <_Z9conditionii+0x9b8>
   d9c50:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9c54:	f5b6 7f49 	cmp.w	r6, #804	; 0x324
   d9c58:	f040 80da 	bne.w	d9e10 <_Z9conditionii+0x9b8>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9c5c:	4f68      	ldr	r7, [pc, #416]	; (d9e00 <_Z9conditionii+0x9a8>)
   d9c5e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; d9e08 <_Z9conditionii+0x9b0>
   d9c62:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d9e0c <_Z9conditionii+0x9b4>
   d9c66:	7838      	ldrb	r0, [r7, #0]
   d9c68:	f899 3000 	ldrb.w	r3, [r9]
   d9c6c:	f898 2000 	ldrb.w	r2, [r8]
   d9c70:	9000      	str	r0, [sp, #0]
   d9c72:	b2a5      	uxth	r5, r4
   d9c74:	1c69      	adds	r1, r5, #1
   d9c76:	b289      	uxth	r1, r1
   d9c78:	4862      	ldr	r0, [pc, #392]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9c7a:	f004 ff41 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9c7e:	7838      	ldrb	r0, [r7, #0]
   d9c80:	f899 3000 	ldrb.w	r3, [r9]
   d9c84:	f898 2000 	ldrb.w	r2, [r8]
   d9c88:	9000      	str	r0, [sp, #0]
   d9c8a:	f105 011f 	add.w	r1, r5, #31
   d9c8e:	b289      	uxth	r1, r1
   d9c90:	485c      	ldr	r0, [pc, #368]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9c92:	f004 ff35 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9c96:	7838      	ldrb	r0, [r7, #0]
   d9c98:	f899 3000 	ldrb.w	r3, [r9]
   d9c9c:	f898 2000 	ldrb.w	r2, [r8]
   d9ca0:	9000      	str	r0, [sp, #0]
   d9ca2:	f105 010f 	add.w	r1, r5, #15
   d9ca6:	b289      	uxth	r1, r1
   d9ca8:	4856      	ldr	r0, [pc, #344]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9caa:	f004 ff29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9cae:	7838      	ldrb	r0, [r7, #0]
   d9cb0:	f899 3000 	ldrb.w	r3, [r9]
   d9cb4:	f898 2000 	ldrb.w	r2, [r8]
   d9cb8:	9000      	str	r0, [sp, #0]
   d9cba:	f105 010e 	add.w	r1, r5, #14
   d9cbe:	b289      	uxth	r1, r1
   d9cc0:	4850      	ldr	r0, [pc, #320]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9cc2:	f004 ff1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9cc6:	7838      	ldrb	r0, [r7, #0]
   d9cc8:	f899 3000 	ldrb.w	r3, [r9]
   d9ccc:	f898 2000 	ldrb.w	r2, [r8]
   d9cd0:	9000      	str	r0, [sp, #0]
   d9cd2:	f105 010d 	add.w	r1, r5, #13
   d9cd6:	b289      	uxth	r1, r1
   d9cd8:	484a      	ldr	r0, [pc, #296]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9cda:	f004 ff11 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9cde:	7838      	ldrb	r0, [r7, #0]
   d9ce0:	f899 3000 	ldrb.w	r3, [r9]
   d9ce4:	f898 2000 	ldrb.w	r2, [r8]
   d9ce8:	9000      	str	r0, [sp, #0]
   d9cea:	f105 0110 	add.w	r1, r5, #16
   d9cee:	b289      	uxth	r1, r1
   d9cf0:	4844      	ldr	r0, [pc, #272]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9cf2:	f004 ff05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9cf6:	7838      	ldrb	r0, [r7, #0]
   d9cf8:	f899 3000 	ldrb.w	r3, [r9]
   d9cfc:	f898 2000 	ldrb.w	r2, [r8]
   d9d00:	9000      	str	r0, [sp, #0]
   d9d02:	f105 0111 	add.w	r1, r5, #17
   d9d06:	b289      	uxth	r1, r1
   d9d08:	483e      	ldr	r0, [pc, #248]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d0a:	f004 fef9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9d0e:	7838      	ldrb	r0, [r7, #0]
   d9d10:	f899 3000 	ldrb.w	r3, [r9]
   d9d14:	f898 2000 	ldrb.w	r2, [r8]
   d9d18:	9000      	str	r0, [sp, #0]
   d9d1a:	f105 0112 	add.w	r1, r5, #18
   d9d1e:	b289      	uxth	r1, r1
   d9d20:	4838      	ldr	r0, [pc, #224]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d22:	f004 feed 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9d26:	7838      	ldrb	r0, [r7, #0]
   d9d28:	f899 3000 	ldrb.w	r3, [r9]
   d9d2c:	f898 2000 	ldrb.w	r2, [r8]
   d9d30:	9000      	str	r0, [sp, #0]
   d9d32:	f105 011e 	add.w	r1, r5, #30
   d9d36:	b289      	uxth	r1, r1
   d9d38:	4832      	ldr	r0, [pc, #200]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d3a:	f004 fee1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9d3e:	7838      	ldrb	r0, [r7, #0]
   d9d40:	f899 3000 	ldrb.w	r3, [r9]
   d9d44:	f898 2000 	ldrb.w	r2, [r8]
   d9d48:	9000      	str	r0, [sp, #0]
   d9d4a:	f105 011d 	add.w	r1, r5, #29
   d9d4e:	b289      	uxth	r1, r1
   d9d50:	482c      	ldr	r0, [pc, #176]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d52:	f004 fed5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9d56:	7838      	ldrb	r0, [r7, #0]
   d9d58:	f899 3000 	ldrb.w	r3, [r9]
   d9d5c:	f898 2000 	ldrb.w	r2, [r8]
   d9d60:	9000      	str	r0, [sp, #0]
   d9d62:	f105 0120 	add.w	r1, r5, #32
   d9d66:	b289      	uxth	r1, r1
   d9d68:	4826      	ldr	r0, [pc, #152]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d6a:	f004 fec9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9d6e:	7838      	ldrb	r0, [r7, #0]
   d9d70:	f899 3000 	ldrb.w	r3, [r9]
   d9d74:	f898 2000 	ldrb.w	r2, [r8]
   d9d78:	9000      	str	r0, [sp, #0]
   d9d7a:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9d7e:	b289      	uxth	r1, r1
   d9d80:	4820      	ldr	r0, [pc, #128]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d82:	f004 febd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9d86:	7838      	ldrb	r0, [r7, #0]
   d9d88:	f899 3000 	ldrb.w	r3, [r9]
   d9d8c:	f898 2000 	ldrb.w	r2, [r8]
   d9d90:	9000      	str	r0, [sp, #0]
   d9d92:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9d96:	b289      	uxth	r1, r1
   d9d98:	481a      	ldr	r0, [pc, #104]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9d9a:	f004 feb1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9d9e:	7838      	ldrb	r0, [r7, #0]
   d9da0:	f899 3000 	ldrb.w	r3, [r9]
   d9da4:	f898 2000 	ldrb.w	r2, [r8]
   d9da8:	9000      	str	r0, [sp, #0]
   d9daa:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9dae:	b289      	uxth	r1, r1
   d9db0:	4814      	ldr	r0, [pc, #80]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9db2:	f004 fea5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9db6:	7838      	ldrb	r0, [r7, #0]
   d9db8:	f899 3000 	ldrb.w	r3, [r9]
   d9dbc:	f898 2000 	ldrb.w	r2, [r8]
   d9dc0:	9000      	str	r0, [sp, #0]
   d9dc2:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9dc6:	b289      	uxth	r1, r1
   d9dc8:	480e      	ldr	r0, [pc, #56]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9dca:	f004 fe99 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9dce:	7838      	ldrb	r0, [r7, #0]
   d9dd0:	f899 3000 	ldrb.w	r3, [r9]
   d9dd4:	f898 2000 	ldrb.w	r2, [r8]
   d9dd8:	9000      	str	r0, [sp, #0]
   d9dda:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9dde:	b289      	uxth	r1, r1
   d9de0:	4808      	ldr	r0, [pc, #32]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9de2:	f004 fe8d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9de6:	7838      	ldrb	r0, [r7, #0]
   d9de8:	f899 3000 	ldrb.w	r3, [r9]
   d9dec:	f898 2000 	ldrb.w	r2, [r8]
   d9df0:	9000      	str	r0, [sp, #0]
   d9df2:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9df6:	b289      	uxth	r1, r1
   d9df8:	4802      	ldr	r0, [pc, #8]	; (d9e04 <_Z9conditionii+0x9ac>)
   d9dfa:	f004 fe81 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9dfe:	e011      	b.n	d9e24 <_Z9conditionii+0x9cc>
   d9e00:	2003e35c 	.word	0x2003e35c
   d9e04:	2003e31c 	.word	0x2003e31c
   d9e08:	2003e314 	.word	0x2003e314
   d9e0c:	2003e354 	.word	0x2003e354
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9e10:	f1a6 03c8 	sub.w	r3, r6, #200	; 0xc8
   d9e14:	2b20      	cmp	r3, #32
   d9e16:	f67f af21 	bls.w	d9c5c <_Z9conditionii+0x804>
   d9e1a:	f5a6 7396 	sub.w	r3, r6, #300	; 0x12c
   d9e1e:	2be7      	cmp	r3, #231	; 0xe7
   d9e20:	f67f af1c 	bls.w	d9c5c <_Z9conditionii+0x804>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
        }
        if(cnum == 701 || cnum == 761)                                      //Mist
   d9e24:	f240 23bd 	movw	r3, #701	; 0x2bd
   d9e28:	429e      	cmp	r6, r3
   d9e2a:	d004      	beq.n	d9e36 <_Z9conditionii+0x9de>
   d9e2c:	f240 23f9 	movw	r3, #761	; 0x2f9
   d9e30:	429e      	cmp	r6, r3
   d9e32:	f040 87bd 	bne.w	dadb0 <_Z9conditionii+0x1958>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9e36:	4fab      	ldr	r7, [pc, #684]	; (da0e4 <_Z9conditionii+0xc8c>)
   d9e38:	f8df 92b0 	ldr.w	r9, [pc, #688]	; da0ec <_Z9conditionii+0xc94>
   d9e3c:	f8df 82b0 	ldr.w	r8, [pc, #688]	; da0f0 <_Z9conditionii+0xc98>
   d9e40:	7838      	ldrb	r0, [r7, #0]
   d9e42:	f899 3000 	ldrb.w	r3, [r9]
   d9e46:	f898 2000 	ldrb.w	r2, [r8]
   d9e4a:	9000      	str	r0, [sp, #0]
   d9e4c:	b2a5      	uxth	r5, r4
   d9e4e:	1c69      	adds	r1, r5, #1
   d9e50:	b289      	uxth	r1, r1
   d9e52:	48a5      	ldr	r0, [pc, #660]	; (da0e8 <_Z9conditionii+0xc90>)
   d9e54:	f004 fe54 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9e58:	7838      	ldrb	r0, [r7, #0]
   d9e5a:	f899 3000 	ldrb.w	r3, [r9]
   d9e5e:	f898 2000 	ldrb.w	r2, [r8]
   d9e62:	9000      	str	r0, [sp, #0]
   d9e64:	f105 011f 	add.w	r1, r5, #31
   d9e68:	b289      	uxth	r1, r1
   d9e6a:	489f      	ldr	r0, [pc, #636]	; (da0e8 <_Z9conditionii+0xc90>)
   d9e6c:	f004 fe48 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9e70:	7838      	ldrb	r0, [r7, #0]
   d9e72:	f899 3000 	ldrb.w	r3, [r9]
   d9e76:	f898 2000 	ldrb.w	r2, [r8]
   d9e7a:	9000      	str	r0, [sp, #0]
   d9e7c:	f105 010f 	add.w	r1, r5, #15
   d9e80:	b289      	uxth	r1, r1
   d9e82:	4899      	ldr	r0, [pc, #612]	; (da0e8 <_Z9conditionii+0xc90>)
   d9e84:	f004 fe3c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9e88:	7838      	ldrb	r0, [r7, #0]
   d9e8a:	f899 3000 	ldrb.w	r3, [r9]
   d9e8e:	f898 2000 	ldrb.w	r2, [r8]
   d9e92:	9000      	str	r0, [sp, #0]
   d9e94:	f105 010e 	add.w	r1, r5, #14
   d9e98:	b289      	uxth	r1, r1
   d9e9a:	4893      	ldr	r0, [pc, #588]	; (da0e8 <_Z9conditionii+0xc90>)
   d9e9c:	f004 fe30 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9ea0:	7838      	ldrb	r0, [r7, #0]
   d9ea2:	f899 3000 	ldrb.w	r3, [r9]
   d9ea6:	f898 2000 	ldrb.w	r2, [r8]
   d9eaa:	9000      	str	r0, [sp, #0]
   d9eac:	f105 010d 	add.w	r1, r5, #13
   d9eb0:	b289      	uxth	r1, r1
   d9eb2:	488d      	ldr	r0, [pc, #564]	; (da0e8 <_Z9conditionii+0xc90>)
   d9eb4:	f004 fe24 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9eb8:	7838      	ldrb	r0, [r7, #0]
   d9eba:	f899 3000 	ldrb.w	r3, [r9]
   d9ebe:	f898 2000 	ldrb.w	r2, [r8]
   d9ec2:	9000      	str	r0, [sp, #0]
   d9ec4:	f105 0110 	add.w	r1, r5, #16
   d9ec8:	b289      	uxth	r1, r1
   d9eca:	4887      	ldr	r0, [pc, #540]	; (da0e8 <_Z9conditionii+0xc90>)
   d9ecc:	f004 fe18 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9ed0:	7838      	ldrb	r0, [r7, #0]
   d9ed2:	f899 3000 	ldrb.w	r3, [r9]
   d9ed6:	f898 2000 	ldrb.w	r2, [r8]
   d9eda:	9000      	str	r0, [sp, #0]
   d9edc:	f105 0111 	add.w	r1, r5, #17
   d9ee0:	b289      	uxth	r1, r1
   d9ee2:	4881      	ldr	r0, [pc, #516]	; (da0e8 <_Z9conditionii+0xc90>)
   d9ee4:	f004 fe0c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9ee8:	7838      	ldrb	r0, [r7, #0]
   d9eea:	f899 3000 	ldrb.w	r3, [r9]
   d9eee:	f898 2000 	ldrb.w	r2, [r8]
   d9ef2:	9000      	str	r0, [sp, #0]
   d9ef4:	f105 0112 	add.w	r1, r5, #18
   d9ef8:	b289      	uxth	r1, r1
   d9efa:	487b      	ldr	r0, [pc, #492]	; (da0e8 <_Z9conditionii+0xc90>)
   d9efc:	f004 fe00 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9f00:	7838      	ldrb	r0, [r7, #0]
   d9f02:	f899 3000 	ldrb.w	r3, [r9]
   d9f06:	f898 2000 	ldrb.w	r2, [r8]
   d9f0a:	9000      	str	r0, [sp, #0]
   d9f0c:	f105 011e 	add.w	r1, r5, #30
   d9f10:	b289      	uxth	r1, r1
   d9f12:	4875      	ldr	r0, [pc, #468]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f14:	f004 fdf4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9f18:	7838      	ldrb	r0, [r7, #0]
   d9f1a:	f899 3000 	ldrb.w	r3, [r9]
   d9f1e:	f898 2000 	ldrb.w	r2, [r8]
   d9f22:	9000      	str	r0, [sp, #0]
   d9f24:	f105 011d 	add.w	r1, r5, #29
   d9f28:	b289      	uxth	r1, r1
   d9f2a:	486f      	ldr	r0, [pc, #444]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f2c:	f004 fde8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9f30:	7838      	ldrb	r0, [r7, #0]
   d9f32:	f899 3000 	ldrb.w	r3, [r9]
   d9f36:	f898 2000 	ldrb.w	r2, [r8]
   d9f3a:	9000      	str	r0, [sp, #0]
   d9f3c:	f105 0120 	add.w	r1, r5, #32
   d9f40:	b289      	uxth	r1, r1
   d9f42:	4869      	ldr	r0, [pc, #420]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f44:	f004 fddc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9f48:	7838      	ldrb	r0, [r7, #0]
   d9f4a:	f899 3000 	ldrb.w	r3, [r9]
   d9f4e:	f898 2000 	ldrb.w	r2, [r8]
   d9f52:	9000      	str	r0, [sp, #0]
   d9f54:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9f58:	b289      	uxth	r1, r1
   d9f5a:	4863      	ldr	r0, [pc, #396]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f5c:	f004 fdd0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9f60:	7838      	ldrb	r0, [r7, #0]
   d9f62:	f899 3000 	ldrb.w	r3, [r9]
   d9f66:	f898 2000 	ldrb.w	r2, [r8]
   d9f6a:	9000      	str	r0, [sp, #0]
   d9f6c:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9f70:	b289      	uxth	r1, r1
   d9f72:	485d      	ldr	r0, [pc, #372]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f74:	f004 fdc4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9f78:	7838      	ldrb	r0, [r7, #0]
   d9f7a:	f899 3000 	ldrb.w	r3, [r9]
   d9f7e:	f898 2000 	ldrb.w	r2, [r8]
   d9f82:	9000      	str	r0, [sp, #0]
   d9f84:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9f88:	b289      	uxth	r1, r1
   d9f8a:	4857      	ldr	r0, [pc, #348]	; (da0e8 <_Z9conditionii+0xc90>)
   d9f8c:	f004 fdb8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9f90:	7838      	ldrb	r0, [r7, #0]
   d9f92:	f899 3000 	ldrb.w	r3, [r9]
   d9f96:	f898 2000 	ldrb.w	r2, [r8]
   d9f9a:	9000      	str	r0, [sp, #0]
   d9f9c:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9fa0:	b289      	uxth	r1, r1
   d9fa2:	4851      	ldr	r0, [pc, #324]	; (da0e8 <_Z9conditionii+0xc90>)
   d9fa4:	f004 fdac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9fa8:	7838      	ldrb	r0, [r7, #0]
   d9faa:	f899 3000 	ldrb.w	r3, [r9]
   d9fae:	f898 2000 	ldrb.w	r2, [r8]
   d9fb2:	9000      	str	r0, [sp, #0]
   d9fb4:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9fb8:	b289      	uxth	r1, r1
   d9fba:	484b      	ldr	r0, [pc, #300]	; (da0e8 <_Z9conditionii+0xc90>)
   d9fbc:	f004 fda0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9fc0:	7838      	ldrb	r0, [r7, #0]
   d9fc2:	f899 3000 	ldrb.w	r3, [r9]
   d9fc6:	f898 2000 	ldrb.w	r2, [r8]
   d9fca:	9000      	str	r0, [sp, #0]
   d9fcc:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9fd0:	b289      	uxth	r1, r1
   d9fd2:	4845      	ldr	r0, [pc, #276]	; (da0e8 <_Z9conditionii+0xc90>)
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   d9fd4:	f04f 0a02 	mov.w	sl, #2
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9fd8:	f004 fd92 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   d9fdc:	6838      	ldr	r0, [r7, #0]
   d9fde:	fb90 f0fa 	sdiv	r0, r0, sl
   d9fe2:	f105 010b 	add.w	r1, r5, #11
   d9fe6:	b2c0      	uxtb	r0, r0
   d9fe8:	f8d9 3000 	ldr.w	r3, [r9]
   d9fec:	f8d8 2000 	ldr.w	r2, [r8]
   d9ff0:	fb93 f3fa 	sdiv	r3, r3, sl
   d9ff4:	fb92 f2fa 	sdiv	r2, r2, sl
   d9ff8:	9000      	str	r0, [sp, #0]
   d9ffa:	b2db      	uxtb	r3, r3
   d9ffc:	b2d2      	uxtb	r2, r2
   d9ffe:	b289      	uxth	r1, r1
   da000:	4839      	ldr	r0, [pc, #228]	; (da0e8 <_Z9conditionii+0xc90>)
   da002:	f004 fd7d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/2,gclock/2,bclock/2);
   da006:	6838      	ldr	r0, [r7, #0]
   da008:	fb90 f0fa 	sdiv	r0, r0, sl
   da00c:	f105 0114 	add.w	r1, r5, #20
   da010:	b2c0      	uxtb	r0, r0
   da012:	f8d9 3000 	ldr.w	r3, [r9]
   da016:	f8d8 2000 	ldr.w	r2, [r8]
   da01a:	fb93 f3fa 	sdiv	r3, r3, sl
   da01e:	fb92 f2fa 	sdiv	r2, r2, sl
   da022:	9000      	str	r0, [sp, #0]
   da024:	b2db      	uxtb	r3, r3
   da026:	b2d2      	uxtb	r2, r2
   da028:	b289      	uxth	r1, r1
   da02a:	482f      	ldr	r0, [pc, #188]	; (da0e8 <_Z9conditionii+0xc90>)
   da02c:	f004 fd68 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/2,gclock/2,bclock/2);
   da030:	6838      	ldr	r0, [r7, #0]
   da032:	fb90 f0fa 	sdiv	r0, r0, sl
   da036:	f105 011b 	add.w	r1, r5, #27
   da03a:	b2c0      	uxtb	r0, r0
   da03c:	f8d9 3000 	ldr.w	r3, [r9]
   da040:	f8d8 2000 	ldr.w	r2, [r8]
   da044:	fb93 f3fa 	sdiv	r3, r3, sl
   da048:	fb92 f2fa 	sdiv	r2, r2, sl
   da04c:	9000      	str	r0, [sp, #0]
   da04e:	b2db      	uxtb	r3, r3
   da050:	b2d2      	uxtb	r2, r2
   da052:	b289      	uxth	r1, r1
   da054:	4824      	ldr	r0, [pc, #144]	; (da0e8 <_Z9conditionii+0xc90>)
   da056:	f004 fd53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/2,gclock/2,bclock/2);
   da05a:	6838      	ldr	r0, [r7, #0]
   da05c:	fb90 f0fa 	sdiv	r0, r0, sl
   da060:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da064:	b2c0      	uxtb	r0, r0
   da066:	f8d9 3000 	ldr.w	r3, [r9]
   da06a:	f8d8 2000 	ldr.w	r2, [r8]
   da06e:	fb93 f3fa 	sdiv	r3, r3, sl
   da072:	fb92 f2fa 	sdiv	r2, r2, sl
   da076:	9000      	str	r0, [sp, #0]
   da078:	b2db      	uxtb	r3, r3
   da07a:	b2d2      	uxtb	r2, r2
   da07c:	b289      	uxth	r1, r1
   da07e:	481a      	ldr	r0, [pc, #104]	; (da0e8 <_Z9conditionii+0xc90>)
   da080:	f004 fd3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock/2,gclock/2,bclock/2);
   da084:	6838      	ldr	r0, [r7, #0]
   da086:	fb90 f0fa 	sdiv	r0, r0, sl
   da08a:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da08e:	b2c0      	uxtb	r0, r0
   da090:	f8d9 3000 	ldr.w	r3, [r9]
   da094:	f8d8 2000 	ldr.w	r2, [r8]
   da098:	fb93 f3fa 	sdiv	r3, r3, sl
   da09c:	fb92 f2fa 	sdiv	r2, r2, sl
   da0a0:	9000      	str	r0, [sp, #0]
   da0a2:	b2db      	uxtb	r3, r3
   da0a4:	b2d2      	uxtb	r2, r2
   da0a6:	b289      	uxth	r1, r1
   da0a8:	480f      	ldr	r0, [pc, #60]	; (da0e8 <_Z9conditionii+0xc90>)
   da0aa:	f004 fd29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock/3,gclock/3,bclock/3);
   da0ae:	f04f 0a03 	mov.w	sl, #3
   da0b2:	6838      	ldr	r0, [r7, #0]
   da0b4:	fb90 f0fa 	sdiv	r0, r0, sl
   da0b8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da0bc:	b2c0      	uxtb	r0, r0
   da0be:	f8d9 3000 	ldr.w	r3, [r9]
   da0c2:	f8d8 2000 	ldr.w	r2, [r8]
   da0c6:	fb93 f3fa 	sdiv	r3, r3, sl
   da0ca:	9000      	str	r0, [sp, #0]
   da0cc:	b2db      	uxtb	r3, r3
   da0ce:	fb92 f2fa 	sdiv	r2, r2, sl
   da0d2:	b289      	uxth	r1, r1
   da0d4:	b2d2      	uxtb	r2, r2
   da0d6:	4804      	ldr	r0, [pc, #16]	; (da0e8 <_Z9conditionii+0xc90>)
   da0d8:	f004 fd12 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
   da0dc:	f8d9 3000 	ldr.w	r3, [r9]
   da0e0:	f000 be3d 	b.w	dad5e <_Z9conditionii+0x1906>
   da0e4:	2003e35c 	.word	0x2003e35c
   da0e8:	2003e31c 	.word	0x2003e31c
   da0ec:	2003e314 	.word	0x2003e314
   da0f0:	2003e354 	.word	0x2003e354
            
        }
    }
    else
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)
   da0f4:	2b01      	cmp	r3, #1
   da0f6:	d904      	bls.n	da102 <_Z9conditionii+0xcaa>
   da0f8:	f240 23d1 	movw	r3, #721	; 0x2d1
   da0fc:	4298      	cmp	r0, r3
   da0fe:	f040 81e8 	bne.w	da4d2 <_Z9conditionii+0x107a>
        {
            strip.setPixelColor(inpix+16,rclock,gclock*1.2,bclock/3);
   da102:	f8df a354 	ldr.w	sl, [pc, #852]	; da458 <_Z9conditionii+0x1000>
   da106:	f8df 8354 	ldr.w	r8, [pc, #852]	; da45c <_Z9conditionii+0x1004>
   da10a:	f8da 0000 	ldr.w	r0, [sl]
   da10e:	f8df 9350 	ldr.w	r9, [pc, #848]	; da460 <_Z9conditionii+0x1008>
   da112:	f007 fbe1 	bl	e18d8 <__aeabi_i2d>
   da116:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da11a:	4bcd      	ldr	r3, [pc, #820]	; (da450 <_Z9conditionii+0xff8>)
   da11c:	f007 fc42 	bl	e19a4 <__aeabi_dmul>
   da120:	f007 ff02 	bl	e1f28 <__aeabi_d2uiz>
   da124:	b2a5      	uxth	r5, r4
   da126:	2703      	movs	r7, #3
   da128:	f8d8 3000 	ldr.w	r3, [r8]
   da12c:	fb93 f3f7 	sdiv	r3, r3, r7
   da130:	f105 0110 	add.w	r1, r5, #16
   da134:	b2db      	uxtb	r3, r3
   da136:	f899 2000 	ldrb.w	r2, [r9]
   da13a:	9300      	str	r3, [sp, #0]
   da13c:	b289      	uxth	r1, r1
   da13e:	b2c3      	uxtb	r3, r0
   da140:	48c4      	ldr	r0, [pc, #784]	; (da454 <_Z9conditionii+0xffc>)
   da142:	f004 fcdd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock*1.2,bclock/3);
   da146:	f8da 0000 	ldr.w	r0, [sl]
   da14a:	f007 fbc5 	bl	e18d8 <__aeabi_i2d>
   da14e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da152:	4bbf      	ldr	r3, [pc, #764]	; (da450 <_Z9conditionii+0xff8>)
   da154:	f007 fc26 	bl	e19a4 <__aeabi_dmul>
   da158:	f007 fee6 	bl	e1f28 <__aeabi_d2uiz>
   da15c:	f8d8 3000 	ldr.w	r3, [r8]
   da160:	fb93 f3f7 	sdiv	r3, r3, r7
   da164:	f105 011f 	add.w	r1, r5, #31
   da168:	b2db      	uxtb	r3, r3
   da16a:	f899 2000 	ldrb.w	r2, [r9]
   da16e:	9300      	str	r3, [sp, #0]
   da170:	b289      	uxth	r1, r1
   da172:	b2c3      	uxtb	r3, r0
   da174:	48b7      	ldr	r0, [pc, #732]	; (da454 <_Z9conditionii+0xffc>)
   da176:	f004 fcc3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock*1.2,bclock/3);
   da17a:	f8da 0000 	ldr.w	r0, [sl]
   da17e:	f007 fbab 	bl	e18d8 <__aeabi_i2d>
   da182:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da186:	4bb2      	ldr	r3, [pc, #712]	; (da450 <_Z9conditionii+0xff8>)
   da188:	f007 fc0c 	bl	e19a4 <__aeabi_dmul>
   da18c:	f007 fecc 	bl	e1f28 <__aeabi_d2uiz>
   da190:	f8d8 3000 	ldr.w	r3, [r8]
   da194:	fb93 f3f7 	sdiv	r3, r3, r7
   da198:	f105 0120 	add.w	r1, r5, #32
   da19c:	b2db      	uxtb	r3, r3
   da19e:	f899 2000 	ldrb.w	r2, [r9]
   da1a2:	9300      	str	r3, [sp, #0]
   da1a4:	b289      	uxth	r1, r1
   da1a6:	b2c3      	uxtb	r3, r0
   da1a8:	48aa      	ldr	r0, [pc, #680]	; (da454 <_Z9conditionii+0xffc>)
   da1aa:	f004 fca9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock*1.2,bclock/3);
   da1ae:	f8da 0000 	ldr.w	r0, [sl]
   da1b2:	f007 fb91 	bl	e18d8 <__aeabi_i2d>
   da1b6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da1ba:	4ba5      	ldr	r3, [pc, #660]	; (da450 <_Z9conditionii+0xff8>)
   da1bc:	f007 fbf2 	bl	e19a4 <__aeabi_dmul>
   da1c0:	f007 feb2 	bl	e1f28 <__aeabi_d2uiz>
   da1c4:	f8d8 3000 	ldr.w	r3, [r8]
   da1c8:	fb93 f3f7 	sdiv	r3, r3, r7
   da1cc:	f105 011e 	add.w	r1, r5, #30
   da1d0:	b2db      	uxtb	r3, r3
   da1d2:	f899 2000 	ldrb.w	r2, [r9]
   da1d6:	9300      	str	r3, [sp, #0]
   da1d8:	b289      	uxth	r1, r1
   da1da:	b2c3      	uxtb	r3, r0
   da1dc:	489d      	ldr	r0, [pc, #628]	; (da454 <_Z9conditionii+0xffc>)
   da1de:	f004 fc8f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock*1.2,bclock/3);
   da1e2:	f8da 0000 	ldr.w	r0, [sl]
   da1e6:	f007 fb77 	bl	e18d8 <__aeabi_i2d>
   da1ea:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da1ee:	4b98      	ldr	r3, [pc, #608]	; (da450 <_Z9conditionii+0xff8>)
   da1f0:	f007 fbd8 	bl	e19a4 <__aeabi_dmul>
   da1f4:	f007 fe98 	bl	e1f28 <__aeabi_d2uiz>
   da1f8:	f8d8 3000 	ldr.w	r3, [r8]
   da1fc:	fb93 f3f7 	sdiv	r3, r3, r7
   da200:	f105 0121 	add.w	r1, r5, #33	; 0x21
   da204:	b2db      	uxtb	r3, r3
   da206:	f899 2000 	ldrb.w	r2, [r9]
   da20a:	9300      	str	r3, [sp, #0]
   da20c:	b289      	uxth	r1, r1
   da20e:	b2c3      	uxtb	r3, r0
   da210:	4890      	ldr	r0, [pc, #576]	; (da454 <_Z9conditionii+0xffc>)
   da212:	f004 fc75 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock*1.2,bclock/3);
   da216:	f8da 0000 	ldr.w	r0, [sl]
   da21a:	f007 fb5d 	bl	e18d8 <__aeabi_i2d>
   da21e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da222:	4b8b      	ldr	r3, [pc, #556]	; (da450 <_Z9conditionii+0xff8>)
   da224:	f007 fbbe 	bl	e19a4 <__aeabi_dmul>
   da228:	f007 fe7e 	bl	e1f28 <__aeabi_d2uiz>
   da22c:	f8d8 3000 	ldr.w	r3, [r8]
   da230:	fb93 f3f7 	sdiv	r3, r3, r7
   da234:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   da238:	b2db      	uxtb	r3, r3
   da23a:	f899 2000 	ldrb.w	r2, [r9]
   da23e:	9300      	str	r3, [sp, #0]
   da240:	b289      	uxth	r1, r1
   da242:	b2c3      	uxtb	r3, r0
   da244:	4883      	ldr	r0, [pc, #524]	; (da454 <_Z9conditionii+0xffc>)
   da246:	f004 fc5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.2,bclock/3);
   da24a:	f8da 0000 	ldr.w	r0, [sl]
   da24e:	f007 fb43 	bl	e18d8 <__aeabi_i2d>
   da252:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da256:	4b7e      	ldr	r3, [pc, #504]	; (da450 <_Z9conditionii+0xff8>)
   da258:	f007 fba4 	bl	e19a4 <__aeabi_dmul>
   da25c:	f007 fe64 	bl	e1f28 <__aeabi_d2uiz>
   da260:	f8d8 3000 	ldr.w	r3, [r8]
   da264:	fb93 f3f7 	sdiv	r3, r3, r7
   da268:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da26c:	b2db      	uxtb	r3, r3
   da26e:	f899 2000 	ldrb.w	r2, [r9]
   da272:	9300      	str	r3, [sp, #0]
   da274:	b289      	uxth	r1, r1
   da276:	b2c3      	uxtb	r3, r0
   da278:	4876      	ldr	r0, [pc, #472]	; (da454 <_Z9conditionii+0xffc>)
   da27a:	f004 fc41 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock*1.2,bclock/3);
   da27e:	f8da 0000 	ldr.w	r0, [sl]
   da282:	f007 fb29 	bl	e18d8 <__aeabi_i2d>
   da286:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da28a:	4b71      	ldr	r3, [pc, #452]	; (da450 <_Z9conditionii+0xff8>)
   da28c:	f007 fb8a 	bl	e19a4 <__aeabi_dmul>
   da290:	f007 fe4a 	bl	e1f28 <__aeabi_d2uiz>
   da294:	f8d8 3000 	ldr.w	r3, [r8]
   da298:	fb93 f3f7 	sdiv	r3, r3, r7
   da29c:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   da2a0:	b2db      	uxtb	r3, r3
   da2a2:	f899 2000 	ldrb.w	r2, [r9]
   da2a6:	9300      	str	r3, [sp, #0]
   da2a8:	b289      	uxth	r1, r1
   da2aa:	b2c3      	uxtb	r3, r0
   da2ac:	4869      	ldr	r0, [pc, #420]	; (da454 <_Z9conditionii+0xffc>)
   da2ae:	f004 fc27 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock*1.2,bclock/3);
   da2b2:	f8da 0000 	ldr.w	r0, [sl]
   da2b6:	f007 fb0f 	bl	e18d8 <__aeabi_i2d>
   da2ba:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da2be:	4b64      	ldr	r3, [pc, #400]	; (da450 <_Z9conditionii+0xff8>)
   da2c0:	f007 fb70 	bl	e19a4 <__aeabi_dmul>
   da2c4:	f007 fe30 	bl	e1f28 <__aeabi_d2uiz>
   da2c8:	f8d8 3000 	ldr.w	r3, [r8]
   da2cc:	fb93 f3f7 	sdiv	r3, r3, r7
   da2d0:	f105 0123 	add.w	r1, r5, #35	; 0x23
   da2d4:	b2db      	uxtb	r3, r3
   da2d6:	f899 2000 	ldrb.w	r2, [r9]
   da2da:	9300      	str	r3, [sp, #0]
   da2dc:	b289      	uxth	r1, r1
   da2de:	b2c3      	uxtb	r3, r0
   da2e0:	485c      	ldr	r0, [pc, #368]	; (da454 <_Z9conditionii+0xffc>)
   da2e2:	f004 fc0d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock*1.2,bclock/3);
   da2e6:	f8da 0000 	ldr.w	r0, [sl]
   da2ea:	f007 faf5 	bl	e18d8 <__aeabi_i2d>
   da2ee:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da2f2:	4b57      	ldr	r3, [pc, #348]	; (da450 <_Z9conditionii+0xff8>)
   da2f4:	f007 fb56 	bl	e19a4 <__aeabi_dmul>
   da2f8:	f007 fe16 	bl	e1f28 <__aeabi_d2uiz>
   da2fc:	f8d8 3000 	ldr.w	r3, [r8]
   da300:	fb93 f3f7 	sdiv	r3, r3, r7
   da304:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   da308:	b2db      	uxtb	r3, r3
   da30a:	f899 2000 	ldrb.w	r2, [r9]
   da30e:	9300      	str	r3, [sp, #0]
   da310:	b289      	uxth	r1, r1
   da312:	b2c3      	uxtb	r3, r0
   da314:	484f      	ldr	r0, [pc, #316]	; (da454 <_Z9conditionii+0xffc>)
   da316:	f004 fbf3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock*1.2,bclock/3);
   da31a:	f8da 0000 	ldr.w	r0, [sl]
   da31e:	f007 fadb 	bl	e18d8 <__aeabi_i2d>
   da322:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da326:	4b4a      	ldr	r3, [pc, #296]	; (da450 <_Z9conditionii+0xff8>)
   da328:	f007 fb3c 	bl	e19a4 <__aeabi_dmul>
   da32c:	f007 fdfc 	bl	e1f28 <__aeabi_d2uiz>
   da330:	f8d8 3000 	ldr.w	r3, [r8]
   da334:	fb93 f3f7 	sdiv	r3, r3, r7
   da338:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da33c:	b2db      	uxtb	r3, r3
   da33e:	f899 2000 	ldrb.w	r2, [r9]
   da342:	9300      	str	r3, [sp, #0]
   da344:	b289      	uxth	r1, r1
   da346:	b2c3      	uxtb	r3, r0
   da348:	4842      	ldr	r0, [pc, #264]	; (da454 <_Z9conditionii+0xffc>)
   da34a:	f004 fbd9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock*1.2,bclock/3);
   da34e:	f8da 0000 	ldr.w	r0, [sl]
   da352:	f007 fac1 	bl	e18d8 <__aeabi_i2d>
   da356:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da35a:	4b3d      	ldr	r3, [pc, #244]	; (da450 <_Z9conditionii+0xff8>)
   da35c:	f007 fb22 	bl	e19a4 <__aeabi_dmul>
   da360:	f007 fde2 	bl	e1f28 <__aeabi_d2uiz>
   da364:	f8d8 3000 	ldr.w	r3, [r8]
   da368:	fb93 f3f7 	sdiv	r3, r3, r7
   da36c:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da370:	b2db      	uxtb	r3, r3
   da372:	f899 2000 	ldrb.w	r2, [r9]
   da376:	9300      	str	r3, [sp, #0]
   da378:	b289      	uxth	r1, r1
   da37a:	b2c3      	uxtb	r3, r0
   da37c:	4835      	ldr	r0, [pc, #212]	; (da454 <_Z9conditionii+0xffc>)
   da37e:	f004 fbbf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock*1.2,bclock/3);
   da382:	f8da 0000 	ldr.w	r0, [sl]
   da386:	f007 faa7 	bl	e18d8 <__aeabi_i2d>
   da38a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da38e:	4b30      	ldr	r3, [pc, #192]	; (da450 <_Z9conditionii+0xff8>)
   da390:	f007 fb08 	bl	e19a4 <__aeabi_dmul>
   da394:	f007 fdc8 	bl	e1f28 <__aeabi_d2uiz>
   da398:	f8d8 3000 	ldr.w	r3, [r8]
   da39c:	fb93 f3f7 	sdiv	r3, r3, r7
   da3a0:	f105 011a 	add.w	r1, r5, #26
   da3a4:	b2db      	uxtb	r3, r3
   da3a6:	f899 2000 	ldrb.w	r2, [r9]
   da3aa:	9300      	str	r3, [sp, #0]
   da3ac:	b289      	uxth	r1, r1
   da3ae:	b2c3      	uxtb	r3, r0
   da3b0:	4828      	ldr	r0, [pc, #160]	; (da454 <_Z9conditionii+0xffc>)
   da3b2:	f004 fba5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock*1.2,bclock/3);
   da3b6:	f8da 0000 	ldr.w	r0, [sl]
   da3ba:	f007 fa8d 	bl	e18d8 <__aeabi_i2d>
   da3be:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da3c2:	4b23      	ldr	r3, [pc, #140]	; (da450 <_Z9conditionii+0xff8>)
   da3c4:	f007 faee 	bl	e19a4 <__aeabi_dmul>
   da3c8:	f007 fdae 	bl	e1f28 <__aeabi_d2uiz>
   da3cc:	f8d8 3000 	ldr.w	r3, [r8]
   da3d0:	fb93 f3f7 	sdiv	r3, r3, r7
   da3d4:	f105 0125 	add.w	r1, r5, #37	; 0x25
   da3d8:	b2db      	uxtb	r3, r3
   da3da:	f899 2000 	ldrb.w	r2, [r9]
   da3de:	9300      	str	r3, [sp, #0]
   da3e0:	b289      	uxth	r1, r1
   da3e2:	b2c3      	uxtb	r3, r0
   da3e4:	481b      	ldr	r0, [pc, #108]	; (da454 <_Z9conditionii+0xffc>)
   da3e6:	f004 fb8b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock*1.2,bclock/3);
   da3ea:	f8da 0000 	ldr.w	r0, [sl]
   da3ee:	f007 fa73 	bl	e18d8 <__aeabi_i2d>
   da3f2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da3f6:	4b16      	ldr	r3, [pc, #88]	; (da450 <_Z9conditionii+0xff8>)
   da3f8:	f007 fad4 	bl	e19a4 <__aeabi_dmul>
   da3fc:	f007 fd94 	bl	e1f28 <__aeabi_d2uiz>
   da400:	f8d8 3000 	ldr.w	r3, [r8]
   da404:	fb93 f3f7 	sdiv	r3, r3, r7
   da408:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da40c:	b2db      	uxtb	r3, r3
   da40e:	f899 2000 	ldrb.w	r2, [r9]
   da412:	9300      	str	r3, [sp, #0]
   da414:	b289      	uxth	r1, r1
   da416:	b2c3      	uxtb	r3, r0
   da418:	480e      	ldr	r0, [pc, #56]	; (da454 <_Z9conditionii+0xffc>)
   da41a:	f004 fb71 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,rclock,gclock*1.2,bclock/3);
   da41e:	f8da 0000 	ldr.w	r0, [sl]
   da422:	f007 fa59 	bl	e18d8 <__aeabi_i2d>
   da426:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da42a:	4b09      	ldr	r3, [pc, #36]	; (da450 <_Z9conditionii+0xff8>)
   da42c:	f007 faba 	bl	e19a4 <__aeabi_dmul>
   da430:	f007 fd7a 	bl	e1f28 <__aeabi_d2uiz>
   da434:	f8d8 3000 	ldr.w	r3, [r8]
   da438:	fb93 f3f7 	sdiv	r3, r3, r7
   da43c:	f105 0116 	add.w	r1, r5, #22
   da440:	b2db      	uxtb	r3, r3
   da442:	f899 2000 	ldrb.w	r2, [r9]
   da446:	9300      	str	r3, [sp, #0]
   da448:	b289      	uxth	r1, r1
   da44a:	b2c3      	uxtb	r3, r0
   da44c:	e00a      	b.n	da464 <_Z9conditionii+0x100c>
   da44e:	bf00      	nop
   da450:	3ff33333 	.word	0x3ff33333
   da454:	2003e31c 	.word	0x2003e31c
   da458:	2003e314 	.word	0x2003e314
   da45c:	2003e35c 	.word	0x2003e35c
   da460:	2003e354 	.word	0x2003e354
   da464:	48c3      	ldr	r0, [pc, #780]	; (da774 <_Z9conditionii+0x131c>)
   da466:	f004 fb4b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock,gclock*1.2,bclock/3);
   da46a:	f8da 0000 	ldr.w	r0, [sl]
   da46e:	f007 fa33 	bl	e18d8 <__aeabi_i2d>
   da472:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da476:	4bc0      	ldr	r3, [pc, #768]	; (da778 <_Z9conditionii+0x1320>)
   da478:	f007 fa94 	bl	e19a4 <__aeabi_dmul>
   da47c:	f007 fd54 	bl	e1f28 <__aeabi_d2uiz>
   da480:	f8d8 3000 	ldr.w	r3, [r8]
   da484:	fb93 f3f7 	sdiv	r3, r3, r7
   da488:	f105 0119 	add.w	r1, r5, #25
   da48c:	b2db      	uxtb	r3, r3
   da48e:	f899 2000 	ldrb.w	r2, [r9]
   da492:	9300      	str	r3, [sp, #0]
   da494:	b289      	uxth	r1, r1
   da496:	b2c3      	uxtb	r3, r0
   da498:	48b6      	ldr	r0, [pc, #728]	; (da774 <_Z9conditionii+0x131c>)
   da49a:	f004 fb31 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock,gclock*1.2,bclock/3);
   da49e:	f8da 0000 	ldr.w	r0, [sl]
   da4a2:	f007 fa19 	bl	e18d8 <__aeabi_i2d>
   da4a6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da4aa:	4bb3      	ldr	r3, [pc, #716]	; (da778 <_Z9conditionii+0x1320>)
   da4ac:	f007 fa7a 	bl	e19a4 <__aeabi_dmul>
   da4b0:	f007 fd3a 	bl	e1f28 <__aeabi_d2uiz>
   da4b4:	f8d8 3000 	ldr.w	r3, [r8]
   da4b8:	fb93 f7f7 	sdiv	r7, r3, r7
   da4bc:	f105 0126 	add.w	r1, r5, #38	; 0x26
   da4c0:	b2ff      	uxtb	r7, r7
   da4c2:	f899 2000 	ldrb.w	r2, [r9]
   da4c6:	9700      	str	r7, [sp, #0]
   da4c8:	b2c3      	uxtb	r3, r0
   da4ca:	b289      	uxth	r1, r1
   da4cc:	48a9      	ldr	r0, [pc, #676]	; (da774 <_Z9conditionii+0x131c>)
   da4ce:	f004 fb17 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   da4d2:	f1bb 0f1d 	cmp.w	fp, #29
   da4d6:	f200 80d1 	bhi.w	da67c <_Z9conditionii+0x1224>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   da4da:	4fa8      	ldr	r7, [pc, #672]	; (da77c <_Z9conditionii+0x1324>)
   da4dc:	f8df 92a0 	ldr.w	r9, [pc, #672]	; da780 <_Z9conditionii+0x1328>
   da4e0:	f8df 82a0 	ldr.w	r8, [pc, #672]	; da784 <_Z9conditionii+0x132c>
   da4e4:	7838      	ldrb	r0, [r7, #0]
   da4e6:	f899 3000 	ldrb.w	r3, [r9]
   da4ea:	f898 2000 	ldrb.w	r2, [r8]
   da4ee:	9000      	str	r0, [sp, #0]
   da4f0:	b2a5      	uxth	r5, r4
   da4f2:	1c69      	adds	r1, r5, #1
   da4f4:	b289      	uxth	r1, r1
   da4f6:	489f      	ldr	r0, [pc, #636]	; (da774 <_Z9conditionii+0x131c>)
   da4f8:	f004 fb02 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   da4fc:	7838      	ldrb	r0, [r7, #0]
   da4fe:	f899 3000 	ldrb.w	r3, [r9]
   da502:	f898 2000 	ldrb.w	r2, [r8]
   da506:	9000      	str	r0, [sp, #0]
   da508:	f105 011f 	add.w	r1, r5, #31
   da50c:	b289      	uxth	r1, r1
   da50e:	4899      	ldr	r0, [pc, #612]	; (da774 <_Z9conditionii+0x131c>)
   da510:	f004 faf6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   da514:	7838      	ldrb	r0, [r7, #0]
   da516:	f899 3000 	ldrb.w	r3, [r9]
   da51a:	f898 2000 	ldrb.w	r2, [r8]
   da51e:	9000      	str	r0, [sp, #0]
   da520:	f105 010f 	add.w	r1, r5, #15
   da524:	b289      	uxth	r1, r1
   da526:	4893      	ldr	r0, [pc, #588]	; (da774 <_Z9conditionii+0x131c>)
   da528:	f004 faea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   da52c:	7838      	ldrb	r0, [r7, #0]
   da52e:	f899 3000 	ldrb.w	r3, [r9]
   da532:	f898 2000 	ldrb.w	r2, [r8]
   da536:	9000      	str	r0, [sp, #0]
   da538:	f105 010e 	add.w	r1, r5, #14
   da53c:	b289      	uxth	r1, r1
   da53e:	488d      	ldr	r0, [pc, #564]	; (da774 <_Z9conditionii+0x131c>)
   da540:	f004 fade 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   da544:	7838      	ldrb	r0, [r7, #0]
   da546:	f899 3000 	ldrb.w	r3, [r9]
   da54a:	f898 2000 	ldrb.w	r2, [r8]
   da54e:	9000      	str	r0, [sp, #0]
   da550:	f105 010d 	add.w	r1, r5, #13
   da554:	b289      	uxth	r1, r1
   da556:	4887      	ldr	r0, [pc, #540]	; (da774 <_Z9conditionii+0x131c>)
   da558:	f004 fad2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   da55c:	7838      	ldrb	r0, [r7, #0]
   da55e:	f899 3000 	ldrb.w	r3, [r9]
   da562:	f898 2000 	ldrb.w	r2, [r8]
   da566:	9000      	str	r0, [sp, #0]
   da568:	f105 0110 	add.w	r1, r5, #16
   da56c:	b289      	uxth	r1, r1
   da56e:	4881      	ldr	r0, [pc, #516]	; (da774 <_Z9conditionii+0x131c>)
   da570:	f004 fac6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   da574:	7838      	ldrb	r0, [r7, #0]
   da576:	f899 3000 	ldrb.w	r3, [r9]
   da57a:	f898 2000 	ldrb.w	r2, [r8]
   da57e:	9000      	str	r0, [sp, #0]
   da580:	f105 0111 	add.w	r1, r5, #17
   da584:	b289      	uxth	r1, r1
   da586:	487b      	ldr	r0, [pc, #492]	; (da774 <_Z9conditionii+0x131c>)
   da588:	f004 faba 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   da58c:	7838      	ldrb	r0, [r7, #0]
   da58e:	f899 3000 	ldrb.w	r3, [r9]
   da592:	f898 2000 	ldrb.w	r2, [r8]
   da596:	9000      	str	r0, [sp, #0]
   da598:	f105 0112 	add.w	r1, r5, #18
   da59c:	b289      	uxth	r1, r1
   da59e:	4875      	ldr	r0, [pc, #468]	; (da774 <_Z9conditionii+0x131c>)
   da5a0:	f004 faae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   da5a4:	7838      	ldrb	r0, [r7, #0]
   da5a6:	f899 3000 	ldrb.w	r3, [r9]
   da5aa:	f898 2000 	ldrb.w	r2, [r8]
   da5ae:	9000      	str	r0, [sp, #0]
   da5b0:	f105 011e 	add.w	r1, r5, #30
   da5b4:	b289      	uxth	r1, r1
   da5b6:	486f      	ldr	r0, [pc, #444]	; (da774 <_Z9conditionii+0x131c>)
   da5b8:	f004 faa2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   da5bc:	7838      	ldrb	r0, [r7, #0]
   da5be:	f899 3000 	ldrb.w	r3, [r9]
   da5c2:	f898 2000 	ldrb.w	r2, [r8]
   da5c6:	9000      	str	r0, [sp, #0]
   da5c8:	f105 011d 	add.w	r1, r5, #29
   da5cc:	b289      	uxth	r1, r1
   da5ce:	4869      	ldr	r0, [pc, #420]	; (da774 <_Z9conditionii+0x131c>)
   da5d0:	f004 fa96 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   da5d4:	7838      	ldrb	r0, [r7, #0]
   da5d6:	f899 3000 	ldrb.w	r3, [r9]
   da5da:	f898 2000 	ldrb.w	r2, [r8]
   da5de:	9000      	str	r0, [sp, #0]
   da5e0:	f105 0120 	add.w	r1, r5, #32
   da5e4:	b289      	uxth	r1, r1
   da5e6:	4863      	ldr	r0, [pc, #396]	; (da774 <_Z9conditionii+0x131c>)
   da5e8:	f004 fa8a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   da5ec:	7838      	ldrb	r0, [r7, #0]
   da5ee:	f899 3000 	ldrb.w	r3, [r9]
   da5f2:	f898 2000 	ldrb.w	r2, [r8]
   da5f6:	9000      	str	r0, [sp, #0]
   da5f8:	f105 0121 	add.w	r1, r5, #33	; 0x21
   da5fc:	b289      	uxth	r1, r1
   da5fe:	485d      	ldr	r0, [pc, #372]	; (da774 <_Z9conditionii+0x131c>)
   da600:	f004 fa7e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   da604:	7838      	ldrb	r0, [r7, #0]
   da606:	f899 3000 	ldrb.w	r3, [r9]
   da60a:	f898 2000 	ldrb.w	r2, [r8]
   da60e:	9000      	str	r0, [sp, #0]
   da610:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da614:	b289      	uxth	r1, r1
   da616:	4857      	ldr	r0, [pc, #348]	; (da774 <_Z9conditionii+0x131c>)
   da618:	f004 fa72 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   da61c:	7838      	ldrb	r0, [r7, #0]
   da61e:	f899 3000 	ldrb.w	r3, [r9]
   da622:	f898 2000 	ldrb.w	r2, [r8]
   da626:	9000      	str	r0, [sp, #0]
   da628:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   da62c:	b289      	uxth	r1, r1
   da62e:	4851      	ldr	r0, [pc, #324]	; (da774 <_Z9conditionii+0x131c>)
   da630:	f004 fa66 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   da634:	7838      	ldrb	r0, [r7, #0]
   da636:	f899 3000 	ldrb.w	r3, [r9]
   da63a:	f898 2000 	ldrb.w	r2, [r8]
   da63e:	9000      	str	r0, [sp, #0]
   da640:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   da644:	b289      	uxth	r1, r1
   da646:	484b      	ldr	r0, [pc, #300]	; (da774 <_Z9conditionii+0x131c>)
   da648:	f004 fa5a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   da64c:	7838      	ldrb	r0, [r7, #0]
   da64e:	f899 3000 	ldrb.w	r3, [r9]
   da652:	f898 2000 	ldrb.w	r2, [r8]
   da656:	9000      	str	r0, [sp, #0]
   da658:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   da65c:	b289      	uxth	r1, r1
   da65e:	4845      	ldr	r0, [pc, #276]	; (da774 <_Z9conditionii+0x131c>)
   da660:	f004 fa4e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   da664:	7838      	ldrb	r0, [r7, #0]
   da666:	f899 3000 	ldrb.w	r3, [r9]
   da66a:	f898 2000 	ldrb.w	r2, [r8]
   da66e:	9000      	str	r0, [sp, #0]
   da670:	f105 0131 	add.w	r1, r5, #49	; 0x31
   da674:	b289      	uxth	r1, r1
   da676:	483f      	ldr	r0, [pc, #252]	; (da774 <_Z9conditionii+0x131c>)
   da678:	f004 fa42 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 802 || cnum == 803)
   da67c:	9b03      	ldr	r3, [sp, #12]
   da67e:	2b01      	cmp	r3, #1
   da680:	f200 813c 	bhi.w	da8fc <_Z9conditionii+0x14a4>
        {
            strip.setPixelColor(inpix+17,rclock,gclock*1.2,bclock/3);
   da684:	f8df 90f8 	ldr.w	r9, [pc, #248]	; da780 <_Z9conditionii+0x1328>
   da688:	4f3c      	ldr	r7, [pc, #240]	; (da77c <_Z9conditionii+0x1324>)
   da68a:	f8d9 0000 	ldr.w	r0, [r9]
   da68e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; da784 <_Z9conditionii+0x132c>
   da692:	f007 f921 	bl	e18d8 <__aeabi_i2d>
   da696:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da69a:	4b37      	ldr	r3, [pc, #220]	; (da778 <_Z9conditionii+0x1320>)
   da69c:	f007 f982 	bl	e19a4 <__aeabi_dmul>
   da6a0:	f007 fc42 	bl	e1f28 <__aeabi_d2uiz>
   da6a4:	b2a5      	uxth	r5, r4
   da6a6:	f04f 0a03 	mov.w	sl, #3
   da6aa:	683b      	ldr	r3, [r7, #0]
   da6ac:	fb93 f3fa 	sdiv	r3, r3, sl
   da6b0:	f105 0111 	add.w	r1, r5, #17
   da6b4:	b2db      	uxtb	r3, r3
   da6b6:	f898 2000 	ldrb.w	r2, [r8]
   da6ba:	9300      	str	r3, [sp, #0]
   da6bc:	b289      	uxth	r1, r1
   da6be:	b2c3      	uxtb	r3, r0
   da6c0:	482c      	ldr	r0, [pc, #176]	; (da774 <_Z9conditionii+0x131c>)
   da6c2:	f004 fa1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+21,rclock,gclock*1.2,bclock/3);
   da6c6:	f8d9 0000 	ldr.w	r0, [r9]
   da6ca:	f007 f905 	bl	e18d8 <__aeabi_i2d>
   da6ce:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da6d2:	4b29      	ldr	r3, [pc, #164]	; (da778 <_Z9conditionii+0x1320>)
   da6d4:	f007 f966 	bl	e19a4 <__aeabi_dmul>
   da6d8:	f007 fc26 	bl	e1f28 <__aeabi_d2uiz>
   da6dc:	683b      	ldr	r3, [r7, #0]
   da6de:	fb93 f3fa 	sdiv	r3, r3, sl
   da6e2:	f105 0115 	add.w	r1, r5, #21
   da6e6:	b2db      	uxtb	r3, r3
   da6e8:	f898 2000 	ldrb.w	r2, [r8]
   da6ec:	9300      	str	r3, [sp, #0]
   da6ee:	b289      	uxth	r1, r1
   da6f0:	b2c3      	uxtb	r3, r0
   da6f2:	4820      	ldr	r0, [pc, #128]	; (da774 <_Z9conditionii+0x131c>)
   da6f4:	f004 fa04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock*1.2,bclock/3);
   da6f8:	f8d9 0000 	ldr.w	r0, [r9]
   da6fc:	f007 f8ec 	bl	e18d8 <__aeabi_i2d>
   da700:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da704:	4b1c      	ldr	r3, [pc, #112]	; (da778 <_Z9conditionii+0x1320>)
   da706:	f007 f94d 	bl	e19a4 <__aeabi_dmul>
   da70a:	f007 fc0d 	bl	e1f28 <__aeabi_d2uiz>
   da70e:	683b      	ldr	r3, [r7, #0]
   da710:	fb93 f3fa 	sdiv	r3, r3, sl
   da714:	f105 011e 	add.w	r1, r5, #30
   da718:	b2db      	uxtb	r3, r3
   da71a:	f898 2000 	ldrb.w	r2, [r8]
   da71e:	9300      	str	r3, [sp, #0]
   da720:	b289      	uxth	r1, r1
   da722:	b2c3      	uxtb	r3, r0
   da724:	4813      	ldr	r0, [pc, #76]	; (da774 <_Z9conditionii+0x131c>)
   da726:	f004 f9eb 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock*1.2,bclock/3);
   da72a:	f8d9 0000 	ldr.w	r0, [r9]
   da72e:	f007 f8d3 	bl	e18d8 <__aeabi_i2d>
   da732:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da736:	4b10      	ldr	r3, [pc, #64]	; (da778 <_Z9conditionii+0x1320>)
   da738:	f007 f934 	bl	e19a4 <__aeabi_dmul>
   da73c:	f007 fbf4 	bl	e1f28 <__aeabi_d2uiz>
   da740:	683b      	ldr	r3, [r7, #0]
   da742:	fb93 f3fa 	sdiv	r3, r3, sl
   da746:	f105 011d 	add.w	r1, r5, #29
   da74a:	b2db      	uxtb	r3, r3
   da74c:	f898 2000 	ldrb.w	r2, [r8]
   da750:	9300      	str	r3, [sp, #0]
   da752:	b289      	uxth	r1, r1
   da754:	b2c3      	uxtb	r3, r0
   da756:	4807      	ldr	r0, [pc, #28]	; (da774 <_Z9conditionii+0x131c>)
   da758:	f004 f9d2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.2,bclock/3);
   da75c:	f8d9 0000 	ldr.w	r0, [r9]
   da760:	f007 f8ba 	bl	e18d8 <__aeabi_i2d>
   da764:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da768:	4b03      	ldr	r3, [pc, #12]	; (da778 <_Z9conditionii+0x1320>)
   da76a:	f007 f91b 	bl	e19a4 <__aeabi_dmul>
   da76e:	f007 fbdb 	bl	e1f28 <__aeabi_d2uiz>
   da772:	e009      	b.n	da788 <_Z9conditionii+0x1330>
   da774:	2003e31c 	.word	0x2003e31c
   da778:	3ff33333 	.word	0x3ff33333
   da77c:	2003e35c 	.word	0x2003e35c
   da780:	2003e314 	.word	0x2003e314
   da784:	2003e354 	.word	0x2003e354
   da788:	683b      	ldr	r3, [r7, #0]
   da78a:	fb93 f3fa 	sdiv	r3, r3, sl
   da78e:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da792:	b2db      	uxtb	r3, r3
   da794:	f898 2000 	ldrb.w	r2, [r8]
   da798:	9300      	str	r3, [sp, #0]
   da79a:	b289      	uxth	r1, r1
   da79c:	b2c3      	uxtb	r3, r0
   da79e:	4856      	ldr	r0, [pc, #344]	; (da8f8 <_Z9conditionii+0x14a0>)
   da7a0:	f004 f9ae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   da7a4:	7838      	ldrb	r0, [r7, #0]
   da7a6:	f899 3000 	ldrb.w	r3, [r9]
   da7aa:	f898 2000 	ldrb.w	r2, [r8]
   da7ae:	9000      	str	r0, [sp, #0]
   da7b0:	f105 0114 	add.w	r1, r5, #20
   da7b4:	b289      	uxth	r1, r1
   da7b6:	4850      	ldr	r0, [pc, #320]	; (da8f8 <_Z9conditionii+0x14a0>)
   da7b8:	f004 f9a2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   da7bc:	7838      	ldrb	r0, [r7, #0]
   da7be:	f899 3000 	ldrb.w	r3, [r9]
   da7c2:	f898 2000 	ldrb.w	r2, [r8]
   da7c6:	9000      	str	r0, [sp, #0]
   da7c8:	f105 011a 	add.w	r1, r5, #26
   da7cc:	b289      	uxth	r1, r1
   da7ce:	484a      	ldr	r0, [pc, #296]	; (da8f8 <_Z9conditionii+0x14a0>)
   da7d0:	f004 f996 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   da7d4:	7838      	ldrb	r0, [r7, #0]
   da7d6:	f899 3000 	ldrb.w	r3, [r9]
   da7da:	f898 2000 	ldrb.w	r2, [r8]
   da7de:	9000      	str	r0, [sp, #0]
   da7e0:	f105 011b 	add.w	r1, r5, #27
   da7e4:	b289      	uxth	r1, r1
   da7e6:	4844      	ldr	r0, [pc, #272]	; (da8f8 <_Z9conditionii+0x14a0>)
   da7e8:	f004 f98a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   da7ec:	7838      	ldrb	r0, [r7, #0]
   da7ee:	f899 3000 	ldrb.w	r3, [r9]
   da7f2:	f898 2000 	ldrb.w	r2, [r8]
   da7f6:	9000      	str	r0, [sp, #0]
   da7f8:	f105 011c 	add.w	r1, r5, #28
   da7fc:	b289      	uxth	r1, r1
   da7fe:	483e      	ldr	r0, [pc, #248]	; (da8f8 <_Z9conditionii+0x14a0>)
   da800:	f004 f97e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock,bclock);
   da804:	7838      	ldrb	r0, [r7, #0]
   da806:	f899 3000 	ldrb.w	r3, [r9]
   da80a:	f898 2000 	ldrb.w	r2, [r8]
   da80e:	9000      	str	r0, [sp, #0]
   da810:	f105 0123 	add.w	r1, r5, #35	; 0x23
   da814:	b289      	uxth	r1, r1
   da816:	4838      	ldr	r0, [pc, #224]	; (da8f8 <_Z9conditionii+0x14a0>)
   da818:	f004 f972 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   da81c:	7838      	ldrb	r0, [r7, #0]
   da81e:	f899 3000 	ldrb.w	r3, [r9]
   da822:	f898 2000 	ldrb.w	r2, [r8]
   da826:	9000      	str	r0, [sp, #0]
   da828:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da82c:	b289      	uxth	r1, r1
   da82e:	4832      	ldr	r0, [pc, #200]	; (da8f8 <_Z9conditionii+0x14a0>)
   da830:	f004 f966 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   da834:	7838      	ldrb	r0, [r7, #0]
   da836:	f899 3000 	ldrb.w	r3, [r9]
   da83a:	f898 2000 	ldrb.w	r2, [r8]
   da83e:	9000      	str	r0, [sp, #0]
   da840:	f105 0125 	add.w	r1, r5, #37	; 0x25
   da844:	b289      	uxth	r1, r1
   da846:	482c      	ldr	r0, [pc, #176]	; (da8f8 <_Z9conditionii+0x14a0>)
   da848:	f004 f95a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);
   da84c:	7838      	ldrb	r0, [r7, #0]
   da84e:	f899 3000 	ldrb.w	r3, [r9]
   da852:	f898 2000 	ldrb.w	r2, [r8]
   da856:	9000      	str	r0, [sp, #0]
   da858:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da85c:	b289      	uxth	r1, r1
   da85e:	4826      	ldr	r0, [pc, #152]	; (da8f8 <_Z9conditionii+0x14a0>)
   da860:	f004 f94e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   da864:	7838      	ldrb	r0, [r7, #0]
   da866:	f899 3000 	ldrb.w	r3, [r9]
   da86a:	f898 2000 	ldrb.w	r2, [r8]
   da86e:	9000      	str	r0, [sp, #0]
   da870:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da874:	b289      	uxth	r1, r1
   da876:	4820      	ldr	r0, [pc, #128]	; (da8f8 <_Z9conditionii+0x14a0>)
   da878:	f004 f942 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   da87c:	7838      	ldrb	r0, [r7, #0]
   da87e:	f899 3000 	ldrb.w	r3, [r9]
   da882:	f898 2000 	ldrb.w	r2, [r8]
   da886:	9000      	str	r0, [sp, #0]
   da888:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   da88c:	b289      	uxth	r1, r1
   da88e:	481a      	ldr	r0, [pc, #104]	; (da8f8 <_Z9conditionii+0x14a0>)
   da890:	f004 f936 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
   da894:	7838      	ldrb	r0, [r7, #0]
   da896:	f899 3000 	ldrb.w	r3, [r9]
   da89a:	f898 2000 	ldrb.w	r2, [r8]
   da89e:	9000      	str	r0, [sp, #0]
   da8a0:	f105 0134 	add.w	r1, r5, #52	; 0x34
   da8a4:	b289      	uxth	r1, r1
   da8a6:	4814      	ldr	r0, [pc, #80]	; (da8f8 <_Z9conditionii+0x14a0>)
   da8a8:	f004 f92a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
   da8ac:	7838      	ldrb	r0, [r7, #0]
   da8ae:	f899 3000 	ldrb.w	r3, [r9]
   da8b2:	f898 2000 	ldrb.w	r2, [r8]
   da8b6:	9000      	str	r0, [sp, #0]
   da8b8:	f105 0133 	add.w	r1, r5, #51	; 0x33
   da8bc:	b289      	uxth	r1, r1
   da8be:	480e      	ldr	r0, [pc, #56]	; (da8f8 <_Z9conditionii+0x14a0>)
   da8c0:	f004 f91e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
   da8c4:	7838      	ldrb	r0, [r7, #0]
   da8c6:	f899 3000 	ldrb.w	r3, [r9]
   da8ca:	f898 2000 	ldrb.w	r2, [r8]
   da8ce:	9000      	str	r0, [sp, #0]
   da8d0:	f105 0135 	add.w	r1, r5, #53	; 0x35
   da8d4:	b289      	uxth	r1, r1
   da8d6:	4808      	ldr	r0, [pc, #32]	; (da8f8 <_Z9conditionii+0x14a0>)
   da8d8:	f004 f912 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
   da8dc:	7838      	ldrb	r0, [r7, #0]
   da8de:	f899 3000 	ldrb.w	r3, [r9]
   da8e2:	f898 2000 	ldrb.w	r2, [r8]
   da8e6:	9000      	str	r0, [sp, #0]
   da8e8:	f105 013b 	add.w	r1, r5, #59	; 0x3b
   da8ec:	b289      	uxth	r1, r1
   da8ee:	4802      	ldr	r0, [pc, #8]	; (da8f8 <_Z9conditionii+0x14a0>)
   da8f0:	f004 f906 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   da8f4:	e0e0      	b.n	daab8 <_Z9conditionii+0x1660>
   da8f6:	bf00      	nop
   da8f8:	2003e31c 	.word	0x2003e31c
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   da8fc:	f5b6 7f49 	cmp.w	r6, #804	; 0x324
   da900:	f040 80da 	bne.w	daab8 <_Z9conditionii+0x1660>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   da904:	4f68      	ldr	r7, [pc, #416]	; (daaa8 <_Z9conditionii+0x1650>)
   da906:	f8df 91a8 	ldr.w	r9, [pc, #424]	; daab0 <_Z9conditionii+0x1658>
   da90a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; daab4 <_Z9conditionii+0x165c>
   da90e:	7838      	ldrb	r0, [r7, #0]
   da910:	f899 3000 	ldrb.w	r3, [r9]
   da914:	f898 2000 	ldrb.w	r2, [r8]
   da918:	9000      	str	r0, [sp, #0]
   da91a:	b2a5      	uxth	r5, r4
   da91c:	1c69      	adds	r1, r5, #1
   da91e:	b289      	uxth	r1, r1
   da920:	4862      	ldr	r0, [pc, #392]	; (daaac <_Z9conditionii+0x1654>)
   da922:	f004 f8ed 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   da926:	7838      	ldrb	r0, [r7, #0]
   da928:	f899 3000 	ldrb.w	r3, [r9]
   da92c:	f898 2000 	ldrb.w	r2, [r8]
   da930:	9000      	str	r0, [sp, #0]
   da932:	f105 011f 	add.w	r1, r5, #31
   da936:	b289      	uxth	r1, r1
   da938:	485c      	ldr	r0, [pc, #368]	; (daaac <_Z9conditionii+0x1654>)
   da93a:	f004 f8e1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   da93e:	7838      	ldrb	r0, [r7, #0]
   da940:	f899 3000 	ldrb.w	r3, [r9]
   da944:	f898 2000 	ldrb.w	r2, [r8]
   da948:	9000      	str	r0, [sp, #0]
   da94a:	f105 010f 	add.w	r1, r5, #15
   da94e:	b289      	uxth	r1, r1
   da950:	4856      	ldr	r0, [pc, #344]	; (daaac <_Z9conditionii+0x1654>)
   da952:	f004 f8d5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   da956:	7838      	ldrb	r0, [r7, #0]
   da958:	f899 3000 	ldrb.w	r3, [r9]
   da95c:	f898 2000 	ldrb.w	r2, [r8]
   da960:	9000      	str	r0, [sp, #0]
   da962:	f105 010e 	add.w	r1, r5, #14
   da966:	b289      	uxth	r1, r1
   da968:	4850      	ldr	r0, [pc, #320]	; (daaac <_Z9conditionii+0x1654>)
   da96a:	f004 f8c9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   da96e:	7838      	ldrb	r0, [r7, #0]
   da970:	f899 3000 	ldrb.w	r3, [r9]
   da974:	f898 2000 	ldrb.w	r2, [r8]
   da978:	9000      	str	r0, [sp, #0]
   da97a:	f105 010d 	add.w	r1, r5, #13
   da97e:	b289      	uxth	r1, r1
   da980:	484a      	ldr	r0, [pc, #296]	; (daaac <_Z9conditionii+0x1654>)
   da982:	f004 f8bd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   da986:	7838      	ldrb	r0, [r7, #0]
   da988:	f899 3000 	ldrb.w	r3, [r9]
   da98c:	f898 2000 	ldrb.w	r2, [r8]
   da990:	9000      	str	r0, [sp, #0]
   da992:	f105 0110 	add.w	r1, r5, #16
   da996:	b289      	uxth	r1, r1
   da998:	4844      	ldr	r0, [pc, #272]	; (daaac <_Z9conditionii+0x1654>)
   da99a:	f004 f8b1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   da99e:	7838      	ldrb	r0, [r7, #0]
   da9a0:	f899 3000 	ldrb.w	r3, [r9]
   da9a4:	f898 2000 	ldrb.w	r2, [r8]
   da9a8:	9000      	str	r0, [sp, #0]
   da9aa:	f105 0111 	add.w	r1, r5, #17
   da9ae:	b289      	uxth	r1, r1
   da9b0:	483e      	ldr	r0, [pc, #248]	; (daaac <_Z9conditionii+0x1654>)
   da9b2:	f004 f8a5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   da9b6:	7838      	ldrb	r0, [r7, #0]
   da9b8:	f899 3000 	ldrb.w	r3, [r9]
   da9bc:	f898 2000 	ldrb.w	r2, [r8]
   da9c0:	9000      	str	r0, [sp, #0]
   da9c2:	f105 0112 	add.w	r1, r5, #18
   da9c6:	b289      	uxth	r1, r1
   da9c8:	4838      	ldr	r0, [pc, #224]	; (daaac <_Z9conditionii+0x1654>)
   da9ca:	f004 f899 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   da9ce:	7838      	ldrb	r0, [r7, #0]
   da9d0:	f899 3000 	ldrb.w	r3, [r9]
   da9d4:	f898 2000 	ldrb.w	r2, [r8]
   da9d8:	9000      	str	r0, [sp, #0]
   da9da:	f105 011e 	add.w	r1, r5, #30
   da9de:	b289      	uxth	r1, r1
   da9e0:	4832      	ldr	r0, [pc, #200]	; (daaac <_Z9conditionii+0x1654>)
   da9e2:	f004 f88d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   da9e6:	7838      	ldrb	r0, [r7, #0]
   da9e8:	f899 3000 	ldrb.w	r3, [r9]
   da9ec:	f898 2000 	ldrb.w	r2, [r8]
   da9f0:	9000      	str	r0, [sp, #0]
   da9f2:	f105 011d 	add.w	r1, r5, #29
   da9f6:	b289      	uxth	r1, r1
   da9f8:	482c      	ldr	r0, [pc, #176]	; (daaac <_Z9conditionii+0x1654>)
   da9fa:	f004 f881 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   da9fe:	7838      	ldrb	r0, [r7, #0]
   daa00:	f899 3000 	ldrb.w	r3, [r9]
   daa04:	f898 2000 	ldrb.w	r2, [r8]
   daa08:	9000      	str	r0, [sp, #0]
   daa0a:	f105 0120 	add.w	r1, r5, #32
   daa0e:	b289      	uxth	r1, r1
   daa10:	4826      	ldr	r0, [pc, #152]	; (daaac <_Z9conditionii+0x1654>)
   daa12:	f004 f875 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   daa16:	7838      	ldrb	r0, [r7, #0]
   daa18:	f899 3000 	ldrb.w	r3, [r9]
   daa1c:	f898 2000 	ldrb.w	r2, [r8]
   daa20:	9000      	str	r0, [sp, #0]
   daa22:	f105 0121 	add.w	r1, r5, #33	; 0x21
   daa26:	b289      	uxth	r1, r1
   daa28:	4820      	ldr	r0, [pc, #128]	; (daaac <_Z9conditionii+0x1654>)
   daa2a:	f004 f869 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   daa2e:	7838      	ldrb	r0, [r7, #0]
   daa30:	f899 3000 	ldrb.w	r3, [r9]
   daa34:	f898 2000 	ldrb.w	r2, [r8]
   daa38:	9000      	str	r0, [sp, #0]
   daa3a:	f105 0122 	add.w	r1, r5, #34	; 0x22
   daa3e:	b289      	uxth	r1, r1
   daa40:	481a      	ldr	r0, [pc, #104]	; (daaac <_Z9conditionii+0x1654>)
   daa42:	f004 f85d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   daa46:	7838      	ldrb	r0, [r7, #0]
   daa48:	f899 3000 	ldrb.w	r3, [r9]
   daa4c:	f898 2000 	ldrb.w	r2, [r8]
   daa50:	9000      	str	r0, [sp, #0]
   daa52:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   daa56:	b289      	uxth	r1, r1
   daa58:	4814      	ldr	r0, [pc, #80]	; (daaac <_Z9conditionii+0x1654>)
   daa5a:	f004 f851 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   daa5e:	7838      	ldrb	r0, [r7, #0]
   daa60:	f899 3000 	ldrb.w	r3, [r9]
   daa64:	f898 2000 	ldrb.w	r2, [r8]
   daa68:	9000      	str	r0, [sp, #0]
   daa6a:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   daa6e:	b289      	uxth	r1, r1
   daa70:	480e      	ldr	r0, [pc, #56]	; (daaac <_Z9conditionii+0x1654>)
   daa72:	f004 f845 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   daa76:	7838      	ldrb	r0, [r7, #0]
   daa78:	f899 3000 	ldrb.w	r3, [r9]
   daa7c:	f898 2000 	ldrb.w	r2, [r8]
   daa80:	9000      	str	r0, [sp, #0]
   daa82:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   daa86:	b289      	uxth	r1, r1
   daa88:	4808      	ldr	r0, [pc, #32]	; (daaac <_Z9conditionii+0x1654>)
   daa8a:	f004 f839 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   daa8e:	7838      	ldrb	r0, [r7, #0]
   daa90:	f899 3000 	ldrb.w	r3, [r9]
   daa94:	f898 2000 	ldrb.w	r2, [r8]
   daa98:	9000      	str	r0, [sp, #0]
   daa9a:	f105 0131 	add.w	r1, r5, #49	; 0x31
   daa9e:	b289      	uxth	r1, r1
   daaa0:	4802      	ldr	r0, [pc, #8]	; (daaac <_Z9conditionii+0x1654>)
   daaa2:	f004 f82d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   daaa6:	e011      	b.n	daacc <_Z9conditionii+0x1674>
   daaa8:	2003e35c 	.word	0x2003e35c
   daaac:	2003e31c 	.word	0x2003e31c
   daab0:	2003e314 	.word	0x2003e314
   daab4:	2003e354 	.word	0x2003e354
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   daab8:	f1a6 03c8 	sub.w	r3, r6, #200	; 0xc8
   daabc:	2b20      	cmp	r3, #32
   daabe:	f67f af21 	bls.w	da904 <_Z9conditionii+0x14ac>
   daac2:	f5a6 7396 	sub.w	r3, r6, #300	; 0x12c
   daac6:	2be7      	cmp	r3, #231	; 0xe7
   daac8:	f67f af1c 	bls.w	da904 <_Z9conditionii+0x14ac>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
        }
        if(cnum == 701 || cnum == 741)
   daacc:	f240 23bd 	movw	r3, #701	; 0x2bd
   daad0:	429e      	cmp	r6, r3
   daad2:	d004      	beq.n	daade <_Z9conditionii+0x1686>
   daad4:	f240 23e5 	movw	r3, #741	; 0x2e5
   daad8:	429e      	cmp	r6, r3
   daada:	f040 8169 	bne.w	dadb0 <_Z9conditionii+0x1958>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   daade:	4fc0      	ldr	r7, [pc, #768]	; (dade0 <_Z9conditionii+0x1988>)
   daae0:	f8df 9308 	ldr.w	r9, [pc, #776]	; dadec <_Z9conditionii+0x1994>
   daae4:	f8df 8308 	ldr.w	r8, [pc, #776]	; dadf0 <_Z9conditionii+0x1998>
   daae8:	7838      	ldrb	r0, [r7, #0]
   daaea:	f899 3000 	ldrb.w	r3, [r9]
   daaee:	f898 2000 	ldrb.w	r2, [r8]
   daaf2:	9000      	str	r0, [sp, #0]
   daaf4:	b2a5      	uxth	r5, r4
   daaf6:	1c69      	adds	r1, r5, #1
   daaf8:	b289      	uxth	r1, r1
   daafa:	48ba      	ldr	r0, [pc, #744]	; (dade4 <_Z9conditionii+0x198c>)
   daafc:	f004 f800 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   dab00:	7838      	ldrb	r0, [r7, #0]
   dab02:	f899 3000 	ldrb.w	r3, [r9]
   dab06:	f898 2000 	ldrb.w	r2, [r8]
   dab0a:	9000      	str	r0, [sp, #0]
   dab0c:	f105 011f 	add.w	r1, r5, #31
   dab10:	b289      	uxth	r1, r1
   dab12:	48b4      	ldr	r0, [pc, #720]	; (dade4 <_Z9conditionii+0x198c>)
   dab14:	f003 fff4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   dab18:	7838      	ldrb	r0, [r7, #0]
   dab1a:	f899 3000 	ldrb.w	r3, [r9]
   dab1e:	f898 2000 	ldrb.w	r2, [r8]
   dab22:	9000      	str	r0, [sp, #0]
   dab24:	f105 010f 	add.w	r1, r5, #15
   dab28:	b289      	uxth	r1, r1
   dab2a:	48ae      	ldr	r0, [pc, #696]	; (dade4 <_Z9conditionii+0x198c>)
   dab2c:	f003 ffe8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   dab30:	7838      	ldrb	r0, [r7, #0]
   dab32:	f899 3000 	ldrb.w	r3, [r9]
   dab36:	f898 2000 	ldrb.w	r2, [r8]
   dab3a:	9000      	str	r0, [sp, #0]
   dab3c:	f105 010e 	add.w	r1, r5, #14
   dab40:	b289      	uxth	r1, r1
   dab42:	48a8      	ldr	r0, [pc, #672]	; (dade4 <_Z9conditionii+0x198c>)
   dab44:	f003 ffdc 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   dab48:	7838      	ldrb	r0, [r7, #0]
   dab4a:	f899 3000 	ldrb.w	r3, [r9]
   dab4e:	f898 2000 	ldrb.w	r2, [r8]
   dab52:	9000      	str	r0, [sp, #0]
   dab54:	f105 010d 	add.w	r1, r5, #13
   dab58:	b289      	uxth	r1, r1
   dab5a:	48a2      	ldr	r0, [pc, #648]	; (dade4 <_Z9conditionii+0x198c>)
   dab5c:	f003 ffd0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   dab60:	7838      	ldrb	r0, [r7, #0]
   dab62:	f899 3000 	ldrb.w	r3, [r9]
   dab66:	f898 2000 	ldrb.w	r2, [r8]
   dab6a:	9000      	str	r0, [sp, #0]
   dab6c:	f105 0110 	add.w	r1, r5, #16
   dab70:	b289      	uxth	r1, r1
   dab72:	489c      	ldr	r0, [pc, #624]	; (dade4 <_Z9conditionii+0x198c>)
   dab74:	f003 ffc4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   dab78:	7838      	ldrb	r0, [r7, #0]
   dab7a:	f899 3000 	ldrb.w	r3, [r9]
   dab7e:	f898 2000 	ldrb.w	r2, [r8]
   dab82:	9000      	str	r0, [sp, #0]
   dab84:	f105 0111 	add.w	r1, r5, #17
   dab88:	b289      	uxth	r1, r1
   dab8a:	4896      	ldr	r0, [pc, #600]	; (dade4 <_Z9conditionii+0x198c>)
   dab8c:	f003 ffb8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   dab90:	7838      	ldrb	r0, [r7, #0]
   dab92:	f899 3000 	ldrb.w	r3, [r9]
   dab96:	f898 2000 	ldrb.w	r2, [r8]
   dab9a:	9000      	str	r0, [sp, #0]
   dab9c:	f105 0112 	add.w	r1, r5, #18
   daba0:	b289      	uxth	r1, r1
   daba2:	4890      	ldr	r0, [pc, #576]	; (dade4 <_Z9conditionii+0x198c>)
   daba4:	f003 ffac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   daba8:	7838      	ldrb	r0, [r7, #0]
   dabaa:	f899 3000 	ldrb.w	r3, [r9]
   dabae:	f898 2000 	ldrb.w	r2, [r8]
   dabb2:	9000      	str	r0, [sp, #0]
   dabb4:	f105 011e 	add.w	r1, r5, #30
   dabb8:	b289      	uxth	r1, r1
   dabba:	488a      	ldr	r0, [pc, #552]	; (dade4 <_Z9conditionii+0x198c>)
   dabbc:	f003 ffa0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   dabc0:	7838      	ldrb	r0, [r7, #0]
   dabc2:	f899 3000 	ldrb.w	r3, [r9]
   dabc6:	f898 2000 	ldrb.w	r2, [r8]
   dabca:	9000      	str	r0, [sp, #0]
   dabcc:	f105 011d 	add.w	r1, r5, #29
   dabd0:	b289      	uxth	r1, r1
   dabd2:	4884      	ldr	r0, [pc, #528]	; (dade4 <_Z9conditionii+0x198c>)
   dabd4:	f003 ff94 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   dabd8:	7838      	ldrb	r0, [r7, #0]
   dabda:	f899 3000 	ldrb.w	r3, [r9]
   dabde:	f898 2000 	ldrb.w	r2, [r8]
   dabe2:	9000      	str	r0, [sp, #0]
   dabe4:	f105 0120 	add.w	r1, r5, #32
   dabe8:	b289      	uxth	r1, r1
   dabea:	487e      	ldr	r0, [pc, #504]	; (dade4 <_Z9conditionii+0x198c>)
   dabec:	f003 ff88 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   dabf0:	7838      	ldrb	r0, [r7, #0]
   dabf2:	f899 3000 	ldrb.w	r3, [r9]
   dabf6:	f898 2000 	ldrb.w	r2, [r8]
   dabfa:	9000      	str	r0, [sp, #0]
   dabfc:	f105 0121 	add.w	r1, r5, #33	; 0x21
   dac00:	b289      	uxth	r1, r1
   dac02:	4878      	ldr	r0, [pc, #480]	; (dade4 <_Z9conditionii+0x198c>)
   dac04:	f003 ff7c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   dac08:	7838      	ldrb	r0, [r7, #0]
   dac0a:	f899 3000 	ldrb.w	r3, [r9]
   dac0e:	f898 2000 	ldrb.w	r2, [r8]
   dac12:	9000      	str	r0, [sp, #0]
   dac14:	f105 0122 	add.w	r1, r5, #34	; 0x22
   dac18:	b289      	uxth	r1, r1
   dac1a:	4872      	ldr	r0, [pc, #456]	; (dade4 <_Z9conditionii+0x198c>)
   dac1c:	f003 ff70 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   dac20:	7838      	ldrb	r0, [r7, #0]
   dac22:	f899 3000 	ldrb.w	r3, [r9]
   dac26:	f898 2000 	ldrb.w	r2, [r8]
   dac2a:	9000      	str	r0, [sp, #0]
   dac2c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   dac30:	b289      	uxth	r1, r1
   dac32:	486c      	ldr	r0, [pc, #432]	; (dade4 <_Z9conditionii+0x198c>)
   dac34:	f003 ff64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   dac38:	7838      	ldrb	r0, [r7, #0]
   dac3a:	f899 3000 	ldrb.w	r3, [r9]
   dac3e:	f898 2000 	ldrb.w	r2, [r8]
   dac42:	9000      	str	r0, [sp, #0]
   dac44:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   dac48:	b289      	uxth	r1, r1
   dac4a:	4866      	ldr	r0, [pc, #408]	; (dade4 <_Z9conditionii+0x198c>)
   dac4c:	f003 ff58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   dac50:	7838      	ldrb	r0, [r7, #0]
   dac52:	f899 3000 	ldrb.w	r3, [r9]
   dac56:	f898 2000 	ldrb.w	r2, [r8]
   dac5a:	9000      	str	r0, [sp, #0]
   dac5c:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   dac60:	b289      	uxth	r1, r1
   dac62:	4860      	ldr	r0, [pc, #384]	; (dade4 <_Z9conditionii+0x198c>)
   dac64:	f003 ff4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   dac68:	7838      	ldrb	r0, [r7, #0]
   dac6a:	f899 3000 	ldrb.w	r3, [r9]
   dac6e:	f898 2000 	ldrb.w	r2, [r8]
   dac72:	9000      	str	r0, [sp, #0]
   dac74:	f105 0131 	add.w	r1, r5, #49	; 0x31
   dac78:	b289      	uxth	r1, r1
   dac7a:	485a      	ldr	r0, [pc, #360]	; (dade4 <_Z9conditionii+0x198c>)
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   dac7c:	f04f 0a02 	mov.w	sl, #2
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   dac80:	f003 ff3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   dac84:	6838      	ldr	r0, [r7, #0]
   dac86:	fb90 f0fa 	sdiv	r0, r0, sl
   dac8a:	f105 010b 	add.w	r1, r5, #11
   dac8e:	b2c0      	uxtb	r0, r0
   dac90:	f8d9 3000 	ldr.w	r3, [r9]
   dac94:	f8d8 2000 	ldr.w	r2, [r8]
   dac98:	fb93 f3fa 	sdiv	r3, r3, sl
   dac9c:	fb92 f2fa 	sdiv	r2, r2, sl
   daca0:	9000      	str	r0, [sp, #0]
   daca2:	b2db      	uxtb	r3, r3
   daca4:	b2d2      	uxtb	r2, r2
   daca6:	b289      	uxth	r1, r1
   daca8:	484e      	ldr	r0, [pc, #312]	; (dade4 <_Z9conditionii+0x198c>)
   dacaa:	f003 ff29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/2,gclock/2,bclock/2);
   dacae:	6838      	ldr	r0, [r7, #0]
   dacb0:	fb90 f0fa 	sdiv	r0, r0, sl
   dacb4:	f105 0114 	add.w	r1, r5, #20
   dacb8:	b2c0      	uxtb	r0, r0
   dacba:	f8d9 3000 	ldr.w	r3, [r9]
   dacbe:	f8d8 2000 	ldr.w	r2, [r8]
   dacc2:	fb93 f3fa 	sdiv	r3, r3, sl
   dacc6:	fb92 f2fa 	sdiv	r2, r2, sl
   dacca:	9000      	str	r0, [sp, #0]
   daccc:	b2db      	uxtb	r3, r3
   dacce:	b2d2      	uxtb	r2, r2
   dacd0:	b289      	uxth	r1, r1
   dacd2:	4844      	ldr	r0, [pc, #272]	; (dade4 <_Z9conditionii+0x198c>)
   dacd4:	f003 ff14 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/2,gclock/2,bclock/2);
   dacd8:	6838      	ldr	r0, [r7, #0]
   dacda:	fb90 f0fa 	sdiv	r0, r0, sl
   dacde:	f105 011b 	add.w	r1, r5, #27
   dace2:	b2c0      	uxtb	r0, r0
   dace4:	f8d9 3000 	ldr.w	r3, [r9]
   dace8:	f8d8 2000 	ldr.w	r2, [r8]
   dacec:	fb93 f3fa 	sdiv	r3, r3, sl
   dacf0:	fb92 f2fa 	sdiv	r2, r2, sl
   dacf4:	9000      	str	r0, [sp, #0]
   dacf6:	b2db      	uxtb	r3, r3
   dacf8:	b2d2      	uxtb	r2, r2
   dacfa:	b289      	uxth	r1, r1
   dacfc:	4839      	ldr	r0, [pc, #228]	; (dade4 <_Z9conditionii+0x198c>)
   dacfe:	f003 feff 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/2,gclock/2,bclock/2);
   dad02:	6838      	ldr	r0, [r7, #0]
   dad04:	fb90 f0fa 	sdiv	r0, r0, sl
   dad08:	f105 0124 	add.w	r1, r5, #36	; 0x24
   dad0c:	b2c0      	uxtb	r0, r0
   dad0e:	f8d9 3000 	ldr.w	r3, [r9]
   dad12:	f8d8 2000 	ldr.w	r2, [r8]
   dad16:	fb93 f3fa 	sdiv	r3, r3, sl
   dad1a:	fb92 f2fa 	sdiv	r2, r2, sl
   dad1e:	9000      	str	r0, [sp, #0]
   dad20:	b2db      	uxtb	r3, r3
   dad22:	b2d2      	uxtb	r2, r2
   dad24:	b289      	uxth	r1, r1
   dad26:	482f      	ldr	r0, [pc, #188]	; (dade4 <_Z9conditionii+0x198c>)
   dad28:	f003 feea 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock/2,gclock/2,bclock/2);
   dad2c:	6838      	ldr	r0, [r7, #0]
   dad2e:	fb90 f0fa 	sdiv	r0, r0, sl
   dad32:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   dad36:	b2c0      	uxtb	r0, r0
   dad38:	f8d9 3000 	ldr.w	r3, [r9]
   dad3c:	f8d8 2000 	ldr.w	r2, [r8]
   dad40:	fb93 f3fa 	sdiv	r3, r3, sl
   dad44:	fb92 f2fa 	sdiv	r2, r2, sl
   dad48:	9000      	str	r0, [sp, #0]
   dad4a:	b2db      	uxtb	r3, r3
   dad4c:	b2d2      	uxtb	r2, r2
   dad4e:	b289      	uxth	r1, r1
   dad50:	4824      	ldr	r0, [pc, #144]	; (dade4 <_Z9conditionii+0x198c>)
   dad52:	f003 fed5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
   dad56:	f8d9 3000 	ldr.w	r3, [r9]
   dad5a:	f04f 0a03 	mov.w	sl, #3
   dad5e:	6838      	ldr	r0, [r7, #0]
   dad60:	fb90 f0fa 	sdiv	r0, r0, sl
   dad64:	f105 0119 	add.w	r1, r5, #25
   dad68:	b2c0      	uxtb	r0, r0
   dad6a:	f8d8 2000 	ldr.w	r2, [r8]
   dad6e:	fb93 f3fa 	sdiv	r3, r3, sl
   dad72:	fb92 f2fa 	sdiv	r2, r2, sl
   dad76:	9000      	str	r0, [sp, #0]
   dad78:	b2db      	uxtb	r3, r3
   dad7a:	b2d2      	uxtb	r2, r2
   dad7c:	b289      	uxth	r1, r1
   dad7e:	4819      	ldr	r0, [pc, #100]	; (dade4 <_Z9conditionii+0x198c>)
   dad80:	f003 febe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock/3,gclock/3,bclock/3);
   dad84:	6838      	ldr	r0, [r7, #0]
   dad86:	f8d9 3000 	ldr.w	r3, [r9]
   dad8a:	f8d8 2000 	ldr.w	r2, [r8]
   dad8e:	fb93 f3fa 	sdiv	r3, r3, sl
   dad92:	fb92 f2fa 	sdiv	r2, r2, sl
   dad96:	f105 0126 	add.w	r1, r5, #38	; 0x26
   dad9a:	fb90 fafa 	sdiv	sl, r0, sl
   dad9e:	fa5f f08a 	uxtb.w	r0, sl
   dada2:	9000      	str	r0, [sp, #0]
   dada4:	b2db      	uxtb	r3, r3
   dada6:	b2d2      	uxtb	r2, r2
   dada8:	b289      	uxth	r1, r1
   dadaa:	480e      	ldr	r0, [pc, #56]	; (dade4 <_Z9conditionii+0x198c>)
   dadac:	f003 fea8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)
   dadb0:	f240 23c7 	movw	r3, #711	; 0x2c7
   dadb4:	429e      	cmp	r6, r3
   dadb6:	d009      	beq.n	dadcc <_Z9conditionii+0x1974>
            strip.setPixelColor(inpix+42,rclock/3,gclock/3,bclock/3);
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
            strip.setPixelColor(inpix+38,rclock/3,gclock/3,bclock/3);
            
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)         //Fog
   dadb8:	f2a6 22db 	subw	r2, r6, #731	; 0x2db
   dadbc:	2a1f      	cmp	r2, #31
   dadbe:	f200 80d7 	bhi.w	daf70 <_Z9conditionii+0x1b18>
   dadc2:	4b09      	ldr	r3, [pc, #36]	; (dade8 <_Z9conditionii+0x1990>)
   dadc4:	40d3      	lsrs	r3, r2
   dadc6:	07db      	lsls	r3, r3, #31
   dadc8:	f140 80d2 	bpl.w	daf70 <_Z9conditionii+0x1b18>
        {
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   dadcc:	4f04      	ldr	r7, [pc, #16]	; (dade0 <_Z9conditionii+0x1988>)
   dadce:	f8df 901c 	ldr.w	r9, [pc, #28]	; dadec <_Z9conditionii+0x1994>
   dadd2:	f8df 801c 	ldr.w	r8, [pc, #28]	; dadf0 <_Z9conditionii+0x1998>
   dadd6:	7838      	ldrb	r0, [r7, #0]
   dadd8:	f899 3000 	ldrb.w	r3, [r9]
   daddc:	e00a      	b.n	dadf4 <_Z9conditionii+0x199c>
   dadde:	bf00      	nop
   dade0:	2003e35c 	.word	0x2003e35c
   dade4:	2003e31c 	.word	0x2003e31c
   dade8:	c0100001 	.word	0xc0100001
   dadec:	2003e314 	.word	0x2003e314
   dadf0:	2003e354 	.word	0x2003e354
   dadf4:	f898 2000 	ldrb.w	r2, [r8]
   dadf8:	9000      	str	r0, [sp, #0]
   dadfa:	b2a5      	uxth	r5, r4
   dadfc:	f105 010f 	add.w	r1, r5, #15
   dae00:	b289      	uxth	r1, r1
   dae02:	487b      	ldr	r0, [pc, #492]	; (daff0 <_Z9conditionii+0x1b98>)
   dae04:	f003 fe7c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   dae08:	7838      	ldrb	r0, [r7, #0]
   dae0a:	f899 3000 	ldrb.w	r3, [r9]
   dae0e:	f898 2000 	ldrb.w	r2, [r8]
   dae12:	9000      	str	r0, [sp, #0]
   dae14:	f105 0110 	add.w	r1, r5, #16
   dae18:	b289      	uxth	r1, r1
   dae1a:	4875      	ldr	r0, [pc, #468]	; (daff0 <_Z9conditionii+0x1b98>)
   dae1c:	f003 fe70 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   dae20:	7838      	ldrb	r0, [r7, #0]
   dae22:	f899 3000 	ldrb.w	r3, [r9]
   dae26:	f898 2000 	ldrb.w	r2, [r8]
   dae2a:	9000      	str	r0, [sp, #0]
   dae2c:	f105 011f 	add.w	r1, r5, #31
   dae30:	b289      	uxth	r1, r1
   dae32:	486f      	ldr	r0, [pc, #444]	; (daff0 <_Z9conditionii+0x1b98>)
   dae34:	f003 fe64 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   dae38:	7838      	ldrb	r0, [r7, #0]
   dae3a:	f899 3000 	ldrb.w	r3, [r9]
   dae3e:	f898 2000 	ldrb.w	r2, [r8]
   dae42:	9000      	str	r0, [sp, #0]
   dae44:	f105 0120 	add.w	r1, r5, #32
   dae48:	b289      	uxth	r1, r1
   dae4a:	4869      	ldr	r0, [pc, #420]	; (daff0 <_Z9conditionii+0x1b98>)
   dae4c:	f003 fe58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   dae50:	7838      	ldrb	r0, [r7, #0]
   dae52:	f899 3000 	ldrb.w	r3, [r9]
   dae56:	f898 2000 	ldrb.w	r2, [r8]
   dae5a:	9000      	str	r0, [sp, #0]
   dae5c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   dae60:	b289      	uxth	r1, r1
   dae62:	4863      	ldr	r0, [pc, #396]	; (daff0 <_Z9conditionii+0x1b98>)
   dae64:	f003 fe4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   dae68:	7838      	ldrb	r0, [r7, #0]
   dae6a:	f899 3000 	ldrb.w	r3, [r9]
   dae6e:	f898 2000 	ldrb.w	r2, [r8]
   dae72:	9000      	str	r0, [sp, #0]
   dae74:	f105 0112 	add.w	r1, r5, #18
   dae78:	b289      	uxth	r1, r1
   dae7a:	485d      	ldr	r0, [pc, #372]	; (daff0 <_Z9conditionii+0x1b98>)
   dae7c:	f003 fe40 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   dae80:	7838      	ldrb	r0, [r7, #0]
   dae82:	f899 3000 	ldrb.w	r3, [r9]
   dae86:	f898 2000 	ldrb.w	r2, [r8]
   dae8a:	9000      	str	r0, [sp, #0]
   dae8c:	f105 011d 	add.w	r1, r5, #29
   dae90:	b289      	uxth	r1, r1
   dae92:	4857      	ldr	r0, [pc, #348]	; (daff0 <_Z9conditionii+0x1b98>)
   dae94:	f003 fe34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   dae98:	7838      	ldrb	r0, [r7, #0]
   dae9a:	f899 3000 	ldrb.w	r3, [r9]
   dae9e:	f898 2000 	ldrb.w	r2, [r8]
   daea2:	9000      	str	r0, [sp, #0]
   daea4:	f105 0122 	add.w	r1, r5, #34	; 0x22
   daea8:	b289      	uxth	r1, r1
   daeaa:	4851      	ldr	r0, [pc, #324]	; (daff0 <_Z9conditionii+0x1b98>)
   daeac:	f003 fe28 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock,gclock,bclock);
   daeb0:	7838      	ldrb	r0, [r7, #0]
   daeb2:	f899 3000 	ldrb.w	r3, [r9]
   daeb6:	f898 2000 	ldrb.w	r2, [r8]
   daeba:	9000      	str	r0, [sp, #0]
   daebc:	f105 010b 	add.w	r1, r5, #11
   daec0:	b289      	uxth	r1, r1
   daec2:	484b      	ldr	r0, [pc, #300]	; (daff0 <_Z9conditionii+0x1b98>)
   daec4:	f003 fe1c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   daec8:	7838      	ldrb	r0, [r7, #0]
   daeca:	f899 3000 	ldrb.w	r3, [r9]
   daece:	f898 2000 	ldrb.w	r2, [r8]
   daed2:	9000      	str	r0, [sp, #0]
   daed4:	f105 0114 	add.w	r1, r5, #20
   daed8:	b289      	uxth	r1, r1
   daeda:	4845      	ldr	r0, [pc, #276]	; (daff0 <_Z9conditionii+0x1b98>)
   daedc:	f003 fe10 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   daee0:	7838      	ldrb	r0, [r7, #0]
   daee2:	f899 3000 	ldrb.w	r3, [r9]
   daee6:	f898 2000 	ldrb.w	r2, [r8]
   daeea:	9000      	str	r0, [sp, #0]
   daeec:	f105 011b 	add.w	r1, r5, #27
   daef0:	b289      	uxth	r1, r1
   daef2:	483f      	ldr	r0, [pc, #252]	; (daff0 <_Z9conditionii+0x1b98>)
   daef4:	f003 fe04 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   daef8:	7838      	ldrb	r0, [r7, #0]
   daefa:	f899 3000 	ldrb.w	r3, [r9]
   daefe:	f898 2000 	ldrb.w	r2, [r8]
   daf02:	9000      	str	r0, [sp, #0]
   daf04:	f105 0124 	add.w	r1, r5, #36	; 0x24
   daf08:	b289      	uxth	r1, r1
   daf0a:	4839      	ldr	r0, [pc, #228]	; (daff0 <_Z9conditionii+0x1b98>)
   daf0c:	f003 fdf8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   daf10:	7838      	ldrb	r0, [r7, #0]
   daf12:	f899 3000 	ldrb.w	r3, [r9]
   daf16:	f898 2000 	ldrb.w	r2, [r8]
   daf1a:	9000      	str	r0, [sp, #0]
   daf1c:	f105 0116 	add.w	r1, r5, #22
   daf20:	b289      	uxth	r1, r1
   daf22:	4833      	ldr	r0, [pc, #204]	; (daff0 <_Z9conditionii+0x1b98>)
   daf24:	f003 fdec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock,gclock,bclock);
   daf28:	7838      	ldrb	r0, [r7, #0]
   daf2a:	f899 3000 	ldrb.w	r3, [r9]
   daf2e:	f898 2000 	ldrb.w	r2, [r8]
   daf32:	9000      	str	r0, [sp, #0]
   daf34:	f105 0119 	add.w	r1, r5, #25
   daf38:	b289      	uxth	r1, r1
   daf3a:	482d      	ldr	r0, [pc, #180]	; (daff0 <_Z9conditionii+0x1b98>)
   daf3c:	f003 fde0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock,gclock,bclock);
   daf40:	7838      	ldrb	r0, [r7, #0]
   daf42:	f899 3000 	ldrb.w	r3, [r9]
   daf46:	f898 2000 	ldrb.w	r2, [r8]
   daf4a:	9000      	str	r0, [sp, #0]
   daf4c:	f105 0126 	add.w	r1, r5, #38	; 0x26
   daf50:	b289      	uxth	r1, r1
   daf52:	4827      	ldr	r0, [pc, #156]	; (daff0 <_Z9conditionii+0x1b98>)
   daf54:	f003 fdd4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+41,rclock,gclock,bclock);
   daf58:	7838      	ldrb	r0, [r7, #0]
   daf5a:	f899 3000 	ldrb.w	r3, [r9]
   daf5e:	f898 2000 	ldrb.w	r2, [r8]
   daf62:	9000      	str	r0, [sp, #0]
   daf64:	f105 0129 	add.w	r1, r5, #41	; 0x29
   daf68:	b289      	uxth	r1, r1
   daf6a:	4821      	ldr	r0, [pc, #132]	; (daff0 <_Z9conditionii+0x1b98>)
   daf6c:	f003 fdc8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 781)
   daf70:	f240 330d 	movw	r3, #781	; 0x30d
   daf74:	429e      	cmp	r6, r3
   daf76:	d137      	bne.n	dafe8 <_Z9conditionii+0x1b90>
        {
            strip.setPixelColor(inpix+25,255,127,0);
   daf78:	b2a4      	uxth	r4, r4
   daf7a:	2500      	movs	r5, #0
   daf7c:	f104 0119 	add.w	r1, r4, #25
   daf80:	237f      	movs	r3, #127	; 0x7f
   daf82:	22ff      	movs	r2, #255	; 0xff
   daf84:	b289      	uxth	r1, r1
   daf86:	481a      	ldr	r0, [pc, #104]	; (daff0 <_Z9conditionii+0x1b98>)
   daf88:	9500      	str	r5, [sp, #0]
   daf8a:	f003 fdb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,255,127,0);
   daf8e:	f104 011b 	add.w	r1, r4, #27
   daf92:	237f      	movs	r3, #127	; 0x7f
   daf94:	22ff      	movs	r2, #255	; 0xff
   daf96:	b289      	uxth	r1, r1
   daf98:	4815      	ldr	r0, [pc, #84]	; (daff0 <_Z9conditionii+0x1b98>)
   daf9a:	9500      	str	r5, [sp, #0]
   daf9c:	f003 fdb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,255,127,0);
   dafa0:	f104 011c 	add.w	r1, r4, #28
   dafa4:	237f      	movs	r3, #127	; 0x7f
   dafa6:	22ff      	movs	r2, #255	; 0xff
   dafa8:	b289      	uxth	r1, r1
   dafaa:	4811      	ldr	r0, [pc, #68]	; (daff0 <_Z9conditionii+0x1b98>)
   dafac:	9500      	str	r5, [sp, #0]
   dafae:	f003 fda7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,255,127,0);
   dafb2:	f104 011d 	add.w	r1, r4, #29
   dafb6:	237f      	movs	r3, #127	; 0x7f
   dafb8:	22ff      	movs	r2, #255	; 0xff
   dafba:	b289      	uxth	r1, r1
   dafbc:	480c      	ldr	r0, [pc, #48]	; (daff0 <_Z9conditionii+0x1b98>)
   dafbe:	9500      	str	r5, [sp, #0]
   dafc0:	f003 fd9e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,255,127,0);
   dafc4:	f104 011e 	add.w	r1, r4, #30
   dafc8:	237f      	movs	r3, #127	; 0x7f
   dafca:	22ff      	movs	r2, #255	; 0xff
   dafcc:	b289      	uxth	r1, r1
   dafce:	4808      	ldr	r0, [pc, #32]	; (daff0 <_Z9conditionii+0x1b98>)
   dafd0:	9500      	str	r5, [sp, #0]
   dafd2:	f003 fd95 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,255,127,0);
   dafd6:	f104 011f 	add.w	r1, r4, #31
   dafda:	9500      	str	r5, [sp, #0]
   dafdc:	237f      	movs	r3, #127	; 0x7f
   dafde:	22ff      	movs	r2, #255	; 0xff
   dafe0:	b289      	uxth	r1, r1
   dafe2:	4803      	ldr	r0, [pc, #12]	; (daff0 <_Z9conditionii+0x1b98>)
   dafe4:	f003 fd8c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(cnum > 599 || cnum < 623)
        {
            
        }
    }
}                                        
   dafe8:	b005      	add	sp, #20
   dafea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dafee:	bf00      	nop
   daff0:	2003e31c 	.word	0x2003e31c
   daff4:	00000000 	.word	0x00000000

000daff8 <_Z9myHandlerPKcS0_>:
    else{
        tmr = tmr+1;
    }

}
void myHandler(const char *event, const char *data) {
   daff8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
   daffc:	4f7e      	ldr	r7, [pc, #504]	; (db1f8 <_Z9myHandlerPKcS0_+0x200>)
    else{
        tmr = tmr+1;
    }

}
void myHandler(const char *event, const char *data) {
   daffe:	b087      	sub	sp, #28
   db000:	460e      	mov	r6, r1
   db002:	1c8d      	adds	r5, r1, #2
   db004:	460c      	mov	r4, r1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   db006:	4630      	mov	r0, r6
   db008:	f007 f983 	bl	e2312 <strlen>
   db00c:	1ba3      	subs	r3, r4, r6
   db00e:	4298      	cmp	r0, r3
   db010:	d962      	bls.n	db0d8 <_Z9myHandlerPKcS0_+0xe0>
    {
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
   db012:	f814 3b01 	ldrb.w	r3, [r4], #1
   db016:	2b74      	cmp	r3, #116	; 0x74
   db018:	d11e      	bne.n	db058 <_Z9myHandlerPKcS0_+0x60>
   db01a:	7823      	ldrb	r3, [r4, #0]
   db01c:	2b65      	cmp	r3, #101	; 0x65
   db01e:	d13f      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db020:	782b      	ldrb	r3, [r5, #0]
   db022:	2b6d      	cmp	r3, #109	; 0x6d
   db024:	d13c      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db026:	786b      	ldrb	r3, [r5, #1]
   db028:	2b70      	cmp	r3, #112	; 0x70
   db02a:	d139      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db02c:	78e3      	ldrb	r3, [r4, #3]
   db02e:	2b22      	cmp	r3, #34	; 0x22
   db030:	d136      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
            tempdata[0] = data[j+6];
   db032:	7963      	ldrb	r3, [r4, #5]
   db034:	f88d 3010 	strb.w	r3, [sp, #16]
            tempdata[1] = data[j+7];
   db038:	79a3      	ldrb	r3, [r4, #6]
   db03a:	f88d 3011 	strb.w	r3, [sp, #17]
            tempdata[2] = data[j+8];
   db03e:	79e3      	ldrb	r3, [r4, #7]
   db040:	f88d 3012 	strb.w	r3, [sp, #18]
            tempdata[3] = data[j+9];
   db044:	7a23      	ldrb	r3, [r4, #8]
   db046:	f88d 3013 	strb.w	r3, [sp, #19]
            tempdata[4] = data[j+10];
   db04a:	7a63      	ldrb	r3, [r4, #9]
   db04c:	f88d 3014 	strb.w	r3, [sp, #20]
            tempdata[5] = data[j+11];
   db050:	7aa3      	ldrb	r3, [r4, #10]
   db052:	f88d 3015 	strb.w	r3, [sp, #21]
   db056:	e023      	b.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
        }
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
   db058:	2b68      	cmp	r3, #104	; 0x68
   db05a:	d114      	bne.n	db086 <_Z9myHandlerPKcS0_+0x8e>
   db05c:	7823      	ldrb	r3, [r4, #0]
   db05e:	2b75      	cmp	r3, #117	; 0x75
   db060:	d11e      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db062:	782b      	ldrb	r3, [r5, #0]
   db064:	2b6d      	cmp	r3, #109	; 0x6d
   db066:	d11b      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db068:	786b      	ldrb	r3, [r5, #1]
   db06a:	2b69      	cmp	r3, #105	; 0x69
   db06c:	d118      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
            humdata[0] = data[j+10];
   db06e:	7a63      	ldrb	r3, [r4, #9]
   db070:	f88d 3008 	strb.w	r3, [sp, #8]
            humdata[1] = data[j+11];
   db074:	7aa3      	ldrb	r3, [r4, #10]
   db076:	f88d 3009 	strb.w	r3, [sp, #9]
            if(data[j+12] == '0')
   db07a:	7ae3      	ldrb	r3, [r4, #11]
   db07c:	2b30      	cmp	r3, #48	; 0x30
   db07e:	d10f      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
            {
                humdata[2] = data[j+12];
   db080:	f88d 300a 	strb.w	r3, [sp, #10]
   db084:	e00c      	b.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
   db086:	2b69      	cmp	r3, #105	; 0x69
   db088:	d10a      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db08a:	7823      	ldrb	r3, [r4, #0]
   db08c:	2b63      	cmp	r3, #99	; 0x63
   db08e:	d107      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db090:	782b      	ldrb	r3, [r5, #0]
   db092:	2b6f      	cmp	r3, #111	; 0x6f
   db094:	d104      	bne.n	db0a0 <_Z9myHandlerPKcS0_+0xa8>
   db096:	786b      	ldrb	r3, [r5, #1]
   db098:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
   db09a:	bf04      	itt	eq
   db09c:	7a23      	ldrbeq	r3, [r4, #8]
   db09e:	703b      	strbeq	r3, [r7, #0]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
   db0a0:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   db0a4:	2b5b      	cmp	r3, #91	; 0x5b
   db0a6:	d115      	bne.n	db0d4 <_Z9myHandlerPKcS0_+0xdc>
   db0a8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   db0ac:	2b7b      	cmp	r3, #123	; 0x7b
   db0ae:	d111      	bne.n	db0d4 <_Z9myHandlerPKcS0_+0xdc>
   db0b0:	7823      	ldrb	r3, [r4, #0]
   db0b2:	2b22      	cmp	r3, #34	; 0x22
   db0b4:	d10e      	bne.n	db0d4 <_Z9myHandlerPKcS0_+0xdc>
   db0b6:	782b      	ldrb	r3, [r5, #0]
   db0b8:	2b69      	cmp	r3, #105	; 0x69
   db0ba:	d10b      	bne.n	db0d4 <_Z9myHandlerPKcS0_+0xdc>
   db0bc:	786b      	ldrb	r3, [r5, #1]
   db0be:	2b64      	cmp	r3, #100	; 0x64
   db0c0:	d108      	bne.n	db0d4 <_Z9myHandlerPKcS0_+0xdc>
            cdata[0] = data[j+6];
   db0c2:	7963      	ldrb	r3, [r4, #5]
   db0c4:	f88d 300c 	strb.w	r3, [sp, #12]
            cdata[1] = data[j+7];
   db0c8:	79a3      	ldrb	r3, [r4, #6]
   db0ca:	f88d 300d 	strb.w	r3, [sp, #13]
            cdata[2] = data[j+8];
   db0ce:	79e3      	ldrb	r3, [r4, #7]
   db0d0:	f88d 300e 	strb.w	r3, [sp, #14]
   db0d4:	3501      	adds	r5, #1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   db0d6:	e796      	b.n	db006 <_Z9myHandlerPKcS0_+0xe>
            cdata[0] = data[j+6];
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    humidity = atof(humdata);
   db0d8:	a802      	add	r0, sp, #8
   db0da:	f006 ff95 	bl	e2008 <atof>
   db0de:	ec51 0b10 	vmov	r0, r1, d0
   db0e2:	f006 fef9 	bl	e1ed8 <__aeabi_d2iz>
   db0e6:	4607      	mov	r7, r0
    cid = atof(cdata);
   db0e8:	a803      	add	r0, sp, #12
   db0ea:	f006 ff8d 	bl	e2008 <atof>
   db0ee:	ec51 0b10 	vmov	r0, r1, d0
   db0f2:	f006 fef1 	bl	e1ed8 <__aeabi_d2iz>
   db0f6:	4e41      	ldr	r6, [pc, #260]	; (db1fc <_Z9myHandlerPKcS0_+0x204>)
    if(cid == 781)
   db0f8:	f240 330d 	movw	r3, #781	; 0x30d
   db0fc:	4298      	cmp	r0, r3
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    humidity = atof(humdata);
    cid = atof(cdata);
   db0fe:	6030      	str	r0, [r6, #0]
    if(cid == 781)
   db100:	d12f      	bne.n	db162 <_Z9myHandlerPKcS0_+0x16a>
    {
        for(i=160;i<247;i++)
   db102:	4c3f      	ldr	r4, [pc, #252]	; (db200 <_Z9myHandlerPKcS0_+0x208>)
   db104:	23a0      	movs	r3, #160	; 0xa0
   db106:	6023      	str	r3, [r4, #0]
   db108:	46a0      	mov	r8, r4
        {
            strip.setPixelColor(i,0,0,0);
   db10a:	f04f 0900 	mov.w	r9, #0
    }
    humidity = atof(humdata);
    cid = atof(cdata);
    if(cid == 781)
    {
        for(i=160;i<247;i++)
   db10e:	6821      	ldr	r1, [r4, #0]
   db110:	4d3b      	ldr	r5, [pc, #236]	; (db200 <_Z9myHandlerPKcS0_+0x208>)
   db112:	29f6      	cmp	r1, #246	; 0xf6
   db114:	dc0d      	bgt.n	db132 <_Z9myHandlerPKcS0_+0x13a>
        {
            strip.setPixelColor(i,0,0,0);
   db116:	2300      	movs	r3, #0
   db118:	461a      	mov	r2, r3
   db11a:	f8cd 9000 	str.w	r9, [sp]
   db11e:	b289      	uxth	r1, r1
   db120:	4838      	ldr	r0, [pc, #224]	; (db204 <_Z9myHandlerPKcS0_+0x20c>)
   db122:	f003 fced 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    humidity = atof(humdata);
    cid = atof(cdata);
    if(cid == 781)
    {
        for(i=160;i<247;i++)
   db126:	f8d8 3000 	ldr.w	r3, [r8]
   db12a:	3301      	adds	r3, #1
   db12c:	f8c8 3000 	str.w	r3, [r8]
   db130:	e7ed      	b.n	db10e <_Z9myHandlerPKcS0_+0x116>
        {
            strip.setPixelColor(i,0,0,0);
        }
        condition(cid,160);
   db132:	21a0      	movs	r1, #160	; 0xa0
   db134:	6830      	ldr	r0, [r6, #0]
   db136:	f7fe f98f 	bl	d9458 <_Z9conditionii>
        strip.show();
   db13a:	4832      	ldr	r0, [pc, #200]	; (db204 <_Z9myHandlerPKcS0_+0x20c>)
   db13c:	f003 fb3e 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0;i<100;i++)
   db140:	2300      	movs	r3, #0
   db142:	602b      	str	r3, [r5, #0]
   db144:	6823      	ldr	r3, [r4, #0]
   db146:	2b63      	cmp	r3, #99	; 0x63
   db148:	dc0b      	bgt.n	db162 <_Z9myHandlerPKcS0_+0x16a>
        {
            sound(300, 250);
   db14a:	21fa      	movs	r1, #250	; 0xfa
   db14c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   db150:	f7f9 f933 	bl	d43ba <_Z5soundii>
            delay(250);
   db154:	20fa      	movs	r0, #250	; 0xfa
   db156:	f004 fdcd 	bl	dfcf4 <delay>
        {
            strip.setPixelColor(i,0,0,0);
        }
        condition(cid,160);
        strip.show();
        for(i=0;i<100;i++)
   db15a:	682b      	ldr	r3, [r5, #0]
   db15c:	3301      	adds	r3, #1
   db15e:	602b      	str	r3, [r5, #0]
   db160:	e7f0      	b.n	db144 <_Z9myHandlerPKcS0_+0x14c>
        {
            sound(300, 250);
            delay(250);
        }
    }
    HC1 = humidity/10;
   db162:	4b29      	ldr	r3, [pc, #164]	; (db208 <_Z9myHandlerPKcS0_+0x210>)
   db164:	240a      	movs	r4, #10
   db166:	fb97 f0f4 	sdiv	r0, r7, r4
   db16a:	6018      	str	r0, [r3, #0]
    HC2 = humidity%10;
   db16c:	4b27      	ldr	r3, [pc, #156]	; (db20c <_Z9myHandlerPKcS0_+0x214>)
   db16e:	fb04 7010 	mls	r0, r4, r0, r7
   db172:	6018      	str	r0, [r3, #0]
    tempK = atof(tempdata);
   db174:	a804      	add	r0, sp, #16
   db176:	f006 ff47 	bl	e2008 <atof>
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
   db17a:	ec51 0b10 	vmov	r0, r1, d0
   db17e:	f006 fef3 	bl	e1f68 <__aeabi_d2f>
   db182:	f006 fbbb 	bl	e18fc <__aeabi_f2d>
   db186:	a318      	add	r3, pc, #96	; (adr r3, db1e8 <_Z9myHandlerPKcS0_+0x1f0>)
   db188:	e9d3 2300 	ldrd	r2, r3, [r3]
   db18c:	f006 fa56 	bl	e163c <__aeabi_dsub>
   db190:	f006 feea 	bl	e1f68 <__aeabi_d2f>
   db194:	f006 fbb2 	bl	e18fc <__aeabi_f2d>
   db198:	a315      	add	r3, pc, #84	; (adr r3, db1f0 <_Z9myHandlerPKcS0_+0x1f8>)
   db19a:	e9d3 2300 	ldrd	r2, r3, [r3]
   db19e:	f006 fc01 	bl	e19a4 <__aeabi_dmul>
   db1a2:	2200      	movs	r2, #0
   db1a4:	4b1a      	ldr	r3, [pc, #104]	; (db210 <_Z9myHandlerPKcS0_+0x218>)
   db1a6:	f006 fa4b 	bl	e1640 <__adddf3>
   db1aa:	f006 fedd 	bl	e1f68 <__aeabi_d2f>
   db1ae:	ee07 0a90 	vmov	s15, r0
   db1b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db1b6:	4b17      	ldr	r3, [pc, #92]	; (db214 <_Z9myHandlerPKcS0_+0x21c>)
    TC1 = TFahr/10;
   db1b8:	4a17      	ldr	r2, [pc, #92]	; (db218 <_Z9myHandlerPKcS0_+0x220>)
    HC1 = humidity/10;
    HC2 = humidity%10;
    tempK = atof(tempdata);
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
   db1ba:	edc3 7a00 	vstr	s15, [r3]
   db1be:	ee17 0a90 	vmov	r0, s15
    TC1 = TFahr/10;
   db1c2:	fb90 f3f4 	sdiv	r3, r0, r4
   db1c6:	6013      	str	r3, [r2, #0]
    TC2 = TFahr%10;
   db1c8:	4a14      	ldr	r2, [pc, #80]	; (db21c <_Z9myHandlerPKcS0_+0x224>)
   db1ca:	fb04 0313 	mls	r3, r4, r3, r0
    strip.show();
   db1ce:	480d      	ldr	r0, [pc, #52]	; (db204 <_Z9myHandlerPKcS0_+0x20c>)
    tempK = atof(tempdata);
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
    TC1 = TFahr/10;
    TC2 = TFahr%10;
   db1d0:	6013      	str	r3, [r2, #0]
    strip.show();
   db1d2:	f003 faf3 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
    delay(10);
   db1d6:	4620      	mov	r0, r4
   db1d8:	f004 fd8c 	bl	dfcf4 <delay>
}
   db1dc:	b007      	add	sp, #28
   db1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db1e2:	bf00      	nop
   db1e4:	f3af 8000 	nop.w
   db1e8:	66666666 	.word	0x66666666
   db1ec:	40711266 	.word	0x40711266
   db1f0:	cccccccd 	.word	0xcccccccd
   db1f4:	3ffccccc 	.word	0x3ffccccc
   db1f8:	2003e360 	.word	0x2003e360
   db1fc:	2003e2f0 	.word	0x2003e2f0
   db200:	2003e33c 	.word	0x2003e33c
   db204:	2003e31c 	.word	0x2003e31c
   db208:	2003e2f4 	.word	0x2003e2f4
   db20c:	2003e2fc 	.word	0x2003e2fc
   db210:	40400000 	.word	0x40400000
   db214:	2003e358 	.word	0x2003e358
   db218:	2003e304 	.word	0x2003e304
   db21c:	2003e34c 	.word	0x2003e34c

000db220 <_Z5canimiib>:
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   db220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cnum > 199 && cnum < 235)
   db224:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   db228:	b091      	sub	sp, #68	; 0x44
    if(cnum > 199 && cnum < 235)
   db22a:	2b22      	cmp	r3, #34	; 0x22
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   db22c:	460c      	mov	r4, r1
   db22e:	9203      	str	r2, [sp, #12]
    if(cnum > 199 && cnum < 235)
   db230:	f200 8118 	bhi.w	db464 <_Z5canimiib+0x244>
    {
        strip.setPixelColor(inpix+28,0,0,0);
   db234:	b28c      	uxth	r4, r1
   db236:	f104 091c 	add.w	r9, r4, #28
   db23a:	2600      	movs	r6, #0
   db23c:	fa1f f989 	uxth.w	r9, r9
   db240:	4633      	mov	r3, r6
   db242:	4632      	mov	r2, r6
   db244:	4649      	mov	r1, r9
   db246:	4881      	ldr	r0, [pc, #516]	; (db44c <_Z5canimiib+0x22c>)
   db248:	9600      	str	r6, [sp, #0]
   db24a:	f003 fc59 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   db24e:	f104 031a 	add.w	r3, r4, #26
   db252:	b29b      	uxth	r3, r3
   db254:	9304      	str	r3, [sp, #16]
        strip.setPixelColor(inpix+22,0,0,0);
   db256:	f104 0a16 	add.w	sl, r4, #22
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db25a:	4633      	mov	r3, r6
   db25c:	4632      	mov	r2, r6
   db25e:	9904      	ldr	r1, [sp, #16]
   db260:	487a      	ldr	r0, [pc, #488]	; (db44c <_Z5canimiib+0x22c>)
   db262:	9600      	str	r6, [sp, #0]
        strip.setPixelColor(inpix+22,0,0,0);
   db264:	fa1f fa8a 	uxth.w	sl, sl
        strip.setPixelColor(inpix+20,0,0,0);
   db268:	3414      	adds	r4, #20
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db26a:	f003 fc49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
   db26e:	b2a4      	uxth	r4, r4
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   db270:	4633      	mov	r3, r6
   db272:	4632      	mov	r2, r6
   db274:	4651      	mov	r1, sl
   db276:	4875      	ldr	r0, [pc, #468]	; (db44c <_Z5canimiib+0x22c>)
   db278:	9600      	str	r6, [sp, #0]
   db27a:	f003 fc41 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   db27e:	4633      	mov	r3, r6
   db280:	9600      	str	r6, [sp, #0]
   db282:	4632      	mov	r2, r6
   db284:	4621      	mov	r1, r4
   db286:	4871      	ldr	r0, [pc, #452]	; (db44c <_Z5canimiib+0x22c>)
   db288:	4d71      	ldr	r5, [pc, #452]	; (db450 <_Z5canimiib+0x230>)
   db28a:	f003 fc39 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(tmr)
   db28e:	9b03      	ldr	r3, [sp, #12]
   db290:	b37b      	cbz	r3, db2f2 <_Z5canimiib+0xd2>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   db292:	4f70      	ldr	r7, [pc, #448]	; (db454 <_Z5canimiib+0x234>)
   db294:	f8df 81c4 	ldr.w	r8, [pc, #452]	; db45c <_Z5canimiib+0x23c>
   db298:	7839      	ldrb	r1, [r7, #0]
   db29a:	782b      	ldrb	r3, [r5, #0]
   db29c:	f898 2000 	ldrb.w	r2, [r8]
   db2a0:	486a      	ldr	r0, [pc, #424]	; (db44c <_Z5canimiib+0x22c>)
   db2a2:	9100      	str	r1, [sp, #0]
   db2a4:	213a      	movs	r1, #58	; 0x3a
   db2a6:	f003 fc2b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   db2aa:	7839      	ldrb	r1, [r7, #0]
   db2ac:	782b      	ldrb	r3, [r5, #0]
   db2ae:	f898 2000 	ldrb.w	r2, [r8]
   db2b2:	4866      	ldr	r0, [pc, #408]	; (db44c <_Z5canimiib+0x22c>)
   db2b4:	9100      	str	r1, [sp, #0]
   db2b6:	213e      	movs	r1, #62	; 0x3e
   db2b8:	f003 fc22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   db2bc:	4863      	ldr	r0, [pc, #396]	; (db44c <_Z5canimiib+0x22c>)
   db2be:	f003 fa7d 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            for(i=0; i<100; i++)
   db2c2:	4b65      	ldr	r3, [pc, #404]	; (db458 <_Z5canimiib+0x238>)
   db2c4:	601e      	str	r6, [r3, #0]
   db2c6:	461e      	mov	r6, r3
   db2c8:	6833      	ldr	r3, [r6, #0]
   db2ca:	2b63      	cmp	r3, #99	; 0x63
   db2cc:	dc11      	bgt.n	db2f2 <_Z5canimiib+0xd2>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db2ce:	2000      	movs	r0, #0
   db2d0:	f005 ffc6 	bl	e1260 <digitalRead>
   db2d4:	b948      	cbnz	r0, db2ea <_Z5canimiib+0xca>
   db2d6:	2001      	movs	r0, #1
   db2d8:	f005 ffc2 	bl	e1260 <digitalRead>
   db2dc:	b928      	cbnz	r0, db2ea <_Z5canimiib+0xca>
   db2de:	2002      	movs	r0, #2
   db2e0:	f005 ffbe 	bl	e1260 <digitalRead>
   db2e4:	2800      	cmp	r0, #0
   db2e6:	f001 827c 	beq.w	dc7e2 <_Z5canimiib+0x15c2>
        if(tmr)
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
            strip.show();
            for(i=0; i<100; i++)
   db2ea:	6833      	ldr	r3, [r6, #0]
   db2ec:	3301      	adds	r3, #1
   db2ee:	6033      	str	r3, [r6, #0]
   db2f0:	e7ea      	b.n	db2c8 <_Z5canimiib+0xa8>
                {
                    delay(5);
                }
            }
        }
        strip.setPixelColor(inpix+28,rclock/1.2,gclock*2,0);
   db2f2:	4e5a      	ldr	r6, [pc, #360]	; (db45c <_Z5canimiib+0x23c>)
   db2f4:	682b      	ldr	r3, [r5, #0]
   db2f6:	6830      	ldr	r0, [r6, #0]
   db2f8:	f8df b154 	ldr.w	fp, [pc, #340]	; db450 <_Z5canimiib+0x230>
   db2fc:	005b      	lsls	r3, r3, #1
   db2fe:	fa5f f883 	uxtb.w	r8, r3
   db302:	f006 fae9 	bl	e18d8 <__aeabi_i2d>
   db306:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db30a:	4b55      	ldr	r3, [pc, #340]	; (db460 <_Z5canimiib+0x240>)
   db30c:	f006 fc74 	bl	e1bf8 <__aeabi_ddiv>
   db310:	f006 fe0a 	bl	e1f28 <__aeabi_d2uiz>
   db314:	2700      	movs	r7, #0
   db316:	b2c2      	uxtb	r2, r0
   db318:	4643      	mov	r3, r8
   db31a:	4649      	mov	r1, r9
   db31c:	484b      	ldr	r0, [pc, #300]	; (db44c <_Z5canimiib+0x22c>)
   db31e:	9700      	str	r7, [sp, #0]
   db320:	f003 fbee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db324:	4849      	ldr	r0, [pc, #292]	; (db44c <_Z5canimiib+0x22c>)
   db326:	f003 fa49 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db32a:	200a      	movs	r0, #10
   db32c:	f004 fce2 	bl	dfcf4 <delay>
        strip.setPixelColor(inpix+20,rclock/1.2,gclock*2,0);
   db330:	682b      	ldr	r3, [r5, #0]
   db332:	6830      	ldr	r0, [r6, #0]
   db334:	005b      	lsls	r3, r3, #1
   db336:	fa5f f883 	uxtb.w	r8, r3
   db33a:	f006 facd 	bl	e18d8 <__aeabi_i2d>
   db33e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db342:	4b47      	ldr	r3, [pc, #284]	; (db460 <_Z5canimiib+0x240>)
   db344:	f006 fc58 	bl	e1bf8 <__aeabi_ddiv>
   db348:	f006 fdee 	bl	e1f28 <__aeabi_d2uiz>
   db34c:	4643      	mov	r3, r8
   db34e:	b2c2      	uxtb	r2, r0
   db350:	4621      	mov	r1, r4
   db352:	483e      	ldr	r0, [pc, #248]	; (db44c <_Z5canimiib+0x22c>)
   db354:	9700      	str	r7, [sp, #0]
   db356:	f003 fbd3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db35a:	483c      	ldr	r0, [pc, #240]	; (db44c <_Z5canimiib+0x22c>)
   db35c:	f003 fa2e 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db360:	200a      	movs	r0, #10
   db362:	f004 fcc7 	bl	dfcf4 <delay>
        strip.setPixelColor(inpix+26,rclock/1.2,gclock*2,0);
   db366:	6830      	ldr	r0, [r6, #0]
   db368:	682c      	ldr	r4, [r5, #0]
   db36a:	f006 fab5 	bl	e18d8 <__aeabi_i2d>
   db36e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db372:	4b3b      	ldr	r3, [pc, #236]	; (db460 <_Z5canimiib+0x240>)
   db374:	f006 fc40 	bl	e1bf8 <__aeabi_ddiv>
   db378:	f006 fdd6 	bl	e1f28 <__aeabi_d2uiz>
   db37c:	0064      	lsls	r4, r4, #1
   db37e:	b2e4      	uxtb	r4, r4
   db380:	4623      	mov	r3, r4
   db382:	b2c2      	uxtb	r2, r0
   db384:	9904      	ldr	r1, [sp, #16]
   db386:	4831      	ldr	r0, [pc, #196]	; (db44c <_Z5canimiib+0x22c>)
   db388:	9700      	str	r7, [sp, #0]
   db38a:	f003 fbb9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db38e:	482f      	ldr	r0, [pc, #188]	; (db44c <_Z5canimiib+0x22c>)
   db390:	f003 fa14 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db394:	200a      	movs	r0, #10
   db396:	f004 fcad 	bl	dfcf4 <delay>
        strip.setPixelColor(inpix+22,rclock/1.2,gclock*2,0);
   db39a:	6830      	ldr	r0, [r6, #0]
   db39c:	682c      	ldr	r4, [r5, #0]
   db39e:	f006 fa9b 	bl	e18d8 <__aeabi_i2d>
   db3a2:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db3a6:	4b2e      	ldr	r3, [pc, #184]	; (db460 <_Z5canimiib+0x240>)
   db3a8:	f006 fc26 	bl	e1bf8 <__aeabi_ddiv>
   db3ac:	f006 fdbc 	bl	e1f28 <__aeabi_d2uiz>
   db3b0:	0064      	lsls	r4, r4, #1
   db3b2:	b2e4      	uxtb	r4, r4
   db3b4:	4623      	mov	r3, r4
   db3b6:	b2c2      	uxtb	r2, r0
   db3b8:	9700      	str	r7, [sp, #0]
   db3ba:	4651      	mov	r1, sl
   db3bc:	4823      	ldr	r0, [pc, #140]	; (db44c <_Z5canimiib+0x22c>)
   db3be:	f003 fb9f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(tmr)
   db3c2:	9b03      	ldr	r3, [sp, #12]
   db3c4:	2b00      	cmp	r3, #0
   db3c6:	f001 8257 	beq.w	dc878 <_Z5canimiib+0x1658>
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   db3ca:	4d22      	ldr	r5, [pc, #136]	; (db454 <_Z5canimiib+0x234>)
   db3cc:	f8db 3000 	ldr.w	r3, [fp]
   db3d0:	6829      	ldr	r1, [r5, #0]
   db3d2:	6832      	ldr	r2, [r6, #0]
   db3d4:	481d      	ldr	r0, [pc, #116]	; (db44c <_Z5canimiib+0x22c>)
   db3d6:	2402      	movs	r4, #2
   db3d8:	fb91 f1f4 	sdiv	r1, r1, r4
   db3dc:	b2c9      	uxtb	r1, r1
   db3de:	fb93 f3f4 	sdiv	r3, r3, r4
   db3e2:	fb92 f2f4 	sdiv	r2, r2, r4
   db3e6:	9100      	str	r1, [sp, #0]
   db3e8:	b2db      	uxtb	r3, r3
   db3ea:	b2d2      	uxtb	r2, r2
   db3ec:	213a      	movs	r1, #58	; 0x3a
   db3ee:	f003 fb87 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   db3f2:	6829      	ldr	r1, [r5, #0]
   db3f4:	f8db 3000 	ldr.w	r3, [fp]
   db3f8:	6832      	ldr	r2, [r6, #0]
   db3fa:	fb93 f3f4 	sdiv	r3, r3, r4
   db3fe:	fb92 f2f4 	sdiv	r2, r2, r4
   db402:	fb91 f4f4 	sdiv	r4, r1, r4
   db406:	b2e4      	uxtb	r4, r4
   db408:	9400      	str	r4, [sp, #0]
   db40a:	b2db      	uxtb	r3, r3
   db40c:	b2d2      	uxtb	r2, r2
   db40e:	213e      	movs	r1, #62	; 0x3e
   db410:	480e      	ldr	r0, [pc, #56]	; (db44c <_Z5canimiib+0x22c>)
            strip.show();
            for(i=0; i<100; i++)
   db412:	4c11      	ldr	r4, [pc, #68]	; (db458 <_Z5canimiib+0x238>)
        delay(10);
        strip.setPixelColor(inpix+22,rclock/1.2,gclock*2,0);
        if(tmr)
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   db414:	f003 fb74 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   db418:	480c      	ldr	r0, [pc, #48]	; (db44c <_Z5canimiib+0x22c>)
   db41a:	f003 f9cf 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            for(i=0; i<100; i++)
   db41e:	6027      	str	r7, [r4, #0]
   db420:	6823      	ldr	r3, [r4, #0]
   db422:	2b63      	cmp	r3, #99	; 0x63
   db424:	f301 8228 	bgt.w	dc878 <_Z5canimiib+0x1658>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db428:	2000      	movs	r0, #0
   db42a:	f005 ff19 	bl	e1260 <digitalRead>
   db42e:	b948      	cbnz	r0, db444 <_Z5canimiib+0x224>
   db430:	2001      	movs	r0, #1
   db432:	f005 ff15 	bl	e1260 <digitalRead>
   db436:	b928      	cbnz	r0, db444 <_Z5canimiib+0x224>
   db438:	2002      	movs	r0, #2
   db43a:	f005 ff11 	bl	e1260 <digitalRead>
   db43e:	2800      	cmp	r0, #0
   db440:	f001 81d4 	beq.w	dc7ec <_Z5canimiib+0x15cc>
        if(tmr)
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
            strip.show();
            for(i=0; i<100; i++)
   db444:	6823      	ldr	r3, [r4, #0]
   db446:	3301      	adds	r3, #1
   db448:	6023      	str	r3, [r4, #0]
   db44a:	e7e9      	b.n	db420 <_Z5canimiib+0x200>
   db44c:	2003e31c 	.word	0x2003e31c
   db450:	2003e314 	.word	0x2003e314
   db454:	2003e35c 	.word	0x2003e35c
   db458:	2003e33c 	.word	0x2003e33c
   db45c:	2003e354 	.word	0x2003e354
   db460:	3ff33333 	.word	0x3ff33333
                    delay(5);
                }
            }
        }
    }
    else if(cnum > 299 && cnum < 322)
   db464:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   db468:	2b15      	cmp	r3, #21
   db46a:	f200 81ba 	bhi.w	db7e2 <_Z5canimiib+0x5c2>
    {
        
        if(tmr)
   db46e:	9b03      	ldr	r3, [sp, #12]
   db470:	4daf      	ldr	r5, [pc, #700]	; (db730 <_Z5canimiib+0x510>)
   db472:	4eb0      	ldr	r6, [pc, #704]	; (db734 <_Z5canimiib+0x514>)
   db474:	b183      	cbz	r3, db498 <_Z5canimiib+0x278>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   db476:	4fb0      	ldr	r7, [pc, #704]	; (db738 <_Z5canimiib+0x518>)
   db478:	7831      	ldrb	r1, [r6, #0]
   db47a:	782b      	ldrb	r3, [r5, #0]
   db47c:	783a      	ldrb	r2, [r7, #0]
   db47e:	48af      	ldr	r0, [pc, #700]	; (db73c <_Z5canimiib+0x51c>)
   db480:	9100      	str	r1, [sp, #0]
   db482:	213a      	movs	r1, #58	; 0x3a
   db484:	f003 fb3c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   db488:	7831      	ldrb	r1, [r6, #0]
   db48a:	782b      	ldrb	r3, [r5, #0]
   db48c:	783a      	ldrb	r2, [r7, #0]
   db48e:	48ab      	ldr	r0, [pc, #684]	; (db73c <_Z5canimiib+0x51c>)
   db490:	9100      	str	r1, [sp, #0]
   db492:	213e      	movs	r1, #62	; 0x3e
   db494:	f003 fb34 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   db498:	b2a4      	uxth	r4, r4
   db49a:	f104 080c 	add.w	r8, r4, #12
   db49e:	7832      	ldrb	r2, [r6, #0]
   db4a0:	782b      	ldrb	r3, [r5, #0]
   db4a2:	48a6      	ldr	r0, [pc, #664]	; (db73c <_Z5canimiib+0x51c>)
   db4a4:	9200      	str	r2, [sp, #0]
   db4a6:	fa1f f888 	uxth.w	r8, r8
   db4aa:	2200      	movs	r2, #0
   db4ac:	4641      	mov	r1, r8
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db4ae:	f104 091b 	add.w	r9, r4, #27
        if(tmr)
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   db4b2:	f003 fb25 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db4b6:	fa1f f989 	uxth.w	r9, r9
   db4ba:	7832      	ldrb	r2, [r6, #0]
   db4bc:	782b      	ldrb	r3, [r5, #0]
   db4be:	489f      	ldr	r0, [pc, #636]	; (db73c <_Z5canimiib+0x51c>)
   db4c0:	9200      	str	r2, [sp, #0]
   db4c2:	4649      	mov	r1, r9
   db4c4:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   db4c6:	f104 0a2c 	add.w	sl, r4, #44	; 0x2c
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db4ca:	f003 fb19 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   db4ce:	fa1f fa8a 	uxth.w	sl, sl
   db4d2:	7832      	ldrb	r2, [r6, #0]
   db4d4:	782b      	ldrb	r3, [r5, #0]
   db4d6:	4899      	ldr	r0, [pc, #612]	; (db73c <_Z5canimiib+0x51c>)
   db4d8:	9200      	str	r2, [sp, #0]
   db4da:	4651      	mov	r1, sl
   db4dc:	2200      	movs	r2, #0
   db4de:	f003 fb0f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   db4e2:	f104 0309 	add.w	r3, r4, #9
   db4e6:	b29b      	uxth	r3, r3
   db4e8:	2700      	movs	r7, #0
   db4ea:	9304      	str	r3, [sp, #16]
   db4ec:	463a      	mov	r2, r7
   db4ee:	463b      	mov	r3, r7
   db4f0:	9904      	ldr	r1, [sp, #16]
   db4f2:	4892      	ldr	r0, [pc, #584]	; (db73c <_Z5canimiib+0x51c>)
   db4f4:	9700      	str	r7, [sp, #0]
   db4f6:	f003 fb03 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
   db4fa:	f104 031c 	add.w	r3, r4, #28
   db4fe:	b29b      	uxth	r3, r3
   db500:	9305      	str	r3, [sp, #20]
   db502:	463a      	mov	r2, r7
   db504:	463b      	mov	r3, r7
   db506:	9905      	ldr	r1, [sp, #20]
   db508:	488c      	ldr	r0, [pc, #560]	; (db73c <_Z5canimiib+0x51c>)
   db50a:	9700      	str	r7, [sp, #0]
   db50c:	f003 faf8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
   db510:	f104 0329 	add.w	r3, r4, #41	; 0x29
   db514:	b29b      	uxth	r3, r3
   db516:	9306      	str	r3, [sp, #24]
   db518:	463a      	mov	r2, r7
   db51a:	463b      	mov	r3, r7
   db51c:	9906      	ldr	r1, [sp, #24]
   db51e:	4887      	ldr	r0, [pc, #540]	; (db73c <_Z5canimiib+0x51c>)
   db520:	9700      	str	r7, [sp, #0]
        strip.show();
        for(i=0; i<50; i++)
   db522:	4e87      	ldr	r6, [pc, #540]	; (db740 <_Z5canimiib+0x520>)
        strip.setPixelColor(inpix+44,0,gclock,bclock);
        strip.setPixelColor(inpix+9,0,0,0);
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
   db524:	f003 faec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db528:	4884      	ldr	r0, [pc, #528]	; (db73c <_Z5canimiib+0x51c>)
   db52a:	f003 f947 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db52e:	6037      	str	r7, [r6, #0]
   db530:	6833      	ldr	r3, [r6, #0]
   db532:	2b31      	cmp	r3, #49	; 0x31
   db534:	dc11      	bgt.n	db55a <_Z5canimiib+0x33a>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db536:	2000      	movs	r0, #0
   db538:	f005 fe92 	bl	e1260 <digitalRead>
   db53c:	b948      	cbnz	r0, db552 <_Z5canimiib+0x332>
   db53e:	2001      	movs	r0, #1
   db540:	f005 fe8e 	bl	e1260 <digitalRead>
   db544:	b928      	cbnz	r0, db552 <_Z5canimiib+0x332>
   db546:	2002      	movs	r0, #2
   db548:	f005 fe8a 	bl	e1260 <digitalRead>
   db54c:	2800      	cmp	r0, #0
   db54e:	f001 8152 	beq.w	dc7f6 <_Z5canimiib+0x15d6>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db552:	6833      	ldr	r3, [r6, #0]
   db554:	3301      	adds	r3, #1
   db556:	6033      	str	r3, [r6, #0]
   db558:	e7ea      	b.n	db530 <_Z5canimiib+0x310>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
   db55a:	f8df b1d8 	ldr.w	fp, [pc, #472]	; db734 <_Z5canimiib+0x514>
   db55e:	4877      	ldr	r0, [pc, #476]	; (db73c <_Z5canimiib+0x51c>)
   db560:	f89b 2000 	ldrb.w	r2, [fp]
   db564:	f104 030b 	add.w	r3, r4, #11
   db568:	b29b      	uxth	r3, r3
   db56a:	9307      	str	r3, [sp, #28]
   db56c:	9907      	ldr	r1, [sp, #28]
   db56e:	782b      	ldrb	r3, [r5, #0]
   db570:	9200      	str	r2, [sp, #0]
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   db572:	f104 061a 	add.w	r6, r4, #26
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
   db576:	2200      	movs	r2, #0
   db578:	f003 fac2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   db57c:	b2b6      	uxth	r6, r6
   db57e:	f89b 2000 	ldrb.w	r2, [fp]
   db582:	782b      	ldrb	r3, [r5, #0]
   db584:	486d      	ldr	r0, [pc, #436]	; (db73c <_Z5canimiib+0x51c>)
   db586:	9200      	str	r2, [sp, #0]
   db588:	4631      	mov	r1, r6
   db58a:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db58c:	f104 072b 	add.w	r7, r4, #43	; 0x2b
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   db590:	f003 fab6 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db594:	b2bf      	uxth	r7, r7
   db596:	f89b 2000 	ldrb.w	r2, [fp]
   db59a:	782b      	ldrb	r3, [r5, #0]
   db59c:	4867      	ldr	r0, [pc, #412]	; (db73c <_Z5canimiib+0x51c>)
   db59e:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+12,0,0,0);
   db5a0:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db5a2:	2200      	movs	r2, #0
   db5a4:	4639      	mov	r1, r7
   db5a6:	f003 faab 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   db5aa:	462b      	mov	r3, r5
   db5ac:	462a      	mov	r2, r5
   db5ae:	4641      	mov	r1, r8
   db5b0:	9500      	str	r5, [sp, #0]
   db5b2:	4862      	ldr	r0, [pc, #392]	; (db73c <_Z5canimiib+0x51c>)
   db5b4:	f003 faa4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
   db5b8:	462b      	mov	r3, r5
   db5ba:	462a      	mov	r2, r5
   db5bc:	9500      	str	r5, [sp, #0]
   db5be:	4649      	mov	r1, r9
   db5c0:	485e      	ldr	r0, [pc, #376]	; (db73c <_Z5canimiib+0x51c>)
   db5c2:	f003 fa9d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
   db5c6:	462b      	mov	r3, r5
   db5c8:	462a      	mov	r2, r5
   db5ca:	9500      	str	r5, [sp, #0]
   db5cc:	4651      	mov	r1, sl
   db5ce:	485b      	ldr	r0, [pc, #364]	; (db73c <_Z5canimiib+0x51c>)
   db5d0:	f003 fa96 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db5d4:	4859      	ldr	r0, [pc, #356]	; (db73c <_Z5canimiib+0x51c>)
   db5d6:	f003 f8f1 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db5da:	4b59      	ldr	r3, [pc, #356]	; (db740 <_Z5canimiib+0x520>)
   db5dc:	601d      	str	r5, [r3, #0]
   db5de:	4698      	mov	r8, r3
   db5e0:	461d      	mov	r5, r3
   db5e2:	682b      	ldr	r3, [r5, #0]
   db5e4:	2b31      	cmp	r3, #49	; 0x31
   db5e6:	dc13      	bgt.n	db610 <_Z5canimiib+0x3f0>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db5e8:	2000      	movs	r0, #0
   db5ea:	f005 fe39 	bl	e1260 <digitalRead>
   db5ee:	b948      	cbnz	r0, db604 <_Z5canimiib+0x3e4>
   db5f0:	2001      	movs	r0, #1
   db5f2:	f005 fe35 	bl	e1260 <digitalRead>
   db5f6:	b928      	cbnz	r0, db604 <_Z5canimiib+0x3e4>
   db5f8:	2002      	movs	r0, #2
   db5fa:	f005 fe31 	bl	e1260 <digitalRead>
   db5fe:	2800      	cmp	r0, #0
   db600:	f001 80fe 	beq.w	dc800 <_Z5canimiib+0x15e0>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db604:	f8d8 3000 	ldr.w	r3, [r8]
   db608:	3301      	adds	r3, #1
   db60a:	f8c8 3000 	str.w	r3, [r8]
   db60e:	e7e8      	b.n	db5e2 <_Z5canimiib+0x3c2>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        if(tmr)
   db610:	9b03      	ldr	r3, [sp, #12]
   db612:	b373      	cbz	r3, db672 <_Z5canimiib+0x452>
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   db614:	f8df 811c 	ldr.w	r8, [pc, #284]	; db734 <_Z5canimiib+0x514>
   db618:	f8df a114 	ldr.w	sl, [pc, #276]	; db730 <_Z5canimiib+0x510>
   db61c:	f8df 9118 	ldr.w	r9, [pc, #280]	; db738 <_Z5canimiib+0x518>
   db620:	f8d8 1000 	ldr.w	r1, [r8]
   db624:	f8da 3000 	ldr.w	r3, [sl]
   db628:	f8d9 2000 	ldr.w	r2, [r9]
   db62c:	4843      	ldr	r0, [pc, #268]	; (db73c <_Z5canimiib+0x51c>)
   db62e:	2502      	movs	r5, #2
   db630:	fb91 f1f5 	sdiv	r1, r1, r5
   db634:	b2c9      	uxtb	r1, r1
   db636:	fb93 f3f5 	sdiv	r3, r3, r5
   db63a:	fb92 f2f5 	sdiv	r2, r2, r5
   db63e:	9100      	str	r1, [sp, #0]
   db640:	b2db      	uxtb	r3, r3
   db642:	b2d2      	uxtb	r2, r2
   db644:	213a      	movs	r1, #58	; 0x3a
   db646:	f003 fa5b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   db64a:	f8d8 1000 	ldr.w	r1, [r8]
   db64e:	f8da 3000 	ldr.w	r3, [sl]
   db652:	f8d9 2000 	ldr.w	r2, [r9]
   db656:	fb93 f3f5 	sdiv	r3, r3, r5
   db65a:	fb92 f2f5 	sdiv	r2, r2, r5
   db65e:	fb91 f5f5 	sdiv	r5, r1, r5
   db662:	b2ed      	uxtb	r5, r5
   db664:	9500      	str	r5, [sp, #0]
   db666:	b2db      	uxtb	r3, r3
   db668:	b2d2      	uxtb	r2, r2
   db66a:	213e      	movs	r1, #62	; 0x3e
   db66c:	4833      	ldr	r0, [pc, #204]	; (db73c <_Z5canimiib+0x51c>)
   db66e:	f003 fa47 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   db672:	f8df 90c0 	ldr.w	r9, [pc, #192]	; db734 <_Z5canimiib+0x514>
   db676:	f8df 80b8 	ldr.w	r8, [pc, #184]	; db730 <_Z5canimiib+0x510>
   db67a:	f899 2000 	ldrb.w	r2, [r9]
   db67e:	f898 3000 	ldrb.w	r3, [r8]
   db682:	482e      	ldr	r0, [pc, #184]	; (db73c <_Z5canimiib+0x51c>)
   db684:	9200      	str	r2, [sp, #0]
   db686:	f104 0a0a 	add.w	sl, r4, #10
   db68a:	fa1f fa8a 	uxth.w	sl, sl
   db68e:	2200      	movs	r2, #0
   db690:	4651      	mov	r1, sl
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db692:	f104 0b19 	add.w	fp, r4, #25
        if(tmr)
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   db696:	f003 fa33 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db69a:	fa1f fb8b 	uxth.w	fp, fp
   db69e:	f899 2000 	ldrb.w	r2, [r9]
   db6a2:	f898 3000 	ldrb.w	r3, [r8]
   db6a6:	4825      	ldr	r0, [pc, #148]	; (db73c <_Z5canimiib+0x51c>)
   db6a8:	9200      	str	r2, [sp, #0]
   db6aa:	4659      	mov	r1, fp
   db6ac:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db6ae:	342a      	adds	r4, #42	; 0x2a
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db6b0:	f003 fa26 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db6b4:	b2a4      	uxth	r4, r4
   db6b6:	f899 2000 	ldrb.w	r2, [r9]
   db6ba:	f898 3000 	ldrb.w	r3, [r8]
   db6be:	481f      	ldr	r0, [pc, #124]	; (db73c <_Z5canimiib+0x51c>)
   db6c0:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   db6c2:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db6c4:	2200      	movs	r2, #0
   db6c6:	4621      	mov	r1, r4
   db6c8:	f003 fa1a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   db6cc:	462b      	mov	r3, r5
   db6ce:	462a      	mov	r2, r5
   db6d0:	9500      	str	r5, [sp, #0]
   db6d2:	9907      	ldr	r1, [sp, #28]
   db6d4:	4819      	ldr	r0, [pc, #100]	; (db73c <_Z5canimiib+0x51c>)
   db6d6:	f003 fa13 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db6da:	462b      	mov	r3, r5
   db6dc:	462a      	mov	r2, r5
   db6de:	9500      	str	r5, [sp, #0]
   db6e0:	4631      	mov	r1, r6
   db6e2:	4816      	ldr	r0, [pc, #88]	; (db73c <_Z5canimiib+0x51c>)
   db6e4:	f003 fa0c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
   db6e8:	462b      	mov	r3, r5
   db6ea:	462a      	mov	r2, r5
   db6ec:	9500      	str	r5, [sp, #0]
   db6ee:	4639      	mov	r1, r7
   db6f0:	4812      	ldr	r0, [pc, #72]	; (db73c <_Z5canimiib+0x51c>)
   db6f2:	f003 fa05 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db6f6:	4811      	ldr	r0, [pc, #68]	; (db73c <_Z5canimiib+0x51c>)
   db6f8:	f003 f860 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db6fc:	4b10      	ldr	r3, [pc, #64]	; (db740 <_Z5canimiib+0x520>)
   db6fe:	601d      	str	r5, [r3, #0]
   db700:	461d      	mov	r5, r3
   db702:	682b      	ldr	r3, [r5, #0]
   db704:	4e0e      	ldr	r6, [pc, #56]	; (db740 <_Z5canimiib+0x520>)
   db706:	2b31      	cmp	r3, #49	; 0x31
   db708:	dc1c      	bgt.n	db744 <_Z5canimiib+0x524>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db70a:	2000      	movs	r0, #0
   db70c:	f005 fda8 	bl	e1260 <digitalRead>
   db710:	b948      	cbnz	r0, db726 <_Z5canimiib+0x506>
   db712:	2001      	movs	r0, #1
   db714:	f005 fda4 	bl	e1260 <digitalRead>
   db718:	b928      	cbnz	r0, db726 <_Z5canimiib+0x506>
   db71a:	2002      	movs	r0, #2
   db71c:	f005 fda0 	bl	e1260 <digitalRead>
   db720:	2800      	cmp	r0, #0
   db722:	f001 8072 	beq.w	dc80a <_Z5canimiib+0x15ea>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db726:	682b      	ldr	r3, [r5, #0]
   db728:	3301      	adds	r3, #1
   db72a:	602b      	str	r3, [r5, #0]
   db72c:	e7e9      	b.n	db702 <_Z5canimiib+0x4e2>
   db72e:	bf00      	nop
   db730:	2003e314 	.word	0x2003e314
   db734:	2003e35c 	.word	0x2003e35c
   db738:	2003e354 	.word	0x2003e354
   db73c:	2003e31c 	.word	0x2003e31c
   db740:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
   db744:	f899 2000 	ldrb.w	r2, [r9]
   db748:	f898 3000 	ldrb.w	r3, [r8]
   db74c:	9904      	ldr	r1, [sp, #16]
   db74e:	9200      	str	r2, [sp, #0]
   db750:	4881      	ldr	r0, [pc, #516]	; (db958 <_Z5canimiib+0x738>)
   db752:	2200      	movs	r2, #0
   db754:	f003 f9d4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
   db758:	f899 2000 	ldrb.w	r2, [r9]
   db75c:	f898 3000 	ldrb.w	r3, [r8]
   db760:	9905      	ldr	r1, [sp, #20]
   db762:	9200      	str	r2, [sp, #0]
   db764:	487c      	ldr	r0, [pc, #496]	; (db958 <_Z5canimiib+0x738>)
   db766:	2200      	movs	r2, #0
   db768:	f003 f9ca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   db76c:	f899 2000 	ldrb.w	r2, [r9]
   db770:	f898 3000 	ldrb.w	r3, [r8]
   db774:	9906      	ldr	r1, [sp, #24]
   db776:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   db778:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   db77a:	2200      	movs	r2, #0
   db77c:	4876      	ldr	r0, [pc, #472]	; (db958 <_Z5canimiib+0x738>)
   db77e:	f003 f9bf 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   db782:	462b      	mov	r3, r5
   db784:	462a      	mov	r2, r5
   db786:	4651      	mov	r1, sl
   db788:	4873      	ldr	r0, [pc, #460]	; (db958 <_Z5canimiib+0x738>)
   db78a:	9500      	str	r5, [sp, #0]
   db78c:	f003 f9b8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
   db790:	462b      	mov	r3, r5
   db792:	462a      	mov	r2, r5
   db794:	4659      	mov	r1, fp
   db796:	4870      	ldr	r0, [pc, #448]	; (db958 <_Z5canimiib+0x738>)
   db798:	9500      	str	r5, [sp, #0]
   db79a:	f003 f9b1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
   db79e:	4621      	mov	r1, r4
   db7a0:	462b      	mov	r3, r5
   db7a2:	462a      	mov	r2, r5
   db7a4:	486c      	ldr	r0, [pc, #432]	; (db958 <_Z5canimiib+0x738>)
   db7a6:	9500      	str	r5, [sp, #0]
   db7a8:	f003 f9aa 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db7ac:	486a      	ldr	r0, [pc, #424]	; (db958 <_Z5canimiib+0x738>)
   db7ae:	f003 f805 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   db7b2:	4634      	mov	r4, r6
        for(i=0; i<50; i++)
   db7b4:	6035      	str	r5, [r6, #0]
   db7b6:	6833      	ldr	r3, [r6, #0]
   db7b8:	2b31      	cmp	r3, #49	; 0x31
   db7ba:	f301 805d 	bgt.w	dc878 <_Z5canimiib+0x1658>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db7be:	2000      	movs	r0, #0
   db7c0:	f005 fd4e 	bl	e1260 <digitalRead>
   db7c4:	b948      	cbnz	r0, db7da <_Z5canimiib+0x5ba>
   db7c6:	2001      	movs	r0, #1
   db7c8:	f005 fd4a 	bl	e1260 <digitalRead>
   db7cc:	b928      	cbnz	r0, db7da <_Z5canimiib+0x5ba>
   db7ce:	2002      	movs	r0, #2
   db7d0:	f005 fd46 	bl	e1260 <digitalRead>
   db7d4:	2800      	cmp	r0, #0
   db7d6:	f001 801d 	beq.w	dc814 <_Z5canimiib+0x15f4>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db7da:	6823      	ldr	r3, [r4, #0]
   db7dc:	3301      	adds	r3, #1
   db7de:	6023      	str	r3, [r4, #0]
   db7e0:	e7e9      	b.n	db7b6 <_Z5canimiib+0x596>
            {
                delay(5);
            }
        }
    }
    else if(cnum > 499 && cnum < 533)
   db7e2:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   db7e6:	2b20      	cmp	r3, #32
   db7e8:	f200 828c 	bhi.w	dbd04 <_Z5canimiib+0xae4>
    {
        if(tmr)
   db7ec:	9b03      	ldr	r3, [sp, #12]
   db7ee:	4d5b      	ldr	r5, [pc, #364]	; (db95c <_Z5canimiib+0x73c>)
   db7f0:	b18b      	cbz	r3, db816 <_Z5canimiib+0x5f6>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   db7f2:	4e5b      	ldr	r6, [pc, #364]	; (db960 <_Z5canimiib+0x740>)
   db7f4:	4f5b      	ldr	r7, [pc, #364]	; (db964 <_Z5canimiib+0x744>)
   db7f6:	7831      	ldrb	r1, [r6, #0]
   db7f8:	782b      	ldrb	r3, [r5, #0]
   db7fa:	783a      	ldrb	r2, [r7, #0]
   db7fc:	4856      	ldr	r0, [pc, #344]	; (db958 <_Z5canimiib+0x738>)
   db7fe:	9100      	str	r1, [sp, #0]
   db800:	213a      	movs	r1, #58	; 0x3a
   db802:	f003 f97d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   db806:	7831      	ldrb	r1, [r6, #0]
   db808:	782b      	ldrb	r3, [r5, #0]
   db80a:	783a      	ldrb	r2, [r7, #0]
   db80c:	4852      	ldr	r0, [pc, #328]	; (db958 <_Z5canimiib+0x738>)
   db80e:	9100      	str	r1, [sp, #0]
   db810:	213e      	movs	r1, #62	; 0x3e
   db812:	f003 f975 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   db816:	b2a4      	uxth	r4, r4
   db818:	4e51      	ldr	r6, [pc, #324]	; (db960 <_Z5canimiib+0x740>)
   db81a:	682b      	ldr	r3, [r5, #0]
   db81c:	7832      	ldrb	r2, [r6, #0]
   db81e:	9200      	str	r2, [sp, #0]
   db820:	f104 070c 	add.w	r7, r4, #12
   db824:	b2bf      	uxth	r7, r7
   db826:	f04f 0b03 	mov.w	fp, #3
   db82a:	2200      	movs	r2, #0
   db82c:	4639      	mov	r1, r7
   db82e:	484a      	ldr	r0, [pc, #296]	; (db958 <_Z5canimiib+0x738>)
   db830:	fb93 f3fb 	sdiv	r3, r3, fp
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db834:	f104 0816 	add.w	r8, r4, #22
        if(tmr)
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   db838:	b2db      	uxtb	r3, r3
   db83a:	f003 f961 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db83e:	fa1f f888 	uxth.w	r8, r8
   db842:	7832      	ldrb	r2, [r6, #0]
   db844:	682b      	ldr	r3, [r5, #0]
   db846:	4844      	ldr	r0, [pc, #272]	; (db958 <_Z5canimiib+0x738>)
   db848:	9200      	str	r2, [sp, #0]
   db84a:	4641      	mov	r1, r8
   db84c:	2200      	movs	r2, #0
   db84e:	fb93 f3fb 	sdiv	r3, r3, fp
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db852:	f104 091b 	add.w	r9, r4, #27
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db856:	b2db      	uxtb	r3, r3
   db858:	f003 f952 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db85c:	fa1f f989 	uxth.w	r9, r9
   db860:	7832      	ldrb	r2, [r6, #0]
   db862:	682b      	ldr	r3, [r5, #0]
   db864:	483c      	ldr	r0, [pc, #240]	; (db958 <_Z5canimiib+0x738>)
   db866:	9200      	str	r2, [sp, #0]
   db868:	4649      	mov	r1, r9
   db86a:	2200      	movs	r2, #0
   db86c:	fb93 f3fb 	sdiv	r3, r3, fp
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
   db870:	f104 0a25 	add.w	sl, r4, #37	; 0x25
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db874:	b2db      	uxtb	r3, r3
   db876:	f003 f943 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
   db87a:	fa1f fa8a 	uxth.w	sl, sl
   db87e:	7832      	ldrb	r2, [r6, #0]
   db880:	682b      	ldr	r3, [r5, #0]
   db882:	4835      	ldr	r0, [pc, #212]	; (db958 <_Z5canimiib+0x738>)
   db884:	9200      	str	r2, [sp, #0]
   db886:	4651      	mov	r1, sl
   db888:	2200      	movs	r2, #0
   db88a:	fb93 f3fb 	sdiv	r3, r3, fp
   db88e:	b2db      	uxtb	r3, r3
   db890:	f003 f936 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,gclock/3,bclock);
   db894:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   db898:	b29b      	uxth	r3, r3
   db89a:	7832      	ldrb	r2, [r6, #0]
   db89c:	9304      	str	r3, [sp, #16]
   db89e:	9904      	ldr	r1, [sp, #16]
   db8a0:	682b      	ldr	r3, [r5, #0]
   db8a2:	482d      	ldr	r0, [pc, #180]	; (db958 <_Z5canimiib+0x738>)
   db8a4:	9200      	str	r2, [sp, #0]
   db8a6:	fb93 f3fb 	sdiv	r3, r3, fp
   db8aa:	2200      	movs	r2, #0
   db8ac:	b2db      	uxtb	r3, r3
   db8ae:	f003 f927 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   db8b2:	f104 0309 	add.w	r3, r4, #9
   db8b6:	b29b      	uxth	r3, r3
   db8b8:	2600      	movs	r6, #0
   db8ba:	9305      	str	r3, [sp, #20]
   db8bc:	4632      	mov	r2, r6
   db8be:	4633      	mov	r3, r6
   db8c0:	9600      	str	r6, [sp, #0]
   db8c2:	9905      	ldr	r1, [sp, #20]
   db8c4:	4824      	ldr	r0, [pc, #144]	; (db958 <_Z5canimiib+0x738>)
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db8c6:	4d28      	ldr	r5, [pc, #160]	; (db968 <_Z5canimiib+0x748>)
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock/3,bclock);
        strip.setPixelColor(inpix+9,0,0,0);
   db8c8:	f003 f91a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   db8cc:	f104 0315 	add.w	r3, r4, #21
   db8d0:	b29b      	uxth	r3, r3
   db8d2:	9306      	str	r3, [sp, #24]
   db8d4:	4632      	mov	r2, r6
   db8d6:	4633      	mov	r3, r6
   db8d8:	9600      	str	r6, [sp, #0]
   db8da:	9906      	ldr	r1, [sp, #24]
   db8dc:	481e      	ldr	r0, [pc, #120]	; (db958 <_Z5canimiib+0x738>)
   db8de:	f003 f90f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   db8e2:	f104 031c 	add.w	r3, r4, #28
   db8e6:	b29b      	uxth	r3, r3
   db8e8:	9307      	str	r3, [sp, #28]
   db8ea:	4632      	mov	r2, r6
   db8ec:	4633      	mov	r3, r6
   db8ee:	9600      	str	r6, [sp, #0]
   db8f0:	9907      	ldr	r1, [sp, #28]
   db8f2:	4819      	ldr	r0, [pc, #100]	; (db958 <_Z5canimiib+0x738>)
   db8f4:	f003 f904 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   db8f8:	f104 0324 	add.w	r3, r4, #36	; 0x24
   db8fc:	b29b      	uxth	r3, r3
   db8fe:	9308      	str	r3, [sp, #32]
   db900:	4632      	mov	r2, r6
   db902:	4633      	mov	r3, r6
   db904:	9600      	str	r6, [sp, #0]
   db906:	9908      	ldr	r1, [sp, #32]
   db908:	4813      	ldr	r0, [pc, #76]	; (db958 <_Z5canimiib+0x738>)
   db90a:	f003 f8f9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   db90e:	f104 0329 	add.w	r3, r4, #41	; 0x29
   db912:	b29b      	uxth	r3, r3
   db914:	9309      	str	r3, [sp, #36]	; 0x24
   db916:	4632      	mov	r2, r6
   db918:	4633      	mov	r3, r6
   db91a:	9600      	str	r6, [sp, #0]
   db91c:	9909      	ldr	r1, [sp, #36]	; 0x24
   db91e:	480e      	ldr	r0, [pc, #56]	; (db958 <_Z5canimiib+0x738>)
   db920:	f003 f8ee 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db924:	480c      	ldr	r0, [pc, #48]	; (db958 <_Z5canimiib+0x738>)
   db926:	f002 ff49 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db92a:	602e      	str	r6, [r5, #0]
   db92c:	462e      	mov	r6, r5
   db92e:	682b      	ldr	r3, [r5, #0]
   db930:	2b31      	cmp	r3, #49	; 0x31
   db932:	dc1b      	bgt.n	db96c <_Z5canimiib+0x74c>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db934:	2000      	movs	r0, #0
   db936:	f005 fc93 	bl	e1260 <digitalRead>
   db93a:	b948      	cbnz	r0, db950 <_Z5canimiib+0x730>
   db93c:	2001      	movs	r0, #1
   db93e:	f005 fc8f 	bl	e1260 <digitalRead>
   db942:	b928      	cbnz	r0, db950 <_Z5canimiib+0x730>
   db944:	2002      	movs	r0, #2
   db946:	f005 fc8b 	bl	e1260 <digitalRead>
   db94a:	2800      	cmp	r0, #0
   db94c:	f000 8767 	beq.w	dc81e <_Z5canimiib+0x15fe>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db950:	6833      	ldr	r3, [r6, #0]
   db952:	3301      	adds	r3, #1
   db954:	6033      	str	r3, [r6, #0]
   db956:	e7ea      	b.n	db92e <_Z5canimiib+0x70e>
   db958:	2003e31c 	.word	0x2003e31c
   db95c:	2003e314 	.word	0x2003e314
   db960:	2003e35c 	.word	0x2003e35c
   db964:	2003e354 	.word	0x2003e354
   db968:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
   db96c:	4ea3      	ldr	r6, [pc, #652]	; (dbbfc <_Z5canimiib+0x9dc>)
   db96e:	4da4      	ldr	r5, [pc, #656]	; (dbc00 <_Z5canimiib+0x9e0>)
   db970:	7832      	ldrb	r2, [r6, #0]
   db972:	48a4      	ldr	r0, [pc, #656]	; (dbc04 <_Z5canimiib+0x9e4>)
   db974:	f104 030b 	add.w	r3, r4, #11
   db978:	b29b      	uxth	r3, r3
   db97a:	930a      	str	r3, [sp, #40]	; 0x28
   db97c:	f04f 0b03 	mov.w	fp, #3
   db980:	682b      	ldr	r3, [r5, #0]
   db982:	990a      	ldr	r1, [sp, #40]	; 0x28
   db984:	9200      	str	r2, [sp, #0]
   db986:	fb93 f3fb 	sdiv	r3, r3, fp
   db98a:	2200      	movs	r2, #0
   db98c:	b2db      	uxtb	r3, r3
   db98e:	f003 f8b7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
   db992:	f104 0313 	add.w	r3, r4, #19
   db996:	b29b      	uxth	r3, r3
   db998:	7832      	ldrb	r2, [r6, #0]
   db99a:	930b      	str	r3, [sp, #44]	; 0x2c
   db99c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   db99e:	682b      	ldr	r3, [r5, #0]
   db9a0:	4898      	ldr	r0, [pc, #608]	; (dbc04 <_Z5canimiib+0x9e4>)
   db9a2:	9200      	str	r2, [sp, #0]
   db9a4:	fb93 f3fb 	sdiv	r3, r3, fp
   db9a8:	2200      	movs	r2, #0
   db9aa:	b2db      	uxtb	r3, r3
   db9ac:	f003 f8a8 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
   db9b0:	f104 031a 	add.w	r3, r4, #26
   db9b4:	b29b      	uxth	r3, r3
   db9b6:	7832      	ldrb	r2, [r6, #0]
   db9b8:	930c      	str	r3, [sp, #48]	; 0x30
   db9ba:	990c      	ldr	r1, [sp, #48]	; 0x30
   db9bc:	682b      	ldr	r3, [r5, #0]
   db9be:	4891      	ldr	r0, [pc, #580]	; (dbc04 <_Z5canimiib+0x9e4>)
   db9c0:	9200      	str	r2, [sp, #0]
   db9c2:	fb93 f3fb 	sdiv	r3, r3, fp
   db9c6:	2200      	movs	r2, #0
   db9c8:	b2db      	uxtb	r3, r3
   db9ca:	f003 f899 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
   db9ce:	f104 0326 	add.w	r3, r4, #38	; 0x26
   db9d2:	b29b      	uxth	r3, r3
   db9d4:	7832      	ldrb	r2, [r6, #0]
   db9d6:	930d      	str	r3, [sp, #52]	; 0x34
   db9d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   db9da:	682b      	ldr	r3, [r5, #0]
   db9dc:	4889      	ldr	r0, [pc, #548]	; (dbc04 <_Z5canimiib+0x9e4>)
   db9de:	9200      	str	r2, [sp, #0]
   db9e0:	fb93 f3fb 	sdiv	r3, r3, fp
   db9e4:	2200      	movs	r2, #0
   db9e6:	b2db      	uxtb	r3, r3
   db9e8:	f003 f88a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   db9ec:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   db9f0:	b29b      	uxth	r3, r3
   db9f2:	7832      	ldrb	r2, [r6, #0]
   db9f4:	930e      	str	r3, [sp, #56]	; 0x38
        strip.setPixelColor(inpix+12,0,0,0);
   db9f6:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   db9f8:	682b      	ldr	r3, [r5, #0]
   db9fa:	990e      	ldr	r1, [sp, #56]	; 0x38
   db9fc:	9200      	str	r2, [sp, #0]
   db9fe:	4881      	ldr	r0, [pc, #516]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba00:	fb93 f3fb 	sdiv	r3, r3, fp
   dba04:	2200      	movs	r2, #0
   dba06:	b2db      	uxtb	r3, r3
   dba08:	f003 f87a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   dba0c:	4633      	mov	r3, r6
   dba0e:	4632      	mov	r2, r6
   dba10:	9600      	str	r6, [sp, #0]
   dba12:	4639      	mov	r1, r7
   dba14:	487b      	ldr	r0, [pc, #492]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba16:	f003 f873 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   dba1a:	4633      	mov	r3, r6
   dba1c:	4632      	mov	r2, r6
   dba1e:	9600      	str	r6, [sp, #0]
   dba20:	4641      	mov	r1, r8
   dba22:	4878      	ldr	r0, [pc, #480]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba24:	f003 f86c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   dba28:	4633      	mov	r3, r6
   dba2a:	4632      	mov	r2, r6
   dba2c:	9600      	str	r6, [sp, #0]
   dba2e:	4649      	mov	r1, r9
   dba30:	4874      	ldr	r0, [pc, #464]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba32:	f003 f865 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   dba36:	4633      	mov	r3, r6
   dba38:	4632      	mov	r2, r6
   dba3a:	9600      	str	r6, [sp, #0]
   dba3c:	4651      	mov	r1, sl
   dba3e:	4871      	ldr	r0, [pc, #452]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba40:	f003 f85e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   dba44:	4633      	mov	r3, r6
   dba46:	4632      	mov	r2, r6
   dba48:	9600      	str	r6, [sp, #0]
   dba4a:	9904      	ldr	r1, [sp, #16]
   dba4c:	486d      	ldr	r0, [pc, #436]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba4e:	f003 f857 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dba52:	486c      	ldr	r0, [pc, #432]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba54:	f002 feb2 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dba58:	4b6b      	ldr	r3, [pc, #428]	; (dbc08 <_Z5canimiib+0x9e8>)
   dba5a:	601e      	str	r6, [r3, #0]
   dba5c:	461e      	mov	r6, r3
   dba5e:	6833      	ldr	r3, [r6, #0]
   dba60:	2b31      	cmp	r3, #49	; 0x31
   dba62:	dc11      	bgt.n	dba88 <_Z5canimiib+0x868>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dba64:	2000      	movs	r0, #0
   dba66:	f005 fbfb 	bl	e1260 <digitalRead>
   dba6a:	b948      	cbnz	r0, dba80 <_Z5canimiib+0x860>
   dba6c:	2001      	movs	r0, #1
   dba6e:	f005 fbf7 	bl	e1260 <digitalRead>
   dba72:	b928      	cbnz	r0, dba80 <_Z5canimiib+0x860>
   dba74:	2002      	movs	r0, #2
   dba76:	f005 fbf3 	bl	e1260 <digitalRead>
   dba7a:	2800      	cmp	r0, #0
   dba7c:	f000 86d4 	beq.w	dc828 <_Z5canimiib+0x1608>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dba80:	6833      	ldr	r3, [r6, #0]
   dba82:	3301      	adds	r3, #1
   dba84:	6033      	str	r3, [r6, #0]
   dba86:	e7ea      	b.n	dba5e <_Z5canimiib+0x83e>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        if(tmr)
   dba88:	9b03      	ldr	r3, [sp, #12]
   dba8a:	b33b      	cbz	r3, dbadc <_Z5canimiib+0x8bc>
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   dba8c:	4f5b      	ldr	r7, [pc, #364]	; (dbbfc <_Z5canimiib+0x9dc>)
   dba8e:	f8df 817c 	ldr.w	r8, [pc, #380]	; dbc0c <_Z5canimiib+0x9ec>
   dba92:	6839      	ldr	r1, [r7, #0]
   dba94:	682b      	ldr	r3, [r5, #0]
   dba96:	f8d8 2000 	ldr.w	r2, [r8]
   dba9a:	485a      	ldr	r0, [pc, #360]	; (dbc04 <_Z5canimiib+0x9e4>)
   dba9c:	2602      	movs	r6, #2
   dba9e:	fb91 f1f6 	sdiv	r1, r1, r6
   dbaa2:	b2c9      	uxtb	r1, r1
   dbaa4:	fb93 f3f6 	sdiv	r3, r3, r6
   dbaa8:	fb92 f2f6 	sdiv	r2, r2, r6
   dbaac:	9100      	str	r1, [sp, #0]
   dbaae:	b2db      	uxtb	r3, r3
   dbab0:	b2d2      	uxtb	r2, r2
   dbab2:	213a      	movs	r1, #58	; 0x3a
   dbab4:	f003 f824 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   dbab8:	6839      	ldr	r1, [r7, #0]
   dbaba:	682b      	ldr	r3, [r5, #0]
   dbabc:	f8d8 2000 	ldr.w	r2, [r8]
   dbac0:	fb93 f3f6 	sdiv	r3, r3, r6
   dbac4:	fb92 f2f6 	sdiv	r2, r2, r6
   dbac8:	fb91 f6f6 	sdiv	r6, r1, r6
   dbacc:	b2f6      	uxtb	r6, r6
   dbace:	9600      	str	r6, [sp, #0]
   dbad0:	b2db      	uxtb	r3, r3
   dbad2:	b2d2      	uxtb	r2, r2
   dbad4:	213e      	movs	r1, #62	; 0x3e
   dbad6:	484b      	ldr	r0, [pc, #300]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbad8:	f003 f812 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
   dbadc:	4e47      	ldr	r6, [pc, #284]	; (dbbfc <_Z5canimiib+0x9dc>)
   dbade:	4d48      	ldr	r5, [pc, #288]	; (dbc00 <_Z5canimiib+0x9e0>)
   dbae0:	7832      	ldrb	r2, [r6, #0]
   dbae2:	4848      	ldr	r0, [pc, #288]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbae4:	f104 030a 	add.w	r3, r4, #10
   dbae8:	b29b      	uxth	r3, r3
   dbaea:	9303      	str	r3, [sp, #12]
   dbaec:	2703      	movs	r7, #3
   dbaee:	682b      	ldr	r3, [r5, #0]
   dbaf0:	9903      	ldr	r1, [sp, #12]
   dbaf2:	fb93 f3f7 	sdiv	r3, r3, r7
   dbaf6:	9200      	str	r2, [sp, #0]
   dbaf8:	b2db      	uxtb	r3, r3
   dbafa:	2200      	movs	r2, #0
   dbafc:	f003 f800 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   dbb00:	f104 0314 	add.w	r3, r4, #20
   dbb04:	b29b      	uxth	r3, r3
   dbb06:	9304      	str	r3, [sp, #16]
   dbb08:	7832      	ldrb	r2, [r6, #0]
   dbb0a:	682b      	ldr	r3, [r5, #0]
   dbb0c:	9904      	ldr	r1, [sp, #16]
   dbb0e:	fb93 f3f7 	sdiv	r3, r3, r7
   dbb12:	9200      	str	r2, [sp, #0]
   dbb14:	b2db      	uxtb	r3, r3
   dbb16:	2200      	movs	r2, #0
   dbb18:	483a      	ldr	r0, [pc, #232]	; (dbc04 <_Z5canimiib+0x9e4>)
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   dbb1a:	f104 0919 	add.w	r9, r4, #25
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   dbb1e:	f002 ffef 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   dbb22:	fa1f f989 	uxth.w	r9, r9
   dbb26:	7832      	ldrb	r2, [r6, #0]
   dbb28:	682b      	ldr	r3, [r5, #0]
   dbb2a:	4836      	ldr	r0, [pc, #216]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb2c:	fb93 f3f7 	sdiv	r3, r3, r7
   dbb30:	9200      	str	r2, [sp, #0]
   dbb32:	b2db      	uxtb	r3, r3
   dbb34:	2200      	movs	r2, #0
   dbb36:	4649      	mov	r1, r9
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   dbb38:	f104 0a23 	add.w	sl, r4, #35	; 0x23
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   dbb3c:	f002 ffe0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   dbb40:	fa1f fa8a 	uxth.w	sl, sl
   dbb44:	7832      	ldrb	r2, [r6, #0]
   dbb46:	682b      	ldr	r3, [r5, #0]
   dbb48:	482e      	ldr	r0, [pc, #184]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb4a:	fb93 f3f7 	sdiv	r3, r3, r7
   dbb4e:	9200      	str	r2, [sp, #0]
   dbb50:	b2db      	uxtb	r3, r3
   dbb52:	2200      	movs	r2, #0
   dbb54:	4651      	mov	r1, sl
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   dbb56:	342a      	adds	r4, #42	; 0x2a
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   dbb58:	f002 ffd2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   dbb5c:	b2a4      	uxth	r4, r4
   dbb5e:	7832      	ldrb	r2, [r6, #0]
   dbb60:	682b      	ldr	r3, [r5, #0]
   dbb62:	4828      	ldr	r0, [pc, #160]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb64:	fb93 f3f7 	sdiv	r3, r3, r7
   dbb68:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   dbb6a:	2700      	movs	r7, #0
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   dbb6c:	b2db      	uxtb	r3, r3
   dbb6e:	2200      	movs	r2, #0
   dbb70:	4621      	mov	r1, r4
   dbb72:	f002 ffc5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   dbb76:	463b      	mov	r3, r7
   dbb78:	463a      	mov	r2, r7
   dbb7a:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbb7c:	4821      	ldr	r0, [pc, #132]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb7e:	9700      	str	r7, [sp, #0]
   dbb80:	f002 ffbe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   dbb84:	463b      	mov	r3, r7
   dbb86:	463a      	mov	r2, r7
   dbb88:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dbb8a:	481e      	ldr	r0, [pc, #120]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb8c:	9700      	str	r7, [sp, #0]
   dbb8e:	f002 ffb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   dbb92:	463b      	mov	r3, r7
   dbb94:	463a      	mov	r2, r7
   dbb96:	990c      	ldr	r1, [sp, #48]	; 0x30
   dbb98:	481a      	ldr	r0, [pc, #104]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbb9a:	9700      	str	r7, [sp, #0]
   dbb9c:	f002 ffb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   dbba0:	463b      	mov	r3, r7
   dbba2:	463a      	mov	r2, r7
   dbba4:	990d      	ldr	r1, [sp, #52]	; 0x34
   dbba6:	4817      	ldr	r0, [pc, #92]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbba8:	9700      	str	r7, [sp, #0]
   dbbaa:	f002 ffa9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   dbbae:	463b      	mov	r3, r7
   dbbb0:	463a      	mov	r2, r7
   dbbb2:	990e      	ldr	r1, [sp, #56]	; 0x38
   dbbb4:	4813      	ldr	r0, [pc, #76]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbbb6:	9700      	str	r7, [sp, #0]
   dbbb8:	f002 ffa2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbbbc:	4811      	ldr	r0, [pc, #68]	; (dbc04 <_Z5canimiib+0x9e4>)
   dbbbe:	f002 fdfd 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dbbc2:	4b11      	ldr	r3, [pc, #68]	; (dbc08 <_Z5canimiib+0x9e8>)
   dbbc4:	601f      	str	r7, [r3, #0]
   dbbc6:	4698      	mov	r8, r3
   dbbc8:	469b      	mov	fp, r3
   dbbca:	f8d8 3000 	ldr.w	r3, [r8]
   dbbce:	4f0e      	ldr	r7, [pc, #56]	; (dbc08 <_Z5canimiib+0x9e8>)
   dbbd0:	2b31      	cmp	r3, #49	; 0x31
   dbbd2:	dc1d      	bgt.n	dbc10 <_Z5canimiib+0x9f0>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbbd4:	2000      	movs	r0, #0
   dbbd6:	f005 fb43 	bl	e1260 <digitalRead>
   dbbda:	b948      	cbnz	r0, dbbf0 <_Z5canimiib+0x9d0>
   dbbdc:	2001      	movs	r0, #1
   dbbde:	f005 fb3f 	bl	e1260 <digitalRead>
   dbbe2:	b928      	cbnz	r0, dbbf0 <_Z5canimiib+0x9d0>
   dbbe4:	2002      	movs	r0, #2
   dbbe6:	f005 fb3b 	bl	e1260 <digitalRead>
   dbbea:	2800      	cmp	r0, #0
   dbbec:	f000 8621 	beq.w	dc832 <_Z5canimiib+0x1612>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbbf0:	f8db 3000 	ldr.w	r3, [fp]
   dbbf4:	3301      	adds	r3, #1
   dbbf6:	f8cb 3000 	str.w	r3, [fp]
   dbbfa:	e7e6      	b.n	dbbca <_Z5canimiib+0x9aa>
   dbbfc:	2003e35c 	.word	0x2003e35c
   dbc00:	2003e314 	.word	0x2003e314
   dbc04:	2003e31c 	.word	0x2003e31c
   dbc08:	2003e33c 	.word	0x2003e33c
   dbc0c:	2003e354 	.word	0x2003e354
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
   dbc10:	7832      	ldrb	r2, [r6, #0]
   dbc12:	682b      	ldr	r3, [r5, #0]
   dbc14:	9905      	ldr	r1, [sp, #20]
   dbc16:	9200      	str	r2, [sp, #0]
   dbc18:	f04f 0803 	mov.w	r8, #3
   dbc1c:	2200      	movs	r2, #0
   dbc1e:	4838      	ldr	r0, [pc, #224]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc20:	fb93 f3f8 	sdiv	r3, r3, r8
   dbc24:	b2db      	uxtb	r3, r3
   dbc26:	f002 ff6b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
   dbc2a:	7832      	ldrb	r2, [r6, #0]
   dbc2c:	682b      	ldr	r3, [r5, #0]
   dbc2e:	9906      	ldr	r1, [sp, #24]
   dbc30:	9200      	str	r2, [sp, #0]
   dbc32:	4833      	ldr	r0, [pc, #204]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc34:	fb93 f3f8 	sdiv	r3, r3, r8
   dbc38:	2200      	movs	r2, #0
   dbc3a:	b2db      	uxtb	r3, r3
   dbc3c:	f002 ff60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
   dbc40:	7832      	ldrb	r2, [r6, #0]
   dbc42:	682b      	ldr	r3, [r5, #0]
   dbc44:	9907      	ldr	r1, [sp, #28]
   dbc46:	9200      	str	r2, [sp, #0]
   dbc48:	482d      	ldr	r0, [pc, #180]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc4a:	fb93 f3f8 	sdiv	r3, r3, r8
   dbc4e:	2200      	movs	r2, #0
   dbc50:	b2db      	uxtb	r3, r3
   dbc52:	f002 ff55 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
   dbc56:	7832      	ldrb	r2, [r6, #0]
   dbc58:	682b      	ldr	r3, [r5, #0]
   dbc5a:	9908      	ldr	r1, [sp, #32]
   dbc5c:	9200      	str	r2, [sp, #0]
   dbc5e:	4828      	ldr	r0, [pc, #160]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc60:	fb93 f3f8 	sdiv	r3, r3, r8
   dbc64:	2200      	movs	r2, #0
   dbc66:	b2db      	uxtb	r3, r3
   dbc68:	f002 ff4a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   dbc6c:	7832      	ldrb	r2, [r6, #0]
   dbc6e:	682b      	ldr	r3, [r5, #0]
   dbc70:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbc72:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dbc74:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   dbc76:	2200      	movs	r2, #0
   dbc78:	4821      	ldr	r0, [pc, #132]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc7a:	fb93 f3f8 	sdiv	r3, r3, r8
   dbc7e:	b2db      	uxtb	r3, r3
   dbc80:	f002 ff3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dbc84:	462b      	mov	r3, r5
   dbc86:	462a      	mov	r2, r5
   dbc88:	9903      	ldr	r1, [sp, #12]
   dbc8a:	481d      	ldr	r0, [pc, #116]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc8c:	9500      	str	r5, [sp, #0]
   dbc8e:	f002 ff37 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   dbc92:	462b      	mov	r3, r5
   dbc94:	462a      	mov	r2, r5
   dbc96:	9904      	ldr	r1, [sp, #16]
   dbc98:	4819      	ldr	r0, [pc, #100]	; (dbd00 <_Z5canimiib+0xae0>)
   dbc9a:	9500      	str	r5, [sp, #0]
   dbc9c:	f002 ff30 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   dbca0:	462b      	mov	r3, r5
   dbca2:	462a      	mov	r2, r5
   dbca4:	4649      	mov	r1, r9
   dbca6:	4816      	ldr	r0, [pc, #88]	; (dbd00 <_Z5canimiib+0xae0>)
   dbca8:	9500      	str	r5, [sp, #0]
   dbcaa:	f002 ff29 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   dbcae:	462b      	mov	r3, r5
   dbcb0:	462a      	mov	r2, r5
   dbcb2:	4651      	mov	r1, sl
   dbcb4:	4812      	ldr	r0, [pc, #72]	; (dbd00 <_Z5canimiib+0xae0>)
   dbcb6:	9500      	str	r5, [sp, #0]
   dbcb8:	f002 ff22 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   dbcbc:	4621      	mov	r1, r4
   dbcbe:	462b      	mov	r3, r5
   dbcc0:	462a      	mov	r2, r5
   dbcc2:	480f      	ldr	r0, [pc, #60]	; (dbd00 <_Z5canimiib+0xae0>)
   dbcc4:	9500      	str	r5, [sp, #0]
   dbcc6:	f002 ff1b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbcca:	480d      	ldr	r0, [pc, #52]	; (dbd00 <_Z5canimiib+0xae0>)
   dbccc:	f002 fd76 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   dbcd0:	463c      	mov	r4, r7
        for(i=0; i<50; i++)
   dbcd2:	603d      	str	r5, [r7, #0]
   dbcd4:	683b      	ldr	r3, [r7, #0]
   dbcd6:	2b31      	cmp	r3, #49	; 0x31
   dbcd8:	f300 85ce 	bgt.w	dc878 <_Z5canimiib+0x1658>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbcdc:	2000      	movs	r0, #0
   dbcde:	f005 fabf 	bl	e1260 <digitalRead>
   dbce2:	b948      	cbnz	r0, dbcf8 <_Z5canimiib+0xad8>
   dbce4:	2001      	movs	r0, #1
   dbce6:	f005 fabb 	bl	e1260 <digitalRead>
   dbcea:	b928      	cbnz	r0, dbcf8 <_Z5canimiib+0xad8>
   dbcec:	2002      	movs	r0, #2
   dbcee:	f005 fab7 	bl	e1260 <digitalRead>
   dbcf2:	2800      	cmp	r0, #0
   dbcf4:	f000 85a2 	beq.w	dc83c <_Z5canimiib+0x161c>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbcf8:	6823      	ldr	r3, [r4, #0]
   dbcfa:	3301      	adds	r3, #1
   dbcfc:	6023      	str	r3, [r4, #0]
   dbcfe:	e7e9      	b.n	dbcd4 <_Z5canimiib+0xab4>
   dbd00:	2003e31c 	.word	0x2003e31c
            {
                delay(5);
            }
        }
    }
    else if(cnum > 599 && cnum < 630)
   dbd04:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   dbd08:	281d      	cmp	r0, #29
   dbd0a:	f200 84e4 	bhi.w	dc6d6 <_Z5canimiib+0x14b6>
    {
        if(tmr)
   dbd0e:	9b03      	ldr	r3, [sp, #12]
   dbd10:	4da3      	ldr	r5, [pc, #652]	; (dbfa0 <_Z5canimiib+0xd80>)
   dbd12:	b18b      	cbz	r3, dbd38 <_Z5canimiib+0xb18>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   dbd14:	4ea3      	ldr	r6, [pc, #652]	; (dbfa4 <_Z5canimiib+0xd84>)
   dbd16:	4fa4      	ldr	r7, [pc, #656]	; (dbfa8 <_Z5canimiib+0xd88>)
   dbd18:	7831      	ldrb	r1, [r6, #0]
   dbd1a:	782b      	ldrb	r3, [r5, #0]
   dbd1c:	783a      	ldrb	r2, [r7, #0]
   dbd1e:	48a3      	ldr	r0, [pc, #652]	; (dbfac <_Z5canimiib+0xd8c>)
   dbd20:	9100      	str	r1, [sp, #0]
   dbd22:	213a      	movs	r1, #58	; 0x3a
   dbd24:	f002 feec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   dbd28:	7831      	ldrb	r1, [r6, #0]
   dbd2a:	782b      	ldrb	r3, [r5, #0]
   dbd2c:	783a      	ldrb	r2, [r7, #0]
   dbd2e:	489f      	ldr	r0, [pc, #636]	; (dbfac <_Z5canimiib+0xd8c>)
   dbd30:	9100      	str	r1, [sp, #0]
   dbd32:	213e      	movs	r1, #62	; 0x3e
   dbd34:	f002 fee4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+12,rclock*1.5,gclock*1.5,bclock*1.8);
   dbd38:	6828      	ldr	r0, [r5, #0]
   dbd3a:	4f9b      	ldr	r7, [pc, #620]	; (dbfa8 <_Z5canimiib+0xd88>)
   dbd3c:	4e99      	ldr	r6, [pc, #612]	; (dbfa4 <_Z5canimiib+0xd84>)
   dbd3e:	f005 fdcb 	bl	e18d8 <__aeabi_i2d>
   dbd42:	2200      	movs	r2, #0
   dbd44:	4b9a      	ldr	r3, [pc, #616]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbd46:	f005 fe2d 	bl	e19a4 <__aeabi_dmul>
   dbd4a:	f006 f8ed 	bl	e1f28 <__aeabi_d2uiz>
   dbd4e:	fa5f fa80 	uxtb.w	sl, r0
   dbd52:	6838      	ldr	r0, [r7, #0]
   dbd54:	f005 fdc0 	bl	e18d8 <__aeabi_i2d>
   dbd58:	2200      	movs	r2, #0
   dbd5a:	4b95      	ldr	r3, [pc, #596]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbd5c:	f005 fe22 	bl	e19a4 <__aeabi_dmul>
   dbd60:	f006 f8e2 	bl	e1f28 <__aeabi_d2uiz>
   dbd64:	fa5f f980 	uxtb.w	r9, r0
   dbd68:	6830      	ldr	r0, [r6, #0]
   dbd6a:	f005 fdb5 	bl	e18d8 <__aeabi_i2d>
   dbd6e:	a38a      	add	r3, pc, #552	; (adr r3, dbf98 <_Z5canimiib+0xd78>)
   dbd70:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd74:	f005 fe16 	bl	e19a4 <__aeabi_dmul>
   dbd78:	f006 f8d6 	bl	e1f28 <__aeabi_d2uiz>
   dbd7c:	b2a4      	uxth	r4, r4
   dbd7e:	f104 080c 	add.w	r8, r4, #12
   dbd82:	b2c0      	uxtb	r0, r0
   dbd84:	fa1f f888 	uxth.w	r8, r8
   dbd88:	4653      	mov	r3, sl
   dbd8a:	464a      	mov	r2, r9
   dbd8c:	9000      	str	r0, [sp, #0]
   dbd8e:	4641      	mov	r1, r8
   dbd90:	4886      	ldr	r0, [pc, #536]	; (dbfac <_Z5canimiib+0xd8c>)
   dbd92:	f002 feb5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock*1.5,gclock*1.5,bclock*1.8);
   dbd96:	6828      	ldr	r0, [r5, #0]
   dbd98:	f005 fd9e 	bl	e18d8 <__aeabi_i2d>
   dbd9c:	2200      	movs	r2, #0
   dbd9e:	4b84      	ldr	r3, [pc, #528]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbda0:	f005 fe00 	bl	e19a4 <__aeabi_dmul>
   dbda4:	f006 f8c0 	bl	e1f28 <__aeabi_d2uiz>
   dbda8:	fa5f fa80 	uxtb.w	sl, r0
   dbdac:	6838      	ldr	r0, [r7, #0]
   dbdae:	f005 fd93 	bl	e18d8 <__aeabi_i2d>
   dbdb2:	2200      	movs	r2, #0
   dbdb4:	4b7e      	ldr	r3, [pc, #504]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbdb6:	f005 fdf5 	bl	e19a4 <__aeabi_dmul>
   dbdba:	f006 f8b5 	bl	e1f28 <__aeabi_d2uiz>
   dbdbe:	fa5f f980 	uxtb.w	r9, r0
   dbdc2:	6830      	ldr	r0, [r6, #0]
   dbdc4:	f005 fd88 	bl	e18d8 <__aeabi_i2d>
   dbdc8:	a373      	add	r3, pc, #460	; (adr r3, dbf98 <_Z5canimiib+0xd78>)
   dbdca:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbdce:	f005 fde9 	bl	e19a4 <__aeabi_dmul>
   dbdd2:	f006 f8a9 	bl	e1f28 <__aeabi_d2uiz>
   dbdd6:	f104 0b16 	add.w	fp, r4, #22
   dbdda:	b2c0      	uxtb	r0, r0
   dbddc:	fa1f fb8b 	uxth.w	fp, fp
   dbde0:	464a      	mov	r2, r9
   dbde2:	4653      	mov	r3, sl
   dbde4:	9000      	str	r0, [sp, #0]
   dbde6:	4659      	mov	r1, fp
   dbde8:	4870      	ldr	r0, [pc, #448]	; (dbfac <_Z5canimiib+0xd8c>)
   dbdea:	f002 fe89 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,rclock*1.5,gclock*1.5,bclock*1.8);
   dbdee:	f104 031b 	add.w	r3, r4, #27
   dbdf2:	6828      	ldr	r0, [r5, #0]
   dbdf4:	b29b      	uxth	r3, r3
   dbdf6:	9304      	str	r3, [sp, #16]
   dbdf8:	f005 fd6e 	bl	e18d8 <__aeabi_i2d>
   dbdfc:	2200      	movs	r2, #0
   dbdfe:	4b6c      	ldr	r3, [pc, #432]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbe00:	f005 fdd0 	bl	e19a4 <__aeabi_dmul>
   dbe04:	f006 f890 	bl	e1f28 <__aeabi_d2uiz>
   dbe08:	fa5f fa80 	uxtb.w	sl, r0
   dbe0c:	6838      	ldr	r0, [r7, #0]
   dbe0e:	f005 fd63 	bl	e18d8 <__aeabi_i2d>
   dbe12:	2200      	movs	r2, #0
   dbe14:	4b66      	ldr	r3, [pc, #408]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbe16:	f005 fdc5 	bl	e19a4 <__aeabi_dmul>
   dbe1a:	f006 f885 	bl	e1f28 <__aeabi_d2uiz>
   dbe1e:	fa5f f980 	uxtb.w	r9, r0
   dbe22:	6830      	ldr	r0, [r6, #0]
   dbe24:	f005 fd58 	bl	e18d8 <__aeabi_i2d>
   dbe28:	a35b      	add	r3, pc, #364	; (adr r3, dbf98 <_Z5canimiib+0xd78>)
   dbe2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe2e:	f005 fdb9 	bl	e19a4 <__aeabi_dmul>
   dbe32:	f006 f879 	bl	e1f28 <__aeabi_d2uiz>
   dbe36:	b2c0      	uxtb	r0, r0
   dbe38:	464a      	mov	r2, r9
   dbe3a:	4653      	mov	r3, sl
   dbe3c:	9000      	str	r0, [sp, #0]
   dbe3e:	9904      	ldr	r1, [sp, #16]
   dbe40:	485a      	ldr	r0, [pc, #360]	; (dbfac <_Z5canimiib+0xd8c>)
   dbe42:	f002 fe5d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,rclock*1.5,gclock*1.5,bclock*1.8);
   dbe46:	f104 0325 	add.w	r3, r4, #37	; 0x25
   dbe4a:	6828      	ldr	r0, [r5, #0]
   dbe4c:	b29b      	uxth	r3, r3
   dbe4e:	9305      	str	r3, [sp, #20]
   dbe50:	f005 fd42 	bl	e18d8 <__aeabi_i2d>
   dbe54:	2200      	movs	r2, #0
   dbe56:	4b56      	ldr	r3, [pc, #344]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbe58:	f005 fda4 	bl	e19a4 <__aeabi_dmul>
   dbe5c:	f006 f864 	bl	e1f28 <__aeabi_d2uiz>
   dbe60:	fa5f fa80 	uxtb.w	sl, r0
   dbe64:	6838      	ldr	r0, [r7, #0]
   dbe66:	f005 fd37 	bl	e18d8 <__aeabi_i2d>
   dbe6a:	2200      	movs	r2, #0
   dbe6c:	4b50      	ldr	r3, [pc, #320]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbe6e:	f005 fd99 	bl	e19a4 <__aeabi_dmul>
   dbe72:	f006 f859 	bl	e1f28 <__aeabi_d2uiz>
   dbe76:	fa5f f980 	uxtb.w	r9, r0
   dbe7a:	6830      	ldr	r0, [r6, #0]
   dbe7c:	f005 fd2c 	bl	e18d8 <__aeabi_i2d>
   dbe80:	a345      	add	r3, pc, #276	; (adr r3, dbf98 <_Z5canimiib+0xd78>)
   dbe82:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe86:	f005 fd8d 	bl	e19a4 <__aeabi_dmul>
   dbe8a:	f006 f84d 	bl	e1f28 <__aeabi_d2uiz>
   dbe8e:	b2c0      	uxtb	r0, r0
   dbe90:	464a      	mov	r2, r9
   dbe92:	9000      	str	r0, [sp, #0]
   dbe94:	4653      	mov	r3, sl
   dbe96:	9905      	ldr	r1, [sp, #20]
   dbe98:	4844      	ldr	r0, [pc, #272]	; (dbfac <_Z5canimiib+0xd8c>)
   dbe9a:	f002 fe31 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,rclock*1.5,gclock*1.5,bclock*1.8);
   dbe9e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   dbea2:	6828      	ldr	r0, [r5, #0]
   dbea4:	b29b      	uxth	r3, r3
   dbea6:	9306      	str	r3, [sp, #24]
   dbea8:	f005 fd16 	bl	e18d8 <__aeabi_i2d>
   dbeac:	2200      	movs	r2, #0
   dbeae:	4b40      	ldr	r3, [pc, #256]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbeb0:	f005 fd78 	bl	e19a4 <__aeabi_dmul>
   dbeb4:	f006 f838 	bl	e1f28 <__aeabi_d2uiz>
   dbeb8:	b2c5      	uxtb	r5, r0
   dbeba:	6838      	ldr	r0, [r7, #0]
   dbebc:	f005 fd0c 	bl	e18d8 <__aeabi_i2d>
   dbec0:	2200      	movs	r2, #0
   dbec2:	4b3b      	ldr	r3, [pc, #236]	; (dbfb0 <_Z5canimiib+0xd90>)
   dbec4:	f005 fd6e 	bl	e19a4 <__aeabi_dmul>
   dbec8:	f006 f82e 	bl	e1f28 <__aeabi_d2uiz>
   dbecc:	b2c7      	uxtb	r7, r0
   dbece:	6830      	ldr	r0, [r6, #0]
   dbed0:	f005 fd02 	bl	e18d8 <__aeabi_i2d>
   dbed4:	a330      	add	r3, pc, #192	; (adr r3, dbf98 <_Z5canimiib+0xd78>)
   dbed6:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeda:	f005 fd63 	bl	e19a4 <__aeabi_dmul>
   dbede:	f006 f823 	bl	e1f28 <__aeabi_d2uiz>
   dbee2:	b2c0      	uxtb	r0, r0
   dbee4:	462b      	mov	r3, r5
   dbee6:	9000      	str	r0, [sp, #0]
   dbee8:	463a      	mov	r2, r7
   dbeea:	9906      	ldr	r1, [sp, #24]
   dbeec:	482f      	ldr	r0, [pc, #188]	; (dbfac <_Z5canimiib+0xd8c>)
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbeee:	4d31      	ldr	r5, [pc, #196]	; (dbfb4 <_Z5canimiib+0xd94>)
        }
        strip.setPixelColor(inpix+12,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+22,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+27,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+37,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+44,rclock*1.5,gclock*1.5,bclock*1.8);
   dbef0:	f002 fe06 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   dbef4:	f104 0309 	add.w	r3, r4, #9
   dbef8:	b29b      	uxth	r3, r3
   dbefa:	2600      	movs	r6, #0
   dbefc:	9307      	str	r3, [sp, #28]
   dbefe:	4632      	mov	r2, r6
   dbf00:	4633      	mov	r3, r6
   dbf02:	9600      	str	r6, [sp, #0]
   dbf04:	9907      	ldr	r1, [sp, #28]
   dbf06:	4829      	ldr	r0, [pc, #164]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf08:	f002 fdfa 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   dbf0c:	f104 0315 	add.w	r3, r4, #21
   dbf10:	b29b      	uxth	r3, r3
   dbf12:	9308      	str	r3, [sp, #32]
   dbf14:	4632      	mov	r2, r6
   dbf16:	4633      	mov	r3, r6
   dbf18:	9600      	str	r6, [sp, #0]
   dbf1a:	9908      	ldr	r1, [sp, #32]
   dbf1c:	4823      	ldr	r0, [pc, #140]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf1e:	f002 fdef 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   dbf22:	f104 031c 	add.w	r3, r4, #28
   dbf26:	b29b      	uxth	r3, r3
   dbf28:	9309      	str	r3, [sp, #36]	; 0x24
   dbf2a:	4632      	mov	r2, r6
   dbf2c:	4633      	mov	r3, r6
   dbf2e:	9600      	str	r6, [sp, #0]
   dbf30:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbf32:	481e      	ldr	r0, [pc, #120]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf34:	f002 fde4 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   dbf38:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dbf3c:	b29b      	uxth	r3, r3
   dbf3e:	930a      	str	r3, [sp, #40]	; 0x28
   dbf40:	4632      	mov	r2, r6
   dbf42:	4633      	mov	r3, r6
   dbf44:	9600      	str	r6, [sp, #0]
   dbf46:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbf48:	4818      	ldr	r0, [pc, #96]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf4a:	f002 fdd9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   dbf4e:	f104 0329 	add.w	r3, r4, #41	; 0x29
   dbf52:	b29b      	uxth	r3, r3
   dbf54:	930b      	str	r3, [sp, #44]	; 0x2c
   dbf56:	4632      	mov	r2, r6
   dbf58:	4633      	mov	r3, r6
   dbf5a:	9600      	str	r6, [sp, #0]
   dbf5c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dbf5e:	4813      	ldr	r0, [pc, #76]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf60:	f002 fdce 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbf64:	4811      	ldr	r0, [pc, #68]	; (dbfac <_Z5canimiib+0xd8c>)
   dbf66:	f002 fc29 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dbf6a:	602e      	str	r6, [r5, #0]
   dbf6c:	462e      	mov	r6, r5
   dbf6e:	682b      	ldr	r3, [r5, #0]
   dbf70:	2b31      	cmp	r3, #49	; 0x31
   dbf72:	dc21      	bgt.n	dbfb8 <_Z5canimiib+0xd98>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbf74:	2000      	movs	r0, #0
   dbf76:	f005 f973 	bl	e1260 <digitalRead>
   dbf7a:	b948      	cbnz	r0, dbf90 <_Z5canimiib+0xd70>
   dbf7c:	2001      	movs	r0, #1
   dbf7e:	f005 f96f 	bl	e1260 <digitalRead>
   dbf82:	b928      	cbnz	r0, dbf90 <_Z5canimiib+0xd70>
   dbf84:	2002      	movs	r0, #2
   dbf86:	f005 f96b 	bl	e1260 <digitalRead>
   dbf8a:	2800      	cmp	r0, #0
   dbf8c:	f000 845b 	beq.w	dc846 <_Z5canimiib+0x1626>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbf90:	6833      	ldr	r3, [r6, #0]
   dbf92:	3301      	adds	r3, #1
   dbf94:	6033      	str	r3, [r6, #0]
   dbf96:	e7ea      	b.n	dbf6e <_Z5canimiib+0xd4e>
   dbf98:	cccccccd 	.word	0xcccccccd
   dbf9c:	3ffccccc 	.word	0x3ffccccc
   dbfa0:	2003e314 	.word	0x2003e314
   dbfa4:	2003e35c 	.word	0x2003e35c
   dbfa8:	2003e354 	.word	0x2003e354
   dbfac:	2003e31c 	.word	0x2003e31c
   dbfb0:	3ff80000 	.word	0x3ff80000
   dbfb4:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
   dbfb8:	4d91      	ldr	r5, [pc, #580]	; (dc200 <_Z5canimiib+0xfe0>)
   dbfba:	4f92      	ldr	r7, [pc, #584]	; (dc204 <_Z5canimiib+0xfe4>)
   dbfbc:	6828      	ldr	r0, [r5, #0]
   dbfbe:	4e92      	ldr	r6, [pc, #584]	; (dc208 <_Z5canimiib+0xfe8>)
   dbfc0:	f104 030b 	add.w	r3, r4, #11
   dbfc4:	b29b      	uxth	r3, r3
   dbfc6:	930c      	str	r3, [sp, #48]	; 0x30
   dbfc8:	f005 fc86 	bl	e18d8 <__aeabi_i2d>
   dbfcc:	2200      	movs	r2, #0
   dbfce:	4b8f      	ldr	r3, [pc, #572]	; (dc20c <_Z5canimiib+0xfec>)
   dbfd0:	f005 fce8 	bl	e19a4 <__aeabi_dmul>
   dbfd4:	f005 ffa8 	bl	e1f28 <__aeabi_d2uiz>
   dbfd8:	fa5f fa80 	uxtb.w	sl, r0
   dbfdc:	6838      	ldr	r0, [r7, #0]
   dbfde:	f005 fc7b 	bl	e18d8 <__aeabi_i2d>
   dbfe2:	2200      	movs	r2, #0
   dbfe4:	4b89      	ldr	r3, [pc, #548]	; (dc20c <_Z5canimiib+0xfec>)
   dbfe6:	f005 fcdd 	bl	e19a4 <__aeabi_dmul>
   dbfea:	f005 ff9d 	bl	e1f28 <__aeabi_d2uiz>
   dbfee:	fa5f f980 	uxtb.w	r9, r0
   dbff2:	6830      	ldr	r0, [r6, #0]
   dbff4:	f005 fc70 	bl	e18d8 <__aeabi_i2d>
   dbff8:	a37f      	add	r3, pc, #508	; (adr r3, dc1f8 <_Z5canimiib+0xfd8>)
   dbffa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbffe:	f005 fcd1 	bl	e19a4 <__aeabi_dmul>
   dc002:	f005 ff91 	bl	e1f28 <__aeabi_d2uiz>
   dc006:	b2c0      	uxtb	r0, r0
   dc008:	464a      	mov	r2, r9
   dc00a:	4653      	mov	r3, sl
   dc00c:	9000      	str	r0, [sp, #0]
   dc00e:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc010:	487f      	ldr	r0, [pc, #508]	; (dc210 <_Z5canimiib+0xff0>)
   dc012:	f002 fd75 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
   dc016:	f104 0313 	add.w	r3, r4, #19
   dc01a:	b29b      	uxth	r3, r3
   dc01c:	6828      	ldr	r0, [r5, #0]
   dc01e:	930d      	str	r3, [sp, #52]	; 0x34
   dc020:	f005 fc5a 	bl	e18d8 <__aeabi_i2d>
   dc024:	2200      	movs	r2, #0
   dc026:	4b79      	ldr	r3, [pc, #484]	; (dc20c <_Z5canimiib+0xfec>)
   dc028:	f005 fcbc 	bl	e19a4 <__aeabi_dmul>
   dc02c:	f005 ff7c 	bl	e1f28 <__aeabi_d2uiz>
   dc030:	fa5f fa80 	uxtb.w	sl, r0
   dc034:	6838      	ldr	r0, [r7, #0]
   dc036:	f005 fc4f 	bl	e18d8 <__aeabi_i2d>
   dc03a:	2200      	movs	r2, #0
   dc03c:	4b73      	ldr	r3, [pc, #460]	; (dc20c <_Z5canimiib+0xfec>)
   dc03e:	f005 fcb1 	bl	e19a4 <__aeabi_dmul>
   dc042:	f005 ff71 	bl	e1f28 <__aeabi_d2uiz>
   dc046:	fa5f f980 	uxtb.w	r9, r0
   dc04a:	6830      	ldr	r0, [r6, #0]
   dc04c:	f005 fc44 	bl	e18d8 <__aeabi_i2d>
   dc050:	a369      	add	r3, pc, #420	; (adr r3, dc1f8 <_Z5canimiib+0xfd8>)
   dc052:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc056:	f005 fca5 	bl	e19a4 <__aeabi_dmul>
   dc05a:	f005 ff65 	bl	e1f28 <__aeabi_d2uiz>
   dc05e:	b2c0      	uxtb	r0, r0
   dc060:	464a      	mov	r2, r9
   dc062:	4653      	mov	r3, sl
   dc064:	9000      	str	r0, [sp, #0]
   dc066:	990d      	ldr	r1, [sp, #52]	; 0x34
   dc068:	4869      	ldr	r0, [pc, #420]	; (dc210 <_Z5canimiib+0xff0>)
   dc06a:	f002 fd49 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
   dc06e:	f104 031a 	add.w	r3, r4, #26
   dc072:	b29b      	uxth	r3, r3
   dc074:	6828      	ldr	r0, [r5, #0]
   dc076:	930e      	str	r3, [sp, #56]	; 0x38
   dc078:	f005 fc2e 	bl	e18d8 <__aeabi_i2d>
   dc07c:	2200      	movs	r2, #0
   dc07e:	4b63      	ldr	r3, [pc, #396]	; (dc20c <_Z5canimiib+0xfec>)
   dc080:	f005 fc90 	bl	e19a4 <__aeabi_dmul>
   dc084:	f005 ff50 	bl	e1f28 <__aeabi_d2uiz>
   dc088:	fa5f fa80 	uxtb.w	sl, r0
   dc08c:	6838      	ldr	r0, [r7, #0]
   dc08e:	f005 fc23 	bl	e18d8 <__aeabi_i2d>
   dc092:	2200      	movs	r2, #0
   dc094:	4b5d      	ldr	r3, [pc, #372]	; (dc20c <_Z5canimiib+0xfec>)
   dc096:	f005 fc85 	bl	e19a4 <__aeabi_dmul>
   dc09a:	f005 ff45 	bl	e1f28 <__aeabi_d2uiz>
   dc09e:	fa5f f980 	uxtb.w	r9, r0
   dc0a2:	6830      	ldr	r0, [r6, #0]
   dc0a4:	f005 fc18 	bl	e18d8 <__aeabi_i2d>
   dc0a8:	a353      	add	r3, pc, #332	; (adr r3, dc1f8 <_Z5canimiib+0xfd8>)
   dc0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc0ae:	f005 fc79 	bl	e19a4 <__aeabi_dmul>
   dc0b2:	f005 ff39 	bl	e1f28 <__aeabi_d2uiz>
   dc0b6:	b2c0      	uxtb	r0, r0
   dc0b8:	464a      	mov	r2, r9
   dc0ba:	4653      	mov	r3, sl
   dc0bc:	9000      	str	r0, [sp, #0]
   dc0be:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc0c0:	4853      	ldr	r0, [pc, #332]	; (dc210 <_Z5canimiib+0xff0>)
   dc0c2:	f002 fd1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
   dc0c6:	f104 0326 	add.w	r3, r4, #38	; 0x26
   dc0ca:	b29b      	uxth	r3, r3
   dc0cc:	6828      	ldr	r0, [r5, #0]
   dc0ce:	930f      	str	r3, [sp, #60]	; 0x3c
   dc0d0:	f005 fc02 	bl	e18d8 <__aeabi_i2d>
   dc0d4:	2200      	movs	r2, #0
   dc0d6:	4b4d      	ldr	r3, [pc, #308]	; (dc20c <_Z5canimiib+0xfec>)
   dc0d8:	f005 fc64 	bl	e19a4 <__aeabi_dmul>
   dc0dc:	f005 ff24 	bl	e1f28 <__aeabi_d2uiz>
   dc0e0:	fa5f fa80 	uxtb.w	sl, r0
   dc0e4:	6838      	ldr	r0, [r7, #0]
   dc0e6:	f005 fbf7 	bl	e18d8 <__aeabi_i2d>
   dc0ea:	2200      	movs	r2, #0
   dc0ec:	4b47      	ldr	r3, [pc, #284]	; (dc20c <_Z5canimiib+0xfec>)
   dc0ee:	f005 fc59 	bl	e19a4 <__aeabi_dmul>
   dc0f2:	f005 ff19 	bl	e1f28 <__aeabi_d2uiz>
   dc0f6:	fa5f f980 	uxtb.w	r9, r0
   dc0fa:	6830      	ldr	r0, [r6, #0]
   dc0fc:	f005 fbec 	bl	e18d8 <__aeabi_i2d>
   dc100:	a33d      	add	r3, pc, #244	; (adr r3, dc1f8 <_Z5canimiib+0xfd8>)
   dc102:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc106:	f005 fc4d 	bl	e19a4 <__aeabi_dmul>
   dc10a:	f005 ff0d 	bl	e1f28 <__aeabi_d2uiz>
   dc10e:	b2c0      	uxtb	r0, r0
   dc110:	464a      	mov	r2, r9
   dc112:	4653      	mov	r3, sl
   dc114:	9000      	str	r0, [sp, #0]
   dc116:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dc118:	483d      	ldr	r0, [pc, #244]	; (dc210 <_Z5canimiib+0xff0>)
   dc11a:	f002 fcf1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   dc11e:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   dc122:	6828      	ldr	r0, [r5, #0]
   dc124:	fa1f fa83 	uxth.w	sl, r3
   dc128:	f005 fbd6 	bl	e18d8 <__aeabi_i2d>
   dc12c:	2200      	movs	r2, #0
   dc12e:	4b37      	ldr	r3, [pc, #220]	; (dc20c <_Z5canimiib+0xfec>)
   dc130:	f005 fc38 	bl	e19a4 <__aeabi_dmul>
   dc134:	f005 fef8 	bl	e1f28 <__aeabi_d2uiz>
   dc138:	fa5f f980 	uxtb.w	r9, r0
   dc13c:	6838      	ldr	r0, [r7, #0]
   dc13e:	f005 fbcb 	bl	e18d8 <__aeabi_i2d>
   dc142:	2200      	movs	r2, #0
   dc144:	4b31      	ldr	r3, [pc, #196]	; (dc20c <_Z5canimiib+0xfec>)
   dc146:	f005 fc2d 	bl	e19a4 <__aeabi_dmul>
   dc14a:	f005 feed 	bl	e1f28 <__aeabi_d2uiz>
   dc14e:	b2c7      	uxtb	r7, r0
   dc150:	6830      	ldr	r0, [r6, #0]
   dc152:	f005 fbc1 	bl	e18d8 <__aeabi_i2d>
   dc156:	a328      	add	r3, pc, #160	; (adr r3, dc1f8 <_Z5canimiib+0xfd8>)
   dc158:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc15c:	f005 fc22 	bl	e19a4 <__aeabi_dmul>
   dc160:	f005 fee2 	bl	e1f28 <__aeabi_d2uiz>
   dc164:	b2c0      	uxtb	r0, r0
        strip.setPixelColor(inpix+12,0,0,0);
   dc166:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   dc168:	9000      	str	r0, [sp, #0]
   dc16a:	464b      	mov	r3, r9
   dc16c:	463a      	mov	r2, r7
   dc16e:	4651      	mov	r1, sl
   dc170:	4827      	ldr	r0, [pc, #156]	; (dc210 <_Z5canimiib+0xff0>)
   dc172:	f002 fcc5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   dc176:	4633      	mov	r3, r6
   dc178:	4632      	mov	r2, r6
   dc17a:	9600      	str	r6, [sp, #0]
   dc17c:	4641      	mov	r1, r8
   dc17e:	4824      	ldr	r0, [pc, #144]	; (dc210 <_Z5canimiib+0xff0>)
   dc180:	f002 fcbe 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   dc184:	4633      	mov	r3, r6
   dc186:	4632      	mov	r2, r6
   dc188:	9600      	str	r6, [sp, #0]
   dc18a:	4659      	mov	r1, fp
   dc18c:	4820      	ldr	r0, [pc, #128]	; (dc210 <_Z5canimiib+0xff0>)
   dc18e:	f002 fcb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   dc192:	4633      	mov	r3, r6
   dc194:	4632      	mov	r2, r6
   dc196:	9600      	str	r6, [sp, #0]
   dc198:	9904      	ldr	r1, [sp, #16]
   dc19a:	481d      	ldr	r0, [pc, #116]	; (dc210 <_Z5canimiib+0xff0>)
   dc19c:	f002 fcb0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   dc1a0:	4633      	mov	r3, r6
   dc1a2:	4632      	mov	r2, r6
   dc1a4:	9600      	str	r6, [sp, #0]
   dc1a6:	9905      	ldr	r1, [sp, #20]
   dc1a8:	4819      	ldr	r0, [pc, #100]	; (dc210 <_Z5canimiib+0xff0>)
   dc1aa:	f002 fca9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   dc1ae:	4633      	mov	r3, r6
   dc1b0:	4632      	mov	r2, r6
   dc1b2:	9600      	str	r6, [sp, #0]
   dc1b4:	9906      	ldr	r1, [sp, #24]
   dc1b6:	4816      	ldr	r0, [pc, #88]	; (dc210 <_Z5canimiib+0xff0>)
   dc1b8:	f002 fca2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc1bc:	4814      	ldr	r0, [pc, #80]	; (dc210 <_Z5canimiib+0xff0>)
   dc1be:	f002 fafd 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc1c2:	4b14      	ldr	r3, [pc, #80]	; (dc214 <_Z5canimiib+0xff4>)
   dc1c4:	601e      	str	r6, [r3, #0]
   dc1c6:	461e      	mov	r6, r3
   dc1c8:	6833      	ldr	r3, [r6, #0]
   dc1ca:	2b31      	cmp	r3, #49	; 0x31
   dc1cc:	dc24      	bgt.n	dc218 <_Z5canimiib+0xff8>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc1ce:	2000      	movs	r0, #0
   dc1d0:	f005 f846 	bl	e1260 <digitalRead>
   dc1d4:	b948      	cbnz	r0, dc1ea <_Z5canimiib+0xfca>
   dc1d6:	2001      	movs	r0, #1
   dc1d8:	f005 f842 	bl	e1260 <digitalRead>
   dc1dc:	b928      	cbnz	r0, dc1ea <_Z5canimiib+0xfca>
   dc1de:	2002      	movs	r0, #2
   dc1e0:	f005 f83e 	bl	e1260 <digitalRead>
   dc1e4:	2800      	cmp	r0, #0
   dc1e6:	f000 8333 	beq.w	dc850 <_Z5canimiib+0x1630>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc1ea:	6833      	ldr	r3, [r6, #0]
   dc1ec:	3301      	adds	r3, #1
   dc1ee:	6033      	str	r3, [r6, #0]
   dc1f0:	e7ea      	b.n	dc1c8 <_Z5canimiib+0xfa8>
   dc1f2:	bf00      	nop
   dc1f4:	f3af 8000 	nop.w
   dc1f8:	cccccccd 	.word	0xcccccccd
   dc1fc:	3ffccccc 	.word	0x3ffccccc
   dc200:	2003e314 	.word	0x2003e314
   dc204:	2003e354 	.word	0x2003e354
   dc208:	2003e35c 	.word	0x2003e35c
   dc20c:	3ff80000 	.word	0x3ff80000
   dc210:	2003e31c 	.word	0x2003e31c
   dc214:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        if(tmr)
   dc218:	9b03      	ldr	r3, [sp, #12]
   dc21a:	b33b      	cbz	r3, dc26c <_Z5canimiib+0x104c>
        {
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   dc21c:	4fa4      	ldr	r7, [pc, #656]	; (dc4b0 <_Z5canimiib+0x1290>)
   dc21e:	f8df 829c 	ldr.w	r8, [pc, #668]	; dc4bc <_Z5canimiib+0x129c>
   dc222:	6839      	ldr	r1, [r7, #0]
   dc224:	682b      	ldr	r3, [r5, #0]
   dc226:	f8d8 2000 	ldr.w	r2, [r8]
   dc22a:	48a2      	ldr	r0, [pc, #648]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc22c:	2602      	movs	r6, #2
   dc22e:	fb91 f1f6 	sdiv	r1, r1, r6
   dc232:	b2c9      	uxtb	r1, r1
   dc234:	fb93 f3f6 	sdiv	r3, r3, r6
   dc238:	fb92 f2f6 	sdiv	r2, r2, r6
   dc23c:	9100      	str	r1, [sp, #0]
   dc23e:	b2db      	uxtb	r3, r3
   dc240:	b2d2      	uxtb	r2, r2
   dc242:	213a      	movs	r1, #58	; 0x3a
   dc244:	f002 fc5c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   dc248:	6839      	ldr	r1, [r7, #0]
   dc24a:	682b      	ldr	r3, [r5, #0]
   dc24c:	f8d8 2000 	ldr.w	r2, [r8]
   dc250:	fb93 f3f6 	sdiv	r3, r3, r6
   dc254:	fb92 f2f6 	sdiv	r2, r2, r6
   dc258:	fb91 f6f6 	sdiv	r6, r1, r6
   dc25c:	b2f6      	uxtb	r6, r6
   dc25e:	9600      	str	r6, [sp, #0]
   dc260:	b2db      	uxtb	r3, r3
   dc262:	b2d2      	uxtb	r2, r2
   dc264:	213e      	movs	r1, #62	; 0x3e
   dc266:	4893      	ldr	r0, [pc, #588]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc268:	f002 fc4a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
   dc26c:	4d92      	ldr	r5, [pc, #584]	; (dc4b8 <_Z5canimiib+0x1298>)
   dc26e:	4f93      	ldr	r7, [pc, #588]	; (dc4bc <_Z5canimiib+0x129c>)
   dc270:	6828      	ldr	r0, [r5, #0]
   dc272:	4e8f      	ldr	r6, [pc, #572]	; (dc4b0 <_Z5canimiib+0x1290>)
   dc274:	f104 030a 	add.w	r3, r4, #10
   dc278:	b29b      	uxth	r3, r3
   dc27a:	9303      	str	r3, [sp, #12]
   dc27c:	f005 fb2c 	bl	e18d8 <__aeabi_i2d>
   dc280:	2200      	movs	r2, #0
   dc282:	4b8f      	ldr	r3, [pc, #572]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc284:	f005 fb8e 	bl	e19a4 <__aeabi_dmul>
   dc288:	f005 fe4e 	bl	e1f28 <__aeabi_d2uiz>
   dc28c:	fa5f f980 	uxtb.w	r9, r0
   dc290:	6838      	ldr	r0, [r7, #0]
   dc292:	f005 fb21 	bl	e18d8 <__aeabi_i2d>
   dc296:	2200      	movs	r2, #0
   dc298:	4b89      	ldr	r3, [pc, #548]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc29a:	f005 fb83 	bl	e19a4 <__aeabi_dmul>
   dc29e:	f005 fe43 	bl	e1f28 <__aeabi_d2uiz>
   dc2a2:	fa5f f880 	uxtb.w	r8, r0
   dc2a6:	6830      	ldr	r0, [r6, #0]
   dc2a8:	f005 fb16 	bl	e18d8 <__aeabi_i2d>
   dc2ac:	a37e      	add	r3, pc, #504	; (adr r3, dc4a8 <_Z5canimiib+0x1288>)
   dc2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc2b2:	f005 fb77 	bl	e19a4 <__aeabi_dmul>
   dc2b6:	f005 fe37 	bl	e1f28 <__aeabi_d2uiz>
   dc2ba:	b2c0      	uxtb	r0, r0
   dc2bc:	4642      	mov	r2, r8
   dc2be:	464b      	mov	r3, r9
   dc2c0:	9000      	str	r0, [sp, #0]
   dc2c2:	9903      	ldr	r1, [sp, #12]
   dc2c4:	487b      	ldr	r0, [pc, #492]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc2c6:	f002 fc1b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
   dc2ca:	f104 0314 	add.w	r3, r4, #20
   dc2ce:	b29b      	uxth	r3, r3
   dc2d0:	6828      	ldr	r0, [r5, #0]
   dc2d2:	9304      	str	r3, [sp, #16]
   dc2d4:	f005 fb00 	bl	e18d8 <__aeabi_i2d>
   dc2d8:	2200      	movs	r2, #0
   dc2da:	4b79      	ldr	r3, [pc, #484]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc2dc:	f005 fb62 	bl	e19a4 <__aeabi_dmul>
   dc2e0:	f005 fe22 	bl	e1f28 <__aeabi_d2uiz>
   dc2e4:	fa5f f980 	uxtb.w	r9, r0
   dc2e8:	6838      	ldr	r0, [r7, #0]
   dc2ea:	f005 faf5 	bl	e18d8 <__aeabi_i2d>
   dc2ee:	2200      	movs	r2, #0
   dc2f0:	4b73      	ldr	r3, [pc, #460]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc2f2:	f005 fb57 	bl	e19a4 <__aeabi_dmul>
   dc2f6:	f005 fe17 	bl	e1f28 <__aeabi_d2uiz>
   dc2fa:	fa5f f880 	uxtb.w	r8, r0
   dc2fe:	6830      	ldr	r0, [r6, #0]
   dc300:	f005 faea 	bl	e18d8 <__aeabi_i2d>
   dc304:	a368      	add	r3, pc, #416	; (adr r3, dc4a8 <_Z5canimiib+0x1288>)
   dc306:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc30a:	f005 fb4b 	bl	e19a4 <__aeabi_dmul>
   dc30e:	f005 fe0b 	bl	e1f28 <__aeabi_d2uiz>
   dc312:	b2c0      	uxtb	r0, r0
   dc314:	4642      	mov	r2, r8
   dc316:	464b      	mov	r3, r9
   dc318:	9000      	str	r0, [sp, #0]
   dc31a:	9904      	ldr	r1, [sp, #16]
   dc31c:	4865      	ldr	r0, [pc, #404]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc31e:	f002 fbef 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
   dc322:	f104 0319 	add.w	r3, r4, #25
   dc326:	b29b      	uxth	r3, r3
   dc328:	6828      	ldr	r0, [r5, #0]
   dc32a:	9305      	str	r3, [sp, #20]
   dc32c:	f005 fad4 	bl	e18d8 <__aeabi_i2d>
   dc330:	2200      	movs	r2, #0
   dc332:	4b63      	ldr	r3, [pc, #396]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc334:	f005 fb36 	bl	e19a4 <__aeabi_dmul>
   dc338:	f005 fdf6 	bl	e1f28 <__aeabi_d2uiz>
   dc33c:	fa5f f980 	uxtb.w	r9, r0
   dc340:	6838      	ldr	r0, [r7, #0]
   dc342:	f005 fac9 	bl	e18d8 <__aeabi_i2d>
   dc346:	2200      	movs	r2, #0
   dc348:	4b5d      	ldr	r3, [pc, #372]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc34a:	f005 fb2b 	bl	e19a4 <__aeabi_dmul>
   dc34e:	f005 fdeb 	bl	e1f28 <__aeabi_d2uiz>
   dc352:	fa5f f880 	uxtb.w	r8, r0
   dc356:	6830      	ldr	r0, [r6, #0]
   dc358:	f005 fabe 	bl	e18d8 <__aeabi_i2d>
   dc35c:	a352      	add	r3, pc, #328	; (adr r3, dc4a8 <_Z5canimiib+0x1288>)
   dc35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc362:	f005 fb1f 	bl	e19a4 <__aeabi_dmul>
   dc366:	f005 fddf 	bl	e1f28 <__aeabi_d2uiz>
   dc36a:	b2c0      	uxtb	r0, r0
   dc36c:	464b      	mov	r3, r9
   dc36e:	4642      	mov	r2, r8
   dc370:	9000      	str	r0, [sp, #0]
   dc372:	9905      	ldr	r1, [sp, #20]
   dc374:	484f      	ldr	r0, [pc, #316]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc376:	f002 fbc3 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
   dc37a:	6828      	ldr	r0, [r5, #0]
   dc37c:	f005 faac 	bl	e18d8 <__aeabi_i2d>
   dc380:	2200      	movs	r2, #0
   dc382:	4b4f      	ldr	r3, [pc, #316]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc384:	f005 fb0e 	bl	e19a4 <__aeabi_dmul>
   dc388:	f005 fdce 	bl	e1f28 <__aeabi_d2uiz>
   dc38c:	fa5f fb80 	uxtb.w	fp, r0
   dc390:	6838      	ldr	r0, [r7, #0]
   dc392:	f005 faa1 	bl	e18d8 <__aeabi_i2d>
   dc396:	2200      	movs	r2, #0
   dc398:	4b49      	ldr	r3, [pc, #292]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc39a:	f005 fb03 	bl	e19a4 <__aeabi_dmul>
   dc39e:	f005 fdc3 	bl	e1f28 <__aeabi_d2uiz>
   dc3a2:	fa5f f980 	uxtb.w	r9, r0
   dc3a6:	6830      	ldr	r0, [r6, #0]
   dc3a8:	f005 fa96 	bl	e18d8 <__aeabi_i2d>
   dc3ac:	a33e      	add	r3, pc, #248	; (adr r3, dc4a8 <_Z5canimiib+0x1288>)
   dc3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3b2:	f005 faf7 	bl	e19a4 <__aeabi_dmul>
   dc3b6:	f005 fdb7 	bl	e1f28 <__aeabi_d2uiz>
   dc3ba:	f104 0823 	add.w	r8, r4, #35	; 0x23
   dc3be:	b2c0      	uxtb	r0, r0
   dc3c0:	fa1f f888 	uxth.w	r8, r8
   dc3c4:	464a      	mov	r2, r9
   dc3c6:	465b      	mov	r3, fp
   dc3c8:	9000      	str	r0, [sp, #0]
   dc3ca:	4641      	mov	r1, r8
   dc3cc:	4839      	ldr	r0, [pc, #228]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc3ce:	f002 fb97 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   dc3d2:	6828      	ldr	r0, [r5, #0]
   dc3d4:	f005 fa80 	bl	e18d8 <__aeabi_i2d>
   dc3d8:	2200      	movs	r2, #0
   dc3da:	4b39      	ldr	r3, [pc, #228]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc3dc:	f005 fae2 	bl	e19a4 <__aeabi_dmul>
   dc3e0:	f005 fda2 	bl	e1f28 <__aeabi_d2uiz>
   dc3e4:	342a      	adds	r4, #42	; 0x2a
   dc3e6:	fa1f f984 	uxth.w	r9, r4
   dc3ea:	b2c4      	uxtb	r4, r0
   dc3ec:	6838      	ldr	r0, [r7, #0]
   dc3ee:	f005 fa73 	bl	e18d8 <__aeabi_i2d>
   dc3f2:	2200      	movs	r2, #0
   dc3f4:	4b32      	ldr	r3, [pc, #200]	; (dc4c0 <_Z5canimiib+0x12a0>)
   dc3f6:	f005 fad5 	bl	e19a4 <__aeabi_dmul>
   dc3fa:	f005 fd95 	bl	e1f28 <__aeabi_d2uiz>
   dc3fe:	b2c7      	uxtb	r7, r0
   dc400:	6830      	ldr	r0, [r6, #0]
   dc402:	f005 fa69 	bl	e18d8 <__aeabi_i2d>
   dc406:	a328      	add	r3, pc, #160	; (adr r3, dc4a8 <_Z5canimiib+0x1288>)
   dc408:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc40c:	f005 faca 	bl	e19a4 <__aeabi_dmul>
   dc410:	f005 fd8a 	bl	e1f28 <__aeabi_d2uiz>
   dc414:	b2c0      	uxtb	r0, r0
   dc416:	4623      	mov	r3, r4
   dc418:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   dc41a:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   dc41c:	463a      	mov	r2, r7
   dc41e:	4649      	mov	r1, r9
   dc420:	4824      	ldr	r0, [pc, #144]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc422:	f002 fb6d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   dc426:	4623      	mov	r3, r4
   dc428:	4622      	mov	r2, r4
   dc42a:	9400      	str	r4, [sp, #0]
   dc42c:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc42e:	4821      	ldr	r0, [pc, #132]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc430:	f002 fb66 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   dc434:	4623      	mov	r3, r4
   dc436:	4622      	mov	r2, r4
   dc438:	9400      	str	r4, [sp, #0]
   dc43a:	990d      	ldr	r1, [sp, #52]	; 0x34
   dc43c:	481d      	ldr	r0, [pc, #116]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc43e:	f002 fb5f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   dc442:	4623      	mov	r3, r4
   dc444:	4622      	mov	r2, r4
   dc446:	9400      	str	r4, [sp, #0]
   dc448:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc44a:	481a      	ldr	r0, [pc, #104]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc44c:	f002 fb58 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   dc450:	4623      	mov	r3, r4
   dc452:	4622      	mov	r2, r4
   dc454:	9400      	str	r4, [sp, #0]
   dc456:	990f      	ldr	r1, [sp, #60]	; 0x3c
   dc458:	4816      	ldr	r0, [pc, #88]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc45a:	f002 fb51 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   dc45e:	4623      	mov	r3, r4
   dc460:	4622      	mov	r2, r4
   dc462:	9400      	str	r4, [sp, #0]
   dc464:	4651      	mov	r1, sl
   dc466:	4813      	ldr	r0, [pc, #76]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc468:	f002 fb4a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc46c:	4811      	ldr	r0, [pc, #68]	; (dc4b4 <_Z5canimiib+0x1294>)
   dc46e:	f002 f9a5 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc472:	4b14      	ldr	r3, [pc, #80]	; (dc4c4 <_Z5canimiib+0x12a4>)
   dc474:	601c      	str	r4, [r3, #0]
   dc476:	461c      	mov	r4, r3
   dc478:	6823      	ldr	r3, [r4, #0]
   dc47a:	4e12      	ldr	r6, [pc, #72]	; (dc4c4 <_Z5canimiib+0x12a4>)
   dc47c:	2b31      	cmp	r3, #49	; 0x31
   dc47e:	dc23      	bgt.n	dc4c8 <_Z5canimiib+0x12a8>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc480:	2000      	movs	r0, #0
   dc482:	f004 feed 	bl	e1260 <digitalRead>
   dc486:	b948      	cbnz	r0, dc49c <_Z5canimiib+0x127c>
   dc488:	2001      	movs	r0, #1
   dc48a:	f004 fee9 	bl	e1260 <digitalRead>
   dc48e:	b928      	cbnz	r0, dc49c <_Z5canimiib+0x127c>
   dc490:	2002      	movs	r0, #2
   dc492:	f004 fee5 	bl	e1260 <digitalRead>
   dc496:	2800      	cmp	r0, #0
   dc498:	f000 81de 	beq.w	dc858 <_Z5canimiib+0x1638>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc49c:	6823      	ldr	r3, [r4, #0]
   dc49e:	3301      	adds	r3, #1
   dc4a0:	6023      	str	r3, [r4, #0]
   dc4a2:	e7e9      	b.n	dc478 <_Z5canimiib+0x1258>
   dc4a4:	f3af 8000 	nop.w
   dc4a8:	cccccccd 	.word	0xcccccccd
   dc4ac:	3ffccccc 	.word	0x3ffccccc
   dc4b0:	2003e35c 	.word	0x2003e35c
   dc4b4:	2003e31c 	.word	0x2003e31c
   dc4b8:	2003e314 	.word	0x2003e314
   dc4bc:	2003e354 	.word	0x2003e354
   dc4c0:	3ff80000 	.word	0x3ff80000
   dc4c4:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
   dc4c8:	6828      	ldr	r0, [r5, #0]
   dc4ca:	4c9d      	ldr	r4, [pc, #628]	; (dc740 <_Z5canimiib+0x1520>)
   dc4cc:	4f9d      	ldr	r7, [pc, #628]	; (dc744 <_Z5canimiib+0x1524>)
   dc4ce:	f005 fa03 	bl	e18d8 <__aeabi_i2d>
   dc4d2:	2200      	movs	r2, #0
   dc4d4:	4b9c      	ldr	r3, [pc, #624]	; (dc748 <_Z5canimiib+0x1528>)
   dc4d6:	f005 fa65 	bl	e19a4 <__aeabi_dmul>
   dc4da:	f005 fd25 	bl	e1f28 <__aeabi_d2uiz>
   dc4de:	fa5f fb80 	uxtb.w	fp, r0
   dc4e2:	6820      	ldr	r0, [r4, #0]
   dc4e4:	f005 f9f8 	bl	e18d8 <__aeabi_i2d>
   dc4e8:	2200      	movs	r2, #0
   dc4ea:	4b97      	ldr	r3, [pc, #604]	; (dc748 <_Z5canimiib+0x1528>)
   dc4ec:	f005 fa5a 	bl	e19a4 <__aeabi_dmul>
   dc4f0:	f005 fd1a 	bl	e1f28 <__aeabi_d2uiz>
   dc4f4:	fa5f fa80 	uxtb.w	sl, r0
   dc4f8:	6838      	ldr	r0, [r7, #0]
   dc4fa:	f005 f9ed 	bl	e18d8 <__aeabi_i2d>
   dc4fe:	a38e      	add	r3, pc, #568	; (adr r3, dc738 <_Z5canimiib+0x1518>)
   dc500:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc504:	f005 fa4e 	bl	e19a4 <__aeabi_dmul>
   dc508:	f005 fd0e 	bl	e1f28 <__aeabi_d2uiz>
   dc50c:	b2c0      	uxtb	r0, r0
   dc50e:	465b      	mov	r3, fp
   dc510:	4652      	mov	r2, sl
   dc512:	9000      	str	r0, [sp, #0]
   dc514:	9907      	ldr	r1, [sp, #28]
   dc516:	488d      	ldr	r0, [pc, #564]	; (dc74c <_Z5canimiib+0x152c>)
   dc518:	f002 faf2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
   dc51c:	6828      	ldr	r0, [r5, #0]
   dc51e:	f005 f9db 	bl	e18d8 <__aeabi_i2d>
   dc522:	2200      	movs	r2, #0
   dc524:	4b88      	ldr	r3, [pc, #544]	; (dc748 <_Z5canimiib+0x1528>)
   dc526:	f005 fa3d 	bl	e19a4 <__aeabi_dmul>
   dc52a:	f005 fcfd 	bl	e1f28 <__aeabi_d2uiz>
   dc52e:	fa5f fb80 	uxtb.w	fp, r0
   dc532:	6820      	ldr	r0, [r4, #0]
   dc534:	f005 f9d0 	bl	e18d8 <__aeabi_i2d>
   dc538:	2200      	movs	r2, #0
   dc53a:	4b83      	ldr	r3, [pc, #524]	; (dc748 <_Z5canimiib+0x1528>)
   dc53c:	f005 fa32 	bl	e19a4 <__aeabi_dmul>
   dc540:	f005 fcf2 	bl	e1f28 <__aeabi_d2uiz>
   dc544:	fa5f fa80 	uxtb.w	sl, r0
   dc548:	6838      	ldr	r0, [r7, #0]
   dc54a:	f005 f9c5 	bl	e18d8 <__aeabi_i2d>
   dc54e:	a37a      	add	r3, pc, #488	; (adr r3, dc738 <_Z5canimiib+0x1518>)
   dc550:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc554:	f005 fa26 	bl	e19a4 <__aeabi_dmul>
   dc558:	f005 fce6 	bl	e1f28 <__aeabi_d2uiz>
   dc55c:	b2c0      	uxtb	r0, r0
   dc55e:	465b      	mov	r3, fp
   dc560:	4652      	mov	r2, sl
   dc562:	9000      	str	r0, [sp, #0]
   dc564:	9908      	ldr	r1, [sp, #32]
   dc566:	4879      	ldr	r0, [pc, #484]	; (dc74c <_Z5canimiib+0x152c>)
   dc568:	f002 faca 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
   dc56c:	6828      	ldr	r0, [r5, #0]
   dc56e:	f005 f9b3 	bl	e18d8 <__aeabi_i2d>
   dc572:	2200      	movs	r2, #0
   dc574:	4b74      	ldr	r3, [pc, #464]	; (dc748 <_Z5canimiib+0x1528>)
   dc576:	f005 fa15 	bl	e19a4 <__aeabi_dmul>
   dc57a:	f005 fcd5 	bl	e1f28 <__aeabi_d2uiz>
   dc57e:	fa5f fb80 	uxtb.w	fp, r0
   dc582:	6820      	ldr	r0, [r4, #0]
   dc584:	f005 f9a8 	bl	e18d8 <__aeabi_i2d>
   dc588:	2200      	movs	r2, #0
   dc58a:	4b6f      	ldr	r3, [pc, #444]	; (dc748 <_Z5canimiib+0x1528>)
   dc58c:	f005 fa0a 	bl	e19a4 <__aeabi_dmul>
   dc590:	f005 fcca 	bl	e1f28 <__aeabi_d2uiz>
   dc594:	fa5f fa80 	uxtb.w	sl, r0
   dc598:	6838      	ldr	r0, [r7, #0]
   dc59a:	f005 f99d 	bl	e18d8 <__aeabi_i2d>
   dc59e:	a366      	add	r3, pc, #408	; (adr r3, dc738 <_Z5canimiib+0x1518>)
   dc5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc5a4:	f005 f9fe 	bl	e19a4 <__aeabi_dmul>
   dc5a8:	f005 fcbe 	bl	e1f28 <__aeabi_d2uiz>
   dc5ac:	b2c0      	uxtb	r0, r0
   dc5ae:	465b      	mov	r3, fp
   dc5b0:	4652      	mov	r2, sl
   dc5b2:	9000      	str	r0, [sp, #0]
   dc5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc5b6:	4865      	ldr	r0, [pc, #404]	; (dc74c <_Z5canimiib+0x152c>)
   dc5b8:	f002 faa2 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
   dc5bc:	6828      	ldr	r0, [r5, #0]
   dc5be:	f005 f98b 	bl	e18d8 <__aeabi_i2d>
   dc5c2:	2200      	movs	r2, #0
   dc5c4:	4b60      	ldr	r3, [pc, #384]	; (dc748 <_Z5canimiib+0x1528>)
   dc5c6:	f005 f9ed 	bl	e19a4 <__aeabi_dmul>
   dc5ca:	f005 fcad 	bl	e1f28 <__aeabi_d2uiz>
   dc5ce:	fa5f fb80 	uxtb.w	fp, r0
   dc5d2:	6820      	ldr	r0, [r4, #0]
   dc5d4:	f005 f980 	bl	e18d8 <__aeabi_i2d>
   dc5d8:	2200      	movs	r2, #0
   dc5da:	4b5b      	ldr	r3, [pc, #364]	; (dc748 <_Z5canimiib+0x1528>)
   dc5dc:	f005 f9e2 	bl	e19a4 <__aeabi_dmul>
   dc5e0:	f005 fca2 	bl	e1f28 <__aeabi_d2uiz>
   dc5e4:	fa5f fa80 	uxtb.w	sl, r0
   dc5e8:	6838      	ldr	r0, [r7, #0]
   dc5ea:	f005 f975 	bl	e18d8 <__aeabi_i2d>
   dc5ee:	a352      	add	r3, pc, #328	; (adr r3, dc738 <_Z5canimiib+0x1518>)
   dc5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc5f4:	f005 f9d6 	bl	e19a4 <__aeabi_dmul>
   dc5f8:	f005 fc96 	bl	e1f28 <__aeabi_d2uiz>
   dc5fc:	b2c0      	uxtb	r0, r0
   dc5fe:	465b      	mov	r3, fp
   dc600:	4652      	mov	r2, sl
   dc602:	9000      	str	r0, [sp, #0]
   dc604:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc606:	4851      	ldr	r0, [pc, #324]	; (dc74c <_Z5canimiib+0x152c>)
   dc608:	f002 fa7a 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dc60c:	6828      	ldr	r0, [r5, #0]
   dc60e:	f005 f963 	bl	e18d8 <__aeabi_i2d>
   dc612:	2200      	movs	r2, #0
   dc614:	4b4c      	ldr	r3, [pc, #304]	; (dc748 <_Z5canimiib+0x1528>)
   dc616:	f005 f9c5 	bl	e19a4 <__aeabi_dmul>
   dc61a:	f005 fc85 	bl	e1f28 <__aeabi_d2uiz>
   dc61e:	b2c5      	uxtb	r5, r0
   dc620:	6820      	ldr	r0, [r4, #0]
   dc622:	f005 f959 	bl	e18d8 <__aeabi_i2d>
   dc626:	2200      	movs	r2, #0
   dc628:	4b47      	ldr	r3, [pc, #284]	; (dc748 <_Z5canimiib+0x1528>)
   dc62a:	f005 f9bb 	bl	e19a4 <__aeabi_dmul>
   dc62e:	f005 fc7b 	bl	e1f28 <__aeabi_d2uiz>
   dc632:	b2c4      	uxtb	r4, r0
   dc634:	6838      	ldr	r0, [r7, #0]
   dc636:	f005 f94f 	bl	e18d8 <__aeabi_i2d>
   dc63a:	a33f      	add	r3, pc, #252	; (adr r3, dc738 <_Z5canimiib+0x1518>)
   dc63c:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc640:	f005 f9b0 	bl	e19a4 <__aeabi_dmul>
   dc644:	f005 fc70 	bl	e1f28 <__aeabi_d2uiz>
   dc648:	b2c0      	uxtb	r0, r0
   dc64a:	4622      	mov	r2, r4
   dc64c:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dc64e:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dc650:	462b      	mov	r3, r5
   dc652:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dc654:	483d      	ldr	r0, [pc, #244]	; (dc74c <_Z5canimiib+0x152c>)
   dc656:	f002 fa53 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dc65a:	4623      	mov	r3, r4
   dc65c:	4622      	mov	r2, r4
   dc65e:	9400      	str	r4, [sp, #0]
   dc660:	9903      	ldr	r1, [sp, #12]
   dc662:	483a      	ldr	r0, [pc, #232]	; (dc74c <_Z5canimiib+0x152c>)
   dc664:	f002 fa4c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   dc668:	4623      	mov	r3, r4
   dc66a:	4622      	mov	r2, r4
   dc66c:	9400      	str	r4, [sp, #0]
   dc66e:	9904      	ldr	r1, [sp, #16]
   dc670:	4836      	ldr	r0, [pc, #216]	; (dc74c <_Z5canimiib+0x152c>)
   dc672:	f002 fa45 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   dc676:	4623      	mov	r3, r4
   dc678:	4622      	mov	r2, r4
   dc67a:	9400      	str	r4, [sp, #0]
   dc67c:	9905      	ldr	r1, [sp, #20]
   dc67e:	4833      	ldr	r0, [pc, #204]	; (dc74c <_Z5canimiib+0x152c>)
   dc680:	f002 fa3e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   dc684:	4623      	mov	r3, r4
   dc686:	4622      	mov	r2, r4
   dc688:	9400      	str	r4, [sp, #0]
   dc68a:	4641      	mov	r1, r8
   dc68c:	482f      	ldr	r0, [pc, #188]	; (dc74c <_Z5canimiib+0x152c>)
   dc68e:	f002 fa37 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   dc692:	4623      	mov	r3, r4
   dc694:	4622      	mov	r2, r4
   dc696:	9400      	str	r4, [sp, #0]
   dc698:	4649      	mov	r1, r9
   dc69a:	482c      	ldr	r0, [pc, #176]	; (dc74c <_Z5canimiib+0x152c>)
   dc69c:	f002 fa30 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc6a0:	482a      	ldr	r0, [pc, #168]	; (dc74c <_Z5canimiib+0x152c>)
   dc6a2:	f002 f88b 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc6a6:	6034      	str	r4, [r6, #0]
   dc6a8:	4634      	mov	r4, r6
   dc6aa:	6833      	ldr	r3, [r6, #0]
   dc6ac:	2b31      	cmp	r3, #49	; 0x31
   dc6ae:	f300 80e3 	bgt.w	dc878 <_Z5canimiib+0x1658>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc6b2:	2000      	movs	r0, #0
   dc6b4:	f004 fdd4 	bl	e1260 <digitalRead>
   dc6b8:	b948      	cbnz	r0, dc6ce <_Z5canimiib+0x14ae>
   dc6ba:	2001      	movs	r0, #1
   dc6bc:	f004 fdd0 	bl	e1260 <digitalRead>
   dc6c0:	b928      	cbnz	r0, dc6ce <_Z5canimiib+0x14ae>
   dc6c2:	2002      	movs	r0, #2
   dc6c4:	f004 fdcc 	bl	e1260 <digitalRead>
   dc6c8:	2800      	cmp	r0, #0
   dc6ca:	f000 80c9 	beq.w	dc860 <_Z5canimiib+0x1640>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc6ce:	6823      	ldr	r3, [r4, #0]
   dc6d0:	3301      	adds	r3, #1
   dc6d2:	6023      	str	r3, [r4, #0]
   dc6d4:	e7e9      	b.n	dc6aa <_Z5canimiib+0x148a>
            }
        }
    }
    else
    {
        if(tmr)
   dc6d6:	9b03      	ldr	r3, [sp, #12]
   dc6d8:	2b00      	cmp	r3, #0
   dc6da:	f000 80cd 	beq.w	dc878 <_Z5canimiib+0x1658>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   dc6de:	4f19      	ldr	r7, [pc, #100]	; (dc744 <_Z5canimiib+0x1524>)
   dc6e0:	4d1b      	ldr	r5, [pc, #108]	; (dc750 <_Z5canimiib+0x1530>)
   dc6e2:	4e17      	ldr	r6, [pc, #92]	; (dc740 <_Z5canimiib+0x1520>)
   dc6e4:	7839      	ldrb	r1, [r7, #0]
   dc6e6:	782b      	ldrb	r3, [r5, #0]
   dc6e8:	7832      	ldrb	r2, [r6, #0]
   dc6ea:	4818      	ldr	r0, [pc, #96]	; (dc74c <_Z5canimiib+0x152c>)
   dc6ec:	9100      	str	r1, [sp, #0]
   dc6ee:	213a      	movs	r1, #58	; 0x3a
   dc6f0:	f002 fa06 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   dc6f4:	7839      	ldrb	r1, [r7, #0]
   dc6f6:	782b      	ldrb	r3, [r5, #0]
   dc6f8:	7832      	ldrb	r2, [r6, #0]
   dc6fa:	4814      	ldr	r0, [pc, #80]	; (dc74c <_Z5canimiib+0x152c>)
   dc6fc:	9100      	str	r1, [sp, #0]
            for(i=0; i<100; i++)
   dc6fe:	4c15      	ldr	r4, [pc, #84]	; (dc754 <_Z5canimiib+0x1534>)
    else
    {
        if(tmr)
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
   dc700:	213e      	movs	r1, #62	; 0x3e
   dc702:	f002 f9fd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            for(i=0; i<100; i++)
   dc706:	2300      	movs	r3, #0
   dc708:	6023      	str	r3, [r4, #0]
   dc70a:	6823      	ldr	r3, [r4, #0]
   dc70c:	2b63      	cmp	r3, #99	; 0x63
   dc70e:	dc23      	bgt.n	dc758 <_Z5canimiib+0x1538>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc710:	2000      	movs	r0, #0
   dc712:	f004 fda5 	bl	e1260 <digitalRead>
   dc716:	b948      	cbnz	r0, dc72c <_Z5canimiib+0x150c>
   dc718:	2001      	movs	r0, #1
   dc71a:	f004 fda1 	bl	e1260 <digitalRead>
   dc71e:	b928      	cbnz	r0, dc72c <_Z5canimiib+0x150c>
   dc720:	2002      	movs	r0, #2
   dc722:	f004 fd9d 	bl	e1260 <digitalRead>
   dc726:	2800      	cmp	r0, #0
   dc728:	f000 809e 	beq.w	dc868 <_Z5canimiib+0x1648>
    {
        if(tmr)
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
            for(i=0; i<100; i++)
   dc72c:	6823      	ldr	r3, [r4, #0]
   dc72e:	3301      	adds	r3, #1
   dc730:	6023      	str	r3, [r4, #0]
   dc732:	e7ea      	b.n	dc70a <_Z5canimiib+0x14ea>
   dc734:	f3af 8000 	nop.w
   dc738:	cccccccd 	.word	0xcccccccd
   dc73c:	3ffccccc 	.word	0x3ffccccc
   dc740:	2003e354 	.word	0x2003e354
   dc744:	2003e35c 	.word	0x2003e35c
   dc748:	3ff80000 	.word	0x3ff80000
   dc74c:	2003e31c 	.word	0x2003e31c
   dc750:	2003e314 	.word	0x2003e314
   dc754:	2003e33c 	.word	0x2003e33c
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc758:	4849      	ldr	r0, [pc, #292]	; (dc880 <_Z5canimiib+0x1660>)
   dc75a:	f002 f82f 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   dc75e:	f04f 0802 	mov.w	r8, #2
   dc762:	6839      	ldr	r1, [r7, #0]
   dc764:	fb91 f1f8 	sdiv	r1, r1, r8
   dc768:	b2c9      	uxtb	r1, r1
   dc76a:	682b      	ldr	r3, [r5, #0]
   dc76c:	6832      	ldr	r2, [r6, #0]
   dc76e:	fb93 f3f8 	sdiv	r3, r3, r8
   dc772:	fb92 f2f8 	sdiv	r2, r2, r8
   dc776:	9100      	str	r1, [sp, #0]
   dc778:	b2db      	uxtb	r3, r3
   dc77a:	b2d2      	uxtb	r2, r2
   dc77c:	213a      	movs	r1, #58	; 0x3a
   dc77e:	4840      	ldr	r0, [pc, #256]	; (dc880 <_Z5canimiib+0x1660>)
   dc780:	f002 f9be 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   dc784:	6839      	ldr	r1, [r7, #0]
   dc786:	682b      	ldr	r3, [r5, #0]
   dc788:	6832      	ldr	r2, [r6, #0]
   dc78a:	fb93 f3f8 	sdiv	r3, r3, r8
   dc78e:	fb92 f2f8 	sdiv	r2, r2, r8
   dc792:	fb91 f8f8 	sdiv	r8, r1, r8
   dc796:	fa5f f188 	uxtb.w	r1, r8
   dc79a:	9100      	str	r1, [sp, #0]
   dc79c:	b2db      	uxtb	r3, r3
   dc79e:	b2d2      	uxtb	r2, r2
   dc7a0:	213e      	movs	r1, #62	; 0x3e
   dc7a2:	4837      	ldr	r0, [pc, #220]	; (dc880 <_Z5canimiib+0x1660>)
   dc7a4:	f002 f9ac 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            for(i=0; i<100; i++)
   dc7a8:	4b36      	ldr	r3, [pc, #216]	; (dc884 <_Z5canimiib+0x1664>)
   dc7aa:	2200      	movs	r2, #0
   dc7ac:	601a      	str	r2, [r3, #0]
   dc7ae:	6823      	ldr	r3, [r4, #0]
   dc7b0:	2b63      	cmp	r3, #99	; 0x63
   dc7b2:	dc10      	bgt.n	dc7d6 <_Z5canimiib+0x15b6>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc7b4:	2000      	movs	r0, #0
   dc7b6:	f004 fd53 	bl	e1260 <digitalRead>
   dc7ba:	b940      	cbnz	r0, dc7ce <_Z5canimiib+0x15ae>
   dc7bc:	2001      	movs	r0, #1
   dc7be:	f004 fd4f 	bl	e1260 <digitalRead>
   dc7c2:	b920      	cbnz	r0, dc7ce <_Z5canimiib+0x15ae>
   dc7c4:	2002      	movs	r0, #2
   dc7c6:	f004 fd4b 	bl	e1260 <digitalRead>
   dc7ca:	2800      	cmp	r0, #0
   dc7cc:	d050      	beq.n	dc870 <_Z5canimiib+0x1650>
                }
            }
            strip.show();
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
            for(i=0; i<100; i++)
   dc7ce:	6823      	ldr	r3, [r4, #0]
   dc7d0:	3301      	adds	r3, #1
   dc7d2:	6023      	str	r3, [r4, #0]
   dc7d4:	e7eb      	b.n	dc7ae <_Z5canimiib+0x158e>
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc7d6:	482a      	ldr	r0, [pc, #168]	; (dc880 <_Z5canimiib+0x1660>)
        }
    }
}                                  
   dc7d8:	b011      	add	sp, #68	; 0x44
   dc7da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc7de:	f001 bfed 	b.w	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.show();
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc7e2:	2005      	movs	r0, #5
   dc7e4:	f003 fa86 	bl	dfcf4 <delay>
   dc7e8:	f7fe bd7f 	b.w	db2ea <_Z5canimiib+0xca>
            strip.show();
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc7ec:	2005      	movs	r0, #5
   dc7ee:	f003 fa81 	bl	dfcf4 <delay>
   dc7f2:	f7fe be27 	b.w	db444 <_Z5canimiib+0x224>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc7f6:	2005      	movs	r0, #5
   dc7f8:	f003 fa7c 	bl	dfcf4 <delay>
   dc7fc:	f7fe bea9 	b.w	db552 <_Z5canimiib+0x332>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc800:	2005      	movs	r0, #5
   dc802:	f003 fa77 	bl	dfcf4 <delay>
   dc806:	f7fe befd 	b.w	db604 <_Z5canimiib+0x3e4>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc80a:	2005      	movs	r0, #5
   dc80c:	f003 fa72 	bl	dfcf4 <delay>
   dc810:	f7fe bf89 	b.w	db726 <_Z5canimiib+0x506>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc814:	2005      	movs	r0, #5
   dc816:	f003 fa6d 	bl	dfcf4 <delay>
   dc81a:	f7fe bfde 	b.w	db7da <_Z5canimiib+0x5ba>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc81e:	2005      	movs	r0, #5
   dc820:	f003 fa68 	bl	dfcf4 <delay>
   dc824:	f7ff b894 	b.w	db950 <_Z5canimiib+0x730>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc828:	2005      	movs	r0, #5
   dc82a:	f003 fa63 	bl	dfcf4 <delay>
   dc82e:	f7ff b927 	b.w	dba80 <_Z5canimiib+0x860>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc832:	2005      	movs	r0, #5
   dc834:	f003 fa5e 	bl	dfcf4 <delay>
   dc838:	f7ff b9da 	b.w	dbbf0 <_Z5canimiib+0x9d0>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc83c:	2005      	movs	r0, #5
   dc83e:	f003 fa59 	bl	dfcf4 <delay>
   dc842:	f7ff ba59 	b.w	dbcf8 <_Z5canimiib+0xad8>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc846:	2005      	movs	r0, #5
   dc848:	f003 fa54 	bl	dfcf4 <delay>
   dc84c:	f7ff bba0 	b.w	dbf90 <_Z5canimiib+0xd70>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc850:	2005      	movs	r0, #5
   dc852:	f003 fa4f 	bl	dfcf4 <delay>
   dc856:	e4c8      	b.n	dc1ea <_Z5canimiib+0xfca>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc858:	2005      	movs	r0, #5
   dc85a:	f003 fa4b 	bl	dfcf4 <delay>
   dc85e:	e61d      	b.n	dc49c <_Z5canimiib+0x127c>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc860:	2005      	movs	r0, #5
   dc862:	f003 fa47 	bl	dfcf4 <delay>
   dc866:	e732      	b.n	dc6ce <_Z5canimiib+0x14ae>
            strip.setPixelColor(62,rclock,gclock,bclock);
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc868:	2005      	movs	r0, #5
   dc86a:	f003 fa43 	bl	dfcf4 <delay>
   dc86e:	e75d      	b.n	dc72c <_Z5canimiib+0x150c>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc870:	2005      	movs	r0, #5
   dc872:	f003 fa3f 	bl	dfcf4 <delay>
   dc876:	e7aa      	b.n	dc7ce <_Z5canimiib+0x15ae>
                }
            }
            strip.show();
        }
    }
}                                  
   dc878:	b011      	add	sp, #68	; 0x44
   dc87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc87e:	bf00      	nop
   dc880:	2003e31c 	.word	0x2003e31c
   dc884:	2003e33c 	.word	0x2003e33c

000dc888 <_Z8settingsv>:
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dc888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    strip.clear();
   dc88c:	48b0      	ldr	r0, [pc, #704]	; (dcb50 <_Z8settingsv+0x2c8>)
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dc88e:	4cb1      	ldr	r4, [pc, #708]	; (dcb54 <_Z8settingsv+0x2cc>)
   dc890:	4db1      	ldr	r5, [pc, #708]	; (dcb58 <_Z8settingsv+0x2d0>)
            }
            strip.show();
        }
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dc892:	b091      	sub	sp, #68	; 0x44
    strip.clear();
   dc894:	f002 f963 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dc898:	4bb0      	ldr	r3, [pc, #704]	; (dcb5c <_Z8settingsv+0x2d4>)
   dc89a:	682a      	ldr	r2, [r5, #0]
   dc89c:	681b      	ldr	r3, [r3, #0]
   dc89e:	9300      	str	r3, [sp, #0]
   dc8a0:	2100      	movs	r1, #0
   dc8a2:	6823      	ldr	r3, [r4, #0]
   dc8a4:	48ae      	ldr	r0, [pc, #696]	; (dcb60 <_Z8settingsv+0x2d8>)
   dc8a6:	f7fc fce3 	bl	d9270 <_Z7strdispPKciiii>
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dc8aa:	2000      	movs	r0, #0
   dc8ac:	f004 fcd8 	bl	e1260 <digitalRead>
   dc8b0:	2801      	cmp	r0, #1
   dc8b2:	d004      	beq.n	dc8be <_Z8settingsv+0x36>
   dc8b4:	2002      	movs	r0, #2
   dc8b6:	f004 fcd3 	bl	e1260 <digitalRead>
   dc8ba:	2801      	cmp	r0, #1
   dc8bc:	d103      	bne.n	dc8c6 <_Z8settingsv+0x3e>
        delay(5);
   dc8be:	2005      	movs	r0, #5
   dc8c0:	f003 fa18 	bl	dfcf4 <delay>
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dc8c4:	e7f1      	b.n	dc8aa <_Z8settingsv+0x22>
        delay(5);
    }
    strip.clear();
   dc8c6:	48a2      	ldr	r0, [pc, #648]	; (dcb50 <_Z8settingsv+0x2c8>)
        }
        else if(smode == 8){
            strdisp("Drk clr", 0, rclock, gclock, bclock);
        }
        else if(smode == 9){
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dc8c8:	4ea4      	ldr	r6, [pc, #656]	; (dcb5c <_Z8settingsv+0x2d4>)
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
   dc8ca:	f002 f948 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
   dc8ce:	2701      	movs	r7, #1
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
   dc8d0:	46b8      	mov	r8, r7
        delay(5);
    }
    strip.clear();
    while(sett == true)
    {
        if(smode == 1){
   dc8d2:	f1b8 0f01 	cmp.w	r8, #1
   dc8d6:	d108      	bne.n	dc8ea <_Z8settingsv+0x62>
            strdisp("WiFi", 0, rclock, gclock, bclock);
   dc8d8:	6833      	ldr	r3, [r6, #0]
   dc8da:	9300      	str	r3, [sp, #0]
   dc8dc:	682a      	ldr	r2, [r5, #0]
   dc8de:	6823      	ldr	r3, [r4, #0]
   dc8e0:	48a0      	ldr	r0, [pc, #640]	; (dcb64 <_Z8settingsv+0x2dc>)
   dc8e2:	2100      	movs	r1, #0
   dc8e4:	f7fc fcc4 	bl	d9270 <_Z7strdispPKciiii>
   dc8e8:	e05e      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 2){
   dc8ea:	f1b8 0f02 	cmp.w	r8, #2
   dc8ee:	d108      	bne.n	dc902 <_Z8settingsv+0x7a>
            strdisp("Sig Strgth", 0, rclock, gclock, bclock);
   dc8f0:	6833      	ldr	r3, [r6, #0]
   dc8f2:	9300      	str	r3, [sp, #0]
   dc8f4:	682a      	ldr	r2, [r5, #0]
   dc8f6:	6823      	ldr	r3, [r4, #0]
   dc8f8:	489b      	ldr	r0, [pc, #620]	; (dcb68 <_Z8settingsv+0x2e0>)
   dc8fa:	2100      	movs	r1, #0
   dc8fc:	f7fc fcb8 	bl	d9270 <_Z7strdispPKciiii>
   dc900:	e052      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 3){
   dc902:	f1b8 0f03 	cmp.w	r8, #3
   dc906:	d108      	bne.n	dc91a <_Z8settingsv+0x92>
            strdisp("Time zone", 0, rclock, gclock, bclock);
   dc908:	6833      	ldr	r3, [r6, #0]
   dc90a:	9300      	str	r3, [sp, #0]
   dc90c:	682a      	ldr	r2, [r5, #0]
   dc90e:	6823      	ldr	r3, [r4, #0]
   dc910:	4896      	ldr	r0, [pc, #600]	; (dcb6c <_Z8settingsv+0x2e4>)
   dc912:	2100      	movs	r1, #0
   dc914:	f7fc fcac 	bl	d9270 <_Z7strdispPKciiii>
   dc918:	e046      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 4){
   dc91a:	f1b8 0f04 	cmp.w	r8, #4
   dc91e:	d108      	bne.n	dc932 <_Z8settingsv+0xaa>
            strdisp("Sys vrsn", 0, rclock, gclock, bclock);
   dc920:	6833      	ldr	r3, [r6, #0]
   dc922:	9300      	str	r3, [sp, #0]
   dc924:	682a      	ldr	r2, [r5, #0]
   dc926:	6823      	ldr	r3, [r4, #0]
   dc928:	4891      	ldr	r0, [pc, #580]	; (dcb70 <_Z8settingsv+0x2e8>)
   dc92a:	2100      	movs	r1, #0
   dc92c:	f7fc fca0 	bl	d9270 <_Z7strdispPKciiii>
   dc930:	e03a      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 5){
   dc932:	f1b8 0f05 	cmp.w	r8, #5
   dc936:	d108      	bne.n	dc94a <_Z8settingsv+0xc2>
            strdisp("Dsp wthr", 0, rclock, gclock, bclock);
   dc938:	6833      	ldr	r3, [r6, #0]
   dc93a:	9300      	str	r3, [sp, #0]
   dc93c:	682a      	ldr	r2, [r5, #0]
   dc93e:	6823      	ldr	r3, [r4, #0]
   dc940:	488c      	ldr	r0, [pc, #560]	; (dcb74 <_Z8settingsv+0x2ec>)
   dc942:	2100      	movs	r1, #0
   dc944:	f7fc fc94 	bl	d9270 <_Z7strdispPKciiii>
   dc948:	e02e      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 6){
   dc94a:	f1b8 0f06 	cmp.w	r8, #6
   dc94e:	d108      	bne.n	dc962 <_Z8settingsv+0xda>
            strdisp("Get CO2", 0, rclock, gclock, bclock);
   dc950:	6833      	ldr	r3, [r6, #0]
   dc952:	9300      	str	r3, [sp, #0]
   dc954:	682a      	ldr	r2, [r5, #0]
   dc956:	6823      	ldr	r3, [r4, #0]
   dc958:	4887      	ldr	r0, [pc, #540]	; (dcb78 <_Z8settingsv+0x2f0>)
   dc95a:	2100      	movs	r1, #0
   dc95c:	f7fc fc88 	bl	d9270 <_Z7strdispPKciiii>
   dc960:	e022      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 7){
   dc962:	f1b8 0f07 	cmp.w	r8, #7
   dc966:	d108      	bne.n	dc97a <_Z8settingsv+0xf2>
            strdisp("Get tmp", 0, rclock, gclock, bclock);
   dc968:	6833      	ldr	r3, [r6, #0]
   dc96a:	9300      	str	r3, [sp, #0]
   dc96c:	682a      	ldr	r2, [r5, #0]
   dc96e:	6823      	ldr	r3, [r4, #0]
   dc970:	4882      	ldr	r0, [pc, #520]	; (dcb7c <_Z8settingsv+0x2f4>)
   dc972:	2100      	movs	r1, #0
   dc974:	f7fc fc7c 	bl	d9270 <_Z7strdispPKciiii>
   dc978:	e016      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 8){
   dc97a:	f1b8 0f08 	cmp.w	r8, #8
   dc97e:	d108      	bne.n	dc992 <_Z8settingsv+0x10a>
            strdisp("Drk clr", 0, rclock, gclock, bclock);
   dc980:	6833      	ldr	r3, [r6, #0]
   dc982:	9300      	str	r3, [sp, #0]
   dc984:	682a      	ldr	r2, [r5, #0]
   dc986:	6823      	ldr	r3, [r4, #0]
   dc988:	487d      	ldr	r0, [pc, #500]	; (dcb80 <_Z8settingsv+0x2f8>)
   dc98a:	2100      	movs	r1, #0
   dc98c:	f7fc fc70 	bl	d9270 <_Z7strdispPKciiii>
   dc990:	e00a      	b.n	dc9a8 <_Z8settingsv+0x120>
        }
        else if(smode == 9){
   dc992:	f1b8 0f09 	cmp.w	r8, #9
   dc996:	d107      	bne.n	dc9a8 <_Z8settingsv+0x120>
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dc998:	6833      	ldr	r3, [r6, #0]
   dc99a:	9300      	str	r3, [sp, #0]
   dc99c:	682a      	ldr	r2, [r5, #0]
   dc99e:	6823      	ldr	r3, [r4, #0]
   dc9a0:	4878      	ldr	r0, [pc, #480]	; (dcb84 <_Z8settingsv+0x2fc>)
   dc9a2:	2100      	movs	r1, #0
   dc9a4:	f7fc fc64 	bl	d9270 <_Z7strdispPKciiii>
        }
        if(digitalRead(D1) == HIGH){
   dc9a8:	2001      	movs	r0, #1
   dc9aa:	f004 fc59 	bl	e1260 <digitalRead>
   dc9ae:	2801      	cmp	r0, #1
   dc9b0:	4681      	mov	r9, r0
   dc9b2:	f040 837a 	bne.w	dd0aa <_Z8settingsv+0x822>
            if(dispm == 1){
   dc9b6:	2f01      	cmp	r7, #1
   dc9b8:	d133      	bne.n	dca22 <_Z8settingsv+0x19a>
                strip.clear();
   dc9ba:	4865      	ldr	r0, [pc, #404]	; (dcb50 <_Z8settingsv+0x2c8>)
   dc9bc:	f002 f8cf 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   dc9c0:	4b71      	ldr	r3, [pc, #452]	; (dcb88 <_Z8settingsv+0x300>)
   dc9c2:	2200      	movs	r2, #0
   dc9c4:	4611      	mov	r1, r2
   dc9c6:	6858      	ldr	r0, [r3, #4]
   dc9c8:	f002 fb8e 	bl	df0e8 <network_config>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
   dc9cc:	2102      	movs	r1, #2
   dc9ce:	682a      	ldr	r2, [r5, #0]
   dc9d0:	6833      	ldr	r3, [r6, #0]
   dc9d2:	fb92 f2f1 	sdiv	r2, r2, r1
   dc9d6:	fb93 f3f1 	sdiv	r3, r3, r1
   dc9da:	305d      	adds	r0, #93	; 0x5d
   dc9dc:	9300      	str	r3, [sp, #0]
   dc9de:	2100      	movs	r1, #0
   dc9e0:	6823      	ldr	r3, [r4, #0]
   dc9e2:	f7fc fc45 	bl	d9270 <_Z7strdispPKciiii>
                while(digitalRead(D1) == HIGH)
   dc9e6:	2001      	movs	r0, #1
   dc9e8:	f004 fc3a 	bl	e1260 <digitalRead>
   dc9ec:	2801      	cmp	r0, #1
   dc9ee:	d103      	bne.n	dc9f8 <_Z8settingsv+0x170>
                {
                    delay(50);
   dc9f0:	2032      	movs	r0, #50	; 0x32
   dc9f2:	f003 f97f 	bl	dfcf4 <delay>
        }
        if(digitalRead(D1) == HIGH){
            if(dispm == 1){
                strip.clear();
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
   dc9f6:	e7f6      	b.n	dc9e6 <_Z8settingsv+0x15e>
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dc9f8:	2001      	movs	r0, #1
   dc9fa:	f004 fc31 	bl	e1260 <digitalRead>
   dc9fe:	b918      	cbnz	r0, dca08 <_Z8settingsv+0x180>
                {
                    delay(50);
   dca00:	2032      	movs	r0, #50	; 0x32
   dca02:	f003 f977 	bl	dfcf4 <delay>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dca06:	e7f7      	b.n	dc9f8 <_Z8settingsv+0x170>
                {
                    delay(50);
                }
                strip.clear();
   dca08:	4851      	ldr	r0, [pc, #324]	; (dcb50 <_Z8settingsv+0x2c8>)
   dca0a:	f002 f8a8 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dca0e:	2001      	movs	r0, #1
   dca10:	f004 fc26 	bl	e1260 <digitalRead>
   dca14:	2801      	cmp	r0, #1
   dca16:	f040 8348 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dca1a:	2005      	movs	r0, #5
   dca1c:	f003 f96a 	bl	dfcf4 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(50);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dca20:	e7f5      	b.n	dca0e <_Z8settingsv+0x186>
                {
                    delay(5);
                }
            }
            else if(dispm == 2){
   dca22:	2f02      	cmp	r7, #2
   dca24:	d150      	bne.n	dcac8 <_Z8settingsv+0x240>
                WiFiSignal sig = WiFi.RSSI();
   dca26:	4958      	ldr	r1, [pc, #352]	; (dcb88 <_Z8settingsv+0x300>)
   dca28:	a807      	add	r0, sp, #28
   dca2a:	f004 fad9 	bl	e0fe0 <_ZN5spark9WiFiClass4RSSIEv>
                int strength = int(sig.getStrength());
   dca2e:	a807      	add	r0, sp, #28
   dca30:	f004 fa9c 	bl	e0f6c <_ZNK10WiFiSignal11getStrengthEv>
   dca34:	eefd 7ac0 	vcvt.s32.f32	s15, s0
                strip.clear();
   dca38:	4845      	ldr	r0, [pc, #276]	; (dcb50 <_Z8settingsv+0x2c8>)
                    delay(5);
                }
            }
            else if(dispm == 2){
                WiFiSignal sig = WiFi.RSSI();
                int strength = int(sig.getStrength());
   dca3a:	ee17 ba90 	vmov	fp, s15
                strip.clear();
   dca3e:	f002 f88e 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                snum(strength/100,0,rclock,gclock,bclock);
   dca42:	6833      	ldr	r3, [r6, #0]
   dca44:	9300      	str	r3, [sp, #0]
   dca46:	682a      	ldr	r2, [r5, #0]
   dca48:	6823      	ldr	r3, [r4, #0]
   dca4a:	2100      	movs	r1, #0
   dca4c:	2064      	movs	r0, #100	; 0x64
   dca4e:	fb9b f0f0 	sdiv	r0, fp, r0
   dca52:	f7f9 fcf3 	bl	d643c <_Z4snumiiiii>
                snum((strength/10)%10,32,rclock,gclock,bclock);
   dca56:	f04f 090a 	mov.w	r9, #10
   dca5a:	6833      	ldr	r3, [r6, #0]
   dca5c:	fb9b faf9 	sdiv	sl, fp, r9
   dca60:	9300      	str	r3, [sp, #0]
   dca62:	682a      	ldr	r2, [r5, #0]
   dca64:	6823      	ldr	r3, [r4, #0]
   dca66:	fb9a f0f9 	sdiv	r0, sl, r9
   dca6a:	2120      	movs	r1, #32
   dca6c:	fb09 a010 	mls	r0, r9, r0, sl
   dca70:	f7f9 fce4 	bl	d643c <_Z4snumiiiii>
                snum(strength%10,64,rclock,gclock,bclock);
   dca74:	6833      	ldr	r3, [r6, #0]
   dca76:	9300      	str	r3, [sp, #0]
   dca78:	fb09 b01a 	mls	r0, r9, sl, fp
   dca7c:	6823      	ldr	r3, [r4, #0]
   dca7e:	682a      	ldr	r2, [r5, #0]
   dca80:	2140      	movs	r1, #64	; 0x40
   dca82:	f7f9 fcdb 	bl	d643c <_Z4snumiiiii>
                strip.show();
   dca86:	4832      	ldr	r0, [pc, #200]	; (dcb50 <_Z8settingsv+0x2c8>)
   dca88:	f001 fe98 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dca8c:	2001      	movs	r0, #1
   dca8e:	f004 fbe7 	bl	e1260 <digitalRead>
   dca92:	2801      	cmp	r0, #1
   dca94:	d103      	bne.n	dca9e <_Z8settingsv+0x216>
                {
                    delay(5);
   dca96:	2005      	movs	r0, #5
   dca98:	f003 f92c 	bl	dfcf4 <delay>
                strip.clear();
                snum(strength/100,0,rclock,gclock,bclock);
                snum((strength/10)%10,32,rclock,gclock,bclock);
                snum(strength%10,64,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dca9c:	e7f6      	b.n	dca8c <_Z8settingsv+0x204>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dca9e:	2001      	movs	r0, #1
   dcaa0:	f004 fbde 	bl	e1260 <digitalRead>
   dcaa4:	b918      	cbnz	r0, dcaae <_Z8settingsv+0x226>
                {
                    delay(5);
   dcaa6:	2005      	movs	r0, #5
   dcaa8:	f003 f924 	bl	dfcf4 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcaac:	e7f7      	b.n	dca9e <_Z8settingsv+0x216>
                {
                    delay(5);
                }
                strip.clear();
   dcaae:	4828      	ldr	r0, [pc, #160]	; (dcb50 <_Z8settingsv+0x2c8>)
   dcab0:	f002 f855 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcab4:	2001      	movs	r0, #1
   dcab6:	f004 fbd3 	bl	e1260 <digitalRead>
   dcaba:	2801      	cmp	r0, #1
   dcabc:	f040 82f5 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcac0:	2005      	movs	r0, #5
   dcac2:	f003 f917 	bl	dfcf4 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcac6:	e7f5      	b.n	dcab4 <_Z8settingsv+0x22c>
                {
                    delay(5);
                }
            }
            else if(dispm == 3){
   dcac8:	2f03      	cmp	r7, #3
   dcaca:	f040 80e7 	bne.w	dcc9c <_Z8settingsv+0x414>
                strip.clear();
   dcace:	4820      	ldr	r0, [pc, #128]	; (dcb50 <_Z8settingsv+0x2c8>)
   dcad0:	f002 f845 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                int tzoff = 12-EEPROM.read(1);
   dcad4:	f004 fbee 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcad8:	4648      	mov	r0, r9
   dcada:	f7f7 fba5 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dcade:	6833      	ldr	r3, [r6, #0]
   dcae0:	682a      	ldr	r2, [r5, #0]
   dcae2:	9300      	str	r3, [sp, #0]
                }
            }
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
   dcae4:	f1d0 090c 	rsbs	r9, r0, #12
                {
                    letter('-', 0, rclock, gclock, bclock);
   dcae8:	bf4c      	ite	mi
   dcaea:	202d      	movmi	r0, #45	; 0x2d
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dcaec:	202b      	movpl	r0, #43	; 0x2b
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dcaee:	6823      	ldr	r3, [r4, #0]
   dcaf0:	2100      	movs	r1, #0
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dcaf2:	f7fb f845 	bl	d7b80 <_Z6letterciiii>
                    strip.show();
   dcaf6:	4816      	ldr	r0, [pc, #88]	; (dcb50 <_Z8settingsv+0x2c8>)
   dcaf8:	f001 fe60 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dcafc:	6833      	ldr	r3, [r6, #0]
   dcafe:	9300      	str	r3, [sp, #0]
   dcb00:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dcb04:	f04f 0a0a 	mov.w	sl, #10
   dcb08:	6823      	ldr	r3, [r4, #0]
   dcb0a:	682a      	ldr	r2, [r5, #0]
   dcb0c:	212f      	movs	r1, #47	; 0x2f
   dcb0e:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dcb12:	fb90 f0fa 	sdiv	r0, r0, sl
   dcb16:	f7f9 fc91 	bl	d643c <_Z4snumiiiii>
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dcb1a:	fb99 f0fa 	sdiv	r0, r9, sl
   dcb1e:	fb0a 9010 	mls	r0, sl, r0, r9
   dcb22:	6833      	ldr	r3, [r6, #0]
   dcb24:	9300      	str	r3, [sp, #0]
   dcb26:	2800      	cmp	r0, #0
   dcb28:	bfb8      	it	lt
   dcb2a:	4240      	neglt	r0, r0
   dcb2c:	6823      	ldr	r3, [r4, #0]
   dcb2e:	682a      	ldr	r2, [r5, #0]
   dcb30:	214f      	movs	r1, #79	; 0x4f
   dcb32:	f7f9 fc83 	bl	d643c <_Z4snumiiiii>
                strip.show();
   dcb36:	4806      	ldr	r0, [pc, #24]	; (dcb50 <_Z8settingsv+0x2c8>)
   dcb38:	f001 fe40 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dcb3c:	2001      	movs	r0, #1
   dcb3e:	f004 fb8f 	bl	e1260 <digitalRead>
   dcb42:	2801      	cmp	r0, #1
   dcb44:	d168      	bne.n	dcc18 <_Z8settingsv+0x390>
                {
                    delay(5);
   dcb46:	2005      	movs	r0, #5
   dcb48:	f003 f8d4 	bl	dfcf4 <delay>
                    strip.show();
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dcb4c:	e7f6      	b.n	dcb3c <_Z8settingsv+0x2b4>
   dcb4e:	bf00      	nop
   dcb50:	2003e31c 	.word	0x2003e31c
   dcb54:	2003e314 	.word	0x2003e314
   dcb58:	2003e354 	.word	0x2003e354
   dcb5c:	2003e35c 	.word	0x2003e35c
   dcb60:	000e453c 	.word	0x000e453c
   dcb64:	000e4545 	.word	0x000e4545
   dcb68:	000e454a 	.word	0x000e454a
   dcb6c:	000e4555 	.word	0x000e4555
   dcb70:	000e455f 	.word	0x000e455f
   dcb74:	000e4568 	.word	0x000e4568
   dcb78:	000e4571 	.word	0x000e4571
   dcb7c:	000e4579 	.word	0x000e4579
   dcb80:	000e4581 	.word	0x000e4581
   dcb84:	000e4589 	.word	0x000e4589
   dcb88:	2003e6e4 	.word	0x2003e6e4
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dcb8c:	2002      	movs	r0, #2
   dcb8e:	f004 fb67 	bl	e1260 <digitalRead>
   dcb92:	2801      	cmp	r0, #1
   dcb94:	d046      	beq.n	dcc24 <_Z8settingsv+0x39c>
                        while(digitalRead(D2) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
   dcb96:	2000      	movs	r0, #0
   dcb98:	f004 fb62 	bl	e1260 <digitalRead>
   dcb9c:	2801      	cmp	r0, #1
   dcb9e:	d146      	bne.n	dcc2e <_Z8settingsv+0x3a6>
   dcba0:	f119 0f0b 	cmn.w	r9, #11
   dcba4:	f280 82e5 	bge.w	dd172 <_Z8settingsv+0x8ea>
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
                    {
                        letter('+', 0, 0, 0, 0);
   dcba8:	f04f 0a00 	mov.w	sl, #0
   dcbac:	4653      	mov	r3, sl
   dcbae:	4652      	mov	r2, sl
   dcbb0:	4651      	mov	r1, sl
   dcbb2:	202b      	movs	r0, #43	; 0x2b
   dcbb4:	f8cd a000 	str.w	sl, [sp]
   dcbb8:	f7fa ffe2 	bl	d7b80 <_Z6letterciiii>
                        letter('-', 0, rclock, gclock, bclock);
   dcbbc:	6833      	ldr	r3, [r6, #0]
   dcbbe:	9300      	str	r3, [sp, #0]
   dcbc0:	202d      	movs	r0, #45	; 0x2d
   dcbc2:	6823      	ldr	r3, [r4, #0]
   dcbc4:	682a      	ldr	r2, [r5, #0]
   dcbc6:	4651      	mov	r1, sl
   dcbc8:	f7fa ffda 	bl	d7b80 <_Z6letterciiii>
                        strip.show();
   dcbcc:	48bc      	ldr	r0, [pc, #752]	; (dcec0 <_Z8settingsv+0x638>)
   dcbce:	f001 fdf5 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dcbd2:	6833      	ldr	r3, [r6, #0]
   dcbd4:	9300      	str	r3, [sp, #0]
   dcbd6:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dcbda:	f04f 0a0a 	mov.w	sl, #10
   dcbde:	6823      	ldr	r3, [r4, #0]
   dcbe0:	682a      	ldr	r2, [r5, #0]
   dcbe2:	212f      	movs	r1, #47	; 0x2f
   dcbe4:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dcbe8:	fb90 f0fa 	sdiv	r0, r0, sl
   dcbec:	f7f9 fc26 	bl	d643c <_Z4snumiiiii>
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dcbf0:	fb99 f0fa 	sdiv	r0, r9, sl
   dcbf4:	fb0a 9010 	mls	r0, sl, r0, r9
   dcbf8:	2800      	cmp	r0, #0
   dcbfa:	6833      	ldr	r3, [r6, #0]
   dcbfc:	9300      	str	r3, [sp, #0]
   dcbfe:	bfb8      	it	lt
   dcc00:	4240      	neglt	r0, r0
   dcc02:	6823      	ldr	r3, [r4, #0]
   dcc04:	682a      	ldr	r2, [r5, #0]
   dcc06:	214f      	movs	r1, #79	; 0x4f
   dcc08:	f7f9 fc18 	bl	d643c <_Z4snumiiiii>
                    strip.show();
   dcc0c:	48ac      	ldr	r0, [pc, #688]	; (dcec0 <_Z8settingsv+0x638>)
   dcc0e:	f001 fdd5 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                    delay(5);
   dcc12:	2005      	movs	r0, #5
   dcc14:	f003 f86e 	bl	dfcf4 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcc18:	2001      	movs	r0, #1
   dcc1a:	f004 fb21 	bl	e1260 <digitalRead>
   dcc1e:	2800      	cmp	r0, #0
   dcc20:	d0b4      	beq.n	dcb8c <_Z8settingsv+0x304>
   dcc22:	e013      	b.n	dcc4c <_Z8settingsv+0x3c4>
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dcc24:	f1b9 0f0c 	cmp.w	r9, #12
   dcc28:	f040 8297 	bne.w	dd15a <_Z8settingsv+0x8d2>
   dcc2c:	e7b3      	b.n	dcb96 <_Z8settingsv+0x30e>
                        while(digitalRead(D0) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
   dcc2e:	f1b9 0f00 	cmp.w	r9, #0
   dcc32:	dbb9      	blt.n	dcba8 <_Z8settingsv+0x320>
                        letter('-', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
   dcc34:	6833      	ldr	r3, [r6, #0]
   dcc36:	9300      	str	r3, [sp, #0]
   dcc38:	682a      	ldr	r2, [r5, #0]
   dcc3a:	6823      	ldr	r3, [r4, #0]
   dcc3c:	2100      	movs	r1, #0
   dcc3e:	202b      	movs	r0, #43	; 0x2b
   dcc40:	f7fa ff9e 	bl	d7b80 <_Z6letterciiii>
                        strip.show();
   dcc44:	489e      	ldr	r0, [pc, #632]	; (dcec0 <_Z8settingsv+0x638>)
   dcc46:	f001 fdb9 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   dcc4a:	e7c2      	b.n	dcbd2 <_Z8settingsv+0x34a>
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
                    strip.show();
                    delay(5);
                }
                strip.clear();
   dcc4c:	489c      	ldr	r0, [pc, #624]	; (dcec0 <_Z8settingsv+0x638>)
   dcc4e:	f001 ff86 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                EEPROM.write(1, 12-tzoff);
   dcc52:	f004 fb2f 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcc56:	f1c9 010c 	rsb	r1, r9, #12
   dcc5a:	b2c9      	uxtb	r1, r1
   dcc5c:	2001      	movs	r0, #1
   dcc5e:	f7f7 fb9d 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                Time.zone(12-EEPROM.read(1));
   dcc62:	f004 fb27 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcc66:	2001      	movs	r0, #1
   dcc68:	f7f7 fade 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dcc6c:	f1c0 000c 	rsb	r0, r0, #12
   dcc70:	ee07 0a90 	vmov	s15, r0
   dcc74:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   dcc78:	f002 ffdc 	bl	dfc34 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dcc7c:	f002 fa9c 	bl	df1b8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   dcc80:	b110      	cbz	r0, dcc88 <_Z8settingsv+0x400>
            return false;
        }
        return spark_sync_time(NULL);
   dcc82:	2000      	movs	r0, #0
   dcc84:	f002 fab0 	bl	df1e8 <spark_sync_time>
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dcc88:	2001      	movs	r0, #1
   dcc8a:	f004 fae9 	bl	e1260 <digitalRead>
   dcc8e:	2801      	cmp	r0, #1
   dcc90:	f040 820b 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcc94:	2005      	movs	r0, #5
   dcc96:	f003 f82d 	bl	dfcf4 <delay>
                }
                strip.clear();
                EEPROM.write(1, 12-tzoff);
                Time.zone(12-EEPROM.read(1));
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dcc9a:	e7f5      	b.n	dcc88 <_Z8settingsv+0x400>
                {
                    delay(5);
                }
            }
            else if(dispm == 4){
   dcc9c:	2f04      	cmp	r7, #4
   dcc9e:	d136      	bne.n	dcd0e <_Z8settingsv+0x486>
                strip.clear();
   dcca0:	4887      	ldr	r0, [pc, #540]	; (dcec0 <_Z8settingsv+0x638>)
   dcca2:	f001 ff5c 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
#define SYSTEM_VERSION_150
#define SYSTEM_VERSION_151RC1
#define SYSTEM_VERSION_151
#define SYSTEM_VERSION_152

typedef struct __attribute__((packed)) SystemVersionInfo
   dcca6:	a810      	add	r0, sp, #64	; 0x40
   dcca8:	231c      	movs	r3, #28
   dccaa:	f820 3d24 	strh.w	r3, [r0, #-36]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   dccae:	2100      	movs	r1, #0
   dccb0:	f002 f9dc 	bl	df06c <system_version_info>
        return String(info.versionString);
   dccb4:	a909      	add	r1, sp, #36	; 0x24
   dccb6:	a803      	add	r0, sp, #12
   dccb8:	f002 fee3 	bl	dfa82 <_ZN6StringC1EPK19__FlashStringHelper>
                strdisp(System.version(),0,rclock,gclock,bclock);
   dccbc:	6833      	ldr	r3, [r6, #0]
   dccbe:	9300      	str	r3, [sp, #0]
   dccc0:	9803      	ldr	r0, [sp, #12]
   dccc2:	6823      	ldr	r3, [r4, #0]
   dccc4:	682a      	ldr	r2, [r5, #0]
   dccc6:	2100      	movs	r1, #0
   dccc8:	f7fc fad2 	bl	d9270 <_Z7strdispPKciiii>
   dcccc:	a803      	add	r0, sp, #12
   dccce:	f002 fe91 	bl	df9f4 <_ZN6StringD1Ev>
                while(digitalRead(D1) == HIGH)
   dccd2:	2001      	movs	r0, #1
   dccd4:	f004 fac4 	bl	e1260 <digitalRead>
   dccd8:	2801      	cmp	r0, #1
   dccda:	d103      	bne.n	dcce4 <_Z8settingsv+0x45c>
                {
                    delay(5);
   dccdc:	2005      	movs	r0, #5
   dccde:	f003 f809 	bl	dfcf4 <delay>
                }
            }
            else if(dispm == 4){
                strip.clear();
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
   dcce2:	e7f6      	b.n	dccd2 <_Z8settingsv+0x44a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcce4:	2001      	movs	r0, #1
   dcce6:	f004 fabb 	bl	e1260 <digitalRead>
   dccea:	b918      	cbnz	r0, dccf4 <_Z8settingsv+0x46c>
                {
                    delay(5);
   dccec:	2005      	movs	r0, #5
   dccee:	f003 f801 	bl	dfcf4 <delay>
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dccf2:	e7f7      	b.n	dcce4 <_Z8settingsv+0x45c>
                {
                    delay(5);
                }
                strip.clear();
   dccf4:	4872      	ldr	r0, [pc, #456]	; (dcec0 <_Z8settingsv+0x638>)
   dccf6:	f001 ff32 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dccfa:	2001      	movs	r0, #1
   dccfc:	f004 fab0 	bl	e1260 <digitalRead>
   dcd00:	2801      	cmp	r0, #1
   dcd02:	f040 81d2 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcd06:	2005      	movs	r0, #5
   dcd08:	f002 fff4 	bl	dfcf4 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcd0c:	e7f5      	b.n	dccfa <_Z8settingsv+0x472>
                {
                    delay(5);
                }
            }
            else if(dispm == 5){
   dcd0e:	2f05      	cmp	r7, #5
   dcd10:	d15c      	bne.n	dcdcc <_Z8settingsv+0x544>
                strip.clear();
   dcd12:	486b      	ldr	r0, [pc, #428]	; (dcec0 <_Z8settingsv+0x638>)
   dcd14:	f001 ff23 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcd18:	2200      	movs	r2, #0
   dcd1a:	4611      	mov	r1, r2
   dcd1c:	9200      	str	r2, [sp, #0]
   dcd1e:	6823      	ldr	r3, [r4, #0]
   dcd20:	4868      	ldr	r0, [pc, #416]	; (dcec4 <_Z8settingsv+0x63c>)
   dcd22:	f7fc faa5 	bl	d9270 <_Z7strdispPKciiii>
                EEPROM.write(2,1);
   dcd26:	f004 fac5 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcd2a:	4649      	mov	r1, r9
   dcd2c:	2002      	movs	r0, #2
   dcd2e:	f7f7 fb35 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                while(digitalRead(D1) == HIGH)
   dcd32:	2001      	movs	r0, #1
   dcd34:	f004 fa94 	bl	e1260 <digitalRead>
   dcd38:	2801      	cmp	r0, #1
   dcd3a:	d11c      	bne.n	dcd76 <_Z8settingsv+0x4ee>
                {
                    delay(5);
   dcd3c:	2005      	movs	r0, #5
   dcd3e:	f002 ffd9 	bl	dfcf4 <delay>
            }
            else if(dispm == 5){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
   dcd42:	e7f6      	b.n	dcd32 <_Z8settingsv+0x4aa>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcd44:	f004 fa8c 	bl	e1260 <digitalRead>
   dcd48:	2801      	cmp	r0, #1
   dcd4a:	4682      	mov	sl, r0
   dcd4c:	d11a      	bne.n	dcd84 <_Z8settingsv+0x4fc>
                        strip.clear();
   dcd4e:	485c      	ldr	r0, [pc, #368]	; (dcec0 <_Z8settingsv+0x638>)
   dcd50:	f001 ff05 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcd54:	4649      	mov	r1, r9
   dcd56:	6823      	ldr	r3, [r4, #0]
   dcd58:	485a      	ldr	r0, [pc, #360]	; (dcec4 <_Z8settingsv+0x63c>)
   dcd5a:	f8cd 9000 	str.w	r9, [sp]
   dcd5e:	464a      	mov	r2, r9
   dcd60:	f7fc fa86 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(2,1);
   dcd64:	f004 faa6 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcd68:	4651      	mov	r1, sl
   dcd6a:	2002      	movs	r0, #2
   dcd6c:	f7f7 fb16 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(2,0);
                    }
                    delay(5);
   dcd70:	2005      	movs	r0, #5
   dcd72:	f002 ffbf 	bl	dfcf4 <delay>
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcd76:	2001      	movs	r0, #1
   dcd78:	f004 fa72 	bl	e1260 <digitalRead>
   dcd7c:	4681      	mov	r9, r0
   dcd7e:	2800      	cmp	r0, #0
   dcd80:	d0e0      	beq.n	dcd44 <_Z8settingsv+0x4bc>
   dcd82:	e016      	b.n	dcdb2 <_Z8settingsv+0x52a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(2,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcd84:	2002      	movs	r0, #2
   dcd86:	f004 fa6b 	bl	e1260 <digitalRead>
   dcd8a:	2801      	cmp	r0, #1
   dcd8c:	d1f0      	bne.n	dcd70 <_Z8settingsv+0x4e8>
                        strip.clear();
   dcd8e:	484c      	ldr	r0, [pc, #304]	; (dcec0 <_Z8settingsv+0x638>)
   dcd90:	f001 fee5 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dcd94:	4649      	mov	r1, r9
   dcd96:	464b      	mov	r3, r9
   dcd98:	682a      	ldr	r2, [r5, #0]
   dcd9a:	f8cd 9000 	str.w	r9, [sp]
   dcd9e:	484a      	ldr	r0, [pc, #296]	; (dcec8 <_Z8settingsv+0x640>)
   dcda0:	f7fc fa66 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(2,0);
   dcda4:	f004 fa86 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcda8:	4649      	mov	r1, r9
   dcdaa:	2002      	movs	r0, #2
   dcdac:	f7f7 faf6 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dcdb0:	e7de      	b.n	dcd70 <_Z8settingsv+0x4e8>
                    }
                    delay(5);
                }
                strip.clear();
   dcdb2:	4843      	ldr	r0, [pc, #268]	; (dcec0 <_Z8settingsv+0x638>)
   dcdb4:	f001 fed3 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcdb8:	2001      	movs	r0, #1
   dcdba:	f004 fa51 	bl	e1260 <digitalRead>
   dcdbe:	2801      	cmp	r0, #1
   dcdc0:	f040 8173 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcdc4:	2005      	movs	r0, #5
   dcdc6:	f002 ff95 	bl	dfcf4 <delay>
                        EEPROM.write(2,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcdca:	e7f5      	b.n	dcdb8 <_Z8settingsv+0x530>
                {
                    delay(5);
                }
            }
            else if(dispm == 6){
   dcdcc:	2f06      	cmp	r7, #6
   dcdce:	d15c      	bne.n	dce8a <_Z8settingsv+0x602>
                strip.clear();
   dcdd0:	483b      	ldr	r0, [pc, #236]	; (dcec0 <_Z8settingsv+0x638>)
   dcdd2:	f001 fec4 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcdd6:	2200      	movs	r2, #0
   dcdd8:	4611      	mov	r1, r2
   dcdda:	9200      	str	r2, [sp, #0]
   dcddc:	6823      	ldr	r3, [r4, #0]
   dcdde:	4839      	ldr	r0, [pc, #228]	; (dcec4 <_Z8settingsv+0x63c>)
   dcde0:	f7fc fa46 	bl	d9270 <_Z7strdispPKciiii>
                EEPROM.write(3,1);
   dcde4:	f004 fa66 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcde8:	4649      	mov	r1, r9
   dcdea:	2003      	movs	r0, #3
   dcdec:	f7f7 fad6 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                while(digitalRead(D1) == HIGH)
   dcdf0:	2001      	movs	r0, #1
   dcdf2:	f004 fa35 	bl	e1260 <digitalRead>
   dcdf6:	2801      	cmp	r0, #1
   dcdf8:	d11c      	bne.n	dce34 <_Z8settingsv+0x5ac>
                {
                    delay(5);
   dcdfa:	2005      	movs	r0, #5
   dcdfc:	f002 ff7a 	bl	dfcf4 <delay>
            }
            else if(dispm == 6){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
   dce00:	e7f6      	b.n	dcdf0 <_Z8settingsv+0x568>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dce02:	f004 fa2d 	bl	e1260 <digitalRead>
   dce06:	2801      	cmp	r0, #1
   dce08:	4682      	mov	sl, r0
   dce0a:	d11a      	bne.n	dce42 <_Z8settingsv+0x5ba>
                        strip.clear();
   dce0c:	482c      	ldr	r0, [pc, #176]	; (dcec0 <_Z8settingsv+0x638>)
   dce0e:	f001 fea6 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dce12:	4649      	mov	r1, r9
   dce14:	6823      	ldr	r3, [r4, #0]
   dce16:	482b      	ldr	r0, [pc, #172]	; (dcec4 <_Z8settingsv+0x63c>)
   dce18:	f8cd 9000 	str.w	r9, [sp]
   dce1c:	464a      	mov	r2, r9
   dce1e:	f7fc fa27 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(3,1);
   dce22:	f004 fa47 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dce26:	4651      	mov	r1, sl
   dce28:	2003      	movs	r0, #3
   dce2a:	f7f7 fab7 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(3,0);
                    }
                    delay(5);
   dce2e:	2005      	movs	r0, #5
   dce30:	f002 ff60 	bl	dfcf4 <delay>
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dce34:	2001      	movs	r0, #1
   dce36:	f004 fa13 	bl	e1260 <digitalRead>
   dce3a:	4681      	mov	r9, r0
   dce3c:	2800      	cmp	r0, #0
   dce3e:	d0e0      	beq.n	dce02 <_Z8settingsv+0x57a>
   dce40:	e016      	b.n	dce70 <_Z8settingsv+0x5e8>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(3,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dce42:	2002      	movs	r0, #2
   dce44:	f004 fa0c 	bl	e1260 <digitalRead>
   dce48:	2801      	cmp	r0, #1
   dce4a:	d1f0      	bne.n	dce2e <_Z8settingsv+0x5a6>
                        strip.clear();
   dce4c:	481c      	ldr	r0, [pc, #112]	; (dcec0 <_Z8settingsv+0x638>)
   dce4e:	f001 fe86 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dce52:	4649      	mov	r1, r9
   dce54:	464b      	mov	r3, r9
   dce56:	682a      	ldr	r2, [r5, #0]
   dce58:	f8cd 9000 	str.w	r9, [sp]
   dce5c:	481a      	ldr	r0, [pc, #104]	; (dcec8 <_Z8settingsv+0x640>)
   dce5e:	f7fc fa07 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(3,0);
   dce62:	f004 fa27 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dce66:	4649      	mov	r1, r9
   dce68:	2003      	movs	r0, #3
   dce6a:	f7f7 fa97 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dce6e:	e7de      	b.n	dce2e <_Z8settingsv+0x5a6>
                    }
                    delay(5);
                }
                strip.clear();
   dce70:	4813      	ldr	r0, [pc, #76]	; (dcec0 <_Z8settingsv+0x638>)
   dce72:	f001 fe74 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dce76:	2001      	movs	r0, #1
   dce78:	f004 f9f2 	bl	e1260 <digitalRead>
   dce7c:	2801      	cmp	r0, #1
   dce7e:	f040 8114 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dce82:	2005      	movs	r0, #5
   dce84:	f002 ff36 	bl	dfcf4 <delay>
                        EEPROM.write(3,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dce88:	e7f5      	b.n	dce76 <_Z8settingsv+0x5ee>
                {
                    delay(5);
                }
            }
            else if(dispm == 7){
   dce8a:	2f07      	cmp	r7, #7
   dce8c:	d162      	bne.n	dcf54 <_Z8settingsv+0x6cc>
                strip.clear();
   dce8e:	480c      	ldr	r0, [pc, #48]	; (dcec0 <_Z8settingsv+0x638>)
   dce90:	f001 fe65 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dce94:	2200      	movs	r2, #0
   dce96:	4611      	mov	r1, r2
   dce98:	9200      	str	r2, [sp, #0]
   dce9a:	6823      	ldr	r3, [r4, #0]
   dce9c:	4809      	ldr	r0, [pc, #36]	; (dcec4 <_Z8settingsv+0x63c>)
   dce9e:	f7fc f9e7 	bl	d9270 <_Z7strdispPKciiii>
                EEPROM.write(4,1);
   dcea2:	f004 fa07 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcea6:	4649      	mov	r1, r9
   dcea8:	2004      	movs	r0, #4
   dceaa:	f7f7 fa77 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                while(digitalRead(D1) == HIGH)
   dceae:	2001      	movs	r0, #1
   dceb0:	f004 f9d6 	bl	e1260 <digitalRead>
   dceb4:	2801      	cmp	r0, #1
   dceb6:	d122      	bne.n	dcefe <_Z8settingsv+0x676>
                {
                    delay(5);
   dceb8:	2005      	movs	r0, #5
   dceba:	f002 ff1b 	bl	dfcf4 <delay>
            }
            else if(dispm == 7){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
   dcebe:	e7f6      	b.n	dceae <_Z8settingsv+0x626>
   dcec0:	2003e31c 	.word	0x2003e31c
   dcec4:	000e4592 	.word	0x000e4592
   dcec8:	000e4596 	.word	0x000e4596
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcecc:	f004 f9c8 	bl	e1260 <digitalRead>
   dced0:	2801      	cmp	r0, #1
   dced2:	4682      	mov	sl, r0
   dced4:	d11a      	bne.n	dcf0c <_Z8settingsv+0x684>
                        strip.clear();
   dced6:	48d0      	ldr	r0, [pc, #832]	; (dd218 <_Z8settingsv+0x990>)
   dced8:	f001 fe41 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcedc:	4649      	mov	r1, r9
   dcede:	6823      	ldr	r3, [r4, #0]
   dcee0:	48ce      	ldr	r0, [pc, #824]	; (dd21c <_Z8settingsv+0x994>)
   dcee2:	f8cd 9000 	str.w	r9, [sp]
   dcee6:	464a      	mov	r2, r9
   dcee8:	f7fc f9c2 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(4,1);
   dceec:	f004 f9e2 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcef0:	4651      	mov	r1, sl
   dcef2:	2004      	movs	r0, #4
   dcef4:	f7f7 fa52 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(4,0);
                    }
                    delay(5);
   dcef8:	2005      	movs	r0, #5
   dcefa:	f002 fefb 	bl	dfcf4 <delay>
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcefe:	2001      	movs	r0, #1
   dcf00:	f004 f9ae 	bl	e1260 <digitalRead>
   dcf04:	4681      	mov	r9, r0
   dcf06:	2800      	cmp	r0, #0
   dcf08:	d0e0      	beq.n	dcecc <_Z8settingsv+0x644>
   dcf0a:	e016      	b.n	dcf3a <_Z8settingsv+0x6b2>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(4,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcf0c:	2002      	movs	r0, #2
   dcf0e:	f004 f9a7 	bl	e1260 <digitalRead>
   dcf12:	2801      	cmp	r0, #1
   dcf14:	d1f0      	bne.n	dcef8 <_Z8settingsv+0x670>
                        strip.clear();
   dcf16:	48c0      	ldr	r0, [pc, #768]	; (dd218 <_Z8settingsv+0x990>)
   dcf18:	f001 fe21 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dcf1c:	4649      	mov	r1, r9
   dcf1e:	464b      	mov	r3, r9
   dcf20:	682a      	ldr	r2, [r5, #0]
   dcf22:	f8cd 9000 	str.w	r9, [sp]
   dcf26:	48be      	ldr	r0, [pc, #760]	; (dd220 <_Z8settingsv+0x998>)
   dcf28:	f7fc f9a2 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(4,0);
   dcf2c:	f004 f9c2 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcf30:	4649      	mov	r1, r9
   dcf32:	2004      	movs	r0, #4
   dcf34:	f7f7 fa32 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dcf38:	e7de      	b.n	dcef8 <_Z8settingsv+0x670>
                    }
                    delay(5);
                }
                strip.clear();
   dcf3a:	48b7      	ldr	r0, [pc, #732]	; (dd218 <_Z8settingsv+0x990>)
   dcf3c:	f001 fe0f 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcf40:	2001      	movs	r0, #1
   dcf42:	f004 f98d 	bl	e1260 <digitalRead>
   dcf46:	2801      	cmp	r0, #1
   dcf48:	f040 80af 	bne.w	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcf4c:	2005      	movs	r0, #5
   dcf4e:	f002 fed1 	bl	dfcf4 <delay>
                        EEPROM.write(4,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcf52:	e7f5      	b.n	dcf40 <_Z8settingsv+0x6b8>
                {
                    delay(5);
                }
            }
            else if(dispm == 8){
   dcf54:	2f08      	cmp	r7, #8
   dcf56:	d14a      	bne.n	dcfee <_Z8settingsv+0x766>
                strip.clear();
   dcf58:	48af      	ldr	r0, [pc, #700]	; (dd218 <_Z8settingsv+0x990>)
   dcf5a:	f001 fe00 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
   dcf5e:	2300      	movs	r3, #0
   dcf60:	4619      	mov	r1, r3
   dcf62:	9300      	str	r3, [sp, #0]
   dcf64:	682a      	ldr	r2, [r5, #0]
   dcf66:	48af      	ldr	r0, [pc, #700]	; (dd224 <_Z8settingsv+0x99c>)
   dcf68:	f7fc f982 	bl	d9270 <_Z7strdispPKciiii>
                EEPROM.write(5,1);
   dcf6c:	f004 f9a2 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcf70:	4649      	mov	r1, r9
   dcf72:	2005      	movs	r0, #5
   dcf74:	f7f7 fa12 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                while(digitalRead(D1) == HIGH)
   dcf78:	2001      	movs	r0, #1
   dcf7a:	f004 f971 	bl	e1260 <digitalRead>
   dcf7e:	2801      	cmp	r0, #1
   dcf80:	d124      	bne.n	dcfcc <_Z8settingsv+0x744>
                {
                    delay(5);
   dcf82:	2005      	movs	r0, #5
   dcf84:	f002 feb6 	bl	dfcf4 <delay>
                strip.clear();
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
   dcf88:	e7f6      	b.n	dcf78 <_Z8settingsv+0x6f0>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
   dcf8a:	f004 f969 	bl	e1260 <digitalRead>
   dcf8e:	2801      	cmp	r0, #1
   dcf90:	4682      	mov	sl, r0
   dcf92:	f040 80fa 	bne.w	dd18a <_Z8settingsv+0x902>
   dcf96:	2002      	movs	r0, #2
   dcf98:	f004 f962 	bl	e1260 <digitalRead>
   dcf9c:	4681      	mov	r9, r0
   dcf9e:	2800      	cmp	r0, #0
   dcfa0:	f040 80f3 	bne.w	dd18a <_Z8settingsv+0x902>
                        strip.clear();
   dcfa4:	489c      	ldr	r0, [pc, #624]	; (dd218 <_Z8settingsv+0x990>)
   dcfa6:	f001 fdda 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("RED",0,rclock,0,0);
   dcfaa:	4649      	mov	r1, r9
   dcfac:	464b      	mov	r3, r9
   dcfae:	682a      	ldr	r2, [r5, #0]
   dcfb0:	489c      	ldr	r0, [pc, #624]	; (dd224 <_Z8settingsv+0x99c>)
   dcfb2:	f8cd 9000 	str.w	r9, [sp]
   dcfb6:	f7fc f95b 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(5,1);
   dcfba:	f004 f97b 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dcfbe:	4651      	mov	r1, sl
   dcfc0:	2005      	movs	r0, #5
   dcfc2:	f7f7 f9eb 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                    {
                        strip.clear();
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
   dcfc6:	2005      	movs	r0, #5
   dcfc8:	f002 fe94 	bl	dfcf4 <delay>
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcfcc:	2001      	movs	r0, #1
   dcfce:	f004 f947 	bl	e1260 <digitalRead>
   dcfd2:	2800      	cmp	r0, #0
   dcfd4:	d0d9      	beq.n	dcf8a <_Z8settingsv+0x702>
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
   dcfd6:	4890      	ldr	r0, [pc, #576]	; (dd218 <_Z8settingsv+0x990>)
   dcfd8:	f001 fdc1 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcfdc:	2001      	movs	r0, #1
   dcfde:	f004 f93f 	bl	e1260 <digitalRead>
   dcfe2:	2801      	cmp	r0, #1
   dcfe4:	d161      	bne.n	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dcfe6:	2005      	movs	r0, #5
   dcfe8:	f002 fe84 	bl	dfcf4 <delay>
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcfec:	e7f6      	b.n	dcfdc <_Z8settingsv+0x754>
                {
                    delay(5);
                }
            }
            else if(dispm == 9){
   dcfee:	2f09      	cmp	r7, #9
   dcff0:	d15b      	bne.n	dd0aa <_Z8settingsv+0x822>
                strip.clear();
   dcff2:	4889      	ldr	r0, [pc, #548]	; (dd218 <_Z8settingsv+0x990>)
   dcff4:	f001 fdb3 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcff8:	2200      	movs	r2, #0
   dcffa:	4611      	mov	r1, r2
   dcffc:	9200      	str	r2, [sp, #0]
   dcffe:	6823      	ldr	r3, [r4, #0]
   dd000:	4886      	ldr	r0, [pc, #536]	; (dd21c <_Z8settingsv+0x994>)
   dd002:	f7fc f935 	bl	d9270 <_Z7strdispPKciiii>
                EEPROM.write(6,1);
   dd006:	f004 f955 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd00a:	2101      	movs	r1, #1
   dd00c:	2006      	movs	r0, #6
   dd00e:	f7f7 f9c5 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                while(digitalRead(D1) == HIGH)
   dd012:	2001      	movs	r0, #1
   dd014:	f004 f924 	bl	e1260 <digitalRead>
   dd018:	2801      	cmp	r0, #1
   dd01a:	d11c      	bne.n	dd056 <_Z8settingsv+0x7ce>
                {
                    delay(5);
   dd01c:	2005      	movs	r0, #5
   dd01e:	f002 fe69 	bl	dfcf4 <delay>
            }
            else if(dispm == 9){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
   dd022:	e7f6      	b.n	dd012 <_Z8settingsv+0x78a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dd024:	f004 f91c 	bl	e1260 <digitalRead>
   dd028:	2801      	cmp	r0, #1
   dd02a:	4682      	mov	sl, r0
   dd02c:	d11a      	bne.n	dd064 <_Z8settingsv+0x7dc>
                        strip.clear();
   dd02e:	487a      	ldr	r0, [pc, #488]	; (dd218 <_Z8settingsv+0x990>)
   dd030:	f001 fd95 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dd034:	4649      	mov	r1, r9
   dd036:	6823      	ldr	r3, [r4, #0]
   dd038:	4878      	ldr	r0, [pc, #480]	; (dd21c <_Z8settingsv+0x994>)
   dd03a:	f8cd 9000 	str.w	r9, [sp]
   dd03e:	464a      	mov	r2, r9
   dd040:	f7fc f916 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(6,1);
   dd044:	f004 f936 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd048:	4651      	mov	r1, sl
   dd04a:	2006      	movs	r0, #6
   dd04c:	f7f7 f9a6 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(6,0);
                    }
                    delay(5);
   dd050:	2005      	movs	r0, #5
   dd052:	f002 fe4f 	bl	dfcf4 <delay>
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dd056:	2001      	movs	r0, #1
   dd058:	f004 f902 	bl	e1260 <digitalRead>
   dd05c:	4681      	mov	r9, r0
   dd05e:	2800      	cmp	r0, #0
   dd060:	d0e0      	beq.n	dd024 <_Z8settingsv+0x79c>
   dd062:	e016      	b.n	dd092 <_Z8settingsv+0x80a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(6,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dd064:	2002      	movs	r0, #2
   dd066:	f004 f8fb 	bl	e1260 <digitalRead>
   dd06a:	2801      	cmp	r0, #1
   dd06c:	d1f0      	bne.n	dd050 <_Z8settingsv+0x7c8>
                        strip.clear();
   dd06e:	486a      	ldr	r0, [pc, #424]	; (dd218 <_Z8settingsv+0x990>)
   dd070:	f001 fd75 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dd074:	4649      	mov	r1, r9
   dd076:	464b      	mov	r3, r9
   dd078:	682a      	ldr	r2, [r5, #0]
   dd07a:	f8cd 9000 	str.w	r9, [sp]
   dd07e:	4868      	ldr	r0, [pc, #416]	; (dd220 <_Z8settingsv+0x998>)
   dd080:	f7fc f8f6 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(6,0);
   dd084:	f004 f916 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd088:	4649      	mov	r1, r9
   dd08a:	2006      	movs	r0, #6
   dd08c:	f7f7 f986 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dd090:	e7de      	b.n	dd050 <_Z8settingsv+0x7c8>
                    }
                    delay(5);
                }
                strip.clear();
   dd092:	4861      	ldr	r0, [pc, #388]	; (dd218 <_Z8settingsv+0x990>)
   dd094:	f001 fd63 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dd098:	2001      	movs	r0, #1
   dd09a:	f004 f8e1 	bl	e1260 <digitalRead>
   dd09e:	2801      	cmp	r0, #1
   dd0a0:	d103      	bne.n	dd0aa <_Z8settingsv+0x822>
                {
                    delay(5);
   dd0a2:	2005      	movs	r0, #5
   dd0a4:	f002 fe26 	bl	dfcf4 <delay>
                        EEPROM.write(6,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dd0a8:	e7f6      	b.n	dd098 <_Z8settingsv+0x810>
                {
                    delay(5);
                }
            }
        }
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dd0aa:	2000      	movs	r0, #0
   dd0ac:	f004 f8d8 	bl	e1260 <digitalRead>
   dd0b0:	b9c0      	cbnz	r0, dd0e4 <_Z8settingsv+0x85c>
   dd0b2:	2001      	movs	r0, #1
   dd0b4:	f004 f8d4 	bl	e1260 <digitalRead>
   dd0b8:	b9a0      	cbnz	r0, dd0e4 <_Z8settingsv+0x85c>
   dd0ba:	2002      	movs	r0, #2
   dd0bc:	f004 f8d0 	bl	e1260 <digitalRead>
   dd0c0:	2801      	cmp	r0, #1
   dd0c2:	d10f      	bne.n	dd0e4 <_Z8settingsv+0x85c>
        {
            if(smode < 9){
   dd0c4:	f1b8 0f08 	cmp.w	r8, #8
   dd0c8:	f300 80a3 	bgt.w	dd212 <_Z8settingsv+0x98a>
                smode++;
   dd0cc:	f108 0801 	add.w	r8, r8, #1
                dispm++;
   dd0d0:	3701      	adds	r7, #1
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dd0d2:	2002      	movs	r0, #2
   dd0d4:	f004 f8c4 	bl	e1260 <digitalRead>
   dd0d8:	2801      	cmp	r0, #1
   dd0da:	f000 8090 	beq.w	dd1fe <_Z8settingsv+0x976>
            {
                delay(5);
            }
            strip.clear();
   dd0de:	484e      	ldr	r0, [pc, #312]	; (dd218 <_Z8settingsv+0x990>)
   dd0e0:	f001 fd3d 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == LOW)
   dd0e4:	2000      	movs	r0, #0
   dd0e6:	f004 f8bb 	bl	e1260 <digitalRead>
   dd0ea:	2801      	cmp	r0, #1
   dd0ec:	d116      	bne.n	dd11c <_Z8settingsv+0x894>
   dd0ee:	f004 f8b7 	bl	e1260 <digitalRead>
   dd0f2:	b998      	cbnz	r0, dd11c <_Z8settingsv+0x894>
   dd0f4:	2002      	movs	r0, #2
   dd0f6:	f004 f8b3 	bl	e1260 <digitalRead>
   dd0fa:	b978      	cbnz	r0, dd11c <_Z8settingsv+0x894>
        {
            if(smode > 1){
   dd0fc:	f1b8 0f01 	cmp.w	r8, #1
   dd100:	f000 80a0 	beq.w	dd244 <_Z8settingsv+0x9bc>
                smode--;
   dd104:	f108 38ff 	add.w	r8, r8, #4294967295
                dispm--;
   dd108:	3f01      	subs	r7, #1
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dd10a:	2000      	movs	r0, #0
   dd10c:	f004 f8a8 	bl	e1260 <digitalRead>
   dd110:	2801      	cmp	r0, #1
   dd112:	f000 808d 	beq.w	dd230 <_Z8settingsv+0x9a8>
            {
                delay(5);
            }
            strip.clear();
   dd116:	4840      	ldr	r0, [pc, #256]	; (dd218 <_Z8settingsv+0x990>)
   dd118:	f001 fd21 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dd11c:	2000      	movs	r0, #0
   dd11e:	f004 f89f 	bl	e1260 <digitalRead>
   dd122:	2801      	cmp	r0, #1
   dd124:	f040 8091 	bne.w	dd24a <_Z8settingsv+0x9c2>
   dd128:	f004 f89a 	bl	e1260 <digitalRead>
   dd12c:	4681      	mov	r9, r0
   dd12e:	2800      	cmp	r0, #0
   dd130:	f040 808b 	bne.w	dd24a <_Z8settingsv+0x9c2>
   dd134:	2002      	movs	r0, #2
   dd136:	f004 f893 	bl	e1260 <digitalRead>
   dd13a:	2801      	cmp	r0, #1
   dd13c:	f040 8085 	bne.w	dd24a <_Z8settingsv+0x9c2>
        {
            strip.clear();
   dd140:	4835      	ldr	r0, [pc, #212]	; (dd218 <_Z8settingsv+0x990>)
   dd142:	f001 fd0c 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
            sett = false;
        }
        delay(50);
   dd146:	2032      	movs	r0, #50	; 0x32
   dd148:	f002 fdd4 	bl	dfcf4 <delay>
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
    while(sett == true)
   dd14c:	f1b9 0f00 	cmp.w	r9, #0
   dd150:	f47f abbf 	bne.w	dc8d2 <_Z8settingsv+0x4a>
            strip.clear();
            sett = false;
        }
        delay(50);
    }
}                                                           
   dd154:	b011      	add	sp, #68	; 0x44
   dd156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
   dd15a:	f109 0901 	add.w	r9, r9, #1
                        while(digitalRead(D2) == HIGH)
   dd15e:	2002      	movs	r0, #2
   dd160:	f004 f87e 	bl	e1260 <digitalRead>
   dd164:	2801      	cmp	r0, #1
   dd166:	f47f ad16 	bne.w	dcb96 <_Z8settingsv+0x30e>
                        {
                            delay(5);
   dd16a:	2005      	movs	r0, #5
   dd16c:	f002 fdc2 	bl	dfcf4 <delay>
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
                        while(digitalRead(D2) == HIGH)
   dd170:	e7f5      	b.n	dd15e <_Z8settingsv+0x8d6>
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
   dd172:	f109 39ff 	add.w	r9, r9, #4294967295
                        while(digitalRead(D0) == HIGH)
   dd176:	2000      	movs	r0, #0
   dd178:	f004 f872 	bl	e1260 <digitalRead>
   dd17c:	2801      	cmp	r0, #1
   dd17e:	f47f ad56 	bne.w	dcc2e <_Z8settingsv+0x3a6>
                        {
                            delay(5);
   dd182:	2005      	movs	r0, #5
   dd184:	f002 fdb6 	bl	dfcf4 <delay>
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
                        while(digitalRead(D0) == HIGH)
   dd188:	e7f5      	b.n	dd176 <_Z8settingsv+0x8ee>
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
                        strip.clear();
                        strdisp("RED",0,rclock,0,0);
                        EEPROM.write(5,1);
                    }
                    else if(digitalRead(D2) == HIGH && digitalRead(D0) == LOW){
   dd18a:	2002      	movs	r0, #2
   dd18c:	f004 f868 	bl	e1260 <digitalRead>
   dd190:	2801      	cmp	r0, #1
   dd192:	d116      	bne.n	dd1c2 <_Z8settingsv+0x93a>
   dd194:	2000      	movs	r0, #0
   dd196:	f004 f863 	bl	e1260 <digitalRead>
   dd19a:	4681      	mov	r9, r0
   dd19c:	b988      	cbnz	r0, dd1c2 <_Z8settingsv+0x93a>
                        strip.clear();
   dd19e:	481e      	ldr	r0, [pc, #120]	; (dd218 <_Z8settingsv+0x990>)
   dd1a0:	f001 fcdd 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("GREEN",0,0,gclock,0);
   dd1a4:	4649      	mov	r1, r9
   dd1a6:	6823      	ldr	r3, [r4, #0]
   dd1a8:	f8cd 9000 	str.w	r9, [sp]
   dd1ac:	464a      	mov	r2, r9
   dd1ae:	481e      	ldr	r0, [pc, #120]	; (dd228 <_Z8settingsv+0x9a0>)
   dd1b0:	f7fc f85e 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(5,2);
   dd1b4:	f004 f87e 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd1b8:	2102      	movs	r1, #2
   dd1ba:	2005      	movs	r0, #5
   dd1bc:	f7f7 f8ee 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dd1c0:	e701      	b.n	dcfc6 <_Z8settingsv+0x73e>
                    }
                    else if(digitalRead(D0) == HIGH && digitalRead(D2) == HIGH)
   dd1c2:	2000      	movs	r0, #0
   dd1c4:	f004 f84c 	bl	e1260 <digitalRead>
   dd1c8:	2801      	cmp	r0, #1
   dd1ca:	f47f aefc 	bne.w	dcfc6 <_Z8settingsv+0x73e>
   dd1ce:	2002      	movs	r0, #2
   dd1d0:	f004 f846 	bl	e1260 <digitalRead>
   dd1d4:	2801      	cmp	r0, #1
   dd1d6:	f47f aef6 	bne.w	dcfc6 <_Z8settingsv+0x73e>
                    {
                        strip.clear();
   dd1da:	480f      	ldr	r0, [pc, #60]	; (dd218 <_Z8settingsv+0x990>)
   dd1dc:	f001 fcbf 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("BLUE",0,0,0,bclock);
   dd1e0:	6833      	ldr	r3, [r6, #0]
   dd1e2:	9300      	str	r3, [sp, #0]
   dd1e4:	2300      	movs	r3, #0
   dd1e6:	4619      	mov	r1, r3
   dd1e8:	461a      	mov	r2, r3
   dd1ea:	4810      	ldr	r0, [pc, #64]	; (dd22c <_Z8settingsv+0x9a4>)
   dd1ec:	f7fc f840 	bl	d9270 <_Z7strdispPKciiii>
                        EEPROM.write(5,3);
   dd1f0:	f004 f860 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd1f4:	2103      	movs	r1, #3
   dd1f6:	2005      	movs	r0, #5
   dd1f8:	f7f7 f8d0 	bl	d439c <_ZN11EEPROMClass5writeEih.isra.10>
   dd1fc:	e6e3      	b.n	dcfc6 <_Z8settingsv+0x73e>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dd1fe:	2000      	movs	r0, #0
   dd200:	f004 f82e 	bl	e1260 <digitalRead>
   dd204:	2800      	cmp	r0, #0
   dd206:	f47f af6a 	bne.w	dd0de <_Z8settingsv+0x856>
            {
                delay(5);
   dd20a:	2005      	movs	r0, #5
   dd20c:	f002 fd72 	bl	dfcf4 <delay>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dd210:	e75f      	b.n	dd0d2 <_Z8settingsv+0x84a>
                smode++;
                dispm++;
            }
            else{
                smode = 1;
                dispm = 1;
   dd212:	4607      	mov	r7, r0
            if(smode < 9){
                smode++;
                dispm++;
            }
            else{
                smode = 1;
   dd214:	4680      	mov	r8, r0
   dd216:	e75c      	b.n	dd0d2 <_Z8settingsv+0x84a>
   dd218:	2003e31c 	.word	0x2003e31c
   dd21c:	000e4592 	.word	0x000e4592
   dd220:	000e4596 	.word	0x000e4596
   dd224:	000e4599 	.word	0x000e4599
   dd228:	000e459d 	.word	0x000e459d
   dd22c:	000e45a3 	.word	0x000e45a3
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dd230:	2002      	movs	r0, #2
   dd232:	f004 f815 	bl	e1260 <digitalRead>
   dd236:	2800      	cmp	r0, #0
   dd238:	f47f af6d 	bne.w	dd116 <_Z8settingsv+0x88e>
            {
                delay(5);
   dd23c:	2005      	movs	r0, #5
   dd23e:	f002 fd59 	bl	dfcf4 <delay>
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dd242:	e762      	b.n	dd10a <_Z8settingsv+0x882>
                smode--;
                dispm--;
            }
            else{
                smode = 9;
                dispm = 9;
   dd244:	2709      	movs	r7, #9
            if(smode > 1){
                smode--;
                dispm--;
            }
            else{
                smode = 9;
   dd246:	46b8      	mov	r8, r7
   dd248:	e75f      	b.n	dd10a <_Z8settingsv+0x882>
   dd24a:	f04f 0901 	mov.w	r9, #1
   dd24e:	e77a      	b.n	dd146 <_Z8settingsv+0x8be>

000dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dd250:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   dd252:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dd254:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   dd256:	b17c      	cbz	r4, dd278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dd258:	6863      	ldr	r3, [r4, #4]
   dd25a:	3b01      	subs	r3, #1
   dd25c:	6063      	str	r3, [r4, #4]
   dd25e:	b95b      	cbnz	r3, dd278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   dd260:	6823      	ldr	r3, [r4, #0]
   dd262:	4620      	mov	r0, r4
   dd264:	689b      	ldr	r3, [r3, #8]
   dd266:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dd268:	68a3      	ldr	r3, [r4, #8]
   dd26a:	3b01      	subs	r3, #1
   dd26c:	60a3      	str	r3, [r4, #8]
   dd26e:	b91b      	cbnz	r3, dd278 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   dd270:	6823      	ldr	r3, [r4, #0]
   dd272:	4620      	mov	r0, r4
   dd274:	68db      	ldr	r3, [r3, #12]
   dd276:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   dd278:	4628      	mov	r0, r5
   dd27a:	bd38      	pop	{r3, r4, r5, pc}

000dd27c <setup>:

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dd27c:	b530      	push	{r4, r5, lr}
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dd27e:	2102      	movs	r1, #2

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dd280:	b085      	sub	sp, #20
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dd282:	484c      	ldr	r0, [pc, #304]	; (dd3b4 <setup+0x138>)
   dd284:	4c4c      	ldr	r4, [pc, #304]	; (dd3b8 <setup+0x13c>)
   dd286:	f003 fcf5 	bl	e0c74 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>
    Particle.subscribe("hook-response/Weather", myHandler, MY_DEVICES);             //Subscribes to Weather API event
   dd28a:	2200      	movs	r2, #0
   dd28c:	494b      	ldr	r1, [pc, #300]	; (dd3bc <setup+0x140>)
   dd28e:	484c      	ldr	r0, [pc, #304]	; (dd3c0 <setup+0x144>)
   dd290:	f7f6 ffc0 	bl	d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>
    Particle.subscribe("hook-response/co2dat", co2Handler, MY_DEVICES);             //Subscribes to CO2 data api
   dd294:	2200      	movs	r2, #0
   dd296:	494b      	ldr	r1, [pc, #300]	; (dd3c4 <setup+0x148>)
   dd298:	484b      	ldr	r0, [pc, #300]	; (dd3c8 <setup+0x14c>)
   dd29a:	f7f6 ffbb 	bl	d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>
    Particle.subscribe("hook-response/itempdat", itHandler, MY_DEVICES);            //Subscribes to inside temp data api
   dd29e:	2200      	movs	r2, #0
   dd2a0:	494a      	ldr	r1, [pc, #296]	; (dd3cc <setup+0x150>)
   dd2a2:	484b      	ldr	r0, [pc, #300]	; (dd3d0 <setup+0x154>)
   dd2a4:	f7f6 ffb6 	bl	d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>
    Particle.subscribe("hook-response/getState", mshHdlr2, MY_DEVICES);
   dd2a8:	2200      	movs	r2, #0
   dd2aa:	494a      	ldr	r1, [pc, #296]	; (dd3d4 <setup+0x158>)
   dd2ac:	484a      	ldr	r0, [pc, #296]	; (dd3d8 <setup+0x15c>)
   dd2ae:	f7f6 ffb1 	bl	d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>
    Mesh.subscribe("toggleBtn", mshHdlr);
   dd2b2:	4a4a      	ldr	r2, [pc, #296]	; (dd3dc <setup+0x160>)
   dd2b4:	494a      	ldr	r1, [pc, #296]	; (dd3e0 <setup+0x164>)
   dd2b6:	484b      	ldr	r0, [pc, #300]	; (dd3e4 <setup+0x168>)
   dd2b8:	f003 fd8e 	bl	e0dd8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd2bc:	2500      	movs	r5, #0
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
    return subscribe(name, handler, ALL_DEVICES);
   dd2be:	2201      	movs	r2, #1
   dd2c0:	4949      	ldr	r1, [pc, #292]	; (dd3e8 <setup+0x16c>)
   dd2c2:	484a      	ldr	r0, [pc, #296]	; (dd3ec <setup+0x170>)
   dd2c4:	f7f6 ffa6 	bl	d4214 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.6>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd2c8:	7823      	ldrb	r3, [r4, #0]
    Particle.subscribe("pclock999", myHandler2);                                    //Subscribes to Google Home IFTTT integration
    Particle.publish("Weather", "1", PRIVATE);                                      //Initial Publishes to get weather data
   dd2ca:	4a49      	ldr	r2, [pc, #292]	; (dd3f0 <setup+0x174>)
   dd2cc:	4949      	ldr	r1, [pc, #292]	; (dd3f4 <setup+0x178>)
   dd2ce:	f88d 5000 	strb.w	r5, [sp]
   dd2d2:	a802      	add	r0, sp, #8
   dd2d4:	f7f7 f864 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd2d8:	a803      	add	r0, sp, #12
   dd2da:	f7ff ffb9 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if(EEPROM.read(3) == 1)
   dd2de:	f003 ffe9 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd2e2:	2003      	movs	r0, #3
   dd2e4:	f7f6 ffa0 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd2e8:	2801      	cmp	r0, #1
   dd2ea:	d10a      	bne.n	dd302 <setup+0x86>
   dd2ec:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("co2dat", "1", PRIVATE);
   dd2ee:	4a40      	ldr	r2, [pc, #256]	; (dd3f0 <setup+0x174>)
   dd2f0:	f88d 5000 	strb.w	r5, [sp]
   dd2f4:	a802      	add	r0, sp, #8
   dd2f6:	4940      	ldr	r1, [pc, #256]	; (dd3f8 <setup+0x17c>)
   dd2f8:	f7f7 f852 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   dd2fc:	a803      	add	r0, sp, #12
   dd2fe:	f7ff ffa7 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    if(EEPROM.read(4) == 1)
   dd302:	f003 ffd7 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd306:	2004      	movs	r0, #4
   dd308:	f7f6 ff8e 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd30c:	2801      	cmp	r0, #1
   dd30e:	d10b      	bne.n	dd328 <setup+0xac>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd310:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd312:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("itempdat", "1", PRIVATE);
   dd314:	4939      	ldr	r1, [pc, #228]	; (dd3fc <setup+0x180>)
   dd316:	f88d 2000 	strb.w	r2, [sp]
   dd31a:	a802      	add	r0, sp, #8
   dd31c:	4a34      	ldr	r2, [pc, #208]	; (dd3f0 <setup+0x174>)
   dd31e:	f7f7 f83f 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   dd322:	a803      	add	r0, sp, #12
   dd324:	f7ff ff94 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
   dd328:	2103      	movs	r1, #3
   dd32a:	2000      	movs	r0, #0
   dd32c:	f003 ff6e 	bl	e120c <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
   dd330:	2103      	movs	r1, #3
   dd332:	2001      	movs	r0, #1
   dd334:	f003 ff6a 	bl	e120c <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
   dd338:	2103      	movs	r1, #3
   dd33a:	2002      	movs	r0, #2
   dd33c:	f003 ff66 	bl	e120c <pinMode>
    scan = 1;                                                                       //scans photoresistor for room brightness
   dd340:	4b2f      	ldr	r3, [pc, #188]	; (dd400 <setup+0x184>)
    photoupd = 0;
    wmode = 1;
    dmode = 1;
    fdark = 2;
    tmr = 55;
    strip.begin();
   dd342:	4830      	ldr	r0, [pc, #192]	; (dd404 <setup+0x188>)
        Particle.publish("itempdat", "1", PRIVATE);
    }
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
    pinMode(D1, INPUT_PULLDOWN);
    pinMode(D2, INPUT_PULLDOWN);
    scan = 1;                                                                       //scans photoresistor for room brightness
   dd344:	2401      	movs	r4, #1
   dd346:	601c      	str	r4, [r3, #0]
    photoupd = 0;
   dd348:	4b2f      	ldr	r3, [pc, #188]	; (dd408 <setup+0x18c>)
   dd34a:	2200      	movs	r2, #0
   dd34c:	601a      	str	r2, [r3, #0]
    wmode = 1;
   dd34e:	4b2f      	ldr	r3, [pc, #188]	; (dd40c <setup+0x190>)
   dd350:	601c      	str	r4, [r3, #0]
    dmode = 1;
   dd352:	4b2f      	ldr	r3, [pc, #188]	; (dd410 <setup+0x194>)
   dd354:	601c      	str	r4, [r3, #0]
    fdark = 2;
   dd356:	4b2f      	ldr	r3, [pc, #188]	; (dd414 <setup+0x198>)
   dd358:	2202      	movs	r2, #2
   dd35a:	601a      	str	r2, [r3, #0]
    tmr = 55;
   dd35c:	4b2e      	ldr	r3, [pc, #184]	; (dd418 <setup+0x19c>)
   dd35e:	2237      	movs	r2, #55	; 0x37
   dd360:	601a      	str	r2, [r3, #0]
    strip.begin();
   dd362:	f001 f9f4 	bl	de74e <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
   dd366:	4827      	ldr	r0, [pc, #156]	; (dd404 <setup+0x188>)
   dd368:	f001 fa28 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
    //EEPROM.write(1,18);
    eevalue = EEPROM.read(1);
   dd36c:	f003 ffa2 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd370:	4620      	mov	r0, r4
   dd372:	f7f6 ff59 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd376:	4c29      	ldr	r4, [pc, #164]	; (dd41c <setup+0x1a0>)
   dd378:	7020      	strb	r0, [r4, #0]
    //while(digitalRead(D0) == LOW){
    //    delay(5);
    //}
    //lettest(1000,50,50,50);
    //Time.beginDST();
    strip.clear();
   dd37a:	4822      	ldr	r0, [pc, #136]	; (dd404 <setup+0x188>)
   dd37c:	f001 fbef 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
    Time.zone(12-eevalue);
   dd380:	7823      	ldrb	r3, [r4, #0]
   dd382:	f1c3 030c 	rsb	r3, r3, #12
   dd386:	ee00 3a10 	vmov	s0, r3
   dd38a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
   dd38e:	f002 fc51 	bl	dfc34 <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
   dd392:	f002 fc9b 	bl	dfccc <_ZN9TimeClass6minuteEv>
   dd396:	4b22      	ldr	r3, [pc, #136]	; (dd420 <setup+0x1a4>)
   dd398:	3801      	subs	r0, #1
   dd39a:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
   dd39c:	f002 fc8e 	bl	dfcbc <_ZN9TimeClass12hourFormat12Ev>
   dd3a0:	4b20      	ldr	r3, [pc, #128]	; (dd424 <setup+0x1a8>)
   dd3a2:	3801      	subs	r0, #1
   dd3a4:	6018      	str	r0, [r3, #0]
    bound = dnbound;
   dd3a6:	4b20      	ldr	r3, [pc, #128]	; (dd428 <setup+0x1ac>)
   dd3a8:	2032      	movs	r0, #50	; 0x32
   dd3aa:	6018      	str	r0, [r3, #0]
    delay(50);
   dd3ac:	f002 fca2 	bl	dfcf4 <delay>
        digitalWrite(ANTSW1, 0);
    #else
        digitalWrite(ANTSW1, 0);
        digitalWrite(ANTSW2, 1);
    #endif*/
}
   dd3b0:	b005      	add	sp, #20
   dd3b2:	bd30      	pop	{r4, r5, pc}
   dd3b4:	2003e510 	.word	0x2003e510
   dd3b8:	2003e334 	.word	0x2003e334
   dd3bc:	000daff9 	.word	0x000daff9
   dd3c0:	000e45a8 	.word	0x000e45a8
   dd3c4:	000d422d 	.word	0x000d422d
   dd3c8:	000e45be 	.word	0x000e45be
   dd3cc:	000d4101 	.word	0x000d4101
   dd3d0:	000e45d3 	.word	0x000e45d3
   dd3d4:	000d40bd 	.word	0x000d40bd
   dd3d8:	000e45ea 	.word	0x000e45ea
   dd3dc:	000dd42d 	.word	0x000dd42d
   dd3e0:	000e4601 	.word	0x000e4601
   dd3e4:	2003e518 	.word	0x2003e518
   dd3e8:	000d41ad 	.word	0x000d41ad
   dd3ec:	000e460b 	.word	0x000e460b
   dd3f0:	000e490b 	.word	0x000e490b
   dd3f4:	000e45b6 	.word	0x000e45b6
   dd3f8:	000e45cc 	.word	0x000e45cc
   dd3fc:	000e45e1 	.word	0x000e45e1
   dd400:	2003e30c 	.word	0x2003e30c
   dd404:	2003e31c 	.word	0x2003e31c
   dd408:	2003e348 	.word	0x2003e348
   dd40c:	2003e300 	.word	0x2003e300
   dd410:	2003e330 	.word	0x2003e330
   dd414:	2003e310 	.word	0x2003e310
   dd418:	2003e364 	.word	0x2003e364
   dd41c:	2003e368 	.word	0x2003e368
   dd420:	2003e350 	.word	0x2003e350
   dd424:	2003e318 	.word	0x2003e318
   dd428:	2003e338 	.word	0x2003e338

000dd42c <_Z7mshHdlrPKcS0_>:
        {
            dmode = 2;
        }
    }
}
void mshHdlr(const char *event, const char *data) {
   dd42c:	b530      	push	{r4, r5, lr}
   dd42e:	4d0d      	ldr	r5, [pc, #52]	; (dd464 <_Z7mshHdlrPKcS0_+0x38>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   dd430:	4a0d      	ldr	r2, [pc, #52]	; (dd468 <_Z7mshHdlrPKcS0_+0x3c>)
   dd432:	782b      	ldrb	r3, [r5, #0]
   dd434:	490d      	ldr	r1, [pc, #52]	; (dd46c <_Z7mshHdlrPKcS0_+0x40>)
   dd436:	b085      	sub	sp, #20
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd438:	2400      	movs	r4, #0
   dd43a:	a802      	add	r0, sp, #8
   dd43c:	f88d 4000 	strb.w	r4, [sp]
   dd440:	f7f6 ffae 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   dd444:	a803      	add	r0, sp, #12
   dd446:	f7ff ff03 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd44a:	782b      	ldrb	r3, [r5, #0]
   dd44c:	4a08      	ldr	r2, [pc, #32]	; (dd470 <_Z7mshHdlrPKcS0_+0x44>)
   dd44e:	4909      	ldr	r1, [pc, #36]	; (dd474 <_Z7mshHdlrPKcS0_+0x48>)
   dd450:	f88d 4000 	strb.w	r4, [sp]
   dd454:	a802      	add	r0, sp, #8
   dd456:	f7f6 ffa3 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   dd45a:	a803      	add	r0, sp, #12
   dd45c:	f7ff fef8 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
   dd460:	b005      	add	sp, #20
   dd462:	bd30      	pop	{r4, r5, pc}
   dd464:	2003e2f8 	.word	0x2003e2f8
   dd468:	000e490b 	.word	0x000e490b
   dd46c:	000e45f8 	.word	0x000e45f8
   dd470:	000e4615 	.word	0x000e4615
   dd474:	000e461c 	.word	0x000e461c

000dd478 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd478:	2300      	movs	r3, #0
   dd47a:	2202      	movs	r2, #2
   dd47c:	f001 be8c 	b.w	df198 <spark_variable>

000dd480 <loop>:
            sett = false;
        }
        delay(50);
    }
}                                                           
void loop() {                           //General operating loop of the program
   dd480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Particle.variable("Photo", analogRead(A4));
   dd484:	200f      	movs	r0, #15
            sett = false;
        }
        delay(50);
    }
}                                                           
void loop() {                           //General operating loop of the program
   dd486:	b08b      	sub	sp, #44	; 0x2c
    Particle.variable("Photo", analogRead(A4));
   dd488:	f003 fefd 	bl	e1286 <analogRead>
   dd48c:	ac0a      	add	r4, sp, #40	; 0x28
   dd48e:	f844 0d08 	str.w	r0, [r4, #-8]!
   dd492:	48bf      	ldr	r0, [pc, #764]	; (dd790 <loop+0x310>)
   dd494:	4621      	mov	r1, r4
   dd496:	f7ff ffef 	bl	dd478 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    Particle.variable("Co2", ico2);
   dd49a:	49be      	ldr	r1, [pc, #760]	; (dd794 <loop+0x314>)
   dd49c:	48be      	ldr	r0, [pc, #760]	; (dd798 <loop+0x318>)
   dd49e:	f7ff ffeb 	bl	dd478 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    Particle.variable("Inside Temp", itemp);
   dd4a2:	49be      	ldr	r1, [pc, #760]	; (dd79c <loop+0x31c>)
   dd4a4:	48be      	ldr	r0, [pc, #760]	; (dd7a0 <loop+0x320>)
   dd4a6:	f7ff ffe7 	bl	dd478 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dd4aa:	4bbe      	ldr	r3, [pc, #760]	; (dd7a4 <loop+0x324>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd4ac:	48be      	ldr	r0, [pc, #760]	; (dd7a8 <loop+0x328>)
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dd4ae:	781b      	ldrb	r3, [r3, #0]
   dd4b0:	9308      	str	r3, [sp, #32]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd4b2:	4621      	mov	r1, r4
   dd4b4:	2300      	movs	r3, #0
   dd4b6:	2202      	movs	r2, #2
   dd4b8:	f001 fe6e 	bl	df198 <spark_variable>
    Particle.variable("EEPROM", eevalue);
    int hr = Time.hourFormat12();
   dd4bc:	f002 fbfe 	bl	dfcbc <_ZN9TimeClass12hourFormat12Ev>
   dd4c0:	4607      	mov	r7, r0
    int min = Time.minute();
   dd4c2:	f002 fc03 	bl	dfccc <_ZN9TimeClass6minuteEv>
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dd4c6:	4bb9      	ldr	r3, [pc, #740]	; (dd7ac <loop+0x32c>)
    Particle.variable("Photo", analogRead(A4));
    Particle.variable("Co2", ico2);
    Particle.variable("Inside Temp", itemp);
    Particle.variable("EEPROM", eevalue);
    int hr = Time.hourFormat12();
    int min = Time.minute();
   dd4c8:	9002      	str	r0, [sp, #8]
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dd4ca:	f8d3 a000 	ldr.w	sl, [r3]
   dd4ce:	9303      	str	r3, [sp, #12]
   dd4d0:	f1ba 0f01 	cmp.w	sl, #1
   dd4d4:	4cb6      	ldr	r4, [pc, #728]	; (dd7b0 <loop+0x330>)
   dd4d6:	d173      	bne.n	dd5c0 <loop+0x140>
        scan=2;
   dd4d8:	f04f 0902 	mov.w	r9, #2
        if(analogRead(A4) < bound) {
   dd4dc:	200f      	movs	r0, #15
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
        scan=2;
   dd4de:	f8c3 9000 	str.w	r9, [r3]
        if(analogRead(A4) < bound) {
   dd4e2:	f003 fed0 	bl	e1286 <analogRead>
   dd4e6:	4ab3      	ldr	r2, [pc, #716]	; (dd7b4 <loop+0x334>)
   dd4e8:	f8df b2e8 	ldr.w	fp, [pc, #744]	; dd7d4 <loop+0x354>
   dd4ec:	6813      	ldr	r3, [r2, #0]
   dd4ee:	f8df 82d4 	ldr.w	r8, [pc, #724]	; dd7c4 <loop+0x344>
   dd4f2:	4eb1      	ldr	r6, [pc, #708]	; (dd7b8 <loop+0x338>)
   dd4f4:	4db1      	ldr	r5, [pc, #708]	; (dd7bc <loop+0x33c>)
   dd4f6:	4298      	cmp	r0, r3
   dd4f8:	da2f      	bge.n	dd55a <loop+0xda>
            bound = upbound;
   dd4fa:	21fa      	movs	r1, #250	; 0xfa
   dd4fc:	6011      	str	r1, [r2, #0]
            if(fdark == 2){
   dd4fe:	f8db 2000 	ldr.w	r2, [fp]
   dd502:	454a      	cmp	r2, r9
   dd504:	d104      	bne.n	dd510 <loop+0x90>
                strip.clear();
   dd506:	48ae      	ldr	r0, [pc, #696]	; (dd7c0 <loop+0x340>)
   dd508:	f001 fb29 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 1;
   dd50c:	f8cb a000 	str.w	sl, [fp]
            }
            rclock = 0;
   dd510:	2300      	movs	r3, #0
   dd512:	f8c8 3000 	str.w	r3, [r8]
            gclock = 0;
   dd516:	6033      	str	r3, [r6, #0]
            bclock = 0;
   dd518:	602b      	str	r3, [r5, #0]
            if(EEPROM.read(5) == 2){
   dd51a:	f003 fecb 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd51e:	2005      	movs	r0, #5
   dd520:	f7f6 fe82 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd524:	2802      	cmp	r0, #2
   dd526:	d103      	bne.n	dd530 <loop+0xb0>
                gclock = 1;
   dd528:	4ba3      	ldr	r3, [pc, #652]	; (dd7b8 <loop+0x338>)
   dd52a:	2201      	movs	r2, #1
   dd52c:	601a      	str	r2, [r3, #0]
   dd52e:	e00a      	b.n	dd546 <loop+0xc6>
            }
            else if(EEPROM.read(5) == 3){
   dd530:	f003 fec0 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd534:	2005      	movs	r0, #5
   dd536:	f7f6 fe77 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd53a:	2803      	cmp	r0, #3
                bclock = 1;
   dd53c:	bf0c      	ite	eq
   dd53e:	4a9f      	ldreq	r2, [pc, #636]	; (dd7bc <loop+0x33c>)
            }
            else{
                rclock = 1;
   dd540:	4aa0      	ldrne	r2, [pc, #640]	; (dd7c4 <loop+0x344>)
   dd542:	2301      	movs	r3, #1
   dd544:	6013      	str	r3, [r2, #0]
            }
            dmode = 1;
   dd546:	2001      	movs	r0, #1
   dd548:	6020      	str	r0, [r4, #0]
            RGB.control(true);
   dd54a:	f002 fbe5 	bl	dfd18 <_ZN8RGBClass7controlEb>
            RGB.color(0, 0, 0);
   dd54e:	2200      	movs	r2, #0
   dd550:	4611      	mov	r1, r2
   dd552:	4610      	mov	r0, r2
   dd554:	f002 fbf0 	bl	dfd38 <_ZN8RGBClass5colorEiii>
   dd558:	e032      	b.n	dd5c0 <loop+0x140>
        }
        else {
            if(fdark == 1){
   dd55a:	f8db 2000 	ldr.w	r2, [fp]
   dd55e:	2a01      	cmp	r2, #1
   dd560:	d104      	bne.n	dd56c <loop+0xec>
                strip.clear();
   dd562:	4897      	ldr	r0, [pc, #604]	; (dd7c0 <loop+0x340>)
   dd564:	f001 fafb 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 2;
   dd568:	f8cb 9000 	str.w	r9, [fp]
            }
            rclock = analogRead(A4)/18;
   dd56c:	200f      	movs	r0, #15
   dd56e:	f003 fe8a 	bl	e1286 <analogRead>
   dd572:	f04f 0912 	mov.w	r9, #18
   dd576:	fb90 f0f9 	sdiv	r0, r0, r9
   dd57a:	f8c8 0000 	str.w	r0, [r8]
            gclock = (analogRead(A4)/18)*0.8;
   dd57e:	200f      	movs	r0, #15
   dd580:	f003 fe81 	bl	e1286 <analogRead>
   dd584:	fb90 f0f9 	sdiv	r0, r0, r9
   dd588:	f004 f9a6 	bl	e18d8 <__aeabi_i2d>
   dd58c:	a37c      	add	r3, pc, #496	; (adr r3, dd780 <loop+0x300>)
   dd58e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd592:	f004 fa07 	bl	e19a4 <__aeabi_dmul>
   dd596:	f004 fc9f 	bl	e1ed8 <__aeabi_d2iz>
   dd59a:	6030      	str	r0, [r6, #0]
            bclock = (analogRead(A4)/18)*0.6;
   dd59c:	200f      	movs	r0, #15
   dd59e:	f003 fe72 	bl	e1286 <analogRead>
   dd5a2:	fb90 f0f9 	sdiv	r0, r0, r9
   dd5a6:	f004 f997 	bl	e18d8 <__aeabi_i2d>
   dd5aa:	a377      	add	r3, pc, #476	; (adr r3, dd788 <loop+0x308>)
   dd5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd5b0:	f004 f9f8 	bl	e19a4 <__aeabi_dmul>
   dd5b4:	f004 fc90 	bl	e1ed8 <__aeabi_d2iz>
            bound = dnbound;
   dd5b8:	4a7e      	ldr	r2, [pc, #504]	; (dd7b4 <loop+0x334>)
                strip.clear();
                fdark = 2;
            }
            rclock = analogRead(A4)/18;
            gclock = (analogRead(A4)/18)*0.8;
            bclock = (analogRead(A4)/18)*0.6;
   dd5ba:	6028      	str	r0, [r5, #0]
            bound = dnbound;
   dd5bc:	2332      	movs	r3, #50	; 0x32
   dd5be:	6013      	str	r3, [r2, #0]
    
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
   dd5c0:	2000      	movs	r0, #0
   dd5c2:	f003 fe4d 	bl	e1260 <digitalRead>
   dd5c6:	2801      	cmp	r0, #1
   dd5c8:	d108      	bne.n	dd5dc <loop+0x15c>
   dd5ca:	f003 fe49 	bl	e1260 <digitalRead>
   dd5ce:	b928      	cbnz	r0, dd5dc <loop+0x15c>
   dd5d0:	2002      	movs	r0, #2
   dd5d2:	f003 fe45 	bl	e1260 <digitalRead>
   dd5d6:	2801      	cmp	r0, #1
   dd5d8:	f000 86f1 	beq.w	de3be <loop+0xf3e>
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
   dd5dc:	2002      	movs	r0, #2
   dd5de:	f003 fe3f 	bl	e1260 <digitalRead>
   dd5e2:	2801      	cmp	r0, #1
   dd5e4:	f040 86ef 	bne.w	de3c6 <loop+0xf46>
   dd5e8:	f003 fe3a 	bl	e1260 <digitalRead>
   dd5ec:	2800      	cmp	r0, #0
   dd5ee:	f040 86ea 	bne.w	de3c6 <loop+0xf46>
   dd5f2:	f003 fe35 	bl	e1260 <digitalRead>
   dd5f6:	4682      	mov	sl, r0
   dd5f8:	2800      	cmp	r0, #0
   dd5fa:	f040 86e4 	bne.w	de3c6 <loop+0xf46>
        strip.clear();
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd5fe:	4e6f      	ldr	r6, [pc, #444]	; (dd7bc <loop+0x33c>)
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dd600:	486f      	ldr	r0, [pc, #444]	; (dd7c0 <loop+0x340>)
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd602:	f8df 91b4 	ldr.w	r9, [pc, #436]	; dd7b8 <loop+0x338>
   dd606:	f8df 81bc 	ldr.w	r8, [pc, #444]	; dd7c4 <loop+0x344>
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dd60a:	f001 faa8 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd60e:	6831      	ldr	r1, [r6, #0]
   dd610:	f8d9 3000 	ldr.w	r3, [r9]
   dd614:	f8d8 2000 	ldr.w	r2, [r8]
   dd618:	486b      	ldr	r0, [pc, #428]	; (dd7c8 <loop+0x348>)
   dd61a:	0049      	lsls	r1, r1, #1
   dd61c:	2503      	movs	r5, #3
   dd61e:	f04f 0b02 	mov.w	fp, #2
   dd622:	9100      	str	r1, [sp, #0]
   dd624:	fb93 f3f5 	sdiv	r3, r3, r5
   dd628:	4651      	mov	r1, sl
   dd62a:	fb92 f2fb 	sdiv	r2, r2, fp
   dd62e:	f7fb fe1f 	bl	d9270 <_Z7strdispPKciiii>
        snum(ico2/1000, 143, rclock/2,gclock/3, bclock*2);
   dd632:	6831      	ldr	r1, [r6, #0]
   dd634:	f8df a15c 	ldr.w	sl, [pc, #348]	; dd794 <loop+0x314>
   dd638:	f8d9 3000 	ldr.w	r3, [r9]
   dd63c:	f8d8 2000 	ldr.w	r2, [r8]
   dd640:	f8da 0000 	ldr.w	r0, [sl]
   dd644:	fb93 f3f5 	sdiv	r3, r3, r5
   dd648:	0049      	lsls	r1, r1, #1
   dd64a:	9100      	str	r1, [sp, #0]
   dd64c:	fb92 f2fb 	sdiv	r2, r2, fp
   dd650:	218f      	movs	r1, #143	; 0x8f
   dd652:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   dd656:	fb90 f0f4 	sdiv	r0, r0, r4
   dd65a:	f7f8 feef 	bl	d643c <_Z4snumiiiii>
        snum((ico2/(100))%10, 175, rclock/2,gclock/3, bclock*2);
   dd65e:	f8da 0000 	ldr.w	r0, [sl]
   dd662:	f8d9 3000 	ldr.w	r3, [r9]
   dd666:	f8d8 2000 	ldr.w	r2, [r8]
   dd66a:	fb93 f3f5 	sdiv	r3, r3, r5
   dd66e:	2164      	movs	r1, #100	; 0x64
   dd670:	fb90 f0f1 	sdiv	r0, r0, r1
   dd674:	6831      	ldr	r1, [r6, #0]
   dd676:	fb92 f2fb 	sdiv	r2, r2, fp
   dd67a:	240a      	movs	r4, #10
   dd67c:	0049      	lsls	r1, r1, #1
   dd67e:	fb90 fef4 	sdiv	lr, r0, r4
   dd682:	9100      	str	r1, [sp, #0]
   dd684:	fb04 001e 	mls	r0, r4, lr, r0
   dd688:	21af      	movs	r1, #175	; 0xaf
   dd68a:	f7f8 fed7 	bl	d643c <_Z4snumiiiii>
        snum((ico2/(10))%10, 207, rclock/2,gclock/3, bclock*2);
   dd68e:	6831      	ldr	r1, [r6, #0]
   dd690:	f8d9 3000 	ldr.w	r3, [r9]
   dd694:	f8d8 2000 	ldr.w	r2, [r8]
   dd698:	f8da 0000 	ldr.w	r0, [sl]
   dd69c:	fb93 f3f5 	sdiv	r3, r3, r5
   dd6a0:	0049      	lsls	r1, r1, #1
   dd6a2:	fb90 f0f4 	sdiv	r0, r0, r4
   dd6a6:	9100      	str	r1, [sp, #0]
   dd6a8:	fb90 fef4 	sdiv	lr, r0, r4
   dd6ac:	fb92 f2fb 	sdiv	r2, r2, fp
   dd6b0:	fb04 001e 	mls	r0, r4, lr, r0
   dd6b4:	21cf      	movs	r1, #207	; 0xcf
   dd6b6:	f7f8 fec1 	bl	d643c <_Z4snumiiiii>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
   dd6ba:	6831      	ldr	r1, [r6, #0]
   dd6bc:	f8da 0000 	ldr.w	r0, [sl]
   dd6c0:	f8d9 3000 	ldr.w	r3, [r9]
   dd6c4:	fb90 fef4 	sdiv	lr, r0, r4
   dd6c8:	0049      	lsls	r1, r1, #1
   dd6ca:	fb04 001e 	mls	r0, r4, lr, r0
   dd6ce:	f8d8 2000 	ldr.w	r2, [r8]
   dd6d2:	fb93 f3f5 	sdiv	r3, r3, r5
   dd6d6:	fb92 f2fb 	sdiv	r2, r2, fp
   dd6da:	9100      	str	r1, [sp, #0]
   dd6dc:	21ef      	movs	r1, #239	; 0xef
   dd6de:	f7f8 fead 	bl	d643c <_Z4snumiiiii>
        strip.show();
   dd6e2:	4837      	ldr	r0, [pc, #220]	; (dd7c0 <loop+0x340>)
   dd6e4:	f001 f86a 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(5000);
   dd6e8:	f241 3088 	movw	r0, #5000	; 0x1388
   dd6ec:	f002 fb02 	bl	dfcf4 <delay>
        strip.clear();
   dd6f0:	4833      	ldr	r0, [pc, #204]	; (dd7c0 <loop+0x340>)
   dd6f2:	f001 fa34 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
        strip.show();
        while(digitalRead(D0) == HIGH){
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
   dd6f6:	2001      	movs	r0, #1
   dd6f8:	f003 fdb2 	bl	e1260 <digitalRead>
   dd6fc:	2801      	cmp	r0, #1
   dd6fe:	4c2c      	ldr	r4, [pc, #176]	; (dd7b0 <loop+0x330>)
   dd700:	d112      	bne.n	dd728 <loop+0x2a8>
   dd702:	2000      	movs	r0, #0
   dd704:	f003 fdac 	bl	e1260 <digitalRead>
   dd708:	b970      	cbnz	r0, dd728 <loop+0x2a8>
   dd70a:	2002      	movs	r0, #2
   dd70c:	f003 fda8 	bl	e1260 <digitalRead>
   dd710:	4602      	mov	r2, r0
   dd712:	2800      	cmp	r0, #0
   dd714:	f000 86a4 	beq.w	de460 <loop+0xfe0>
   dd718:	e006      	b.n	dd728 <loop+0x2a8>
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
            delay(10);
        }
        strip.setPixelColor(7,0,0,0);
   dd71a:	2300      	movs	r3, #0
   dd71c:	9300      	str	r3, [sp, #0]
   dd71e:	461a      	mov	r2, r3
   dd720:	2107      	movs	r1, #7
   dd722:	4827      	ldr	r0, [pc, #156]	; (dd7c0 <loop+0x340>)
   dd724:	f001 f9ec 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    
//////////////////////////////////////
//////////////MODE 1//////////////////              Clock with cycling weather conditions
//////////////////////////////////////
    
    if(dmode == 1){                                                     //Mode 1
   dd728:	6823      	ldr	r3, [r4, #0]
   dd72a:	2b01      	cmp	r3, #1
   dd72c:	f040 82ad 	bne.w	ddc8a <loop+0x80a>
        if(mprev != min || scan == 2) {
   dd730:	4b26      	ldr	r3, [pc, #152]	; (dd7cc <loop+0x34c>)
   dd732:	9902      	ldr	r1, [sp, #8]
   dd734:	681a      	ldr	r2, [r3, #0]
   dd736:	f8df 907c 	ldr.w	r9, [pc, #124]	; dd7b4 <loop+0x334>
   dd73a:	4c25      	ldr	r4, [pc, #148]	; (dd7d0 <loop+0x350>)
   dd73c:	4291      	cmp	r1, r2
   dd73e:	469a      	mov	sl, r3
   dd740:	d103      	bne.n	dd74a <loop+0x2ca>
   dd742:	9b03      	ldr	r3, [sp, #12]
   dd744:	681b      	ldr	r3, [r3, #0]
   dd746:	2b02      	cmp	r3, #2
   dd748:	d156      	bne.n	dd7f8 <loop+0x378>
            if(analogRead(A4)>bound || EEPROM.read(6) == 0){
   dd74a:	200f      	movs	r0, #15
   dd74c:	f003 fd9b 	bl	e1286 <analogRead>
   dd750:	f8d9 3000 	ldr.w	r3, [r9]
   dd754:	4d1b      	ldr	r5, [pc, #108]	; (dd7c4 <loop+0x344>)
   dd756:	4e18      	ldr	r6, [pc, #96]	; (dd7b8 <loop+0x338>)
   dd758:	f8df 8060 	ldr.w	r8, [pc, #96]	; dd7bc <loop+0x33c>
   dd75c:	4298      	cmp	r0, r3
   dd75e:	9b02      	ldr	r3, [sp, #8]
   dd760:	f103 0b09 	add.w	fp, r3, #9
   dd764:	f300 86ce 	bgt.w	de504 <loop+0x1084>
   dd768:	f003 fda4 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd76c:	2006      	movs	r0, #6
   dd76e:	f7f6 fd5b 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd772:	2800      	cmp	r0, #0
   dd774:	f000 86c6 	beq.w	de504 <loop+0x1084>
   dd778:	f000 bf1f 	b.w	de5ba <loop+0x113a>
   dd77c:	f3af 8000 	nop.w
   dd780:	9999999a 	.word	0x9999999a
   dd784:	3fe99999 	.word	0x3fe99999
   dd788:	33333333 	.word	0x33333333
   dd78c:	3fe33333 	.word	0x3fe33333
   dd790:	000e4628 	.word	0x000e4628
   dd794:	2003e308 	.word	0x2003e308
   dd798:	000e462e 	.word	0x000e462e
   dd79c:	2003e344 	.word	0x2003e344
   dd7a0:	000e4632 	.word	0x000e4632
   dd7a4:	2003e368 	.word	0x2003e368
   dd7a8:	000e463e 	.word	0x000e463e
   dd7ac:	2003e30c 	.word	0x2003e30c
   dd7b0:	2003e330 	.word	0x2003e330
   dd7b4:	2003e338 	.word	0x2003e338
   dd7b8:	2003e314 	.word	0x2003e314
   dd7bc:	2003e35c 	.word	0x2003e35c
   dd7c0:	2003e31c 	.word	0x2003e31c
   dd7c4:	2003e354 	.word	0x2003e354
   dd7c8:	000e4645 	.word	0x000e4645
   dd7cc:	2003e350 	.word	0x2003e350
   dd7d0:	2003e33c 	.word	0x2003e33c
   dd7d4:	2003e310 	.word	0x2003e310
                }
                for(i=0;i<7;i++)
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
                }
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);
   dd7d8:	4ba0      	ldr	r3, [pc, #640]	; (dda5c <loop+0x5dc>)
   dd7da:	681b      	ldr	r3, [r3, #0]
   dd7dc:	9300      	str	r3, [sp, #0]
   dd7de:	200a      	movs	r0, #10
   dd7e0:	6833      	ldr	r3, [r6, #0]
   dd7e2:	fb97 fef0 	sdiv	lr, r7, r0
   dd7e6:	682a      	ldr	r2, [r5, #0]
   dd7e8:	fb00 701e 	mls	r0, r0, lr, r7
   dd7ec:	2110      	movs	r1, #16
   dd7ee:	f7f6 fdf1 	bl	d43d4 <_Z3numiiiii>
                strip.show();
   dd7f2:	489b      	ldr	r0, [pc, #620]	; (dda60 <loop+0x5e0>)
   dd7f4:	f000 ffe2 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
        }
        scan=1;
   dd7f8:	9a03      	ldr	r2, [sp, #12]
   dd7fa:	2301      	movs	r3, #1
        if(analogRead(A4) >= bound)///////////////////////////////////////IF SENSOR IS BRIGHT
   dd7fc:	200f      	movs	r0, #15
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
        }
        scan=1;
   dd7fe:	6013      	str	r3, [r2, #0]
        if(analogRead(A4) >= bound)///////////////////////////////////////IF SENSOR IS BRIGHT
   dd800:	f003 fd41 	bl	e1286 <analogRead>
   dd804:	f8d9 3000 	ldr.w	r3, [r9]
   dd808:	4298      	cmp	r0, r3
   dd80a:	f2c0 81e3 	blt.w	ddbd4 <loop+0x754>
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
   dd80e:	4e93      	ldr	r6, [pc, #588]	; (dda5c <loop+0x5dc>)
   dd810:	4f94      	ldr	r7, [pc, #592]	; (dda64 <loop+0x5e4>)
   dd812:	4d95      	ldr	r5, [pc, #596]	; (dda68 <loop+0x5e8>)
   dd814:	7831      	ldrb	r1, [r6, #0]
   dd816:	782b      	ldrb	r3, [r5, #0]
   dd818:	783a      	ldrb	r2, [r7, #0]
   dd81a:	4891      	ldr	r0, [pc, #580]	; (dda60 <loop+0x5e0>)
   dd81c:	9100      	str	r1, [sp, #0]
   dd81e:	213a      	movs	r1, #58	; 0x3a
   dd820:	f001 f96e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock,gclock,bclock);
   dd824:	7831      	ldrb	r1, [r6, #0]
   dd826:	782b      	ldrb	r3, [r5, #0]
   dd828:	783a      	ldrb	r2, [r7, #0]
   dd82a:	488d      	ldr	r0, [pc, #564]	; (dda60 <loop+0x5e0>)
   dd82c:	9100      	str	r1, [sp, #0]
   dd82e:	213e      	movs	r1, #62	; 0x3e
   dd830:	f001 f966 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            for(i=0; i<100; i++)
   dd834:	2300      	movs	r3, #0
   dd836:	6023      	str	r3, [r4, #0]
   dd838:	46b8      	mov	r8, r7
   dd83a:	6823      	ldr	r3, [r4, #0]
   dd83c:	2b63      	cmp	r3, #99	; 0x63
   dd83e:	dc0a      	bgt.n	dd856 <loop+0x3d6>
            {
                if(digitalRead(D1)==LOW)
   dd840:	2001      	movs	r0, #1
   dd842:	f003 fd0d 	bl	e1260 <digitalRead>
   dd846:	b910      	cbnz	r0, dd84e <loop+0x3ce>
                {
                    delay(5);
   dd848:	2005      	movs	r0, #5
   dd84a:	f002 fa53 	bl	dfcf4 <delay>
        scan=1;
        if(analogRead(A4) >= bound)///////////////////////////////////////IF SENSOR IS BRIGHT
        {
            strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);
            for(i=0; i<100; i++)
   dd84e:	6823      	ldr	r3, [r4, #0]
   dd850:	3301      	adds	r3, #1
   dd852:	6023      	str	r3, [r4, #0]
   dd854:	e7f1      	b.n	dd83a <loop+0x3ba>
                if(digitalRead(D1)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dd856:	4882      	ldr	r0, [pc, #520]	; (dda60 <loop+0x5e0>)
   dd858:	f000 ffb0 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   dd85c:	2702      	movs	r7, #2
   dd85e:	6831      	ldr	r1, [r6, #0]
   dd860:	fb91 f1f7 	sdiv	r1, r1, r7
   dd864:	b2c9      	uxtb	r1, r1
   dd866:	682b      	ldr	r3, [r5, #0]
   dd868:	f8d8 2000 	ldr.w	r2, [r8]
   dd86c:	fb93 f3f7 	sdiv	r3, r3, r7
   dd870:	fb92 f2f7 	sdiv	r2, r2, r7
   dd874:	9100      	str	r1, [sp, #0]
   dd876:	b2db      	uxtb	r3, r3
   dd878:	b2d2      	uxtb	r2, r2
   dd87a:	213a      	movs	r1, #58	; 0x3a
   dd87c:	4878      	ldr	r0, [pc, #480]	; (dda60 <loop+0x5e0>)
   dd87e:	f001 f93f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   dd882:	6831      	ldr	r1, [r6, #0]
   dd884:	682b      	ldr	r3, [r5, #0]
   dd886:	f8d8 2000 	ldr.w	r2, [r8]
   dd88a:	fb93 f3f7 	sdiv	r3, r3, r7
   dd88e:	fb92 f2f7 	sdiv	r2, r2, r7
   dd892:	fb91 f7f7 	sdiv	r7, r1, r7
   dd896:	b2ff      	uxtb	r7, r7
   dd898:	b2db      	uxtb	r3, r3
   dd89a:	b2d2      	uxtb	r2, r2
   dd89c:	9700      	str	r7, [sp, #0]
   dd89e:	213e      	movs	r1, #62	; 0x3e
   dd8a0:	486f      	ldr	r0, [pc, #444]	; (dda60 <loop+0x5e0>)
   dd8a2:	f001 f92d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            for(i=0; i<100; i++)
   dd8a6:	4b71      	ldr	r3, [pc, #452]	; (dda6c <loop+0x5ec>)
   dd8a8:	2200      	movs	r2, #0
   dd8aa:	601a      	str	r2, [r3, #0]
   dd8ac:	6823      	ldr	r3, [r4, #0]
   dd8ae:	f8df a1bc 	ldr.w	sl, [pc, #444]	; dda6c <loop+0x5ec>
   dd8b2:	2b63      	cmp	r3, #99	; 0x63
   dd8b4:	dc0a      	bgt.n	dd8cc <loop+0x44c>
            {
                if(digitalRead(D1)==LOW)
   dd8b6:	2001      	movs	r0, #1
   dd8b8:	f003 fcd2 	bl	e1260 <digitalRead>
   dd8bc:	b910      	cbnz	r0, dd8c4 <loop+0x444>
                {
                    delay(5);
   dd8be:	2005      	movs	r0, #5
   dd8c0:	f002 fa18 	bl	dfcf4 <delay>
                }
            }
            strip.show();
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
            for(i=0; i<100; i++)
   dd8c4:	6823      	ldr	r3, [r4, #0]
   dd8c6:	3301      	adds	r3, #1
   dd8c8:	6023      	str	r3, [r4, #0]
   dd8ca:	e7ef      	b.n	dd8ac <loop+0x42c>
                if(digitalRead(D1)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dd8cc:	4864      	ldr	r0, [pc, #400]	; (dda60 <loop+0x5e0>)
   dd8ce:	f000 ff75 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)
   dd8d2:	f003 fcef 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd8d6:	2002      	movs	r0, #2
   dd8d8:	f7f6 fca6 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd8dc:	2801      	cmp	r0, #1
   dd8de:	f040 84f9 	bne.w	de2d4 <loop+0xe54>
            {
                if(wmode == 1)                                      //Outdoor Temperature
   dd8e2:	4f63      	ldr	r7, [pc, #396]	; (dda70 <loop+0x5f0>)
   dd8e4:	683b      	ldr	r3, [r7, #0]
   dd8e6:	2b01      	cmp	r3, #1
   dd8e8:	d147      	bne.n	dd97a <loop+0x4fa>
                {
                    for(i=160;i<256;i++)
   dd8ea:	23a0      	movs	r3, #160	; 0xa0
   dd8ec:	f8ca 3000 	str.w	r3, [sl]
   dd8f0:	f04f 0b00 	mov.w	fp, #0
   dd8f4:	6821      	ldr	r1, [r4, #0]
   dd8f6:	29ff      	cmp	r1, #255	; 0xff
   dd8f8:	f04f 0900 	mov.w	r9, #0
   dd8fc:	dc0d      	bgt.n	dd91a <loop+0x49a>
                    {
                        strip.setPixelColor(i,0,0,0);
   dd8fe:	464b      	mov	r3, r9
   dd900:	f8cd b000 	str.w	fp, [sp]
   dd904:	464a      	mov	r2, r9
   dd906:	b289      	uxth	r1, r1
   dd908:	4855      	ldr	r0, [pc, #340]	; (dda60 <loop+0x5e0>)
   dd90a:	f001 f8f9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)
            {
                if(wmode == 1)                                      //Outdoor Temperature
                {
                    for(i=160;i<256;i++)
   dd90e:	f8da 3000 	ldr.w	r3, [sl]
   dd912:	3301      	adds	r3, #1
   dd914:	f8ca 3000 	str.w	r3, [sl]
   dd918:	e7ec      	b.n	dd8f4 <loop+0x474>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    num(TC1,160,0,gclock/1,0);
   dd91a:	4856      	ldr	r0, [pc, #344]	; (dda74 <loop+0x5f4>)
   dd91c:	f8cd 9000 	str.w	r9, [sp]
   dd920:	682b      	ldr	r3, [r5, #0]
   dd922:	6800      	ldr	r0, [r0, #0]
   dd924:	464a      	mov	r2, r9
   dd926:	21a0      	movs	r1, #160	; 0xa0
   dd928:	f7f6 fd54 	bl	d43d4 <_Z3numiiiii>
                    num(TC2,207,0,gclock/1,0);
   dd92c:	4852      	ldr	r0, [pc, #328]	; (dda78 <loop+0x5f8>)
   dd92e:	f8cd 9000 	str.w	r9, [sp]
   dd932:	682b      	ldr	r3, [r5, #0]
   dd934:	6800      	ldr	r0, [r0, #0]
   dd936:	464a      	mov	r2, r9
   dd938:	21cf      	movs	r1, #207	; 0xcf
   dd93a:	f7f6 fd4b 	bl	d43d4 <_Z3numiiiii>
                    strip.setPixelColor(240,0,gclock/1,0);
   dd93e:	782b      	ldrb	r3, [r5, #0]
   dd940:	4847      	ldr	r0, [pc, #284]	; (dda60 <loop+0x5e0>)
   dd942:	f8cd 9000 	str.w	r9, [sp]
   dd946:	464a      	mov	r2, r9
   dd948:	21f0      	movs	r1, #240	; 0xf0
   dd94a:	f001 f8d9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    if(tmr%5==0)
   dd94e:	4b4b      	ldr	r3, [pc, #300]	; (dda7c <loop+0x5fc>)
   dd950:	681a      	ldr	r2, [r3, #0]
   dd952:	2305      	movs	r3, #5
   dd954:	fb92 f3f3 	sdiv	r3, r2, r3
   dd958:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   dd95c:	429a      	cmp	r2, r3
   dd95e:	d109      	bne.n	dd974 <loop+0x4f4>
                    {
                        if(EEPROM.read(4) == 1){
   dd960:	f003 fca8 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   dd964:	2004      	movs	r0, #4
   dd966:	f7f6 fc5f 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   dd96a:	2801      	cmp	r0, #1
                            wmode = 2;
   dd96c:	bf0c      	ite	eq
   dd96e:	2302      	moveq	r3, #2
                        }
                        else{
                            wmode = 3;
   dd970:	2303      	movne	r3, #3
   dd972:	603b      	str	r3, [r7, #0]
                        }
                    }
                    strip.show();
   dd974:	483a      	ldr	r0, [pc, #232]	; (dda60 <loop+0x5e0>)
   dd976:	f000 ff21 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                if(wmode == 2)                                      //Indoor Temp from Adafruit Sensor
   dd97a:	683b      	ldr	r3, [r7, #0]
   dd97c:	2b02      	cmp	r3, #2
   dd97e:	d152      	bne.n	dda26 <loop+0x5a6>
                {
                    for(i=160;i<256;i++)
   dd980:	23a0      	movs	r3, #160	; 0xa0
   dd982:	4d3a      	ldr	r5, [pc, #232]	; (dda6c <loop+0x5ec>)
   dd984:	6023      	str	r3, [r4, #0]
                    {
                        strip.setPixelColor(i,0,0,0);
   dd986:	f04f 0900 	mov.w	r9, #0
                    }
                    strip.show();
                }
                if(wmode == 2)                                      //Indoor Temp from Adafruit Sensor
                {
                    for(i=160;i<256;i++)
   dd98a:	6821      	ldr	r1, [r4, #0]
   dd98c:	29ff      	cmp	r1, #255	; 0xff
   dd98e:	dc0b      	bgt.n	dd9a8 <loop+0x528>
                    {
                        strip.setPixelColor(i,0,0,0);
   dd990:	2300      	movs	r3, #0
   dd992:	461a      	mov	r2, r3
   dd994:	f8cd 9000 	str.w	r9, [sp]
   dd998:	b289      	uxth	r1, r1
   dd99a:	4831      	ldr	r0, [pc, #196]	; (dda60 <loop+0x5e0>)
   dd99c:	f001 f8b0 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    }
                    strip.show();
                }
                if(wmode == 2)                                      //Indoor Temp from Adafruit Sensor
                {
                    for(i=160;i<256;i++)
   dd9a0:	682b      	ldr	r3, [r5, #0]
   dd9a2:	3301      	adds	r3, #1
   dd9a4:	602b      	str	r3, [r5, #0]
   dd9a6:	e7f0      	b.n	dd98a <loop+0x50a>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    num(itemp/10,160,rclock/2,0,bclock);
   dd9a8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; dda80 <loop+0x600>
   dd9ac:	6833      	ldr	r3, [r6, #0]
   dd9ae:	f8d8 2000 	ldr.w	r2, [r8]
   dd9b2:	f8d9 0000 	ldr.w	r0, [r9]
   dd9b6:	9300      	str	r3, [sp, #0]
   dd9b8:	2402      	movs	r4, #2
   dd9ba:	250a      	movs	r5, #10
   dd9bc:	2300      	movs	r3, #0
   dd9be:	fb92 f2f4 	sdiv	r2, r2, r4
   dd9c2:	21a0      	movs	r1, #160	; 0xa0
   dd9c4:	fb90 f0f5 	sdiv	r0, r0, r5
   dd9c8:	f7f6 fd04 	bl	d43d4 <_Z3numiiiii>
                    num(itemp%10,207,rclock/2,0,bclock);
   dd9cc:	f8d9 0000 	ldr.w	r0, [r9]
   dd9d0:	6833      	ldr	r3, [r6, #0]
   dd9d2:	fb90 fef5 	sdiv	lr, r0, r5
   dd9d6:	f8d8 2000 	ldr.w	r2, [r8]
   dd9da:	9300      	str	r3, [sp, #0]
   dd9dc:	fb05 001e 	mls	r0, r5, lr, r0
   dd9e0:	2300      	movs	r3, #0
   dd9e2:	fb92 f2f4 	sdiv	r2, r2, r4
   dd9e6:	21cf      	movs	r1, #207	; 0xcf
   dd9e8:	f7f6 fcf4 	bl	d43d4 <_Z3numiiiii>
                    strip.setPixelColor(240,rclock/2,0,bclock);
   dd9ec:	7833      	ldrb	r3, [r6, #0]
   dd9ee:	f8d8 2000 	ldr.w	r2, [r8]
   dd9f2:	481b      	ldr	r0, [pc, #108]	; (dda60 <loop+0x5e0>)
   dd9f4:	9300      	str	r3, [sp, #0]
   dd9f6:	21f0      	movs	r1, #240	; 0xf0
   dd9f8:	2300      	movs	r3, #0
   dd9fa:	fb92 f2f4 	sdiv	r2, r2, r4
   dd9fe:	b2d2      	uxtb	r2, r2
   dda00:	f001 f87e 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    strip.show();
   dda04:	4816      	ldr	r0, [pc, #88]	; (dda60 <loop+0x5e0>)
   dda06:	f000 fed9 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                    if(tmr%7==0)
   dda0a:	4b1c      	ldr	r3, [pc, #112]	; (dda7c <loop+0x5fc>)
   dda0c:	681a      	ldr	r2, [r3, #0]
   dda0e:	2307      	movs	r3, #7
   dda10:	fb92 f3f3 	sdiv	r3, r2, r3
   dda14:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dda18:	429a      	cmp	r2, r3
   dda1a:	f040 845b 	bne.w	de2d4 <loop+0xe54>
                    {
                        wmode = 3;
   dda1e:	2303      	movs	r3, #3
   dda20:	603b      	str	r3, [r7, #0]
   dda22:	f000 bc57 	b.w	de2d4 <loop+0xe54>
                    }
                }
                else if (wmode == 3)
   dda26:	2b03      	cmp	r3, #3
   dda28:	f040 80a2 	bne.w	ddb70 <loop+0x6f0>
                {
                    for(i=160;i<231;i++)
   dda2c:	23a0      	movs	r3, #160	; 0xa0
   dda2e:	f8df 803c 	ldr.w	r8, [pc, #60]	; dda6c <loop+0x5ec>
   dda32:	6023      	str	r3, [r4, #0]
                    {
                        strip.setPixelColor(i,0,0,0);
   dda34:	f04f 0900 	mov.w	r9, #0
                        wmode = 3;
                    }
                }
                else if (wmode == 3)
                {
                    for(i=160;i<231;i++)
   dda38:	6821      	ldr	r1, [r4, #0]
   dda3a:	29e6      	cmp	r1, #230	; 0xe6
   dda3c:	dc22      	bgt.n	dda84 <loop+0x604>
                    {
                        strip.setPixelColor(i,0,0,0);
   dda3e:	2300      	movs	r3, #0
   dda40:	461a      	mov	r2, r3
   dda42:	f8cd 9000 	str.w	r9, [sp]
   dda46:	b289      	uxth	r1, r1
   dda48:	4805      	ldr	r0, [pc, #20]	; (dda60 <loop+0x5e0>)
   dda4a:	f001 f859 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        wmode = 3;
                    }
                }
                else if (wmode == 3)
                {
                    for(i=160;i<231;i++)
   dda4e:	f8d8 3000 	ldr.w	r3, [r8]
   dda52:	3301      	adds	r3, #1
   dda54:	f8c8 3000 	str.w	r3, [r8]
   dda58:	e7ee      	b.n	dda38 <loop+0x5b8>
   dda5a:	bf00      	nop
   dda5c:	2003e35c 	.word	0x2003e35c
   dda60:	2003e31c 	.word	0x2003e31c
   dda64:	2003e354 	.word	0x2003e354
   dda68:	2003e314 	.word	0x2003e314
   dda6c:	2003e33c 	.word	0x2003e33c
   dda70:	2003e300 	.word	0x2003e300
   dda74:	2003e304 	.word	0x2003e304
   dda78:	2003e34c 	.word	0x2003e34c
   dda7c:	2003e364 	.word	0x2003e364
   dda80:	2003e344 	.word	0x2003e344
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    if(HC1 == 10)
   dda84:	f8df 8268 	ldr.w	r8, [pc, #616]	; ddcf0 <loop+0x870>
   dda88:	f8d8 3000 	ldr.w	r3, [r8]
   dda8c:	2b0a      	cmp	r3, #10
   dda8e:	d148      	bne.n	ddb22 <loop+0x6a2>
                    {
                        strip.setPixelColor(160,0,gclock,bclock);
   dda90:	7832      	ldrb	r2, [r6, #0]
   dda92:	782b      	ldrb	r3, [r5, #0]
   dda94:	488f      	ldr	r0, [pc, #572]	; (ddcd4 <loop+0x854>)
   dda96:	9200      	str	r2, [sp, #0]
   dda98:	21a0      	movs	r1, #160	; 0xa0
   dda9a:	2200      	movs	r2, #0
   dda9c:	f001 f830 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(161,0,gclock,bclock);
   ddaa0:	7832      	ldrb	r2, [r6, #0]
   ddaa2:	782b      	ldrb	r3, [r5, #0]
   ddaa4:	488b      	ldr	r0, [pc, #556]	; (ddcd4 <loop+0x854>)
   ddaa6:	9200      	str	r2, [sp, #0]
   ddaa8:	21a1      	movs	r1, #161	; 0xa1
   ddaaa:	2200      	movs	r2, #0
   ddaac:	f001 f828 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(162,0,gclock,bclock);
   ddab0:	7832      	ldrb	r2, [r6, #0]
   ddab2:	782b      	ldrb	r3, [r5, #0]
   ddab4:	4887      	ldr	r0, [pc, #540]	; (ddcd4 <loop+0x854>)
   ddab6:	9200      	str	r2, [sp, #0]
   ddab8:	21a2      	movs	r1, #162	; 0xa2
   ddaba:	2200      	movs	r2, #0
   ddabc:	f001 f820 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(163,0,gclock,bclock);
   ddac0:	7832      	ldrb	r2, [r6, #0]
   ddac2:	782b      	ldrb	r3, [r5, #0]
   ddac4:	4883      	ldr	r0, [pc, #524]	; (ddcd4 <loop+0x854>)
   ddac6:	9200      	str	r2, [sp, #0]
   ddac8:	21a3      	movs	r1, #163	; 0xa3
   ddaca:	2200      	movs	r2, #0
   ddacc:	f001 f818 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(164,0,gclock,bclock);
   ddad0:	7832      	ldrb	r2, [r6, #0]
   ddad2:	782b      	ldrb	r3, [r5, #0]
   ddad4:	487f      	ldr	r0, [pc, #508]	; (ddcd4 <loop+0x854>)
   ddad6:	9200      	str	r2, [sp, #0]
   ddad8:	21a4      	movs	r1, #164	; 0xa4
   ddada:	2200      	movs	r2, #0
   ddadc:	f001 f810 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(165,0,gclock,bclock);
   ddae0:	7832      	ldrb	r2, [r6, #0]
   ddae2:	782b      	ldrb	r3, [r5, #0]
   ddae4:	487b      	ldr	r0, [pc, #492]	; (ddcd4 <loop+0x854>)
   ddae6:	9200      	str	r2, [sp, #0]
   ddae8:	21a5      	movs	r1, #165	; 0xa5
   ddaea:	2200      	movs	r2, #0
   ddaec:	f001 f808 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(166,0,gclock,bclock);
   ddaf0:	7832      	ldrb	r2, [r6, #0]
   ddaf2:	782b      	ldrb	r3, [r5, #0]
   ddaf4:	4877      	ldr	r0, [pc, #476]	; (ddcd4 <loop+0x854>)
   ddaf6:	9200      	str	r2, [sp, #0]
   ddaf8:	21a6      	movs	r1, #166	; 0xa6
   ddafa:	2200      	movs	r2, #0
   ddafc:	f001 f800 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        num(0,176,0,gclock,bclock);
   ddb00:	6833      	ldr	r3, [r6, #0]
   ddb02:	9300      	str	r3, [sp, #0]
   ddb04:	2200      	movs	r2, #0
   ddb06:	682b      	ldr	r3, [r5, #0]
   ddb08:	4610      	mov	r0, r2
   ddb0a:	21b0      	movs	r1, #176	; 0xb0
   ddb0c:	f7f6 fc62 	bl	d43d4 <_Z3numiiiii>
                        num(0,223,0,gclock,bclock);
   ddb10:	6833      	ldr	r3, [r6, #0]
   ddb12:	9300      	str	r3, [sp, #0]
   ddb14:	2200      	movs	r2, #0
   ddb16:	682b      	ldr	r3, [r5, #0]
   ddb18:	21df      	movs	r1, #223	; 0xdf
   ddb1a:	4610      	mov	r0, r2
   ddb1c:	f7f6 fc5a 	bl	d43d4 <_Z3numiiiii>
   ddb20:	e019      	b.n	ddb56 <loop+0x6d6>
                    }
                    else
                    {
                        strip.setPixelColor(240,0,0,0);
   ddb22:	2400      	movs	r4, #0
   ddb24:	4623      	mov	r3, r4
   ddb26:	4622      	mov	r2, r4
   ddb28:	21f0      	movs	r1, #240	; 0xf0
   ddb2a:	486a      	ldr	r0, [pc, #424]	; (ddcd4 <loop+0x854>)
   ddb2c:	9400      	str	r4, [sp, #0]
   ddb2e:	f000 ffe7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        num(HC1,160,0,gclock,bclock);
   ddb32:	6833      	ldr	r3, [r6, #0]
   ddb34:	9300      	str	r3, [sp, #0]
   ddb36:	682b      	ldr	r3, [r5, #0]
   ddb38:	f8d8 0000 	ldr.w	r0, [r8]
   ddb3c:	4622      	mov	r2, r4
   ddb3e:	21a0      	movs	r1, #160	; 0xa0
   ddb40:	f7f6 fc48 	bl	d43d4 <_Z3numiiiii>
                        num(HC2,207,0,gclock,bclock);
   ddb44:	6833      	ldr	r3, [r6, #0]
   ddb46:	4864      	ldr	r0, [pc, #400]	; (ddcd8 <loop+0x858>)
   ddb48:	9300      	str	r3, [sp, #0]
   ddb4a:	682b      	ldr	r3, [r5, #0]
   ddb4c:	6800      	ldr	r0, [r0, #0]
   ddb4e:	4622      	mov	r2, r4
   ddb50:	21cf      	movs	r1, #207	; 0xcf
   ddb52:	f7f6 fc3f 	bl	d43d4 <_Z3numiiiii>
                    }
                    if(tmr%5==0)
   ddb56:	4b61      	ldr	r3, [pc, #388]	; (ddcdc <loop+0x85c>)
   ddb58:	681a      	ldr	r2, [r3, #0]
   ddb5a:	2305      	movs	r3, #5
   ddb5c:	fb92 f3f3 	sdiv	r3, r2, r3
   ddb60:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   ddb64:	429a      	cmp	r2, r3
   ddb66:	f040 808c 	bne.w	ddc82 <loop+0x802>
                    {
                        wmode = 4;
   ddb6a:	2304      	movs	r3, #4
   ddb6c:	603b      	str	r3, [r7, #0]
   ddb6e:	e088      	b.n	ddc82 <loop+0x802>
                    }
                    strip.show();
                }
                else if(wmode == 4)
   ddb70:	2b04      	cmp	r3, #4
   ddb72:	f040 83af 	bne.w	de2d4 <loop+0xe54>
                {
                    for(i=160;i<256;i++)
   ddb76:	23a0      	movs	r3, #160	; 0xa0
   ddb78:	4d59      	ldr	r5, [pc, #356]	; (ddce0 <loop+0x860>)
   ddb7a:	6023      	str	r3, [r4, #0]
                    {
                        strip.setPixelColor(i,0,0,0);
   ddb7c:	2600      	movs	r6, #0
                    }
                    strip.show();
                }
                else if(wmode == 4)
                {
                    for(i=160;i<256;i++)
   ddb7e:	6821      	ldr	r1, [r4, #0]
   ddb80:	29ff      	cmp	r1, #255	; 0xff
   ddb82:	dc0a      	bgt.n	ddb9a <loop+0x71a>
                    {
                        strip.setPixelColor(i,0,0,0);
   ddb84:	2300      	movs	r3, #0
   ddb86:	461a      	mov	r2, r3
   ddb88:	9600      	str	r6, [sp, #0]
   ddb8a:	b289      	uxth	r1, r1
   ddb8c:	4851      	ldr	r0, [pc, #324]	; (ddcd4 <loop+0x854>)
   ddb8e:	f000 ffb7 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    }
                    strip.show();
                }
                else if(wmode == 4)
                {
                    for(i=160;i<256;i++)
   ddb92:	682b      	ldr	r3, [r5, #0]
   ddb94:	3301      	adds	r3, #1
   ddb96:	602b      	str	r3, [r5, #0]
   ddb98:	e7f1      	b.n	ddb7e <loop+0x6fe>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    condition(cid,160);
   ddb9a:	4c52      	ldr	r4, [pc, #328]	; (ddce4 <loop+0x864>)
   ddb9c:	21a0      	movs	r1, #160	; 0xa0
   ddb9e:	6820      	ldr	r0, [r4, #0]
   ddba0:	f7fb fc5a 	bl	d9458 <_Z9conditionii>
                    strip.show();
   ddba4:	484b      	ldr	r0, [pc, #300]	; (ddcd4 <loop+0x854>)
   ddba6:	f000 fe09 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
                    delay(100);
   ddbaa:	2064      	movs	r0, #100	; 0x64
   ddbac:	f002 f8a2 	bl	dfcf4 <delay>
                    canim(cid,160,true);
   ddbb0:	2201      	movs	r2, #1
   ddbb2:	21a0      	movs	r1, #160	; 0xa0
   ddbb4:	6820      	ldr	r0, [r4, #0]
   ddbb6:	f7fd fb33 	bl	db220 <_Z5canimiib>
                    canim(cid,160,true);
   ddbba:	2201      	movs	r2, #1
   ddbbc:	21a0      	movs	r1, #160	; 0xa0
   ddbbe:	6820      	ldr	r0, [r4, #0]
   ddbc0:	f7fd fb2e 	bl	db220 <_Z5canimiib>
                    canim(cid,160,true);
   ddbc4:	2201      	movs	r2, #1
   ddbc6:	21a0      	movs	r1, #160	; 0xa0
   ddbc8:	6820      	ldr	r0, [r4, #0]
   ddbca:	f7fd fb29 	bl	db220 <_Z5canimiib>
                    wmode = 1;
   ddbce:	2301      	movs	r3, #1
   ddbd0:	603b      	str	r3, [r7, #0]
   ddbd2:	e37f      	b.n	de2d4 <loop+0xe54>
            }
        }
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
            if(photoupd == 1)
   ddbd4:	4d44      	ldr	r5, [pc, #272]	; (ddce8 <loop+0x868>)
                }
            }
        }
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
   ddbd6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   ddbda:	f002 f88b 	bl	dfcf4 <delay>
            if(photoupd == 1)
   ddbde:	682b      	ldr	r3, [r5, #0]
   ddbe0:	2b01      	cmp	r3, #1
   ddbe2:	d113      	bne.n	ddc0c <loop+0x78c>
            {
                for(i=0;i<160;i++)
   ddbe4:	2300      	movs	r3, #0
   ddbe6:	4f3e      	ldr	r7, [pc, #248]	; (ddce0 <loop+0x860>)
   ddbe8:	6023      	str	r3, [r4, #0]
   ddbea:	461e      	mov	r6, r3
   ddbec:	6821      	ldr	r1, [r4, #0]
   ddbee:	299f      	cmp	r1, #159	; 0x9f
   ddbf0:	f04f 0300 	mov.w	r3, #0
   ddbf4:	dc09      	bgt.n	ddc0a <loop+0x78a>
                {
                    strip.setPixelColor(i,0,0,0);
   ddbf6:	461a      	mov	r2, r3
   ddbf8:	9600      	str	r6, [sp, #0]
   ddbfa:	b289      	uxth	r1, r1
   ddbfc:	4835      	ldr	r0, [pc, #212]	; (ddcd4 <loop+0x854>)
   ddbfe:	f000 ff7f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
            if(photoupd == 1)
            {
                for(i=0;i<160;i++)
   ddc02:	683b      	ldr	r3, [r7, #0]
   ddc04:	3301      	adds	r3, #1
   ddc06:	603b      	str	r3, [r7, #0]
   ddc08:	e7f0      	b.n	ddbec <loop+0x76c>
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
   ddc0a:	602b      	str	r3, [r5, #0]
            }
            for(i=160;i<247;i++)
   ddc0c:	23a0      	movs	r3, #160	; 0xa0
   ddc0e:	4d34      	ldr	r5, [pc, #208]	; (ddce0 <loop+0x860>)
   ddc10:	6023      	str	r3, [r4, #0]
            {
                strip.setPixelColor(i,0,0,0);
   ddc12:	2600      	movs	r6, #0
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
            }
            for(i=160;i<247;i++)
   ddc14:	6821      	ldr	r1, [r4, #0]
   ddc16:	29f6      	cmp	r1, #246	; 0xf6
   ddc18:	dc0a      	bgt.n	ddc30 <loop+0x7b0>
            {
                strip.setPixelColor(i,0,0,0);
   ddc1a:	2300      	movs	r3, #0
   ddc1c:	461a      	mov	r2, r3
   ddc1e:	9600      	str	r6, [sp, #0]
   ddc20:	b289      	uxth	r1, r1
   ddc22:	482c      	ldr	r0, [pc, #176]	; (ddcd4 <loop+0x854>)
   ddc24:	f000 ff6c 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
            }
            for(i=160;i<247;i++)
   ddc28:	682b      	ldr	r3, [r5, #0]
   ddc2a:	3301      	adds	r3, #1
   ddc2c:	602b      	str	r3, [r5, #0]
   ddc2e:	e7f1      	b.n	ddc14 <loop+0x794>
            {
                strip.setPixelColor(i,0,0,0);
            }
            if(EEPROM.read(2) == 1)
   ddc30:	f003 fb40 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   ddc34:	2002      	movs	r0, #2
   ddc36:	f7f6 faf7 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   ddc3a:	2801      	cmp	r0, #1
   ddc3c:	d108      	bne.n	ddc50 <loop+0x7d0>
            {
                condition(cid,160);
   ddc3e:	4c29      	ldr	r4, [pc, #164]	; (ddce4 <loop+0x864>)
   ddc40:	21a0      	movs	r1, #160	; 0xa0
   ddc42:	6820      	ldr	r0, [r4, #0]
   ddc44:	f7fb fc08 	bl	d9458 <_Z9conditionii>
                dimg(cid,160);
   ddc48:	21a0      	movs	r1, #160	; 0xa0
   ddc4a:	6820      	ldr	r0, [r4, #0]
   ddc4c:	f7fb fb68 	bl	d9320 <_Z4dimgii>
            }
            strip.show();
            strip.setPixelColor(62,0,0,0);
   ddc50:	2400      	movs	r4, #0
            if(EEPROM.read(2) == 1)
            {
                condition(cid,160);
                dimg(cid,160);
            }
            strip.show();
   ddc52:	4820      	ldr	r0, [pc, #128]	; (ddcd4 <loop+0x854>)
   ddc54:	f000 fdb2 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.setPixelColor(62,0,0,0);
   ddc58:	4623      	mov	r3, r4
   ddc5a:	4622      	mov	r2, r4
   ddc5c:	213e      	movs	r1, #62	; 0x3e
   ddc5e:	481d      	ldr	r0, [pc, #116]	; (ddcd4 <loop+0x854>)
   ddc60:	9400      	str	r4, [sp, #0]
   ddc62:	f000 ff4d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(58,0,0,0);
   ddc66:	4623      	mov	r3, r4
   ddc68:	4622      	mov	r2, r4
   ddc6a:	213a      	movs	r1, #58	; 0x3a
   ddc6c:	4819      	ldr	r0, [pc, #100]	; (ddcd4 <loop+0x854>)
   ddc6e:	9400      	str	r4, [sp, #0]
   ddc70:	f000 ff46 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(240,0,0,0);
   ddc74:	9400      	str	r4, [sp, #0]
   ddc76:	4623      	mov	r3, r4
   ddc78:	4622      	mov	r2, r4
   ddc7a:	21f0      	movs	r1, #240	; 0xf0
   ddc7c:	4815      	ldr	r0, [pc, #84]	; (ddcd4 <loop+0x854>)
   ddc7e:	f000 ff3f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   ddc82:	4814      	ldr	r0, [pc, #80]	; (ddcd4 <loop+0x854>)
   ddc84:	f000 fd9a 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   ddc88:	e324      	b.n	de2d4 <loop+0xe54>
    
//////////////////////////////////////
//////////////MODE 2//////////////////              Show all weather condition
//////////////////////////////////////
    
    else if(dmode == 2)                                 //Mode 2
   ddc8a:	2b02      	cmp	r3, #2
   ddc8c:	f040 80d7 	bne.w	dde3e <loop+0x9be>
    {
        
        if(cid == cprev)
   ddc90:	4c14      	ldr	r4, [pc, #80]	; (ddce4 <loop+0x864>)
   ddc92:	4e16      	ldr	r6, [pc, #88]	; (ddcec <loop+0x86c>)
   ddc94:	6820      	ldr	r0, [r4, #0]
   ddc96:	6833      	ldr	r3, [r6, #0]
   ddc98:	4298      	cmp	r0, r3
   ddc9a:	d106      	bne.n	ddcaa <loop+0x82a>
        {
            condition(cid,0);
   ddc9c:	2100      	movs	r1, #0
   ddc9e:	f7fb fbdb 	bl	d9458 <_Z9conditionii>
            strip.show();
   ddca2:	480c      	ldr	r0, [pc, #48]	; (ddcd4 <loop+0x854>)
   ddca4:	f000 fd8a 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   ddca8:	e030      	b.n	ddd0c <loop+0x88c>
        }
        else
        {
            for(i=0;i<49;i++)
   ddcaa:	4d0d      	ldr	r5, [pc, #52]	; (ddce0 <loop+0x860>)
   ddcac:	2700      	movs	r7, #0
   ddcae:	602f      	str	r7, [r5, #0]
   ddcb0:	46a8      	mov	r8, r5
   ddcb2:	6829      	ldr	r1, [r5, #0]
   ddcb4:	2930      	cmp	r1, #48	; 0x30
   ddcb6:	dc1d      	bgt.n	ddcf4 <loop+0x874>
            {
                strip.setPixelColor(i,0,0,0);
   ddcb8:	2300      	movs	r3, #0
   ddcba:	461a      	mov	r2, r3
   ddcbc:	9700      	str	r7, [sp, #0]
   ddcbe:	b289      	uxth	r1, r1
   ddcc0:	4804      	ldr	r0, [pc, #16]	; (ddcd4 <loop+0x854>)
   ddcc2:	f000 ff1d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            condition(cid,0);
            strip.show();
        }
        else
        {
            for(i=0;i<49;i++)
   ddcc6:	f8d8 3000 	ldr.w	r3, [r8]
   ddcca:	3301      	adds	r3, #1
   ddccc:	f8c8 3000 	str.w	r3, [r8]
   ddcd0:	e7ef      	b.n	ddcb2 <loop+0x832>
   ddcd2:	bf00      	nop
   ddcd4:	2003e31c 	.word	0x2003e31c
   ddcd8:	2003e2fc 	.word	0x2003e2fc
   ddcdc:	2003e364 	.word	0x2003e364
   ddce0:	2003e33c 	.word	0x2003e33c
   ddce4:	2003e2f0 	.word	0x2003e2f0
   ddce8:	2003e348 	.word	0x2003e348
   ddcec:	2003e2ec 	.word	0x2003e2ec
   ddcf0:	2003e2f4 	.word	0x2003e2f4
            {
                strip.setPixelColor(i,0,0,0);
            }
            strip.show();
   ddcf4:	488a      	ldr	r0, [pc, #552]	; (ddf20 <loop+0xaa0>)
   ddcf6:	f000 fd61 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            condition(cid,0);
   ddcfa:	2100      	movs	r1, #0
   ddcfc:	6820      	ldr	r0, [r4, #0]
   ddcfe:	f7fb fbab 	bl	d9458 <_Z9conditionii>
            strip.show();
   ddd02:	4887      	ldr	r0, [pc, #540]	; (ddf20 <loop+0xaa0>)
   ddd04:	f000 fd5a 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            cprev = cid;
   ddd08:	6823      	ldr	r3, [r4, #0]
   ddd0a:	6033      	str	r3, [r6, #0]
        }
        canim(cid,0,false);
   ddd0c:	2200      	movs	r2, #0
   ddd0e:	4611      	mov	r1, r2
   ddd10:	6820      	ldr	r0, [r4, #0]
        canim(cid,0,false);
        canim(cid,0,false);
        if(HC1 == 10)
   ddd12:	4f84      	ldr	r7, [pc, #528]	; (ddf24 <loop+0xaa4>)
   ddd14:	4d84      	ldr	r5, [pc, #528]	; (ddf28 <loop+0xaa8>)
            strip.show();
            condition(cid,0);
            strip.show();
            cprev = cid;
        }
        canim(cid,0,false);
   ddd16:	f7fd fa83 	bl	db220 <_Z5canimiib>
        canim(cid,0,false);
   ddd1a:	2200      	movs	r2, #0
   ddd1c:	4611      	mov	r1, r2
   ddd1e:	6820      	ldr	r0, [r4, #0]
   ddd20:	f7fd fa7e 	bl	db220 <_Z5canimiib>
        canim(cid,0,false);
   ddd24:	2200      	movs	r2, #0
   ddd26:	6820      	ldr	r0, [r4, #0]
   ddd28:	4c80      	ldr	r4, [pc, #512]	; (ddf2c <loop+0xaac>)
   ddd2a:	4611      	mov	r1, r2
   ddd2c:	f7fd fa78 	bl	db220 <_Z5canimiib>
        if(HC1 == 10)
   ddd30:	683b      	ldr	r3, [r7, #0]
   ddd32:	2b0a      	cmp	r3, #10
   ddd34:	d148      	bne.n	dddc8 <loop+0x948>
        {
            strip.setPixelColor(175,0,gclock,bclock);
   ddd36:	782a      	ldrb	r2, [r5, #0]
   ddd38:	7823      	ldrb	r3, [r4, #0]
   ddd3a:	4879      	ldr	r0, [pc, #484]	; (ddf20 <loop+0xaa0>)
   ddd3c:	9200      	str	r2, [sp, #0]
   ddd3e:	21af      	movs	r1, #175	; 0xaf
   ddd40:	2200      	movs	r2, #0
   ddd42:	f000 fedd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(174,0,gclock,bclock);
   ddd46:	782a      	ldrb	r2, [r5, #0]
   ddd48:	7823      	ldrb	r3, [r4, #0]
   ddd4a:	4875      	ldr	r0, [pc, #468]	; (ddf20 <loop+0xaa0>)
   ddd4c:	9200      	str	r2, [sp, #0]
   ddd4e:	21ae      	movs	r1, #174	; 0xae
   ddd50:	2200      	movs	r2, #0
   ddd52:	f000 fed5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(173,0,gclock,bclock);
   ddd56:	782a      	ldrb	r2, [r5, #0]
   ddd58:	7823      	ldrb	r3, [r4, #0]
   ddd5a:	4871      	ldr	r0, [pc, #452]	; (ddf20 <loop+0xaa0>)
   ddd5c:	9200      	str	r2, [sp, #0]
   ddd5e:	21ad      	movs	r1, #173	; 0xad
   ddd60:	2200      	movs	r2, #0
   ddd62:	f000 fecd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(172,0,gclock,bclock);
   ddd66:	782a      	ldrb	r2, [r5, #0]
   ddd68:	7823      	ldrb	r3, [r4, #0]
   ddd6a:	486d      	ldr	r0, [pc, #436]	; (ddf20 <loop+0xaa0>)
   ddd6c:	9200      	str	r2, [sp, #0]
   ddd6e:	21ac      	movs	r1, #172	; 0xac
   ddd70:	2200      	movs	r2, #0
   ddd72:	f000 fec5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(171,0,gclock,bclock);
   ddd76:	782a      	ldrb	r2, [r5, #0]
   ddd78:	7823      	ldrb	r3, [r4, #0]
   ddd7a:	4869      	ldr	r0, [pc, #420]	; (ddf20 <loop+0xaa0>)
   ddd7c:	9200      	str	r2, [sp, #0]
   ddd7e:	21ab      	movs	r1, #171	; 0xab
   ddd80:	2200      	movs	r2, #0
   ddd82:	f000 febd 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(170,0,gclock,bclock);
   ddd86:	782a      	ldrb	r2, [r5, #0]
   ddd88:	7823      	ldrb	r3, [r4, #0]
   ddd8a:	4865      	ldr	r0, [pc, #404]	; (ddf20 <loop+0xaa0>)
   ddd8c:	9200      	str	r2, [sp, #0]
   ddd8e:	21aa      	movs	r1, #170	; 0xaa
   ddd90:	2200      	movs	r2, #0
   ddd92:	f000 feb5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(169,0,gclock,bclock);
   ddd96:	782a      	ldrb	r2, [r5, #0]
   ddd98:	7823      	ldrb	r3, [r4, #0]
   ddd9a:	4861      	ldr	r0, [pc, #388]	; (ddf20 <loop+0xaa0>)
   ddd9c:	9200      	str	r2, [sp, #0]
   ddd9e:	21a9      	movs	r1, #169	; 0xa9
   ddda0:	2200      	movs	r2, #0
   ddda2:	f000 fead 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(0,191,0,gclock,bclock);
   ddda6:	682b      	ldr	r3, [r5, #0]
   ddda8:	9300      	str	r3, [sp, #0]
   dddaa:	2200      	movs	r2, #0
   dddac:	6823      	ldr	r3, [r4, #0]
   dddae:	4610      	mov	r0, r2
   dddb0:	21bf      	movs	r1, #191	; 0xbf
   dddb2:	f7f6 fb0f 	bl	d43d4 <_Z3numiiiii>
            num(0,224,0,gclock,bclock);
   dddb6:	682b      	ldr	r3, [r5, #0]
   dddb8:	9300      	str	r3, [sp, #0]
   dddba:	2200      	movs	r2, #0
   dddbc:	6823      	ldr	r3, [r4, #0]
   dddbe:	21e0      	movs	r1, #224	; 0xe0
   dddc0:	4610      	mov	r0, r2
   dddc2:	f7f6 fb07 	bl	d43d4 <_Z3numiiiii>
   dddc6:	e018      	b.n	dddfa <loop+0x97a>
        }
        else
        {
            strip.setPixelColor(240,0,0,0);
   dddc8:	2600      	movs	r6, #0
   dddca:	4633      	mov	r3, r6
   dddcc:	4632      	mov	r2, r6
   dddce:	21f0      	movs	r1, #240	; 0xf0
   dddd0:	4853      	ldr	r0, [pc, #332]	; (ddf20 <loop+0xaa0>)
   dddd2:	9600      	str	r6, [sp, #0]
   dddd4:	f000 fe94 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(HC1,191,0,gclock,bclock);
   dddd8:	682b      	ldr	r3, [r5, #0]
   dddda:	9300      	str	r3, [sp, #0]
   ddddc:	6823      	ldr	r3, [r4, #0]
   dddde:	6838      	ldr	r0, [r7, #0]
   ddde0:	4632      	mov	r2, r6
   ddde2:	21bf      	movs	r1, #191	; 0xbf
   ddde4:	f7f6 faf6 	bl	d43d4 <_Z3numiiiii>
            num(HC2,224,0,gclock,bclock);
   ddde8:	682b      	ldr	r3, [r5, #0]
   dddea:	4851      	ldr	r0, [pc, #324]	; (ddf30 <loop+0xab0>)
   dddec:	9300      	str	r3, [sp, #0]
   dddee:	6823      	ldr	r3, [r4, #0]
   dddf0:	6800      	ldr	r0, [r0, #0]
   dddf2:	4632      	mov	r2, r6
   dddf4:	21e0      	movs	r1, #224	; 0xe0
   dddf6:	f7f6 faed 	bl	d43d4 <_Z3numiiiii>
        }
        num(TC1,79,0,gclock,0);
   dddfa:	2500      	movs	r5, #0
   dddfc:	484d      	ldr	r0, [pc, #308]	; (ddf34 <loop+0xab4>)
   dddfe:	9500      	str	r5, [sp, #0]
   dde00:	6823      	ldr	r3, [r4, #0]
   dde02:	6800      	ldr	r0, [r0, #0]
   dde04:	462a      	mov	r2, r5
   dde06:	214f      	movs	r1, #79	; 0x4f
   dde08:	f7f6 fae4 	bl	d43d4 <_Z3numiiiii>
        num(TC2,112,0,gclock,0);
   dde0c:	484a      	ldr	r0, [pc, #296]	; (ddf38 <loop+0xab8>)
   dde0e:	9500      	str	r5, [sp, #0]
   dde10:	6823      	ldr	r3, [r4, #0]
   dde12:	6800      	ldr	r0, [r0, #0]
   dde14:	462a      	mov	r2, r5
   dde16:	2170      	movs	r1, #112	; 0x70
   dde18:	f7f6 fadc 	bl	d43d4 <_Z3numiiiii>
        strip.setPixelColor(159,0,gclock,0);
   dde1c:	7823      	ldrb	r3, [r4, #0]
   dde1e:	4840      	ldr	r0, [pc, #256]	; (ddf20 <loop+0xaa0>)
   dde20:	9500      	str	r5, [sp, #0]
   dde22:	462a      	mov	r2, r5
   dde24:	219f      	movs	r1, #159	; 0x9f
   dde26:	f000 fe6b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dde2a:	483d      	ldr	r0, [pc, #244]	; (ddf20 <loop+0xaa0>)
   dde2c:	f000 fcc6 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        scan = 1;
   dde30:	9a03      	ldr	r2, [sp, #12]
   dde32:	2301      	movs	r3, #1
        delay(10);
   dde34:	200a      	movs	r0, #10
        }
        num(TC1,79,0,gclock,0);
        num(TC2,112,0,gclock,0);
        strip.setPixelColor(159,0,gclock,0);
        strip.show();
        scan = 1;
   dde36:	6013      	str	r3, [r2, #0]
        delay(10);
   dde38:	f001 ff5c 	bl	dfcf4 <delay>
   dde3c:	e24a      	b.n	de2d4 <loop+0xe54>
        
//////////////////////////////////////
//////////////MODE 3//////////////////              Scrolling Clock
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
   dde3e:	2b03      	cmp	r3, #3
   dde40:	f040 8248 	bne.w	de2d4 <loop+0xe54>
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dde44:	4c3d      	ldr	r4, [pc, #244]	; (ddf3c <loop+0xabc>)
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   dde46:	9902      	ldr	r1, [sp, #8]
            if(min/10 == 0) {
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   dde48:	9a02      	ldr	r2, [sp, #8]
   dde4a:	f8df b0f8 	ldr.w	fp, [pc, #248]	; ddf44 <loop+0xac4>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dde4e:	2300      	movs	r3, #0
   dde50:	6023      	str	r3, [r4, #0]
            if(min/10 == 0) {
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   dde52:	230a      	movs	r3, #10
   dde54:	fb92 f2f3 	sdiv	r2, r2, r3
   dde58:	9204      	str	r2, [sp, #16]
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   dde5a:	fb03 1212 	mls	r2, r3, r2, r1
   dde5e:	9206      	str	r2, [sp, #24]
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   dde60:	fb97 f2f3 	sdiv	r2, r7, r3
   dde64:	b2d1      	uxtb	r1, r2
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   dde66:	fb03 7312 	mls	r3, r3, r2, r7
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   dde6a:	9103      	str	r1, [sp, #12]
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   dde6c:	9307      	str	r3, [sp, #28]
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   dde6e:	6821      	ldr	r1, [r4, #0]
   dde70:	2921      	cmp	r1, #33	; 0x21
   dde72:	f300 822f 	bgt.w	de2d4 <loop+0xe54>
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            if(min/10 == 0) {
   dde76:	9b02      	ldr	r3, [sp, #8]
   dde78:	4d2b      	ldr	r5, [pc, #172]	; (ddf28 <loop+0xaa8>)
   dde7a:	4e2c      	ldr	r6, [pc, #176]	; (ddf2c <loop+0xaac>)
   dde7c:	3309      	adds	r3, #9
   dde7e:	9305      	str	r3, [sp, #20]
   dde80:	2b12      	cmp	r3, #18
                num(0,(i*16)+79,rclock,gclock,bclock);
   dde82:	682b      	ldr	r3, [r5, #0]
   dde84:	9300      	str	r3, [sp, #0]
   dde86:	ea4f 1101 	mov.w	r1, r1, lsl #4
   dde8a:	6833      	ldr	r3, [r6, #0]
   dde8c:	f8db 2000 	ldr.w	r2, [fp]
   dde90:	f101 014f 	add.w	r1, r1, #79	; 0x4f
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            if(min/10 == 0) {
   dde94:	d80e      	bhi.n	ddeb4 <loop+0xa34>
                num(0,(i*16)+79,rclock,gclock,bclock);
   dde96:	2000      	movs	r0, #0
   dde98:	f7f6 fa9c 	bl	d43d4 <_Z3numiiiii>
                num(min,(i*16)+112,rclock,gclock,bclock);
   dde9c:	6821      	ldr	r1, [r4, #0]
   dde9e:	682b      	ldr	r3, [r5, #0]
   ddea0:	9300      	str	r3, [sp, #0]
   ddea2:	3107      	adds	r1, #7
   ddea4:	6833      	ldr	r3, [r6, #0]
   ddea6:	f8db 2000 	ldr.w	r2, [fp]
   ddeaa:	9802      	ldr	r0, [sp, #8]
   ddeac:	0109      	lsls	r1, r1, #4
   ddeae:	f7f6 fa91 	bl	d43d4 <_Z3numiiiii>
   ddeb2:	e00d      	b.n	dded0 <loop+0xa50>
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   ddeb4:	9804      	ldr	r0, [sp, #16]
   ddeb6:	f7f6 fa8d 	bl	d43d4 <_Z3numiiiii>
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   ddeba:	6821      	ldr	r1, [r4, #0]
   ddebc:	682b      	ldr	r3, [r5, #0]
   ddebe:	9300      	str	r3, [sp, #0]
   ddec0:	3107      	adds	r1, #7
   ddec2:	6833      	ldr	r3, [r6, #0]
   ddec4:	f8db 2000 	ldr.w	r2, [fp]
   ddec8:	9806      	ldr	r0, [sp, #24]
   ddeca:	0109      	lsls	r1, r1, #4
   ddecc:	f7f6 fa82 	bl	d43d4 <_Z3numiiiii>
            }
            for(j=0;j<7;j++)
   dded0:	4d1b      	ldr	r5, [pc, #108]	; (ddf40 <loop+0xac0>)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   dded2:	4f15      	ldr	r7, [pc, #84]	; (ddf28 <loop+0xaa8>)
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   dded4:	2300      	movs	r3, #0
   dded6:	602b      	str	r3, [r5, #0]
   dded8:	6829      	ldr	r1, [r5, #0]
   ddeda:	2906      	cmp	r1, #6
   ddedc:	dc34      	bgt.n	ddf48 <loop+0xac8>
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   ddede:	6833      	ldr	r3, [r6, #0]
   ddee0:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   ddee4:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   ddee8:	f8bd e00c 	ldrh.w	lr, [sp, #12]
   ddeec:	fb13 f302 	smulbb	r3, r3, r2
   ddef0:	f8db 2000 	ldr.w	r2, [fp]
   ddef4:	fb12 f200 	smulbb	r2, r2, r0
   ddef8:	4810      	ldr	r0, [pc, #64]	; (ddf3c <loop+0xabc>)
   ddefa:	6800      	ldr	r0, [r0, #0]
   ddefc:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   ddf00:	6838      	ldr	r0, [r7, #0]
   ddf02:	fb10 f00e 	smulbb	r0, r0, lr
   ddf06:	b2c0      	uxtb	r0, r0
   ddf08:	9000      	str	r0, [sp, #0]
   ddf0a:	b2db      	uxtb	r3, r3
   ddf0c:	b2d2      	uxtb	r2, r2
   ddf0e:	b289      	uxth	r1, r1
   ddf10:	4803      	ldr	r0, [pc, #12]	; (ddf20 <loop+0xaa0>)
   ddf12:	f000 fdf5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   ddf16:	682b      	ldr	r3, [r5, #0]
   ddf18:	3301      	adds	r3, #1
   ddf1a:	602b      	str	r3, [r5, #0]
   ddf1c:	e7dc      	b.n	dded8 <loop+0xa58>
   ddf1e:	bf00      	nop
   ddf20:	2003e31c 	.word	0x2003e31c
   ddf24:	2003e2f4 	.word	0x2003e2f4
   ddf28:	2003e35c 	.word	0x2003e35c
   ddf2c:	2003e314 	.word	0x2003e314
   ddf30:	2003e2fc 	.word	0x2003e2fc
   ddf34:	2003e304 	.word	0x2003e304
   ddf38:	2003e34c 	.word	0x2003e34c
   ddf3c:	2003e33c 	.word	0x2003e33c
   ddf40:	2003e340 	.word	0x2003e340
   ddf44:	2003e354 	.word	0x2003e354
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   ddf48:	4e7d      	ldr	r6, [pc, #500]	; (de140 <loop+0xcc0>)
   ddf4a:	6821      	ldr	r1, [r4, #0]
   ddf4c:	4d7d      	ldr	r5, [pc, #500]	; (de144 <loop+0xcc4>)
   ddf4e:	6833      	ldr	r3, [r6, #0]
   ddf50:	9300      	str	r3, [sp, #0]
   ddf52:	3101      	adds	r1, #1
   ddf54:	682b      	ldr	r3, [r5, #0]
   ddf56:	f8db 2000 	ldr.w	r2, [fp]
   ddf5a:	9807      	ldr	r0, [sp, #28]
            
            num(TC1,160+(i*16),0,gclock/1,0);
            num(TC2,207+(i*16),0,gclock/1,0);
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   ddf5c:	f8df a204 	ldr.w	sl, [pc, #516]	; de164 <loop+0xce4>
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   ddf60:	0109      	lsls	r1, r1, #4
   ddf62:	f7f6 fa37 	bl	d43d4 <_Z3numiiiii>
            
            strip.setPixelColor(58+(i*16),rclock,gclock,bclock);
   ddf66:	6821      	ldr	r1, [r4, #0]
   ddf68:	7830      	ldrb	r0, [r6, #0]
   ddf6a:	782b      	ldrb	r3, [r5, #0]
   ddf6c:	f89b 2000 	ldrb.w	r2, [fp]
   ddf70:	9000      	str	r0, [sp, #0]
   ddf72:	0109      	lsls	r1, r1, #4
   ddf74:	313a      	adds	r1, #58	; 0x3a
   ddf76:	b289      	uxth	r1, r1
   ddf78:	4873      	ldr	r0, [pc, #460]	; (de148 <loop+0xcc8>)
   ddf7a:	f000 fdc1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62+(i*16),rclock,gclock,bclock);
   ddf7e:	6821      	ldr	r1, [r4, #0]
   ddf80:	7830      	ldrb	r0, [r6, #0]
   ddf82:	782b      	ldrb	r3, [r5, #0]
   ddf84:	f89b 2000 	ldrb.w	r2, [fp]
   ddf88:	9000      	str	r0, [sp, #0]
   ddf8a:	0109      	lsls	r1, r1, #4
   ddf8c:	313e      	adds	r1, #62	; 0x3e
   ddf8e:	b289      	uxth	r1, r1
   ddf90:	486d      	ldr	r0, [pc, #436]	; (de148 <loop+0xcc8>)
   ddf92:	f000 fdb5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(TC1,160+(i*16),0,gclock/1,0);
   ddf96:	6821      	ldr	r1, [r4, #0]
   ddf98:	486c      	ldr	r0, [pc, #432]	; (de14c <loop+0xccc>)
   ddf9a:	2700      	movs	r7, #0
   ddf9c:	9700      	str	r7, [sp, #0]
   ddf9e:	310a      	adds	r1, #10
   ddfa0:	682b      	ldr	r3, [r5, #0]
   ddfa2:	6800      	ldr	r0, [r0, #0]
   ddfa4:	463a      	mov	r2, r7
   ddfa6:	0109      	lsls	r1, r1, #4
   ddfa8:	f7f6 fa14 	bl	d43d4 <_Z3numiiiii>
            num(TC2,207+(i*16),0,gclock/1,0);
   ddfac:	6821      	ldr	r1, [r4, #0]
   ddfae:	4868      	ldr	r0, [pc, #416]	; (de150 <loop+0xcd0>)
   ddfb0:	9700      	str	r7, [sp, #0]
   ddfb2:	0109      	lsls	r1, r1, #4
   ddfb4:	682b      	ldr	r3, [r5, #0]
   ddfb6:	6800      	ldr	r0, [r0, #0]
   ddfb8:	463a      	mov	r2, r7
   ddfba:	31cf      	adds	r1, #207	; 0xcf
   ddfbc:	f7f6 fa0a 	bl	d43d4 <_Z3numiiiii>
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
   ddfc0:	6821      	ldr	r1, [r4, #0]
   ddfc2:	782b      	ldrb	r3, [r5, #0]
   ddfc4:	4860      	ldr	r0, [pc, #384]	; (de148 <loop+0xcc8>)
   ddfc6:	9700      	str	r7, [sp, #0]
   ddfc8:	310f      	adds	r1, #15
   ddfca:	0109      	lsls	r1, r1, #4
   ddfcc:	b289      	uxth	r1, r1
   ddfce:	463a      	mov	r2, r7
   ddfd0:	f000 fd96 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   ddfd4:	6821      	ldr	r1, [r4, #0]
   ddfd6:	6833      	ldr	r3, [r6, #0]
   ddfd8:	f8db 2000 	ldr.w	r2, [fp]
   ddfdc:	f8da 0000 	ldr.w	r0, [sl]
   ddfe0:	9300      	str	r3, [sp, #0]
   ddfe2:	3110      	adds	r1, #16
   ddfe4:	f04f 0802 	mov.w	r8, #2
   ddfe8:	f04f 090a 	mov.w	r9, #10
   ddfec:	fb92 f2f8 	sdiv	r2, r2, r8
   ddff0:	fb90 f0f9 	sdiv	r0, r0, r9
   ddff4:	463b      	mov	r3, r7
   ddff6:	0109      	lsls	r1, r1, #4
   ddff8:	f7f6 f9ec 	bl	d43d4 <_Z3numiiiii>
            num(itemp%10,303+(i*16),rclock/2,0,bclock);
   ddffc:	6821      	ldr	r1, [r4, #0]
   ddffe:	f8da 0000 	ldr.w	r0, [sl]
   de002:	6833      	ldr	r3, [r6, #0]
   de004:	fb90 fef9 	sdiv	lr, r0, r9
   de008:	0109      	lsls	r1, r1, #4
   de00a:	fb09 001e 	mls	r0, r9, lr, r0
   de00e:	f8db 2000 	ldr.w	r2, [fp]
   de012:	9300      	str	r3, [sp, #0]
   de014:	fb92 f2f8 	sdiv	r2, r2, r8
   de018:	463b      	mov	r3, r7
   de01a:	f201 112f 	addw	r1, r1, #303	; 0x12f
   de01e:	f7f6 f9d9 	bl	d43d4 <_Z3numiiiii>
            strip.setPixelColor(336+(i*16),rclock/2,0,bclock);
   de022:	6821      	ldr	r1, [r4, #0]
   de024:	7833      	ldrb	r3, [r6, #0]
   de026:	f8db 2000 	ldr.w	r2, [fp]
   de02a:	4847      	ldr	r0, [pc, #284]	; (de148 <loop+0xcc8>)
   de02c:	fb92 f2f8 	sdiv	r2, r2, r8
   de030:	3115      	adds	r1, #21
   de032:	0109      	lsls	r1, r1, #4
   de034:	b289      	uxth	r1, r1
   de036:	9300      	str	r3, [sp, #0]
   de038:	b2d2      	uxtb	r2, r2
   de03a:	463b      	mov	r3, r7
   de03c:	f000 fd60 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+(i*16),0,gclock,bclock);
   de040:	6821      	ldr	r1, [r4, #0]
   de042:	6833      	ldr	r3, [r6, #0]
   de044:	4843      	ldr	r0, [pc, #268]	; (de154 <loop+0xcd4>)
   de046:	9300      	str	r3, [sp, #0]
   de048:	3116      	adds	r1, #22
   de04a:	682b      	ldr	r3, [r5, #0]
   de04c:	6800      	ldr	r0, [r0, #0]
            num(HC2,399+(i*16),0,gclock,bclock);
            
            condition(cid,448+(i*16));
   de04e:	f8df 8118 	ldr.w	r8, [pc, #280]	; de168 <loop+0xce8>
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
            num(itemp%10,303+(i*16),rclock/2,0,bclock);
            strip.setPixelColor(336+(i*16),rclock/2,0,bclock);
            
            num(HC1,352+(i*16),0,gclock,bclock);
   de052:	463a      	mov	r2, r7
   de054:	0109      	lsls	r1, r1, #4
   de056:	f7f6 f9bd 	bl	d43d4 <_Z3numiiiii>
            num(HC2,399+(i*16),0,gclock,bclock);
   de05a:	6821      	ldr	r1, [r4, #0]
   de05c:	6833      	ldr	r3, [r6, #0]
   de05e:	483e      	ldr	r0, [pc, #248]	; (de158 <loop+0xcd8>)
   de060:	9300      	str	r3, [sp, #0]
   de062:	0109      	lsls	r1, r1, #4
   de064:	682b      	ldr	r3, [r5, #0]
   de066:	6800      	ldr	r0, [r0, #0]
   de068:	463a      	mov	r2, r7
   de06a:	f201 118f 	addw	r1, r1, #399	; 0x18f
   de06e:	f7f6 f9b1 	bl	d43d4 <_Z3numiiiii>
            
            condition(cid,448+(i*16));
   de072:	6821      	ldr	r1, [r4, #0]
   de074:	f8d8 0000 	ldr.w	r0, [r8]
   de078:	311c      	adds	r1, #28
   de07a:	0109      	lsls	r1, r1, #4
   de07c:	f7fb f9ec 	bl	d9458 <_Z9conditionii>
            dimg(cid,448+(i*16));
   de080:	6821      	ldr	r1, [r4, #0]
   de082:	f8d8 0000 	ldr.w	r0, [r8]
   de086:	f8df 80e4 	ldr.w	r8, [pc, #228]	; de16c <loop+0xcec>
   de08a:	311c      	adds	r1, #28
   de08c:	0109      	lsls	r1, r1, #4
   de08e:	f7fb f947 	bl	d9320 <_Z4dimgii>
            
            
            if(min/10 == 0) {
   de092:	9b05      	ldr	r3, [sp, #20]
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   de094:	6821      	ldr	r1, [r4, #0]
            
            condition(cid,448+(i*16));
            dimg(cid,448+(i*16));
            
            
            if(min/10 == 0) {
   de096:	2b12      	cmp	r3, #18
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   de098:	6833      	ldr	r3, [r6, #0]
   de09a:	9300      	str	r3, [sp, #0]
   de09c:	ea4f 1101 	mov.w	r1, r1, lsl #4
   de0a0:	f46f 7ee8 	mvn.w	lr, #464	; 0x1d0
   de0a4:	46a9      	mov	r9, r5
   de0a6:	682b      	ldr	r3, [r5, #0]
   de0a8:	f8db 2000 	ldr.w	r2, [fp]
   de0ac:	4471      	add	r1, lr
            
            condition(cid,448+(i*16));
            dimg(cid,448+(i*16));
            
            
            if(min/10 == 0) {
   de0ae:	d80e      	bhi.n	de0ce <loop+0xc4e>
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   de0b0:	4638      	mov	r0, r7
   de0b2:	f7f6 f98f 	bl	d43d4 <_Z3numiiiii>
                num(min,((i-numRows)*16)+112,rclock,gclock,bclock);
   de0b6:	6821      	ldr	r1, [r4, #0]
   de0b8:	6833      	ldr	r3, [r6, #0]
   de0ba:	9300      	str	r3, [sp, #0]
   de0bc:	391b      	subs	r1, #27
   de0be:	682b      	ldr	r3, [r5, #0]
   de0c0:	f8db 2000 	ldr.w	r2, [fp]
   de0c4:	9802      	ldr	r0, [sp, #8]
   de0c6:	0109      	lsls	r1, r1, #4
   de0c8:	f7f6 f984 	bl	d43d4 <_Z3numiiiii>
   de0cc:	e00d      	b.n	de0ea <loop+0xc6a>
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
   de0ce:	9804      	ldr	r0, [sp, #16]
   de0d0:	f7f6 f980 	bl	d43d4 <_Z3numiiiii>
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
   de0d4:	6821      	ldr	r1, [r4, #0]
   de0d6:	6833      	ldr	r3, [r6, #0]
   de0d8:	9300      	str	r3, [sp, #0]
   de0da:	391b      	subs	r1, #27
   de0dc:	682b      	ldr	r3, [r5, #0]
   de0de:	f8db 2000 	ldr.w	r2, [fp]
   de0e2:	9806      	ldr	r0, [sp, #24]
   de0e4:	0109      	lsls	r1, r1, #4
   de0e6:	f7f6 f975 	bl	d43d4 <_Z3numiiiii>
            }
            for(j=0;j<7;j++)
   de0ea:	4d1c      	ldr	r5, [pc, #112]	; (de15c <loop+0xcdc>)
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de0ec:	4f14      	ldr	r7, [pc, #80]	; (de140 <loop+0xcc0>)
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   de0ee:	2300      	movs	r3, #0
   de0f0:	602b      	str	r3, [r5, #0]
   de0f2:	462e      	mov	r6, r5
   de0f4:	6829      	ldr	r1, [r5, #0]
   de0f6:	2906      	cmp	r1, #6
   de0f8:	dc3a      	bgt.n	de170 <loop+0xcf0>
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de0fa:	f8d9 3000 	ldr.w	r3, [r9]
   de0fe:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   de102:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   de106:	f8bd e00c 	ldrh.w	lr, [sp, #12]
   de10a:	fb13 f302 	smulbb	r3, r3, r2
   de10e:	f8d8 2000 	ldr.w	r2, [r8]
   de112:	fb12 f200 	smulbb	r2, r2, r0
   de116:	4812      	ldr	r0, [pc, #72]	; (de160 <loop+0xce0>)
   de118:	6800      	ldr	r0, [r0, #0]
   de11a:	3822      	subs	r0, #34	; 0x22
   de11c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   de120:	6838      	ldr	r0, [r7, #0]
   de122:	fb10 f00e 	smulbb	r0, r0, lr
   de126:	b2c0      	uxtb	r0, r0
   de128:	9000      	str	r0, [sp, #0]
   de12a:	b2db      	uxtb	r3, r3
   de12c:	b2d2      	uxtb	r2, r2
   de12e:	b289      	uxth	r1, r1
   de130:	4805      	ldr	r0, [pc, #20]	; (de148 <loop+0xcc8>)
   de132:	f000 fce5 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   de136:	6833      	ldr	r3, [r6, #0]
   de138:	3301      	adds	r3, #1
   de13a:	6033      	str	r3, [r6, #0]
   de13c:	e7da      	b.n	de0f4 <loop+0xc74>
   de13e:	bf00      	nop
   de140:	2003e35c 	.word	0x2003e35c
   de144:	2003e314 	.word	0x2003e314
   de148:	2003e31c 	.word	0x2003e31c
   de14c:	2003e304 	.word	0x2003e304
   de150:	2003e34c 	.word	0x2003e34c
   de154:	2003e2f4 	.word	0x2003e2f4
   de158:	2003e2fc 	.word	0x2003e2fc
   de15c:	2003e340 	.word	0x2003e340
   de160:	2003e33c 	.word	0x2003e33c
   de164:	2003e344 	.word	0x2003e344
   de168:	2003e2f0 	.word	0x2003e2f0
   de16c:	2003e354 	.word	0x2003e354
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+((i-numRows)*16),rclock,gclock,bclock);
   de170:	4fab      	ldr	r7, [pc, #684]	; (de420 <loop+0xfa0>)
   de172:	6821      	ldr	r1, [r4, #0]
   de174:	4eab      	ldr	r6, [pc, #684]	; (de424 <loop+0xfa4>)
   de176:	683b      	ldr	r3, [r7, #0]
   de178:	9300      	str	r3, [sp, #0]
   de17a:	3921      	subs	r1, #33	; 0x21
   de17c:	6833      	ldr	r3, [r6, #0]
   de17e:	f8d8 2000 	ldr.w	r2, [r8]
   de182:	9807      	ldr	r0, [sp, #28]
   de184:	0109      	lsls	r1, r1, #4
   de186:	f7f6 f925 	bl	d43d4 <_Z3numiiiii>
            
            strip.setPixelColor(58+((i-numRows)*16),rclock,gclock,bclock);
   de18a:	6821      	ldr	r1, [r4, #0]
   de18c:	7838      	ldrb	r0, [r7, #0]
   de18e:	7833      	ldrb	r3, [r6, #0]
   de190:	f898 2000 	ldrb.w	r2, [r8]
   de194:	9000      	str	r0, [sp, #0]
   de196:	0109      	lsls	r1, r1, #4
   de198:	f5a1 71f3 	sub.w	r1, r1, #486	; 0x1e6
   de19c:	b289      	uxth	r1, r1
   de19e:	48a2      	ldr	r0, [pc, #648]	; (de428 <loop+0xfa8>)
   de1a0:	f000 fcae 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62+((i-numRows)*16),rclock,gclock,bclock);
   de1a4:	6821      	ldr	r1, [r4, #0]
   de1a6:	7838      	ldrb	r0, [r7, #0]
   de1a8:	7833      	ldrb	r3, [r6, #0]
   de1aa:	f898 2000 	ldrb.w	r2, [r8]
   de1ae:	9000      	str	r0, [sp, #0]
   de1b0:	0109      	lsls	r1, r1, #4
   de1b2:	f5a1 71f1 	sub.w	r1, r1, #482	; 0x1e2
   de1b6:	b289      	uxth	r1, r1
   de1b8:	489b      	ldr	r0, [pc, #620]	; (de428 <loop+0xfa8>)
   de1ba:	f000 fca1 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(TC1,160+((i-numRows)*16),0,gclock/1,0);
   de1be:	6821      	ldr	r1, [r4, #0]
   de1c0:	489a      	ldr	r0, [pc, #616]	; (de42c <loop+0xfac>)
   de1c2:	2500      	movs	r5, #0
   de1c4:	9500      	str	r5, [sp, #0]
   de1c6:	3918      	subs	r1, #24
   de1c8:	6833      	ldr	r3, [r6, #0]
   de1ca:	6800      	ldr	r0, [r0, #0]
   de1cc:	462a      	mov	r2, r5
   de1ce:	0109      	lsls	r1, r1, #4
   de1d0:	f7f6 f900 	bl	d43d4 <_Z3numiiiii>
            num(TC2,207+((i-numRows)*16),0,gclock/1,0);
   de1d4:	6821      	ldr	r1, [r4, #0]
   de1d6:	9500      	str	r5, [sp, #0]
   de1d8:	f46f 70a8 	mvn.w	r0, #336	; 0x150
   de1dc:	0109      	lsls	r1, r1, #4
   de1de:	4401      	add	r1, r0
   de1e0:	4893      	ldr	r0, [pc, #588]	; (de430 <loop+0xfb0>)
   de1e2:	6833      	ldr	r3, [r6, #0]
   de1e4:	6800      	ldr	r0, [r0, #0]
   de1e6:	462a      	mov	r2, r5
   de1e8:	f7f6 f8f4 	bl	d43d4 <_Z3numiiiii>
            strip.setPixelColor(240+((i-numRows)*16),0,gclock/1,0);
   de1ec:	6821      	ldr	r1, [r4, #0]
   de1ee:	7833      	ldrb	r3, [r6, #0]
   de1f0:	488d      	ldr	r0, [pc, #564]	; (de428 <loop+0xfa8>)
   de1f2:	9500      	str	r5, [sp, #0]
   de1f4:	3913      	subs	r1, #19
   de1f6:	0109      	lsls	r1, r1, #4
   de1f8:	b289      	uxth	r1, r1
   de1fa:	462a      	mov	r2, r5
   de1fc:	f000 fc80 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+((i-numRows)*16),rclock/2,0,bclock);
   de200:	6821      	ldr	r1, [r4, #0]
   de202:	4b8c      	ldr	r3, [pc, #560]	; (de434 <loop+0xfb4>)
   de204:	f8d8 2000 	ldr.w	r2, [r8]
   de208:	6818      	ldr	r0, [r3, #0]
   de20a:	683b      	ldr	r3, [r7, #0]
   de20c:	9300      	str	r3, [sp, #0]
   de20e:	3912      	subs	r1, #18
   de210:	f04f 0902 	mov.w	r9, #2
   de214:	f04f 0a0a 	mov.w	sl, #10
   de218:	462b      	mov	r3, r5
   de21a:	fb92 f2f9 	sdiv	r2, r2, r9
   de21e:	0109      	lsls	r1, r1, #4
   de220:	fb90 f0fa 	sdiv	r0, r0, sl
   de224:	f7f6 f8d6 	bl	d43d4 <_Z3numiiiii>
            num(itemp%10,303+((i-numRows)*16),rclock/2,0,bclock);
   de228:	4b82      	ldr	r3, [pc, #520]	; (de434 <loop+0xfb4>)
   de22a:	6821      	ldr	r1, [r4, #0]
   de22c:	6818      	ldr	r0, [r3, #0]
   de22e:	683b      	ldr	r3, [r7, #0]
   de230:	fb90 fefa 	sdiv	lr, r0, sl
   de234:	0109      	lsls	r1, r1, #4
   de236:	fb0a 001e 	mls	r0, sl, lr, r0
   de23a:	f8d8 2000 	ldr.w	r2, [r8]
   de23e:	9300      	str	r3, [sp, #0]
   de240:	fb92 f2f9 	sdiv	r2, r2, r9
   de244:	462b      	mov	r3, r5
   de246:	39f1      	subs	r1, #241	; 0xf1
   de248:	f7f6 f8c4 	bl	d43d4 <_Z3numiiiii>
            strip.setPixelColor(336+((i-numRows)*16),rclock/2,0,bclock);
   de24c:	6821      	ldr	r1, [r4, #0]
   de24e:	783b      	ldrb	r3, [r7, #0]
   de250:	f8d8 2000 	ldr.w	r2, [r8]
   de254:	4874      	ldr	r0, [pc, #464]	; (de428 <loop+0xfa8>)
   de256:	9300      	str	r3, [sp, #0]
   de258:	390d      	subs	r1, #13
   de25a:	0109      	lsls	r1, r1, #4
   de25c:	b289      	uxth	r1, r1
   de25e:	462b      	mov	r3, r5
   de260:	fb92 f2f9 	sdiv	r2, r2, r9
   de264:	b2d2      	uxtb	r2, r2
   de266:	f000 fc4b 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+((i-numRows)*16),0,gclock,bclock);
   de26a:	6821      	ldr	r1, [r4, #0]
   de26c:	683b      	ldr	r3, [r7, #0]
   de26e:	4872      	ldr	r0, [pc, #456]	; (de438 <loop+0xfb8>)
   de270:	9300      	str	r3, [sp, #0]
   de272:	390c      	subs	r1, #12
   de274:	6833      	ldr	r3, [r6, #0]
   de276:	6800      	ldr	r0, [r0, #0]
   de278:	462a      	mov	r2, r5
   de27a:	0109      	lsls	r1, r1, #4
   de27c:	f7f6 f8aa 	bl	d43d4 <_Z3numiiiii>
            num(HC2,399+((i-numRows)*16),0,gclock,bclock);
   de280:	6821      	ldr	r1, [r4, #0]
   de282:	683b      	ldr	r3, [r7, #0]
   de284:	486d      	ldr	r0, [pc, #436]	; (de43c <loop+0xfbc>)
   de286:	9300      	str	r3, [sp, #0]
   de288:	0109      	lsls	r1, r1, #4
   de28a:	6833      	ldr	r3, [r6, #0]
   de28c:	6800      	ldr	r0, [r0, #0]
            
            condition(cid,448+((i-numRows)*16));
   de28e:	4e6c      	ldr	r6, [pc, #432]	; (de440 <loop+0xfc0>)
            num(itemp/10,256+((i-numRows)*16),rclock/2,0,bclock);
            num(itemp%10,303+((i-numRows)*16),rclock/2,0,bclock);
            strip.setPixelColor(336+((i-numRows)*16),rclock/2,0,bclock);
            
            num(HC1,352+((i-numRows)*16),0,gclock,bclock);
            num(HC2,399+((i-numRows)*16),0,gclock,bclock);
   de290:	462a      	mov	r2, r5
   de292:	3991      	subs	r1, #145	; 0x91
   de294:	f7f6 f89e 	bl	d43d4 <_Z3numiiiii>
            
            condition(cid,448+((i-numRows)*16));
   de298:	6821      	ldr	r1, [r4, #0]
   de29a:	6830      	ldr	r0, [r6, #0]
   de29c:	3906      	subs	r1, #6
   de29e:	0109      	lsls	r1, r1, #4
   de2a0:	f7fb f8da 	bl	d9458 <_Z9conditionii>
            dimg(cid,448+((i-numRows)*16));
   de2a4:	6821      	ldr	r1, [r4, #0]
   de2a6:	6830      	ldr	r0, [r6, #0]
   de2a8:	3906      	subs	r1, #6
   de2aa:	0109      	lsls	r1, r1, #4
   de2ac:	f7fb f838 	bl	d9320 <_Z4dimgii>
            strip.show();
   de2b0:	485d      	ldr	r0, [pc, #372]	; (de428 <loop+0xfa8>)
   de2b2:	f000 fa83 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            //Delay - speed of scroll
            if(digitalRead(D0) == HIGH){
   de2b6:	4628      	mov	r0, r5
   de2b8:	f002 ffd2 	bl	e1260 <digitalRead>
   de2bc:	2801      	cmp	r0, #1
   de2be:	d009      	beq.n	de2d4 <loop+0xe54>
                break;
            }
            delay(200);
   de2c0:	20c8      	movs	r0, #200	; 0xc8
   de2c2:	f001 fd17 	bl	dfcf4 <delay>
            
            //Erase for next shift
            strip.clear();
   de2c6:	4858      	ldr	r0, [pc, #352]	; (de428 <loop+0xfa8>)
   de2c8:	f000 fc49 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   de2cc:	6823      	ldr	r3, [r4, #0]
   de2ce:	3301      	adds	r3, #1
   de2d0:	6023      	str	r3, [r4, #0]
   de2d2:	e5cc      	b.n	dde6e <loop+0x9ee>
//////////////////////////////////////
///////GET WEATHER DATA///////////////
//////////////////////////////////////
    
    
    if(tmr >= 60) {
   de2d4:	4a5b      	ldr	r2, [pc, #364]	; (de444 <loop+0xfc4>)
   de2d6:	6813      	ldr	r3, [r2, #0]
   de2d8:	2b3b      	cmp	r3, #59	; 0x3b
   de2da:	4616      	mov	r6, r2
   de2dc:	dd34      	ble.n	de348 <loop+0xec8>
   de2de:	4c5a      	ldr	r4, [pc, #360]	; (de448 <loop+0xfc8>)
        Particle.publish("Weather", "1", PRIVATE);
   de2e0:	4a5a      	ldr	r2, [pc, #360]	; (de44c <loop+0xfcc>)
   de2e2:	7823      	ldrb	r3, [r4, #0]
   de2e4:	495a      	ldr	r1, [pc, #360]	; (de450 <loop+0xfd0>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de2e6:	2500      	movs	r5, #0
   de2e8:	a808      	add	r0, sp, #32
   de2ea:	f88d 5000 	strb.w	r5, [sp]
   de2ee:	f7f6 f857 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de2f2:	a809      	add	r0, sp, #36	; 0x24
   de2f4:	f7fe ffac 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   de2f8:	f002 ffdc 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   de2fc:	2003      	movs	r0, #3
   de2fe:	f7f5 ff93 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   de302:	2801      	cmp	r0, #1
   de304:	d10a      	bne.n	de31c <loop+0xe9c>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de306:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   de308:	4a50      	ldr	r2, [pc, #320]	; (de44c <loop+0xfcc>)
   de30a:	f88d 5000 	strb.w	r5, [sp]
   de30e:	a808      	add	r0, sp, #32
   de310:	4950      	ldr	r1, [pc, #320]	; (de454 <loop+0xfd4>)
   de312:	f7f6 f845 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de316:	a809      	add	r0, sp, #36	; 0x24
   de318:	f7fe ff9a 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   de31c:	f002 ffca 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   de320:	2004      	movs	r0, #4
   de322:	f7f5 ff81 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   de326:	2801      	cmp	r0, #1
   de328:	d10b      	bne.n	de342 <loop+0xec2>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de32a:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de32c:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   de32e:	494a      	ldr	r1, [pc, #296]	; (de458 <loop+0xfd8>)
   de330:	f88d 2000 	strb.w	r2, [sp]
   de334:	a808      	add	r0, sp, #32
   de336:	4a45      	ldr	r2, [pc, #276]	; (de44c <loop+0xfcc>)
   de338:	f7f6 f832 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de33c:	a809      	add	r0, sp, #36	; 0x24
   de33e:	f7fe ff87 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        tmr = 0;
   de342:	2300      	movs	r3, #0
   de344:	6033      	str	r3, [r6, #0]
   de346:	e1a4      	b.n	de692 <loop+0x1212>
    }
    else if(tmr == 30){
   de348:	2b1e      	cmp	r3, #30
   de34a:	d135      	bne.n	de3b8 <loop+0xf38>
   de34c:	4c3e      	ldr	r4, [pc, #248]	; (de448 <loop+0xfc8>)
        tmr = tmr+1;
        Particle.publish("Weather", "1", PRIVATE);
   de34e:	4940      	ldr	r1, [pc, #256]	; (de450 <loop+0xfd0>)
            Particle.publish("itempdat", "1", PRIVATE);
        }
        tmr = 0;
    }
    else if(tmr == 30){
        tmr = tmr+1;
   de350:	231f      	movs	r3, #31
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de352:	2500      	movs	r5, #0
   de354:	6013      	str	r3, [r2, #0]
        Particle.publish("Weather", "1", PRIVATE);
   de356:	a808      	add	r0, sp, #32
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de358:	7823      	ldrb	r3, [r4, #0]
   de35a:	4a3c      	ldr	r2, [pc, #240]	; (de44c <loop+0xfcc>)
   de35c:	f88d 5000 	strb.w	r5, [sp]
   de360:	f7f6 f81e 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de364:	a809      	add	r0, sp, #36	; 0x24
   de366:	f7fe ff73 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   de36a:	f002 ffa3 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   de36e:	2003      	movs	r0, #3
   de370:	f7f5 ff5a 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   de374:	2801      	cmp	r0, #1
   de376:	d10a      	bne.n	de38e <loop+0xf0e>
   de378:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   de37a:	4a34      	ldr	r2, [pc, #208]	; (de44c <loop+0xfcc>)
   de37c:	f88d 5000 	strb.w	r5, [sp]
   de380:	a808      	add	r0, sp, #32
   de382:	4934      	ldr	r1, [pc, #208]	; (de454 <loop+0xfd4>)
   de384:	f7f6 f80c 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de388:	a809      	add	r0, sp, #36	; 0x24
   de38a:	f7fe ff61 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   de38e:	f002 ff91 	bl	e12b4 <_Z21__fetch_global_EEPROMv>
   de392:	2004      	movs	r0, #4
   de394:	f7f5 ff48 	bl	d4228 <_ZN11EEPROMClass4readEi.isra.9>
   de398:	2801      	cmp	r0, #1
   de39a:	f040 817a 	bne.w	de692 <loop+0x1212>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de39e:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de3a0:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   de3a2:	492d      	ldr	r1, [pc, #180]	; (de458 <loop+0xfd8>)
   de3a4:	f88d 2000 	strb.w	r2, [sp]
   de3a8:	a808      	add	r0, sp, #32
   de3aa:	4a28      	ldr	r2, [pc, #160]	; (de44c <loop+0xfcc>)
   de3ac:	f7f5 fff8 	bl	d43a0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.13.constprop.16>
   de3b0:	a809      	add	r0, sp, #36	; 0x24
   de3b2:	f7fe ff4d 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   de3b6:	e16c      	b.n	de692 <loop+0x1212>
        }
    }
    else{
        tmr = tmr+1;
   de3b8:	3301      	adds	r3, #1
   de3ba:	6013      	str	r3, [r2, #0]
    }

}
   de3bc:	e169      	b.n	de692 <loop+0x1212>
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
   de3be:	f7fe fa63 	bl	dc888 <_Z8settingsv>
   de3c2:	f7ff b90b 	b.w	dd5dc <loop+0x15c>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
        strip.show();
        delay(5000);
        strip.clear();
    }
    else if(digitalRead(D2) == LOW && digitalRead(D1) == LOW && digitalRead(D0) == HIGH){            //Bottom Button Press
   de3c6:	2002      	movs	r0, #2
   de3c8:	f002 ff4a 	bl	e1260 <digitalRead>
   de3cc:	2800      	cmp	r0, #0
   de3ce:	f47f a992 	bne.w	dd6f6 <loop+0x276>
   de3d2:	2001      	movs	r0, #1
   de3d4:	f002 ff44 	bl	e1260 <digitalRead>
   de3d8:	2800      	cmp	r0, #0
   de3da:	f47f a98c 	bne.w	dd6f6 <loop+0x276>
   de3de:	f002 ff3f 	bl	e1260 <digitalRead>
   de3e2:	2801      	cmp	r0, #1
   de3e4:	4605      	mov	r5, r0
   de3e6:	f47f a986 	bne.w	dd6f6 <loop+0x276>
        strip.clear();
   de3ea:	480f      	ldr	r0, [pc, #60]	; (de428 <loop+0xfa8>)
   de3ec:	f000 fbb7 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
        if(dmode == 1){
   de3f0:	6822      	ldr	r2, [r4, #0]
   de3f2:	4b1a      	ldr	r3, [pc, #104]	; (de45c <loop+0xfdc>)
   de3f4:	2a01      	cmp	r2, #1
   de3f6:	d102      	bne.n	de3fe <loop+0xf7e>
            dmode = 3;
   de3f8:	2203      	movs	r2, #3
   de3fa:	601a      	str	r2, [r3, #0]
   de3fc:	e003      	b.n	de406 <loop+0xf86>
        }
        else{
            scan = 2;
   de3fe:	9903      	ldr	r1, [sp, #12]
            dmode = 1;
   de400:	601d      	str	r5, [r3, #0]
        strip.clear();
        if(dmode == 1){
            dmode = 3;
        }
        else{
            scan = 2;
   de402:	2202      	movs	r2, #2
   de404:	600a      	str	r2, [r1, #0]
            dmode = 1;
        }
        strip.show();
   de406:	4808      	ldr	r0, [pc, #32]	; (de428 <loop+0xfa8>)
   de408:	f000 f9d8 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
        while(digitalRead(D0) == HIGH){
   de40c:	2000      	movs	r0, #0
   de40e:	f002 ff27 	bl	e1260 <digitalRead>
   de412:	2801      	cmp	r0, #1
   de414:	f47f a96f 	bne.w	dd6f6 <loop+0x276>
            delay(10);
   de418:	200a      	movs	r0, #10
   de41a:	f001 fc6b 	bl	dfcf4 <delay>
        else{
            scan = 2;
            dmode = 1;
        }
        strip.show();
        while(digitalRead(D0) == HIGH){
   de41e:	e7f5      	b.n	de40c <loop+0xf8c>
   de420:	2003e35c 	.word	0x2003e35c
   de424:	2003e314 	.word	0x2003e314
   de428:	2003e31c 	.word	0x2003e31c
   de42c:	2003e304 	.word	0x2003e304
   de430:	2003e34c 	.word	0x2003e34c
   de434:	2003e344 	.word	0x2003e344
   de438:	2003e2f4 	.word	0x2003e2f4
   de43c:	2003e2fc 	.word	0x2003e2fc
   de440:	2003e2f0 	.word	0x2003e2f0
   de444:	2003e364 	.word	0x2003e364
   de448:	2003e334 	.word	0x2003e334
   de44c:	000e490b 	.word	0x000e490b
   de450:	000e45b6 	.word	0x000e45b6
   de454:	000e45cc 	.word	0x000e45cc
   de458:	000e45e1 	.word	0x000e45e1
   de45c:	2003e330 	.word	0x2003e330
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
   de460:	6823      	ldr	r3, [r4, #0]
   de462:	488d      	ldr	r0, [pc, #564]	; (de698 <loop+0x1218>)
   de464:	4d8d      	ldr	r5, [pc, #564]	; (de69c <loop+0x121c>)
   de466:	2b01      	cmp	r3, #1
   de468:	d120      	bne.n	de4ac <loop+0x102c>
            dmode = 2;
            photoupd = 1;
   de46a:	498d      	ldr	r1, [pc, #564]	; (de6a0 <loop+0x1220>)
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
            dmode = 2;
   de46c:	2602      	movs	r6, #2
            photoupd = 1;
   de46e:	600b      	str	r3, [r1, #0]
            strip.setPixelColor(7,0,gclock,bclock/2);
   de470:	6829      	ldr	r1, [r5, #0]
   de472:	fb91 f1f6 	sdiv	r1, r1, r6
   de476:	b2c9      	uxtb	r1, r1
   de478:	7803      	ldrb	r3, [r0, #0]
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
            dmode = 2;
   de47a:	6026      	str	r6, [r4, #0]
            photoupd = 1;
            strip.setPixelColor(7,0,gclock,bclock/2);
   de47c:	4889      	ldr	r0, [pc, #548]	; (de6a4 <loop+0x1224>)
   de47e:	9100      	str	r1, [sp, #0]
   de480:	2107      	movs	r1, #7
   de482:	f000 fb3d 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   de486:	4887      	ldr	r0, [pc, #540]	; (de6a4 <loop+0x1224>)
   de488:	f000 f998 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   de48c:	2001      	movs	r0, #1
   de48e:	f002 fee7 	bl	e1260 <digitalRead>
   de492:	2801      	cmp	r0, #1
   de494:	d103      	bne.n	de49e <loop+0x101e>
                delay(5);
   de496:	2005      	movs	r0, #5
   de498:	f001 fc2c 	bl	dfcf4 <delay>
        if(dmode == 1){
            dmode = 2;
            photoupd = 1;
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   de49c:	e7f6      	b.n	de48c <loop+0x100c>
                delay(5);
            }
            strip.clear();
   de49e:	4881      	ldr	r0, [pc, #516]	; (de6a4 <loop+0x1224>)
   de4a0:	f000 fb5d 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   de4a4:	487f      	ldr	r0, [pc, #508]	; (de6a4 <loop+0x1224>)
   de4a6:	f000 f989 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   de4aa:	e021      	b.n	de4f0 <loop+0x1070>
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
   de4ac:	7803      	ldrb	r3, [r0, #0]
   de4ae:	6829      	ldr	r1, [r5, #0]
   de4b0:	2002      	movs	r0, #2
   de4b2:	fb91 f1f0 	sdiv	r1, r1, r0
   de4b6:	b2c9      	uxtb	r1, r1
   de4b8:	9100      	str	r1, [sp, #0]
   de4ba:	487a      	ldr	r0, [pc, #488]	; (de6a4 <loop+0x1224>)
   de4bc:	2107      	movs	r1, #7
   de4be:	f000 fb1f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   de4c2:	4878      	ldr	r0, [pc, #480]	; (de6a4 <loop+0x1224>)
   de4c4:	f000 f97a 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   de4c8:	2001      	movs	r0, #1
   de4ca:	f002 fec9 	bl	e1260 <digitalRead>
   de4ce:	2801      	cmp	r0, #1
   de4d0:	d103      	bne.n	de4da <loop+0x105a>
                delay(5);
   de4d2:	2005      	movs	r0, #5
   de4d4:	f001 fc0e 	bl	dfcf4 <delay>
            strip.show();
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   de4d8:	e7f6      	b.n	de4c8 <loop+0x1048>
                delay(5);
            }
            strip.clear();
   de4da:	4872      	ldr	r0, [pc, #456]	; (de6a4 <loop+0x1224>)
   de4dc:	f000 fb3f 	bl	deb5e <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   de4e0:	4870      	ldr	r0, [pc, #448]	; (de6a4 <loop+0x1224>)
   de4e2:	f000 f96b 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
            scan = 2;
   de4e6:	9a03      	ldr	r2, [sp, #12]
   de4e8:	2302      	movs	r3, #2
   de4ea:	6013      	str	r3, [r2, #0]
            dmode = 1;
   de4ec:	2301      	movs	r3, #1
   de4ee:	6023      	str	r3, [r4, #0]
        }
        while(digitalRead(D1) == HIGH){
   de4f0:	2001      	movs	r0, #1
   de4f2:	f002 feb5 	bl	e1260 <digitalRead>
   de4f6:	2801      	cmp	r0, #1
   de4f8:	f47f a90f 	bne.w	dd71a <loop+0x29a>
            delay(10);
   de4fc:	200a      	movs	r0, #10
   de4fe:	f001 fbf9 	bl	dfcf4 <delay>
            strip.clear();
            strip.show();
            scan = 2;
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
   de502:	e7f5      	b.n	de4f0 <loop+0x1070>
//////////////////////////////////////
    
    if(dmode == 1){                                                     //Mode 1
        if(mprev != min || scan == 2) {
            if(analogRead(A4)>bound || EEPROM.read(6) == 0){
                mprev = Time.minute();
   de504:	f001 fbe2 	bl	dfccc <_ZN9TimeClass6minuteEv>
                if(min/10 == 0) {
   de508:	f1bb 0f12 	cmp.w	fp, #18
//////////////////////////////////////
    
    if(dmode == 1){                                                     //Mode 1
        if(mprev != min || scan == 2) {
            if(analogRead(A4)>bound || EEPROM.read(6) == 0){
                mprev = Time.minute();
   de50c:	f8ca 0000 	str.w	r0, [sl]
                if(min/10 == 0) {
   de510:	d812      	bhi.n	de538 <loop+0x10b8>
                    num(0,79,rclock,gclock,bclock);
   de512:	f8d8 3000 	ldr.w	r3, [r8]
   de516:	9300      	str	r3, [sp, #0]
   de518:	6833      	ldr	r3, [r6, #0]
   de51a:	682a      	ldr	r2, [r5, #0]
   de51c:	214f      	movs	r1, #79	; 0x4f
   de51e:	2000      	movs	r0, #0
   de520:	f7f5 ff58 	bl	d43d4 <_Z3numiiiii>
                    num(min,112,rclock,gclock,bclock);
   de524:	f8d8 3000 	ldr.w	r3, [r8]
   de528:	9300      	str	r3, [sp, #0]
   de52a:	6833      	ldr	r3, [r6, #0]
   de52c:	682a      	ldr	r2, [r5, #0]
   de52e:	9802      	ldr	r0, [sp, #8]
   de530:	2170      	movs	r1, #112	; 0x70
   de532:	f7f5 ff4f 	bl	d43d4 <_Z3numiiiii>
   de536:	e018      	b.n	de56a <loop+0x10ea>
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
   de538:	9b02      	ldr	r3, [sp, #8]
   de53a:	f04f 0b0a 	mov.w	fp, #10
   de53e:	fb93 fafb 	sdiv	sl, r3, fp
   de542:	f8d8 3000 	ldr.w	r3, [r8]
   de546:	9300      	str	r3, [sp, #0]
   de548:	6833      	ldr	r3, [r6, #0]
   de54a:	682a      	ldr	r2, [r5, #0]
   de54c:	214f      	movs	r1, #79	; 0x4f
   de54e:	4650      	mov	r0, sl
   de550:	f7f5 ff40 	bl	d43d4 <_Z3numiiiii>
                    num((min%10),112,rclock,gclock,bclock);
   de554:	f8d8 3000 	ldr.w	r3, [r8]
   de558:	9802      	ldr	r0, [sp, #8]
   de55a:	9300      	str	r3, [sp, #0]
   de55c:	6833      	ldr	r3, [r6, #0]
   de55e:	682a      	ldr	r2, [r5, #0]
   de560:	2170      	movs	r1, #112	; 0x70
   de562:	fb0b 001a 	mls	r0, fp, sl, r0
   de566:	f7f5 ff35 	bl	d43d4 <_Z3numiiiii>
                }
                for(i=0;i<7;i++)
   de56a:	2300      	movs	r3, #0
   de56c:	f8df a138 	ldr.w	sl, [pc, #312]	; de6a8 <loop+0x1228>
   de570:	f8df b128 	ldr.w	fp, [pc, #296]	; de69c <loop+0x121c>
   de574:	6023      	str	r3, [r4, #0]
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de576:	f04f 080a 	mov.w	r8, #10
   de57a:	fb97 f8f8 	sdiv	r8, r7, r8
   de57e:	fa5f f888 	uxtb.w	r8, r8
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
                    num((min%10),112,rclock,gclock,bclock);
                }
                for(i=0;i<7;i++)
   de582:	6821      	ldr	r1, [r4, #0]
   de584:	2906      	cmp	r1, #6
   de586:	f73f a927 	bgt.w	dd7d8 <loop+0x358>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de58a:	f8db 0000 	ldr.w	r0, [fp]
   de58e:	6833      	ldr	r3, [r6, #0]
   de590:	682a      	ldr	r2, [r5, #0]
   de592:	fb10 f008 	smulbb	r0, r0, r8
   de596:	b2c0      	uxtb	r0, r0
   de598:	fb13 f308 	smulbb	r3, r3, r8
   de59c:	fb12 f208 	smulbb	r2, r2, r8
   de5a0:	9000      	str	r0, [sp, #0]
   de5a2:	b2db      	uxtb	r3, r3
   de5a4:	b2d2      	uxtb	r2, r2
   de5a6:	b289      	uxth	r1, r1
   de5a8:	483e      	ldr	r0, [pc, #248]	; (de6a4 <loop+0x1224>)
   de5aa:	f000 faa9 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
                    num((min%10),112,rclock,gclock,bclock);
                }
                for(i=0;i<7;i++)
   de5ae:	f8da 3000 	ldr.w	r3, [sl]
   de5b2:	3301      	adds	r3, #1
   de5b4:	f8ca 3000 	str.w	r3, [sl]
   de5b8:	e7e3      	b.n	de582 <loop+0x1102>
                }
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
            else{
                mprev = Time.minute();
   de5ba:	f001 fb87 	bl	dfccc <_ZN9TimeClass6minuteEv>
                if(min/10 == 0) {
   de5be:	f1bb 0f12 	cmp.w	fp, #18
                }
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
            else{
                mprev = Time.minute();
   de5c2:	f8ca 0000 	str.w	r0, [sl]
                if(min/10 == 0) {
   de5c6:	d812      	bhi.n	de5ee <loop+0x116e>
                    snum(0,63,rclock,gclock,bclock);
   de5c8:	f8d8 3000 	ldr.w	r3, [r8]
   de5cc:	9300      	str	r3, [sp, #0]
   de5ce:	6833      	ldr	r3, [r6, #0]
   de5d0:	682a      	ldr	r2, [r5, #0]
   de5d2:	213f      	movs	r1, #63	; 0x3f
   de5d4:	2000      	movs	r0, #0
   de5d6:	f7f7 ff31 	bl	d643c <_Z4snumiiiii>
                    snum(min,95,rclock,gclock,bclock);
   de5da:	f8d8 3000 	ldr.w	r3, [r8]
   de5de:	9300      	str	r3, [sp, #0]
   de5e0:	6833      	ldr	r3, [r6, #0]
   de5e2:	682a      	ldr	r2, [r5, #0]
   de5e4:	9802      	ldr	r0, [sp, #8]
   de5e6:	215f      	movs	r1, #95	; 0x5f
   de5e8:	f7f7 ff28 	bl	d643c <_Z4snumiiiii>
   de5ec:	e018      	b.n	de620 <loop+0x11a0>
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
   de5ee:	9b02      	ldr	r3, [sp, #8]
   de5f0:	f04f 0b0a 	mov.w	fp, #10
   de5f4:	fb93 fafb 	sdiv	sl, r3, fp
   de5f8:	f8d8 3000 	ldr.w	r3, [r8]
   de5fc:	9300      	str	r3, [sp, #0]
   de5fe:	6833      	ldr	r3, [r6, #0]
   de600:	682a      	ldr	r2, [r5, #0]
   de602:	213f      	movs	r1, #63	; 0x3f
   de604:	4650      	mov	r0, sl
   de606:	f7f7 ff19 	bl	d643c <_Z4snumiiiii>
                    snum((min%10),95,rclock,gclock,bclock);
   de60a:	f8d8 3000 	ldr.w	r3, [r8]
   de60e:	9802      	ldr	r0, [sp, #8]
   de610:	9300      	str	r3, [sp, #0]
   de612:	6833      	ldr	r3, [r6, #0]
   de614:	682a      	ldr	r2, [r5, #0]
   de616:	215f      	movs	r1, #95	; 0x5f
   de618:	fb0b 001a 	mls	r0, fp, sl, r0
   de61c:	f7f7 ff0e 	bl	d643c <_Z4snumiiiii>
                }
                for(i=0;i<5;i++)
   de620:	2300      	movs	r3, #0
   de622:	f8df a084 	ldr.w	sl, [pc, #132]	; de6a8 <loop+0x1228>
   de626:	f8df b074 	ldr.w	fp, [pc, #116]	; de69c <loop+0x121c>
   de62a:	6023      	str	r3, [r4, #0]
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de62c:	f04f 080a 	mov.w	r8, #10
   de630:	fb97 f8f8 	sdiv	r8, r7, r8
   de634:	fa5f f888 	uxtb.w	r8, r8
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
                    snum((min%10),95,rclock,gclock,bclock);
                }
                for(i=0;i<5;i++)
   de638:	6821      	ldr	r1, [r4, #0]
   de63a:	2904      	cmp	r1, #4
   de63c:	dc17      	bgt.n	de66e <loop+0x11ee>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de63e:	f8db 0000 	ldr.w	r0, [fp]
   de642:	6833      	ldr	r3, [r6, #0]
   de644:	682a      	ldr	r2, [r5, #0]
   de646:	fb10 f008 	smulbb	r0, r0, r8
   de64a:	b2c0      	uxtb	r0, r0
   de64c:	fb13 f308 	smulbb	r3, r3, r8
   de650:	fb12 f208 	smulbb	r2, r2, r8
   de654:	9000      	str	r0, [sp, #0]
   de656:	b2db      	uxtb	r3, r3
   de658:	b2d2      	uxtb	r2, r2
   de65a:	b289      	uxth	r1, r1
   de65c:	4811      	ldr	r0, [pc, #68]	; (de6a4 <loop+0x1224>)
   de65e:	f000 fa4f 	bl	deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
                    snum((min%10),95,rclock,gclock,bclock);
                }
                for(i=0;i<5;i++)
   de662:	f8da 3000 	ldr.w	r3, [sl]
   de666:	3301      	adds	r3, #1
   de668:	f8ca 3000 	str.w	r3, [sl]
   de66c:	e7e4      	b.n	de638 <loop+0x11b8>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
   de66e:	4b0b      	ldr	r3, [pc, #44]	; (de69c <loop+0x121c>)
   de670:	681b      	ldr	r3, [r3, #0]
   de672:	9300      	str	r3, [sp, #0]
   de674:	200a      	movs	r0, #10
   de676:	6833      	ldr	r3, [r6, #0]
   de678:	fb97 fef0 	sdiv	lr, r7, r0
   de67c:	682a      	ldr	r2, [r5, #0]
   de67e:	fb00 701e 	mls	r0, r0, lr, r7
   de682:	2110      	movs	r1, #16
   de684:	f7f7 feda 	bl	d643c <_Z4snumiiiii>
                strip.show();
   de688:	4806      	ldr	r0, [pc, #24]	; (de6a4 <loop+0x1224>)
   de68a:	f000 f897 	bl	de7bc <_ZN17Adafruit_NeoPixel4showEv>
   de68e:	f7ff b8b3 	b.w	dd7f8 <loop+0x378>
    }
    else{
        tmr = tmr+1;
    }

}
   de692:	b00b      	add	sp, #44	; 0x2c
   de694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de698:	2003e314 	.word	0x2003e314
   de69c:	2003e35c 	.word	0x2003e35c
   de6a0:	2003e348 	.word	0x2003e348
   de6a4:	2003e31c 	.word	0x2003e31c
   de6a8:	2003e33c 	.word	0x2003e33c

000de6ac <_GLOBAL__sub_I_strip>:
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   de6ac:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   de6ae:	4b0b      	ldr	r3, [pc, #44]	; (de6dc <_GLOBAL__sub_I_strip+0x30>)

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_COUNT 256
#define PIXEL_PIN A3
#define PIXEL_TYPE WS2812
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   de6b0:	4c0b      	ldr	r4, [pc, #44]	; (de6e0 <_GLOBAL__sub_I_strip+0x34>)
   de6b2:	2200      	movs	r2, #0
   de6b4:	701a      	strb	r2, [r3, #0]
   de6b6:	4b0b      	ldr	r3, [pc, #44]	; (de6e4 <_GLOBAL__sub_I_strip+0x38>)
   de6b8:	2201      	movs	r2, #1
   de6ba:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   de6bc:	f000 fa6e 	bl	deb9c <HAL_Pin_Map>
   de6c0:	2210      	movs	r2, #16
   de6c2:	f44f 7180 	mov.w	r1, #256	; 0x100
   de6c6:	4620      	mov	r0, r4
   de6c8:	2302      	movs	r3, #2
   de6ca:	f000 f865 	bl	de798 <_ZN17Adafruit_NeoPixelC1Ethh>
   de6ce:	4620      	mov	r0, r4
   de6d0:	4a05      	ldr	r2, [pc, #20]	; (de6e8 <_GLOBAL__sub_I_strip+0x3c>)
   de6d2:	4906      	ldr	r1, [pc, #24]	; (de6ec <_GLOBAL__sub_I_strip+0x40>)
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   de6d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

// IMPORTANT: Set pixel COUNT, PIN and TYPE
#define PIXEL_COUNT 256
#define PIXEL_PIN A3
#define PIXEL_TYPE WS2812
Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);
   de6d8:	f002 be40 	b.w	e135c <__aeabi_atexit>
   de6dc:	2003e2f8 	.word	0x2003e2f8
   de6e0:	2003e31c 	.word	0x2003e31c
   de6e4:	2003e334 	.word	0x2003e334
   de6e8:	2003e2e8 	.word	0x2003e2e8
   de6ec:	000de6f9 	.word	0x000de6f9

000de6f0 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   de6f0:	f000 badc 	b.w	decac <HAL_Timer_Get_Micro_Seconds>

000de6f4 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   de6f4:	f000 bad2 	b.w	dec9c <HAL_Delay_Microseconds>

000de6f8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   de6f8:	b510      	push	{r4, lr}
   de6fa:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   de6fc:	68c0      	ldr	r0, [r0, #12]
   de6fe:	b108      	cbz	r0, de704 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   de700:	f000 fd92 	bl	df228 <free>
  if (begun) pinMode(pin, INPUT);
   de704:	7823      	ldrb	r3, [r4, #0]
   de706:	b11b      	cbz	r3, de710 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   de708:	2100      	movs	r1, #0
   de70a:	79e0      	ldrb	r0, [r4, #7]
   de70c:	f002 fd7e 	bl	e120c <pinMode>
}
   de710:	4620      	mov	r0, r4
   de712:	bd10      	pop	{r4, pc}

000de714 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   de714:	b538      	push	{r3, r4, r5, lr}
   de716:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   de718:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   de71a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   de71c:	b108      	cbz	r0, de722 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   de71e:	f000 fd83 	bl	df228 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   de722:	79a3      	ldrb	r3, [r4, #6]
   de724:	2b06      	cmp	r3, #6
   de726:	bf0c      	ite	eq
   de728:	2004      	moveq	r0, #4
   de72a:	2003      	movne	r0, #3
   de72c:	fb10 f005 	smulbb	r0, r0, r5
   de730:	b280      	uxth	r0, r0
   de732:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   de734:	f000 fd70 	bl	df218 <malloc>
   de738:	60e0      	str	r0, [r4, #12]
   de73a:	b128      	cbz	r0, de748 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   de73c:	88a2      	ldrh	r2, [r4, #4]
   de73e:	2100      	movs	r1, #0
   de740:	f003 fd8a 	bl	e2258 <memset>
    numLEDs = n;
   de744:	8065      	strh	r5, [r4, #2]
   de746:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   de748:	80a0      	strh	r0, [r4, #4]
   de74a:	8060      	strh	r0, [r4, #2]
   de74c:	bd38      	pop	{r3, r4, r5, pc}

000de74e <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   de74e:	b510      	push	{r4, lr}
   de750:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   de752:	2101      	movs	r1, #1
   de754:	79c0      	ldrb	r0, [r0, #7]
   de756:	f002 fd59 	bl	e120c <pinMode>
  digitalWrite(pin, LOW);
   de75a:	2100      	movs	r1, #0
   de75c:	79e0      	ldrb	r0, [r4, #7]
   de75e:	f002 fd66 	bl	e122e <digitalWrite>
  begun = true;
   de762:	2301      	movs	r3, #1
   de764:	7023      	strb	r3, [r4, #0]
   de766:	bd10      	pop	{r4, pc}

000de768 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   de768:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   de76a:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   de76c:	4605      	mov	r5, r0
   de76e:	460c      	mov	r4, r1
    if (begun) {
   de770:	b11b      	cbz	r3, de77a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   de772:	2100      	movs	r1, #0
   de774:	79c0      	ldrb	r0, [r0, #7]
   de776:	f002 fd49 	bl	e120c <pinMode>
    }
    pin = p;
    if (begun) {
   de77a:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   de77c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   de77e:	b153      	cbz	r3, de796 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   de780:	b2a4      	uxth	r4, r4
   de782:	4620      	mov	r0, r4
   de784:	2101      	movs	r1, #1
   de786:	f002 fd41 	bl	e120c <pinMode>
        digitalWrite(p, LOW);
   de78a:	4620      	mov	r0, r4
   de78c:	2100      	movs	r1, #0
    }
}
   de78e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   de792:	f002 bd4c 	b.w	e122e <digitalWrite>
   de796:	bd38      	pop	{r3, r4, r5, pc}

000de798 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   de798:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   de79a:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   de79c:	4604      	mov	r4, r0
   de79e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   de7a0:	7183      	strb	r3, [r0, #6]
   de7a2:	7005      	strb	r5, [r0, #0]
   de7a4:	7205      	strb	r5, [r0, #8]
   de7a6:	60c5      	str	r5, [r0, #12]
   de7a8:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   de7aa:	f7ff ffb3 	bl	de714 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   de7ae:	4620      	mov	r0, r4
   de7b0:	4631      	mov	r1, r6
   de7b2:	f7ff ffd9 	bl	de768 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   de7b6:	4620      	mov	r0, r4
   de7b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000de7bc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   de7bc:	68c3      	ldr	r3, [r0, #12]
   de7be:	2b00      	cmp	r3, #0
   de7c0:	f000 818b 	beq.w	deada <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   de7c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de7c8:	7983      	ldrb	r3, [r0, #6]
   de7ca:	3b02      	subs	r3, #2
   de7cc:	b2db      	uxtb	r3, r3
   de7ce:	2b04      	cmp	r3, #4
   de7d0:	bf9c      	itt	ls
   de7d2:	4ac4      	ldrls	r2, [pc, #784]	; (deae4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   de7d4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   de7d8:	b087      	sub	sp, #28
   de7da:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   de7dc:	bf88      	it	hi
   de7de:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   de7e0:	f7ff ff86 	bl	de6f0 <micros>
   de7e4:	692b      	ldr	r3, [r5, #16]
   de7e6:	1ac0      	subs	r0, r0, r3
   de7e8:	42a0      	cmp	r0, r4
   de7ea:	d3f9      	bcc.n	de7e0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   de7ec:	4abe      	ldr	r2, [pc, #760]	; (deae8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de7ee:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   de7f0:	ca07      	ldmia	r2, {r0, r1, r2}
   de7f2:	ac06      	add	r4, sp, #24
   de7f4:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de7f8:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de7fa:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de7fc:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de800:	3304      	adds	r3, #4
   de802:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de804:	b922      	cbnz	r2, de810 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de806:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de80a:	2b00      	cmp	r3, #0
   de80c:	f2c0 8155 	blt.w	deaba <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   de810:	9c04      	ldr	r4, [sp, #16]
   de812:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de816:	b923      	cbnz	r3, de822 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de818:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de81c:	2b00      	cmp	r3, #0
   de81e:	f2c0 813c 	blt.w	dea9a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   de822:	9c05      	ldr	r4, [sp, #20]
   de824:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de828:	b91b      	cbnz	r3, de832 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de82a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de82e:	2b00      	cmp	r3, #0
   de830:	db6e      	blt.n	de910 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de832:	4bae      	ldr	r3, [pc, #696]	; (deaec <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   de834:	79ea      	ldrb	r2, [r5, #7]
   de836:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de838:	4cad      	ldr	r4, [pc, #692]	; (deaf0 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de83a:	49ae      	ldr	r1, [pc, #696]	; (deaf4 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de83c:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de83e:	0112      	lsls	r2, r2, #4
   de840:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de842:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de846:	785b      	ldrb	r3, [r3, #1]
   de848:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de84a:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de84c:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de84e:	f003 031f 	and.w	r3, r3, #31
   de852:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   de856:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de858:	433a      	orrs	r2, r7
   de85a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   de85c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de85e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   de860:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   de864:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de868:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   de86a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de86c:	2800      	cmp	r0, #0
   de86e:	d044      	beq.n	de8fa <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   de870:	46cc      	mov	ip, r9
   de872:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   de874:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   de878:	f81c eb01 	ldrb.w	lr, [ip], #1
   de87c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de87e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   de880:	6863      	ldr	r3, [r4, #4]
   de882:	1a9b      	subs	r3, r3, r2
   de884:	2b46      	cmp	r3, #70	; 0x46
   de886:	d9fb      	bls.n	de880 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   de888:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   de88c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   de890:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   de894:	ea43 0307 	orr.w	r3, r3, r7
   de898:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   de89c:	d02f      	beq.n	de8fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   de89e:	6863      	ldr	r3, [r4, #4]
   de8a0:	1a9b      	subs	r3, r3, r2
   de8a2:	2b28      	cmp	r3, #40	; 0x28
   de8a4:	d9fb      	bls.n	de89e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de8a6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de8aa:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de8ac:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de8b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de8b4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de8b8:	d1e2      	bne.n	de880 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de8ba:	ebc9 030c 	rsb	r3, r9, ip
   de8be:	88a8      	ldrh	r0, [r5, #4]
   de8c0:	b29b      	uxth	r3, r3
   de8c2:	4298      	cmp	r0, r3
   de8c4:	d8d8      	bhi.n	de878 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   de8c6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   de8ca:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   de8ce:	6863      	ldr	r3, [r4, #4]
   de8d0:	1a9b      	subs	r3, r3, r2
   de8d2:	2b46      	cmp	r3, #70	; 0x46
   de8d4:	d9fb      	bls.n	de8ce <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   de8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   de8da:	ebca 0a03 	rsb	sl, sl, r3
   de8de:	4582      	cmp	sl, r0
   de8e0:	f0c0 80d5 	bcc.w	dea8e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   de8e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   de8e8:	f7ff ff04 	bl	de6f4 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de8ec:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   de8ee:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   de8f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de8f6:	2800      	cmp	r0, #0
   de8f8:	d1ba      	bne.n	de870 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   de8fa:	4602      	mov	r2, r0
   de8fc:	e7e7      	b.n	de8ce <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   de8fe:	6863      	ldr	r3, [r4, #4]
   de900:	1a9b      	subs	r3, r3, r2
   de902:	2b11      	cmp	r3, #17
   de904:	d8cf      	bhi.n	de8a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   de906:	6863      	ldr	r3, [r4, #4]
   de908:	1a9b      	subs	r3, r3, r2
   de90a:	2b11      	cmp	r3, #17
   de90c:	d9f7      	bls.n	de8fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
   de90e:	e7ca      	b.n	de8a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de910:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de914:	2b00      	cmp	r3, #0
   de916:	da8c      	bge.n	de832 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de918:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de91c:	2b00      	cmp	r3, #0
   de91e:	da88      	bge.n	de832 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de920:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de924:	2b00      	cmp	r3, #0
   de926:	da84      	bge.n	de832 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   de928:	9801      	ldr	r0, [sp, #4]
   de92a:	f000 fc75 	bl	df218 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   de92e:	2800      	cmp	r0, #0
   de930:	f43f af7f 	beq.w	de832 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de934:	88ab      	ldrh	r3, [r5, #4]
   de936:	2b00      	cmp	r3, #0
   de938:	f000 80d0 	beq.w	deadc <_ZN17Adafruit_NeoPixel4showEv+0x320>
   de93c:	2700      	movs	r7, #0
   de93e:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   de940:	4e6d      	ldr	r6, [pc, #436]	; (deaf8 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   de942:	496e      	ldr	r1, [pc, #440]	; (deafc <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   de944:	e000      	b.n	de948 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   de946:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   de948:	68ea      	ldr	r2, [r5, #12]
   de94a:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   de94c:	f103 0e01 	add.w	lr, r3, #1
   de950:	f012 0f80 	tst.w	r2, #128	; 0x80
   de954:	bf14      	ite	ne
   de956:	46b0      	movne	r8, r6
   de958:	4688      	moveq	r8, r1
   de95a:	fa1f fe8e 	uxth.w	lr, lr
   de95e:	f012 0f40 	tst.w	r2, #64	; 0x40
   de962:	bf14      	ite	ne
   de964:	46b1      	movne	r9, r6
   de966:	4689      	moveq	r9, r1
   de968:	f012 0f20 	tst.w	r2, #32
   de96c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   de970:	bf18      	it	ne
   de972:	46b2      	movne	sl, r6
   de974:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   de978:	bf08      	it	eq
   de97a:	468a      	moveq	sl, r1
   de97c:	f103 0802 	add.w	r8, r3, #2
   de980:	f012 0f10 	tst.w	r2, #16
   de984:	f103 0e03 	add.w	lr, r3, #3
   de988:	bf14      	ite	ne
   de98a:	46b4      	movne	ip, r6
   de98c:	468c      	moveq	ip, r1
   de98e:	fa1f f888 	uxth.w	r8, r8
   de992:	f012 0f08 	tst.w	r2, #8
   de996:	fa1f fe8e 	uxth.w	lr, lr
   de99a:	f103 0904 	add.w	r9, r3, #4
   de99e:	fa1f f989 	uxth.w	r9, r9
   de9a2:	bf14      	ite	ne
   de9a4:	46b3      	movne	fp, r6
   de9a6:	468b      	moveq	fp, r1
   de9a8:	f012 0f04 	tst.w	r2, #4
   de9ac:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   de9b0:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   de9b4:	bf14      	ite	ne
   de9b6:	46b2      	movne	sl, r6
   de9b8:	468a      	moveq	sl, r1
   de9ba:	f103 0805 	add.w	r8, r3, #5
   de9be:	f012 0f02 	tst.w	r2, #2
   de9c2:	f103 0c06 	add.w	ip, r3, #6
   de9c6:	f103 0e07 	add.w	lr, r3, #7
   de9ca:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   de9ce:	fa1f fe8e 	uxth.w	lr, lr
   de9d2:	bf14      	ite	ne
   de9d4:	46b1      	movne	r9, r6
   de9d6:	4689      	moveq	r9, r1
   de9d8:	fa1f f888 	uxth.w	r8, r8
   de9dc:	f012 0f01 	tst.w	r2, #1
   de9e0:	fa1f fc8c 	uxth.w	ip, ip
   de9e4:	bf14      	ite	ne
   de9e6:	4632      	movne	r2, r6
   de9e8:	460a      	moveq	r2, r1
   de9ea:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   de9ee:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   de9f2:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de9f6:	3701      	adds	r7, #1
   de9f8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   de9fc:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   de9fe:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   dea02:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   dea04:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   dea06:	d89e      	bhi.n	de946 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   dea08:	f103 0209 	add.w	r2, r3, #9
   dea0c:	330a      	adds	r3, #10
   dea0e:	b292      	uxth	r2, r2
   dea10:	b29b      	uxth	r3, r3
   dea12:	0052      	lsls	r2, r2, #1
   dea14:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   dea16:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   dea18:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   dea1c:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   dea1e:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   dea20:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   dea22:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   dea24:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   dea26:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   dea2a:	4e30      	ldr	r6, [pc, #192]	; (deaec <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   dea2c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   dea30:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   dea34:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   dea38:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   dea3c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   dea40:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   dea44:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   dea48:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   dea4c:	79eb      	ldrb	r3, [r5, #7]
   dea4e:	6831      	ldr	r1, [r6, #0]
   dea50:	011b      	lsls	r3, r3, #4
   dea52:	18ce      	adds	r6, r1, r3
   dea54:	5cc9      	ldrb	r1, [r1, r3]
   dea56:	7873      	ldrb	r3, [r6, #1]
   dea58:	f003 031f 	and.w	r3, r3, #31
   dea5c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   dea60:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   dea62:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   dea66:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   dea6a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   dea6e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   dea70:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   dea74:	2b00      	cmp	r3, #0
   dea76:	d0fb      	beq.n	dea70 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   dea78:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   dea7a:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   dea7e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   dea82:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   dea86:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   dea8a:	f000 fbcd 	bl	df228 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   dea8e:	f7ff fe2f 	bl	de6f0 <micros>
   dea92:	6128      	str	r0, [r5, #16]
}
   dea94:	b007      	add	sp, #28
   dea96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dea9a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dea9e:	2b00      	cmp	r3, #0
   deaa0:	f6bf aebf 	bge.w	de822 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deaa4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deaa8:	2b00      	cmp	r3, #0
   deaaa:	f6bf aeba 	bge.w	de822 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   deaae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deab2:	2b00      	cmp	r3, #0
   deab4:	f6bf aeb5 	bge.w	de822 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   deab8:	e736      	b.n	de928 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deaba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deabe:	2b00      	cmp	r3, #0
   deac0:	f6bf aea6 	bge.w	de810 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deac4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   deac8:	2b00      	cmp	r3, #0
   deaca:	f6bf aea1 	bge.w	de810 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   deace:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   dead2:	2b00      	cmp	r3, #0
   dead4:	f6bf ae9c 	bge.w	de810 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   dead8:	e726      	b.n	de928 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   deada:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   deadc:	2304      	movs	r3, #4
   deade:	2202      	movs	r2, #2
   deae0:	e799      	b.n	dea16 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   deae2:	bf00      	nop
   deae4:	000e4658 	.word	0x000e4658
   deae8:	000e464c 	.word	0x000e464c
   deaec:	2003e36c 	.word	0x2003e36c
   deaf0:	e000edf0 	.word	0xe000edf0
   deaf4:	e0001000 	.word	0xe0001000
   deaf8:	ffff800d 	.word	0xffff800d
   deafc:	ffff8006 	.word	0xffff8006

000deb00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   deb00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   deb02:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   deb04:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   deb08:	428c      	cmp	r4, r1
   deb0a:	d927      	bls.n	deb5c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   deb0c:	7a04      	ldrb	r4, [r0, #8]
   deb0e:	b144      	cbz	r4, deb22 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   deb10:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   deb14:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   deb18:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   deb1c:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   deb1e:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   deb20:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   deb22:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   deb24:	68c6      	ldr	r6, [r0, #12]
   deb26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   deb2a:	2f08      	cmp	r7, #8
   deb2c:	eb06 0401 	add.w	r4, r6, r1
   deb30:	d811      	bhi.n	deb56 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   deb32:	2001      	movs	r0, #1
   deb34:	40b8      	lsls	r0, r7
   deb36:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   deb3a:	d108      	bne.n	deb4e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   deb3c:	06c0      	lsls	r0, r0, #27
   deb3e:	d50a      	bpl.n	deb56 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   deb40:	2aff      	cmp	r2, #255	; 0xff
   deb42:	bf08      	it	eq
   deb44:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   deb46:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   deb48:	7065      	strb	r5, [r4, #1]
          *p = g;
   deb4a:	70a3      	strb	r3, [r4, #2]
   deb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   deb4e:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   deb50:	7062      	strb	r2, [r4, #1]
          *p = b;
   deb52:	70a5      	strb	r5, [r4, #2]
   deb54:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   deb56:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   deb58:	7063      	strb	r3, [r4, #1]
          *p = b;
   deb5a:	70a5      	strb	r5, [r4, #2]
   deb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000deb5e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   deb5e:	8882      	ldrh	r2, [r0, #4]
   deb60:	68c0      	ldr	r0, [r0, #12]
   deb62:	2100      	movs	r1, #0
   deb64:	f003 bb78 	b.w	e2258 <memset>

000deb68 <_GLOBAL__sub_I_PIN_MAP2>:
}
   deb68:	b508      	push	{r3, lr}
   deb6a:	f000 f817 	bl	deb9c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   deb6e:	f000 f815 	bl	deb9c <HAL_Pin_Map>
   deb72:	4b01      	ldr	r3, [pc, #4]	; (deb78 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   deb74:	6018      	str	r0, [r3, #0]
   deb76:	bd08      	pop	{r3, pc}
   deb78:	2003e36c 	.word	0x2003e36c

000deb7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   deb7c:	b508      	push	{r3, lr}
   deb7e:	4b02      	ldr	r3, [pc, #8]	; (deb88 <netdb_freeaddrinfo+0xc>)
   deb80:	681b      	ldr	r3, [r3, #0]
   deb82:	689b      	ldr	r3, [r3, #8]
   deb84:	9301      	str	r3, [sp, #4]
   deb86:	bd08      	pop	{r3, pc}
   deb88:	00030268 	.word	0x00030268

000deb8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   deb8c:	b508      	push	{r3, lr}
   deb8e:	4b02      	ldr	r3, [pc, #8]	; (deb98 <netdb_getaddrinfo+0xc>)
   deb90:	681b      	ldr	r3, [r3, #0]
   deb92:	68db      	ldr	r3, [r3, #12]
   deb94:	9301      	str	r3, [sp, #4]
   deb96:	bd08      	pop	{r3, pc}
   deb98:	00030268 	.word	0x00030268

000deb9c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   deb9c:	b508      	push	{r3, lr}
   deb9e:	4b02      	ldr	r3, [pc, #8]	; (deba8 <HAL_Pin_Map+0xc>)
   deba0:	681b      	ldr	r3, [r3, #0]
   deba2:	681b      	ldr	r3, [r3, #0]
   deba4:	9301      	str	r3, [sp, #4]
   deba6:	bd08      	pop	{r3, pc}
   deba8:	0003022c 	.word	0x0003022c

000debac <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   debac:	b508      	push	{r3, lr}
   debae:	4b02      	ldr	r3, [pc, #8]	; (debb8 <HAL_Validate_Pin_Function+0xc>)
   debb0:	681b      	ldr	r3, [r3, #0]
   debb2:	685b      	ldr	r3, [r3, #4]
   debb4:	9301      	str	r3, [sp, #4]
   debb6:	bd08      	pop	{r3, pc}
   debb8:	0003022c 	.word	0x0003022c

000debbc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   debbc:	b508      	push	{r3, lr}
   debbe:	4b02      	ldr	r3, [pc, #8]	; (debc8 <HAL_Pin_Mode+0xc>)
   debc0:	681b      	ldr	r3, [r3, #0]
   debc2:	689b      	ldr	r3, [r3, #8]
   debc4:	9301      	str	r3, [sp, #4]
   debc6:	bd08      	pop	{r3, pc}
   debc8:	0003022c 	.word	0x0003022c

000debcc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   debcc:	b508      	push	{r3, lr}
   debce:	4b02      	ldr	r3, [pc, #8]	; (debd8 <HAL_Get_Pin_Mode+0xc>)
   debd0:	681b      	ldr	r3, [r3, #0]
   debd2:	68db      	ldr	r3, [r3, #12]
   debd4:	9301      	str	r3, [sp, #4]
   debd6:	bd08      	pop	{r3, pc}
   debd8:	0003022c 	.word	0x0003022c

000debdc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   debdc:	b508      	push	{r3, lr}
   debde:	4b02      	ldr	r3, [pc, #8]	; (debe8 <HAL_GPIO_Write+0xc>)
   debe0:	681b      	ldr	r3, [r3, #0]
   debe2:	691b      	ldr	r3, [r3, #16]
   debe4:	9301      	str	r3, [sp, #4]
   debe6:	bd08      	pop	{r3, pc}
   debe8:	0003022c 	.word	0x0003022c

000debec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   debec:	b508      	push	{r3, lr}
   debee:	4b02      	ldr	r3, [pc, #8]	; (debf8 <HAL_GPIO_Read+0xc>)
   debf0:	681b      	ldr	r3, [r3, #0]
   debf2:	695b      	ldr	r3, [r3, #20]
   debf4:	9301      	str	r3, [sp, #4]
   debf6:	bd08      	pop	{r3, pc}
   debf8:	0003022c 	.word	0x0003022c

000debfc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   debfc:	b508      	push	{r3, lr}
   debfe:	4b02      	ldr	r3, [pc, #8]	; (dec08 <HAL_ADC_Read+0xc>)
   dec00:	681b      	ldr	r3, [r3, #0]
   dec02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dec04:	9301      	str	r3, [sp, #4]
   dec06:	bd08      	pop	{r3, pc}
   dec08:	0003022c 	.word	0x0003022c

000dec0c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   dec0c:	b508      	push	{r3, lr}
   dec0e:	4b02      	ldr	r3, [pc, #8]	; (dec18 <HAL_SPI_Init+0xc>)
   dec10:	681b      	ldr	r3, [r3, #0]
   dec12:	69db      	ldr	r3, [r3, #28]
   dec14:	9301      	str	r3, [sp, #4]
   dec16:	bd08      	pop	{r3, pc}
   dec18:	00030230 	.word	0x00030230

000dec1c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   dec1c:	b508      	push	{r3, lr}
   dec1e:	4b02      	ldr	r3, [pc, #8]	; (dec28 <HAL_SPI_Is_Enabled+0xc>)
   dec20:	681b      	ldr	r3, [r3, #0]
   dec22:	6a1b      	ldr	r3, [r3, #32]
   dec24:	9301      	str	r3, [sp, #4]
   dec26:	bd08      	pop	{r3, pc}
   dec28:	00030230 	.word	0x00030230

000dec2c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   dec2c:	b508      	push	{r3, lr}
   dec2e:	4b02      	ldr	r3, [pc, #8]	; (dec38 <if_name_to_index+0xc>)
   dec30:	681b      	ldr	r3, [r3, #0]
   dec32:	691b      	ldr	r3, [r3, #16]
   dec34:	9301      	str	r3, [sp, #4]
   dec36:	bd08      	pop	{r3, pc}
   dec38:	0003026c 	.word	0x0003026c

000dec3c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   dec3c:	b508      	push	{r3, lr}
   dec3e:	4b02      	ldr	r3, [pc, #8]	; (dec48 <if_index_to_name+0xc>)
   dec40:	681b      	ldr	r3, [r3, #0]
   dec42:	695b      	ldr	r3, [r3, #20]
   dec44:	9301      	str	r3, [sp, #4]
   dec46:	bd08      	pop	{r3, pc}
   dec48:	0003026c 	.word	0x0003026c

000dec4c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   dec4c:	b508      	push	{r3, lr}
   dec4e:	4b02      	ldr	r3, [pc, #8]	; (dec58 <if_get_by_index+0xc>)
   dec50:	681b      	ldr	r3, [r3, #0]
   dec52:	699b      	ldr	r3, [r3, #24]
   dec54:	9301      	str	r3, [sp, #4]
   dec56:	bd08      	pop	{r3, pc}
   dec58:	0003026c 	.word	0x0003026c

000dec5c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   dec5c:	b508      	push	{r3, lr}
   dec5e:	4b02      	ldr	r3, [pc, #8]	; (dec68 <if_get_addrs+0xc>)
   dec60:	681b      	ldr	r3, [r3, #0]
   dec62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dec64:	9301      	str	r3, [sp, #4]
   dec66:	bd08      	pop	{r3, pc}
   dec68:	0003026c 	.word	0x0003026c

000dec6c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   dec6c:	b508      	push	{r3, lr}
   dec6e:	4b02      	ldr	r3, [pc, #8]	; (dec78 <if_free_if_addrs+0xc>)
   dec70:	681b      	ldr	r3, [r3, #0]
   dec72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dec74:	9301      	str	r3, [sp, #4]
   dec76:	bd08      	pop	{r3, pc}
   dec78:	0003026c 	.word	0x0003026c

000dec7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   dec7c:	b508      	push	{r3, lr}
   dec7e:	4b02      	ldr	r3, [pc, #8]	; (dec88 <HAL_RNG_GetRandomNumber+0xc>)
   dec80:	681b      	ldr	r3, [r3, #0]
   dec82:	685b      	ldr	r3, [r3, #4]
   dec84:	9301      	str	r3, [sp, #4]
   dec86:	bd08      	pop	{r3, pc}
   dec88:	00030218 	.word	0x00030218

000dec8c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   dec8c:	b508      	push	{r3, lr}
   dec8e:	4b02      	ldr	r3, [pc, #8]	; (dec98 <HAL_Delay_Milliseconds+0xc>)
   dec90:	681b      	ldr	r3, [r3, #0]
   dec92:	689b      	ldr	r3, [r3, #8]
   dec94:	9301      	str	r3, [sp, #4]
   dec96:	bd08      	pop	{r3, pc}
   dec98:	00030218 	.word	0x00030218

000dec9c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   dec9c:	b508      	push	{r3, lr}
   dec9e:	4b02      	ldr	r3, [pc, #8]	; (deca8 <HAL_Delay_Microseconds+0xc>)
   deca0:	681b      	ldr	r3, [r3, #0]
   deca2:	68db      	ldr	r3, [r3, #12]
   deca4:	9301      	str	r3, [sp, #4]
   deca6:	bd08      	pop	{r3, pc}
   deca8:	00030218 	.word	0x00030218

000decac <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   decac:	b508      	push	{r3, lr}
   decae:	4b02      	ldr	r3, [pc, #8]	; (decb8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   decb0:	681b      	ldr	r3, [r3, #0]
   decb2:	691b      	ldr	r3, [r3, #16]
   decb4:	9301      	str	r3, [sp, #4]
   decb6:	bd08      	pop	{r3, pc}
   decb8:	00030218 	.word	0x00030218

000decbc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   decbc:	b508      	push	{r3, lr}
   decbe:	4b02      	ldr	r3, [pc, #8]	; (decc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   decc0:	681b      	ldr	r3, [r3, #0]
   decc2:	695b      	ldr	r3, [r3, #20]
   decc4:	9301      	str	r3, [sp, #4]
   decc6:	bd08      	pop	{r3, pc}
   decc8:	00030218 	.word	0x00030218

000deccc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   deccc:	b508      	push	{r3, lr}
   decce:	4b02      	ldr	r3, [pc, #8]	; (decd8 <HAL_RTC_Get_UnixTime+0xc>)
   decd0:	681b      	ldr	r3, [r3, #0]
   decd2:	69db      	ldr	r3, [r3, #28]
   decd4:	9301      	str	r3, [sp, #4]
   decd6:	bd08      	pop	{r3, pc}
   decd8:	00030218 	.word	0x00030218

000decdc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   decdc:	b508      	push	{r3, lr}
   decde:	4b02      	ldr	r3, [pc, #8]	; (dece8 <HAL_EEPROM_Init+0xc>)
   dece0:	681b      	ldr	r3, [r3, #0]
   dece2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dece4:	9301      	str	r3, [sp, #4]
   dece6:	bd08      	pop	{r3, pc}
   dece8:	00030218 	.word	0x00030218

000decec <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   decec:	b508      	push	{r3, lr}
   decee:	4b02      	ldr	r3, [pc, #8]	; (decf8 <HAL_EEPROM_Read+0xc>)
   decf0:	681b      	ldr	r3, [r3, #0]
   decf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   decf4:	9301      	str	r3, [sp, #4]
   decf6:	bd08      	pop	{r3, pc}
   decf8:	00030218 	.word	0x00030218

000decfc <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   decfc:	b508      	push	{r3, lr}
   decfe:	4b02      	ldr	r3, [pc, #8]	; (ded08 <HAL_EEPROM_Write+0xc>)
   ded00:	681b      	ldr	r3, [r3, #0]
   ded02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   ded04:	9301      	str	r3, [sp, #4]
   ded06:	bd08      	pop	{r3, pc}
   ded08:	00030218 	.word	0x00030218

000ded0c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   ded0c:	b508      	push	{r3, lr}
   ded0e:	4b02      	ldr	r3, [pc, #8]	; (ded18 <HAL_RTC_Time_Is_Valid+0xc>)
   ded10:	681b      	ldr	r3, [r3, #0]
   ded12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   ded14:	9301      	str	r3, [sp, #4]
   ded16:	bd08      	pop	{r3, pc}
   ded18:	00030218 	.word	0x00030218

000ded1c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   ded1c:	b508      	push	{r3, lr}
   ded1e:	4b02      	ldr	r3, [pc, #8]	; (ded28 <os_thread_create+0xc>)
   ded20:	681b      	ldr	r3, [r3, #0]
   ded22:	685b      	ldr	r3, [r3, #4]
   ded24:	9301      	str	r3, [sp, #4]
   ded26:	bd08      	pop	{r3, pc}
   ded28:	00030248 	.word	0x00030248

000ded2c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   ded2c:	b508      	push	{r3, lr}
   ded2e:	4b02      	ldr	r3, [pc, #8]	; (ded38 <os_thread_is_current+0xc>)
   ded30:	681b      	ldr	r3, [r3, #0]
   ded32:	689b      	ldr	r3, [r3, #8]
   ded34:	9301      	str	r3, [sp, #4]
   ded36:	bd08      	pop	{r3, pc}
   ded38:	00030248 	.word	0x00030248

000ded3c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   ded3c:	b508      	push	{r3, lr}
   ded3e:	4b02      	ldr	r3, [pc, #8]	; (ded48 <os_thread_join+0xc>)
   ded40:	681b      	ldr	r3, [r3, #0]
   ded42:	691b      	ldr	r3, [r3, #16]
   ded44:	9301      	str	r3, [sp, #4]
   ded46:	bd08      	pop	{r3, pc}
   ded48:	00030248 	.word	0x00030248

000ded4c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   ded4c:	b508      	push	{r3, lr}
   ded4e:	4b02      	ldr	r3, [pc, #8]	; (ded58 <os_thread_cleanup+0xc>)
   ded50:	681b      	ldr	r3, [r3, #0]
   ded52:	695b      	ldr	r3, [r3, #20]
   ded54:	9301      	str	r3, [sp, #4]
   ded56:	bd08      	pop	{r3, pc}
   ded58:	00030248 	.word	0x00030248

000ded5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   ded5c:	b508      	push	{r3, lr}
   ded5e:	4b02      	ldr	r3, [pc, #8]	; (ded68 <os_mutex_recursive_create+0xc>)
   ded60:	681b      	ldr	r3, [r3, #0]
   ded62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   ded64:	9301      	str	r3, [sp, #4]
   ded66:	bd08      	pop	{r3, pc}
   ded68:	00030248 	.word	0x00030248

000ded6c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   ded6c:	b508      	push	{r3, lr}
   ded6e:	4b02      	ldr	r3, [pc, #8]	; (ded78 <os_mutex_recursive_destroy+0xc>)
   ded70:	681b      	ldr	r3, [r3, #0]
   ded72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   ded74:	9301      	str	r3, [sp, #4]
   ded76:	bd08      	pop	{r3, pc}
   ded78:	00030248 	.word	0x00030248

000ded7c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   ded7c:	b508      	push	{r3, lr}
   ded7e:	4b02      	ldr	r3, [pc, #8]	; (ded88 <os_mutex_recursive_lock+0xc>)
   ded80:	681b      	ldr	r3, [r3, #0]
   ded82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   ded84:	9301      	str	r3, [sp, #4]
   ded86:	bd08      	pop	{r3, pc}
   ded88:	00030248 	.word	0x00030248

000ded8c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   ded8c:	b508      	push	{r3, lr}
   ded8e:	4b02      	ldr	r3, [pc, #8]	; (ded98 <os_mutex_recursive_unlock+0xc>)
   ded90:	681b      	ldr	r3, [r3, #0]
   ded92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   ded94:	9301      	str	r3, [sp, #4]
   ded96:	bd08      	pop	{r3, pc}
   ded98:	00030248 	.word	0x00030248

000ded9c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   ded9c:	b508      	push	{r3, lr}
   ded9e:	4b02      	ldr	r3, [pc, #8]	; (deda8 <os_thread_exit+0xc>)
   deda0:	681b      	ldr	r3, [r3, #0]
   deda2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   deda4:	9301      	str	r3, [sp, #4]
   deda6:	bd08      	pop	{r3, pc}
   deda8:	00030248 	.word	0x00030248

000dedac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   dedac:	b508      	push	{r3, lr}
   dedae:	4b02      	ldr	r3, [pc, #8]	; (dedb8 <inet_inet_ntop+0xc>)
   dedb0:	681b      	ldr	r3, [r3, #0]
   dedb2:	695b      	ldr	r3, [r3, #20]
   dedb4:	9301      	str	r3, [sp, #4]
   dedb6:	bd08      	pop	{r3, pc}
   dedb8:	00030264 	.word	0x00030264

000dedbc <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   dedbc:	b508      	push	{r3, lr}
   dedbe:	4b02      	ldr	r3, [pc, #8]	; (dedc8 <inet_inet_pton+0xc>)
   dedc0:	681b      	ldr	r3, [r3, #0]
   dedc2:	699b      	ldr	r3, [r3, #24]
   dedc4:	9301      	str	r3, [sp, #4]
   dedc6:	bd08      	pop	{r3, pc}
   dedc8:	00030264 	.word	0x00030264

000dedcc <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   dedcc:	b508      	push	{r3, lr}
   dedce:	4b02      	ldr	r3, [pc, #8]	; (dedd8 <inet_htonl+0xc>)
   dedd0:	681b      	ldr	r3, [r3, #0]
   dedd2:	6a1b      	ldr	r3, [r3, #32]
   dedd4:	9301      	str	r3, [sp, #4]
   dedd6:	bd08      	pop	{r3, pc}
   dedd8:	00030264 	.word	0x00030264

000deddc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   deddc:	b508      	push	{r3, lr}
   dedde:	4b02      	ldr	r3, [pc, #8]	; (dede8 <inet_ntohs+0xc>)
   dede0:	681b      	ldr	r3, [r3, #0]
   dede2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dede4:	9301      	str	r3, [sp, #4]
   dede6:	bd08      	pop	{r3, pc}
   dede8:	00030264 	.word	0x00030264

000dedec <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   dedec:	b508      	push	{r3, lr}
   dedee:	4b02      	ldr	r3, [pc, #8]	; (dedf8 <inet_htons+0xc>)
   dedf0:	681b      	ldr	r3, [r3, #0]
   dedf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dedf4:	9301      	str	r3, [sp, #4]
   dedf6:	bd08      	pop	{r3, pc}
   dedf8:	00030264 	.word	0x00030264

000dedfc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   dedfc:	b508      	push	{r3, lr}
   dedfe:	4b02      	ldr	r3, [pc, #8]	; (dee08 <HAL_USART_Init+0xc>)
   dee00:	681b      	ldr	r3, [r3, #0]
   dee02:	681b      	ldr	r3, [r3, #0]
   dee04:	9301      	str	r3, [sp, #4]
   dee06:	bd08      	pop	{r3, pc}
   dee08:	0003023c 	.word	0x0003023c

000dee0c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   dee0c:	b508      	push	{r3, lr}
   dee0e:	4b02      	ldr	r3, [pc, #8]	; (dee18 <HAL_USART_Write_Data+0xc>)
   dee10:	681b      	ldr	r3, [r3, #0]
   dee12:	68db      	ldr	r3, [r3, #12]
   dee14:	9301      	str	r3, [sp, #4]
   dee16:	bd08      	pop	{r3, pc}
   dee18:	0003023c 	.word	0x0003023c

000dee1c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   dee1c:	b508      	push	{r3, lr}
   dee1e:	4b02      	ldr	r3, [pc, #8]	; (dee28 <HAL_USART_Available_Data+0xc>)
   dee20:	681b      	ldr	r3, [r3, #0]
   dee22:	691b      	ldr	r3, [r3, #16]
   dee24:	9301      	str	r3, [sp, #4]
   dee26:	bd08      	pop	{r3, pc}
   dee28:	0003023c 	.word	0x0003023c

000dee2c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   dee2c:	b508      	push	{r3, lr}
   dee2e:	4b02      	ldr	r3, [pc, #8]	; (dee38 <HAL_USART_Read_Data+0xc>)
   dee30:	681b      	ldr	r3, [r3, #0]
   dee32:	695b      	ldr	r3, [r3, #20]
   dee34:	9301      	str	r3, [sp, #4]
   dee36:	bd08      	pop	{r3, pc}
   dee38:	0003023c 	.word	0x0003023c

000dee3c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   dee3c:	b508      	push	{r3, lr}
   dee3e:	4b02      	ldr	r3, [pc, #8]	; (dee48 <HAL_USART_Peek_Data+0xc>)
   dee40:	681b      	ldr	r3, [r3, #0]
   dee42:	699b      	ldr	r3, [r3, #24]
   dee44:	9301      	str	r3, [sp, #4]
   dee46:	bd08      	pop	{r3, pc}
   dee48:	0003023c 	.word	0x0003023c

000dee4c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   dee4c:	b508      	push	{r3, lr}
   dee4e:	4b02      	ldr	r3, [pc, #8]	; (dee58 <HAL_USART_Flush_Data+0xc>)
   dee50:	681b      	ldr	r3, [r3, #0]
   dee52:	69db      	ldr	r3, [r3, #28]
   dee54:	9301      	str	r3, [sp, #4]
   dee56:	bd08      	pop	{r3, pc}
   dee58:	0003023c 	.word	0x0003023c

000dee5c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   dee5c:	b508      	push	{r3, lr}
   dee5e:	4b02      	ldr	r3, [pc, #8]	; (dee68 <HAL_USART_Is_Enabled+0xc>)
   dee60:	681b      	ldr	r3, [r3, #0]
   dee62:	6a1b      	ldr	r3, [r3, #32]
   dee64:	9301      	str	r3, [sp, #4]
   dee66:	bd08      	pop	{r3, pc}
   dee68:	0003023c 	.word	0x0003023c

000dee6c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   dee6c:	b508      	push	{r3, lr}
   dee6e:	4b02      	ldr	r3, [pc, #8]	; (dee78 <HAL_USART_Available_Data_For_Write+0xc>)
   dee70:	681b      	ldr	r3, [r3, #0]
   dee72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dee74:	9301      	str	r3, [sp, #4]
   dee76:	bd08      	pop	{r3, pc}
   dee78:	0003023c 	.word	0x0003023c

000dee7c <mesh_select_antenna>:
#include "mesh_hal.h"
#endif

DYNALIB_BEGIN(hal_mesh)

DYNALIB_FN(0, hal_mesh, mesh_select_antenna, int(int, void*))
   dee7c:	b508      	push	{r3, lr}
   dee7e:	4b02      	ldr	r3, [pc, #8]	; (dee88 <mesh_select_antenna+0xc>)
   dee80:	681b      	ldr	r3, [r3, #0]
   dee82:	681b      	ldr	r3, [r3, #0]
   dee84:	9301      	str	r3, [sp, #4]
   dee86:	bd08      	pop	{r3, pc}
   dee88:	00030280 	.word	0x00030280

000dee8c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   dee8c:	b508      	push	{r3, lr}
   dee8e:	4b02      	ldr	r3, [pc, #8]	; (dee98 <HAL_I2C_Write_Data+0xc>)
   dee90:	681b      	ldr	r3, [r3, #0]
   dee92:	6a1b      	ldr	r3, [r3, #32]
   dee94:	9301      	str	r3, [sp, #4]
   dee96:	bd08      	pop	{r3, pc}
   dee98:	00030228 	.word	0x00030228

000dee9c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   dee9c:	b508      	push	{r3, lr}
   dee9e:	4b02      	ldr	r3, [pc, #8]	; (deea8 <HAL_I2C_Available_Data+0xc>)
   deea0:	681b      	ldr	r3, [r3, #0]
   deea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   deea4:	9301      	str	r3, [sp, #4]
   deea6:	bd08      	pop	{r3, pc}
   deea8:	00030228 	.word	0x00030228

000deeac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   deeac:	b508      	push	{r3, lr}
   deeae:	4b02      	ldr	r3, [pc, #8]	; (deeb8 <HAL_I2C_Read_Data+0xc>)
   deeb0:	681b      	ldr	r3, [r3, #0]
   deeb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   deeb4:	9301      	str	r3, [sp, #4]
   deeb6:	bd08      	pop	{r3, pc}
   deeb8:	00030228 	.word	0x00030228

000deebc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   deebc:	b508      	push	{r3, lr}
   deebe:	4b02      	ldr	r3, [pc, #8]	; (deec8 <HAL_I2C_Peek_Data+0xc>)
   deec0:	681b      	ldr	r3, [r3, #0]
   deec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   deec4:	9301      	str	r3, [sp, #4]
   deec6:	bd08      	pop	{r3, pc}
   deec8:	00030228 	.word	0x00030228

000deecc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   deecc:	b508      	push	{r3, lr}
   deece:	4b02      	ldr	r3, [pc, #8]	; (deed8 <HAL_I2C_Flush_Data+0xc>)
   deed0:	681b      	ldr	r3, [r3, #0]
   deed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   deed4:	9301      	str	r3, [sp, #4]
   deed6:	bd08      	pop	{r3, pc}
   deed8:	00030228 	.word	0x00030228

000deedc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   deedc:	b508      	push	{r3, lr}
   deede:	4b02      	ldr	r3, [pc, #8]	; (deee8 <HAL_I2C_Is_Enabled+0xc>)
   deee0:	681b      	ldr	r3, [r3, #0]
   deee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   deee4:	9301      	str	r3, [sp, #4]
   deee6:	bd08      	pop	{r3, pc}
   deee8:	00030228 	.word	0x00030228

000deeec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   deeec:	b508      	push	{r3, lr}
   deeee:	4b02      	ldr	r3, [pc, #8]	; (deef8 <HAL_I2C_Init+0xc>)
   deef0:	681b      	ldr	r3, [r3, #0]
   deef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   deef4:	9301      	str	r3, [sp, #4]
   deef6:	bd08      	pop	{r3, pc}
   deef8:	00030228 	.word	0x00030228

000deefc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   deefc:	b508      	push	{r3, lr}
   deefe:	4b02      	ldr	r3, [pc, #8]	; (def08 <sock_bind+0xc>)
   def00:	681b      	ldr	r3, [r3, #0]
   def02:	685b      	ldr	r3, [r3, #4]
   def04:	9301      	str	r3, [sp, #4]
   def06:	bd08      	pop	{r3, pc}
   def08:	00030238 	.word	0x00030238

000def0c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   def0c:	b508      	push	{r3, lr}
   def0e:	4b02      	ldr	r3, [pc, #8]	; (def18 <sock_setsockopt+0xc>)
   def10:	681b      	ldr	r3, [r3, #0]
   def12:	699b      	ldr	r3, [r3, #24]
   def14:	9301      	str	r3, [sp, #4]
   def16:	bd08      	pop	{r3, pc}
   def18:	00030238 	.word	0x00030238

000def1c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   def1c:	b508      	push	{r3, lr}
   def1e:	4b02      	ldr	r3, [pc, #8]	; (def28 <sock_close+0xc>)
   def20:	681b      	ldr	r3, [r3, #0]
   def22:	69db      	ldr	r3, [r3, #28]
   def24:	9301      	str	r3, [sp, #4]
   def26:	bd08      	pop	{r3, pc}
   def28:	00030238 	.word	0x00030238

000def2c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   def2c:	b508      	push	{r3, lr}
   def2e:	4b02      	ldr	r3, [pc, #8]	; (def38 <sock_recvfrom+0xc>)
   def30:	681b      	ldr	r3, [r3, #0]
   def32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   def34:	9301      	str	r3, [sp, #4]
   def36:	bd08      	pop	{r3, pc}
   def38:	00030238 	.word	0x00030238

000def3c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   def3c:	b508      	push	{r3, lr}
   def3e:	4b02      	ldr	r3, [pc, #8]	; (def48 <sock_sendto+0xc>)
   def40:	681b      	ldr	r3, [r3, #0]
   def42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   def44:	9301      	str	r3, [sp, #4]
   def46:	bd08      	pop	{r3, pc}
   def48:	00030238 	.word	0x00030238

000def4c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   def4c:	b508      	push	{r3, lr}
   def4e:	4b02      	ldr	r3, [pc, #8]	; (def58 <sock_socket+0xc>)
   def50:	681b      	ldr	r3, [r3, #0]
   def52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   def54:	9301      	str	r3, [sp, #4]
   def56:	bd08      	pop	{r3, pc}
   def58:	00030238 	.word	0x00030238

000def5c <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   def5c:	b508      	push	{r3, lr}
   def5e:	4b02      	ldr	r3, [pc, #8]	; (def68 <HAL_Tone_Start+0xc>)
   def60:	681b      	ldr	r3, [r3, #0]
   def62:	681b      	ldr	r3, [r3, #0]
   def64:	9301      	str	r3, [sp, #4]
   def66:	bd08      	pop	{r3, pc}
   def68:	00030224 	.word	0x00030224

000def6c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   def6c:	b508      	push	{r3, lr}
   def6e:	4b02      	ldr	r3, [pc, #8]	; (def78 <HAL_USB_USART_Init+0xc>)
   def70:	681b      	ldr	r3, [r3, #0]
   def72:	681b      	ldr	r3, [r3, #0]
   def74:	9301      	str	r3, [sp, #4]
   def76:	bd08      	pop	{r3, pc}
   def78:	0003024c 	.word	0x0003024c

000def7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   def7c:	b508      	push	{r3, lr}
   def7e:	4b02      	ldr	r3, [pc, #8]	; (def88 <HAL_USB_USART_Available_Data+0xc>)
   def80:	681b      	ldr	r3, [r3, #0]
   def82:	691b      	ldr	r3, [r3, #16]
   def84:	9301      	str	r3, [sp, #4]
   def86:	bd08      	pop	{r3, pc}
   def88:	0003024c 	.word	0x0003024c

000def8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   def8c:	b508      	push	{r3, lr}
   def8e:	4b02      	ldr	r3, [pc, #8]	; (def98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   def90:	681b      	ldr	r3, [r3, #0]
   def92:	695b      	ldr	r3, [r3, #20]
   def94:	9301      	str	r3, [sp, #4]
   def96:	bd08      	pop	{r3, pc}
   def98:	0003024c 	.word	0x0003024c

000def9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   def9c:	b508      	push	{r3, lr}
   def9e:	4b02      	ldr	r3, [pc, #8]	; (defa8 <HAL_USB_USART_Receive_Data+0xc>)
   defa0:	681b      	ldr	r3, [r3, #0]
   defa2:	699b      	ldr	r3, [r3, #24]
   defa4:	9301      	str	r3, [sp, #4]
   defa6:	bd08      	pop	{r3, pc}
   defa8:	0003024c 	.word	0x0003024c

000defac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   defac:	b508      	push	{r3, lr}
   defae:	4b02      	ldr	r3, [pc, #8]	; (defb8 <HAL_USB_USART_Send_Data+0xc>)
   defb0:	681b      	ldr	r3, [r3, #0]
   defb2:	69db      	ldr	r3, [r3, #28]
   defb4:	9301      	str	r3, [sp, #4]
   defb6:	bd08      	pop	{r3, pc}
   defb8:	0003024c 	.word	0x0003024c

000defbc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   defbc:	b508      	push	{r3, lr}
   defbe:	4b02      	ldr	r3, [pc, #8]	; (defc8 <HAL_USB_USART_Flush_Data+0xc>)
   defc0:	681b      	ldr	r3, [r3, #0]
   defc2:	6a1b      	ldr	r3, [r3, #32]
   defc4:	9301      	str	r3, [sp, #4]
   defc6:	bd08      	pop	{r3, pc}
   defc8:	0003024c 	.word	0x0003024c

000defcc <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   defcc:	b508      	push	{r3, lr}
   defce:	4b02      	ldr	r3, [pc, #8]	; (defd8 <wlan_connected_info+0xc>)
   defd0:	681b      	ldr	r3, [r3, #0]
   defd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   defd4:	9301      	str	r3, [sp, #4]
   defd6:	bd08      	pop	{r3, pc}
   defd8:	00030274 	.word	0x00030274

000defdc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   defdc:	b508      	push	{r3, lr}
   defde:	4b02      	ldr	r3, [pc, #8]	; (defe8 <LED_SetSignalingColor+0xc>)
   defe0:	681b      	ldr	r3, [r3, #0]
   defe2:	685b      	ldr	r3, [r3, #4]
   defe4:	9301      	str	r3, [sp, #4]
   defe6:	bd08      	pop	{r3, pc}
   defe8:	00030260 	.word	0x00030260

000defec <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   defec:	b508      	push	{r3, lr}
   defee:	4b02      	ldr	r3, [pc, #8]	; (deff8 <LED_Signaling_Start+0xc>)
   deff0:	681b      	ldr	r3, [r3, #0]
   deff2:	689b      	ldr	r3, [r3, #8]
   deff4:	9301      	str	r3, [sp, #4]
   deff6:	bd08      	pop	{r3, pc}
   deff8:	00030260 	.word	0x00030260

000deffc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   deffc:	b508      	push	{r3, lr}
   deffe:	4b02      	ldr	r3, [pc, #8]	; (df008 <LED_Signaling_Stop+0xc>)
   df000:	681b      	ldr	r3, [r3, #0]
   df002:	68db      	ldr	r3, [r3, #12]
   df004:	9301      	str	r3, [sp, #4]
   df006:	bd08      	pop	{r3, pc}
   df008:	00030260 	.word	0x00030260

000df00c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   df00c:	b508      	push	{r3, lr}
   df00e:	4b02      	ldr	r3, [pc, #8]	; (df018 <LED_RGB_IsOverRidden+0xc>)
   df010:	681b      	ldr	r3, [r3, #0]
   df012:	699b      	ldr	r3, [r3, #24]
   df014:	9301      	str	r3, [sp, #4]
   df016:	bd08      	pop	{r3, pc}
   df018:	00030260 	.word	0x00030260

000df01c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   df01c:	b508      	push	{r3, lr}
   df01e:	4b02      	ldr	r3, [pc, #8]	; (df028 <LED_On+0xc>)
   df020:	681b      	ldr	r3, [r3, #0]
   df022:	69db      	ldr	r3, [r3, #28]
   df024:	9301      	str	r3, [sp, #4]
   df026:	bd08      	pop	{r3, pc}
   df028:	00030260 	.word	0x00030260

000df02c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   df02c:	b508      	push	{r3, lr}
   df02e:	4b02      	ldr	r3, [pc, #8]	; (df038 <log_message+0xc>)
   df030:	681b      	ldr	r3, [r3, #0]
   df032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   df034:	9301      	str	r3, [sp, #4]
   df036:	bd08      	pop	{r3, pc}
   df038:	00030260 	.word	0x00030260

000df03c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   df03c:	b508      	push	{r3, lr}
   df03e:	4b02      	ldr	r3, [pc, #8]	; (df048 <system_mode+0xc>)
   df040:	681b      	ldr	r3, [r3, #0]
   df042:	681b      	ldr	r3, [r3, #0]
   df044:	9301      	str	r3, [sp, #4]
   df046:	bd08      	pop	{r3, pc}
   df048:	00030220 	.word	0x00030220

000df04c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   df04c:	b508      	push	{r3, lr}
   df04e:	4b02      	ldr	r3, [pc, #8]	; (df058 <set_system_mode+0xc>)
   df050:	681b      	ldr	r3, [r3, #0]
   df052:	685b      	ldr	r3, [r3, #4]
   df054:	9301      	str	r3, [sp, #4]
   df056:	bd08      	pop	{r3, pc}
   df058:	00030220 	.word	0x00030220

000df05c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   df05c:	b508      	push	{r3, lr}
   df05e:	4b02      	ldr	r3, [pc, #8]	; (df068 <system_delay_ms+0xc>)
   df060:	681b      	ldr	r3, [r3, #0]
   df062:	695b      	ldr	r3, [r3, #20]
   df064:	9301      	str	r3, [sp, #4]
   df066:	bd08      	pop	{r3, pc}
   df068:	00030220 	.word	0x00030220

000df06c <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   df06c:	b508      	push	{r3, lr}
   df06e:	4b02      	ldr	r3, [pc, #8]	; (df078 <system_version_info+0xc>)
   df070:	681b      	ldr	r3, [r3, #0]
   df072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df074:	9301      	str	r3, [sp, #4]
   df076:	bd08      	pop	{r3, pc}
   df078:	00030220 	.word	0x00030220

000df07c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   df07c:	b508      	push	{r3, lr}
   df07e:	4b02      	ldr	r3, [pc, #8]	; (df088 <application_thread_current+0xc>)
   df080:	681b      	ldr	r3, [r3, #0]
   df082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   df084:	9301      	str	r3, [sp, #4]
   df086:	bd08      	pop	{r3, pc}
   df088:	00030220 	.word	0x00030220

000df08c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   df08c:	b508      	push	{r3, lr}
   df08e:	4b02      	ldr	r3, [pc, #8]	; (df098 <application_thread_invoke+0xc>)
   df090:	681b      	ldr	r3, [r3, #0]
   df092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   df094:	9301      	str	r3, [sp, #4]
   df096:	bd08      	pop	{r3, pc}
   df098:	00030220 	.word	0x00030220

000df09c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   df09c:	b508      	push	{r3, lr}
   df09e:	4b02      	ldr	r3, [pc, #8]	; (df0a8 <system_thread_get_state+0xc>)
   df0a0:	681b      	ldr	r3, [r3, #0]
   df0a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   df0a4:	9301      	str	r3, [sp, #4]
   df0a6:	bd08      	pop	{r3, pc}
   df0a8:	00030220 	.word	0x00030220

000df0ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   df0ac:	b508      	push	{r3, lr}
   df0ae:	4b03      	ldr	r3, [pc, #12]	; (df0bc <system_ctrl_set_app_request_handler+0x10>)
   df0b0:	681b      	ldr	r3, [r3, #0]
   df0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   df0b6:	9301      	str	r3, [sp, #4]
   df0b8:	bd08      	pop	{r3, pc}
   df0ba:	0000      	.short	0x0000
   df0bc:	00030220 	.word	0x00030220

000df0c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   df0c0:	b508      	push	{r3, lr}
   df0c2:	4b03      	ldr	r3, [pc, #12]	; (df0d0 <system_ctrl_set_result+0x10>)
   df0c4:	681b      	ldr	r3, [r3, #0]
   df0c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   df0ca:	9301      	str	r3, [sp, #4]
   df0cc:	bd08      	pop	{r3, pc}
   df0ce:	0000      	.short	0x0000
   df0d0:	00030220 	.word	0x00030220

000df0d4 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   df0d4:	b508      	push	{r3, lr}
   df0d6:	4b03      	ldr	r3, [pc, #12]	; (df0e4 <system_invoke_event_handler+0x10>)
   df0d8:	681b      	ldr	r3, [r3, #0]
   df0da:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   df0de:	9301      	str	r3, [sp, #4]
   df0e0:	bd08      	pop	{r3, pc}
   df0e2:	0000      	.short	0x0000
   df0e4:	00030220 	.word	0x00030220

000df0e8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   df0e8:	b508      	push	{r3, lr}
   df0ea:	4b02      	ldr	r3, [pc, #8]	; (df0f4 <network_config+0xc>)
   df0ec:	681b      	ldr	r3, [r3, #0]
   df0ee:	681b      	ldr	r3, [r3, #0]
   df0f0:	9301      	str	r3, [sp, #4]
   df0f2:	bd08      	pop	{r3, pc}
   df0f4:	00030240 	.word	0x00030240

000df0f8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   df0f8:	b508      	push	{r3, lr}
   df0fa:	4b02      	ldr	r3, [pc, #8]	; (df104 <network_connect+0xc>)
   df0fc:	681b      	ldr	r3, [r3, #0]
   df0fe:	685b      	ldr	r3, [r3, #4]
   df100:	9301      	str	r3, [sp, #4]
   df102:	bd08      	pop	{r3, pc}
   df104:	00030240 	.word	0x00030240

000df108 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   df108:	b508      	push	{r3, lr}
   df10a:	4b02      	ldr	r3, [pc, #8]	; (df114 <network_connecting+0xc>)
   df10c:	681b      	ldr	r3, [r3, #0]
   df10e:	689b      	ldr	r3, [r3, #8]
   df110:	9301      	str	r3, [sp, #4]
   df112:	bd08      	pop	{r3, pc}
   df114:	00030240 	.word	0x00030240

000df118 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   df118:	b508      	push	{r3, lr}
   df11a:	4b02      	ldr	r3, [pc, #8]	; (df124 <network_disconnect+0xc>)
   df11c:	681b      	ldr	r3, [r3, #0]
   df11e:	68db      	ldr	r3, [r3, #12]
   df120:	9301      	str	r3, [sp, #4]
   df122:	bd08      	pop	{r3, pc}
   df124:	00030240 	.word	0x00030240

000df128 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   df128:	b508      	push	{r3, lr}
   df12a:	4b02      	ldr	r3, [pc, #8]	; (df134 <network_ready+0xc>)
   df12c:	681b      	ldr	r3, [r3, #0]
   df12e:	691b      	ldr	r3, [r3, #16]
   df130:	9301      	str	r3, [sp, #4]
   df132:	bd08      	pop	{r3, pc}
   df134:	00030240 	.word	0x00030240

000df138 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   df138:	b508      	push	{r3, lr}
   df13a:	4b02      	ldr	r3, [pc, #8]	; (df144 <network_on+0xc>)
   df13c:	681b      	ldr	r3, [r3, #0]
   df13e:	695b      	ldr	r3, [r3, #20]
   df140:	9301      	str	r3, [sp, #4]
   df142:	bd08      	pop	{r3, pc}
   df144:	00030240 	.word	0x00030240

000df148 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   df148:	b508      	push	{r3, lr}
   df14a:	4b02      	ldr	r3, [pc, #8]	; (df154 <network_off+0xc>)
   df14c:	681b      	ldr	r3, [r3, #0]
   df14e:	699b      	ldr	r3, [r3, #24]
   df150:	9301      	str	r3, [sp, #4]
   df152:	bd08      	pop	{r3, pc}
   df154:	00030240 	.word	0x00030240

000df158 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   df158:	b508      	push	{r3, lr}
   df15a:	4b02      	ldr	r3, [pc, #8]	; (df164 <network_listen+0xc>)
   df15c:	681b      	ldr	r3, [r3, #0]
   df15e:	69db      	ldr	r3, [r3, #28]
   df160:	9301      	str	r3, [sp, #4]
   df162:	bd08      	pop	{r3, pc}
   df164:	00030240 	.word	0x00030240

000df168 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   df168:	b508      	push	{r3, lr}
   df16a:	4b02      	ldr	r3, [pc, #8]	; (df174 <network_listening+0xc>)
   df16c:	681b      	ldr	r3, [r3, #0]
   df16e:	6a1b      	ldr	r3, [r3, #32]
   df170:	9301      	str	r3, [sp, #4]
   df172:	bd08      	pop	{r3, pc}
   df174:	00030240 	.word	0x00030240

000df178 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   df178:	b508      	push	{r3, lr}
   df17a:	4b02      	ldr	r3, [pc, #8]	; (df184 <network_set_listen_timeout+0xc>)
   df17c:	681b      	ldr	r3, [r3, #0]
   df17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df180:	9301      	str	r3, [sp, #4]
   df182:	bd08      	pop	{r3, pc}
   df184:	00030240 	.word	0x00030240

000df188 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   df188:	b508      	push	{r3, lr}
   df18a:	4b02      	ldr	r3, [pc, #8]	; (df194 <network_get_listen_timeout+0xc>)
   df18c:	681b      	ldr	r3, [r3, #0]
   df18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   df190:	9301      	str	r3, [sp, #4]
   df192:	bd08      	pop	{r3, pc}
   df194:	00030240 	.word	0x00030240

000df198 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   df198:	b508      	push	{r3, lr}
   df19a:	4b02      	ldr	r3, [pc, #8]	; (df1a4 <spark_variable+0xc>)
   df19c:	681b      	ldr	r3, [r3, #0]
   df19e:	681b      	ldr	r3, [r3, #0]
   df1a0:	9301      	str	r3, [sp, #4]
   df1a2:	bd08      	pop	{r3, pc}
   df1a4:	00030244 	.word	0x00030244

000df1a8 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   df1a8:	b508      	push	{r3, lr}
   df1aa:	4b02      	ldr	r3, [pc, #8]	; (df1b4 <spark_process+0xc>)
   df1ac:	681b      	ldr	r3, [r3, #0]
   df1ae:	689b      	ldr	r3, [r3, #8]
   df1b0:	9301      	str	r3, [sp, #4]
   df1b2:	bd08      	pop	{r3, pc}
   df1b4:	00030244 	.word	0x00030244

000df1b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   df1b8:	b508      	push	{r3, lr}
   df1ba:	4b02      	ldr	r3, [pc, #8]	; (df1c4 <spark_cloud_flag_connected+0xc>)
   df1bc:	681b      	ldr	r3, [r3, #0]
   df1be:	695b      	ldr	r3, [r3, #20]
   df1c0:	9301      	str	r3, [sp, #4]
   df1c2:	bd08      	pop	{r3, pc}
   df1c4:	00030244 	.word	0x00030244

000df1c8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   df1c8:	b508      	push	{r3, lr}
   df1ca:	4b02      	ldr	r3, [pc, #8]	; (df1d4 <spark_send_event+0xc>)
   df1cc:	681b      	ldr	r3, [r3, #0]
   df1ce:	6a1b      	ldr	r3, [r3, #32]
   df1d0:	9301      	str	r3, [sp, #4]
   df1d2:	bd08      	pop	{r3, pc}
   df1d4:	00030244 	.word	0x00030244

000df1d8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   df1d8:	b508      	push	{r3, lr}
   df1da:	4b02      	ldr	r3, [pc, #8]	; (df1e4 <spark_subscribe+0xc>)
   df1dc:	681b      	ldr	r3, [r3, #0]
   df1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   df1e0:	9301      	str	r3, [sp, #4]
   df1e2:	bd08      	pop	{r3, pc}
   df1e4:	00030244 	.word	0x00030244

000df1e8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   df1e8:	b508      	push	{r3, lr}
   df1ea:	4b02      	ldr	r3, [pc, #8]	; (df1f4 <spark_sync_time+0xc>)
   df1ec:	681b      	ldr	r3, [r3, #0]
   df1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   df1f0:	9301      	str	r3, [sp, #4]
   df1f2:	bd08      	pop	{r3, pc}
   df1f4:	00030244 	.word	0x00030244

000df1f8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   df1f8:	b508      	push	{r3, lr}
   df1fa:	4b02      	ldr	r3, [pc, #8]	; (df204 <spark_sync_time_pending+0xc>)
   df1fc:	681b      	ldr	r3, [r3, #0]
   df1fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df200:	9301      	str	r3, [sp, #4]
   df202:	bd08      	pop	{r3, pc}
   df204:	00030244 	.word	0x00030244

000df208 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   df208:	b508      	push	{r3, lr}
   df20a:	4b02      	ldr	r3, [pc, #8]	; (df214 <spark_set_random_seed_from_cloud_handler+0xc>)
   df20c:	681b      	ldr	r3, [r3, #0]
   df20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   df210:	9301      	str	r3, [sp, #4]
   df212:	bd08      	pop	{r3, pc}
   df214:	00030244 	.word	0x00030244

000df218 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   df218:	b508      	push	{r3, lr}
   df21a:	4b02      	ldr	r3, [pc, #8]	; (df224 <malloc+0xc>)
   df21c:	681b      	ldr	r3, [r3, #0]
   df21e:	681b      	ldr	r3, [r3, #0]
   df220:	9301      	str	r3, [sp, #4]
   df222:	bd08      	pop	{r3, pc}
   df224:	0003021c 	.word	0x0003021c

000df228 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   df228:	b508      	push	{r3, lr}
   df22a:	4b02      	ldr	r3, [pc, #8]	; (df234 <free+0xc>)
   df22c:	681b      	ldr	r3, [r3, #0]
   df22e:	685b      	ldr	r3, [r3, #4]
   df230:	9301      	str	r3, [sp, #4]
   df232:	bd08      	pop	{r3, pc}
   df234:	0003021c 	.word	0x0003021c

000df238 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   df238:	b508      	push	{r3, lr}
   df23a:	4b02      	ldr	r3, [pc, #8]	; (df244 <realloc+0xc>)
   df23c:	681b      	ldr	r3, [r3, #0]
   df23e:	689b      	ldr	r3, [r3, #8]
   df240:	9301      	str	r3, [sp, #4]
   df242:	bd08      	pop	{r3, pc}
   df244:	0003021c 	.word	0x0003021c

000df248 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   df248:	b508      	push	{r3, lr}
   df24a:	4b02      	ldr	r3, [pc, #8]	; (df254 <siscanf+0xc>)
   df24c:	681b      	ldr	r3, [r3, #0]
   df24e:	699b      	ldr	r3, [r3, #24]
   df250:	9301      	str	r3, [sp, #4]
   df252:	bd08      	pop	{r3, pc}
   df254:	0003021c 	.word	0x0003021c

000df258 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   df258:	b508      	push	{r3, lr}
   df25a:	4b02      	ldr	r3, [pc, #8]	; (df264 <abort+0xc>)
   df25c:	681b      	ldr	r3, [r3, #0]
   df25e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   df260:	9301      	str	r3, [sp, #4]
   df262:	bd08      	pop	{r3, pc}
   df264:	0003021c 	.word	0x0003021c

000df268 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   df268:	b508      	push	{r3, lr}
   df26a:	4b02      	ldr	r3, [pc, #8]	; (df274 <_malloc_r+0xc>)
   df26c:	681b      	ldr	r3, [r3, #0]
   df26e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df270:	9301      	str	r3, [sp, #4]
   df272:	bd08      	pop	{r3, pc}
   df274:	0003021c 	.word	0x0003021c

000df278 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   df278:	2200      	movs	r2, #0
   df27a:	4611      	mov	r1, r2
   df27c:	6840      	ldr	r0, [r0, #4]
   df27e:	f7ff bf73 	b.w	df168 <network_listening>

000df282 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   df282:	2200      	movs	r2, #0
   df284:	4611      	mov	r1, r2
   df286:	6840      	ldr	r0, [r0, #4]
   df288:	f7ff bf7e 	b.w	df188 <network_get_listen_timeout>

000df28c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   df28c:	2200      	movs	r2, #0
   df28e:	6840      	ldr	r0, [r0, #4]
   df290:	f7ff bf72 	b.w	df178 <network_set_listen_timeout>

000df294 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   df294:	2200      	movs	r2, #0
   df296:	f081 0101 	eor.w	r1, r1, #1
   df29a:	6840      	ldr	r0, [r0, #4]
   df29c:	f7ff bf5c 	b.w	df158 <network_listen>

000df2a0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   df2a0:	2300      	movs	r3, #0
   df2a2:	461a      	mov	r2, r3
   df2a4:	4619      	mov	r1, r3
   df2a6:	6840      	ldr	r0, [r0, #4]
   df2a8:	f7ff bf4e 	b.w	df148 <network_off>

000df2ac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   df2ac:	2300      	movs	r3, #0
   df2ae:	461a      	mov	r2, r3
   df2b0:	4619      	mov	r1, r3
   df2b2:	6840      	ldr	r0, [r0, #4]
   df2b4:	f7ff bf40 	b.w	df138 <network_on>

000df2b8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   df2b8:	2200      	movs	r2, #0
   df2ba:	4611      	mov	r1, r2
   df2bc:	6840      	ldr	r0, [r0, #4]
   df2be:	f7ff bf33 	b.w	df128 <network_ready>

000df2c2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   df2c2:	2200      	movs	r2, #0
   df2c4:	4611      	mov	r1, r2
   df2c6:	6840      	ldr	r0, [r0, #4]
   df2c8:	f7ff bf1e 	b.w	df108 <network_connecting>

000df2cc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   df2cc:	2200      	movs	r2, #0
   df2ce:	2102      	movs	r1, #2
   df2d0:	6840      	ldr	r0, [r0, #4]
   df2d2:	f7ff bf21 	b.w	df118 <network_disconnect>

000df2d6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   df2d6:	2300      	movs	r3, #0
   df2d8:	461a      	mov	r2, r3
   df2da:	6840      	ldr	r0, [r0, #4]
   df2dc:	f7ff bf0c 	b.w	df0f8 <network_connect>

000df2e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   df2e0:	4b02      	ldr	r3, [pc, #8]	; (df2ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   df2e2:	2203      	movs	r2, #3
   df2e4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   df2e6:	4a02      	ldr	r2, [pc, #8]	; (df2f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   df2e8:	601a      	str	r2, [r3, #0]
   df2ea:	4770      	bx	lr
   df2ec:	2003e370 	.word	0x2003e370
   df2f0:	000e4674 	.word	0x000e4674

000df2f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   df2f4:	b510      	push	{r4, lr}
   df2f6:	4604      	mov	r4, r0
{
    _spi = spi;
   df2f8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   df2fa:	4608      	mov	r0, r1
   df2fc:	f7ff fc86 	bl	dec0c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   df300:	2300      	movs	r3, #0
   df302:	6063      	str	r3, [r4, #4]
}
   df304:	4620      	mov	r0, r4
   df306:	bd10      	pop	{r4, pc}

000df308 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   df308:	7800      	ldrb	r0, [r0, #0]
   df30a:	f7ff bc87 	b.w	dec1c <HAL_SPI_Is_Enabled>

000df30e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   df30e:	b510      	push	{r4, lr}
   df310:	4604      	mov	r4, r0
        if (wakeupSource_) {
   df312:	6800      	ldr	r0, [r0, #0]
   df314:	b118      	cbz	r0, df31e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   df316:	f7ff ff87 	bl	df228 <free>
            wakeupSource_ = nullptr;
   df31a:	2300      	movs	r3, #0
   df31c:	6023      	str	r3, [r4, #0]
   df31e:	bd10      	pop	{r4, pc}

000df320 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   df320:	b510      	push	{r4, lr}
   df322:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   df324:	f7ff fff3 	bl	df30e <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   df328:	4620      	mov	r0, r4
   df32a:	bd10      	pop	{r4, pc}

000df32c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   df32c:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   df32e:	4c09      	ldr	r4, [pc, #36]	; (df354 <_GLOBAL__sub_I_System+0x28>)
   df330:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   df332:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   df336:	6020      	str	r0, [r4, #0]
   df338:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   df33a:	71a0      	strb	r0, [r4, #6]
   df33c:	8120      	strh	r0, [r4, #8]
   df33e:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   df340:	f7ff fe84 	bl	df04c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   df344:	4620      	mov	r0, r4
   df346:	4a04      	ldr	r2, [pc, #16]	; (df358 <_GLOBAL__sub_I_System+0x2c>)
   df348:	4904      	ldr	r1, [pc, #16]	; (df35c <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   df34a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   df34e:	f002 b805 	b.w	e135c <__aeabi_atexit>
   df352:	bf00      	nop
   df354:	2003e378 	.word	0x2003e378
   df358:	2003e2e8 	.word	0x2003e2e8
   df35c:	000df321 	.word	0x000df321

000df360 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   df360:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   df362:	6804      	ldr	r4, [r0, #0]
   df364:	6b24      	ldr	r4, [r4, #48]	; 0x30
   df366:	46a4      	mov	ip, r4
    }
   df368:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   df36c:	4760      	bx	ip

000df36e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   df36e:	6803      	ldr	r3, [r0, #0]
   df370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   df372:	4718      	bx	r3

000df374 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   df374:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   df376:	4770      	bx	lr

000df378 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   df378:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   df37a:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   df37c:	1a10      	subs	r0, r2, r0
   df37e:	4770      	bx	lr

000df380 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   df380:	b513      	push	{r0, r1, r4, lr}
   df382:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   df384:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   df386:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   df38a:	68d4      	ldr	r4, [r2, #12]
   df38c:	4619      	mov	r1, r3
   df38e:	2201      	movs	r2, #1
   df390:	47a0      	blx	r4
}
   df392:	b002      	add	sp, #8
   df394:	bd10      	pop	{r4, pc}

000df396 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   df396:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   df398:	6803      	ldr	r3, [r0, #0]
   df39a:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   df39c:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   df39e:	4798      	blx	r3
   df3a0:	b128      	cbz	r0, df3ae <_ZN3UDP4readEv+0x18>
   df3a2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df3a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   df3a6:	1c59      	adds	r1, r3, #1
   df3a8:	86e1      	strh	r1, [r4, #54]	; 0x36
   df3aa:	5cd0      	ldrb	r0, [r2, r3]
   df3ac:	bd10      	pop	{r4, pc}
   df3ae:	f04f 30ff 	mov.w	r0, #4294967295
}
   df3b2:	bd10      	pop	{r4, pc}

000df3b4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   df3b4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   df3b6:	6803      	ldr	r3, [r0, #0]
   df3b8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   df3ba:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   df3bc:	4798      	blx	r3
   df3be:	b118      	cbz	r0, df3c8 <_ZN3UDP4peekEv+0x14>
   df3c0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df3c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   df3c4:	5cd0      	ldrb	r0, [r2, r3]
   df3c6:	bd10      	pop	{r4, pc}
   df3c8:	f04f 30ff 	mov.w	r0, #4294967295
}
   df3cc:	bd10      	pop	{r4, pc}

000df3ce <_ZN3UDP5flushEv>:

void UDP::flush() {
   df3ce:	4770      	bx	lr

000df3d0 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   df3d0:	b410      	push	{r4}
   df3d2:	4603      	mov	r3, r0
   df3d4:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   df3d6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   df3d8:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   df3da:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   df3dc:	6803      	ldr	r3, [r0, #0]
   df3de:	1a52      	subs	r2, r2, r1
   df3e0:	68db      	ldr	r3, [r3, #12]
   df3e2:	4421      	add	r1, r4
}
   df3e4:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   df3e8:	4718      	bx	r3

000df3ea <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   df3ea:	f1a0 0010 	sub.w	r0, r0, #16
   df3ee:	f7ff bfef 	b.w	df3d0 <_ZNK3UDP7printToER5Print>

000df3f2 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df3f2:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   df3f4:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df3f6:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df3f8:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   df3fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df3fc:	4604      	mov	r4, r0
   df3fe:	460f      	mov	r7, r1
   df400:	4615      	mov	r5, r2
    stop();
   df402:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   df404:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df406:	4632      	mov	r2, r6
   df408:	2100      	movs	r1, #0
   df40a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   df40c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df40e:	f002 ff23 	bl	e2258 <memset>
    saddr.sin6_len = sizeof(saddr);
   df412:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   df416:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   df418:	260a      	movs	r6, #10
   df41a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   df41e:	f7ff fce5 	bl	dedec <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df422:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   df424:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df428:	2102      	movs	r1, #2
   df42a:	4630      	mov	r0, r6
   df42c:	f7ff fd8e 	bl	def4c <sock_socket>

    if (_sock < 0) {
   df430:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df432:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   df434:	db24      	blt.n	df480 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   df436:	2204      	movs	r2, #4
   df438:	9200      	str	r2, [sp, #0]
   df43a:	ab02      	add	r3, sp, #8
   df43c:	f640 71ff 	movw	r1, #4095	; 0xfff
   df440:	f7ff fd64 	bl	def0c <sock_setsockopt>
   df444:	b9e0      	cbnz	r0, df480 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   df446:	b195      	cbz	r5, df46e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   df448:	9003      	str	r0, [sp, #12]
   df44a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   df44e:	a903      	add	r1, sp, #12
   df450:	b2e8      	uxtb	r0, r5
   df452:	f7ff fbf3 	bl	dec3c <if_index_to_name>
   df456:	b998      	cbnz	r0, df480 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   df458:	2306      	movs	r3, #6
   df45a:	9300      	str	r3, [sp, #0]
   df45c:	f241 020b 	movw	r2, #4107	; 0x100b
   df460:	ab03      	add	r3, sp, #12
   df462:	f640 71ff 	movw	r1, #4095	; 0xfff
   df466:	6960      	ldr	r0, [r4, #20]
   df468:	f7ff fd50 	bl	def0c <sock_setsockopt>
   df46c:	b940      	cbnz	r0, df480 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   df46e:	221c      	movs	r2, #28
   df470:	a905      	add	r1, sp, #20
   df472:	6960      	ldr	r0, [r4, #20]
   df474:	f7ff fd42 	bl	deefc <sock_bind>
   df478:	b910      	cbnz	r0, df480 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   df47a:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   df47c:	2001      	movs	r0, #1
   df47e:	e004      	b.n	df48a <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   df480:	6823      	ldr	r3, [r4, #0]
   df482:	4620      	mov	r0, r4
   df484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   df486:	4798      	blx	r3
   df488:	2000      	movs	r0, #0
    }
    return bound;
}
   df48a:	b00d      	add	sp, #52	; 0x34
   df48c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df48e <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   df48e:	b510      	push	{r4, lr}
   df490:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   df492:	6940      	ldr	r0, [r0, #20]
   df494:	2800      	cmp	r0, #0
   df496:	db01      	blt.n	df49c <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   df498:	f7ff fd40 	bl	def1c <sock_close>
    }

    _sock = -1;
   df49c:	f04f 33ff 	mov.w	r3, #4294967295
   df4a0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df4a2:	2300      	movs	r3, #0
   df4a4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   df4a6:	8723      	strh	r3, [r4, #56]	; 0x38
   df4a8:	bd10      	pop	{r4, pc}

000df4aa <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   df4aa:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   df4ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   df4ae:	4605      	mov	r5, r0
   df4b0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   df4b2:	b113      	cbz	r3, df4ba <_ZN3UDP5writeEPKhj+0x10>
   df4b4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   df4b6:	1a24      	subs	r4, r4, r0
   df4b8:	e000      	b.n	df4bc <_ZN3UDP5writeEPKhj+0x12>
   df4ba:	461c      	mov	r4, r3
   df4bc:	4294      	cmp	r4, r2
   df4be:	bf28      	it	cs
   df4c0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   df4c2:	4622      	mov	r2, r4
   df4c4:	4418      	add	r0, r3
   df4c6:	f002 febc 	bl	e2242 <memcpy>
    _offset += size;
   df4ca:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   df4cc:	4423      	add	r3, r4
   df4ce:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   df4d0:	4620      	mov	r0, r4
   df4d2:	bd38      	pop	{r3, r4, r5, pc}

000df4d4 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   df4d4:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   df4d6:	6803      	ldr	r3, [r0, #0]
   df4d8:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   df4da:	4604      	mov	r4, r0
   df4dc:	460e      	mov	r6, r1
   df4de:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   df4e0:	4798      	blx	r3
   df4e2:	b188      	cbz	r0, df508 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   df4e4:	6823      	ldr	r3, [r4, #0]
   df4e6:	4620      	mov	r0, r4
   df4e8:	691b      	ldr	r3, [r3, #16]
   df4ea:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   df4ec:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df4ee:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   df4f0:	4285      	cmp	r5, r0
   df4f2:	bfa8      	it	ge
   df4f4:	4605      	movge	r5, r0
   df4f6:	4419      	add	r1, r3
   df4f8:	462a      	mov	r2, r5
   df4fa:	4630      	mov	r0, r6
   df4fc:	f002 fea1 	bl	e2242 <memcpy>
        _offset += read;
   df500:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df502:	442b      	add	r3, r5
   df504:	86e3      	strh	r3, [r4, #54]	; 0x36
   df506:	e001      	b.n	df50c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   df508:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   df50c:	4628      	mov	r0, r5
   df50e:	bd70      	pop	{r4, r5, r6, pc}

000df510 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   df510:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   df512:	4604      	mov	r4, r0
   df514:	4b05      	ldr	r3, [pc, #20]	; (df52c <_ZN3UDP8remoteIPEv+0x1c>)
   df516:	f844 3b04 	str.w	r3, [r4], #4
   df51a:	f101 0520 	add.w	r5, r1, #32
   df51e:	4606      	mov	r6, r0
   df520:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df524:	682b      	ldr	r3, [r5, #0]
   df526:	7023      	strb	r3, [r4, #0]
   df528:	4630      	mov	r0, r6
   df52a:	bd70      	pop	{r4, r5, r6, pc}
   df52c:	000e4838 	.word	0x000e4838

000df530 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df530:	b5f0      	push	{r4, r5, r6, r7, lr}
   df532:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df534:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df536:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df538:	6a97      	ldr	r7, [r2, #40]	; 0x28
   df53a:	4a0a      	ldr	r2, [pc, #40]	; (df564 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   df53c:	9202      	str	r2, [sp, #8]
   df53e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df540:	468e      	mov	lr, r1
   df542:	4606      	mov	r6, r0
   df544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df546:	ac03      	add	r4, sp, #12
   df548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df54a:	682b      	ldr	r3, [r5, #0]
   df54c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df54e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   df552:	9300      	str	r3, [sp, #0]
   df554:	4662      	mov	r2, ip
   df556:	ab02      	add	r3, sp, #8
   df558:	4671      	mov	r1, lr
   df55a:	4630      	mov	r0, r6
   df55c:	47b8      	blx	r7
    }
   df55e:	b009      	add	sp, #36	; 0x24
   df560:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df562:	bf00      	nop
   df564:	000e4838 	.word	0x000e4838

000df568 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   df568:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df56a:	6803      	ldr	r3, [r0, #0]
   df56c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   df570:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   df572:	4b0d      	ldr	r3, [pc, #52]	; (df5a8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   df574:	b089      	sub	sp, #36	; 0x24
   df576:	f100 0620 	add.w	r6, r0, #32
   df57a:	4604      	mov	r4, r0
   df57c:	9302      	str	r3, [sp, #8]
   df57e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   df580:	ad03      	add	r5, sp, #12
   df582:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   df584:	6833      	ldr	r3, [r6, #0]
   df586:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df588:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   df58a:	9300      	str	r3, [sp, #0]
   df58c:	4672      	mov	r2, lr
   df58e:	ab02      	add	r3, sp, #8
   df590:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   df592:	4620      	mov	r0, r4
   df594:	47b8      	blx	r7
    flush(); // wait for send to complete
   df596:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df598:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   df59a:	69db      	ldr	r3, [r3, #28]
   df59c:	4620      	mov	r0, r4
   df59e:	4798      	blx	r3
    return result;
}
   df5a0:	4628      	mov	r0, r5
   df5a2:	b009      	add	sp, #36	; 0x24
   df5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df5a6:	bf00      	nop
   df5a8:	000e4838 	.word	0x000e4838

000df5ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   df5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   df5ae:	7843      	ldrb	r3, [r0, #1]
   df5b0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   df5b2:	b08d      	sub	sp, #52	; 0x34
   df5b4:	4605      	mov	r5, r0
   df5b6:	460c      	mov	r4, r1
   df5b8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   df5ba:	d101      	bne.n	df5c0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   df5bc:	1d01      	adds	r1, r0, #4
   df5be:	e033      	b.n	df628 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   df5c0:	2b0a      	cmp	r3, #10
   df5c2:	d135      	bne.n	df630 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   df5c4:	2211      	movs	r2, #17
   df5c6:	2100      	movs	r1, #0
   df5c8:	a801      	add	r0, sp, #4
   df5ca:	f002 fe45 	bl	e2258 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   df5ce:	68ab      	ldr	r3, [r5, #8]
   df5d0:	b943      	cbnz	r3, df5e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   df5d2:	68eb      	ldr	r3, [r5, #12]
   df5d4:	b933      	cbnz	r3, df5e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   df5d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
   df5da:	692e      	ldr	r6, [r5, #16]
   df5dc:	f7ff fbf6 	bl	dedcc <inet_htonl>
   df5e0:	4286      	cmp	r6, r0
   df5e2:	d01f      	beq.n	df624 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   df5e4:	f105 0308 	add.w	r3, r5, #8
   df5e8:	ae01      	add	r6, sp, #4
   df5ea:	f105 0e18 	add.w	lr, r5, #24
   df5ee:	6818      	ldr	r0, [r3, #0]
   df5f0:	6859      	ldr	r1, [r3, #4]
   df5f2:	4632      	mov	r2, r6
   df5f4:	c203      	stmia	r2!, {r0, r1}
   df5f6:	3308      	adds	r3, #8
   df5f8:	4573      	cmp	r3, lr
   df5fa:	4616      	mov	r6, r2
   df5fc:	d1f7      	bne.n	df5ee <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   df5fe:	2306      	movs	r3, #6
            addr = IPAddress(a);
   df600:	a901      	add	r1, sp, #4
   df602:	a806      	add	r0, sp, #24
   df604:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   df606:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   df60a:	f000 ff5b 	bl	e04c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   df60e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   df610:	3404      	adds	r4, #4
   df612:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df614:	6833      	ldr	r3, [r6, #0]
   df616:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   df618:	b157      	cbz	r7, df630 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   df61a:	8868      	ldrh	r0, [r5, #2]
   df61c:	f7ff fbde 	bl	deddc <inet_ntohs>
   df620:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   df622:	e005      	b.n	df630 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   df624:	f105 0114 	add.w	r1, r5, #20
   df628:	4620      	mov	r0, r4
   df62a:	f000 ff80 	bl	e052e <_ZN9IPAddressaSEPKh>
   df62e:	e7f3      	b.n	df618 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   df630:	b00d      	add	sp, #52	; 0x34
   df632:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df634 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   df634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df638:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   df63a:	ab0e      	add	r3, sp, #56	; 0x38
   df63c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   df63e:	4606      	mov	r6, r0
   df640:	4617      	mov	r7, r2
   df642:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   df644:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   df648:	462a      	mov	r2, r5
   df64a:	4629      	mov	r1, r5
   df64c:	f7ff fa9e 	bl	deb8c <netdb_getaddrinfo>
   df650:	2800      	cmp	r0, #0
   df652:	db1f      	blt.n	df694 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   df654:	9b01      	ldr	r3, [sp, #4]
   df656:	b1fb      	cbz	r3, df698 <_ZN3UDP11beginPacketEPKct+0x64>
   df658:	695b      	ldr	r3, [r3, #20]
   df65a:	b1eb      	cbz	r3, df698 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   df65c:	a802      	add	r0, sp, #8
   df65e:	f000 ff23 	bl	e04a8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   df662:	9b01      	ldr	r3, [sp, #4]
   df664:	462a      	mov	r2, r5
   df666:	6958      	ldr	r0, [r3, #20]
   df668:	a902      	add	r1, sp, #8
   df66a:	f7ff ff9f 	bl	df5ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   df66e:	a802      	add	r0, sp, #8
   df670:	f000 ff3a 	bl	e04e8 <_ZNK9IPAddresscvbEv>
        if (addr) {
   df674:	b180      	cbz	r0, df698 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   df676:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   df678:	ad03      	add	r5, sp, #12
   df67a:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   df67e:	4b0b      	ldr	r3, [pc, #44]	; (df6ac <_ZN3UDP11beginPacketEPKct+0x78>)
   df680:	9308      	str	r3, [sp, #32]
   df682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df684:	ac09      	add	r4, sp, #36	; 0x24
   df686:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df688:	682b      	ldr	r3, [r5, #0]
   df68a:	7023      	strb	r3, [r4, #0]
   df68c:	463a      	mov	r2, r7
   df68e:	a908      	add	r1, sp, #32
   df690:	4630      	mov	r0, r6
   df692:	47c0      	blx	r8
   df694:	4604      	mov	r4, r0
   df696:	e001      	b.n	df69c <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   df698:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   df69c:	9801      	ldr	r0, [sp, #4]
   df69e:	f7ff fa6d 	bl	deb7c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   df6a2:	4620      	mov	r0, r4
   df6a4:	b00e      	add	sp, #56	; 0x38
   df6a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df6aa:	bf00      	nop
   df6ac:	000e4838 	.word	0x000e4838

000df6b0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   df6b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   df6b4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   df6b8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   df6bc:	b08c      	sub	sp, #48	; 0x30
   df6be:	4605      	mov	r5, r0
   df6c0:	460c      	mov	r4, r1
   df6c2:	4617      	mov	r7, r2
   df6c4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   df6c6:	db00      	blt.n	df6ca <_ZN3UDP13receivePacketEPhjm+0x1a>
   df6c8:	b911      	cbnz	r1, df6d0 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   df6ca:	f04f 30ff 	mov.w	r0, #4294967295
   df6ce:	e035      	b.n	df73c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   df6d0:	f04f 0a1c 	mov.w	sl, #28
   df6d4:	ae05      	add	r6, sp, #20
   df6d6:	4652      	mov	r2, sl
   df6d8:	2100      	movs	r1, #0
   df6da:	4630      	mov	r0, r6
   df6dc:	f002 fdbc 	bl	e2258 <memset>
        socklen_t slen = sizeof(saddr);
   df6e0:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   df6e4:	f1b9 0f00 	cmp.w	r9, #0
   df6e8:	d014      	beq.n	df714 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   df6ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   df6ee:	fbb9 f1f2 	udiv	r1, r9, r2
   df6f2:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   df6f4:	fb02 9111 	mls	r1, r2, r1, r9
   df6f8:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   df6fa:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   df6fc:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   df6fe:	9300      	str	r3, [sp, #0]
   df700:	f241 0206 	movw	r2, #4102	; 0x1006
   df704:	ab03      	add	r3, sp, #12
   df706:	f640 71ff 	movw	r1, #4095	; 0xfff
   df70a:	4640      	mov	r0, r8
   df70c:	f7ff fbfe 	bl	def0c <sock_setsockopt>
            if (ret) {
   df710:	b108      	cbz	r0, df716 <_ZN3UDP13receivePacketEPhjm+0x66>
   df712:	e013      	b.n	df73c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   df714:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   df716:	ab02      	add	r3, sp, #8
   df718:	9301      	str	r3, [sp, #4]
   df71a:	4621      	mov	r1, r4
   df71c:	4603      	mov	r3, r0
   df71e:	9600      	str	r6, [sp, #0]
   df720:	463a      	mov	r2, r7
   df722:	6968      	ldr	r0, [r5, #20]
   df724:	f7ff fc02 	bl	def2c <sock_recvfrom>
        if (ret >= 0) {
   df728:	1e04      	subs	r4, r0, #0
   df72a:	db06      	blt.n	df73a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   df72c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   df730:	f105 011c 	add.w	r1, r5, #28
   df734:	4630      	mov	r0, r6
   df736:	f7ff ff39 	bl	df5ac <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   df73a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   df73c:	b00c      	add	sp, #48	; 0x30
   df73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000df742 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   df742:	b538      	push	{r3, r4, r5, lr}
   df744:	4605      	mov	r5, r0
   df746:	4614      	mov	r4, r2
   df748:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   df74a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   df74c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   df74e:	d111      	bne.n	df774 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   df750:	231c      	movs	r3, #28
   df752:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   df754:	230a      	movs	r3, #10
   df756:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   df758:	f7ff fb48 	bl	dedec <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   df75c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   df75e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   df762:	1d2b      	adds	r3, r5, #4
   df764:	3514      	adds	r5, #20
   df766:	f853 2b04 	ldr.w	r2, [r3], #4
   df76a:	f844 2b04 	str.w	r2, [r4], #4
   df76e:	42ab      	cmp	r3, r5
   df770:	d1f9      	bne.n	df766 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   df772:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   df774:	2b04      	cmp	r3, #4
   df776:	d10a      	bne.n	df78e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   df778:	2310      	movs	r3, #16
   df77a:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   df77c:	2302      	movs	r3, #2
   df77e:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   df780:	f7ff fb34 	bl	dedec <inet_htons>
   df784:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   df786:	6868      	ldr	r0, [r5, #4]
   df788:	f7ff fb20 	bl	dedcc <inet_htonl>
   df78c:	6060      	str	r0, [r4, #4]
   df78e:	bd38      	pop	{r3, r4, r5, pc}

000df790 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   df790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   df794:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   df796:	ac03      	add	r4, sp, #12
   df798:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   df79a:	4699      	mov	r9, r3
   df79c:	4606      	mov	r6, r0
   df79e:	460f      	mov	r7, r1
   df7a0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   df7a2:	2100      	movs	r1, #0
   df7a4:	462a      	mov	r2, r5
   df7a6:	4620      	mov	r0, r4
   df7a8:	f002 fd56 	bl	e2258 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   df7ac:	4622      	mov	r2, r4
   df7ae:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   df7b2:	4648      	mov	r0, r9
   df7b4:	f7ff ffc5 	bl	df742 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   df7b8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   df7bc:	b143      	cbz	r3, df7d0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   df7be:	e88d 0030 	stmia.w	sp, {r4, r5}
   df7c2:	2300      	movs	r3, #0
   df7c4:	4642      	mov	r2, r8
   df7c6:	4639      	mov	r1, r7
   df7c8:	6970      	ldr	r0, [r6, #20]
   df7ca:	f7ff fbb7 	bl	def3c <sock_sendto>
   df7ce:	e001      	b.n	df7d4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   df7d0:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   df7d4:	b00b      	add	sp, #44	; 0x2c
   df7d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df7da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df7da:	b5f0      	push	{r4, r5, r6, r7, lr}
   df7dc:	b091      	sub	sp, #68	; 0x44
   df7de:	460c      	mov	r4, r1
   df7e0:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   df7e2:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df7e4:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   df7e6:	a809      	add	r0, sp, #36	; 0x24
   df7e8:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df7ea:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   df7ec:	f002 fd34 	bl	e2258 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   df7f0:	aa09      	add	r2, sp, #36	; 0x24
   df7f2:	2100      	movs	r1, #0
   df7f4:	4620      	mov	r0, r4
   df7f6:	f7ff ffa4 	bl	df742 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   df7fa:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   df7fe:	2b02      	cmp	r3, #2
   df800:	d12e      	bne.n	df860 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   df802:	2300      	movs	r3, #0
   df804:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   df806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df808:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   df80a:	b1dd      	cbz	r5, df844 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   df80c:	a902      	add	r1, sp, #8
   df80e:	4628      	mov	r0, r5
   df810:	f7ff fa1c 	bl	dec4c <if_get_by_index>
   df814:	b9b0      	cbnz	r0, df844 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   df816:	a910      	add	r1, sp, #64	; 0x40
   df818:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   df81c:	9802      	ldr	r0, [sp, #8]
   df81e:	f7ff fa1d 	bl	dec5c <if_get_addrs>
   df822:	b960      	cbnz	r0, df83e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   df824:	9b03      	ldr	r3, [sp, #12]
   df826:	b153      	cbz	r3, df83e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   df828:	68da      	ldr	r2, [r3, #12]
   df82a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   df82c:	7851      	ldrb	r1, [r2, #1]
   df82e:	2902      	cmp	r1, #2
   df830:	d103      	bne.n	df83a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   df832:	6852      	ldr	r2, [r2, #4]
   df834:	b10a      	cbz	r2, df83a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   df836:	9205      	str	r2, [sp, #20]
   df838:	e001      	b.n	df83e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   df83a:	681b      	ldr	r3, [r3, #0]
   df83c:	e7f3      	b.n	df826 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   df83e:	9803      	ldr	r0, [sp, #12]
   df840:	f7ff fa14 	bl	dec6c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   df844:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   df846:	f04f 0308 	mov.w	r3, #8
   df84a:	9300      	str	r3, [sp, #0]
   df84c:	bf18      	it	ne
   df84e:	2203      	movne	r2, #3
   df850:	ab04      	add	r3, sp, #16
   df852:	bf08      	it	eq
   df854:	2204      	moveq	r2, #4
   df856:	2100      	movs	r1, #0
   df858:	4630      	mov	r0, r6
   df85a:	f7ff fb57 	bl	def0c <sock_setsockopt>
   df85e:	e01e      	b.n	df89e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   df860:	2b0a      	cmp	r3, #10
   df862:	d11a      	bne.n	df89a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   df864:	ac04      	add	r4, sp, #16
   df866:	2214      	movs	r2, #20
   df868:	2100      	movs	r1, #0
   df86a:	4620      	mov	r0, r4
   df86c:	f002 fcf4 	bl	e2258 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   df870:	ab0b      	add	r3, sp, #44	; 0x2c
   df872:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df874:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   df876:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df87a:	f04f 0314 	mov.w	r3, #20
   df87e:	9300      	str	r3, [sp, #0]
   df880:	bf18      	it	ne
   df882:	220c      	movne	r2, #12
   df884:	4623      	mov	r3, r4
   df886:	bf08      	it	eq
   df888:	220d      	moveq	r2, #13
   df88a:	2129      	movs	r1, #41	; 0x29
   df88c:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   df88e:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df890:	f7ff fb3c 	bl	def0c <sock_setsockopt>
   df894:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   df898:	e001      	b.n	df89e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   df89a:	f04f 30ff 	mov.w	r0, #4294967295
}
   df89e:	b011      	add	sp, #68	; 0x44
   df8a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000df8a4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   df8a4:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   df8a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   df8aa:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   df8ac:	4b0b      	ldr	r3, [pc, #44]	; (df8dc <_ZN3UDPC1Ev+0x38>)
   df8ae:	f103 0208 	add.w	r2, r3, #8
   df8b2:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   df8b4:	2500      	movs	r5, #0
   df8b6:	6103      	str	r3, [r0, #16]
   df8b8:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   df8bc:	4604      	mov	r4, r0
   df8be:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   df8c0:	6002      	str	r2, [r0, #0]
   df8c2:	6143      	str	r3, [r0, #20]
   df8c4:	301c      	adds	r0, #28
   df8c6:	f000 fdef 	bl	e04a8 <_ZN9IPAddressC1Ev>
   df8ca:	f44f 7300 	mov.w	r3, #512	; 0x200
   df8ce:	86e5      	strh	r5, [r4, #54]	; 0x36
   df8d0:	8725      	strh	r5, [r4, #56]	; 0x38
   df8d2:	63e5      	str	r5, [r4, #60]	; 0x3c
   df8d4:	6423      	str	r3, [r4, #64]	; 0x40
   df8d6:	6465      	str	r5, [r4, #68]	; 0x44
}
   df8d8:	4620      	mov	r0, r4
   df8da:	bd38      	pop	{r3, r4, r5, pc}
   df8dc:	000e46a0 	.word	0x000e46a0

000df8e0 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   df8e0:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   df8e2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   df8e6:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   df8e8:	b123      	cbz	r3, df8f4 <_ZN3UDP13releaseBufferEv+0x14>
   df8ea:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   df8ec:	b110      	cbz	r0, df8f4 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   df8ee:	2101      	movs	r1, #1
   df8f0:	f001 fd42 	bl	e1378 <_ZdlPvj>
    }
    _buffer = NULL;
   df8f4:	2300      	movs	r3, #0
   df8f6:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   df8f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   df8fc:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df8fe:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   df900:	8723      	strh	r3, [r4, #56]	; 0x38
   df902:	bd10      	pop	{r4, pc}

000df904 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   df904:	b570      	push	{r4, r5, r6, lr}
   df906:	4604      	mov	r4, r0
   df908:	4616      	mov	r6, r2
   df90a:	460d      	mov	r5, r1
    releaseBuffer();
   df90c:	f7ff ffe8 	bl	df8e0 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   df910:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   df912:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   df914:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   df916:	b93e      	cbnz	r6, df928 <_ZN3UDP9setBufferEjPh+0x24>
   df918:	b135      	cbz	r5, df928 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   df91a:	4628      	mov	r0, r5
   df91c:	f7f4 fbbf 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   df920:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   df922:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   df924:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   df928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df92a:	b103      	cbz	r3, df92e <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   df92c:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   df92e:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   df930:	3000      	adds	r0, #0
   df932:	bf18      	it	ne
   df934:	2001      	movne	r0, #1
   df936:	bd70      	pop	{r4, r5, r6, pc}

000df938 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   df938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df93a:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   df93c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   df93e:	4605      	mov	r5, r0
   df940:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   df942:	b91a      	cbnz	r2, df94c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   df944:	6c01      	ldr	r1, [r0, #64]	; 0x40
   df946:	b109      	cbz	r1, df94c <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   df948:	f7ff ffdc 	bl	df904 <_ZN3UDP9setBufferEjPh>
   df94c:	3404      	adds	r4, #4
   df94e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   df950:	f105 0620 	add.w	r6, r5, #32
   df954:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   df956:	6823      	ldr	r3, [r4, #0]
   df958:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df95a:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   df95c:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df95e:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   df960:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   df962:	6c28      	ldr	r0, [r5, #64]	; 0x40
   df964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df966 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   df966:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   df968:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   df96a:	4604      	mov	r4, r0
   df96c:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   df96e:	b91a      	cbnz	r2, df978 <_ZN3UDP11parsePacketEm+0x12>
   df970:	6c01      	ldr	r1, [r0, #64]	; 0x40
   df972:	b109      	cbz	r1, df978 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   df974:	f7ff ffc6 	bl	df904 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   df978:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df97a:	2200      	movs	r2, #0
   df97c:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   df97e:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   df980:	b149      	cbz	r1, df996 <_ZN3UDP11parsePacketEm+0x30>
   df982:	6c22      	ldr	r2, [r4, #64]	; 0x40
   df984:	b13a      	cbz	r2, df996 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   df986:	6823      	ldr	r3, [r4, #0]
   df988:	4620      	mov	r0, r4
   df98a:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   df98c:	4633      	mov	r3, r6
   df98e:	47a8      	blx	r5
        if (result > 0) {
   df990:	2800      	cmp	r0, #0
            _total = result;
   df992:	bfc8      	it	gt
   df994:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   df996:	6823      	ldr	r3, [r4, #0]
   df998:	4620      	mov	r0, r4
   df99a:	691b      	ldr	r3, [r3, #16]
}
   df99c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   df9a0:	4718      	bx	r3
	...

000df9a4 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   df9a4:	b510      	push	{r4, lr}
   df9a6:	4b07      	ldr	r3, [pc, #28]	; (df9c4 <_ZN3UDPD1Ev+0x20>)
   df9a8:	f103 0208 	add.w	r2, r3, #8
   df9ac:	336c      	adds	r3, #108	; 0x6c
   df9ae:	4604      	mov	r4, r0
   df9b0:	6002      	str	r2, [r0, #0]
   df9b2:	6103      	str	r3, [r0, #16]
   df9b4:	f7ff fd6b 	bl	df48e <_ZN3UDP4stopEv>
   df9b8:	4620      	mov	r0, r4
   df9ba:	f7ff ff91 	bl	df8e0 <_ZN3UDP13releaseBufferEv>
   df9be:	4620      	mov	r0, r4
   df9c0:	bd10      	pop	{r4, pc}
   df9c2:	bf00      	nop
   df9c4:	000e46a0 	.word	0x000e46a0

000df9c8 <_ZN3UDPD0Ev>:
   df9c8:	b510      	push	{r4, lr}
   df9ca:	4604      	mov	r4, r0
   df9cc:	f7ff ffea 	bl	df9a4 <_ZN3UDPD1Ev>
   df9d0:	4620      	mov	r0, r4
   df9d2:	214c      	movs	r1, #76	; 0x4c
   df9d4:	f001 fcd0 	bl	e1378 <_ZdlPvj>
   df9d8:	4620      	mov	r0, r4
   df9da:	bd10      	pop	{r4, pc}

000df9dc <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   df9dc:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   df9de:	6940      	ldr	r0, [r0, #20]
   df9e0:	2800      	cmp	r0, #0
   df9e2:	db04      	blt.n	df9ee <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   df9e4:	2301      	movs	r3, #1
   df9e6:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   df9ea:	f7ff bef6 	b.w	df7da <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   df9ee:	f04f 30ff 	mov.w	r0, #4294967295
   df9f2:	4770      	bx	lr

000df9f4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   df9f4:	b510      	push	{r4, lr}
   df9f6:	4604      	mov	r4, r0
{
	free(buffer);
   df9f8:	6800      	ldr	r0, [r0, #0]
   df9fa:	f7ff fc15 	bl	df228 <free>
}
   df9fe:	4620      	mov	r0, r4
   dfa00:	bd10      	pop	{r4, pc}

000dfa02 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   dfa02:	b510      	push	{r4, lr}
   dfa04:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   dfa06:	6800      	ldr	r0, [r0, #0]
   dfa08:	b108      	cbz	r0, dfa0e <_ZN6String10invalidateEv+0xc>
   dfa0a:	f7ff fc0d 	bl	df228 <free>
	buffer = NULL;
   dfa0e:	2300      	movs	r3, #0
   dfa10:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   dfa12:	60a3      	str	r3, [r4, #8]
   dfa14:	6063      	str	r3, [r4, #4]
   dfa16:	bd10      	pop	{r4, pc}

000dfa18 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   dfa18:	b538      	push	{r3, r4, r5, lr}
   dfa1a:	4604      	mov	r4, r0
   dfa1c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   dfa1e:	6800      	ldr	r0, [r0, #0]
   dfa20:	3101      	adds	r1, #1
   dfa22:	f7ff fc09 	bl	df238 <realloc>
	if (newbuffer) {
   dfa26:	b110      	cbz	r0, dfa2e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   dfa28:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   dfa2c:	2001      	movs	r0, #1
	}
	return 0;
}
   dfa2e:	bd38      	pop	{r3, r4, r5, pc}

000dfa30 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dfa30:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   dfa32:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   dfa34:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   dfa36:	b113      	cbz	r3, dfa3e <_ZN6String7reserveEj+0xe>
   dfa38:	6843      	ldr	r3, [r0, #4]
   dfa3a:	428b      	cmp	r3, r1
   dfa3c:	d207      	bcs.n	dfa4e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   dfa3e:	4620      	mov	r0, r4
   dfa40:	f7ff ffea 	bl	dfa18 <_ZN6String12changeBufferEj>
   dfa44:	b120      	cbz	r0, dfa50 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   dfa46:	68a3      	ldr	r3, [r4, #8]
   dfa48:	b90b      	cbnz	r3, dfa4e <_ZN6String7reserveEj+0x1e>
   dfa4a:	6822      	ldr	r2, [r4, #0]
   dfa4c:	7013      	strb	r3, [r2, #0]
   dfa4e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   dfa50:	bd10      	pop	{r4, pc}

000dfa52 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dfa52:	b570      	push	{r4, r5, r6, lr}
   dfa54:	460e      	mov	r6, r1
	if (!reserve(length)) {
   dfa56:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   dfa58:	4604      	mov	r4, r0
   dfa5a:	4615      	mov	r5, r2
	if (!reserve(length)) {
   dfa5c:	f7ff ffe8 	bl	dfa30 <_ZN6String7reserveEj>
   dfa60:	b918      	cbnz	r0, dfa6a <_ZN6String4copyEPKcj+0x18>
		invalidate();
   dfa62:	4620      	mov	r0, r4
   dfa64:	f7ff ffcd 	bl	dfa02 <_ZN6String10invalidateEv>
		return *this;
   dfa68:	e009      	b.n	dfa7e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   dfa6a:	462a      	mov	r2, r5
   dfa6c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   dfa6e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   dfa70:	6820      	ldr	r0, [r4, #0]
   dfa72:	f002 fbe6 	bl	e2242 <memcpy>
	buffer[len] = 0;
   dfa76:	6822      	ldr	r2, [r4, #0]
   dfa78:	68a3      	ldr	r3, [r4, #8]
   dfa7a:	2100      	movs	r1, #0
   dfa7c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   dfa7e:	4620      	mov	r0, r4
   dfa80:	bd70      	pop	{r4, r5, r6, pc}

000dfa82 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dfa82:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dfa84:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   dfa86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   dfa88:	6003      	str	r3, [r0, #0]
	capacity = 0;
   dfa8a:	6043      	str	r3, [r0, #4]
	len = 0;
   dfa8c:	6083      	str	r3, [r0, #8]
	flags = 0;
   dfa8e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   dfa90:	460d      	mov	r5, r1
   dfa92:	b139      	cbz	r1, dfaa4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   dfa94:	4608      	mov	r0, r1
   dfa96:	f002 fc3c 	bl	e2312 <strlen>
   dfa9a:	4629      	mov	r1, r5
   dfa9c:	4602      	mov	r2, r0
   dfa9e:	4620      	mov	r0, r4
   dfaa0:	f7ff ffd7 	bl	dfa52 <_ZN6String4copyEPKcj>
}
   dfaa4:	4620      	mov	r0, r4
   dfaa6:	bd38      	pop	{r3, r4, r5, pc}

000dfaa8 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   dfaa8:	b510      	push	{r4, lr}
   dfaaa:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   dfaac:	6800      	ldr	r0, [r0, #0]
   dfaae:	b108      	cbz	r0, dfab4 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   dfab0:	f7ff f95c 	bl	ded6c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   dfab4:	4620      	mov	r0, r4
   dfab6:	bd10      	pop	{r4, pc}

000dfab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   dfab8:	680b      	ldr	r3, [r1, #0]
   dfaba:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   dfabc:	b113      	cbz	r3, dfac4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   dfabe:	685a      	ldr	r2, [r3, #4]
   dfac0:	3201      	adds	r2, #1
   dfac2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   dfac4:	4770      	bx	lr
	...

000dfac8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dfac8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dfaca:	4c06      	ldr	r4, [pc, #24]	; (dfae4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   dfacc:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   dface:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   dfad0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   dfad2:	f7ff f943 	bl	ded5c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dfad6:	4620      	mov	r0, r4
   dfad8:	4a03      	ldr	r2, [pc, #12]	; (dfae8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   dfada:	4904      	ldr	r1, [pc, #16]	; (dfaec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   dfadc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   dfae0:	f001 bc3c 	b.w	e135c <__aeabi_atexit>
   dfae4:	2003e384 	.word	0x2003e384
   dfae8:	2003e2e8 	.word	0x2003e2e8
   dfaec:	000dfaa9 	.word	0x000dfaa9

000dfaf0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   dfaf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dfaf2:	4606      	mov	r6, r0
   dfaf4:	460d      	mov	r5, r1
   dfaf6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   dfaf8:	2400      	movs	r4, #0
  while (size--) {
   dfafa:	42bd      	cmp	r5, r7
   dfafc:	d00c      	beq.n	dfb18 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   dfafe:	6833      	ldr	r3, [r6, #0]
   dfb00:	f815 1b01 	ldrb.w	r1, [r5], #1
   dfb04:	689b      	ldr	r3, [r3, #8]
   dfb06:	4630      	mov	r0, r6
   dfb08:	4798      	blx	r3
     if (chunk>=0)
   dfb0a:	2800      	cmp	r0, #0
   dfb0c:	db01      	blt.n	dfb12 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   dfb0e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   dfb10:	e7f3      	b.n	dfafa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   dfb12:	2c00      	cmp	r4, #0
   dfb14:	bf08      	it	eq
   dfb16:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   dfb18:	4620      	mov	r0, r4
   dfb1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dfb1c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   dfb1c:	b570      	push	{r4, r5, r6, lr}
   dfb1e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   dfb20:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   dfb22:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   dfb24:	b149      	cbz	r1, dfb3a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   dfb26:	f002 fbf4 	bl	e2312 <strlen>
   dfb2a:	682b      	ldr	r3, [r5, #0]
   dfb2c:	4602      	mov	r2, r0
   dfb2e:	4621      	mov	r1, r4
   dfb30:	4628      	mov	r0, r5
   dfb32:	68db      	ldr	r3, [r3, #12]
    }
   dfb34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dfb38:	4718      	bx	r3
    }
   dfb3a:	bd70      	pop	{r4, r5, r6, pc}

000dfb3c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dfb3c:	6803      	ldr	r3, [r0, #0]
   dfb3e:	689b      	ldr	r3, [r3, #8]
   dfb40:	4718      	bx	r3

000dfb42 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dfb42:	b530      	push	{r4, r5, lr}
   dfb44:	b08b      	sub	sp, #44	; 0x2c
   dfb46:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dfb48:	2100      	movs	r1, #0
   dfb4a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dfb4e:	2a01      	cmp	r2, #1
   dfb50:	bf98      	it	ls
   dfb52:	220a      	movls	r2, #10
   dfb54:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dfb58:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dfb5c:	fb05 3312 	mls	r3, r5, r2, r3
   dfb60:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dfb64:	2b09      	cmp	r3, #9
   dfb66:	bf94      	ite	ls
   dfb68:	3330      	addls	r3, #48	; 0x30
   dfb6a:	3337      	addhi	r3, #55	; 0x37
   dfb6c:	b2db      	uxtb	r3, r3
   dfb6e:	4621      	mov	r1, r4
   dfb70:	f804 3901 	strb.w	r3, [r4], #-1
   dfb74:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dfb76:	2d00      	cmp	r5, #0
   dfb78:	d1ee      	bne.n	dfb58 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dfb7a:	f7ff ffcf 	bl	dfb1c <_ZN5Print5writeEPKc>
}
   dfb7e:	b00b      	add	sp, #44	; 0x2c
   dfb80:	bd30      	pop	{r4, r5, pc}

000dfb82 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   dfb82:	6800      	ldr	r0, [r0, #0]
   dfb84:	f7ff b8fa 	b.w	ded7c <os_mutex_recursive_lock>

000dfb88 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dfb88:	4b01      	ldr	r3, [pc, #4]	; (dfb90 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dfb8a:	4a02      	ldr	r2, [pc, #8]	; (dfb94 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dfb8c:	601a      	str	r2, [r3, #0]
   dfb8e:	4770      	bx	lr
   dfb90:	2003e388 	.word	0x2003e388
   dfb94:	000e4783 	.word	0x000e4783

000dfb98 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dfb98:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dfb9a:	4b14      	ldr	r3, [pc, #80]	; (dfbec <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dfb9c:	4f14      	ldr	r7, [pc, #80]	; (dfbf0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dfb9e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dfba0:	4b14      	ldr	r3, [pc, #80]	; (dfbf4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dfba2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dfba4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dfba6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dfba8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dfbaa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dfbac:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dfbae:	d01b      	beq.n	dfbe8 <_ZL22Refresh_UnixTime_Cachel+0x50>
   dfbb0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dfbb2:	ad01      	add	r5, sp, #4
   dfbb4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dfbb8:	f002 fa38 	bl	e202c <localtime>
	calendar_time->tm_year += 1900;
   dfbbc:	6943      	ldr	r3, [r0, #20]
   dfbbe:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dfbc2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dfbc4:	4604      	mov	r4, r0
   dfbc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dfbc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dfbca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dfbcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dfbce:	f8d4 e000 	ldr.w	lr, [r4]
   dfbd2:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dfbd6:	ad01      	add	r5, sp, #4
   dfbd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dfbda:	4c07      	ldr	r4, [pc, #28]	; (dfbf8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dfbdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dfbde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dfbe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dfbe2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dfbe4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dfbe8:	b00b      	add	sp, #44	; 0x2c
   dfbea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dfbec:	2003e3bc 	.word	0x2003e3bc
   dfbf0:	2003e3b8 	.word	0x2003e3b8
   dfbf4:	2003e3b4 	.word	0x2003e3b4
   dfbf8:	2003e38c 	.word	0x2003e38c

000dfbfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dfbfc:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfbfe:	2000      	movs	r0, #0
   dfc00:	f7ff fafa 	bl	df1f8 <spark_sync_time_pending>
   dfc04:	b128      	cbz	r0, dfc12 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dfc06:	f7ff fad7 	bl	df1b8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfc0a:	f080 0001 	eor.w	r0, r0, #1
   dfc0e:	b2c0      	uxtb	r0, r0
   dfc10:	bd08      	pop	{r3, pc}
   dfc12:	2001      	movs	r0, #1
    }
   dfc14:	bd08      	pop	{r3, pc}
	...

000dfc18 <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   dfc18:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dfc1a:	f7ff ffbd 	bl	dfb98 <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   dfc1e:	4b04      	ldr	r3, [pc, #16]	; (dfc30 <_ZN9TimeClass12hourFormat12El+0x18>)
   dfc20:	6898      	ldr	r0, [r3, #8]
   dfc22:	b118      	cbz	r0, dfc2c <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   dfc24:	280c      	cmp	r0, #12
   dfc26:	dd02      	ble.n	dfc2e <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   dfc28:	380c      	subs	r0, #12
   dfc2a:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   dfc2c:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   dfc2e:	bd08      	pop	{r3, pc}
   dfc30:	2003e38c 	.word	0x2003e38c

000dfc34 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dfc34:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dfc38:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dfc3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dfc40:	d40f      	bmi.n	dfc62 <_ZN9TimeClass4zoneEf+0x2e>
   dfc42:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dfc46:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dfc4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dfc4e:	dc08      	bgt.n	dfc62 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dfc50:	eddf 7a04 	vldr	s15, [pc, #16]	; dfc64 <_ZN9TimeClass4zoneEf+0x30>
   dfc54:	4b04      	ldr	r3, [pc, #16]	; (dfc68 <_ZN9TimeClass4zoneEf+0x34>)
   dfc56:	ee20 0a27 	vmul.f32	s0, s0, s15
   dfc5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dfc5e:	ed83 0a00 	vstr	s0, [r3]
   dfc62:	4770      	bx	lr
   dfc64:	45610000 	.word	0x45610000
   dfc68:	2003e3bc 	.word	0x2003e3bc

000dfc6c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dfc6c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dfc6e:	2000      	movs	r0, #0
   dfc70:	f7ff f84c 	bl	ded0c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dfc74:	4604      	mov	r4, r0
   dfc76:	b968      	cbnz	r0, dfc94 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dfc78:	f7ff f9e0 	bl	df03c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dfc7c:	2801      	cmp	r0, #1
   dfc7e:	d10b      	bne.n	dfc98 <_ZN9TimeClass7isValidEv+0x2c>
   dfc80:	4620      	mov	r0, r4
   dfc82:	f7ff fa0b 	bl	df09c <system_thread_get_state>
   dfc86:	b938      	cbnz	r0, dfc98 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dfc88:	f7ff ffb8 	bl	dfbfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dfc8c:	b930      	cbnz	r0, dfc9c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dfc8e:	f7ff fa8b 	bl	df1a8 <spark_process>
   dfc92:	e7f9      	b.n	dfc88 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dfc94:	2001      	movs	r0, #1
   dfc96:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dfc98:	2000      	movs	r0, #0
   dfc9a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dfc9c:	f7ff ffae 	bl	dfbfc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dfca0:	2000      	movs	r0, #0
   dfca2:	f7ff f833 	bl	ded0c <HAL_RTC_Time_Is_Valid>
   dfca6:	3000      	adds	r0, #0
   dfca8:	bf18      	it	ne
   dfcaa:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dfcac:	bd10      	pop	{r4, pc}

000dfcae <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dfcae:	b508      	push	{r3, lr}
    (void)isValid();
   dfcb0:	f7ff ffdc 	bl	dfc6c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dfcb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dfcb8:	f7ff b808 	b.w	deccc <HAL_RTC_Get_UnixTime>

000dfcbc <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   dfcbc:	b508      	push	{r3, lr}
	return hourFormat12(now());
   dfcbe:	f7ff fff6 	bl	dfcae <_ZN9TimeClass3nowEv>
}
   dfcc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   dfcc6:	f7ff bfa7 	b.w	dfc18 <_ZN9TimeClass12hourFormat12El>
	...

000dfccc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dfccc:	b508      	push	{r3, lr}
	return minute(now());
   dfcce:	f7ff ffee 	bl	dfcae <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dfcd2:	f7ff ff61 	bl	dfb98 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dfcd6:	4b01      	ldr	r3, [pc, #4]	; (dfcdc <_ZN9TimeClass6minuteEv+0x10>)
   dfcd8:	6858      	ldr	r0, [r3, #4]
   dfcda:	bd08      	pop	{r3, pc}
   dfcdc:	2003e38c 	.word	0x2003e38c

000dfce0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dfce0:	4b02      	ldr	r3, [pc, #8]	; (dfcec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dfce2:	681a      	ldr	r2, [r3, #0]
   dfce4:	4b02      	ldr	r3, [pc, #8]	; (dfcf0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dfce6:	601a      	str	r2, [r3, #0]
   dfce8:	4770      	bx	lr
   dfcea:	bf00      	nop
   dfcec:	2003e1f8 	.word	0x2003e1f8
   dfcf0:	2003e3b0 	.word	0x2003e3b0

000dfcf4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dfcf4:	2100      	movs	r1, #0
   dfcf6:	f7ff b9b1 	b.w	df05c <system_delay_ms>

000dfcfa <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dfcfa:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   dfcfc:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dfcfe:	4604      	mov	r4, r0
    {
      if (_M_manager)
   dfd00:	b113      	cbz	r3, dfd08 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dfd02:	2203      	movs	r2, #3
   dfd04:	4601      	mov	r1, r0
   dfd06:	4798      	blx	r3
    }
   dfd08:	4620      	mov	r0, r4
   dfd0a:	bd10      	pop	{r4, pc}

000dfd0c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dfd0c:	b510      	push	{r4, lr}
   dfd0e:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dfd10:	f7ff fff3 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
   dfd14:	4620      	mov	r0, r4
   dfd16:	bd10      	pop	{r4, pc}

000dfd18 <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   dfd18:	b510      	push	{r4, lr}
   dfd1a:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dfd1c:	f7ff f976 	bl	df00c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   dfd20:	4284      	cmp	r4, r0
   dfd22:	d008      	beq.n	dfd36 <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   dfd24:	b11c      	cbz	r4, dfd2e <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   dfd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   dfd2a:	f7ff b95f 	b.w	defec <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   dfd2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   dfd32:	f7ff b963 	b.w	deffc <LED_Signaling_Stop>
   dfd36:	bd10      	pop	{r4, pc}

000dfd38 <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   dfd38:	b570      	push	{r4, r5, r6, lr}
   dfd3a:	4605      	mov	r5, r0
   dfd3c:	460e      	mov	r6, r1
   dfd3e:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dfd40:	f7ff f964 	bl	df00c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   dfd44:	b150      	cbz	r0, dfd5c <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   dfd46:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   dfd4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   dfd4e:	f7ff f945 	bl	defdc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   dfd52:	20e7      	movs	r0, #231	; 0xe7
}
   dfd54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   dfd58:	f7ff b960 	b.w	df01c <LED_On>
   dfd5c:	bd70      	pop	{r4, r5, r6, pc}

000dfd5e <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dfd5e:	b513      	push	{r0, r1, r4, lr}
   dfd60:	460b      	mov	r3, r1
   dfd62:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dfd64:	c803      	ldmia	r0, {r0, r1}
   dfd66:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dfd6a:	e893 0003 	ldmia.w	r3, {r0, r1}
   dfd6e:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dfd72:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dfd76:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dfd7a:	b002      	add	sp, #8
   dfd7c:	bd10      	pop	{r4, pc}
	...

000dfd80 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dfd80:	4803      	ldr	r0, [pc, #12]	; (dfd90 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dfd82:	4a04      	ldr	r2, [pc, #16]	; (dfd94 <_GLOBAL__sub_I_RGB+0x14>)
   dfd84:	4904      	ldr	r1, [pc, #16]	; (dfd98 <_GLOBAL__sub_I_RGB+0x18>)
   dfd86:	2300      	movs	r3, #0
   dfd88:	6083      	str	r3, [r0, #8]
   dfd8a:	f001 bae7 	b.w	e135c <__aeabi_atexit>
   dfd8e:	bf00      	nop
   dfd90:	2003e3c0 	.word	0x2003e3c0
   dfd94:	2003e2e8 	.word	0x2003e2e8
   dfd98:	000dfd0d 	.word	0x000dfd0d

000dfd9c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dfd9c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dfd9e:	4b0c      	ldr	r3, [pc, #48]	; (dfdd0 <serialEventRun+0x34>)
   dfda0:	b133      	cbz	r3, dfdb0 <serialEventRun+0x14>
   dfda2:	f000 fc2d 	bl	e0600 <_Z16_fetch_usbserialv>
   dfda6:	6803      	ldr	r3, [r0, #0]
   dfda8:	691b      	ldr	r3, [r3, #16]
   dfdaa:	4798      	blx	r3
   dfdac:	2800      	cmp	r0, #0
   dfdae:	dc09      	bgt.n	dfdc4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dfdb0:	4b08      	ldr	r3, [pc, #32]	; (dfdd4 <serialEventRun+0x38>)
   dfdb2:	b163      	cbz	r3, dfdce <serialEventRun+0x32>
   dfdb4:	f000 fcbc 	bl	e0730 <_Z22__fetch_global_Serial1v>
   dfdb8:	6803      	ldr	r3, [r0, #0]
   dfdba:	691b      	ldr	r3, [r3, #16]
   dfdbc:	4798      	blx	r3
   dfdbe:	2800      	cmp	r0, #0
   dfdc0:	dc03      	bgt.n	dfdca <serialEventRun+0x2e>
   dfdc2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dfdc4:	f3af 8000 	nop.w
   dfdc8:	e7f2      	b.n	dfdb0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dfdca:	f3af 8000 	nop.w
   dfdce:	bd08      	pop	{r3, pc}
	...

000dfdd8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dfdd8:	b508      	push	{r3, lr}
	serialEventRun();
   dfdda:	f7ff ffdf 	bl	dfd9c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dfdde:	f7fe ff6d 	bl	decbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dfde2:	4b01      	ldr	r3, [pc, #4]	; (dfde8 <_post_loop+0x10>)
   dfde4:	6018      	str	r0, [r3, #0]
   dfde6:	bd08      	pop	{r3, pc}
   dfde8:	2003e700 	.word	0x2003e700

000dfdec <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dfdec:	4802      	ldr	r0, [pc, #8]	; (dfdf8 <_Z33system_initialize_user_backup_ramv+0xc>)
   dfdee:	4a03      	ldr	r2, [pc, #12]	; (dfdfc <_Z33system_initialize_user_backup_ramv+0x10>)
   dfdf0:	4903      	ldr	r1, [pc, #12]	; (dfe00 <_Z33system_initialize_user_backup_ramv+0x14>)
   dfdf2:	1a12      	subs	r2, r2, r0
   dfdf4:	f002 ba25 	b.w	e2242 <memcpy>
   dfdf8:	2003f400 	.word	0x2003f400
   dfdfc:	2003f404 	.word	0x2003f404
   dfe00:	000e4d60 	.word	0x000e4d60

000dfe04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dfe04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dfe06:	2300      	movs	r3, #0
   dfe08:	9300      	str	r3, [sp, #0]
   dfe0a:	461a      	mov	r2, r3
   dfe0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dfe10:	f7ff f956 	bl	df0c0 <system_ctrl_set_result>
}
   dfe14:	b003      	add	sp, #12
   dfe16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dfe1c <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dfe1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dfe1e:	8843      	ldrh	r3, [r0, #2]
   dfe20:	2b0a      	cmp	r3, #10
   dfe22:	d008      	beq.n	dfe36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dfe24:	2b50      	cmp	r3, #80	; 0x50
   dfe26:	d109      	bne.n	dfe3c <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dfe28:	4b09      	ldr	r3, [pc, #36]	; (dfe50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dfe2a:	681b      	ldr	r3, [r3, #0]
   dfe2c:	b13b      	cbz	r3, dfe3e <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dfe2e:	b003      	add	sp, #12
   dfe30:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dfe34:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dfe36:	f7ff ffe5 	bl	dfe04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dfe3a:	e006      	b.n	dfe4a <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dfe3c:	2300      	movs	r3, #0
   dfe3e:	9300      	str	r3, [sp, #0]
   dfe40:	461a      	mov	r2, r3
   dfe42:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dfe46:	f7ff f93b 	bl	df0c0 <system_ctrl_set_result>
        break;
    }
}
   dfe4a:	b003      	add	sp, #12
   dfe4c:	f85d fb04 	ldr.w	pc, [sp], #4
   dfe50:	2003e3d0 	.word	0x2003e3d0

000dfe54 <module_user_init_hook>:

void module_user_init_hook()
{
   dfe54:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dfe56:	4c10      	ldr	r4, [pc, #64]	; (dfe98 <module_user_init_hook+0x44>)
   dfe58:	4d10      	ldr	r5, [pc, #64]	; (dfe9c <module_user_init_hook+0x48>)
   dfe5a:	6823      	ldr	r3, [r4, #0]
   dfe5c:	42ab      	cmp	r3, r5
   dfe5e:	4b10      	ldr	r3, [pc, #64]	; (dfea0 <module_user_init_hook+0x4c>)
   dfe60:	bf0c      	ite	eq
   dfe62:	2201      	moveq	r2, #1
   dfe64:	2200      	movne	r2, #0
   dfe66:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dfe68:	d002      	beq.n	dfe70 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dfe6a:	f7ff ffbf 	bl	dfdec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dfe6e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dfe70:	f7fe ff04 	bl	dec7c <HAL_RNG_GetRandomNumber>
   dfe74:	4604      	mov	r4, r0
    srand(seed);
   dfe76:	f002 f9f7 	bl	e2268 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dfe7a:	4b0a      	ldr	r3, [pc, #40]	; (dfea4 <module_user_init_hook+0x50>)
   dfe7c:	b113      	cbz	r3, dfe84 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dfe7e:	4620      	mov	r0, r4
   dfe80:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dfe84:	2100      	movs	r1, #0
   dfe86:	4807      	ldr	r0, [pc, #28]	; (dfea4 <module_user_init_hook+0x50>)
   dfe88:	f7ff f9be 	bl	df208 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dfe8c:	2100      	movs	r1, #0
   dfe8e:	4806      	ldr	r0, [pc, #24]	; (dfea8 <module_user_init_hook+0x54>)
}
   dfe90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dfe94:	f7ff b90a 	b.w	df0ac <system_ctrl_set_app_request_handler>
   dfe98:	2003f400 	.word	0x2003f400
   dfe9c:	9a271c1e 	.word	0x9a271c1e
   dfea0:	2003e3d4 	.word	0x2003e3d4
   dfea4:	00000000 	.word	0x00000000
   dfea8:	000dfe1d 	.word	0x000dfe1d

000dfeac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dfeac:	4770      	bx	lr

000dfeae <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dfeae:	2000      	movs	r0, #0
   dfeb0:	4770      	bx	lr

000dfeb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dfeb2:	b510      	push	{r4, lr}
   dfeb4:	2110      	movs	r1, #16
   dfeb6:	4604      	mov	r4, r0
   dfeb8:	f001 fa5e 	bl	e1378 <_ZdlPvj>
   dfebc:	4620      	mov	r0, r4
   dfebe:	bd10      	pop	{r4, pc}

000dfec0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dfec0:	b508      	push	{r3, lr}
      { delete this; }
   dfec2:	b108      	cbz	r0, dfec8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dfec4:	f7ff fff5 	bl	dfeb2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dfec8:	bd08      	pop	{r3, pc}

000dfeca <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dfeca:	2200      	movs	r2, #0
   dfecc:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dfece:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dfed0:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dfed4:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dfed6:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dfeda:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dfedc:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dfede:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dfee0:	680c      	ldr	r4, [r1, #0]
   dfee2:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dfee4:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dfee6:	bd10      	pop	{r4, pc}

000dfee8 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dfee8:	b510      	push	{r4, lr}
   dfeea:	4604      	mov	r4, r0
    free((void*)msg_);
   dfeec:	6800      	ldr	r0, [r0, #0]
   dfeee:	f7ff f99b 	bl	df228 <free>
}
   dfef2:	4620      	mov	r0, r4
   dfef4:	bd10      	pop	{r4, pc}

000dfef6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dfef6:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dfef8:	68c4      	ldr	r4, [r0, #12]
   dfefa:	b1f4      	cbz	r4, dff3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dfefc:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dfefe:	2b02      	cmp	r3, #2
   dff00:	d103      	bne.n	dff0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dff02:	f104 000c 	add.w	r0, r4, #12
   dff06:	f7ff ffef 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dff0a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dff0c:	b135      	cbz	r5, dff1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dff0e:	4628      	mov	r0, r5
   dff10:	f7ff fef3 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
   dff14:	2110      	movs	r1, #16
   dff16:	4628      	mov	r0, r5
   dff18:	f001 fa2e 	bl	e1378 <_ZdlPvj>
   dff1c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dff1e:	b135      	cbz	r5, dff2e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dff20:	4628      	mov	r0, r5
   dff22:	f7ff feea 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
   dff26:	2110      	movs	r1, #16
   dff28:	4628      	mov	r0, r5
   dff2a:	f001 fa25 	bl	e1378 <_ZdlPvj>
   dff2e:	4620      	mov	r0, r4
   dff30:	2114      	movs	r1, #20
   dff32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dff36:	f001 ba1f 	b.w	e1378 <_ZdlPvj>
   dff3a:	bd38      	pop	{r3, r4, r5, pc}

000dff3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dff3c:	b513      	push	{r0, r1, r4, lr}
   dff3e:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dff40:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dff44:	2300      	movs	r3, #0
   dff46:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dff48:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dff4a:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dff4c:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dff4e:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dff50:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dff52:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dff54:	f7fd f97c 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dff58:	4620      	mov	r0, r4
   dff5a:	b002      	add	sp, #8
   dff5c:	bd10      	pop	{r4, pc}

000dff5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dff5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dff60:	460c      	mov	r4, r1
   dff62:	ad02      	add	r5, sp, #8
   dff64:	f854 3b04 	ldr.w	r3, [r4], #4
   dff68:	f845 3d08 	str.w	r3, [r5, #-8]!
   dff6c:	4606      	mov	r6, r0
   dff6e:	460f      	mov	r7, r1
   dff70:	a801      	add	r0, sp, #4
   dff72:	4621      	mov	r1, r4
   dff74:	f7ff fda0 	bl	dfab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dff78:	4629      	mov	r1, r5
   dff7a:	4630      	mov	r0, r6
   dff7c:	f7ff ffde 	bl	dff3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dff80:	a801      	add	r0, sp, #4
   dff82:	f7fd f965 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dff86:	4620      	mov	r0, r4
   dff88:	f7fd f962 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dff8c:	4638      	mov	r0, r7
   dff8e:	2108      	movs	r1, #8
   dff90:	f001 f9f2 	bl	e1378 <_ZdlPvj>
        return p;
    }
   dff94:	4630      	mov	r0, r6
   dff96:	b003      	add	sp, #12
   dff98:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dff9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dff9c:	b538      	push	{r3, r4, r5, lr}
   dff9e:	2300      	movs	r3, #0
   dffa0:	4604      	mov	r4, r0
   dffa2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dffa4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dffa6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dffa8:	f7f4 f877 	bl	d409a <_Znwj>
   dffac:	b128      	cbz	r0, dffba <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dffae:	2301      	movs	r3, #1
   dffb0:	6043      	str	r3, [r0, #4]
   dffb2:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dffb4:	4b02      	ldr	r3, [pc, #8]	; (dffc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dffb6:	6003      	str	r3, [r0, #0]
   dffb8:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dffba:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dffbc:	4620      	mov	r0, r4
   dffbe:	bd38      	pop	{r3, r4, r5, pc}
   dffc0:	000e481c 	.word	0x000e481c

000dffc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dffc4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dffc6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dffc8:	b90a      	cbnz	r2, dffce <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dffca:	f001 f9e8 	bl	e139e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dffce:	68c3      	ldr	r3, [r0, #12]
    }
   dffd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dffd4:	4718      	bx	r3

000dffd6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dffd6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dffd8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dffda:	f100 0110 	add.w	r1, r0, #16
   dffde:	f7ff fff1 	bl	dffc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dffe2:	bd08      	pop	{r3, pc}

000dffe4 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dffe4:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dffe6:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dffe8:	b90a      	cbnz	r2, dffee <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dffea:	f001 f9d8 	bl	e139e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dffee:	68c3      	ldr	r3, [r0, #12]
    }
   dfff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfff4:	4718      	bx	r3

000dfff6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dfff6:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dfff8:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dfffa:	f100 0110 	add.w	r1, r0, #16
   dfffe:	f7ff fff1 	bl	dffe4 <_ZNKSt8functionIFvRKbEEclES1_>
   e0002:	bd08      	pop	{r3, pc}

000e0004 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e0004:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e0006:	2300      	movs	r3, #0
   e0008:	6083      	str	r3, [r0, #8]
   e000a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e000c:	4604      	mov	r4, r0
   e000e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   e0010:	b12b      	cbz	r3, e001e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e0012:	2202      	movs	r2, #2
   e0014:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e0016:	68eb      	ldr	r3, [r5, #12]
   e0018:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e001a:	68ab      	ldr	r3, [r5, #8]
   e001c:	60a3      	str	r3, [r4, #8]
	}
    }
   e001e:	4620      	mov	r0, r4
   e0020:	bd38      	pop	{r3, r4, r5, pc}
	...

000e0024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   e0024:	b5f0      	push	{r4, r5, r6, r7, lr}
   e0026:	b089      	sub	sp, #36	; 0x24
   e0028:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   e002a:	4668      	mov	r0, sp
   e002c:	f7ff ff4d 	bl	dfeca <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   e0030:	2300      	movs	r3, #0
   e0032:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   e0036:	f04f 0202 	mov.w	r2, #2
   e003a:	e8d4 3f4f 	ldrexb	r3, [r4]
   e003e:	2b00      	cmp	r3, #0
   e0040:	d103      	bne.n	e004a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   e0042:	e8c4 2f41 	strexb	r1, r2, [r4]
   e0046:	2900      	cmp	r1, #0
   e0048:	d1f7      	bne.n	e003a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   e004a:	d002      	beq.n	e0052 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   e004c:	f88d 3008 	strb.w	r3, [sp, #8]
   e0050:	e063      	b.n	e011a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   e0052:	f114 050c 	adds.w	r5, r4, #12
   e0056:	d003      	beq.n	e0060 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   e0058:	4669      	mov	r1, sp
   e005a:	4628      	mov	r0, r5
   e005c:	f7ff ff35 	bl	dfeca <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e0060:	f3bf 8f5f 	dmb	sy
   e0064:	2301      	movs	r3, #1
   e0066:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e0068:	2000      	movs	r0, #0
   e006a:	f104 0308 	add.w	r3, r4, #8
   e006e:	f3bf 8f5f 	dmb	sy
   e0072:	e853 6f00 	ldrex	r6, [r3]
   e0076:	e843 0200 	strex	r2, r0, [r3]
   e007a:	2a00      	cmp	r2, #0
   e007c:	d1f9      	bne.n	e0072 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   e007e:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   e0082:	2e00      	cmp	r6, #0
   e0084:	d049      	beq.n	e011a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   e0086:	f7fe fff9 	bl	df07c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   e008a:	b120      	cbz	r0, e0096 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e008c:	4629      	mov	r1, r5
   e008e:	4630      	mov	r0, r6
   e0090:	f7ff ff98 	bl	dffc4 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   e0094:	e03a      	b.n	e010c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e0096:	4631      	mov	r1, r6
   e0098:	a802      	add	r0, sp, #8
   e009a:	f7ff ffb3 	bl	e0004 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   e009e:	68e0      	ldr	r0, [r4, #12]
   e00a0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e00a4:	b108      	cbz	r0, e00aa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   e00a6:	f002 f919 	bl	e22dc <strdup>
   e00aa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e00ac:	2010      	movs	r0, #16
   e00ae:	f8ad 501c 	strh.w	r5, [sp, #28]
   e00b2:	f7f3 fff2 	bl	d409a <_Znwj>
   e00b6:	4605      	mov	r5, r0
   e00b8:	b1e8      	cbz	r0, e00f6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e00ba:	2700      	movs	r7, #0
   e00bc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e00be:	2018      	movs	r0, #24
   e00c0:	f7f3 ffeb 	bl	d409a <_Znwj>
   e00c4:	4604      	mov	r4, r0
   e00c6:	b188      	cbz	r0, e00ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e00c8:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e00ca:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e00cc:	a802      	add	r0, sp, #8
   e00ce:	f7ff fe46 	bl	dfd5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e00d2:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   e00d4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e00d6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e00d8:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   e00da:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e00dc:	a906      	add	r1, sp, #24
   e00de:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e00e0:	60e3      	str	r3, [r4, #12]
   e00e2:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e00e6:	9205      	str	r2, [sp, #20]
   e00e8:	f7ff feef 	bl	dfeca <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   e00ec:	4b0d      	ldr	r3, [pc, #52]	; (e0124 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   e00ee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e00f0:	4b0d      	ldr	r3, [pc, #52]	; (e0128 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e00f2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   e00f4:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   e00f6:	a806      	add	r0, sp, #24
   e00f8:	f7ff fef6 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e00fc:	a802      	add	r0, sp, #8
   e00fe:	f7ff fdfc 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e0102:	2200      	movs	r2, #0
   e0104:	4629      	mov	r1, r5
   e0106:	4809      	ldr	r0, [pc, #36]	; (e012c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   e0108:	f7fe ffc0 	bl	df08c <application_thread_invoke>
   e010c:	4630      	mov	r0, r6
   e010e:	f7ff fdf4 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   e0112:	2110      	movs	r1, #16
   e0114:	4630      	mov	r0, r6
   e0116:	f001 f92f 	bl	e1378 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   e011a:	4668      	mov	r0, sp
   e011c:	f7ff fee4 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
    }
   e0120:	b009      	add	sp, #36	; 0x24
   e0122:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0124:	000dffd7 	.word	0x000dffd7
   e0128:	000e024d 	.word	0x000e024d
   e012c:	000e077d 	.word	0x000e077d

000e0130 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e0130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0134:	b08b      	sub	sp, #44	; 0x2c
   e0136:	4606      	mov	r6, r0
   e0138:	460f      	mov	r7, r1
   e013a:	4690      	mov	r8, r2
   e013c:	4699      	mov	r9, r3
   e013e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e0142:	f7ff f839 	bl	df1b8 <spark_cloud_flag_connected>
   e0146:	ad07      	add	r5, sp, #28
    if (!connected()) {
   e0148:	4683      	mov	fp, r0
   e014a:	bb30      	cbnz	r0, e019a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   e014c:	f64f 732e 	movw	r3, #65326	; 0xff2e
   e0150:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e0152:	a905      	add	r1, sp, #20
   e0154:	4628      	mov	r0, r5
   e0156:	f8ad 3018 	strh.w	r3, [sp, #24]
   e015a:	f7ff feb6 	bl	dfeca <_ZN8particle5ErrorC1EOS0_>
   e015e:	2014      	movs	r0, #20
   e0160:	f7f3 ff9b 	bl	d409a <_Znwj>
   e0164:	4604      	mov	r4, r0
   e0166:	b158      	cbz	r0, e0180 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   e0168:	2302      	movs	r3, #2
   e016a:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e016c:	2301      	movs	r3, #1
   e016e:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e0170:	f8c0 b004 	str.w	fp, [r0, #4]
   e0174:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   e0178:	4629      	mov	r1, r5
   e017a:	300c      	adds	r0, #12
   e017c:	f7ff fea5 	bl	dfeca <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   e0180:	4630      	mov	r0, r6
   e0182:	4621      	mov	r1, r4
   e0184:	f840 4b04 	str.w	r4, [r0], #4
   e0188:	f7ff ff08 	bl	dff9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e018c:	4628      	mov	r0, r5
   e018e:	f7ff feab 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   e0192:	a805      	add	r0, sp, #20
   e0194:	f7ff fea8 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
   e0198:	e052      	b.n	e0240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e019a:	2400      	movs	r4, #0
   e019c:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   e019e:	2014      	movs	r0, #20
   e01a0:	606c      	str	r4, [r5, #4]
   e01a2:	60ac      	str	r4, [r5, #8]
   e01a4:	9307      	str	r3, [sp, #28]
   e01a6:	f7f3 ff78 	bl	d409a <_Znwj>
   e01aa:	4601      	mov	r1, r0
   e01ac:	b118      	cbz	r0, e01b6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   e01ae:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e01b0:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e01b2:	6044      	str	r4, [r0, #4]
   e01b4:	6084      	str	r4, [r0, #8]
   e01b6:	a804      	add	r0, sp, #16
   e01b8:	9103      	str	r1, [sp, #12]
   e01ba:	f7ff feef 	bl	dff9c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   e01be:	4b22      	ldr	r3, [pc, #136]	; (e0248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   e01c0:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   e01c2:	2008      	movs	r0, #8
   e01c4:	f7f3 ff69 	bl	d409a <_Znwj>
   e01c8:	4604      	mov	r4, r0
   e01ca:	b128      	cbz	r0, e01d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e01cc:	9b03      	ldr	r3, [sp, #12]
   e01ce:	f840 3b04 	str.w	r3, [r0], #4
   e01d2:	a904      	add	r1, sp, #16
   e01d4:	f7ff fc70 	bl	dfab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e01d8:	9500      	str	r5, [sp, #0]
   e01da:	fa5f f38a 	uxtb.w	r3, sl
   e01de:	464a      	mov	r2, r9
   e01e0:	4641      	mov	r1, r8
   e01e2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   e01e4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e01e6:	f7fe ffef 	bl	df1c8 <spark_send_event>
   e01ea:	b920      	cbnz	r0, e01f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e01ec:	9b03      	ldr	r3, [sp, #12]
   e01ee:	785b      	ldrb	r3, [r3, #1]
   e01f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e01f4:	b183      	cbz	r3, e0218 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   e01f6:	9b03      	ldr	r3, [sp, #12]
   e01f8:	9305      	str	r3, [sp, #20]
   e01fa:	a904      	add	r1, sp, #16
   e01fc:	a806      	add	r0, sp, #24
   e01fe:	f7ff fc5b 	bl	dfab8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   e0202:	a905      	add	r1, sp, #20
   e0204:	4630      	mov	r0, r6
   e0206:	f7ff fe99 	bl	dff3c <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e020a:	a806      	add	r0, sp, #24
   e020c:	f7fd f820 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e0210:	a804      	add	r0, sp, #16
   e0212:	f7fd f81d 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e0216:	e013      	b.n	e0240 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   e0218:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   e021c:	a905      	add	r1, sp, #20
   e021e:	a803      	add	r0, sp, #12
   e0220:	9205      	str	r2, [sp, #20]
   e0222:	f8ad 3018 	strh.w	r3, [sp, #24]
   e0226:	f7ff fefd 	bl	e0024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e022a:	a805      	add	r0, sp, #20
   e022c:	f7ff fe5c 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   e0230:	a805      	add	r0, sp, #20
   e0232:	9909      	ldr	r1, [sp, #36]	; 0x24
   e0234:	f7ff fe93 	bl	dff5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   e0238:	a806      	add	r0, sp, #24
   e023a:	f7fd f809 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e023e:	e7da      	b.n	e01f6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   e0240:	4630      	mov	r0, r6
   e0242:	b00b      	add	sp, #44	; 0x2c
   e0244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0248:	000e03bd 	.word	0x000e03bd

000e024c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e024c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e024e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0250:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e0252:	d006      	beq.n	e0262 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   e0254:	2a03      	cmp	r2, #3
   e0256:	d017      	beq.n	e0288 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   e0258:	2a01      	cmp	r2, #1
   e025a:	d122      	bne.n	e02a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e025c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e025e:	6003      	str	r3, [r0, #0]
	      break;
   e0260:	e01f      	b.n	e02a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e0262:	2018      	movs	r0, #24
   e0264:	680e      	ldr	r6, [r1, #0]
   e0266:	f7f3 ff18 	bl	d409a <_Znwj>
   e026a:	4605      	mov	r5, r0
   e026c:	b150      	cbz	r0, e0284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e026e:	4631      	mov	r1, r6
   e0270:	f7ff fec8 	bl	e0004 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   e0274:	6930      	ldr	r0, [r6, #16]
   e0276:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e027a:	b108      	cbz	r0, e0280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   e027c:	f002 f82e 	bl	e22dc <strdup>
   e0280:	6128      	str	r0, [r5, #16]
   e0282:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e0284:	6025      	str	r5, [r4, #0]
   e0286:	e00c      	b.n	e02a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e0288:	6804      	ldr	r4, [r0, #0]
   e028a:	b154      	cbz	r4, e02a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   e028c:	f104 0010 	add.w	r0, r4, #16
   e0290:	f7ff fe2a 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e0294:	4620      	mov	r0, r4
   e0296:	f7ff fd30 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e029a:	2118      	movs	r1, #24
   e029c:	4620      	mov	r0, r4
   e029e:	f001 f86b 	bl	e1378 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e02a2:	2000      	movs	r0, #0
   e02a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e02a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e02a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e02a8:	2300      	movs	r3, #0
   e02aa:	6083      	str	r3, [r0, #8]
   e02ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e02ae:	4604      	mov	r4, r0
   e02b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   e02b2:	b12b      	cbz	r3, e02c0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e02b4:	2202      	movs	r2, #2
   e02b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e02b8:	68eb      	ldr	r3, [r5, #12]
   e02ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e02bc:	68ab      	ldr	r3, [r5, #8]
   e02be:	60a3      	str	r3, [r4, #8]
	}
    }
   e02c0:	4620      	mov	r0, r4
   e02c2:	bd38      	pop	{r3, r4, r5, pc}

000e02c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e02c4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e02c6:	b570      	push	{r4, r5, r6, lr}
   e02c8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e02ca:	d006      	beq.n	e02da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   e02cc:	2a03      	cmp	r2, #3
   e02ce:	d011      	beq.n	e02f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   e02d0:	2a01      	cmp	r2, #1
   e02d2:	d118      	bne.n	e0306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e02d4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e02d6:	6003      	str	r3, [r0, #0]
	      break;
   e02d8:	e015      	b.n	e0306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e02da:	2014      	movs	r0, #20
   e02dc:	680e      	ldr	r6, [r1, #0]
   e02de:	f7f3 fedc 	bl	d409a <_Znwj>
   e02e2:	4605      	mov	r5, r0
   e02e4:	b120      	cbz	r0, e02f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e02e6:	4631      	mov	r1, r6
   e02e8:	f7ff ffdd 	bl	e02a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   e02ec:	7c33      	ldrb	r3, [r6, #16]
   e02ee:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e02f0:	6025      	str	r5, [r4, #0]
   e02f2:	e008      	b.n	e0306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e02f4:	6804      	ldr	r4, [r0, #0]
   e02f6:	b134      	cbz	r4, e0306 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e02f8:	4620      	mov	r0, r4
   e02fa:	f7ff fcfe 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e02fe:	2114      	movs	r1, #20
   e0300:	4620      	mov	r0, r4
   e0302:	f001 f839 	bl	e1378 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e0306:	2000      	movs	r0, #0
   e0308:	bd70      	pop	{r4, r5, r6, pc}
	...

000e030c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   e030c:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e030e:	2300      	movs	r3, #0
   e0310:	b087      	sub	sp, #28
   e0312:	460c      	mov	r4, r1
   e0314:	f3bf 8f5f 	dmb	sy
   e0318:	e850 6f00 	ldrex	r6, [r0]
   e031c:	e840 3200 	strex	r2, r3, [r0]
   e0320:	2a00      	cmp	r2, #0
   e0322:	d1f9      	bne.n	e0318 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   e0324:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   e0328:	2e00      	cmp	r6, #0
   e032a:	d03f      	beq.n	e03ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   e032c:	4618      	mov	r0, r3
   e032e:	f7fe fea5 	bl	df07c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   e0332:	4607      	mov	r7, r0
   e0334:	b120      	cbz	r0, e0340 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e0336:	4621      	mov	r1, r4
   e0338:	4630      	mov	r0, r6
   e033a:	f7ff fe53 	bl	dffe4 <_ZNKSt8functionIFvRKbEEclES1_>
   e033e:	e02e      	b.n	e039e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e0340:	4631      	mov	r1, r6
   e0342:	a801      	add	r0, sp, #4
   e0344:	f7ff ffaf 	bl	e02a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e0348:	7823      	ldrb	r3, [r4, #0]
   e034a:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e034e:	2010      	movs	r0, #16
   e0350:	f7f3 fea3 	bl	d409a <_Znwj>
   e0354:	4605      	mov	r5, r0
   e0356:	b1d0      	cbz	r0, e038e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e0358:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e035a:	2014      	movs	r0, #20
   e035c:	f7f3 fe9d 	bl	d409a <_Znwj>
   e0360:	4604      	mov	r4, r0
   e0362:	b178      	cbz	r0, e0384 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e0364:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e0366:	4601      	mov	r1, r0
   e0368:	a801      	add	r0, sp, #4
   e036a:	f7ff fcf8 	bl	dfd5e <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e036e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   e0370:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e0372:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0374:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   e0376:	9203      	str	r2, [sp, #12]
   e0378:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e037a:	60e3      	str	r3, [r4, #12]
   e037c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e0380:	9204      	str	r2, [sp, #16]
   e0382:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   e0384:	4b0a      	ldr	r3, [pc, #40]	; (e03b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   e0386:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e0388:	4b0a      	ldr	r3, [pc, #40]	; (e03b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e038a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   e038c:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e038e:	a801      	add	r0, sp, #4
   e0390:	f7ff fcb3 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e0394:	2200      	movs	r2, #0
   e0396:	4629      	mov	r1, r5
   e0398:	4807      	ldr	r0, [pc, #28]	; (e03b8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   e039a:	f7fe fe77 	bl	df08c <application_thread_invoke>
   e039e:	4630      	mov	r0, r6
   e03a0:	f7ff fcab 	bl	dfcfa <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   e03a4:	2110      	movs	r1, #16
   e03a6:	4630      	mov	r0, r6
   e03a8:	f000 ffe6 	bl	e1378 <_ZdlPvj>
        }
    }
   e03ac:	b007      	add	sp, #28
   e03ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e03b0:	000dfff7 	.word	0x000dfff7
   e03b4:	000e02c5 	.word	0x000e02c5
   e03b8:	000e077d 	.word	0x000e077d

000e03bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   e03bc:	b530      	push	{r4, r5, lr}
   e03be:	b085      	sub	sp, #20
   e03c0:	4604      	mov	r4, r0
   e03c2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   e03c4:	4668      	mov	r0, sp
   e03c6:	4611      	mov	r1, r2
   e03c8:	f7ff fdc9 	bl	dff5e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   e03cc:	b17c      	cbz	r4, e03ee <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   e03ce:	b224      	sxth	r4, r4
   e03d0:	4628      	mov	r0, r5
   e03d2:	b10d      	cbz	r5, e03d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   e03d4:	f001 ff82 	bl	e22dc <strdup>
   e03d8:	9002      	str	r0, [sp, #8]
   e03da:	a902      	add	r1, sp, #8
   e03dc:	4668      	mov	r0, sp
   e03de:	f8ad 400c 	strh.w	r4, [sp, #12]
   e03e2:	f7ff fe1f 	bl	e0024 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e03e6:	a802      	add	r0, sp, #8
   e03e8:	f7ff fd7e 	bl	dfee8 <_ZN8particle5ErrorD1Ev>
   e03ec:	e01d      	b.n	e042a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   e03ee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   e03f0:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   e03f4:	f04f 0201 	mov.w	r2, #1
   e03f8:	e8d0 3f4f 	ldrexb	r3, [r0]
   e03fc:	42a3      	cmp	r3, r4
   e03fe:	d103      	bne.n	e0408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   e0400:	e8c0 2f41 	strexb	r1, r2, [r0]
   e0404:	2900      	cmp	r1, #0
   e0406:	d1f7      	bne.n	e03f8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   e0408:	d002      	beq.n	e0410 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   e040a:	f88d 3008 	strb.w	r3, [sp, #8]
   e040e:	e00c      	b.n	e042a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   e0410:	f110 010c 	adds.w	r1, r0, #12
   e0414:	f04f 0301 	mov.w	r3, #1
   e0418:	bf18      	it	ne
   e041a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e041c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   e0420:	3004      	adds	r0, #4
   e0422:	f800 3c03 	strb.w	r3, [r0, #-3]
   e0426:	f7ff ff71 	bl	e030c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   e042a:	a801      	add	r0, sp, #4
   e042c:	f7fc ff10 	bl	dd250 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   e0430:	b005      	add	sp, #20
   e0432:	bd30      	pop	{r4, r5, pc}

000e0434 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e0434:	4770      	bx	lr

000e0436 <_ZN9IPAddressD0Ev>:
   e0436:	b510      	push	{r4, lr}
   e0438:	2118      	movs	r1, #24
   e043a:	4604      	mov	r4, r0
   e043c:	f000 ff9c 	bl	e1378 <_ZdlPvj>
   e0440:	4620      	mov	r0, r4
   e0442:	bd10      	pop	{r4, pc}

000e0444 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e0444:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e0446:	7d03      	ldrb	r3, [r0, #20]
   e0448:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e044a:	b08d      	sub	sp, #52	; 0x34
   e044c:	460e      	mov	r6, r1
   e044e:	f100 0704 	add.w	r7, r0, #4
   e0452:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e0456:	d002      	beq.n	e045e <_ZNK9IPAddress7printToER5Print+0x1a>
   e0458:	f100 0508 	add.w	r5, r0, #8
   e045c:	e018      	b.n	e0490 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e045e:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e0460:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e0462:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e0466:	232f      	movs	r3, #47	; 0x2f
   e0468:	462a      	mov	r2, r5
   e046a:	200a      	movs	r0, #10
   e046c:	f7fe fc9e 	bl	dedac <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e0470:	4628      	mov	r0, r5
   e0472:	f001 ff4e 	bl	e2312 <strlen>
   e0476:	6833      	ldr	r3, [r6, #0]
   e0478:	4602      	mov	r2, r0
   e047a:	68db      	ldr	r3, [r3, #12]
   e047c:	4629      	mov	r1, r5
   e047e:	4630      	mov	r0, r6
   e0480:	4798      	blx	r3
   e0482:	e00f      	b.n	e04a4 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e0484:	b124      	cbz	r4, e0490 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e0486:	212e      	movs	r1, #46	; 0x2e
   e0488:	4630      	mov	r0, r6
   e048a:	f7ff fb57 	bl	dfb3c <_ZN5Print5printEc>
   e048e:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e0490:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e0494:	220a      	movs	r2, #10
   e0496:	4630      	mov	r0, r6
   e0498:	f7ff fb53 	bl	dfb42 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e049c:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e049e:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e04a0:	d1f0      	bne.n	e0484 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e04a2:	4620      	mov	r0, r4
    }
    return n;
}
   e04a4:	b00d      	add	sp, #52	; 0x34
   e04a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e04a8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e04a8:	b510      	push	{r4, lr}
   e04aa:	4b05      	ldr	r3, [pc, #20]	; (e04c0 <_ZN9IPAddressC1Ev+0x18>)
   e04ac:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e04ae:	2211      	movs	r2, #17
   e04b0:	f840 3b04 	str.w	r3, [r0], #4
   e04b4:	2100      	movs	r1, #0
   e04b6:	f001 fecf 	bl	e2258 <memset>
{
    clear();
}
   e04ba:	4620      	mov	r0, r4
   e04bc:	bd10      	pop	{r4, pc}
   e04be:	bf00      	nop
   e04c0:	000e4838 	.word	0x000e4838

000e04c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e04c4:	4603      	mov	r3, r0
   e04c6:	4a07      	ldr	r2, [pc, #28]	; (e04e4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e04c8:	b510      	push	{r4, lr}
   e04ca:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e04ce:	f101 0210 	add.w	r2, r1, #16
   e04d2:	f851 4b04 	ldr.w	r4, [r1], #4
   e04d6:	f843 4b04 	str.w	r4, [r3], #4
   e04da:	4291      	cmp	r1, r2
   e04dc:	d1f9      	bne.n	e04d2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e04de:	780a      	ldrb	r2, [r1, #0]
   e04e0:	701a      	strb	r2, [r3, #0]
}
   e04e2:	bd10      	pop	{r4, pc}
   e04e4:	000e4838 	.word	0x000e4838

000e04e8 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e04e8:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e04ea:	2b04      	cmp	r3, #4
   e04ec:	d101      	bne.n	e04f2 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e04ee:	6840      	ldr	r0, [r0, #4]
   e04f0:	e008      	b.n	e0504 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e04f2:	2b06      	cmp	r3, #6
   e04f4:	d10a      	bne.n	e050c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e04f6:	6843      	ldr	r3, [r0, #4]
   e04f8:	b953      	cbnz	r3, e0510 <_ZNK9IPAddresscvbEv+0x28>
   e04fa:	6883      	ldr	r3, [r0, #8]
   e04fc:	b943      	cbnz	r3, e0510 <_ZNK9IPAddresscvbEv+0x28>
   e04fe:	68c3      	ldr	r3, [r0, #12]
   e0500:	b933      	cbnz	r3, e0510 <_ZNK9IPAddresscvbEv+0x28>
   e0502:	6900      	ldr	r0, [r0, #16]
   e0504:	3000      	adds	r0, #0
   e0506:	bf18      	it	ne
   e0508:	2001      	movne	r0, #1
   e050a:	4770      	bx	lr
    } else {
        return false;
   e050c:	2000      	movs	r0, #0
   e050e:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e0510:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e0512:	4770      	bx	lr

000e0514 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e0514:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e0516:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e051a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e051e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e0522:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e0526:	2304      	movs	r3, #4
   e0528:	6041      	str	r1, [r0, #4]
   e052a:	7503      	strb	r3, [r0, #20]
   e052c:	bd10      	pop	{r4, pc}

000e052e <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e052e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e0530:	780d      	ldrb	r5, [r1, #0]
   e0532:	788b      	ldrb	r3, [r1, #2]
   e0534:	784a      	ldrb	r2, [r1, #1]
   e0536:	78c9      	ldrb	r1, [r1, #3]
   e0538:	9100      	str	r1, [sp, #0]
   e053a:	4629      	mov	r1, r5
   e053c:	f7ff ffea 	bl	e0514 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e0540:	b003      	add	sp, #12
   e0542:	bd30      	pop	{r4, r5, pc}

000e0544 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e0544:	7441      	strb	r1, [r0, #17]
   e0546:	4770      	bx	lr

000e0548 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e0548:	4770      	bx	lr

000e054a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e054a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e054c:	2100      	movs	r1, #0
   e054e:	7c00      	ldrb	r0, [r0, #16]
   e0550:	f7fe fd24 	bl	def9c <HAL_USB_USART_Receive_Data>
}
   e0554:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e0558:	bf28      	it	cs
   e055a:	f04f 30ff 	movcs.w	r0, #4294967295
   e055e:	bd08      	pop	{r3, pc}

000e0560 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e0560:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e0562:	2101      	movs	r1, #1
   e0564:	7c00      	ldrb	r0, [r0, #16]
   e0566:	f7fe fd19 	bl	def9c <HAL_USB_USART_Receive_Data>
}
   e056a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e056e:	bf28      	it	cs
   e0570:	f04f 30ff 	movcs.w	r0, #4294967295
   e0574:	bd08      	pop	{r3, pc}

000e0576 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e0576:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e0578:	7c00      	ldrb	r0, [r0, #16]
   e057a:	f7fe fd07 	bl	def8c <HAL_USB_USART_Available_Data_For_Write>
}
   e057e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e0582:	bd08      	pop	{r3, pc}

000e0584 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e0584:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e0586:	7c00      	ldrb	r0, [r0, #16]
   e0588:	f7fe fcf8 	bl	def7c <HAL_USB_USART_Available_Data>
}
   e058c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e0590:	bd08      	pop	{r3, pc}

000e0592 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e0592:	7c00      	ldrb	r0, [r0, #16]
   e0594:	f7fe bd12 	b.w	defbc <HAL_USB_USART_Flush_Data>

000e0598 <_ZN9USBSerialD0Ev>:
   e0598:	b510      	push	{r4, lr}
   e059a:	2114      	movs	r1, #20
   e059c:	4604      	mov	r4, r0
   e059e:	f000 feeb 	bl	e1378 <_ZdlPvj>
   e05a2:	4620      	mov	r0, r4
   e05a4:	bd10      	pop	{r4, pc}

000e05a6 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e05a6:	b538      	push	{r3, r4, r5, lr}
   e05a8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e05aa:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e05ac:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e05ae:	f7fe fced 	bl	def8c <HAL_USB_USART_Available_Data_For_Write>
   e05b2:	2800      	cmp	r0, #0
   e05b4:	dc01      	bgt.n	e05ba <_ZN9USBSerial5writeEh+0x14>
   e05b6:	7c60      	ldrb	r0, [r4, #17]
   e05b8:	b128      	cbz	r0, e05c6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e05ba:	4629      	mov	r1, r5
   e05bc:	7c20      	ldrb	r0, [r4, #16]
   e05be:	f7fe fcf5 	bl	defac <HAL_USB_USART_Send_Data>
   e05c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e05c6:	bd38      	pop	{r3, r4, r5, pc}

000e05c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e05c8:	b510      	push	{r4, lr}
   e05ca:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e05cc:	2300      	movs	r3, #0
   e05ce:	6063      	str	r3, [r4, #4]
   e05d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e05d4:	60a3      	str	r3, [r4, #8]
   e05d6:	4b05      	ldr	r3, [pc, #20]	; (e05ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e05d8:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e05da:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e05dc:	4608      	mov	r0, r1
{
  _serial = serial;
   e05de:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e05e0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e05e2:	4611      	mov	r1, r2
   e05e4:	f7fe fcc2 	bl	def6c <HAL_USB_USART_Init>
}
   e05e8:	4620      	mov	r0, r4
   e05ea:	bd10      	pop	{r4, pc}
   e05ec:	000e484c 	.word	0x000e484c

000e05f0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e05f0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e05f2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e05f4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e05f6:	2100      	movs	r1, #0
   e05f8:	f001 fe2e 	bl	e2258 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e05fc:	4620      	mov	r0, r4
   e05fe:	bd10      	pop	{r4, pc}

000e0600 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e0600:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e0602:	4d0e      	ldr	r5, [pc, #56]	; (e063c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e0604:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e0606:	a801      	add	r0, sp, #4
   e0608:	f7ff fff2 	bl	e05f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e060c:	6829      	ldr	r1, [r5, #0]
   e060e:	f011 0401 	ands.w	r4, r1, #1
   e0612:	d110      	bne.n	e0636 <_Z16_fetch_usbserialv+0x36>
   e0614:	4628      	mov	r0, r5
   e0616:	f7f3 fd48 	bl	d40aa <__cxa_guard_acquire>
   e061a:	b160      	cbz	r0, e0636 <_Z16_fetch_usbserialv+0x36>
   e061c:	aa01      	add	r2, sp, #4
   e061e:	4621      	mov	r1, r4
   e0620:	4807      	ldr	r0, [pc, #28]	; (e0640 <_Z16_fetch_usbserialv+0x40>)
   e0622:	f7ff ffd1 	bl	e05c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e0626:	4628      	mov	r0, r5
   e0628:	f7f3 fd44 	bl	d40b4 <__cxa_guard_release>
   e062c:	4a05      	ldr	r2, [pc, #20]	; (e0644 <_Z16_fetch_usbserialv+0x44>)
   e062e:	4906      	ldr	r1, [pc, #24]	; (e0648 <_Z16_fetch_usbserialv+0x48>)
   e0630:	4803      	ldr	r0, [pc, #12]	; (e0640 <_Z16_fetch_usbserialv+0x40>)
   e0632:	f000 fe93 	bl	e135c <__aeabi_atexit>
	return _usbserial;
}
   e0636:	4802      	ldr	r0, [pc, #8]	; (e0640 <_Z16_fetch_usbserialv+0x40>)
   e0638:	b007      	add	sp, #28
   e063a:	bd30      	pop	{r4, r5, pc}
   e063c:	2003e3d8 	.word	0x2003e3d8
   e0640:	2003e3dc 	.word	0x2003e3dc
   e0644:	2003e2e8 	.word	0x2003e2e8
   e0648:	000e0549 	.word	0x000e0549

000e064c <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e064e:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e0650:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e0652:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e0654:	460e      	mov	r6, r1
   e0656:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e0658:	f000 fda2 	bl	e11a0 <pinAvailable>
   e065c:	b160      	cbz	r0, e0678 <tone+0x2c>
   e065e:	2102      	movs	r1, #2
   e0660:	4628      	mov	r0, r5
   e0662:	f7fe faa3 	bl	debac <HAL_Validate_Pin_Function>
   e0666:	2802      	cmp	r0, #2
   e0668:	d106      	bne.n	e0678 <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   e066a:	463a      	mov	r2, r7
   e066c:	4631      	mov	r1, r6
   e066e:	4620      	mov	r0, r4
    }
}
   e0670:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   e0674:	f7fe bc72 	b.w	def5c <HAL_Tone_Start>
   e0678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e067a <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e067a:	4770      	bx	lr

000e067c <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e067c:	7441      	strb	r1, [r0, #17]
   e067e:	4770      	bx	lr

000e0680 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e0680:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e0682:	7c00      	ldrb	r0, [r0, #16]
   e0684:	f7fe fbf2 	bl	dee6c <HAL_USART_Available_Data_For_Write>
}
   e0688:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e068c:	bd08      	pop	{r3, pc}

000e068e <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e068e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e0690:	7c00      	ldrb	r0, [r0, #16]
   e0692:	f7fe fbc3 	bl	dee1c <HAL_USART_Available_Data>
}
   e0696:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e069a:	bd08      	pop	{r3, pc}

000e069c <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e069c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e069e:	7c00      	ldrb	r0, [r0, #16]
   e06a0:	f7fe fbcc 	bl	dee3c <HAL_USART_Peek_Data>
}
   e06a4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e06a8:	bf28      	it	cs
   e06aa:	f04f 30ff 	movcs.w	r0, #4294967295
   e06ae:	bd08      	pop	{r3, pc}

000e06b0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e06b0:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e06b2:	7c00      	ldrb	r0, [r0, #16]
   e06b4:	f7fe fbba 	bl	dee2c <HAL_USART_Read_Data>
}
   e06b8:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e06bc:	bf28      	it	cs
   e06be:	f04f 30ff 	movcs.w	r0, #4294967295
   e06c2:	bd08      	pop	{r3, pc}

000e06c4 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e06c4:	7c00      	ldrb	r0, [r0, #16]
   e06c6:	f7fe bbc1 	b.w	dee4c <HAL_USART_Flush_Data>

000e06ca <_ZN11USARTSerialD0Ev>:
   e06ca:	b510      	push	{r4, lr}
   e06cc:	2114      	movs	r1, #20
   e06ce:	4604      	mov	r4, r0
   e06d0:	f000 fe52 	bl	e1378 <_ZdlPvj>
   e06d4:	4620      	mov	r0, r4
   e06d6:	bd10      	pop	{r4, pc}

000e06d8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e06d8:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e06da:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e06dc:	4604      	mov	r4, r0
   e06de:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e06e0:	b925      	cbnz	r5, e06ec <_ZN11USARTSerial5writeEh+0x14>
   e06e2:	7c00      	ldrb	r0, [r0, #16]
   e06e4:	f7fe fbc2 	bl	dee6c <HAL_USART_Available_Data_For_Write>
   e06e8:	2800      	cmp	r0, #0
   e06ea:	dd05      	ble.n	e06f8 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e06ec:	4631      	mov	r1, r6
   e06ee:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e06f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e06f4:	f7fe bb8a 	b.w	dee0c <HAL_USART_Write_Data>
  }
  return 0;
}
   e06f8:	4628      	mov	r0, r5
   e06fa:	bd70      	pop	{r4, r5, r6, pc}

000e06fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e06fc:	b510      	push	{r4, lr}
   e06fe:	4604      	mov	r4, r0
   e0700:	4608      	mov	r0, r1
   e0702:	4611      	mov	r1, r2
   e0704:	2200      	movs	r2, #0
   e0706:	6062      	str	r2, [r4, #4]
   e0708:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e070c:	60a2      	str	r2, [r4, #8]
   e070e:	4a05      	ldr	r2, [pc, #20]	; (e0724 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e0710:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e0712:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e0714:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e0716:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e0718:	461a      	mov	r2, r3
   e071a:	f7fe fb6f 	bl	dedfc <HAL_USART_Init>
}
   e071e:	4620      	mov	r0, r4
   e0720:	bd10      	pop	{r4, pc}
   e0722:	bf00      	nop
   e0724:	000e487c 	.word	0x000e487c

000e0728 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   e0728:	7c00      	ldrb	r0, [r0, #16]
   e072a:	f7fe bb97 	b.w	dee5c <HAL_USART_Is_Enabled>
	...

000e0730 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e0730:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e0732:	4d0c      	ldr	r5, [pc, #48]	; (e0764 <_Z22__fetch_global_Serial1v+0x34>)
   e0734:	6829      	ldr	r1, [r5, #0]
   e0736:	f011 0401 	ands.w	r4, r1, #1
   e073a:	d111      	bne.n	e0760 <_Z22__fetch_global_Serial1v+0x30>
   e073c:	4628      	mov	r0, r5
   e073e:	f7f3 fcb4 	bl	d40aa <__cxa_guard_acquire>
   e0742:	b168      	cbz	r0, e0760 <_Z22__fetch_global_Serial1v+0x30>
   e0744:	4a08      	ldr	r2, [pc, #32]	; (e0768 <_Z22__fetch_global_Serial1v+0x38>)
   e0746:	4b09      	ldr	r3, [pc, #36]	; (e076c <_Z22__fetch_global_Serial1v+0x3c>)
   e0748:	4809      	ldr	r0, [pc, #36]	; (e0770 <_Z22__fetch_global_Serial1v+0x40>)
   e074a:	4621      	mov	r1, r4
   e074c:	f7ff ffd6 	bl	e06fc <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e0750:	4628      	mov	r0, r5
   e0752:	f7f3 fcaf 	bl	d40b4 <__cxa_guard_release>
   e0756:	4a07      	ldr	r2, [pc, #28]	; (e0774 <_Z22__fetch_global_Serial1v+0x44>)
   e0758:	4907      	ldr	r1, [pc, #28]	; (e0778 <_Z22__fetch_global_Serial1v+0x48>)
   e075a:	4805      	ldr	r0, [pc, #20]	; (e0770 <_Z22__fetch_global_Serial1v+0x40>)
   e075c:	f000 fdfe 	bl	e135c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e0760:	4803      	ldr	r0, [pc, #12]	; (e0770 <_Z22__fetch_global_Serial1v+0x40>)
   e0762:	bd38      	pop	{r3, r4, r5, pc}
   e0764:	2003e488 	.word	0x2003e488
   e0768:	2003e48c 	.word	0x2003e48c
   e076c:	2003e404 	.word	0x2003e404
   e0770:	2003e3f0 	.word	0x2003e3f0
   e0774:	2003e2e8 	.word	0x2003e2e8
   e0778:	000e067b 	.word	0x000e067b

000e077c <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   e077c:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e077e:	6883      	ldr	r3, [r0, #8]
   e0780:	4604      	mov	r4, r0
   e0782:	b90b      	cbnz	r3, e0788 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   e0784:	f000 fe0b 	bl	e139e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e0788:	68c3      	ldr	r3, [r0, #12]
   e078a:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e078c:	68a3      	ldr	r3, [r4, #8]
   e078e:	b11b      	cbz	r3, e0798 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e0790:	2203      	movs	r2, #3
   e0792:	4621      	mov	r1, r4
   e0794:	4620      	mov	r0, r4
   e0796:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e0798:	4620      	mov	r0, r4
   e079a:	2110      	movs	r1, #16
}
   e079c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e07a0:	f000 bdea 	b.w	e1378 <_ZdlPvj>

000e07a4 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   e07a4:	4770      	bx	lr

000e07a6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e07a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e07a8:	4606      	mov	r6, r0
   e07aa:	4615      	mov	r5, r2
   e07ac:	460c      	mov	r4, r1
   e07ae:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e07b0:	42bc      	cmp	r4, r7
   e07b2:	d006      	beq.n	e07c2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e07b4:	6833      	ldr	r3, [r6, #0]
   e07b6:	f814 1b01 	ldrb.w	r1, [r4], #1
   e07ba:	689b      	ldr	r3, [r3, #8]
   e07bc:	4630      	mov	r0, r6
   e07be:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e07c0:	e7f6      	b.n	e07b0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   e07c2:	4628      	mov	r0, r5
   e07c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e07c6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   e07c6:	2200      	movs	r2, #0
   e07c8:	7c00      	ldrb	r0, [r0, #16]
   e07ca:	f7fe bb5f 	b.w	dee8c <HAL_I2C_Write_Data>

000e07ce <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   e07ce:	2100      	movs	r1, #0
   e07d0:	7c00      	ldrb	r0, [r0, #16]
   e07d2:	f7fe bb63 	b.w	dee9c <HAL_I2C_Available_Data>

000e07d6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   e07d6:	2100      	movs	r1, #0
   e07d8:	7c00      	ldrb	r0, [r0, #16]
   e07da:	f7fe bb67 	b.w	deeac <HAL_I2C_Read_Data>

000e07de <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   e07de:	2100      	movs	r1, #0
   e07e0:	7c00      	ldrb	r0, [r0, #16]
   e07e2:	f7fe bb6b 	b.w	deebc <HAL_I2C_Peek_Data>

000e07e6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   e07e6:	2100      	movs	r1, #0
   e07e8:	7c00      	ldrb	r0, [r0, #16]
   e07ea:	f7fe bb6f 	b.w	deecc <HAL_I2C_Flush_Data>

000e07ee <_ZN7TwoWireD0Ev>:
   e07ee:	b510      	push	{r4, lr}
   e07f0:	2114      	movs	r1, #20
   e07f2:	4604      	mov	r4, r0
   e07f4:	f000 fdc0 	bl	e1378 <_ZdlPvj>
   e07f8:	4620      	mov	r0, r4
   e07fa:	bd10      	pop	{r4, pc}

000e07fc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e07fc:	b510      	push	{r4, lr}
   e07fe:	4604      	mov	r4, r0
   e0800:	2300      	movs	r3, #0
   e0802:	6063      	str	r3, [r4, #4]
   e0804:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e0808:	60a3      	str	r3, [r4, #8]
   e080a:	4b04      	ldr	r3, [pc, #16]	; (e081c <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   e080c:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e080e:	4608      	mov	r0, r1
   e0810:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   e0812:	4611      	mov	r1, r2
   e0814:	f7fe fb6a 	bl	deeec <HAL_I2C_Init>
}
   e0818:	4620      	mov	r0, r4
   e081a:	bd10      	pop	{r4, pc}
   e081c:	000e48ac 	.word	0x000e48ac

000e0820 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   e0820:	2100      	movs	r1, #0
   e0822:	7c00      	ldrb	r0, [r0, #16]
   e0824:	f7fe bb5a 	b.w	deedc <HAL_I2C_Is_Enabled>

000e0828 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   e0828:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   e082a:	2301      	movs	r3, #1
   e082c:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   e082e:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   e0830:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   e0832:	b10b      	cbz	r3, e0838 <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   e0834:	68c0      	ldr	r0, [r0, #12]
   e0836:	e006      	b.n	e0846 <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0838:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   e083a:	b128      	cbz	r0, e0848 <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e083c:	6883      	ldr	r3, [r0, #8]
   e083e:	b90b      	cbnz	r3, e0844 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   e0840:	f000 fdad 	bl	e139e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e0844:	68c3      	ldr	r3, [r0, #12]
   e0846:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   e0848:	2301      	movs	r3, #1
   e084a:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   e084c:	2000      	movs	r0, #0
    }
   e084e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   e0852:	f7fe baa3 	b.w	ded9c <os_thread_exit>

000e0856 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e0856:	2200      	movs	r2, #0
   e0858:	4611      	mov	r1, r2
   e085a:	6840      	ldr	r0, [r0, #4]
   e085c:	f7fe bc84 	b.w	df168 <network_listening>

000e0860 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e0860:	2200      	movs	r2, #0
   e0862:	4611      	mov	r1, r2
   e0864:	6840      	ldr	r0, [r0, #4]
   e0866:	f7fe bc8f 	b.w	df188 <network_get_listen_timeout>

000e086a <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e086a:	2200      	movs	r2, #0
   e086c:	6840      	ldr	r0, [r0, #4]
   e086e:	f7fe bc83 	b.w	df178 <network_set_listen_timeout>

000e0872 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e0872:	2200      	movs	r2, #0
   e0874:	f081 0101 	eor.w	r1, r1, #1
   e0878:	6840      	ldr	r0, [r0, #4]
   e087a:	f7fe bc6d 	b.w	df158 <network_listen>

000e087e <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   e087e:	2300      	movs	r3, #0
   e0880:	461a      	mov	r2, r3
   e0882:	2101      	movs	r1, #1
   e0884:	6840      	ldr	r0, [r0, #4]
   e0886:	f7fe bc5f 	b.w	df148 <network_off>

000e088a <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e088a:	2300      	movs	r3, #0
   e088c:	461a      	mov	r2, r3
   e088e:	4619      	mov	r1, r3
   e0890:	6840      	ldr	r0, [r0, #4]
   e0892:	f7fe bc51 	b.w	df138 <network_on>

000e0896 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e0896:	2200      	movs	r2, #0
   e0898:	4611      	mov	r1, r2
   e089a:	6840      	ldr	r0, [r0, #4]
   e089c:	f7fe bc44 	b.w	df128 <network_ready>

000e08a0 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e08a0:	2200      	movs	r2, #0
   e08a2:	4611      	mov	r1, r2
   e08a4:	6840      	ldr	r0, [r0, #4]
   e08a6:	f7fe bc2f 	b.w	df108 <network_connecting>

000e08aa <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e08aa:	2200      	movs	r2, #0
   e08ac:	2102      	movs	r1, #2
   e08ae:	6840      	ldr	r0, [r0, #4]
   e08b0:	f7fe bc32 	b.w	df118 <network_disconnect>

000e08b4 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e08b4:	2300      	movs	r3, #0
   e08b6:	461a      	mov	r2, r3
   e08b8:	6840      	ldr	r0, [r0, #4]
   e08ba:	f7fe bc1d 	b.w	df0f8 <network_connect>

000e08be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e08be:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e08c0:	4605      	mov	r5, r0
   e08c2:	b188      	cbz	r0, e08e8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e08c4:	6804      	ldr	r4, [r0, #0]
   e08c6:	b14c      	cbz	r4, e08dc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e08c8:	68a3      	ldr	r3, [r4, #8]
   e08ca:	b11b      	cbz	r3, e08d4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e08cc:	2203      	movs	r2, #3
   e08ce:	4621      	mov	r1, r4
   e08d0:	4620      	mov	r0, r4
   e08d2:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e08d4:	2110      	movs	r1, #16
   e08d6:	4620      	mov	r0, r4
   e08d8:	f000 fd4e 	bl	e1378 <_ZdlPvj>
   e08dc:	4628      	mov	r0, r5
   e08de:	2114      	movs	r1, #20
      }
   e08e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e08e4:	f000 bd48 	b.w	e1378 <_ZdlPvj>
   e08e8:	bd38      	pop	{r3, r4, r5, pc}

000e08ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   e08ea:	b110      	cbz	r0, e08f2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   e08ec:	6803      	ldr	r3, [r0, #0]
   e08ee:	685b      	ldr	r3, [r3, #4]
   e08f0:	4718      	bx	r3
   e08f2:	4770      	bx	lr

000e08f4 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e08f4:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e08f6:	6803      	ldr	r3, [r0, #0]
   e08f8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e08fa:	b1bb      	cbz	r3, e092c <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e08fc:	6858      	ldr	r0, [r3, #4]
   e08fe:	f7fe fa15 	bl	ded2c <os_thread_is_current>
   e0902:	b978      	cbnz	r0, e0924 <_ZN6ThreadD1Ev+0x30>
   e0904:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e0906:	7c5a      	ldrb	r2, [r3, #17]
   e0908:	b912      	cbnz	r2, e0910 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e090a:	6858      	ldr	r0, [r3, #4]
   e090c:	f7fe fa16 	bl	ded3c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e0910:	6823      	ldr	r3, [r4, #0]
   e0912:	6858      	ldr	r0, [r3, #4]
   e0914:	f7fe fa1a 	bl	ded4c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0918:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e091a:	2300      	movs	r3, #0
   e091c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e091e:	b128      	cbz	r0, e092c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e0920:	f7ff ffcd 	bl	e08be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0924:	6820      	ldr	r0, [r4, #0]
   e0926:	b108      	cbz	r0, e092c <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e0928:	f7ff ffc9 	bl	e08be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   e092c:	4620      	mov	r0, r4
   e092e:	bd10      	pop	{r4, pc}

000e0930 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   e0930:	b538      	push	{r3, r4, r5, lr}
   e0932:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0934:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   e0938:	b108      	cbz	r0, e093e <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e093a:	f7f3 fbb4 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e093e:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   e0942:	b108      	cbz	r0, e0948 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   e0944:	f7fe fa12 	bl	ded6c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0948:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   e094c:	b135      	cbz	r5, e095c <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e094e:	4628      	mov	r0, r5
   e0950:	f7ff ffd0 	bl	e08f4 <_ZN6ThreadD1Ev>
   e0954:	2104      	movs	r1, #4
   e0956:	4628      	mov	r0, r5
   e0958:	f000 fd0e 	bl	e1378 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e095c:	6820      	ldr	r0, [r4, #0]
   e095e:	b108      	cbz	r0, e0964 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   e0960:	f7ff ffc3 	bl	e08ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0964:	4620      	mov	r0, r4
   e0966:	bd38      	pop	{r3, r4, r5, pc}

000e0968 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   e0968:	b510      	push	{r4, lr}
   e096a:	4b04      	ldr	r3, [pc, #16]	; (e097c <_ZN5spark9MeshClassD1Ev+0x14>)
   e096c:	4604      	mov	r4, r0
   e096e:	f840 3b08 	str.w	r3, [r0], #8
   e0972:	f7ff ffdd 	bl	e0930 <_ZN5spark11MeshPublishD1Ev>
   e0976:	4620      	mov	r0, r4
   e0978:	bd10      	pop	{r4, pc}
   e097a:	bf00      	nop
   e097c:	000e48d4 	.word	0x000e48d4

000e0980 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e0980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0984:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e0986:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   e098a:	4606      	mov	r6, r0
   e098c:	4688      	mov	r8, r1
   e098e:	4691      	mov	r9, r2
   e0990:	469a      	mov	sl, r3
   e0992:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e0994:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   e0996:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0998:	454b      	cmp	r3, r9
   e099a:	d129      	bne.n	e09f0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   e099c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e099e:	4553      	cmp	r3, sl
   e09a0:	d126      	bne.n	e09f0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   e09a2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   e09a6:	455b      	cmp	r3, fp
   e09a8:	d122      	bne.n	e09f0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e09aa:	2140      	movs	r1, #64	; 0x40
   e09ac:	4640      	mov	r0, r8
   e09ae:	f001 fccd 	bl	e234c <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   e09b2:	4641      	mov	r1, r8
   e09b4:	4602      	mov	r2, r0
   e09b6:	4620      	mov	r0, r4
   e09b8:	f001 fcb3 	bl	e2322 <strncmp>
   e09bc:	b9c0      	cbnz	r0, e09f0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   e09be:	b16f      	cbz	r7, e09dc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   e09c0:	210c      	movs	r1, #12
   e09c2:	4638      	mov	r0, r7
   e09c4:	f001 fcc2 	bl	e234c <strnlen>
                if (id_len)
   e09c8:	4602      	mov	r2, r0
   e09ca:	b138      	cbz	r0, e09dc <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   e09cc:	2358      	movs	r3, #88	; 0x58
   e09ce:	fb03 6005 	mla	r0, r3, r5, r6
   e09d2:	4639      	mov	r1, r7
   e09d4:	3049      	adds	r0, #73	; 0x49
   e09d6:	f001 fca4 	bl	e2322 <strncmp>
   e09da:	e004      	b.n	e09e6 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   e09dc:	2058      	movs	r0, #88	; 0x58
   e09de:	fb00 6505 	mla	r5, r0, r5, r6
   e09e2:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   e09e6:	fab0 f080 	clz	r0, r0
   e09ea:	0940      	lsrs	r0, r0, #5
   e09ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e09f0:	3501      	adds	r5, #1
   e09f2:	2d05      	cmp	r5, #5
   e09f4:	f104 0458 	add.w	r4, r4, #88	; 0x58
   e09f8:	d1cd      	bne.n	e0996 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   e09fa:	2000      	movs	r0, #0
}
   e09fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e0a00 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e0a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0a04:	b085      	sub	sp, #20
   e0a06:	4607      	mov	r7, r0
   e0a08:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   e0a0c:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   e0a0e:	9601      	str	r6, [sp, #4]
   e0a10:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e0a14:	4689      	mov	r9, r1
   e0a16:	9202      	str	r2, [sp, #8]
   e0a18:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   e0a1a:	f7ff ffb1 	bl	e0980 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   e0a1e:	2800      	cmp	r0, #0
   e0a20:	d13c      	bne.n	e0a9c <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   e0a22:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   e0a24:	2358      	movs	r3, #88	; 0x58
   e0a26:	fb03 7504 	mla	r5, r3, r4, r7
   e0a2a:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   e0a2e:	f1b8 0f00 	cmp.w	r8, #0
   e0a32:	d12e      	bne.n	e0a92 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e0a34:	2140      	movs	r1, #64	; 0x40
   e0a36:	4648      	mov	r0, r9
   e0a38:	f001 fc88 	bl	e234c <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   e0a3c:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e0a3e:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   e0a40:	4602      	mov	r2, r0
   e0a42:	4628      	mov	r0, r5
   e0a44:	f001 fbfd 	bl	e2242 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   e0a48:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   e0a4c:	4641      	mov	r1, r8
   e0a4e:	eb05 000b 	add.w	r0, r5, fp
   e0a52:	f001 fc01 	bl	e2258 <memset>
            event_handlers[i].handler = handler;
   e0a56:	9b02      	ldr	r3, [sp, #8]
   e0a58:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   e0a5a:	9b03      	ldr	r3, [sp, #12]
   e0a5c:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   e0a5e:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   e0a62:	b12e      	cbz	r6, e0a70 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   e0a64:	210c      	movs	r1, #12
   e0a66:	4630      	mov	r0, r6
   e0a68:	f001 fc70 	bl	e234c <strnlen>
   e0a6c:	4605      	mov	r5, r0
   e0a6e:	e000      	b.n	e0a72 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   e0a70:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   e0a72:	2058      	movs	r0, #88	; 0x58
   e0a74:	4344      	muls	r4, r0
   e0a76:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   e0a78:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   e0a7a:	462a      	mov	r2, r5
   e0a7c:	4631      	mov	r1, r6
   e0a7e:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   e0a80:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   e0a82:	f001 fbde 	bl	e2242 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   e0a86:	2000      	movs	r0, #0
   e0a88:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   e0a8c:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   e0a90:	e005      	b.n	e0a9e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e0a92:	3401      	adds	r4, #1
   e0a94:	2c05      	cmp	r4, #5
   e0a96:	d1c6      	bne.n	e0a26 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   e0a98:	4802      	ldr	r0, [pc, #8]	; (e0aa4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   e0a9a:	e000      	b.n	e0a9e <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   e0a9c:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   e0a9e:	b005      	add	sp, #20
   e0aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0aa4:	fffffefc 	.word	0xfffffefc

000e0aa8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   e0aa8:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   e0aaa:	2300      	movs	r3, #0
   e0aac:	9301      	str	r3, [sp, #4]
   e0aae:	9300      	str	r3, [sp, #0]
   e0ab0:	f7ff ffa6 	bl	e0a00 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   e0ab4:	b003      	add	sp, #12
   e0ab6:	f85d fb04 	ldr.w	pc, [sp], #4

000e0aba <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   e0aba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   e0abe:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   e0ac0:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   e0ac2:	460d      	mov	r5, r1
   e0ac4:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   e0ac6:	f001 fc24 	bl	e2312 <strlen>
   e0aca:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   e0ace:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   e0ad0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e0ad2:	b1ab      	cbz	r3, e0b00 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   e0ad4:	2140      	movs	r1, #64	; 0x40
   e0ad6:	4620      	mov	r0, r4
   e0ad8:	f001 fc38 	bl	e234c <strnlen>

        if (event_name_length < filter_length)
   e0adc:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   e0ade:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   e0ae0:	d30b      	bcc.n	e0afa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   e0ae2:	4629      	mov	r1, r5
   e0ae4:	4620      	mov	r0, r4
   e0ae6:	f001 fb9d 	bl	e2224 <memcmp>
        if (0 == cmp)
   e0aea:	b930      	cbnz	r0, e0afa <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   e0aec:	9000      	str	r0, [sp, #0]
   e0aee:	4643      	mov	r3, r8
   e0af0:	462a      	mov	r2, r5
   e0af2:	4621      	mov	r1, r4
   e0af4:	2058      	movs	r0, #88	; 0x58
   e0af6:	f7fe faed 	bl	df0d4 <system_invoke_event_handler>
   e0afa:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e0afc:	42b4      	cmp	r4, r6
   e0afe:	d1e7      	bne.n	e0ad0 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   e0b00:	b002      	add	sp, #8
   e0b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e0b08 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   e0b08:	b530      	push	{r4, r5, lr}
   e0b0a:	b08d      	sub	sp, #52	; 0x34
   e0b0c:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   e0b0e:	2211      	movs	r2, #17
   e0b10:	2100      	movs	r1, #0
   e0b12:	a801      	add	r0, sp, #4
   e0b14:	f001 fba0 	bl	e2258 <memset>
    addr.v = 6;
   e0b18:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e0b1a:	aa01      	add	r2, sp, #4
   e0b1c:	4909      	ldr	r1, [pc, #36]	; (e0b44 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   e0b1e:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e0b22:	200a      	movs	r0, #10
   e0b24:	f7fe f94a 	bl	dedbc <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e0b28:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   e0b2a:	a901      	add	r1, sp, #4
   e0b2c:	a806      	add	r0, sp, #24
   e0b2e:	f7ff fcc9 	bl	e04c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e0b32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0b34:	3404      	adds	r4, #4
   e0b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0b38:	682b      	ldr	r3, [r5, #0]
   e0b3a:	7023      	strb	r3, [r4, #0]
    return 0;
}
   e0b3c:	2000      	movs	r0, #0
   e0b3e:	b00d      	add	sp, #52	; 0x34
   e0b40:	bd30      	pop	{r4, r5, pc}
   e0b42:	bf00      	nop
   e0b44:	000e4900 	.word	0x000e4900

000e0b48 <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0b4c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   e0b4e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0b52:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   e0b54:	4630      	mov	r0, r6
   e0b56:	f7ff f814 	bl	dfb82 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0b5a:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e0b5c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0b60:	f7fe f914 	bl	ded8c <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   e0b64:	2c00      	cmp	r4, #0
   e0b66:	d063      	beq.n	e0c30 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   e0b68:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e0b6c:	b163      	cbz	r3, e0b88 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   e0b6e:	6823      	ldr	r3, [r4, #0]
   e0b70:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   e0b74:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   e0b76:	4620      	mov	r0, r4
   e0b78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e0b7c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   e0b80:	47b8      	blx	r7
        if (len > 0) {
   e0b82:	1e04      	subs	r4, r0, #0
   e0b84:	dc13      	bgt.n	e0bae <_ZN5spark11MeshPublish4pollEv+0x66>
   e0b86:	e056      	b.n	e0c36 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   e0b88:	492d      	ldr	r1, [pc, #180]	; (e0c40 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   e0b8a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   e0b8e:	f000 fbf5 	bl	e137c <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0b92:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   e0b96:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   e0b9a:	b113      	cbz	r3, e0ba2 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e0b9c:	4618      	mov	r0, r3
   e0b9e:	f7f3 fa82 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   e0ba2:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e0ba6:	2b00      	cmp	r3, #0
   e0ba8:	d1e1      	bne.n	e0b6e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   e0baa:	4826      	ldr	r0, [pc, #152]	; (e0c44 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   e0bac:	e044      	b.n	e0c38 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   e0bae:	2320      	movs	r3, #32
   e0bb0:	4a25      	ldr	r2, [pc, #148]	; (e0c48 <_ZN5spark11MeshPublish4pollEv+0x100>)
   e0bb2:	9302      	str	r3, [sp, #8]
   e0bb4:	9200      	str	r2, [sp, #0]
   e0bb6:	2300      	movs	r3, #0
   e0bb8:	9401      	str	r4, [sp, #4]
   e0bba:	aa02      	add	r2, sp, #8
   e0bbc:	4923      	ldr	r1, [pc, #140]	; (e0c4c <_ZN5spark11MeshPublish4pollEv+0x104>)
   e0bbe:	9303      	str	r3, [sp, #12]
   e0bc0:	2001      	movs	r0, #1
   e0bc2:	f7fe fa33 	bl	df02c <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0bc6:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   e0bca:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   e0bcc:	781b      	ldrb	r3, [r3, #0]
   e0bce:	bb6b      	cbnz	r3, e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   e0bd0:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   e0bd2:	4621      	mov	r1, r4
   e0bd4:	4638      	mov	r0, r7
   e0bd6:	f001 fbb9 	bl	e234c <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   e0bda:	b338      	cbz	r0, e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   e0bdc:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0bde:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   e0be0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0be4:	dd22      	ble.n	e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e0be6:	5c3b      	ldrb	r3, [r7, r0]
   e0be8:	bb03      	cbnz	r3, e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   e0bea:	3c01      	subs	r4, #1
   e0bec:	d00e      	beq.n	e0c0c <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   e0bee:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   e0bf2:	4621      	mov	r1, r4
   e0bf4:	4640      	mov	r0, r8
   e0bf6:	f001 fba9 	bl	e234c <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   e0bfa:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0bfc:	2c00      	cmp	r4, #0
   e0bfe:	dd15      	ble.n	e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e0c00:	f818 3000 	ldrb.w	r3, [r8, r0]
   e0c04:	b993      	cbnz	r3, e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   e0c06:	2c01      	cmp	r4, #1
   e0c08:	d002      	beq.n	e0c10 <_ZN5spark11MeshPublish4pollEv+0xc8>
   e0c0a:	e00f      	b.n	e0c2c <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   e0c0c:	f8df 8044 	ldr.w	r8, [pc, #68]	; e0c54 <_ZN5spark11MeshPublish4pollEv+0x10c>
   e0c10:	4630      	mov	r0, r6
   e0c12:	f7fe ffb6 	bl	dfb82 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   e0c16:	4642      	mov	r2, r8
   e0c18:	4639      	mov	r1, r7
   e0c1a:	1d28      	adds	r0, r5, #4
   e0c1c:	f7ff ff4d 	bl	e0aba <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   e0c20:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0c24:	f7fe f8b2 	bl	ded8c <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0c28:	2000      	movs	r0, #0
   e0c2a:	e005      	b.n	e0c38 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   e0c2c:	4808      	ldr	r0, [pc, #32]	; (e0c50 <_ZN5spark11MeshPublish4pollEv+0x108>)
   e0c2e:	e003      	b.n	e0c38 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   e0c30:	2064      	movs	r0, #100	; 0x64
   e0c32:	f7fe f82b 	bl	dec8c <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0c36:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   e0c38:	b00a      	add	sp, #40	; 0x28
   e0c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0c3e:	bf00      	nop
   e0c40:	000e49bc 	.word	0x000e49bc
   e0c44:	fffffefc 	.word	0xfffffefc
   e0c48:	000e4914 	.word	0x000e4914
   e0c4c:	000e490d 	.word	0x000e490d
   e0c50:	fffffee8 	.word	0xfffffee8
   e0c54:	000e47b4 	.word	0x000e47b4

000e0c58 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0c58:	b510      	push	{r4, lr}
   e0c5a:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e0c5c:	f3bf 8f5f 	dmb	sy
   e0c60:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   e0c64:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   e0c68:	b91b      	cbnz	r3, e0c72 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   e0c6a:	4620      	mov	r0, r4
   e0c6c:	f7ff ff6c 	bl	e0b48 <_ZN5spark11MeshPublish4pollEv>
   e0c70:	e7f4      	b.n	e0c5c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   e0c72:	bd10      	pop	{r4, pc}

000e0c74 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>:
        HAL_Delay_Milliseconds(100);
    }
    return result;
}

int MeshClass::selectAntenna(MeshAntennaType antenna) {
   e0c74:	b508      	push	{r3, lr}
   e0c76:	4608      	mov	r0, r1
    CHECK(mesh_select_antenna((int)antenna, nullptr));
   e0c78:	2100      	movs	r1, #0
   e0c7a:	f7fe f8ff 	bl	dee7c <mesh_select_antenna>
    return 0;
}
   e0c7e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   e0c82:	bd08      	pop	{r3, pc}

000e0c84 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   e0c84:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0c86:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0c88:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0c8a:	b144      	cbz	r4, e0c9e <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e0c8c:	4620      	mov	r0, r4
   e0c8e:	f7ff fe31 	bl	e08f4 <_ZN6ThreadD1Ev>
   e0c92:	4620      	mov	r0, r4
   e0c94:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   e0c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e0c9a:	f000 bb6d 	b.w	e1378 <_ZdlPvj>
   e0c9e:	bd10      	pop	{r4, pc}

000e0ca0 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   e0ca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0ca4:	4605      	mov	r5, r0
   e0ca6:	b08a      	sub	sp, #40	; 0x28
   e0ca8:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e0cac:	f7fe ff69 	bl	dfb82 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   e0cb0:	682c      	ldr	r4, [r5, #0]
   e0cb2:	2c00      	cmp	r4, #0
   e0cb4:	d17b      	bne.n	e0dae <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   e0cb6:	204c      	movs	r0, #76	; 0x4c
   e0cb8:	f7f3 f9ef 	bl	d409a <_Znwj>
   e0cbc:	4606      	mov	r6, r0
   e0cbe:	2800      	cmp	r0, #0
   e0cc0:	d073      	beq.n	e0daa <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   e0cc2:	f7fe fdef 	bl	df8a4 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   e0cc6:	4622      	mov	r2, r4
   e0cc8:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   e0ccc:	4630      	mov	r0, r6
   e0cce:	f7fe fe19 	bl	df904 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e0cd2:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   e0cd4:	483a      	ldr	r0, [pc, #232]	; (e0dc0 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e0cd6:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   e0cda:	f7fd ffa7 	bl	dec2c <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   e0cde:	6833      	ldr	r3, [r6, #0]
   e0ce0:	f89d 200f 	ldrb.w	r2, [sp, #15]
   e0ce4:	6a1b      	ldr	r3, [r3, #32]
   e0ce6:	f249 0169 	movw	r1, #36969	; 0x9069
   e0cea:	4630      	mov	r0, r6
   e0cec:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   e0cee:	a804      	add	r0, sp, #16
   e0cf0:	f7ff fbda 	bl	e04a8 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   e0cf4:	a804      	add	r0, sp, #16
   e0cf6:	f7ff ff07 	bl	e0b08 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   e0cfa:	2800      	cmp	r0, #0
   e0cfc:	db4a      	blt.n	e0d94 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   e0cfe:	a904      	add	r1, sp, #16
   e0d00:	4630      	mov	r0, r6
   e0d02:	f7fe fe6b 	bl	df9dc <_ZN3UDP13joinMulticastERK9IPAddress>
   e0d06:	2800      	cmp	r0, #0
   e0d08:	db44      	blt.n	e0d94 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e0d0a:	f3bf 8f5f 	dmb	sy
   e0d0e:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   e0d12:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0d16:	492b      	ldr	r1, [pc, #172]	; (e0dc4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0d18:	2004      	movs	r0, #4
   e0d1a:	f000 fb31 	bl	e1380 <_ZnwjRKSt9nothrow_t>
   e0d1e:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   e0d22:	4607      	mov	r7, r0
   e0d24:	b348      	cbz	r0, e0d7a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   e0d26:	4927      	ldr	r1, [pc, #156]	; (e0dc4 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0d28:	2014      	movs	r0, #20
   e0d2a:	f000 fb29 	bl	e1380 <_ZnwjRKSt9nothrow_t>
   e0d2e:	b128      	cbz	r0, e0d3c <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   e0d30:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0d32:	6004      	str	r4, [r0, #0]
   e0d34:	6044      	str	r4, [r0, #4]
   e0d36:	6084      	str	r4, [r0, #8]
   e0d38:	60c4      	str	r4, [r0, #12]
   e0d3a:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e0d3c:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   e0d3e:	b1b0      	cbz	r0, e0d6e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   e0d40:	4b21      	ldr	r3, [pc, #132]	; (e0dc8 <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   e0d42:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0d44:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e0d46:	4921      	ldr	r1, [pc, #132]	; (e0dcc <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   e0d48:	60dd      	str	r5, [r3, #12]
   e0d4a:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e0d4c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   e0d50:	e88d 0009 	stmia.w	sp, {r0, r3}
   e0d54:	2203      	movs	r2, #3
   e0d56:	4b1e      	ldr	r3, [pc, #120]	; (e0dd0 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   e0d58:	3004      	adds	r0, #4
   e0d5a:	f7fd ffdf 	bl	ded1c <os_thread_create>
   e0d5e:	b930      	cbnz	r0, e0d6e <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   e0d60:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   e0d62:	7c1b      	ldrb	r3, [r3, #16]
   e0d64:	b94b      	cbnz	r3, e0d7a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   e0d66:	2001      	movs	r0, #1
   e0d68:	f7fd ff90 	bl	dec8c <HAL_Delay_Milliseconds>
   e0d6c:	e7f8      	b.n	e0d60 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0d6e:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0d70:	2300      	movs	r3, #0
   e0d72:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0d74:	b108      	cbz	r0, e0d7a <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   e0d76:	f7ff fda2 	bl	e08be <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   e0d7a:	4639      	mov	r1, r7
   e0d7c:	4640      	mov	r0, r8
   e0d7e:	f7ff ff81 	bl	e0c84 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   e0d82:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   e0d86:	b13b      	cbz	r3, e0d98 <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0d88:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0d8a:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0d8c:	b130      	cbz	r0, e0d9c <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   e0d8e:	f7ff fdac 	bl	e08ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0d92:	e00c      	b.n	e0dae <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   e0d94:	4604      	mov	r4, r0
   e0d96:	e003      	b.n	e0da0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   e0d98:	4c0e      	ldr	r4, [pc, #56]	; (e0dd4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e0d9a:	e001      	b.n	e0da0 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   e0d9c:	4604      	mov	r4, r0
   e0d9e:	e007      	b.n	e0db0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0da0:	b136      	cbz	r6, e0db0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   e0da2:	4630      	mov	r0, r6
   e0da4:	f7ff fda1 	bl	e08ea <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0da8:	e002      	b.n	e0db0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   e0daa:	4c0a      	ldr	r4, [pc, #40]	; (e0dd4 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e0dac:	e000      	b.n	e0db0 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   e0dae:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e0db0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0db4:	f7fd ffea 	bl	ded8c <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   e0db8:	4620      	mov	r0, r4
   e0dba:	b00a      	add	sp, #40	; 0x28
   e0dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0dc0:	000e4924 	.word	0x000e4924
   e0dc4:	000e49bc 	.word	0x000e49bc
   e0dc8:	000e0c59 	.word	0x000e0c59
   e0dcc:	000e4928 	.word	0x000e4928
   e0dd0:	000e0829 	.word	0x000e0829
   e0dd4:	fffffefc 	.word	0xfffffefc

000e0dd8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   e0dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0dda:	4605      	mov	r5, r0
   e0ddc:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e0de0:	460e      	mov	r6, r1
   e0de2:	4617      	mov	r7, r2
   e0de4:	f7fe fecd 	bl	dfb82 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   e0de8:	4628      	mov	r0, r5
   e0dea:	f7ff ff59 	bl	e0ca0 <_ZN5spark11MeshPublish13initializeUdpEv>
   e0dee:	2800      	cmp	r0, #0
   e0df0:	db07      	blt.n	e0e02 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   e0df2:	463a      	mov	r2, r7
   e0df4:	4631      	mov	r1, r6
   e0df6:	1d28      	adds	r0, r5, #4
   e0df8:	f7ff fe56 	bl	e0aa8 <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   e0dfc:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   e0e00:	e000      	b.n	e0e04 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   e0e02:	4604      	mov	r4, r0
   e0e04:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0e08:	f7fd ffc0 	bl	ded8c <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   e0e0c:	4620      	mov	r0, r4
   e0e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0e10 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e0e10:	b538      	push	{r3, r4, r5, lr}
   e0e12:	4c0e      	ldr	r4, [pc, #56]	; (e0e4c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e0e14:	4b0e      	ldr	r3, [pc, #56]	; (e0e50 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e0e16:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0e18:	2500      	movs	r5, #0
   e0e1a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e0e1c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e0e20:	6063      	str	r3, [r4, #4]
   e0e22:	60a5      	str	r5, [r4, #8]
   e0e24:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e0e28:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e0e2c:	f7fd ff96 	bl	ded5c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e0e30:	4b08      	ldr	r3, [pc, #32]	; (e0e54 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e0e32:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e0e36:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e0e3a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e0e3c:	4620      	mov	r0, r4
   e0e3e:	4a06      	ldr	r2, [pc, #24]	; (e0e58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e0e40:	4906      	ldr	r1, [pc, #24]	; (e0e5c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e0e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e0e46:	f000 ba89 	b.w	e135c <__aeabi_atexit>
   e0e4a:	bf00      	nop
   e0e4c:	2003e510 	.word	0x2003e510
   e0e50:	000e4990 	.word	0x000e4990
   e0e54:	000e48d4 	.word	0x000e48d4
   e0e58:	2003e2e8 	.word	0x2003e2e8
   e0e5c:	000e0969 	.word	0x000e0969

000e0e60 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e0e60:	4770      	bx	lr

000e0e62 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   e0e62:	2001      	movs	r0, #1
   e0e64:	4770      	bx	lr
	...

000e0e68 <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   e0e68:	8983      	ldrh	r3, [r0, #12]
   e0e6a:	b11b      	cbz	r3, e0e74 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   e0e6c:	6903      	ldr	r3, [r0, #16]
   e0e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0e72:	d102      	bne.n	e0e7a <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   e0e74:	ed9f 0a05 	vldr	s0, [pc, #20]	; e0e8c <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   e0e78:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   e0e7a:	ee07 3a90 	vmov	s15, r3
   e0e7e:	ed9f 7a04 	vldr	s14, [pc, #16]	; e0e90 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   e0e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0e86:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e0e8a:	4770      	bx	lr
   e0e8c:	00000000 	.word	0x00000000
   e0e90:	42c80000 	.word	0x42c80000

000e0e94 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   e0e94:	8983      	ldrh	r3, [r0, #12]
   e0e96:	b11b      	cbz	r3, e0ea0 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   e0e98:	6983      	ldr	r3, [r0, #24]
   e0e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0e9e:	d102      	bne.n	e0ea6 <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   e0ea0:	ed9f 0a05 	vldr	s0, [pc, #20]	; e0eb8 <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   e0ea4:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   e0ea6:	ee07 3a90 	vmov	s15, r3
   e0eaa:	ed9f 7a04 	vldr	s14, [pc, #16]	; e0ebc <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   e0eae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0eb2:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e0eb6:	4770      	bx	lr
   e0eb8:	00000000 	.word	0x00000000
   e0ebc:	42c80000 	.word	0x42c80000

000e0ec0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e0ec0:	2200      	movs	r2, #0
   e0ec2:	4611      	mov	r1, r2
   e0ec4:	6840      	ldr	r0, [r0, #4]
   e0ec6:	f7fe b92f 	b.w	df128 <network_ready>

000e0eca <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e0eca:	b510      	push	{r4, lr}
   e0ecc:	2124      	movs	r1, #36	; 0x24
   e0ece:	4604      	mov	r4, r0
   e0ed0:	f000 fa52 	bl	e1378 <_ZdlPvj>
   e0ed4:	4620      	mov	r0, r4
   e0ed6:	bd10      	pop	{r4, pc}

000e0ed8 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e0ed8:	2200      	movs	r2, #0
   e0eda:	4611      	mov	r1, r2
   e0edc:	6840      	ldr	r0, [r0, #4]
   e0ede:	f7fe b943 	b.w	df168 <network_listening>

000e0ee2 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e0ee2:	2200      	movs	r2, #0
   e0ee4:	4611      	mov	r1, r2
   e0ee6:	6840      	ldr	r0, [r0, #4]
   e0ee8:	f7fe b94e 	b.w	df188 <network_get_listen_timeout>

000e0eec <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e0eec:	2200      	movs	r2, #0
   e0eee:	6840      	ldr	r0, [r0, #4]
   e0ef0:	f7fe b942 	b.w	df178 <network_set_listen_timeout>

000e0ef4 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e0ef4:	2200      	movs	r2, #0
   e0ef6:	f081 0101 	eor.w	r1, r1, #1
   e0efa:	6840      	ldr	r0, [r0, #4]
   e0efc:	f7fe b92c 	b.w	df158 <network_listen>

000e0f00 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e0f00:	2300      	movs	r3, #0
   e0f02:	461a      	mov	r2, r3
   e0f04:	4619      	mov	r1, r3
   e0f06:	6840      	ldr	r0, [r0, #4]
   e0f08:	f7fe b91e 	b.w	df148 <network_off>

000e0f0c <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e0f0c:	2300      	movs	r3, #0
   e0f0e:	461a      	mov	r2, r3
   e0f10:	4619      	mov	r1, r3
   e0f12:	6840      	ldr	r0, [r0, #4]
   e0f14:	f7fe b910 	b.w	df138 <network_on>

000e0f18 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e0f18:	2200      	movs	r2, #0
   e0f1a:	4611      	mov	r1, r2
   e0f1c:	6840      	ldr	r0, [r0, #4]
   e0f1e:	f7fe b8f3 	b.w	df108 <network_connecting>

000e0f22 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e0f22:	2200      	movs	r2, #0
   e0f24:	2102      	movs	r1, #2
   e0f26:	6840      	ldr	r0, [r0, #4]
   e0f28:	f7fe b8f6 	b.w	df118 <network_disconnect>

000e0f2c <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e0f2c:	2300      	movs	r3, #0
   e0f2e:	461a      	mov	r2, r3
   e0f30:	6840      	ldr	r0, [r0, #4]
   e0f32:	f7fe b8e1 	b.w	df0f8 <network_connect>
	...

000e0f38 <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   e0f38:	8983      	ldrh	r3, [r0, #12]
   e0f3a:	b17b      	cbz	r3, e0f5c <_ZNK10WiFiSignal10getQualityEv+0x24>
   e0f3c:	6a03      	ldr	r3, [r0, #32]
   e0f3e:	2b00      	cmp	r3, #0
   e0f40:	db0c      	blt.n	e0f5c <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   e0f42:	ee07 3a90 	vmov	s15, r3
   e0f46:	eddf 6a07 	vldr	s13, [pc, #28]	; e0f64 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   e0f4a:	ed9f 0a07 	vldr	s0, [pc, #28]	; e0f68 <_ZNK10WiFiSignal10getQualityEv+0x30>
   e0f4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0f52:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e0f56:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0f5a:	4770      	bx	lr
    }
    return -1.0f;
   e0f5c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0f60:	4770      	bx	lr
   e0f62:	bf00      	nop
   e0f64:	477fff00 	.word	0x477fff00
   e0f68:	42c80000 	.word	0x42c80000

000e0f6c <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   e0f6c:	8983      	ldrh	r3, [r0, #12]
   e0f6e:	b17b      	cbz	r3, e0f90 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   e0f70:	6943      	ldr	r3, [r0, #20]
   e0f72:	2b00      	cmp	r3, #0
   e0f74:	db0c      	blt.n	e0f90 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   e0f76:	ee07 3a90 	vmov	s15, r3
   e0f7a:	eddf 6a07 	vldr	s13, [pc, #28]	; e0f98 <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   e0f7e:	ed9f 0a07 	vldr	s0, [pc, #28]	; e0f9c <_ZNK10WiFiSignal11getStrengthEv+0x30>
   e0f82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e0f8a:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0f8e:	4770      	bx	lr
    }
    return -1.0f;
   e0f90:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0f94:	4770      	bx	lr
   e0f96:	bf00      	nop
   e0f98:	477fff00 	.word	0x477fff00
   e0f9c:	42c80000 	.word	0x42c80000

000e0fa0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e0fa0:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   e0fa2:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e0fa4:	4606      	mov	r6, r0
    inf_ = inf;
   e0fa6:	f100 040c 	add.w	r4, r0, #12
   e0faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0fae:	e895 0003 	ldmia.w	r5, {r0, r1}
   e0fb2:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   e0fb6:	6933      	ldr	r3, [r6, #16]
   e0fb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0fbc:	bf0e      	itee	eq
   e0fbe:	2302      	moveq	r3, #2
   e0fc0:	2264      	movne	r2, #100	; 0x64
   e0fc2:	fb93 f3f2 	sdivne	r3, r3, r2
   e0fc6:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   e0fc8:	69b3      	ldr	r3, [r6, #24]
   e0fca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0fce:	bf0e      	itee	eq
   e0fd0:	2300      	moveq	r3, #0
   e0fd2:	2264      	movne	r2, #100	; 0x64
   e0fd4:	fb93 f3f2 	sdivne	r3, r3, r2
   e0fd8:	60b3      	str	r3, [r6, #8]
    return true;
}
   e0fda:	2001      	movs	r0, #1
   e0fdc:	bd70      	pop	{r4, r5, r6, pc}
	...

000e0fe0 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   e0fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   e0fe4:	4b16      	ldr	r3, [pc, #88]	; (e1040 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   e0fe6:	6003      	str	r3, [r0, #0]
   e0fe8:	2500      	movs	r5, #0
   e0fea:	4688      	mov	r8, r1
   e0fec:	2702      	movs	r7, #2
   e0fee:	2618      	movs	r6, #24
   e0ff0:	b086      	sub	sp, #24
   e0ff2:	6047      	str	r7, [r0, #4]
   e0ff4:	6085      	str	r5, [r0, #8]
   e0ff6:	4632      	mov	r2, r6
   e0ff8:	4629      	mov	r1, r5
   e0ffa:	4604      	mov	r4, r0
   e0ffc:	300c      	adds	r0, #12
   e0ffe:	f001 f92b 	bl	e2258 <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   e1002:	462a      	mov	r2, r5
   e1004:	4629      	mov	r1, r5
   e1006:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e100a:	f7fe f88d 	bl	df128 <network_ready>
   e100e:	b190      	cbz	r0, e1036 <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   e1010:	4632      	mov	r2, r6
   e1012:	4629      	mov	r1, r5
   e1014:	4668      	mov	r0, sp
   e1016:	f001 f91f 	bl	e2258 <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e101a:	462a      	mov	r2, r5
   e101c:	4669      	mov	r1, sp
   e101e:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   e1020:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e1024:	f7fd ffd2 	bl	defcc <wlan_connected_info>
        if (r == 0) {
   e1028:	b920      	cbnz	r0, e1034 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   e102a:	4669      	mov	r1, sp
   e102c:	4620      	mov	r0, r4
   e102e:	f7ff ffb7 	bl	e0fa0 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   e1032:	e000      	b.n	e1036 <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   e1034:	6067      	str	r7, [r4, #4]
        return sig;
    }
   e1036:	4620      	mov	r0, r4
   e1038:	b006      	add	sp, #24
   e103a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e103e:	bf00      	nop
   e1040:	000e496c 	.word	0x000e496c

000e1044 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e1044:	4b02      	ldr	r3, [pc, #8]	; (e1050 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e1046:	2204      	movs	r2, #4
   e1048:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e104a:	4a02      	ldr	r2, [pc, #8]	; (e1054 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e104c:	601a      	str	r2, [r3, #0]
   e104e:	4770      	bx	lr
   e1050:	2003e6e4 	.word	0x2003e6e4
   e1054:	000e4938 	.word	0x000e4938

000e1058 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e1058:	2300      	movs	r3, #0
   e105a:	461a      	mov	r2, r3
   e105c:	6840      	ldr	r0, [r0, #4]
   e105e:	f7fe b84b 	b.w	df0f8 <network_connect>

000e1062 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e1062:	2200      	movs	r2, #0
   e1064:	2102      	movs	r1, #2
   e1066:	6840      	ldr	r0, [r0, #4]
   e1068:	f7fe b856 	b.w	df118 <network_disconnect>

000e106c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e106c:	2200      	movs	r2, #0
   e106e:	4611      	mov	r1, r2
   e1070:	6840      	ldr	r0, [r0, #4]
   e1072:	f7fe b849 	b.w	df108 <network_connecting>

000e1076 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e1076:	2200      	movs	r2, #0
   e1078:	4611      	mov	r1, r2
   e107a:	6840      	ldr	r0, [r0, #4]
   e107c:	f7fe b854 	b.w	df128 <network_ready>

000e1080 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e1080:	2300      	movs	r3, #0
   e1082:	461a      	mov	r2, r3
   e1084:	4619      	mov	r1, r3
   e1086:	6840      	ldr	r0, [r0, #4]
   e1088:	f7fe b856 	b.w	df138 <network_on>

000e108c <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e108c:	2300      	movs	r3, #0
   e108e:	461a      	mov	r2, r3
   e1090:	4619      	mov	r1, r3
   e1092:	6840      	ldr	r0, [r0, #4]
   e1094:	f7fe b858 	b.w	df148 <network_off>

000e1098 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e1098:	2200      	movs	r2, #0
   e109a:	f081 0101 	eor.w	r1, r1, #1
   e109e:	6840      	ldr	r0, [r0, #4]
   e10a0:	f7fe b85a 	b.w	df158 <network_listen>

000e10a4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e10a4:	2200      	movs	r2, #0
   e10a6:	6840      	ldr	r0, [r0, #4]
   e10a8:	f7fe b866 	b.w	df178 <network_set_listen_timeout>

000e10ac <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e10ac:	2200      	movs	r2, #0
   e10ae:	4611      	mov	r1, r2
   e10b0:	6840      	ldr	r0, [r0, #4]
   e10b2:	f7fe b869 	b.w	df188 <network_get_listen_timeout>

000e10b6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e10b6:	2200      	movs	r2, #0
   e10b8:	4611      	mov	r1, r2
   e10ba:	6840      	ldr	r0, [r0, #4]
   e10bc:	f7fe b854 	b.w	df168 <network_listening>

000e10c0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e10c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e10c4:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e10c6:	b095      	sub	sp, #84	; 0x54
   e10c8:	4616      	mov	r6, r2
   e10ca:	460d      	mov	r5, r1
   e10cc:	4607      	mov	r7, r0
    IPAddress addr;
   e10ce:	f7ff f9eb 	bl	e04a8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e10d2:	4621      	mov	r1, r4
   e10d4:	2220      	movs	r2, #32
   e10d6:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e10d8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e10da:	f001 f8bd 	bl	e2258 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e10de:	2340      	movs	r3, #64	; 0x40
   e10e0:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e10e2:	4621      	mov	r1, r4
   e10e4:	466b      	mov	r3, sp
   e10e6:	aa0c      	add	r2, sp, #48	; 0x30
   e10e8:	4630      	mov	r0, r6
   e10ea:	f7fd fd4f 	bl	deb8c <netdb_getaddrinfo>
    if (!r) {
   e10ee:	4604      	mov	r4, r0
   e10f0:	2800      	cmp	r0, #0
   e10f2:	d144      	bne.n	e117e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e10f4:	4602      	mov	r2, r0
   e10f6:	2101      	movs	r1, #1
   e10f8:	6868      	ldr	r0, [r5, #4]
   e10fa:	f7fe f815 	bl	df128 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e10fe:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e1100:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e1102:	4622      	mov	r2, r4
   e1104:	6868      	ldr	r0, [r5, #4]
   e1106:	f7fe f80f 	bl	df128 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e110a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e110c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e110e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e1110:	2e00      	cmp	r6, #0
   e1112:	d034      	beq.n	e117e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e1114:	2900      	cmp	r1, #0
   e1116:	d132      	bne.n	e117e <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e1118:	6873      	ldr	r3, [r6, #4]
   e111a:	2b02      	cmp	r3, #2
   e111c:	d002      	beq.n	e1124 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e111e:	2b0a      	cmp	r3, #10
   e1120:	d009      	beq.n	e1136 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e1122:	e02a      	b.n	e117a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e1124:	f1b8 0f00 	cmp.w	r8, #0
   e1128:	d027      	beq.n	e117a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e112a:	6971      	ldr	r1, [r6, #20]
   e112c:	4638      	mov	r0, r7
   e112e:	3104      	adds	r1, #4
   e1130:	f7ff f9fd 	bl	e052e <_ZN9IPAddressaSEPKh>
   e1134:	e020      	b.n	e1178 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e1136:	f1b9 0f00 	cmp.w	r9, #0
   e113a:	d01e      	beq.n	e117a <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e113c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e113e:	2211      	movs	r2, #17
   e1140:	a801      	add	r0, sp, #4
   e1142:	f001 f889 	bl	e2258 <memset>
                    a.v = 6;
   e1146:	2306      	movs	r3, #6
   e1148:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e114c:	ad01      	add	r5, sp, #4
   e114e:	f104 0308 	add.w	r3, r4, #8
   e1152:	3418      	adds	r4, #24
   e1154:	6818      	ldr	r0, [r3, #0]
   e1156:	6859      	ldr	r1, [r3, #4]
   e1158:	462a      	mov	r2, r5
   e115a:	c203      	stmia	r2!, {r0, r1}
   e115c:	3308      	adds	r3, #8
   e115e:	42a3      	cmp	r3, r4
   e1160:	4615      	mov	r5, r2
   e1162:	d1f7      	bne.n	e1154 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e1164:	a901      	add	r1, sp, #4
   e1166:	a806      	add	r0, sp, #24
   e1168:	ad07      	add	r5, sp, #28
   e116a:	f7ff f9ab 	bl	e04c4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e116e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e1170:	1d3c      	adds	r4, r7, #4
   e1172:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e1174:	682b      	ldr	r3, [r5, #0]
   e1176:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e1178:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e117a:	69f6      	ldr	r6, [r6, #28]
   e117c:	e7c8      	b.n	e1110 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e117e:	9800      	ldr	r0, [sp, #0]
   e1180:	f7fd fcfc 	bl	deb7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e1184:	4638      	mov	r0, r7
   e1186:	b015      	add	sp, #84	; 0x54
   e1188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e118c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e118c:	4b02      	ldr	r3, [pc, #8]	; (e1198 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e118e:	4a03      	ldr	r2, [pc, #12]	; (e119c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e1190:	601a      	str	r2, [r3, #0]
   e1192:	2200      	movs	r2, #0
   e1194:	605a      	str	r2, [r3, #4]
   e1196:	4770      	bx	lr
   e1198:	2003e6ec 	.word	0x2003e6ec
   e119c:	000e4990 	.word	0x000e4990

000e11a0 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e11a0:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e11a2:	4e18      	ldr	r6, [pc, #96]	; (e1204 <pinAvailable+0x64>)
   e11a4:	6831      	ldr	r1, [r6, #0]
   e11a6:	f011 0501 	ands.w	r5, r1, #1
   e11aa:	4604      	mov	r4, r0
   e11ac:	d10a      	bne.n	e11c4 <pinAvailable+0x24>
   e11ae:	4630      	mov	r0, r6
   e11b0:	f7f2 ff7b 	bl	d40aa <__cxa_guard_acquire>
   e11b4:	b130      	cbz	r0, e11c4 <pinAvailable+0x24>
   e11b6:	4629      	mov	r1, r5
   e11b8:	4813      	ldr	r0, [pc, #76]	; (e1208 <pinAvailable+0x68>)
   e11ba:	f7fe f89b 	bl	df2f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e11be:	4630      	mov	r0, r6
   e11c0:	f7f2 ff78 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   e11c4:	4810      	ldr	r0, [pc, #64]	; (e1208 <pinAvailable+0x68>)
   e11c6:	f7fe f89f 	bl	df308 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e11ca:	b128      	cbz	r0, e11d8 <pinAvailable+0x38>
   e11cc:	f1a4 030b 	sub.w	r3, r4, #11
   e11d0:	2b02      	cmp	r3, #2
   e11d2:	d801      	bhi.n	e11d8 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   e11d4:	2000      	movs	r0, #0
   e11d6:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e11d8:	f000 f89a 	bl	e1310 <_Z19__fetch_global_Wirev>
   e11dc:	f7ff fb20 	bl	e0820 <_ZN7TwoWire9isEnabledEv>
   e11e0:	b108      	cbz	r0, e11e6 <pinAvailable+0x46>
   e11e2:	2c01      	cmp	r4, #1
   e11e4:	d9f6      	bls.n	e11d4 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e11e6:	f7ff faa3 	bl	e0730 <_Z22__fetch_global_Serial1v>
   e11ea:	f7ff fa9d 	bl	e0728 <_ZN11USARTSerial9isEnabledEv>
   e11ee:	b118      	cbz	r0, e11f8 <pinAvailable+0x58>
   e11f0:	f1a4 0309 	sub.w	r3, r4, #9
   e11f4:	2b01      	cmp	r3, #1
   e11f6:	d9ed      	bls.n	e11d4 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e11f8:	2c23      	cmp	r4, #35	; 0x23
   e11fa:	bf8c      	ite	hi
   e11fc:	2000      	movhi	r0, #0
   e11fe:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e1200:	bd70      	pop	{r4, r5, r6, pc}
   e1202:	bf00      	nop
   e1204:	2003e6f4 	.word	0x2003e6f4
   e1208:	2003e6f8 	.word	0x2003e6f8

000e120c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e120c:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e120e:	b538      	push	{r3, r4, r5, lr}
   e1210:	4604      	mov	r4, r0
   e1212:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e1214:	d80a      	bhi.n	e122c <pinMode+0x20>
   e1216:	29ff      	cmp	r1, #255	; 0xff
   e1218:	d008      	beq.n	e122c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e121a:	f7ff ffc1 	bl	e11a0 <pinAvailable>
   e121e:	b128      	cbz	r0, e122c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e1220:	4629      	mov	r1, r5
   e1222:	4620      	mov	r0, r4
}
   e1224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e1228:	f7fd bcc8 	b.w	debbc <HAL_Pin_Mode>
   e122c:	bd38      	pop	{r3, r4, r5, pc}

000e122e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e122e:	b538      	push	{r3, r4, r5, lr}
   e1230:	4604      	mov	r4, r0
   e1232:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e1234:	f7fd fcca 	bl	debcc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e1238:	28ff      	cmp	r0, #255	; 0xff
   e123a:	d010      	beq.n	e125e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   e123c:	2806      	cmp	r0, #6
   e123e:	d804      	bhi.n	e124a <digitalWrite+0x1c>
   e1240:	234d      	movs	r3, #77	; 0x4d
   e1242:	fa23 f000 	lsr.w	r0, r3, r0
   e1246:	07c3      	lsls	r3, r0, #31
   e1248:	d409      	bmi.n	e125e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e124a:	4620      	mov	r0, r4
   e124c:	f7ff ffa8 	bl	e11a0 <pinAvailable>
   e1250:	b128      	cbz	r0, e125e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e1252:	4629      	mov	r1, r5
   e1254:	4620      	mov	r0, r4
}
   e1256:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   e125a:	f7fd bcbf 	b.w	debdc <HAL_GPIO_Write>
   e125e:	bd38      	pop	{r3, r4, r5, pc}

000e1260 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   e1260:	b510      	push	{r4, lr}
   e1262:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e1264:	f7fd fcb2 	bl	debcc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   e1268:	3804      	subs	r0, #4
   e126a:	b2c0      	uxtb	r0, r0
   e126c:	2801      	cmp	r0, #1
   e126e:	d908      	bls.n	e1282 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   e1270:	4620      	mov	r0, r4
   e1272:	f7ff ff95 	bl	e11a0 <pinAvailable>
   e1276:	b120      	cbz	r0, e1282 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e1278:	4620      	mov	r0, r4
}
   e127a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e127e:	f7fd bcb5 	b.w	debec <HAL_GPIO_Read>
}
   e1282:	2000      	movs	r0, #0
   e1284:	bd10      	pop	{r4, pc}

000e1286 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e1286:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   e1288:	b510      	push	{r4, lr}
   e128a:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   e128c:	bf9c      	itt	ls
   e128e:	340e      	addls	r4, #14
   e1290:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e1292:	4620      	mov	r0, r4
   e1294:	f7ff ff84 	bl	e11a0 <pinAvailable>
   e1298:	b150      	cbz	r0, e12b0 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e129a:	2103      	movs	r1, #3
   e129c:	4620      	mov	r0, r4
   e129e:	f7fd fc85 	bl	debac <HAL_Validate_Pin_Function>
   e12a2:	2803      	cmp	r0, #3
   e12a4:	d104      	bne.n	e12b0 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e12a6:	4620      	mov	r0, r4
}
   e12a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e12ac:	f7fd bca6 	b.w	debfc <HAL_ADC_Read>
}
   e12b0:	2000      	movs	r0, #0
   e12b2:	bd10      	pop	{r4, pc}

000e12b4 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   e12b4:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   e12b6:	4c07      	ldr	r4, [pc, #28]	; (e12d4 <_Z21__fetch_global_EEPROMv+0x20>)
   e12b8:	6823      	ldr	r3, [r4, #0]
   e12ba:	07db      	lsls	r3, r3, #31
   e12bc:	d408      	bmi.n	e12d0 <_Z21__fetch_global_EEPROMv+0x1c>
   e12be:	4620      	mov	r0, r4
   e12c0:	f7f2 fef3 	bl	d40aa <__cxa_guard_acquire>
   e12c4:	b120      	cbz	r0, e12d0 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   e12c6:	f7fd fd09 	bl	decdc <HAL_EEPROM_Init>
   e12ca:	4620      	mov	r0, r4
   e12cc:	f7f2 fef2 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   e12d0:	4801      	ldr	r0, [pc, #4]	; (e12d8 <_Z21__fetch_global_EEPROMv+0x24>)
   e12d2:	bd10      	pop	{r4, pc}
   e12d4:	2003e704 	.word	0x2003e704
   e12d8:	2003e708 	.word	0x2003e708

000e12dc <_Z17acquireWireBufferv>:
   e12dc:	b570      	push	{r4, r5, r6, lr}
   e12de:	4604      	mov	r4, r0
   e12e0:	2514      	movs	r5, #20
   e12e2:	462a      	mov	r2, r5
   e12e4:	4e09      	ldr	r6, [pc, #36]	; (e130c <_Z17acquireWireBufferv+0x30>)
   e12e6:	2100      	movs	r1, #0
   e12e8:	f000 ffb6 	bl	e2258 <memset>
   e12ec:	8025      	strh	r5, [r4, #0]
   e12ee:	2520      	movs	r5, #32
   e12f0:	4631      	mov	r1, r6
   e12f2:	60a5      	str	r5, [r4, #8]
   e12f4:	6125      	str	r5, [r4, #16]
   e12f6:	4628      	mov	r0, r5
   e12f8:	f000 f840 	bl	e137c <_ZnajRKSt9nothrow_t>
   e12fc:	4631      	mov	r1, r6
   e12fe:	6060      	str	r0, [r4, #4]
   e1300:	4628      	mov	r0, r5
   e1302:	f000 f83b 	bl	e137c <_ZnajRKSt9nothrow_t>
   e1306:	60e0      	str	r0, [r4, #12]
   e1308:	4620      	mov	r0, r4
   e130a:	bd70      	pop	{r4, r5, r6, pc}
   e130c:	000e49bc 	.word	0x000e49bc

000e1310 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e1310:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e1312:	4d0e      	ldr	r5, [pc, #56]	; (e134c <_Z19__fetch_global_Wirev+0x3c>)
   e1314:	6829      	ldr	r1, [r5, #0]
   e1316:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e131a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e131c:	d113      	bne.n	e1346 <_Z19__fetch_global_Wirev+0x36>
   e131e:	4628      	mov	r0, r5
   e1320:	f7f2 fec3 	bl	d40aa <__cxa_guard_acquire>
   e1324:	b178      	cbz	r0, e1346 <_Z19__fetch_global_Wirev+0x36>
   e1326:	a801      	add	r0, sp, #4
   e1328:	f7ff ffd8 	bl	e12dc <_Z17acquireWireBufferv>
   e132c:	aa01      	add	r2, sp, #4
   e132e:	4621      	mov	r1, r4
   e1330:	4807      	ldr	r0, [pc, #28]	; (e1350 <_Z19__fetch_global_Wirev+0x40>)
   e1332:	f7ff fa63 	bl	e07fc <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   e1336:	4628      	mov	r0, r5
   e1338:	f7f2 febc 	bl	d40b4 <__cxa_guard_release>
   e133c:	4a05      	ldr	r2, [pc, #20]	; (e1354 <_Z19__fetch_global_Wirev+0x44>)
   e133e:	4906      	ldr	r1, [pc, #24]	; (e1358 <_Z19__fetch_global_Wirev+0x48>)
   e1340:	4803      	ldr	r0, [pc, #12]	; (e1350 <_Z19__fetch_global_Wirev+0x40>)
   e1342:	f000 f80b 	bl	e135c <__aeabi_atexit>
	return wire;
}
   e1346:	4802      	ldr	r0, [pc, #8]	; (e1350 <_Z19__fetch_global_Wirev+0x40>)
   e1348:	b007      	add	sp, #28
   e134a:	bd30      	pop	{r4, r5, pc}
   e134c:	2003e70c 	.word	0x2003e70c
   e1350:	2003e710 	.word	0x2003e710
   e1354:	2003e2e8 	.word	0x2003e2e8
   e1358:	000e07a5 	.word	0x000e07a5

000e135c <__aeabi_atexit>:
   e135c:	460b      	mov	r3, r1
   e135e:	4601      	mov	r1, r0
   e1360:	4618      	mov	r0, r3
   e1362:	f000 be55 	b.w	e2010 <__cxa_atexit>
	...

000e1368 <_ZSt15get_new_handlerv>:
   e1368:	4b02      	ldr	r3, [pc, #8]	; (e1374 <_ZSt15get_new_handlerv+0xc>)
   e136a:	6818      	ldr	r0, [r3, #0]
   e136c:	f3bf 8f5f 	dmb	sy
   e1370:	4770      	bx	lr
   e1372:	bf00      	nop
   e1374:	2003e724 	.word	0x2003e724

000e1378 <_ZdlPvj>:
   e1378:	f7f2 be93 	b.w	d40a2 <_ZdlPv>

000e137c <_ZnajRKSt9nothrow_t>:
   e137c:	f000 b800 	b.w	e1380 <_ZnwjRKSt9nothrow_t>

000e1380 <_ZnwjRKSt9nothrow_t>:
   e1380:	b510      	push	{r4, lr}
   e1382:	2800      	cmp	r0, #0
   e1384:	bf14      	ite	ne
   e1386:	4604      	movne	r4, r0
   e1388:	2401      	moveq	r4, #1
   e138a:	4620      	mov	r0, r4
   e138c:	f7fd ff44 	bl	df218 <malloc>
   e1390:	b920      	cbnz	r0, e139c <_ZnwjRKSt9nothrow_t+0x1c>
   e1392:	f7ff ffe9 	bl	e1368 <_ZSt15get_new_handlerv>
   e1396:	b108      	cbz	r0, e139c <_ZnwjRKSt9nothrow_t+0x1c>
   e1398:	4780      	blx	r0
   e139a:	e7f6      	b.n	e138a <_ZnwjRKSt9nothrow_t+0xa>
   e139c:	bd10      	pop	{r4, pc}

000e139e <_ZSt25__throw_bad_function_callv>:
   e139e:	b508      	push	{r3, lr}
   e13a0:	f7fd ff5a 	bl	df258 <abort>

000e13a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e13a4:	4b18      	ldr	r3, [pc, #96]	; (e1408 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e13a6:	681a      	ldr	r2, [r3, #0]
   e13a8:	07d1      	lsls	r1, r2, #31
   e13aa:	bf5c      	itt	pl
   e13ac:	2201      	movpl	r2, #1
   e13ae:	601a      	strpl	r2, [r3, #0]
   e13b0:	4b16      	ldr	r3, [pc, #88]	; (e140c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e13b2:	681a      	ldr	r2, [r3, #0]
   e13b4:	07d2      	lsls	r2, r2, #31
   e13b6:	bf5c      	itt	pl
   e13b8:	2201      	movpl	r2, #1
   e13ba:	601a      	strpl	r2, [r3, #0]
   e13bc:	4b14      	ldr	r3, [pc, #80]	; (e1410 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e13be:	681a      	ldr	r2, [r3, #0]
   e13c0:	07d0      	lsls	r0, r2, #31
   e13c2:	bf5c      	itt	pl
   e13c4:	2201      	movpl	r2, #1
   e13c6:	601a      	strpl	r2, [r3, #0]
   e13c8:	4b12      	ldr	r3, [pc, #72]	; (e1414 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e13ca:	681a      	ldr	r2, [r3, #0]
   e13cc:	07d1      	lsls	r1, r2, #31
   e13ce:	bf5c      	itt	pl
   e13d0:	2201      	movpl	r2, #1
   e13d2:	601a      	strpl	r2, [r3, #0]
   e13d4:	4b10      	ldr	r3, [pc, #64]	; (e1418 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e13d6:	681a      	ldr	r2, [r3, #0]
   e13d8:	07d2      	lsls	r2, r2, #31
   e13da:	bf5c      	itt	pl
   e13dc:	2201      	movpl	r2, #1
   e13de:	601a      	strpl	r2, [r3, #0]
   e13e0:	4b0e      	ldr	r3, [pc, #56]	; (e141c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e13e2:	681a      	ldr	r2, [r3, #0]
   e13e4:	07d0      	lsls	r0, r2, #31
   e13e6:	bf5c      	itt	pl
   e13e8:	2201      	movpl	r2, #1
   e13ea:	601a      	strpl	r2, [r3, #0]
   e13ec:	4b0c      	ldr	r3, [pc, #48]	; (e1420 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e13ee:	681a      	ldr	r2, [r3, #0]
   e13f0:	07d1      	lsls	r1, r2, #31
   e13f2:	bf5c      	itt	pl
   e13f4:	2201      	movpl	r2, #1
   e13f6:	601a      	strpl	r2, [r3, #0]
   e13f8:	4b0a      	ldr	r3, [pc, #40]	; (e1424 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e13fa:	681a      	ldr	r2, [r3, #0]
   e13fc:	07d2      	lsls	r2, r2, #31
   e13fe:	bf5c      	itt	pl
   e1400:	2201      	movpl	r2, #1
   e1402:	601a      	strpl	r2, [r3, #0]
   e1404:	4770      	bx	lr
   e1406:	bf00      	nop
   e1408:	2003e744 	.word	0x2003e744
   e140c:	2003e740 	.word	0x2003e740
   e1410:	2003e73c 	.word	0x2003e73c
   e1414:	2003e738 	.word	0x2003e738
   e1418:	2003e734 	.word	0x2003e734
   e141c:	2003e730 	.word	0x2003e730
   e1420:	2003e72c 	.word	0x2003e72c
   e1424:	2003e728 	.word	0x2003e728

000e1428 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e1428:	4b24      	ldr	r3, [pc, #144]	; (e14bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e142a:	681a      	ldr	r2, [r3, #0]
   e142c:	07d0      	lsls	r0, r2, #31
   e142e:	bf5c      	itt	pl
   e1430:	2201      	movpl	r2, #1
   e1432:	601a      	strpl	r2, [r3, #0]
   e1434:	4b22      	ldr	r3, [pc, #136]	; (e14c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e1436:	681a      	ldr	r2, [r3, #0]
   e1438:	07d1      	lsls	r1, r2, #31
   e143a:	bf5c      	itt	pl
   e143c:	2201      	movpl	r2, #1
   e143e:	601a      	strpl	r2, [r3, #0]
   e1440:	4b20      	ldr	r3, [pc, #128]	; (e14c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e1442:	681a      	ldr	r2, [r3, #0]
   e1444:	07d2      	lsls	r2, r2, #31
   e1446:	bf5c      	itt	pl
   e1448:	2201      	movpl	r2, #1
   e144a:	601a      	strpl	r2, [r3, #0]
   e144c:	4b1e      	ldr	r3, [pc, #120]	; (e14c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e144e:	681a      	ldr	r2, [r3, #0]
   e1450:	07d0      	lsls	r0, r2, #31
   e1452:	bf5c      	itt	pl
   e1454:	2201      	movpl	r2, #1
   e1456:	601a      	strpl	r2, [r3, #0]
   e1458:	4b1c      	ldr	r3, [pc, #112]	; (e14cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e145a:	681a      	ldr	r2, [r3, #0]
   e145c:	07d1      	lsls	r1, r2, #31
   e145e:	bf5c      	itt	pl
   e1460:	2201      	movpl	r2, #1
   e1462:	601a      	strpl	r2, [r3, #0]
   e1464:	4b1a      	ldr	r3, [pc, #104]	; (e14d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e1466:	681a      	ldr	r2, [r3, #0]
   e1468:	07d2      	lsls	r2, r2, #31
   e146a:	bf5c      	itt	pl
   e146c:	2201      	movpl	r2, #1
   e146e:	601a      	strpl	r2, [r3, #0]
   e1470:	4b18      	ldr	r3, [pc, #96]	; (e14d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e1472:	681a      	ldr	r2, [r3, #0]
   e1474:	07d0      	lsls	r0, r2, #31
   e1476:	bf5c      	itt	pl
   e1478:	2201      	movpl	r2, #1
   e147a:	601a      	strpl	r2, [r3, #0]
   e147c:	4b16      	ldr	r3, [pc, #88]	; (e14d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e147e:	681a      	ldr	r2, [r3, #0]
   e1480:	07d1      	lsls	r1, r2, #31
   e1482:	bf5c      	itt	pl
   e1484:	2201      	movpl	r2, #1
   e1486:	601a      	strpl	r2, [r3, #0]
   e1488:	4b14      	ldr	r3, [pc, #80]	; (e14dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e148a:	681a      	ldr	r2, [r3, #0]
   e148c:	07d2      	lsls	r2, r2, #31
   e148e:	bf5c      	itt	pl
   e1490:	2201      	movpl	r2, #1
   e1492:	601a      	strpl	r2, [r3, #0]
   e1494:	4b12      	ldr	r3, [pc, #72]	; (e14e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e1496:	681a      	ldr	r2, [r3, #0]
   e1498:	07d0      	lsls	r0, r2, #31
   e149a:	bf5c      	itt	pl
   e149c:	2201      	movpl	r2, #1
   e149e:	601a      	strpl	r2, [r3, #0]
   e14a0:	4b10      	ldr	r3, [pc, #64]	; (e14e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e14a2:	681a      	ldr	r2, [r3, #0]
   e14a4:	07d1      	lsls	r1, r2, #31
   e14a6:	bf5c      	itt	pl
   e14a8:	2201      	movpl	r2, #1
   e14aa:	601a      	strpl	r2, [r3, #0]
   e14ac:	4b0e      	ldr	r3, [pc, #56]	; (e14e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e14ae:	681a      	ldr	r2, [r3, #0]
   e14b0:	07d2      	lsls	r2, r2, #31
   e14b2:	bf5c      	itt	pl
   e14b4:	2201      	movpl	r2, #1
   e14b6:	601a      	strpl	r2, [r3, #0]
   e14b8:	4770      	bx	lr
   e14ba:	bf00      	nop
   e14bc:	2003e774 	.word	0x2003e774
   e14c0:	2003e770 	.word	0x2003e770
   e14c4:	2003e76c 	.word	0x2003e76c
   e14c8:	2003e768 	.word	0x2003e768
   e14cc:	2003e764 	.word	0x2003e764
   e14d0:	2003e760 	.word	0x2003e760
   e14d4:	2003e75c 	.word	0x2003e75c
   e14d8:	2003e758 	.word	0x2003e758
   e14dc:	2003e754 	.word	0x2003e754
   e14e0:	2003e750 	.word	0x2003e750
   e14e4:	2003e74c 	.word	0x2003e74c
   e14e8:	2003e748 	.word	0x2003e748

000e14ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e14ec:	4b24      	ldr	r3, [pc, #144]	; (e1580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e14ee:	681a      	ldr	r2, [r3, #0]
   e14f0:	07d0      	lsls	r0, r2, #31
   e14f2:	bf5c      	itt	pl
   e14f4:	2201      	movpl	r2, #1
   e14f6:	601a      	strpl	r2, [r3, #0]
   e14f8:	4b22      	ldr	r3, [pc, #136]	; (e1584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e14fa:	681a      	ldr	r2, [r3, #0]
   e14fc:	07d1      	lsls	r1, r2, #31
   e14fe:	bf5c      	itt	pl
   e1500:	2201      	movpl	r2, #1
   e1502:	601a      	strpl	r2, [r3, #0]
   e1504:	4b20      	ldr	r3, [pc, #128]	; (e1588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e1506:	681a      	ldr	r2, [r3, #0]
   e1508:	07d2      	lsls	r2, r2, #31
   e150a:	bf5c      	itt	pl
   e150c:	2201      	movpl	r2, #1
   e150e:	601a      	strpl	r2, [r3, #0]
   e1510:	4b1e      	ldr	r3, [pc, #120]	; (e158c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e1512:	681a      	ldr	r2, [r3, #0]
   e1514:	07d0      	lsls	r0, r2, #31
   e1516:	bf5c      	itt	pl
   e1518:	2201      	movpl	r2, #1
   e151a:	601a      	strpl	r2, [r3, #0]
   e151c:	4b1c      	ldr	r3, [pc, #112]	; (e1590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e151e:	681a      	ldr	r2, [r3, #0]
   e1520:	07d1      	lsls	r1, r2, #31
   e1522:	bf5c      	itt	pl
   e1524:	2201      	movpl	r2, #1
   e1526:	601a      	strpl	r2, [r3, #0]
   e1528:	4b1a      	ldr	r3, [pc, #104]	; (e1594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e152a:	681a      	ldr	r2, [r3, #0]
   e152c:	07d2      	lsls	r2, r2, #31
   e152e:	bf5c      	itt	pl
   e1530:	2201      	movpl	r2, #1
   e1532:	601a      	strpl	r2, [r3, #0]
   e1534:	4b18      	ldr	r3, [pc, #96]	; (e1598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e1536:	681a      	ldr	r2, [r3, #0]
   e1538:	07d0      	lsls	r0, r2, #31
   e153a:	bf5c      	itt	pl
   e153c:	2201      	movpl	r2, #1
   e153e:	601a      	strpl	r2, [r3, #0]
   e1540:	4b16      	ldr	r3, [pc, #88]	; (e159c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e1542:	681a      	ldr	r2, [r3, #0]
   e1544:	07d1      	lsls	r1, r2, #31
   e1546:	bf5c      	itt	pl
   e1548:	2201      	movpl	r2, #1
   e154a:	601a      	strpl	r2, [r3, #0]
   e154c:	4b14      	ldr	r3, [pc, #80]	; (e15a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e154e:	681a      	ldr	r2, [r3, #0]
   e1550:	07d2      	lsls	r2, r2, #31
   e1552:	bf5c      	itt	pl
   e1554:	2201      	movpl	r2, #1
   e1556:	601a      	strpl	r2, [r3, #0]
   e1558:	4b12      	ldr	r3, [pc, #72]	; (e15a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e155a:	681a      	ldr	r2, [r3, #0]
   e155c:	07d0      	lsls	r0, r2, #31
   e155e:	bf5c      	itt	pl
   e1560:	2201      	movpl	r2, #1
   e1562:	601a      	strpl	r2, [r3, #0]
   e1564:	4b10      	ldr	r3, [pc, #64]	; (e15a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e1566:	681a      	ldr	r2, [r3, #0]
   e1568:	07d1      	lsls	r1, r2, #31
   e156a:	bf5c      	itt	pl
   e156c:	2201      	movpl	r2, #1
   e156e:	601a      	strpl	r2, [r3, #0]
   e1570:	4b0e      	ldr	r3, [pc, #56]	; (e15ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e1572:	681a      	ldr	r2, [r3, #0]
   e1574:	07d2      	lsls	r2, r2, #31
   e1576:	bf5c      	itt	pl
   e1578:	2201      	movpl	r2, #1
   e157a:	601a      	strpl	r2, [r3, #0]
   e157c:	4770      	bx	lr
   e157e:	bf00      	nop
   e1580:	2003e7a4 	.word	0x2003e7a4
   e1584:	2003e7a0 	.word	0x2003e7a0
   e1588:	2003e79c 	.word	0x2003e79c
   e158c:	2003e798 	.word	0x2003e798
   e1590:	2003e794 	.word	0x2003e794
   e1594:	2003e790 	.word	0x2003e790
   e1598:	2003e78c 	.word	0x2003e78c
   e159c:	2003e788 	.word	0x2003e788
   e15a0:	2003e784 	.word	0x2003e784
   e15a4:	2003e780 	.word	0x2003e780
   e15a8:	2003e77c 	.word	0x2003e77c
   e15ac:	2003e778 	.word	0x2003e778

000e15b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e15b0:	4b18      	ldr	r3, [pc, #96]	; (e1614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e15b2:	681a      	ldr	r2, [r3, #0]
   e15b4:	07d1      	lsls	r1, r2, #31
   e15b6:	bf5c      	itt	pl
   e15b8:	2201      	movpl	r2, #1
   e15ba:	601a      	strpl	r2, [r3, #0]
   e15bc:	4b16      	ldr	r3, [pc, #88]	; (e1618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e15be:	681a      	ldr	r2, [r3, #0]
   e15c0:	07d2      	lsls	r2, r2, #31
   e15c2:	bf5c      	itt	pl
   e15c4:	2201      	movpl	r2, #1
   e15c6:	601a      	strpl	r2, [r3, #0]
   e15c8:	4b14      	ldr	r3, [pc, #80]	; (e161c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e15ca:	681a      	ldr	r2, [r3, #0]
   e15cc:	07d0      	lsls	r0, r2, #31
   e15ce:	bf5c      	itt	pl
   e15d0:	2201      	movpl	r2, #1
   e15d2:	601a      	strpl	r2, [r3, #0]
   e15d4:	4b12      	ldr	r3, [pc, #72]	; (e1620 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e15d6:	681a      	ldr	r2, [r3, #0]
   e15d8:	07d1      	lsls	r1, r2, #31
   e15da:	bf5c      	itt	pl
   e15dc:	2201      	movpl	r2, #1
   e15de:	601a      	strpl	r2, [r3, #0]
   e15e0:	4b10      	ldr	r3, [pc, #64]	; (e1624 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e15e2:	681a      	ldr	r2, [r3, #0]
   e15e4:	07d2      	lsls	r2, r2, #31
   e15e6:	bf5c      	itt	pl
   e15e8:	2201      	movpl	r2, #1
   e15ea:	601a      	strpl	r2, [r3, #0]
   e15ec:	4b0e      	ldr	r3, [pc, #56]	; (e1628 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e15ee:	681a      	ldr	r2, [r3, #0]
   e15f0:	07d0      	lsls	r0, r2, #31
   e15f2:	bf5c      	itt	pl
   e15f4:	2201      	movpl	r2, #1
   e15f6:	601a      	strpl	r2, [r3, #0]
   e15f8:	4b0c      	ldr	r3, [pc, #48]	; (e162c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e15fa:	681a      	ldr	r2, [r3, #0]
   e15fc:	07d1      	lsls	r1, r2, #31
   e15fe:	bf5c      	itt	pl
   e1600:	2201      	movpl	r2, #1
   e1602:	601a      	strpl	r2, [r3, #0]
   e1604:	4b0a      	ldr	r3, [pc, #40]	; (e1630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e1606:	681a      	ldr	r2, [r3, #0]
   e1608:	07d2      	lsls	r2, r2, #31
   e160a:	bf5c      	itt	pl
   e160c:	2201      	movpl	r2, #1
   e160e:	601a      	strpl	r2, [r3, #0]
   e1610:	4770      	bx	lr
   e1612:	bf00      	nop
   e1614:	2003e7c4 	.word	0x2003e7c4
   e1618:	2003e7c0 	.word	0x2003e7c0
   e161c:	2003e7bc 	.word	0x2003e7bc
   e1620:	2003e7b8 	.word	0x2003e7b8
   e1624:	2003e7b4 	.word	0x2003e7b4
   e1628:	2003e7b0 	.word	0x2003e7b0
   e162c:	2003e7ac 	.word	0x2003e7ac
   e1630:	2003e7a8 	.word	0x2003e7a8

000e1634 <__aeabi_drsub>:
   e1634:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e1638:	e002      	b.n	e1640 <__adddf3>
   e163a:	bf00      	nop

000e163c <__aeabi_dsub>:
   e163c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e1640 <__adddf3>:
   e1640:	b530      	push	{r4, r5, lr}
   e1642:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e1646:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e164a:	ea94 0f05 	teq	r4, r5
   e164e:	bf08      	it	eq
   e1650:	ea90 0f02 	teqeq	r0, r2
   e1654:	bf1f      	itttt	ne
   e1656:	ea54 0c00 	orrsne.w	ip, r4, r0
   e165a:	ea55 0c02 	orrsne.w	ip, r5, r2
   e165e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e1662:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e1666:	f000 80e2 	beq.w	e182e <__adddf3+0x1ee>
   e166a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e166e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e1672:	bfb8      	it	lt
   e1674:	426d      	neglt	r5, r5
   e1676:	dd0c      	ble.n	e1692 <__adddf3+0x52>
   e1678:	442c      	add	r4, r5
   e167a:	ea80 0202 	eor.w	r2, r0, r2
   e167e:	ea81 0303 	eor.w	r3, r1, r3
   e1682:	ea82 0000 	eor.w	r0, r2, r0
   e1686:	ea83 0101 	eor.w	r1, r3, r1
   e168a:	ea80 0202 	eor.w	r2, r0, r2
   e168e:	ea81 0303 	eor.w	r3, r1, r3
   e1692:	2d36      	cmp	r5, #54	; 0x36
   e1694:	bf88      	it	hi
   e1696:	bd30      	pophi	{r4, r5, pc}
   e1698:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e169c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e16a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e16a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e16a8:	d002      	beq.n	e16b0 <__adddf3+0x70>
   e16aa:	4240      	negs	r0, r0
   e16ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e16b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e16b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e16b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e16bc:	d002      	beq.n	e16c4 <__adddf3+0x84>
   e16be:	4252      	negs	r2, r2
   e16c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e16c4:	ea94 0f05 	teq	r4, r5
   e16c8:	f000 80a7 	beq.w	e181a <__adddf3+0x1da>
   e16cc:	f1a4 0401 	sub.w	r4, r4, #1
   e16d0:	f1d5 0e20 	rsbs	lr, r5, #32
   e16d4:	db0d      	blt.n	e16f2 <__adddf3+0xb2>
   e16d6:	fa02 fc0e 	lsl.w	ip, r2, lr
   e16da:	fa22 f205 	lsr.w	r2, r2, r5
   e16de:	1880      	adds	r0, r0, r2
   e16e0:	f141 0100 	adc.w	r1, r1, #0
   e16e4:	fa03 f20e 	lsl.w	r2, r3, lr
   e16e8:	1880      	adds	r0, r0, r2
   e16ea:	fa43 f305 	asr.w	r3, r3, r5
   e16ee:	4159      	adcs	r1, r3
   e16f0:	e00e      	b.n	e1710 <__adddf3+0xd0>
   e16f2:	f1a5 0520 	sub.w	r5, r5, #32
   e16f6:	f10e 0e20 	add.w	lr, lr, #32
   e16fa:	2a01      	cmp	r2, #1
   e16fc:	fa03 fc0e 	lsl.w	ip, r3, lr
   e1700:	bf28      	it	cs
   e1702:	f04c 0c02 	orrcs.w	ip, ip, #2
   e1706:	fa43 f305 	asr.w	r3, r3, r5
   e170a:	18c0      	adds	r0, r0, r3
   e170c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e1710:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1714:	d507      	bpl.n	e1726 <__adddf3+0xe6>
   e1716:	f04f 0e00 	mov.w	lr, #0
   e171a:	f1dc 0c00 	rsbs	ip, ip, #0
   e171e:	eb7e 0000 	sbcs.w	r0, lr, r0
   e1722:	eb6e 0101 	sbc.w	r1, lr, r1
   e1726:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e172a:	d31b      	bcc.n	e1764 <__adddf3+0x124>
   e172c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e1730:	d30c      	bcc.n	e174c <__adddf3+0x10c>
   e1732:	0849      	lsrs	r1, r1, #1
   e1734:	ea5f 0030 	movs.w	r0, r0, rrx
   e1738:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e173c:	f104 0401 	add.w	r4, r4, #1
   e1740:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e1744:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e1748:	f080 809a 	bcs.w	e1880 <__adddf3+0x240>
   e174c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e1750:	bf08      	it	eq
   e1752:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1756:	f150 0000 	adcs.w	r0, r0, #0
   e175a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e175e:	ea41 0105 	orr.w	r1, r1, r5
   e1762:	bd30      	pop	{r4, r5, pc}
   e1764:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e1768:	4140      	adcs	r0, r0
   e176a:	eb41 0101 	adc.w	r1, r1, r1
   e176e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1772:	f1a4 0401 	sub.w	r4, r4, #1
   e1776:	d1e9      	bne.n	e174c <__adddf3+0x10c>
   e1778:	f091 0f00 	teq	r1, #0
   e177c:	bf04      	itt	eq
   e177e:	4601      	moveq	r1, r0
   e1780:	2000      	moveq	r0, #0
   e1782:	fab1 f381 	clz	r3, r1
   e1786:	bf08      	it	eq
   e1788:	3320      	addeq	r3, #32
   e178a:	f1a3 030b 	sub.w	r3, r3, #11
   e178e:	f1b3 0220 	subs.w	r2, r3, #32
   e1792:	da0c      	bge.n	e17ae <__adddf3+0x16e>
   e1794:	320c      	adds	r2, #12
   e1796:	dd08      	ble.n	e17aa <__adddf3+0x16a>
   e1798:	f102 0c14 	add.w	ip, r2, #20
   e179c:	f1c2 020c 	rsb	r2, r2, #12
   e17a0:	fa01 f00c 	lsl.w	r0, r1, ip
   e17a4:	fa21 f102 	lsr.w	r1, r1, r2
   e17a8:	e00c      	b.n	e17c4 <__adddf3+0x184>
   e17aa:	f102 0214 	add.w	r2, r2, #20
   e17ae:	bfd8      	it	le
   e17b0:	f1c2 0c20 	rsble	ip, r2, #32
   e17b4:	fa01 f102 	lsl.w	r1, r1, r2
   e17b8:	fa20 fc0c 	lsr.w	ip, r0, ip
   e17bc:	bfdc      	itt	le
   e17be:	ea41 010c 	orrle.w	r1, r1, ip
   e17c2:	4090      	lslle	r0, r2
   e17c4:	1ae4      	subs	r4, r4, r3
   e17c6:	bfa2      	ittt	ge
   e17c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e17cc:	4329      	orrge	r1, r5
   e17ce:	bd30      	popge	{r4, r5, pc}
   e17d0:	ea6f 0404 	mvn.w	r4, r4
   e17d4:	3c1f      	subs	r4, #31
   e17d6:	da1c      	bge.n	e1812 <__adddf3+0x1d2>
   e17d8:	340c      	adds	r4, #12
   e17da:	dc0e      	bgt.n	e17fa <__adddf3+0x1ba>
   e17dc:	f104 0414 	add.w	r4, r4, #20
   e17e0:	f1c4 0220 	rsb	r2, r4, #32
   e17e4:	fa20 f004 	lsr.w	r0, r0, r4
   e17e8:	fa01 f302 	lsl.w	r3, r1, r2
   e17ec:	ea40 0003 	orr.w	r0, r0, r3
   e17f0:	fa21 f304 	lsr.w	r3, r1, r4
   e17f4:	ea45 0103 	orr.w	r1, r5, r3
   e17f8:	bd30      	pop	{r4, r5, pc}
   e17fa:	f1c4 040c 	rsb	r4, r4, #12
   e17fe:	f1c4 0220 	rsb	r2, r4, #32
   e1802:	fa20 f002 	lsr.w	r0, r0, r2
   e1806:	fa01 f304 	lsl.w	r3, r1, r4
   e180a:	ea40 0003 	orr.w	r0, r0, r3
   e180e:	4629      	mov	r1, r5
   e1810:	bd30      	pop	{r4, r5, pc}
   e1812:	fa21 f004 	lsr.w	r0, r1, r4
   e1816:	4629      	mov	r1, r5
   e1818:	bd30      	pop	{r4, r5, pc}
   e181a:	f094 0f00 	teq	r4, #0
   e181e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e1822:	bf06      	itte	eq
   e1824:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e1828:	3401      	addeq	r4, #1
   e182a:	3d01      	subne	r5, #1
   e182c:	e74e      	b.n	e16cc <__adddf3+0x8c>
   e182e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1832:	bf18      	it	ne
   e1834:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e1838:	d029      	beq.n	e188e <__adddf3+0x24e>
   e183a:	ea94 0f05 	teq	r4, r5
   e183e:	bf08      	it	eq
   e1840:	ea90 0f02 	teqeq	r0, r2
   e1844:	d005      	beq.n	e1852 <__adddf3+0x212>
   e1846:	ea54 0c00 	orrs.w	ip, r4, r0
   e184a:	bf04      	itt	eq
   e184c:	4619      	moveq	r1, r3
   e184e:	4610      	moveq	r0, r2
   e1850:	bd30      	pop	{r4, r5, pc}
   e1852:	ea91 0f03 	teq	r1, r3
   e1856:	bf1e      	ittt	ne
   e1858:	2100      	movne	r1, #0
   e185a:	2000      	movne	r0, #0
   e185c:	bd30      	popne	{r4, r5, pc}
   e185e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e1862:	d105      	bne.n	e1870 <__adddf3+0x230>
   e1864:	0040      	lsls	r0, r0, #1
   e1866:	4149      	adcs	r1, r1
   e1868:	bf28      	it	cs
   e186a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e186e:	bd30      	pop	{r4, r5, pc}
   e1870:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e1874:	bf3c      	itt	cc
   e1876:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e187a:	bd30      	popcc	{r4, r5, pc}
   e187c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1880:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e1884:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1888:	f04f 0000 	mov.w	r0, #0
   e188c:	bd30      	pop	{r4, r5, pc}
   e188e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1892:	bf1a      	itte	ne
   e1894:	4619      	movne	r1, r3
   e1896:	4610      	movne	r0, r2
   e1898:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e189c:	bf1c      	itt	ne
   e189e:	460b      	movne	r3, r1
   e18a0:	4602      	movne	r2, r0
   e18a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e18a6:	bf06      	itte	eq
   e18a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e18ac:	ea91 0f03 	teqeq	r1, r3
   e18b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e18b4:	bd30      	pop	{r4, r5, pc}
   e18b6:	bf00      	nop

000e18b8 <__aeabi_ui2d>:
   e18b8:	f090 0f00 	teq	r0, #0
   e18bc:	bf04      	itt	eq
   e18be:	2100      	moveq	r1, #0
   e18c0:	4770      	bxeq	lr
   e18c2:	b530      	push	{r4, r5, lr}
   e18c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e18c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e18cc:	f04f 0500 	mov.w	r5, #0
   e18d0:	f04f 0100 	mov.w	r1, #0
   e18d4:	e750      	b.n	e1778 <__adddf3+0x138>
   e18d6:	bf00      	nop

000e18d8 <__aeabi_i2d>:
   e18d8:	f090 0f00 	teq	r0, #0
   e18dc:	bf04      	itt	eq
   e18de:	2100      	moveq	r1, #0
   e18e0:	4770      	bxeq	lr
   e18e2:	b530      	push	{r4, r5, lr}
   e18e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e18e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e18ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e18f0:	bf48      	it	mi
   e18f2:	4240      	negmi	r0, r0
   e18f4:	f04f 0100 	mov.w	r1, #0
   e18f8:	e73e      	b.n	e1778 <__adddf3+0x138>
   e18fa:	bf00      	nop

000e18fc <__aeabi_f2d>:
   e18fc:	0042      	lsls	r2, r0, #1
   e18fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e1902:	ea4f 0131 	mov.w	r1, r1, rrx
   e1906:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e190a:	bf1f      	itttt	ne
   e190c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e1910:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1914:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e1918:	4770      	bxne	lr
   e191a:	f092 0f00 	teq	r2, #0
   e191e:	bf14      	ite	ne
   e1920:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1924:	4770      	bxeq	lr
   e1926:	b530      	push	{r4, r5, lr}
   e1928:	f44f 7460 	mov.w	r4, #896	; 0x380
   e192c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1934:	e720      	b.n	e1778 <__adddf3+0x138>
   e1936:	bf00      	nop

000e1938 <__aeabi_ul2d>:
   e1938:	ea50 0201 	orrs.w	r2, r0, r1
   e193c:	bf08      	it	eq
   e193e:	4770      	bxeq	lr
   e1940:	b530      	push	{r4, r5, lr}
   e1942:	f04f 0500 	mov.w	r5, #0
   e1946:	e00a      	b.n	e195e <__aeabi_l2d+0x16>

000e1948 <__aeabi_l2d>:
   e1948:	ea50 0201 	orrs.w	r2, r0, r1
   e194c:	bf08      	it	eq
   e194e:	4770      	bxeq	lr
   e1950:	b530      	push	{r4, r5, lr}
   e1952:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e1956:	d502      	bpl.n	e195e <__aeabi_l2d+0x16>
   e1958:	4240      	negs	r0, r0
   e195a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e195e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1962:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e1966:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e196a:	f43f aedc 	beq.w	e1726 <__adddf3+0xe6>
   e196e:	f04f 0203 	mov.w	r2, #3
   e1972:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1976:	bf18      	it	ne
   e1978:	3203      	addne	r2, #3
   e197a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e197e:	bf18      	it	ne
   e1980:	3203      	addne	r2, #3
   e1982:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e1986:	f1c2 0320 	rsb	r3, r2, #32
   e198a:	fa00 fc03 	lsl.w	ip, r0, r3
   e198e:	fa20 f002 	lsr.w	r0, r0, r2
   e1992:	fa01 fe03 	lsl.w	lr, r1, r3
   e1996:	ea40 000e 	orr.w	r0, r0, lr
   e199a:	fa21 f102 	lsr.w	r1, r1, r2
   e199e:	4414      	add	r4, r2
   e19a0:	e6c1      	b.n	e1726 <__adddf3+0xe6>
   e19a2:	bf00      	nop

000e19a4 <__aeabi_dmul>:
   e19a4:	b570      	push	{r4, r5, r6, lr}
   e19a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e19aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e19ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e19b2:	bf1d      	ittte	ne
   e19b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e19b8:	ea94 0f0c 	teqne	r4, ip
   e19bc:	ea95 0f0c 	teqne	r5, ip
   e19c0:	f000 f8de 	bleq	e1b80 <__aeabi_dmul+0x1dc>
   e19c4:	442c      	add	r4, r5
   e19c6:	ea81 0603 	eor.w	r6, r1, r3
   e19ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e19ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e19d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e19d6:	bf18      	it	ne
   e19d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e19dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e19e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e19e4:	d038      	beq.n	e1a58 <__aeabi_dmul+0xb4>
   e19e6:	fba0 ce02 	umull	ip, lr, r0, r2
   e19ea:	f04f 0500 	mov.w	r5, #0
   e19ee:	fbe1 e502 	umlal	lr, r5, r1, r2
   e19f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e19f6:	fbe0 e503 	umlal	lr, r5, r0, r3
   e19fa:	f04f 0600 	mov.w	r6, #0
   e19fe:	fbe1 5603 	umlal	r5, r6, r1, r3
   e1a02:	f09c 0f00 	teq	ip, #0
   e1a06:	bf18      	it	ne
   e1a08:	f04e 0e01 	orrne.w	lr, lr, #1
   e1a0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e1a10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e1a14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e1a18:	d204      	bcs.n	e1a24 <__aeabi_dmul+0x80>
   e1a1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e1a1e:	416d      	adcs	r5, r5
   e1a20:	eb46 0606 	adc.w	r6, r6, r6
   e1a24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e1a28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e1a2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e1a30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e1a34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e1a38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1a3c:	bf88      	it	hi
   e1a3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1a42:	d81e      	bhi.n	e1a82 <__aeabi_dmul+0xde>
   e1a44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e1a48:	bf08      	it	eq
   e1a4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e1a4e:	f150 0000 	adcs.w	r0, r0, #0
   e1a52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1a56:	bd70      	pop	{r4, r5, r6, pc}
   e1a58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e1a5c:	ea46 0101 	orr.w	r1, r6, r1
   e1a60:	ea40 0002 	orr.w	r0, r0, r2
   e1a64:	ea81 0103 	eor.w	r1, r1, r3
   e1a68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e1a6c:	bfc2      	ittt	gt
   e1a6e:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1a72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1a76:	bd70      	popgt	{r4, r5, r6, pc}
   e1a78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1a7c:	f04f 0e00 	mov.w	lr, #0
   e1a80:	3c01      	subs	r4, #1
   e1a82:	f300 80ab 	bgt.w	e1bdc <__aeabi_dmul+0x238>
   e1a86:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e1a8a:	bfde      	ittt	le
   e1a8c:	2000      	movle	r0, #0
   e1a8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e1a92:	bd70      	pople	{r4, r5, r6, pc}
   e1a94:	f1c4 0400 	rsb	r4, r4, #0
   e1a98:	3c20      	subs	r4, #32
   e1a9a:	da35      	bge.n	e1b08 <__aeabi_dmul+0x164>
   e1a9c:	340c      	adds	r4, #12
   e1a9e:	dc1b      	bgt.n	e1ad8 <__aeabi_dmul+0x134>
   e1aa0:	f104 0414 	add.w	r4, r4, #20
   e1aa4:	f1c4 0520 	rsb	r5, r4, #32
   e1aa8:	fa00 f305 	lsl.w	r3, r0, r5
   e1aac:	fa20 f004 	lsr.w	r0, r0, r4
   e1ab0:	fa01 f205 	lsl.w	r2, r1, r5
   e1ab4:	ea40 0002 	orr.w	r0, r0, r2
   e1ab8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e1abc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1ac0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1ac4:	fa21 f604 	lsr.w	r6, r1, r4
   e1ac8:	eb42 0106 	adc.w	r1, r2, r6
   e1acc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1ad0:	bf08      	it	eq
   e1ad2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1ad6:	bd70      	pop	{r4, r5, r6, pc}
   e1ad8:	f1c4 040c 	rsb	r4, r4, #12
   e1adc:	f1c4 0520 	rsb	r5, r4, #32
   e1ae0:	fa00 f304 	lsl.w	r3, r0, r4
   e1ae4:	fa20 f005 	lsr.w	r0, r0, r5
   e1ae8:	fa01 f204 	lsl.w	r2, r1, r4
   e1aec:	ea40 0002 	orr.w	r0, r0, r2
   e1af0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1af4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e1af8:	f141 0100 	adc.w	r1, r1, #0
   e1afc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1b00:	bf08      	it	eq
   e1b02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1b06:	bd70      	pop	{r4, r5, r6, pc}
   e1b08:	f1c4 0520 	rsb	r5, r4, #32
   e1b0c:	fa00 f205 	lsl.w	r2, r0, r5
   e1b10:	ea4e 0e02 	orr.w	lr, lr, r2
   e1b14:	fa20 f304 	lsr.w	r3, r0, r4
   e1b18:	fa01 f205 	lsl.w	r2, r1, r5
   e1b1c:	ea43 0302 	orr.w	r3, r3, r2
   e1b20:	fa21 f004 	lsr.w	r0, r1, r4
   e1b24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1b28:	fa21 f204 	lsr.w	r2, r1, r4
   e1b2c:	ea20 0002 	bic.w	r0, r0, r2
   e1b30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e1b34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1b38:	bf08      	it	eq
   e1b3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1b3e:	bd70      	pop	{r4, r5, r6, pc}
   e1b40:	f094 0f00 	teq	r4, #0
   e1b44:	d10f      	bne.n	e1b66 <__aeabi_dmul+0x1c2>
   e1b46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e1b4a:	0040      	lsls	r0, r0, #1
   e1b4c:	eb41 0101 	adc.w	r1, r1, r1
   e1b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1b54:	bf08      	it	eq
   e1b56:	3c01      	subeq	r4, #1
   e1b58:	d0f7      	beq.n	e1b4a <__aeabi_dmul+0x1a6>
   e1b5a:	ea41 0106 	orr.w	r1, r1, r6
   e1b5e:	f095 0f00 	teq	r5, #0
   e1b62:	bf18      	it	ne
   e1b64:	4770      	bxne	lr
   e1b66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e1b6a:	0052      	lsls	r2, r2, #1
   e1b6c:	eb43 0303 	adc.w	r3, r3, r3
   e1b70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1b74:	bf08      	it	eq
   e1b76:	3d01      	subeq	r5, #1
   e1b78:	d0f7      	beq.n	e1b6a <__aeabi_dmul+0x1c6>
   e1b7a:	ea43 0306 	orr.w	r3, r3, r6
   e1b7e:	4770      	bx	lr
   e1b80:	ea94 0f0c 	teq	r4, ip
   e1b84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1b88:	bf18      	it	ne
   e1b8a:	ea95 0f0c 	teqne	r5, ip
   e1b8e:	d00c      	beq.n	e1baa <__aeabi_dmul+0x206>
   e1b90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1b94:	bf18      	it	ne
   e1b96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1b9a:	d1d1      	bne.n	e1b40 <__aeabi_dmul+0x19c>
   e1b9c:	ea81 0103 	eor.w	r1, r1, r3
   e1ba0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1ba4:	f04f 0000 	mov.w	r0, #0
   e1ba8:	bd70      	pop	{r4, r5, r6, pc}
   e1baa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1bae:	bf06      	itte	eq
   e1bb0:	4610      	moveq	r0, r2
   e1bb2:	4619      	moveq	r1, r3
   e1bb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1bb8:	d019      	beq.n	e1bee <__aeabi_dmul+0x24a>
   e1bba:	ea94 0f0c 	teq	r4, ip
   e1bbe:	d102      	bne.n	e1bc6 <__aeabi_dmul+0x222>
   e1bc0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1bc4:	d113      	bne.n	e1bee <__aeabi_dmul+0x24a>
   e1bc6:	ea95 0f0c 	teq	r5, ip
   e1bca:	d105      	bne.n	e1bd8 <__aeabi_dmul+0x234>
   e1bcc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e1bd0:	bf1c      	itt	ne
   e1bd2:	4610      	movne	r0, r2
   e1bd4:	4619      	movne	r1, r3
   e1bd6:	d10a      	bne.n	e1bee <__aeabi_dmul+0x24a>
   e1bd8:	ea81 0103 	eor.w	r1, r1, r3
   e1bdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1be0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1be4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1be8:	f04f 0000 	mov.w	r0, #0
   e1bec:	bd70      	pop	{r4, r5, r6, pc}
   e1bee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1bf2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e1bf6:	bd70      	pop	{r4, r5, r6, pc}

000e1bf8 <__aeabi_ddiv>:
   e1bf8:	b570      	push	{r4, r5, r6, lr}
   e1bfa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1bfe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1c02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1c06:	bf1d      	ittte	ne
   e1c08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1c0c:	ea94 0f0c 	teqne	r4, ip
   e1c10:	ea95 0f0c 	teqne	r5, ip
   e1c14:	f000 f8a7 	bleq	e1d66 <__aeabi_ddiv+0x16e>
   e1c18:	eba4 0405 	sub.w	r4, r4, r5
   e1c1c:	ea81 0e03 	eor.w	lr, r1, r3
   e1c20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1c24:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1c28:	f000 8088 	beq.w	e1d3c <__aeabi_ddiv+0x144>
   e1c2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1c30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e1c34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e1c38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e1c3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e1c40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1c44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1c48:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e1c4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e1c50:	429d      	cmp	r5, r3
   e1c52:	bf08      	it	eq
   e1c54:	4296      	cmpeq	r6, r2
   e1c56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e1c5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e1c5e:	d202      	bcs.n	e1c66 <__aeabi_ddiv+0x6e>
   e1c60:	085b      	lsrs	r3, r3, #1
   e1c62:	ea4f 0232 	mov.w	r2, r2, rrx
   e1c66:	1ab6      	subs	r6, r6, r2
   e1c68:	eb65 0503 	sbc.w	r5, r5, r3
   e1c6c:	085b      	lsrs	r3, r3, #1
   e1c6e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1c72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e1c76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e1c7a:	ebb6 0e02 	subs.w	lr, r6, r2
   e1c7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1c82:	bf22      	ittt	cs
   e1c84:	1ab6      	subcs	r6, r6, r2
   e1c86:	4675      	movcs	r5, lr
   e1c88:	ea40 000c 	orrcs.w	r0, r0, ip
   e1c8c:	085b      	lsrs	r3, r3, #1
   e1c8e:	ea4f 0232 	mov.w	r2, r2, rrx
   e1c92:	ebb6 0e02 	subs.w	lr, r6, r2
   e1c96:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1c9a:	bf22      	ittt	cs
   e1c9c:	1ab6      	subcs	r6, r6, r2
   e1c9e:	4675      	movcs	r5, lr
   e1ca0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e1ca4:	085b      	lsrs	r3, r3, #1
   e1ca6:	ea4f 0232 	mov.w	r2, r2, rrx
   e1caa:	ebb6 0e02 	subs.w	lr, r6, r2
   e1cae:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1cb2:	bf22      	ittt	cs
   e1cb4:	1ab6      	subcs	r6, r6, r2
   e1cb6:	4675      	movcs	r5, lr
   e1cb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e1cbc:	085b      	lsrs	r3, r3, #1
   e1cbe:	ea4f 0232 	mov.w	r2, r2, rrx
   e1cc2:	ebb6 0e02 	subs.w	lr, r6, r2
   e1cc6:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1cca:	bf22      	ittt	cs
   e1ccc:	1ab6      	subcs	r6, r6, r2
   e1cce:	4675      	movcs	r5, lr
   e1cd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e1cd4:	ea55 0e06 	orrs.w	lr, r5, r6
   e1cd8:	d018      	beq.n	e1d0c <__aeabi_ddiv+0x114>
   e1cda:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e1cde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e1ce2:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e1ce6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e1cea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e1cee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e1cf2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e1cf6:	d1c0      	bne.n	e1c7a <__aeabi_ddiv+0x82>
   e1cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1cfc:	d10b      	bne.n	e1d16 <__aeabi_ddiv+0x11e>
   e1cfe:	ea41 0100 	orr.w	r1, r1, r0
   e1d02:	f04f 0000 	mov.w	r0, #0
   e1d06:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e1d0a:	e7b6      	b.n	e1c7a <__aeabi_ddiv+0x82>
   e1d0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1d10:	bf04      	itt	eq
   e1d12:	4301      	orreq	r1, r0
   e1d14:	2000      	moveq	r0, #0
   e1d16:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1d1a:	bf88      	it	hi
   e1d1c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1d20:	f63f aeaf 	bhi.w	e1a82 <__aeabi_dmul+0xde>
   e1d24:	ebb5 0c03 	subs.w	ip, r5, r3
   e1d28:	bf04      	itt	eq
   e1d2a:	ebb6 0c02 	subseq.w	ip, r6, r2
   e1d2e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1d32:	f150 0000 	adcs.w	r0, r0, #0
   e1d36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1d3a:	bd70      	pop	{r4, r5, r6, pc}
   e1d3c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e1d40:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e1d44:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e1d48:	bfc2      	ittt	gt
   e1d4a:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1d4e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1d52:	bd70      	popgt	{r4, r5, r6, pc}
   e1d54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1d58:	f04f 0e00 	mov.w	lr, #0
   e1d5c:	3c01      	subs	r4, #1
   e1d5e:	e690      	b.n	e1a82 <__aeabi_dmul+0xde>
   e1d60:	ea45 0e06 	orr.w	lr, r5, r6
   e1d64:	e68d      	b.n	e1a82 <__aeabi_dmul+0xde>
   e1d66:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1d6a:	ea94 0f0c 	teq	r4, ip
   e1d6e:	bf08      	it	eq
   e1d70:	ea95 0f0c 	teqeq	r5, ip
   e1d74:	f43f af3b 	beq.w	e1bee <__aeabi_dmul+0x24a>
   e1d78:	ea94 0f0c 	teq	r4, ip
   e1d7c:	d10a      	bne.n	e1d94 <__aeabi_ddiv+0x19c>
   e1d7e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1d82:	f47f af34 	bne.w	e1bee <__aeabi_dmul+0x24a>
   e1d86:	ea95 0f0c 	teq	r5, ip
   e1d8a:	f47f af25 	bne.w	e1bd8 <__aeabi_dmul+0x234>
   e1d8e:	4610      	mov	r0, r2
   e1d90:	4619      	mov	r1, r3
   e1d92:	e72c      	b.n	e1bee <__aeabi_dmul+0x24a>
   e1d94:	ea95 0f0c 	teq	r5, ip
   e1d98:	d106      	bne.n	e1da8 <__aeabi_ddiv+0x1b0>
   e1d9a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1d9e:	f43f aefd 	beq.w	e1b9c <__aeabi_dmul+0x1f8>
   e1da2:	4610      	mov	r0, r2
   e1da4:	4619      	mov	r1, r3
   e1da6:	e722      	b.n	e1bee <__aeabi_dmul+0x24a>
   e1da8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1dac:	bf18      	it	ne
   e1dae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1db2:	f47f aec5 	bne.w	e1b40 <__aeabi_dmul+0x19c>
   e1db6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e1dba:	f47f af0d 	bne.w	e1bd8 <__aeabi_dmul+0x234>
   e1dbe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e1dc2:	f47f aeeb 	bne.w	e1b9c <__aeabi_dmul+0x1f8>
   e1dc6:	e712      	b.n	e1bee <__aeabi_dmul+0x24a>

000e1dc8 <__gedf2>:
   e1dc8:	f04f 3cff 	mov.w	ip, #4294967295
   e1dcc:	e006      	b.n	e1ddc <__cmpdf2+0x4>
   e1dce:	bf00      	nop

000e1dd0 <__ledf2>:
   e1dd0:	f04f 0c01 	mov.w	ip, #1
   e1dd4:	e002      	b.n	e1ddc <__cmpdf2+0x4>
   e1dd6:	bf00      	nop

000e1dd8 <__cmpdf2>:
   e1dd8:	f04f 0c01 	mov.w	ip, #1
   e1ddc:	f84d cd04 	str.w	ip, [sp, #-4]!
   e1de0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1de4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1de8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1dec:	bf18      	it	ne
   e1dee:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e1df2:	d01b      	beq.n	e1e2c <__cmpdf2+0x54>
   e1df4:	b001      	add	sp, #4
   e1df6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e1dfa:	bf0c      	ite	eq
   e1dfc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e1e00:	ea91 0f03 	teqne	r1, r3
   e1e04:	bf02      	ittt	eq
   e1e06:	ea90 0f02 	teqeq	r0, r2
   e1e0a:	2000      	moveq	r0, #0
   e1e0c:	4770      	bxeq	lr
   e1e0e:	f110 0f00 	cmn.w	r0, #0
   e1e12:	ea91 0f03 	teq	r1, r3
   e1e16:	bf58      	it	pl
   e1e18:	4299      	cmppl	r1, r3
   e1e1a:	bf08      	it	eq
   e1e1c:	4290      	cmpeq	r0, r2
   e1e1e:	bf2c      	ite	cs
   e1e20:	17d8      	asrcs	r0, r3, #31
   e1e22:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e1e26:	f040 0001 	orr.w	r0, r0, #1
   e1e2a:	4770      	bx	lr
   e1e2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1e30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1e34:	d102      	bne.n	e1e3c <__cmpdf2+0x64>
   e1e36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e1e3a:	d107      	bne.n	e1e4c <__cmpdf2+0x74>
   e1e3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1e40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1e44:	d1d6      	bne.n	e1df4 <__cmpdf2+0x1c>
   e1e46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1e4a:	d0d3      	beq.n	e1df4 <__cmpdf2+0x1c>
   e1e4c:	f85d 0b04 	ldr.w	r0, [sp], #4
   e1e50:	4770      	bx	lr
   e1e52:	bf00      	nop

000e1e54 <__aeabi_cdrcmple>:
   e1e54:	4684      	mov	ip, r0
   e1e56:	4610      	mov	r0, r2
   e1e58:	4662      	mov	r2, ip
   e1e5a:	468c      	mov	ip, r1
   e1e5c:	4619      	mov	r1, r3
   e1e5e:	4663      	mov	r3, ip
   e1e60:	e000      	b.n	e1e64 <__aeabi_cdcmpeq>
   e1e62:	bf00      	nop

000e1e64 <__aeabi_cdcmpeq>:
   e1e64:	b501      	push	{r0, lr}
   e1e66:	f7ff ffb7 	bl	e1dd8 <__cmpdf2>
   e1e6a:	2800      	cmp	r0, #0
   e1e6c:	bf48      	it	mi
   e1e6e:	f110 0f00 	cmnmi.w	r0, #0
   e1e72:	bd01      	pop	{r0, pc}

000e1e74 <__aeabi_dcmpeq>:
   e1e74:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1e78:	f7ff fff4 	bl	e1e64 <__aeabi_cdcmpeq>
   e1e7c:	bf0c      	ite	eq
   e1e7e:	2001      	moveq	r0, #1
   e1e80:	2000      	movne	r0, #0
   e1e82:	f85d fb08 	ldr.w	pc, [sp], #8
   e1e86:	bf00      	nop

000e1e88 <__aeabi_dcmplt>:
   e1e88:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1e8c:	f7ff ffea 	bl	e1e64 <__aeabi_cdcmpeq>
   e1e90:	bf34      	ite	cc
   e1e92:	2001      	movcc	r0, #1
   e1e94:	2000      	movcs	r0, #0
   e1e96:	f85d fb08 	ldr.w	pc, [sp], #8
   e1e9a:	bf00      	nop

000e1e9c <__aeabi_dcmple>:
   e1e9c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1ea0:	f7ff ffe0 	bl	e1e64 <__aeabi_cdcmpeq>
   e1ea4:	bf94      	ite	ls
   e1ea6:	2001      	movls	r0, #1
   e1ea8:	2000      	movhi	r0, #0
   e1eaa:	f85d fb08 	ldr.w	pc, [sp], #8
   e1eae:	bf00      	nop

000e1eb0 <__aeabi_dcmpge>:
   e1eb0:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1eb4:	f7ff ffce 	bl	e1e54 <__aeabi_cdrcmple>
   e1eb8:	bf94      	ite	ls
   e1eba:	2001      	movls	r0, #1
   e1ebc:	2000      	movhi	r0, #0
   e1ebe:	f85d fb08 	ldr.w	pc, [sp], #8
   e1ec2:	bf00      	nop

000e1ec4 <__aeabi_dcmpgt>:
   e1ec4:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1ec8:	f7ff ffc4 	bl	e1e54 <__aeabi_cdrcmple>
   e1ecc:	bf34      	ite	cc
   e1ece:	2001      	movcc	r0, #1
   e1ed0:	2000      	movcs	r0, #0
   e1ed2:	f85d fb08 	ldr.w	pc, [sp], #8
   e1ed6:	bf00      	nop

000e1ed8 <__aeabi_d2iz>:
   e1ed8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1edc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1ee0:	d215      	bcs.n	e1f0e <__aeabi_d2iz+0x36>
   e1ee2:	d511      	bpl.n	e1f08 <__aeabi_d2iz+0x30>
   e1ee4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1ee8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1eec:	d912      	bls.n	e1f14 <__aeabi_d2iz+0x3c>
   e1eee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1ef2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e1ef6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e1efa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e1efe:	fa23 f002 	lsr.w	r0, r3, r2
   e1f02:	bf18      	it	ne
   e1f04:	4240      	negne	r0, r0
   e1f06:	4770      	bx	lr
   e1f08:	f04f 0000 	mov.w	r0, #0
   e1f0c:	4770      	bx	lr
   e1f0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1f12:	d105      	bne.n	e1f20 <__aeabi_d2iz+0x48>
   e1f14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e1f18:	bf08      	it	eq
   e1f1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e1f1e:	4770      	bx	lr
   e1f20:	f04f 0000 	mov.w	r0, #0
   e1f24:	4770      	bx	lr
   e1f26:	bf00      	nop

000e1f28 <__aeabi_d2uiz>:
   e1f28:	004a      	lsls	r2, r1, #1
   e1f2a:	d211      	bcs.n	e1f50 <__aeabi_d2uiz+0x28>
   e1f2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1f30:	d211      	bcs.n	e1f56 <__aeabi_d2uiz+0x2e>
   e1f32:	d50d      	bpl.n	e1f50 <__aeabi_d2uiz+0x28>
   e1f34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1f38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1f3c:	d40e      	bmi.n	e1f5c <__aeabi_d2uiz+0x34>
   e1f3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1f42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e1f46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e1f4a:	fa23 f002 	lsr.w	r0, r3, r2
   e1f4e:	4770      	bx	lr
   e1f50:	f04f 0000 	mov.w	r0, #0
   e1f54:	4770      	bx	lr
   e1f56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1f5a:	d102      	bne.n	e1f62 <__aeabi_d2uiz+0x3a>
   e1f5c:	f04f 30ff 	mov.w	r0, #4294967295
   e1f60:	4770      	bx	lr
   e1f62:	f04f 0000 	mov.w	r0, #0
   e1f66:	4770      	bx	lr

000e1f68 <__aeabi_d2f>:
   e1f68:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1f6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e1f70:	bf24      	itt	cs
   e1f72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e1f76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e1f7a:	d90d      	bls.n	e1f98 <__aeabi_d2f+0x30>
   e1f7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e1f80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e1f84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e1f88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e1f8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e1f90:	bf08      	it	eq
   e1f92:	f020 0001 	biceq.w	r0, r0, #1
   e1f96:	4770      	bx	lr
   e1f98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e1f9c:	d121      	bne.n	e1fe2 <__aeabi_d2f+0x7a>
   e1f9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e1fa2:	bfbc      	itt	lt
   e1fa4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e1fa8:	4770      	bxlt	lr
   e1faa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1fae:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e1fb2:	f1c2 0218 	rsb	r2, r2, #24
   e1fb6:	f1c2 0c20 	rsb	ip, r2, #32
   e1fba:	fa10 f30c 	lsls.w	r3, r0, ip
   e1fbe:	fa20 f002 	lsr.w	r0, r0, r2
   e1fc2:	bf18      	it	ne
   e1fc4:	f040 0001 	orrne.w	r0, r0, #1
   e1fc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1fcc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e1fd0:	fa03 fc0c 	lsl.w	ip, r3, ip
   e1fd4:	ea40 000c 	orr.w	r0, r0, ip
   e1fd8:	fa23 f302 	lsr.w	r3, r3, r2
   e1fdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e1fe0:	e7cc      	b.n	e1f7c <__aeabi_d2f+0x14>
   e1fe2:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e1fe6:	d107      	bne.n	e1ff8 <__aeabi_d2f+0x90>
   e1fe8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e1fec:	bf1e      	ittt	ne
   e1fee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e1ff2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e1ff6:	4770      	bxne	lr
   e1ff8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e1ffc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e2000:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e2004:	4770      	bx	lr
   e2006:	bf00      	nop

000e2008 <atof>:
   e2008:	2100      	movs	r1, #0
   e200a:	f000 bfc9 	b.w	e2fa0 <strtod>
	...

000e2010 <__cxa_atexit>:
   e2010:	b510      	push	{r4, lr}
   e2012:	4c05      	ldr	r4, [pc, #20]	; (e2028 <__cxa_atexit+0x18>)
   e2014:	4613      	mov	r3, r2
   e2016:	b12c      	cbz	r4, e2024 <__cxa_atexit+0x14>
   e2018:	460a      	mov	r2, r1
   e201a:	4601      	mov	r1, r0
   e201c:	2002      	movs	r0, #2
   e201e:	f3af 8000 	nop.w
   e2022:	bd10      	pop	{r4, pc}
   e2024:	4620      	mov	r0, r4
   e2026:	bd10      	pop	{r4, pc}
   e2028:	00000000 	.word	0x00000000

000e202c <localtime>:
   e202c:	b538      	push	{r3, r4, r5, lr}
   e202e:	4b07      	ldr	r3, [pc, #28]	; (e204c <localtime+0x20>)
   e2030:	681c      	ldr	r4, [r3, #0]
   e2032:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e2034:	4605      	mov	r5, r0
   e2036:	b91b      	cbnz	r3, e2040 <localtime+0x14>
   e2038:	2024      	movs	r0, #36	; 0x24
   e203a:	f7fd f8ed 	bl	df218 <malloc>
   e203e:	63e0      	str	r0, [r4, #60]	; 0x3c
   e2040:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e2042:	4628      	mov	r0, r5
   e2044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e2048:	f000 b802 	b.w	e2050 <localtime_r>
   e204c:	2003e260 	.word	0x2003e260

000e2050 <localtime_r>:
   e2050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e2054:	460c      	mov	r4, r1
   e2056:	4680      	mov	r8, r0
   e2058:	f001 fdc4 	bl	e3be4 <__gettzinfo>
   e205c:	4621      	mov	r1, r4
   e205e:	4607      	mov	r7, r0
   e2060:	4640      	mov	r0, r8
   e2062:	f001 fdc3 	bl	e3bec <gmtime_r>
   e2066:	6946      	ldr	r6, [r0, #20]
   e2068:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e206c:	07b3      	lsls	r3, r6, #30
   e206e:	4604      	mov	r4, r0
   e2070:	d105      	bne.n	e207e <localtime_r+0x2e>
   e2072:	2264      	movs	r2, #100	; 0x64
   e2074:	fb96 f3f2 	sdiv	r3, r6, r2
   e2078:	fb02 6313 	mls	r3, r2, r3, r6
   e207c:	b94b      	cbnz	r3, e2092 <localtime_r+0x42>
   e207e:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e2082:	fb96 f3f5 	sdiv	r3, r6, r5
   e2086:	fb05 6513 	mls	r5, r5, r3, r6
   e208a:	fab5 f385 	clz	r3, r5
   e208e:	095b      	lsrs	r3, r3, #5
   e2090:	e000      	b.n	e2094 <localtime_r+0x44>
   e2092:	2301      	movs	r3, #1
   e2094:	4a5f      	ldr	r2, [pc, #380]	; (e2214 <localtime_r+0x1c4>)
   e2096:	2530      	movs	r5, #48	; 0x30
   e2098:	fb05 2503 	mla	r5, r5, r3, r2
   e209c:	f001 f8b8 	bl	e3210 <__tz_lock>
   e20a0:	f001 f8b8 	bl	e3214 <_tzset_unlocked>
   e20a4:	4b5c      	ldr	r3, [pc, #368]	; (e2218 <localtime_r+0x1c8>)
   e20a6:	681b      	ldr	r3, [r3, #0]
   e20a8:	b1f3      	cbz	r3, e20e8 <localtime_r+0x98>
   e20aa:	687b      	ldr	r3, [r7, #4]
   e20ac:	429e      	cmp	r6, r3
   e20ae:	d105      	bne.n	e20bc <localtime_r+0x6c>
   e20b0:	6839      	ldr	r1, [r7, #0]
   e20b2:	f8d8 3000 	ldr.w	r3, [r8]
   e20b6:	69fa      	ldr	r2, [r7, #28]
   e20b8:	b941      	cbnz	r1, e20cc <localtime_r+0x7c>
   e20ba:	e00a      	b.n	e20d2 <localtime_r+0x82>
   e20bc:	4630      	mov	r0, r6
   e20be:	f000 ffff 	bl	e30c0 <__tzcalc_limits>
   e20c2:	2800      	cmp	r0, #0
   e20c4:	d1f4      	bne.n	e20b0 <localtime_r+0x60>
   e20c6:	f04f 33ff 	mov.w	r3, #4294967295
   e20ca:	e00d      	b.n	e20e8 <localtime_r+0x98>
   e20cc:	4293      	cmp	r3, r2
   e20ce:	db08      	blt.n	e20e2 <localtime_r+0x92>
   e20d0:	e001      	b.n	e20d6 <localtime_r+0x86>
   e20d2:	4293      	cmp	r3, r2
   e20d4:	da07      	bge.n	e20e6 <localtime_r+0x96>
   e20d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e20d8:	4293      	cmp	r3, r2
   e20da:	bfac      	ite	ge
   e20dc:	2300      	movge	r3, #0
   e20de:	2301      	movlt	r3, #1
   e20e0:	e002      	b.n	e20e8 <localtime_r+0x98>
   e20e2:	2300      	movs	r3, #0
   e20e4:	e000      	b.n	e20e8 <localtime_r+0x98>
   e20e6:	2301      	movs	r3, #1
   e20e8:	6223      	str	r3, [r4, #32]
   e20ea:	6a23      	ldr	r3, [r4, #32]
   e20ec:	2b01      	cmp	r3, #1
   e20ee:	bf0c      	ite	eq
   e20f0:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e20f2:	6a39      	ldrne	r1, [r7, #32]
   e20f4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e20f8:	203c      	movs	r0, #60	; 0x3c
   e20fa:	fb91 f6f3 	sdiv	r6, r1, r3
   e20fe:	fb03 1316 	mls	r3, r3, r6, r1
   e2102:	6861      	ldr	r1, [r4, #4]
   e2104:	fb93 f2f0 	sdiv	r2, r3, r0
   e2108:	fb00 3012 	mls	r0, r0, r2, r3
   e210c:	6823      	ldr	r3, [r4, #0]
   e210e:	1a89      	subs	r1, r1, r2
   e2110:	68a2      	ldr	r2, [r4, #8]
   e2112:	6061      	str	r1, [r4, #4]
   e2114:	1a1b      	subs	r3, r3, r0
   e2116:	1b92      	subs	r2, r2, r6
   e2118:	2b3b      	cmp	r3, #59	; 0x3b
   e211a:	6023      	str	r3, [r4, #0]
   e211c:	60a2      	str	r2, [r4, #8]
   e211e:	dd03      	ble.n	e2128 <localtime_r+0xd8>
   e2120:	3101      	adds	r1, #1
   e2122:	6061      	str	r1, [r4, #4]
   e2124:	3b3c      	subs	r3, #60	; 0x3c
   e2126:	e004      	b.n	e2132 <localtime_r+0xe2>
   e2128:	2b00      	cmp	r3, #0
   e212a:	da03      	bge.n	e2134 <localtime_r+0xe4>
   e212c:	3901      	subs	r1, #1
   e212e:	6061      	str	r1, [r4, #4]
   e2130:	333c      	adds	r3, #60	; 0x3c
   e2132:	6023      	str	r3, [r4, #0]
   e2134:	6863      	ldr	r3, [r4, #4]
   e2136:	2b3b      	cmp	r3, #59	; 0x3b
   e2138:	dd03      	ble.n	e2142 <localtime_r+0xf2>
   e213a:	3201      	adds	r2, #1
   e213c:	60a2      	str	r2, [r4, #8]
   e213e:	3b3c      	subs	r3, #60	; 0x3c
   e2140:	e004      	b.n	e214c <localtime_r+0xfc>
   e2142:	2b00      	cmp	r3, #0
   e2144:	da03      	bge.n	e214e <localtime_r+0xfe>
   e2146:	3a01      	subs	r2, #1
   e2148:	60a2      	str	r2, [r4, #8]
   e214a:	333c      	adds	r3, #60	; 0x3c
   e214c:	6063      	str	r3, [r4, #4]
   e214e:	68a3      	ldr	r3, [r4, #8]
   e2150:	2b17      	cmp	r3, #23
   e2152:	dd22      	ble.n	e219a <localtime_r+0x14a>
   e2154:	69e2      	ldr	r2, [r4, #28]
   e2156:	3201      	adds	r2, #1
   e2158:	61e2      	str	r2, [r4, #28]
   e215a:	69a2      	ldr	r2, [r4, #24]
   e215c:	3201      	adds	r2, #1
   e215e:	2a06      	cmp	r2, #6
   e2160:	bfc8      	it	gt
   e2162:	2200      	movgt	r2, #0
   e2164:	61a2      	str	r2, [r4, #24]
   e2166:	68e2      	ldr	r2, [r4, #12]
   e2168:	3b18      	subs	r3, #24
   e216a:	3201      	adds	r2, #1
   e216c:	60a3      	str	r3, [r4, #8]
   e216e:	6923      	ldr	r3, [r4, #16]
   e2170:	60e2      	str	r2, [r4, #12]
   e2172:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e2176:	428a      	cmp	r2, r1
   e2178:	dd46      	ble.n	e2208 <localtime_r+0x1b8>
   e217a:	3301      	adds	r3, #1
   e217c:	2b0c      	cmp	r3, #12
   e217e:	bf0c      	ite	eq
   e2180:	6963      	ldreq	r3, [r4, #20]
   e2182:	6123      	strne	r3, [r4, #16]
   e2184:	eba2 0201 	sub.w	r2, r2, r1
   e2188:	60e2      	str	r2, [r4, #12]
   e218a:	bf01      	itttt	eq
   e218c:	3301      	addeq	r3, #1
   e218e:	2200      	moveq	r2, #0
   e2190:	6122      	streq	r2, [r4, #16]
   e2192:	6163      	streq	r3, [r4, #20]
   e2194:	bf08      	it	eq
   e2196:	61e2      	streq	r2, [r4, #28]
   e2198:	e036      	b.n	e2208 <localtime_r+0x1b8>
   e219a:	2b00      	cmp	r3, #0
   e219c:	da34      	bge.n	e2208 <localtime_r+0x1b8>
   e219e:	69e2      	ldr	r2, [r4, #28]
   e21a0:	3a01      	subs	r2, #1
   e21a2:	61e2      	str	r2, [r4, #28]
   e21a4:	69a2      	ldr	r2, [r4, #24]
   e21a6:	3a01      	subs	r2, #1
   e21a8:	bf48      	it	mi
   e21aa:	2206      	movmi	r2, #6
   e21ac:	61a2      	str	r2, [r4, #24]
   e21ae:	68e2      	ldr	r2, [r4, #12]
   e21b0:	3318      	adds	r3, #24
   e21b2:	3a01      	subs	r2, #1
   e21b4:	60e2      	str	r2, [r4, #12]
   e21b6:	60a3      	str	r3, [r4, #8]
   e21b8:	bb32      	cbnz	r2, e2208 <localtime_r+0x1b8>
   e21ba:	6923      	ldr	r3, [r4, #16]
   e21bc:	3b01      	subs	r3, #1
   e21be:	d401      	bmi.n	e21c4 <localtime_r+0x174>
   e21c0:	6123      	str	r3, [r4, #16]
   e21c2:	e01d      	b.n	e2200 <localtime_r+0x1b0>
   e21c4:	230b      	movs	r3, #11
   e21c6:	6123      	str	r3, [r4, #16]
   e21c8:	6963      	ldr	r3, [r4, #20]
   e21ca:	1e5a      	subs	r2, r3, #1
   e21cc:	f012 0f03 	tst.w	r2, #3
   e21d0:	6162      	str	r2, [r4, #20]
   e21d2:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e21d6:	d105      	bne.n	e21e4 <localtime_r+0x194>
   e21d8:	2164      	movs	r1, #100	; 0x64
   e21da:	fb93 f2f1 	sdiv	r2, r3, r1
   e21de:	fb01 3212 	mls	r2, r1, r2, r3
   e21e2:	b94a      	cbnz	r2, e21f8 <localtime_r+0x1a8>
   e21e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e21e8:	fb93 f2f1 	sdiv	r2, r3, r1
   e21ec:	fb01 3312 	mls	r3, r1, r2, r3
   e21f0:	fab3 f383 	clz	r3, r3
   e21f4:	095b      	lsrs	r3, r3, #5
   e21f6:	e000      	b.n	e21fa <localtime_r+0x1aa>
   e21f8:	2301      	movs	r3, #1
   e21fa:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e21fe:	61e3      	str	r3, [r4, #28]
   e2200:	6923      	ldr	r3, [r4, #16]
   e2202:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e2206:	60e3      	str	r3, [r4, #12]
   e2208:	f001 f803 	bl	e3212 <__tz_unlock>
   e220c:	4620      	mov	r0, r4
   e220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e2212:	bf00      	nop
   e2214:	000e4b2c 	.word	0x000e4b2c
   e2218:	2003e7e4 	.word	0x2003e7e4

000e221c <_localeconv_r>:
   e221c:	4800      	ldr	r0, [pc, #0]	; (e2220 <_localeconv_r+0x4>)
   e221e:	4770      	bx	lr
   e2220:	2003e264 	.word	0x2003e264

000e2224 <memcmp>:
   e2224:	b510      	push	{r4, lr}
   e2226:	3901      	subs	r1, #1
   e2228:	4402      	add	r2, r0
   e222a:	4290      	cmp	r0, r2
   e222c:	d007      	beq.n	e223e <memcmp+0x1a>
   e222e:	f810 3b01 	ldrb.w	r3, [r0], #1
   e2232:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e2236:	42a3      	cmp	r3, r4
   e2238:	d0f7      	beq.n	e222a <memcmp+0x6>
   e223a:	1b18      	subs	r0, r3, r4
   e223c:	bd10      	pop	{r4, pc}
   e223e:	2000      	movs	r0, #0
   e2240:	bd10      	pop	{r4, pc}

000e2242 <memcpy>:
   e2242:	b510      	push	{r4, lr}
   e2244:	1e43      	subs	r3, r0, #1
   e2246:	440a      	add	r2, r1
   e2248:	4291      	cmp	r1, r2
   e224a:	d004      	beq.n	e2256 <memcpy+0x14>
   e224c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2250:	f803 4f01 	strb.w	r4, [r3, #1]!
   e2254:	e7f8      	b.n	e2248 <memcpy+0x6>
   e2256:	bd10      	pop	{r4, pc}

000e2258 <memset>:
   e2258:	4402      	add	r2, r0
   e225a:	4603      	mov	r3, r0
   e225c:	4293      	cmp	r3, r2
   e225e:	d002      	beq.n	e2266 <memset+0xe>
   e2260:	f803 1b01 	strb.w	r1, [r3], #1
   e2264:	e7fa      	b.n	e225c <memset+0x4>
   e2266:	4770      	bx	lr

000e2268 <srand>:
   e2268:	b538      	push	{r3, r4, r5, lr}
   e226a:	4b12      	ldr	r3, [pc, #72]	; (e22b4 <srand+0x4c>)
   e226c:	681c      	ldr	r4, [r3, #0]
   e226e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2270:	4605      	mov	r5, r0
   e2272:	b9d3      	cbnz	r3, e22aa <srand+0x42>
   e2274:	2018      	movs	r0, #24
   e2276:	f7fc ffcf 	bl	df218 <malloc>
   e227a:	f243 330e 	movw	r3, #13070	; 0x330e
   e227e:	63a0      	str	r0, [r4, #56]	; 0x38
   e2280:	8003      	strh	r3, [r0, #0]
   e2282:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e2286:	8043      	strh	r3, [r0, #2]
   e2288:	f241 2334 	movw	r3, #4660	; 0x1234
   e228c:	8083      	strh	r3, [r0, #4]
   e228e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e2292:	80c3      	strh	r3, [r0, #6]
   e2294:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e2298:	8103      	strh	r3, [r0, #8]
   e229a:	2305      	movs	r3, #5
   e229c:	8143      	strh	r3, [r0, #10]
   e229e:	230b      	movs	r3, #11
   e22a0:	8183      	strh	r3, [r0, #12]
   e22a2:	2201      	movs	r2, #1
   e22a4:	2300      	movs	r3, #0
   e22a6:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e22aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e22ac:	2200      	movs	r2, #0
   e22ae:	611d      	str	r5, [r3, #16]
   e22b0:	615a      	str	r2, [r3, #20]
   e22b2:	bd38      	pop	{r3, r4, r5, pc}
   e22b4:	2003e260 	.word	0x2003e260

000e22b8 <strcmp>:
   e22b8:	f810 2b01 	ldrb.w	r2, [r0], #1
   e22bc:	f811 3b01 	ldrb.w	r3, [r1], #1
   e22c0:	2a01      	cmp	r2, #1
   e22c2:	bf28      	it	cs
   e22c4:	429a      	cmpcs	r2, r3
   e22c6:	d0f7      	beq.n	e22b8 <strcmp>
   e22c8:	1ad0      	subs	r0, r2, r3
   e22ca:	4770      	bx	lr

000e22cc <strcpy>:
   e22cc:	4603      	mov	r3, r0
   e22ce:	f811 2b01 	ldrb.w	r2, [r1], #1
   e22d2:	f803 2b01 	strb.w	r2, [r3], #1
   e22d6:	2a00      	cmp	r2, #0
   e22d8:	d1f9      	bne.n	e22ce <strcpy+0x2>
   e22da:	4770      	bx	lr

000e22dc <strdup>:
   e22dc:	4b02      	ldr	r3, [pc, #8]	; (e22e8 <strdup+0xc>)
   e22de:	4601      	mov	r1, r0
   e22e0:	6818      	ldr	r0, [r3, #0]
   e22e2:	f000 b803 	b.w	e22ec <_strdup_r>
   e22e6:	bf00      	nop
   e22e8:	2003e260 	.word	0x2003e260

000e22ec <_strdup_r>:
   e22ec:	b570      	push	{r4, r5, r6, lr}
   e22ee:	4606      	mov	r6, r0
   e22f0:	4608      	mov	r0, r1
   e22f2:	460c      	mov	r4, r1
   e22f4:	f000 f80d 	bl	e2312 <strlen>
   e22f8:	1c45      	adds	r5, r0, #1
   e22fa:	4629      	mov	r1, r5
   e22fc:	4630      	mov	r0, r6
   e22fe:	f7fc ffb3 	bl	df268 <_malloc_r>
   e2302:	4606      	mov	r6, r0
   e2304:	b118      	cbz	r0, e230e <_strdup_r+0x22>
   e2306:	462a      	mov	r2, r5
   e2308:	4621      	mov	r1, r4
   e230a:	f7ff ff9a 	bl	e2242 <memcpy>
   e230e:	4630      	mov	r0, r6
   e2310:	bd70      	pop	{r4, r5, r6, pc}

000e2312 <strlen>:
   e2312:	4603      	mov	r3, r0
   e2314:	f813 2b01 	ldrb.w	r2, [r3], #1
   e2318:	2a00      	cmp	r2, #0
   e231a:	d1fb      	bne.n	e2314 <strlen+0x2>
   e231c:	1a18      	subs	r0, r3, r0
   e231e:	3801      	subs	r0, #1
   e2320:	4770      	bx	lr

000e2322 <strncmp>:
   e2322:	b530      	push	{r4, r5, lr}
   e2324:	b182      	cbz	r2, e2348 <strncmp+0x26>
   e2326:	1e45      	subs	r5, r0, #1
   e2328:	3901      	subs	r1, #1
   e232a:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e232e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e2332:	42a3      	cmp	r3, r4
   e2334:	d106      	bne.n	e2344 <strncmp+0x22>
   e2336:	43ec      	mvns	r4, r5
   e2338:	4414      	add	r4, r2
   e233a:	42e0      	cmn	r0, r4
   e233c:	d001      	beq.n	e2342 <strncmp+0x20>
   e233e:	2b00      	cmp	r3, #0
   e2340:	d1f3      	bne.n	e232a <strncmp+0x8>
   e2342:	461c      	mov	r4, r3
   e2344:	1b18      	subs	r0, r3, r4
   e2346:	bd30      	pop	{r4, r5, pc}
   e2348:	4610      	mov	r0, r2
   e234a:	bd30      	pop	{r4, r5, pc}

000e234c <strnlen>:
   e234c:	b510      	push	{r4, lr}
   e234e:	4603      	mov	r3, r0
   e2350:	4401      	add	r1, r0
   e2352:	428b      	cmp	r3, r1
   e2354:	d004      	beq.n	e2360 <strnlen+0x14>
   e2356:	781a      	ldrb	r2, [r3, #0]
   e2358:	1c5c      	adds	r4, r3, #1
   e235a:	b10a      	cbz	r2, e2360 <strnlen+0x14>
   e235c:	4623      	mov	r3, r4
   e235e:	e7f8      	b.n	e2352 <strnlen+0x6>
   e2360:	1a18      	subs	r0, r3, r0
   e2362:	bd10      	pop	{r4, pc}

000e2364 <sulp>:
   e2364:	b570      	push	{r4, r5, r6, lr}
   e2366:	4604      	mov	r4, r0
   e2368:	460d      	mov	r5, r1
   e236a:	ec45 4b10 	vmov	d0, r4, r5
   e236e:	4616      	mov	r6, r2
   e2370:	f001 ff9a 	bl	e42a8 <__ulp>
   e2374:	ec51 0b10 	vmov	r0, r1, d0
   e2378:	b17e      	cbz	r6, e239a <sulp+0x36>
   e237a:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e237e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2382:	2b00      	cmp	r3, #0
   e2384:	dd09      	ble.n	e239a <sulp+0x36>
   e2386:	051b      	lsls	r3, r3, #20
   e2388:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e238c:	2400      	movs	r4, #0
   e238e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e2392:	4622      	mov	r2, r4
   e2394:	462b      	mov	r3, r5
   e2396:	f7ff fb05 	bl	e19a4 <__aeabi_dmul>
   e239a:	bd70      	pop	{r4, r5, r6, pc}
   e239c:	0000      	movs	r0, r0
	...

000e23a0 <_strtod_r>:
   e23a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e23a4:	b09d      	sub	sp, #116	; 0x74
   e23a6:	2300      	movs	r3, #0
   e23a8:	9002      	str	r0, [sp, #8]
   e23aa:	460c      	mov	r4, r1
   e23ac:	9213      	str	r2, [sp, #76]	; 0x4c
   e23ae:	9318      	str	r3, [sp, #96]	; 0x60
   e23b0:	f04f 0a00 	mov.w	sl, #0
   e23b4:	f04f 0b00 	mov.w	fp, #0
   e23b8:	9117      	str	r1, [sp, #92]	; 0x5c
   e23ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e23bc:	781a      	ldrb	r2, [r3, #0]
   e23be:	2a0d      	cmp	r2, #13
   e23c0:	d805      	bhi.n	e23ce <_strtod_r+0x2e>
   e23c2:	2a09      	cmp	r2, #9
   e23c4:	d213      	bcs.n	e23ee <_strtod_r+0x4e>
   e23c6:	2a00      	cmp	r2, #0
   e23c8:	f000 81ac 	beq.w	e2724 <_strtod_r+0x384>
   e23cc:	e012      	b.n	e23f4 <_strtod_r+0x54>
   e23ce:	2a2b      	cmp	r2, #43	; 0x2b
   e23d0:	d004      	beq.n	e23dc <_strtod_r+0x3c>
   e23d2:	2a2d      	cmp	r2, #45	; 0x2d
   e23d4:	d004      	beq.n	e23e0 <_strtod_r+0x40>
   e23d6:	2a20      	cmp	r2, #32
   e23d8:	d10c      	bne.n	e23f4 <_strtod_r+0x54>
   e23da:	e008      	b.n	e23ee <_strtod_r+0x4e>
   e23dc:	2200      	movs	r2, #0
   e23de:	e000      	b.n	e23e2 <_strtod_r+0x42>
   e23e0:	2201      	movs	r2, #1
   e23e2:	920c      	str	r2, [sp, #48]	; 0x30
   e23e4:	1c5a      	adds	r2, r3, #1
   e23e6:	9217      	str	r2, [sp, #92]	; 0x5c
   e23e8:	785b      	ldrb	r3, [r3, #1]
   e23ea:	b92b      	cbnz	r3, e23f8 <_strtod_r+0x58>
   e23ec:	e19a      	b.n	e2724 <_strtod_r+0x384>
   e23ee:	3301      	adds	r3, #1
   e23f0:	9317      	str	r3, [sp, #92]	; 0x5c
   e23f2:	e7e2      	b.n	e23ba <_strtod_r+0x1a>
   e23f4:	2300      	movs	r3, #0
   e23f6:	930c      	str	r3, [sp, #48]	; 0x30
   e23f8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e23fa:	782b      	ldrb	r3, [r5, #0]
   e23fc:	2b30      	cmp	r3, #48	; 0x30
   e23fe:	d15c      	bne.n	e24ba <_strtod_r+0x11a>
   e2400:	786b      	ldrb	r3, [r5, #1]
   e2402:	2b58      	cmp	r3, #88	; 0x58
   e2404:	d001      	beq.n	e240a <_strtod_r+0x6a>
   e2406:	2b78      	cmp	r3, #120	; 0x78
   e2408:	d14c      	bne.n	e24a4 <_strtod_r+0x104>
   e240a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e240c:	9301      	str	r3, [sp, #4]
   e240e:	ab18      	add	r3, sp, #96	; 0x60
   e2410:	9300      	str	r3, [sp, #0]
   e2412:	4aa9      	ldr	r2, [pc, #676]	; (e26b8 <_strtod_r+0x318>)
   e2414:	9802      	ldr	r0, [sp, #8]
   e2416:	ab19      	add	r3, sp, #100	; 0x64
   e2418:	a917      	add	r1, sp, #92	; 0x5c
   e241a:	f001 f8cc 	bl	e35b6 <__gethex>
   e241e:	f010 0607 	ands.w	r6, r0, #7
   e2422:	4604      	mov	r4, r0
   e2424:	f000 8587 	beq.w	e2f36 <_strtod_r+0xb96>
   e2428:	2e06      	cmp	r6, #6
   e242a:	d105      	bne.n	e2438 <_strtod_r+0x98>
   e242c:	3501      	adds	r5, #1
   e242e:	2300      	movs	r3, #0
   e2430:	9517      	str	r5, [sp, #92]	; 0x5c
   e2432:	930c      	str	r3, [sp, #48]	; 0x30
   e2434:	f000 bd7f 	b.w	e2f36 <_strtod_r+0xb96>
   e2438:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e243a:	b13a      	cbz	r2, e244c <_strtod_r+0xac>
   e243c:	2135      	movs	r1, #53	; 0x35
   e243e:	a81a      	add	r0, sp, #104	; 0x68
   e2440:	f002 f81f 	bl	e4482 <__copybits>
   e2444:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2446:	9802      	ldr	r0, [sp, #8]
   e2448:	f001 fc9d 	bl	e3d86 <_Bfree>
   e244c:	2e06      	cmp	r6, #6
   e244e:	d822      	bhi.n	e2496 <_strtod_r+0xf6>
   e2450:	e8df f006 	tbb	[pc, r6]
   e2454:	18080d04 	.word	0x18080d04
   e2458:	0d1d      	.short	0x0d1d
   e245a:	04          	.byte	0x04
   e245b:	00          	.byte	0x00
   e245c:	f04f 0b00 	mov.w	fp, #0
   e2460:	46da      	mov	sl, fp
   e2462:	e018      	b.n	e2496 <_strtod_r+0xf6>
   e2464:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e2468:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e246c:	e013      	b.n	e2496 <_strtod_r+0xf6>
   e246e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2470:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e2472:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e2476:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e247a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e247e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e2482:	e008      	b.n	e2496 <_strtod_r+0xf6>
   e2484:	f8df b234 	ldr.w	fp, [pc, #564]	; e26bc <_strtod_r+0x31c>
   e2488:	f04f 0a00 	mov.w	sl, #0
   e248c:	e003      	b.n	e2496 <_strtod_r+0xf6>
   e248e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e2492:	f04f 3aff 	mov.w	sl, #4294967295
   e2496:	0721      	lsls	r1, r4, #28
   e2498:	f140 854d 	bpl.w	e2f36 <_strtod_r+0xb96>
   e249c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e24a0:	f000 bd49 	b.w	e2f36 <_strtod_r+0xb96>
   e24a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e24a6:	1c5a      	adds	r2, r3, #1
   e24a8:	9217      	str	r2, [sp, #92]	; 0x5c
   e24aa:	785b      	ldrb	r3, [r3, #1]
   e24ac:	2b30      	cmp	r3, #48	; 0x30
   e24ae:	d0f9      	beq.n	e24a4 <_strtod_r+0x104>
   e24b0:	2b00      	cmp	r3, #0
   e24b2:	f000 8540 	beq.w	e2f36 <_strtod_r+0xb96>
   e24b6:	2301      	movs	r3, #1
   e24b8:	e000      	b.n	e24bc <_strtod_r+0x11c>
   e24ba:	2300      	movs	r3, #0
   e24bc:	f04f 0800 	mov.w	r8, #0
   e24c0:	9306      	str	r3, [sp, #24]
   e24c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e24c4:	9307      	str	r3, [sp, #28]
   e24c6:	f8cd 8014 	str.w	r8, [sp, #20]
   e24ca:	f8cd 8010 	str.w	r8, [sp, #16]
   e24ce:	220a      	movs	r2, #10
   e24d0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e24d2:	782e      	ldrb	r6, [r5, #0]
   e24d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e24d8:	b2d9      	uxtb	r1, r3
   e24da:	2909      	cmp	r1, #9
   e24dc:	d80e      	bhi.n	e24fc <_strtod_r+0x15c>
   e24de:	9904      	ldr	r1, [sp, #16]
   e24e0:	2908      	cmp	r1, #8
   e24e2:	bfdd      	ittte	le
   e24e4:	9905      	ldrle	r1, [sp, #20]
   e24e6:	fb02 3301 	mlale	r3, r2, r1, r3
   e24ea:	9305      	strle	r3, [sp, #20]
   e24ec:	fb02 3808 	mlagt	r8, r2, r8, r3
   e24f0:	9b04      	ldr	r3, [sp, #16]
   e24f2:	3501      	adds	r5, #1
   e24f4:	3301      	adds	r3, #1
   e24f6:	9304      	str	r3, [sp, #16]
   e24f8:	9517      	str	r5, [sp, #92]	; 0x5c
   e24fa:	e7e9      	b.n	e24d0 <_strtod_r+0x130>
   e24fc:	9802      	ldr	r0, [sp, #8]
   e24fe:	f7ff fe8d 	bl	e221c <_localeconv_r>
   e2502:	6807      	ldr	r7, [r0, #0]
   e2504:	9802      	ldr	r0, [sp, #8]
   e2506:	f7ff fe89 	bl	e221c <_localeconv_r>
   e250a:	6800      	ldr	r0, [r0, #0]
   e250c:	f7ff ff01 	bl	e2312 <strlen>
   e2510:	4639      	mov	r1, r7
   e2512:	4602      	mov	r2, r0
   e2514:	4628      	mov	r0, r5
   e2516:	f7ff ff04 	bl	e2322 <strncmp>
   e251a:	4607      	mov	r7, r0
   e251c:	b128      	cbz	r0, e252a <_strtod_r+0x18a>
   e251e:	2000      	movs	r0, #0
   e2520:	4633      	mov	r3, r6
   e2522:	9d04      	ldr	r5, [sp, #16]
   e2524:	4602      	mov	r2, r0
   e2526:	4601      	mov	r1, r0
   e2528:	e057      	b.n	e25da <_strtod_r+0x23a>
   e252a:	9802      	ldr	r0, [sp, #8]
   e252c:	f7ff fe76 	bl	e221c <_localeconv_r>
   e2530:	6800      	ldr	r0, [r0, #0]
   e2532:	f7ff feee 	bl	e2312 <strlen>
   e2536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2538:	181a      	adds	r2, r3, r0
   e253a:	9217      	str	r2, [sp, #92]	; 0x5c
   e253c:	9a04      	ldr	r2, [sp, #16]
   e253e:	5c1b      	ldrb	r3, [r3, r0]
   e2540:	2a00      	cmp	r2, #0
   e2542:	d142      	bne.n	e25ca <_strtod_r+0x22a>
   e2544:	4610      	mov	r0, r2
   e2546:	2b30      	cmp	r3, #48	; 0x30
   e2548:	d105      	bne.n	e2556 <_strtod_r+0x1b6>
   e254a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e254c:	1c5a      	adds	r2, r3, #1
   e254e:	9217      	str	r2, [sp, #92]	; 0x5c
   e2550:	3001      	adds	r0, #1
   e2552:	785b      	ldrb	r3, [r3, #1]
   e2554:	e7f7      	b.n	e2546 <_strtod_r+0x1a6>
   e2556:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e255a:	2a08      	cmp	r2, #8
   e255c:	d843      	bhi.n	e25e6 <_strtod_r+0x246>
   e255e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e2560:	9207      	str	r2, [sp, #28]
   e2562:	4602      	mov	r2, r0
   e2564:	2000      	movs	r0, #0
   e2566:	4605      	mov	r5, r0
   e2568:	3b30      	subs	r3, #48	; 0x30
   e256a:	f100 0101 	add.w	r1, r0, #1
   e256e:	d026      	beq.n	e25be <_strtod_r+0x21e>
   e2570:	440a      	add	r2, r1
   e2572:	eb05 0c00 	add.w	ip, r5, r0
   e2576:	4629      	mov	r1, r5
   e2578:	260a      	movs	r6, #10
   e257a:	4561      	cmp	r1, ip
   e257c:	d00e      	beq.n	e259c <_strtod_r+0x1fc>
   e257e:	3101      	adds	r1, #1
   e2580:	f101 3eff 	add.w	lr, r1, #4294967295
   e2584:	f1be 0f08 	cmp.w	lr, #8
   e2588:	dc03      	bgt.n	e2592 <_strtod_r+0x1f2>
   e258a:	9f05      	ldr	r7, [sp, #20]
   e258c:	4377      	muls	r7, r6
   e258e:	9705      	str	r7, [sp, #20]
   e2590:	e7f3      	b.n	e257a <_strtod_r+0x1da>
   e2592:	2910      	cmp	r1, #16
   e2594:	bfd8      	it	le
   e2596:	fb06 f808 	mulle.w	r8, r6, r8
   e259a:	e7ee      	b.n	e257a <_strtod_r+0x1da>
   e259c:	4428      	add	r0, r5
   e259e:	2808      	cmp	r0, #8
   e25a0:	f100 0501 	add.w	r5, r0, #1
   e25a4:	dc05      	bgt.n	e25b2 <_strtod_r+0x212>
   e25a6:	9805      	ldr	r0, [sp, #20]
   e25a8:	210a      	movs	r1, #10
   e25aa:	fb01 3300 	mla	r3, r1, r0, r3
   e25ae:	9305      	str	r3, [sp, #20]
   e25b0:	e004      	b.n	e25bc <_strtod_r+0x21c>
   e25b2:	2d10      	cmp	r5, #16
   e25b4:	bfdc      	itt	le
   e25b6:	210a      	movle	r1, #10
   e25b8:	fb01 3808 	mlale	r8, r1, r8, r3
   e25bc:	2100      	movs	r1, #0
   e25be:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e25c0:	1c58      	adds	r0, r3, #1
   e25c2:	9017      	str	r0, [sp, #92]	; 0x5c
   e25c4:	785b      	ldrb	r3, [r3, #1]
   e25c6:	4608      	mov	r0, r1
   e25c8:	e002      	b.n	e25d0 <_strtod_r+0x230>
   e25ca:	9d04      	ldr	r5, [sp, #16]
   e25cc:	4638      	mov	r0, r7
   e25ce:	463a      	mov	r2, r7
   e25d0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e25d4:	2909      	cmp	r1, #9
   e25d6:	d9c7      	bls.n	e2568 <_strtod_r+0x1c8>
   e25d8:	2101      	movs	r1, #1
   e25da:	2b65      	cmp	r3, #101	; 0x65
   e25dc:	d001      	beq.n	e25e2 <_strtod_r+0x242>
   e25de:	2b45      	cmp	r3, #69	; 0x45
   e25e0:	d151      	bne.n	e2686 <_strtod_r+0x2e6>
   e25e2:	b96d      	cbnz	r5, e2600 <_strtod_r+0x260>
   e25e4:	e004      	b.n	e25f0 <_strtod_r+0x250>
   e25e6:	2b65      	cmp	r3, #101	; 0x65
   e25e8:	f040 84b3 	bne.w	e2f52 <_strtod_r+0xbb2>
   e25ec:	2200      	movs	r2, #0
   e25ee:	2101      	movs	r1, #1
   e25f0:	b928      	cbnz	r0, e25fe <_strtod_r+0x25e>
   e25f2:	9b06      	ldr	r3, [sp, #24]
   e25f4:	2b00      	cmp	r3, #0
   e25f6:	f000 8095 	beq.w	e2724 <_strtod_r+0x384>
   e25fa:	4605      	mov	r5, r0
   e25fc:	e000      	b.n	e2600 <_strtod_r+0x260>
   e25fe:	2500      	movs	r5, #0
   e2600:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e2602:	1c63      	adds	r3, r4, #1
   e2604:	9317      	str	r3, [sp, #92]	; 0x5c
   e2606:	7863      	ldrb	r3, [r4, #1]
   e2608:	2b2b      	cmp	r3, #43	; 0x2b
   e260a:	d006      	beq.n	e261a <_strtod_r+0x27a>
   e260c:	2b2d      	cmp	r3, #45	; 0x2d
   e260e:	d002      	beq.n	e2616 <_strtod_r+0x276>
   e2610:	2600      	movs	r6, #0
   e2612:	9603      	str	r6, [sp, #12]
   e2614:	e006      	b.n	e2624 <_strtod_r+0x284>
   e2616:	2301      	movs	r3, #1
   e2618:	e000      	b.n	e261c <_strtod_r+0x27c>
   e261a:	2300      	movs	r3, #0
   e261c:	9303      	str	r3, [sp, #12]
   e261e:	1ca3      	adds	r3, r4, #2
   e2620:	9317      	str	r3, [sp, #92]	; 0x5c
   e2622:	78a3      	ldrb	r3, [r4, #2]
   e2624:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e2628:	2e09      	cmp	r6, #9
   e262a:	d82b      	bhi.n	e2684 <_strtod_r+0x2e4>
   e262c:	2b30      	cmp	r3, #48	; 0x30
   e262e:	d104      	bne.n	e263a <_strtod_r+0x29a>
   e2630:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2632:	1c5e      	adds	r6, r3, #1
   e2634:	9617      	str	r6, [sp, #92]	; 0x5c
   e2636:	785b      	ldrb	r3, [r3, #1]
   e2638:	e7f8      	b.n	e262c <_strtod_r+0x28c>
   e263a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e263e:	2e08      	cmp	r6, #8
   e2640:	d821      	bhi.n	e2686 <_strtod_r+0x2e6>
   e2642:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e2646:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2648:	f04f 0c0a 	mov.w	ip, #10
   e264c:	461f      	mov	r7, r3
   e264e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2650:	1c5e      	adds	r6, r3, #1
   e2652:	9617      	str	r6, [sp, #92]	; 0x5c
   e2654:	785b      	ldrb	r3, [r3, #1]
   e2656:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e265a:	f1b9 0f09 	cmp.w	r9, #9
   e265e:	d804      	bhi.n	e266a <_strtod_r+0x2ca>
   e2660:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e2664:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e2668:	e7f1      	b.n	e264e <_strtod_r+0x2ae>
   e266a:	1bf6      	subs	r6, r6, r7
   e266c:	2e08      	cmp	r6, #8
   e266e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e2672:	dc02      	bgt.n	e267a <_strtod_r+0x2da>
   e2674:	45f1      	cmp	r9, lr
   e2676:	bfa8      	it	ge
   e2678:	46f1      	movge	r9, lr
   e267a:	9e03      	ldr	r6, [sp, #12]
   e267c:	b12e      	cbz	r6, e268a <_strtod_r+0x2ea>
   e267e:	f1c9 0900 	rsb	r9, r9, #0
   e2682:	e002      	b.n	e268a <_strtod_r+0x2ea>
   e2684:	9417      	str	r4, [sp, #92]	; 0x5c
   e2686:	f04f 0900 	mov.w	r9, #0
   e268a:	2d00      	cmp	r5, #0
   e268c:	d153      	bne.n	e2736 <_strtod_r+0x396>
   e268e:	2800      	cmp	r0, #0
   e2690:	f040 8451 	bne.w	e2f36 <_strtod_r+0xb96>
   e2694:	9a06      	ldr	r2, [sp, #24]
   e2696:	2a00      	cmp	r2, #0
   e2698:	f040 844d 	bne.w	e2f36 <_strtod_r+0xb96>
   e269c:	2900      	cmp	r1, #0
   e269e:	d141      	bne.n	e2724 <_strtod_r+0x384>
   e26a0:	2b4e      	cmp	r3, #78	; 0x4e
   e26a2:	d020      	beq.n	e26e6 <_strtod_r+0x346>
   e26a4:	dc02      	bgt.n	e26ac <_strtod_r+0x30c>
   e26a6:	2b49      	cmp	r3, #73	; 0x49
   e26a8:	d00a      	beq.n	e26c0 <_strtod_r+0x320>
   e26aa:	e03b      	b.n	e2724 <_strtod_r+0x384>
   e26ac:	2b69      	cmp	r3, #105	; 0x69
   e26ae:	d007      	beq.n	e26c0 <_strtod_r+0x320>
   e26b0:	2b6e      	cmp	r3, #110	; 0x6e
   e26b2:	d018      	beq.n	e26e6 <_strtod_r+0x346>
   e26b4:	e036      	b.n	e2724 <_strtod_r+0x384>
   e26b6:	bf00      	nop
   e26b8:	000e4b8c 	.word	0x000e4b8c
   e26bc:	7ff00000 	.word	0x7ff00000
   e26c0:	49a8      	ldr	r1, [pc, #672]	; (e2964 <_strtod_r+0x5c4>)
   e26c2:	a817      	add	r0, sp, #92	; 0x5c
   e26c4:	f001 f9a8 	bl	e3a18 <__match>
   e26c8:	b360      	cbz	r0, e2724 <_strtod_r+0x384>
   e26ca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e26cc:	49a6      	ldr	r1, [pc, #664]	; (e2968 <_strtod_r+0x5c8>)
   e26ce:	3b01      	subs	r3, #1
   e26d0:	a817      	add	r0, sp, #92	; 0x5c
   e26d2:	9317      	str	r3, [sp, #92]	; 0x5c
   e26d4:	f001 f9a0 	bl	e3a18 <__match>
   e26d8:	b910      	cbnz	r0, e26e0 <_strtod_r+0x340>
   e26da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e26dc:	3301      	adds	r3, #1
   e26de:	9317      	str	r3, [sp, #92]	; 0x5c
   e26e0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e2984 <_strtod_r+0x5e4>
   e26e4:	e01a      	b.n	e271c <_strtod_r+0x37c>
   e26e6:	49a1      	ldr	r1, [pc, #644]	; (e296c <_strtod_r+0x5cc>)
   e26e8:	a817      	add	r0, sp, #92	; 0x5c
   e26ea:	f001 f995 	bl	e3a18 <__match>
   e26ee:	b1c8      	cbz	r0, e2724 <_strtod_r+0x384>
   e26f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e26f2:	781b      	ldrb	r3, [r3, #0]
   e26f4:	2b28      	cmp	r3, #40	; 0x28
   e26f6:	d10f      	bne.n	e2718 <_strtod_r+0x378>
   e26f8:	aa1a      	add	r2, sp, #104	; 0x68
   e26fa:	499d      	ldr	r1, [pc, #628]	; (e2970 <_strtod_r+0x5d0>)
   e26fc:	a817      	add	r0, sp, #92	; 0x5c
   e26fe:	f001 f99e 	bl	e3a3e <__hexnan>
   e2702:	2805      	cmp	r0, #5
   e2704:	d108      	bne.n	e2718 <_strtod_r+0x378>
   e2706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2708:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e270c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e2710:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e2714:	f000 bc0f 	b.w	e2f36 <_strtod_r+0xb96>
   e2718:	f8df b26c 	ldr.w	fp, [pc, #620]	; e2988 <_strtod_r+0x5e8>
   e271c:	f04f 0a00 	mov.w	sl, #0
   e2720:	f000 bc09 	b.w	e2f36 <_strtod_r+0xb96>
   e2724:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2726:	9417      	str	r4, [sp, #92]	; 0x5c
   e2728:	2b00      	cmp	r3, #0
   e272a:	f000 840f 	beq.w	e2f4c <_strtod_r+0xbac>
   e272e:	2300      	movs	r3, #0
   e2730:	930c      	str	r3, [sp, #48]	; 0x30
   e2732:	f000 bc02 	b.w	e2f3a <_strtod_r+0xb9a>
   e2736:	9b04      	ldr	r3, [sp, #16]
   e2738:	9805      	ldr	r0, [sp, #20]
   e273a:	2b00      	cmp	r3, #0
   e273c:	bf08      	it	eq
   e273e:	462b      	moveq	r3, r5
   e2740:	2d10      	cmp	r5, #16
   e2742:	462c      	mov	r4, r5
   e2744:	ebc2 0909 	rsb	r9, r2, r9
   e2748:	bfa8      	it	ge
   e274a:	2410      	movge	r4, #16
   e274c:	9304      	str	r3, [sp, #16]
   e274e:	f7ff f8b3 	bl	e18b8 <__aeabi_ui2d>
   e2752:	2c09      	cmp	r4, #9
   e2754:	4682      	mov	sl, r0
   e2756:	468b      	mov	fp, r1
   e2758:	dd13      	ble.n	e2782 <_strtod_r+0x3e2>
   e275a:	4b86      	ldr	r3, [pc, #536]	; (e2974 <_strtod_r+0x5d4>)
   e275c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e2760:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e2764:	f7ff f91e 	bl	e19a4 <__aeabi_dmul>
   e2768:	4606      	mov	r6, r0
   e276a:	4640      	mov	r0, r8
   e276c:	460f      	mov	r7, r1
   e276e:	f7ff f8a3 	bl	e18b8 <__aeabi_ui2d>
   e2772:	4602      	mov	r2, r0
   e2774:	460b      	mov	r3, r1
   e2776:	4630      	mov	r0, r6
   e2778:	4639      	mov	r1, r7
   e277a:	f7fe ff61 	bl	e1640 <__adddf3>
   e277e:	4682      	mov	sl, r0
   e2780:	468b      	mov	fp, r1
   e2782:	2d0f      	cmp	r5, #15
   e2784:	dc36      	bgt.n	e27f4 <_strtod_r+0x454>
   e2786:	f1b9 0f00 	cmp.w	r9, #0
   e278a:	f000 83d4 	beq.w	e2f36 <_strtod_r+0xb96>
   e278e:	dd24      	ble.n	e27da <_strtod_r+0x43a>
   e2790:	f1b9 0f16 	cmp.w	r9, #22
   e2794:	dc07      	bgt.n	e27a6 <_strtod_r+0x406>
   e2796:	4d77      	ldr	r5, [pc, #476]	; (e2974 <_strtod_r+0x5d4>)
   e2798:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e279c:	4652      	mov	r2, sl
   e279e:	465b      	mov	r3, fp
   e27a0:	e9d9 0100 	ldrd	r0, r1, [r9]
   e27a4:	e014      	b.n	e27d0 <_strtod_r+0x430>
   e27a6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e27aa:	4599      	cmp	r9, r3
   e27ac:	dc22      	bgt.n	e27f4 <_strtod_r+0x454>
   e27ae:	4c71      	ldr	r4, [pc, #452]	; (e2974 <_strtod_r+0x5d4>)
   e27b0:	f1c5 050f 	rsb	r5, r5, #15
   e27b4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e27b8:	ebc5 0509 	rsb	r5, r5, r9
   e27bc:	4652      	mov	r2, sl
   e27be:	465b      	mov	r3, fp
   e27c0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e27c4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e27c8:	f7ff f8ec 	bl	e19a4 <__aeabi_dmul>
   e27cc:	e9d4 2300 	ldrd	r2, r3, [r4]
   e27d0:	f7ff f8e8 	bl	e19a4 <__aeabi_dmul>
   e27d4:	4682      	mov	sl, r0
   e27d6:	468b      	mov	fp, r1
   e27d8:	e3ad      	b.n	e2f36 <_strtod_r+0xb96>
   e27da:	f119 0f16 	cmn.w	r9, #22
   e27de:	db09      	blt.n	e27f4 <_strtod_r+0x454>
   e27e0:	4d64      	ldr	r5, [pc, #400]	; (e2974 <_strtod_r+0x5d4>)
   e27e2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e27e6:	e9d9 2300 	ldrd	r2, r3, [r9]
   e27ea:	4650      	mov	r0, sl
   e27ec:	4659      	mov	r1, fp
   e27ee:	f7ff fa03 	bl	e1bf8 <__aeabi_ddiv>
   e27f2:	e7ef      	b.n	e27d4 <_strtod_r+0x434>
   e27f4:	1b2c      	subs	r4, r5, r4
   e27f6:	444c      	add	r4, r9
   e27f8:	2c00      	cmp	r4, #0
   e27fa:	dd57      	ble.n	e28ac <_strtod_r+0x50c>
   e27fc:	f014 010f 	ands.w	r1, r4, #15
   e2800:	d00a      	beq.n	e2818 <_strtod_r+0x478>
   e2802:	4b5c      	ldr	r3, [pc, #368]	; (e2974 <_strtod_r+0x5d4>)
   e2804:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e2808:	4652      	mov	r2, sl
   e280a:	465b      	mov	r3, fp
   e280c:	e9d1 0100 	ldrd	r0, r1, [r1]
   e2810:	f7ff f8c8 	bl	e19a4 <__aeabi_dmul>
   e2814:	4682      	mov	sl, r0
   e2816:	468b      	mov	fp, r1
   e2818:	f034 040f 	bics.w	r4, r4, #15
   e281c:	f000 80b8 	beq.w	e2990 <_strtod_r+0x5f0>
   e2820:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e2824:	dd0b      	ble.n	e283e <_strtod_r+0x49e>
   e2826:	2400      	movs	r4, #0
   e2828:	4625      	mov	r5, r4
   e282a:	9405      	str	r4, [sp, #20]
   e282c:	9404      	str	r4, [sp, #16]
   e282e:	9a02      	ldr	r2, [sp, #8]
   e2830:	f8df b150 	ldr.w	fp, [pc, #336]	; e2984 <_strtod_r+0x5e4>
   e2834:	2322      	movs	r3, #34	; 0x22
   e2836:	6013      	str	r3, [r2, #0]
   e2838:	f04f 0a00 	mov.w	sl, #0
   e283c:	e187      	b.n	e2b4e <_strtod_r+0x7ae>
   e283e:	4e4e      	ldr	r6, [pc, #312]	; (e2978 <_strtod_r+0x5d8>)
   e2840:	2300      	movs	r3, #0
   e2842:	1124      	asrs	r4, r4, #4
   e2844:	4650      	mov	r0, sl
   e2846:	4659      	mov	r1, fp
   e2848:	4698      	mov	r8, r3
   e284a:	4637      	mov	r7, r6
   e284c:	2c01      	cmp	r4, #1
   e284e:	dd0b      	ble.n	e2868 <_strtod_r+0x4c8>
   e2850:	07e2      	lsls	r2, r4, #31
   e2852:	d504      	bpl.n	e285e <_strtod_r+0x4be>
   e2854:	e9d6 2300 	ldrd	r2, r3, [r6]
   e2858:	f7ff f8a4 	bl	e19a4 <__aeabi_dmul>
   e285c:	2301      	movs	r3, #1
   e285e:	f108 0801 	add.w	r8, r8, #1
   e2862:	1064      	asrs	r4, r4, #1
   e2864:	3608      	adds	r6, #8
   e2866:	e7f1      	b.n	e284c <_strtod_r+0x4ac>
   e2868:	b10b      	cbz	r3, e286e <_strtod_r+0x4ce>
   e286a:	4682      	mov	sl, r0
   e286c:	468b      	mov	fp, r1
   e286e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2872:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e2876:	4652      	mov	r2, sl
   e2878:	465b      	mov	r3, fp
   e287a:	e9d7 0100 	ldrd	r0, r1, [r7]
   e287e:	f7ff f891 	bl	e19a4 <__aeabi_dmul>
   e2882:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2886:	468b      	mov	fp, r1
   e2888:	460a      	mov	r2, r1
   e288a:	0d1b      	lsrs	r3, r3, #20
   e288c:	493b      	ldr	r1, [pc, #236]	; (e297c <_strtod_r+0x5dc>)
   e288e:	051b      	lsls	r3, r3, #20
   e2890:	428b      	cmp	r3, r1
   e2892:	4682      	mov	sl, r0
   e2894:	d8c7      	bhi.n	e2826 <_strtod_r+0x486>
   e2896:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e289a:	428b      	cmp	r3, r1
   e289c:	bf86      	itte	hi
   e289e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e298c <_strtod_r+0x5ec>
   e28a2:	f04f 3aff 	movhi.w	sl, #4294967295
   e28a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e28aa:	e071      	b.n	e2990 <_strtod_r+0x5f0>
   e28ac:	d070      	beq.n	e2990 <_strtod_r+0x5f0>
   e28ae:	4264      	negs	r4, r4
   e28b0:	f014 020f 	ands.w	r2, r4, #15
   e28b4:	d00a      	beq.n	e28cc <_strtod_r+0x52c>
   e28b6:	4b2f      	ldr	r3, [pc, #188]	; (e2974 <_strtod_r+0x5d4>)
   e28b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e28bc:	4650      	mov	r0, sl
   e28be:	4659      	mov	r1, fp
   e28c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e28c4:	f7ff f998 	bl	e1bf8 <__aeabi_ddiv>
   e28c8:	4682      	mov	sl, r0
   e28ca:	468b      	mov	fp, r1
   e28cc:	1124      	asrs	r4, r4, #4
   e28ce:	d05f      	beq.n	e2990 <_strtod_r+0x5f0>
   e28d0:	2c1f      	cmp	r4, #31
   e28d2:	dd04      	ble.n	e28de <_strtod_r+0x53e>
   e28d4:	2400      	movs	r4, #0
   e28d6:	4625      	mov	r5, r4
   e28d8:	9405      	str	r4, [sp, #20]
   e28da:	9404      	str	r4, [sp, #16]
   e28dc:	e130      	b.n	e2b40 <_strtod_r+0x7a0>
   e28de:	f014 0f10 	tst.w	r4, #16
   e28e2:	bf0c      	ite	eq
   e28e4:	2300      	moveq	r3, #0
   e28e6:	236a      	movne	r3, #106	; 0x6a
   e28e8:	4e25      	ldr	r6, [pc, #148]	; (e2980 <_strtod_r+0x5e0>)
   e28ea:	9303      	str	r3, [sp, #12]
   e28ec:	4650      	mov	r0, sl
   e28ee:	4659      	mov	r1, fp
   e28f0:	2300      	movs	r3, #0
   e28f2:	2c00      	cmp	r4, #0
   e28f4:	dd09      	ble.n	e290a <_strtod_r+0x56a>
   e28f6:	07e2      	lsls	r2, r4, #31
   e28f8:	d504      	bpl.n	e2904 <_strtod_r+0x564>
   e28fa:	e9d6 2300 	ldrd	r2, r3, [r6]
   e28fe:	f7ff f851 	bl	e19a4 <__aeabi_dmul>
   e2902:	2301      	movs	r3, #1
   e2904:	1064      	asrs	r4, r4, #1
   e2906:	3608      	adds	r6, #8
   e2908:	e7f3      	b.n	e28f2 <_strtod_r+0x552>
   e290a:	b10b      	cbz	r3, e2910 <_strtod_r+0x570>
   e290c:	4682      	mov	sl, r0
   e290e:	468b      	mov	fp, r1
   e2910:	9b03      	ldr	r3, [sp, #12]
   e2912:	b1eb      	cbz	r3, e2950 <_strtod_r+0x5b0>
   e2914:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e2918:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e291c:	2b00      	cmp	r3, #0
   e291e:	4659      	mov	r1, fp
   e2920:	dd16      	ble.n	e2950 <_strtod_r+0x5b0>
   e2922:	2b1f      	cmp	r3, #31
   e2924:	dd0e      	ble.n	e2944 <_strtod_r+0x5a4>
   e2926:	2b34      	cmp	r3, #52	; 0x34
   e2928:	bfde      	ittt	le
   e292a:	3b20      	suble	r3, #32
   e292c:	f04f 32ff 	movle.w	r2, #4294967295
   e2930:	fa02 f303 	lslle.w	r3, r2, r3
   e2934:	f04f 0a00 	mov.w	sl, #0
   e2938:	bfcc      	ite	gt
   e293a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e293e:	ea03 0b01 	andle.w	fp, r3, r1
   e2942:	e005      	b.n	e2950 <_strtod_r+0x5b0>
   e2944:	f04f 32ff 	mov.w	r2, #4294967295
   e2948:	fa02 f303 	lsl.w	r3, r2, r3
   e294c:	ea03 0a0a 	and.w	sl, r3, sl
   e2950:	2200      	movs	r2, #0
   e2952:	2300      	movs	r3, #0
   e2954:	4650      	mov	r0, sl
   e2956:	4659      	mov	r1, fp
   e2958:	f7ff fa8c 	bl	e1e74 <__aeabi_dcmpeq>
   e295c:	2800      	cmp	r0, #0
   e295e:	d1b9      	bne.n	e28d4 <_strtod_r+0x534>
   e2960:	e018      	b.n	e2994 <_strtod_r+0x5f4>
   e2962:	bf00      	nop
   e2964:	000e4bb4 	.word	0x000e4bb4
   e2968:	000e4bb7 	.word	0x000e4bb7
   e296c:	000e4bbd 	.word	0x000e4bbd
   e2970:	000e4ba0 	.word	0x000e4ba0
   e2974:	000e4c28 	.word	0x000e4c28
   e2978:	000e4cf0 	.word	0x000e4cf0
   e297c:	7ca00000 	.word	0x7ca00000
   e2980:	000e4bc0 	.word	0x000e4bc0
   e2984:	7ff00000 	.word	0x7ff00000
   e2988:	fff80000 	.word	0xfff80000
   e298c:	7fefffff 	.word	0x7fefffff
   e2990:	2300      	movs	r3, #0
   e2992:	9303      	str	r3, [sp, #12]
   e2994:	9b05      	ldr	r3, [sp, #20]
   e2996:	9300      	str	r3, [sp, #0]
   e2998:	9a04      	ldr	r2, [sp, #16]
   e299a:	9907      	ldr	r1, [sp, #28]
   e299c:	9802      	ldr	r0, [sp, #8]
   e299e:	462b      	mov	r3, r5
   e29a0:	f001 fa43 	bl	e3e2a <__s2b>
   e29a4:	9005      	str	r0, [sp, #20]
   e29a6:	2800      	cmp	r0, #0
   e29a8:	f43f af3d 	beq.w	e2826 <_strtod_r+0x486>
   e29ac:	f1b9 0f00 	cmp.w	r9, #0
   e29b0:	f1c9 0300 	rsb	r3, r9, #0
   e29b4:	bfa8      	it	ge
   e29b6:	2300      	movge	r3, #0
   e29b8:	930d      	str	r3, [sp, #52]	; 0x34
   e29ba:	2400      	movs	r4, #0
   e29bc:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e29c0:	9312      	str	r3, [sp, #72]	; 0x48
   e29c2:	4625      	mov	r5, r4
   e29c4:	9b05      	ldr	r3, [sp, #20]
   e29c6:	9802      	ldr	r0, [sp, #8]
   e29c8:	6859      	ldr	r1, [r3, #4]
   e29ca:	f001 f9a7 	bl	e3d1c <_Balloc>
   e29ce:	9004      	str	r0, [sp, #16]
   e29d0:	2800      	cmp	r0, #0
   e29d2:	f43f af2c 	beq.w	e282e <_strtod_r+0x48e>
   e29d6:	9b05      	ldr	r3, [sp, #20]
   e29d8:	691a      	ldr	r2, [r3, #16]
   e29da:	3202      	adds	r2, #2
   e29dc:	f103 010c 	add.w	r1, r3, #12
   e29e0:	0092      	lsls	r2, r2, #2
   e29e2:	300c      	adds	r0, #12
   e29e4:	f7ff fc2d 	bl	e2242 <memcpy>
   e29e8:	aa1a      	add	r2, sp, #104	; 0x68
   e29ea:	a919      	add	r1, sp, #100	; 0x64
   e29ec:	ec4b ab10 	vmov	d0, sl, fp
   e29f0:	9802      	ldr	r0, [sp, #8]
   e29f2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e29f6:	f001 fccc 	bl	e4392 <__d2b>
   e29fa:	9018      	str	r0, [sp, #96]	; 0x60
   e29fc:	2800      	cmp	r0, #0
   e29fe:	f43f af16 	beq.w	e282e <_strtod_r+0x48e>
   e2a02:	2101      	movs	r1, #1
   e2a04:	9802      	ldr	r0, [sp, #8]
   e2a06:	f001 fa9b 	bl	e3f40 <__i2b>
   e2a0a:	4605      	mov	r5, r0
   e2a0c:	2800      	cmp	r0, #0
   e2a0e:	f43f af0e 	beq.w	e282e <_strtod_r+0x48e>
   e2a12:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e2a14:	9903      	ldr	r1, [sp, #12]
   e2a16:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e2a18:	2b00      	cmp	r3, #0
   e2a1a:	bfad      	iteet	ge
   e2a1c:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e2a1e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e2a20:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e2a24:	eb02 0803 	addge.w	r8, r2, r3
   e2a28:	bfb8      	it	lt
   e2a2a:	1ad2      	sublt	r2, r2, r3
   e2a2c:	eba3 0301 	sub.w	r3, r3, r1
   e2a30:	4433      	add	r3, r6
   e2a32:	49b5      	ldr	r1, [pc, #724]	; (e2d08 <_strtod_r+0x968>)
   e2a34:	bfa8      	it	ge
   e2a36:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e2a38:	3b01      	subs	r3, #1
   e2a3a:	428b      	cmp	r3, r1
   e2a3c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e2a40:	f280 808a 	bge.w	e2b58 <_strtod_r+0x7b8>
   e2a44:	1ac9      	subs	r1, r1, r3
   e2a46:	291f      	cmp	r1, #31
   e2a48:	bfc8      	it	gt
   e2a4a:	4fb0      	ldrgt	r7, [pc, #704]	; (e2d0c <_strtod_r+0x96c>)
   e2a4c:	f04f 0901 	mov.w	r9, #1
   e2a50:	bfd4      	ite	le
   e2a52:	fa09 f301 	lslle.w	r3, r9, r1
   e2a56:	1aff      	subgt	r7, r7, r3
   e2a58:	eba6 0601 	sub.w	r6, r6, r1
   e2a5c:	bfd9      	ittee	le
   e2a5e:	9306      	strle	r3, [sp, #24]
   e2a60:	2700      	movle	r7, #0
   e2a62:	fa09 f707 	lslgt.w	r7, r9, r7
   e2a66:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e2a6a:	eb08 0906 	add.w	r9, r8, r6
   e2a6e:	9b03      	ldr	r3, [sp, #12]
   e2a70:	45c8      	cmp	r8, r9
   e2a72:	4416      	add	r6, r2
   e2a74:	441e      	add	r6, r3
   e2a76:	4643      	mov	r3, r8
   e2a78:	bfa8      	it	ge
   e2a7a:	464b      	movge	r3, r9
   e2a7c:	42b3      	cmp	r3, r6
   e2a7e:	bfa8      	it	ge
   e2a80:	4633      	movge	r3, r6
   e2a82:	2b00      	cmp	r3, #0
   e2a84:	bfc2      	ittt	gt
   e2a86:	ebc3 0909 	rsbgt	r9, r3, r9
   e2a8a:	1af6      	subgt	r6, r6, r3
   e2a8c:	ebc3 0808 	rsbgt	r8, r3, r8
   e2a90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2a92:	2b00      	cmp	r3, #0
   e2a94:	d164      	bne.n	e2b60 <_strtod_r+0x7c0>
   e2a96:	f1b9 0f00 	cmp.w	r9, #0
   e2a9a:	dc7a      	bgt.n	e2b92 <_strtod_r+0x7f2>
   e2a9c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e2a9e:	2b00      	cmp	r3, #0
   e2aa0:	f040 8081 	bne.w	e2ba6 <_strtod_r+0x806>
   e2aa4:	2e00      	cmp	r6, #0
   e2aa6:	f300 8088 	bgt.w	e2bba <_strtod_r+0x81a>
   e2aaa:	f1b8 0f00 	cmp.w	r8, #0
   e2aae:	f300 808e 	bgt.w	e2bce <_strtod_r+0x82e>
   e2ab2:	9a04      	ldr	r2, [sp, #16]
   e2ab4:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2ab6:	9802      	ldr	r0, [sp, #8]
   e2ab8:	f001 fb97 	bl	e41ea <__mdiff>
   e2abc:	4604      	mov	r4, r0
   e2abe:	2800      	cmp	r0, #0
   e2ac0:	f43f aeb5 	beq.w	e282e <_strtod_r+0x48e>
   e2ac4:	68c3      	ldr	r3, [r0, #12]
   e2ac6:	9307      	str	r3, [sp, #28]
   e2ac8:	2300      	movs	r3, #0
   e2aca:	60c3      	str	r3, [r0, #12]
   e2acc:	4629      	mov	r1, r5
   e2ace:	f001 fb70 	bl	e41b2 <__mcmp>
   e2ad2:	2800      	cmp	r0, #0
   e2ad4:	f280 8089 	bge.w	e2bea <_strtod_r+0x84a>
   e2ad8:	9b07      	ldr	r3, [sp, #28]
   e2ada:	2b00      	cmp	r3, #0
   e2adc:	f040 8204 	bne.w	e2ee8 <_strtod_r+0xb48>
   e2ae0:	f1ba 0f00 	cmp.w	sl, #0
   e2ae4:	f040 8200 	bne.w	e2ee8 <_strtod_r+0xb48>
   e2ae8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2aec:	2b00      	cmp	r3, #0
   e2aee:	f040 81fb 	bne.w	e2ee8 <_strtod_r+0xb48>
   e2af2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2af6:	0d1b      	lsrs	r3, r3, #20
   e2af8:	051b      	lsls	r3, r3, #20
   e2afa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2afe:	f240 81f3 	bls.w	e2ee8 <_strtod_r+0xb48>
   e2b02:	6963      	ldr	r3, [r4, #20]
   e2b04:	2b00      	cmp	r3, #0
   e2b06:	d06c      	beq.n	e2be2 <_strtod_r+0x842>
   e2b08:	4621      	mov	r1, r4
   e2b0a:	2201      	movs	r2, #1
   e2b0c:	9802      	ldr	r0, [sp, #8]
   e2b0e:	f001 faff 	bl	e4110 <__lshift>
   e2b12:	4629      	mov	r1, r5
   e2b14:	4604      	mov	r4, r0
   e2b16:	f001 fb4c 	bl	e41b2 <__mcmp>
   e2b1a:	2800      	cmp	r0, #0
   e2b1c:	f340 81e4 	ble.w	e2ee8 <_strtod_r+0xb48>
   e2b20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2b24:	9a03      	ldr	r2, [sp, #12]
   e2b26:	0d1b      	lsrs	r3, r3, #20
   e2b28:	051b      	lsls	r3, r3, #20
   e2b2a:	2a00      	cmp	r2, #0
   e2b2c:	f000 808c 	beq.w	e2c48 <_strtod_r+0x8a8>
   e2b30:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2b34:	f300 8088 	bgt.w	e2c48 <_strtod_r+0x8a8>
   e2b38:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e2b3c:	f300 81d6 	bgt.w	e2eec <_strtod_r+0xb4c>
   e2b40:	9a02      	ldr	r2, [sp, #8]
   e2b42:	2322      	movs	r3, #34	; 0x22
   e2b44:	f04f 0a00 	mov.w	sl, #0
   e2b48:	f04f 0b00 	mov.w	fp, #0
   e2b4c:	6013      	str	r3, [r2, #0]
   e2b4e:	9b05      	ldr	r3, [sp, #20]
   e2b50:	2b00      	cmp	r3, #0
   e2b52:	f040 81dc 	bne.w	e2f0e <_strtod_r+0xb6e>
   e2b56:	e1ee      	b.n	e2f36 <_strtod_r+0xb96>
   e2b58:	2301      	movs	r3, #1
   e2b5a:	2700      	movs	r7, #0
   e2b5c:	9306      	str	r3, [sp, #24]
   e2b5e:	e784      	b.n	e2a6a <_strtod_r+0x6ca>
   e2b60:	4629      	mov	r1, r5
   e2b62:	461a      	mov	r2, r3
   e2b64:	9802      	ldr	r0, [sp, #8]
   e2b66:	f001 fa85 	bl	e4074 <__pow5mult>
   e2b6a:	4605      	mov	r5, r0
   e2b6c:	2800      	cmp	r0, #0
   e2b6e:	f43f ae5e 	beq.w	e282e <_strtod_r+0x48e>
   e2b72:	4601      	mov	r1, r0
   e2b74:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2b76:	9802      	ldr	r0, [sp, #8]
   e2b78:	f001 f9eb 	bl	e3f52 <__multiply>
   e2b7c:	9007      	str	r0, [sp, #28]
   e2b7e:	2800      	cmp	r0, #0
   e2b80:	f43f ae55 	beq.w	e282e <_strtod_r+0x48e>
   e2b84:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2b86:	9802      	ldr	r0, [sp, #8]
   e2b88:	f001 f8fd 	bl	e3d86 <_Bfree>
   e2b8c:	9b07      	ldr	r3, [sp, #28]
   e2b8e:	9318      	str	r3, [sp, #96]	; 0x60
   e2b90:	e781      	b.n	e2a96 <_strtod_r+0x6f6>
   e2b92:	464a      	mov	r2, r9
   e2b94:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2b96:	9802      	ldr	r0, [sp, #8]
   e2b98:	f001 faba 	bl	e4110 <__lshift>
   e2b9c:	9018      	str	r0, [sp, #96]	; 0x60
   e2b9e:	2800      	cmp	r0, #0
   e2ba0:	f47f af7c 	bne.w	e2a9c <_strtod_r+0x6fc>
   e2ba4:	e643      	b.n	e282e <_strtod_r+0x48e>
   e2ba6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e2ba8:	9904      	ldr	r1, [sp, #16]
   e2baa:	9802      	ldr	r0, [sp, #8]
   e2bac:	f001 fa62 	bl	e4074 <__pow5mult>
   e2bb0:	9004      	str	r0, [sp, #16]
   e2bb2:	2800      	cmp	r0, #0
   e2bb4:	f47f af76 	bne.w	e2aa4 <_strtod_r+0x704>
   e2bb8:	e639      	b.n	e282e <_strtod_r+0x48e>
   e2bba:	4632      	mov	r2, r6
   e2bbc:	9904      	ldr	r1, [sp, #16]
   e2bbe:	9802      	ldr	r0, [sp, #8]
   e2bc0:	f001 faa6 	bl	e4110 <__lshift>
   e2bc4:	9004      	str	r0, [sp, #16]
   e2bc6:	2800      	cmp	r0, #0
   e2bc8:	f47f af6f 	bne.w	e2aaa <_strtod_r+0x70a>
   e2bcc:	e62f      	b.n	e282e <_strtod_r+0x48e>
   e2bce:	4629      	mov	r1, r5
   e2bd0:	4642      	mov	r2, r8
   e2bd2:	9802      	ldr	r0, [sp, #8]
   e2bd4:	f001 fa9c 	bl	e4110 <__lshift>
   e2bd8:	4605      	mov	r5, r0
   e2bda:	2800      	cmp	r0, #0
   e2bdc:	f47f af69 	bne.w	e2ab2 <_strtod_r+0x712>
   e2be0:	e625      	b.n	e282e <_strtod_r+0x48e>
   e2be2:	6923      	ldr	r3, [r4, #16]
   e2be4:	2b01      	cmp	r3, #1
   e2be6:	dc8f      	bgt.n	e2b08 <_strtod_r+0x768>
   e2be8:	e17e      	b.n	e2ee8 <_strtod_r+0xb48>
   e2bea:	d161      	bne.n	e2cb0 <_strtod_r+0x910>
   e2bec:	9a07      	ldr	r2, [sp, #28]
   e2bee:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2bf2:	b322      	cbz	r2, e2c3e <_strtod_r+0x89e>
   e2bf4:	4946      	ldr	r1, [pc, #280]	; (e2d10 <_strtod_r+0x970>)
   e2bf6:	428b      	cmp	r3, r1
   e2bf8:	465a      	mov	r2, fp
   e2bfa:	d12e      	bne.n	e2c5a <_strtod_r+0x8ba>
   e2bfc:	9b03      	ldr	r3, [sp, #12]
   e2bfe:	4651      	mov	r1, sl
   e2c00:	b163      	cbz	r3, e2c1c <_strtod_r+0x87c>
   e2c02:	4b44      	ldr	r3, [pc, #272]	; (e2d14 <_strtod_r+0x974>)
   e2c04:	4013      	ands	r3, r2
   e2c06:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e2c0a:	d807      	bhi.n	e2c1c <_strtod_r+0x87c>
   e2c0c:	0d1b      	lsrs	r3, r3, #20
   e2c0e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2c12:	f04f 30ff 	mov.w	r0, #4294967295
   e2c16:	fa00 f303 	lsl.w	r3, r0, r3
   e2c1a:	e001      	b.n	e2c20 <_strtod_r+0x880>
   e2c1c:	f04f 33ff 	mov.w	r3, #4294967295
   e2c20:	428b      	cmp	r3, r1
   e2c22:	d11a      	bne.n	e2c5a <_strtod_r+0x8ba>
   e2c24:	493c      	ldr	r1, [pc, #240]	; (e2d18 <_strtod_r+0x978>)
   e2c26:	428a      	cmp	r2, r1
   e2c28:	d102      	bne.n	e2c30 <_strtod_r+0x890>
   e2c2a:	3301      	adds	r3, #1
   e2c2c:	f43f adff 	beq.w	e282e <_strtod_r+0x48e>
   e2c30:	4b38      	ldr	r3, [pc, #224]	; (e2d14 <_strtod_r+0x974>)
   e2c32:	4013      	ands	r3, r2
   e2c34:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e2c38:	f04f 0a00 	mov.w	sl, #0
   e2c3c:	e154      	b.n	e2ee8 <_strtod_r+0xb48>
   e2c3e:	b963      	cbnz	r3, e2c5a <_strtod_r+0x8ba>
   e2c40:	f1ba 0f00 	cmp.w	sl, #0
   e2c44:	d109      	bne.n	e2c5a <_strtod_r+0x8ba>
   e2c46:	e76b      	b.n	e2b20 <_strtod_r+0x780>
   e2c48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e2c4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e2c50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e2c54:	f04f 3aff 	mov.w	sl, #4294967295
   e2c58:	e146      	b.n	e2ee8 <_strtod_r+0xb48>
   e2c5a:	b117      	cbz	r7, e2c62 <_strtod_r+0x8c2>
   e2c5c:	ea17 0f0b 	tst.w	r7, fp
   e2c60:	e002      	b.n	e2c68 <_strtod_r+0x8c8>
   e2c62:	9b06      	ldr	r3, [sp, #24]
   e2c64:	ea13 0f0a 	tst.w	r3, sl
   e2c68:	f000 813e 	beq.w	e2ee8 <_strtod_r+0xb48>
   e2c6c:	9b07      	ldr	r3, [sp, #28]
   e2c6e:	9a03      	ldr	r2, [sp, #12]
   e2c70:	4650      	mov	r0, sl
   e2c72:	4659      	mov	r1, fp
   e2c74:	b153      	cbz	r3, e2c8c <_strtod_r+0x8ec>
   e2c76:	f7ff fb75 	bl	e2364 <sulp>
   e2c7a:	4602      	mov	r2, r0
   e2c7c:	460b      	mov	r3, r1
   e2c7e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2c82:	f7fe fcdd 	bl	e1640 <__adddf3>
   e2c86:	4682      	mov	sl, r0
   e2c88:	468b      	mov	fp, r1
   e2c8a:	e12d      	b.n	e2ee8 <_strtod_r+0xb48>
   e2c8c:	f7ff fb6a 	bl	e2364 <sulp>
   e2c90:	4602      	mov	r2, r0
   e2c92:	460b      	mov	r3, r1
   e2c94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2c98:	f7fe fcd0 	bl	e163c <__aeabi_dsub>
   e2c9c:	2200      	movs	r2, #0
   e2c9e:	2300      	movs	r3, #0
   e2ca0:	4682      	mov	sl, r0
   e2ca2:	468b      	mov	fp, r1
   e2ca4:	f7ff f8e6 	bl	e1e74 <__aeabi_dcmpeq>
   e2ca8:	2800      	cmp	r0, #0
   e2caa:	f47f af49 	bne.w	e2b40 <_strtod_r+0x7a0>
   e2cae:	e11b      	b.n	e2ee8 <_strtod_r+0xb48>
   e2cb0:	4629      	mov	r1, r5
   e2cb2:	4620      	mov	r0, r4
   e2cb4:	f001 fbbb 	bl	e442e <__ratio>
   e2cb8:	ec57 6b10 	vmov	r6, r7, d0
   e2cbc:	2200      	movs	r2, #0
   e2cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e2cc2:	ee10 0a10 	vmov	r0, s0
   e2cc6:	4639      	mov	r1, r7
   e2cc8:	f7ff f8e8 	bl	e1e9c <__aeabi_dcmple>
   e2ccc:	2800      	cmp	r0, #0
   e2cce:	d042      	beq.n	e2d56 <_strtod_r+0x9b6>
   e2cd0:	9b07      	ldr	r3, [sp, #28]
   e2cd2:	b123      	cbz	r3, e2cde <_strtod_r+0x93e>
   e2cd4:	f04f 0800 	mov.w	r8, #0
   e2cd8:	f8df 9040 	ldr.w	r9, [pc, #64]	; e2d1c <_strtod_r+0x97c>
   e2cdc:	e011      	b.n	e2d02 <_strtod_r+0x962>
   e2cde:	f1ba 0f00 	cmp.w	sl, #0
   e2ce2:	d103      	bne.n	e2cec <_strtod_r+0x94c>
   e2ce4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2ce8:	b93b      	cbnz	r3, e2cfa <_strtod_r+0x95a>
   e2cea:	e01b      	b.n	e2d24 <_strtod_r+0x984>
   e2cec:	f1ba 0f01 	cmp.w	sl, #1
   e2cf0:	d103      	bne.n	e2cfa <_strtod_r+0x95a>
   e2cf2:	f1bb 0f00 	cmp.w	fp, #0
   e2cf6:	f43f af23 	beq.w	e2b40 <_strtod_r+0x7a0>
   e2cfa:	f8df 9024 	ldr.w	r9, [pc, #36]	; e2d20 <_strtod_r+0x980>
   e2cfe:	f04f 0800 	mov.w	r8, #0
   e2d02:	2600      	movs	r6, #0
   e2d04:	4f05      	ldr	r7, [pc, #20]	; (e2d1c <_strtod_r+0x97c>)
   e2d06:	e039      	b.n	e2d7c <_strtod_r+0x9dc>
   e2d08:	fffffc02 	.word	0xfffffc02
   e2d0c:	fffffbe2 	.word	0xfffffbe2
   e2d10:	000fffff 	.word	0x000fffff
   e2d14:	7ff00000 	.word	0x7ff00000
   e2d18:	7fefffff 	.word	0x7fefffff
   e2d1c:	3ff00000 	.word	0x3ff00000
   e2d20:	bff00000 	.word	0xbff00000
   e2d24:	2200      	movs	r2, #0
   e2d26:	4b98      	ldr	r3, [pc, #608]	; (e2f88 <_strtod_r+0xbe8>)
   e2d28:	4630      	mov	r0, r6
   e2d2a:	4639      	mov	r1, r7
   e2d2c:	f7ff f8ac 	bl	e1e88 <__aeabi_dcmplt>
   e2d30:	b940      	cbnz	r0, e2d44 <_strtod_r+0x9a4>
   e2d32:	4630      	mov	r0, r6
   e2d34:	4639      	mov	r1, r7
   e2d36:	2200      	movs	r2, #0
   e2d38:	4b94      	ldr	r3, [pc, #592]	; (e2f8c <_strtod_r+0xbec>)
   e2d3a:	f7fe fe33 	bl	e19a4 <__aeabi_dmul>
   e2d3e:	4606      	mov	r6, r0
   e2d40:	460f      	mov	r7, r1
   e2d42:	e001      	b.n	e2d48 <_strtod_r+0x9a8>
   e2d44:	4f91      	ldr	r7, [pc, #580]	; (e2f8c <_strtod_r+0xbec>)
   e2d46:	2600      	movs	r6, #0
   e2d48:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e2d4c:	9614      	str	r6, [sp, #80]	; 0x50
   e2d4e:	9315      	str	r3, [sp, #84]	; 0x54
   e2d50:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e2d54:	e012      	b.n	e2d7c <_strtod_r+0x9dc>
   e2d56:	4b8d      	ldr	r3, [pc, #564]	; (e2f8c <_strtod_r+0xbec>)
   e2d58:	4630      	mov	r0, r6
   e2d5a:	4639      	mov	r1, r7
   e2d5c:	2200      	movs	r2, #0
   e2d5e:	f7fe fe21 	bl	e19a4 <__aeabi_dmul>
   e2d62:	9b07      	ldr	r3, [sp, #28]
   e2d64:	4606      	mov	r6, r0
   e2d66:	460f      	mov	r7, r1
   e2d68:	b923      	cbnz	r3, e2d74 <_strtod_r+0x9d4>
   e2d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2d6e:	900e      	str	r0, [sp, #56]	; 0x38
   e2d70:	930f      	str	r3, [sp, #60]	; 0x3c
   e2d72:	e001      	b.n	e2d78 <_strtod_r+0x9d8>
   e2d74:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e2d78:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e2d7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2d80:	0d1b      	lsrs	r3, r3, #20
   e2d82:	051b      	lsls	r3, r3, #20
   e2d84:	9306      	str	r3, [sp, #24]
   e2d86:	9a06      	ldr	r2, [sp, #24]
   e2d88:	4b81      	ldr	r3, [pc, #516]	; (e2f90 <_strtod_r+0xbf0>)
   e2d8a:	429a      	cmp	r2, r3
   e2d8c:	d12b      	bne.n	e2de6 <_strtod_r+0xa46>
   e2d8e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2d92:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2d96:	ec4b ab10 	vmov	d0, sl, fp
   e2d9a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e2d9e:	f001 fa83 	bl	e42a8 <__ulp>
   e2da2:	4640      	mov	r0, r8
   e2da4:	ec53 2b10 	vmov	r2, r3, d0
   e2da8:	4649      	mov	r1, r9
   e2daa:	f7fe fdfb 	bl	e19a4 <__aeabi_dmul>
   e2dae:	4652      	mov	r2, sl
   e2db0:	465b      	mov	r3, fp
   e2db2:	f7fe fc45 	bl	e1640 <__adddf3>
   e2db6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2dba:	0d1b      	lsrs	r3, r3, #20
   e2dbc:	4a75      	ldr	r2, [pc, #468]	; (e2f94 <_strtod_r+0xbf4>)
   e2dbe:	051b      	lsls	r3, r3, #20
   e2dc0:	4293      	cmp	r3, r2
   e2dc2:	4682      	mov	sl, r0
   e2dc4:	d90c      	bls.n	e2de0 <_strtod_r+0xa40>
   e2dc6:	4b74      	ldr	r3, [pc, #464]	; (e2f98 <_strtod_r+0xbf8>)
   e2dc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2dca:	429a      	cmp	r2, r3
   e2dcc:	d103      	bne.n	e2dd6 <_strtod_r+0xa36>
   e2dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2dd0:	3301      	adds	r3, #1
   e2dd2:	f43f ad2c 	beq.w	e282e <_strtod_r+0x48e>
   e2dd6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e2f98 <_strtod_r+0xbf8>
   e2dda:	f04f 3aff 	mov.w	sl, #4294967295
   e2dde:	e072      	b.n	e2ec6 <_strtod_r+0xb26>
   e2de0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e2de4:	e038      	b.n	e2e58 <_strtod_r+0xab8>
   e2de6:	9b03      	ldr	r3, [sp, #12]
   e2de8:	b333      	cbz	r3, e2e38 <_strtod_r+0xa98>
   e2dea:	9b06      	ldr	r3, [sp, #24]
   e2dec:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e2df0:	d822      	bhi.n	e2e38 <_strtod_r+0xa98>
   e2df2:	a35d      	add	r3, pc, #372	; (adr r3, e2f68 <_strtod_r+0xbc8>)
   e2df4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2df8:	4630      	mov	r0, r6
   e2dfa:	4639      	mov	r1, r7
   e2dfc:	f7ff f84e 	bl	e1e9c <__aeabi_dcmple>
   e2e00:	b1a8      	cbz	r0, e2e2e <_strtod_r+0xa8e>
   e2e02:	4639      	mov	r1, r7
   e2e04:	4630      	mov	r0, r6
   e2e06:	f7ff f88f 	bl	e1f28 <__aeabi_d2uiz>
   e2e0a:	2800      	cmp	r0, #0
   e2e0c:	bf08      	it	eq
   e2e0e:	2001      	moveq	r0, #1
   e2e10:	f7fe fd52 	bl	e18b8 <__aeabi_ui2d>
   e2e14:	9b07      	ldr	r3, [sp, #28]
   e2e16:	4606      	mov	r6, r0
   e2e18:	460f      	mov	r7, r1
   e2e1a:	b923      	cbnz	r3, e2e26 <_strtod_r+0xa86>
   e2e1c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2e20:	9010      	str	r0, [sp, #64]	; 0x40
   e2e22:	9311      	str	r3, [sp, #68]	; 0x44
   e2e24:	e001      	b.n	e2e2a <_strtod_r+0xa8a>
   e2e26:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e2e2a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e2e2e:	9a06      	ldr	r2, [sp, #24]
   e2e30:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e2e34:	ebc2 0903 	rsb	r9, r2, r3
   e2e38:	ed9d 0b08 	vldr	d0, [sp, #32]
   e2e3c:	f001 fa34 	bl	e42a8 <__ulp>
   e2e40:	4640      	mov	r0, r8
   e2e42:	ec53 2b10 	vmov	r2, r3, d0
   e2e46:	4649      	mov	r1, r9
   e2e48:	f7fe fdac 	bl	e19a4 <__aeabi_dmul>
   e2e4c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2e50:	f7fe fbf6 	bl	e1640 <__adddf3>
   e2e54:	4682      	mov	sl, r0
   e2e56:	468b      	mov	fp, r1
   e2e58:	9b03      	ldr	r3, [sp, #12]
   e2e5a:	bba3      	cbnz	r3, e2ec6 <_strtod_r+0xb26>
   e2e5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2e60:	0d1b      	lsrs	r3, r3, #20
   e2e62:	9a06      	ldr	r2, [sp, #24]
   e2e64:	051b      	lsls	r3, r3, #20
   e2e66:	429a      	cmp	r2, r3
   e2e68:	46d8      	mov	r8, fp
   e2e6a:	d12c      	bne.n	e2ec6 <_strtod_r+0xb26>
   e2e6c:	4639      	mov	r1, r7
   e2e6e:	4630      	mov	r0, r6
   e2e70:	f7ff f832 	bl	e1ed8 <__aeabi_d2iz>
   e2e74:	f7fe fd30 	bl	e18d8 <__aeabi_i2d>
   e2e78:	460b      	mov	r3, r1
   e2e7a:	4602      	mov	r2, r0
   e2e7c:	4639      	mov	r1, r7
   e2e7e:	4630      	mov	r0, r6
   e2e80:	f7fe fbdc 	bl	e163c <__aeabi_dsub>
   e2e84:	9b07      	ldr	r3, [sp, #28]
   e2e86:	4606      	mov	r6, r0
   e2e88:	460f      	mov	r7, r1
   e2e8a:	b92b      	cbnz	r3, e2e98 <_strtod_r+0xaf8>
   e2e8c:	f1ba 0f00 	cmp.w	sl, #0
   e2e90:	d102      	bne.n	e2e98 <_strtod_r+0xaf8>
   e2e92:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2e96:	b183      	cbz	r3, e2eba <_strtod_r+0xb1a>
   e2e98:	a335      	add	r3, pc, #212	; (adr r3, e2f70 <_strtod_r+0xbd0>)
   e2e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2e9e:	4630      	mov	r0, r6
   e2ea0:	4639      	mov	r1, r7
   e2ea2:	f7fe fff1 	bl	e1e88 <__aeabi_dcmplt>
   e2ea6:	2800      	cmp	r0, #0
   e2ea8:	d131      	bne.n	e2f0e <_strtod_r+0xb6e>
   e2eaa:	a333      	add	r3, pc, #204	; (adr r3, e2f78 <_strtod_r+0xbd8>)
   e2eac:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2eb0:	4630      	mov	r0, r6
   e2eb2:	4639      	mov	r1, r7
   e2eb4:	f7ff f806 	bl	e1ec4 <__aeabi_dcmpgt>
   e2eb8:	e004      	b.n	e2ec4 <_strtod_r+0xb24>
   e2eba:	a331      	add	r3, pc, #196	; (adr r3, e2f80 <_strtod_r+0xbe0>)
   e2ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2ec0:	f7fe ffe2 	bl	e1e88 <__aeabi_dcmplt>
   e2ec4:	bb18      	cbnz	r0, e2f0e <_strtod_r+0xb6e>
   e2ec6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2ec8:	9802      	ldr	r0, [sp, #8]
   e2eca:	f000 ff5c 	bl	e3d86 <_Bfree>
   e2ece:	9904      	ldr	r1, [sp, #16]
   e2ed0:	9802      	ldr	r0, [sp, #8]
   e2ed2:	f000 ff58 	bl	e3d86 <_Bfree>
   e2ed6:	4629      	mov	r1, r5
   e2ed8:	9802      	ldr	r0, [sp, #8]
   e2eda:	f000 ff54 	bl	e3d86 <_Bfree>
   e2ede:	4621      	mov	r1, r4
   e2ee0:	9802      	ldr	r0, [sp, #8]
   e2ee2:	f000 ff50 	bl	e3d86 <_Bfree>
   e2ee6:	e56d      	b.n	e29c4 <_strtod_r+0x624>
   e2ee8:	9b03      	ldr	r3, [sp, #12]
   e2eea:	b183      	cbz	r3, e2f0e <_strtod_r+0xb6e>
   e2eec:	4b2b      	ldr	r3, [pc, #172]	; (e2f9c <_strtod_r+0xbfc>)
   e2eee:	930b      	str	r3, [sp, #44]	; 0x2c
   e2ef0:	2300      	movs	r3, #0
   e2ef2:	930a      	str	r3, [sp, #40]	; 0x28
   e2ef4:	4650      	mov	r0, sl
   e2ef6:	4659      	mov	r1, fp
   e2ef8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e2efc:	f7fe fd52 	bl	e19a4 <__aeabi_dmul>
   e2f00:	4682      	mov	sl, r0
   e2f02:	468b      	mov	fp, r1
   e2f04:	b919      	cbnz	r1, e2f0e <_strtod_r+0xb6e>
   e2f06:	b910      	cbnz	r0, e2f0e <_strtod_r+0xb6e>
   e2f08:	9a02      	ldr	r2, [sp, #8]
   e2f0a:	2322      	movs	r3, #34	; 0x22
   e2f0c:	6013      	str	r3, [r2, #0]
   e2f0e:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2f10:	9802      	ldr	r0, [sp, #8]
   e2f12:	f000 ff38 	bl	e3d86 <_Bfree>
   e2f16:	9904      	ldr	r1, [sp, #16]
   e2f18:	9802      	ldr	r0, [sp, #8]
   e2f1a:	f000 ff34 	bl	e3d86 <_Bfree>
   e2f1e:	4629      	mov	r1, r5
   e2f20:	9802      	ldr	r0, [sp, #8]
   e2f22:	f000 ff30 	bl	e3d86 <_Bfree>
   e2f26:	9905      	ldr	r1, [sp, #20]
   e2f28:	9802      	ldr	r0, [sp, #8]
   e2f2a:	f000 ff2c 	bl	e3d86 <_Bfree>
   e2f2e:	4621      	mov	r1, r4
   e2f30:	9802      	ldr	r0, [sp, #8]
   e2f32:	f000 ff28 	bl	e3d86 <_Bfree>
   e2f36:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2f38:	b113      	cbz	r3, e2f40 <_strtod_r+0xba0>
   e2f3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e2f3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2f3e:	6013      	str	r3, [r2, #0]
   e2f40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2f42:	b11b      	cbz	r3, e2f4c <_strtod_r+0xbac>
   e2f44:	4652      	mov	r2, sl
   e2f46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e2f4a:	e007      	b.n	e2f5c <_strtod_r+0xbbc>
   e2f4c:	4652      	mov	r2, sl
   e2f4e:	465b      	mov	r3, fp
   e2f50:	e004      	b.n	e2f5c <_strtod_r+0xbbc>
   e2f52:	2500      	movs	r5, #0
   e2f54:	462a      	mov	r2, r5
   e2f56:	2101      	movs	r1, #1
   e2f58:	f7ff bb41 	b.w	e25de <_strtod_r+0x23e>
   e2f5c:	ec43 2b10 	vmov	d0, r2, r3
   e2f60:	b01d      	add	sp, #116	; 0x74
   e2f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2f66:	bf00      	nop
   e2f68:	ffc00000 	.word	0xffc00000
   e2f6c:	41dfffff 	.word	0x41dfffff
   e2f70:	94a03595 	.word	0x94a03595
   e2f74:	3fdfffff 	.word	0x3fdfffff
   e2f78:	35afe535 	.word	0x35afe535
   e2f7c:	3fe00000 	.word	0x3fe00000
   e2f80:	94a03595 	.word	0x94a03595
   e2f84:	3fcfffff 	.word	0x3fcfffff
   e2f88:	3ff00000 	.word	0x3ff00000
   e2f8c:	3fe00000 	.word	0x3fe00000
   e2f90:	7fe00000 	.word	0x7fe00000
   e2f94:	7c9fffff 	.word	0x7c9fffff
   e2f98:	7fefffff 	.word	0x7fefffff
   e2f9c:	39500000 	.word	0x39500000

000e2fa0 <strtod>:
   e2fa0:	4b02      	ldr	r3, [pc, #8]	; (e2fac <strtod+0xc>)
   e2fa2:	460a      	mov	r2, r1
   e2fa4:	4601      	mov	r1, r0
   e2fa6:	6818      	ldr	r0, [r3, #0]
   e2fa8:	f7ff b9fa 	b.w	e23a0 <_strtod_r>
   e2fac:	2003e260 	.word	0x2003e260

000e2fb0 <_strtoul_r>:
   e2fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2fb4:	4680      	mov	r8, r0
   e2fb6:	483c      	ldr	r0, [pc, #240]	; (e30a8 <_strtoul_r+0xf8>)
   e2fb8:	f8d0 9000 	ldr.w	r9, [r0]
   e2fbc:	460e      	mov	r6, r1
   e2fbe:	4635      	mov	r5, r6
   e2fc0:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2fc4:	eb09 0004 	add.w	r0, r9, r4
   e2fc8:	7840      	ldrb	r0, [r0, #1]
   e2fca:	f000 0008 	and.w	r0, r0, #8
   e2fce:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e2fd2:	b108      	cbz	r0, e2fd8 <_strtoul_r+0x28>
   e2fd4:	462e      	mov	r6, r5
   e2fd6:	e7f2      	b.n	e2fbe <_strtoul_r+0xe>
   e2fd8:	2c2d      	cmp	r4, #45	; 0x2d
   e2fda:	d103      	bne.n	e2fe4 <_strtoul_r+0x34>
   e2fdc:	1cb5      	adds	r5, r6, #2
   e2fde:	7874      	ldrb	r4, [r6, #1]
   e2fe0:	2701      	movs	r7, #1
   e2fe2:	e003      	b.n	e2fec <_strtoul_r+0x3c>
   e2fe4:	2c2b      	cmp	r4, #43	; 0x2b
   e2fe6:	bf04      	itt	eq
   e2fe8:	7874      	ldrbeq	r4, [r6, #1]
   e2fea:	1cb5      	addeq	r5, r6, #2
   e2fec:	b113      	cbz	r3, e2ff4 <_strtoul_r+0x44>
   e2fee:	2b10      	cmp	r3, #16
   e2ff0:	d10a      	bne.n	e3008 <_strtoul_r+0x58>
   e2ff2:	e053      	b.n	e309c <_strtoul_r+0xec>
   e2ff4:	2c30      	cmp	r4, #48	; 0x30
   e2ff6:	d14f      	bne.n	e3098 <_strtoul_r+0xe8>
   e2ff8:	7828      	ldrb	r0, [r5, #0]
   e2ffa:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e2ffe:	2858      	cmp	r0, #88	; 0x58
   e3000:	d145      	bne.n	e308e <_strtoul_r+0xde>
   e3002:	786c      	ldrb	r4, [r5, #1]
   e3004:	2310      	movs	r3, #16
   e3006:	3502      	adds	r5, #2
   e3008:	f04f 3cff 	mov.w	ip, #4294967295
   e300c:	2600      	movs	r6, #0
   e300e:	fbbc fcf3 	udiv	ip, ip, r3
   e3012:	fb03 fa0c 	mul.w	sl, r3, ip
   e3016:	ea6f 0a0a 	mvn.w	sl, sl
   e301a:	4630      	mov	r0, r6
   e301c:	eb09 0e04 	add.w	lr, r9, r4
   e3020:	f89e e001 	ldrb.w	lr, [lr, #1]
   e3024:	f01e 0f04 	tst.w	lr, #4
   e3028:	d001      	beq.n	e302e <_strtoul_r+0x7e>
   e302a:	3c30      	subs	r4, #48	; 0x30
   e302c:	e00b      	b.n	e3046 <_strtoul_r+0x96>
   e302e:	f01e 0e03 	ands.w	lr, lr, #3
   e3032:	d01a      	beq.n	e306a <_strtoul_r+0xba>
   e3034:	f1be 0f01 	cmp.w	lr, #1
   e3038:	bf0c      	ite	eq
   e303a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e303e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e3042:	ebce 0404 	rsb	r4, lr, r4
   e3046:	42a3      	cmp	r3, r4
   e3048:	dd0f      	ble.n	e306a <_strtoul_r+0xba>
   e304a:	2e00      	cmp	r6, #0
   e304c:	db08      	blt.n	e3060 <_strtoul_r+0xb0>
   e304e:	4560      	cmp	r0, ip
   e3050:	d806      	bhi.n	e3060 <_strtoul_r+0xb0>
   e3052:	d101      	bne.n	e3058 <_strtoul_r+0xa8>
   e3054:	4554      	cmp	r4, sl
   e3056:	dc03      	bgt.n	e3060 <_strtoul_r+0xb0>
   e3058:	fb03 4000 	mla	r0, r3, r0, r4
   e305c:	2601      	movs	r6, #1
   e305e:	e001      	b.n	e3064 <_strtoul_r+0xb4>
   e3060:	f04f 36ff 	mov.w	r6, #4294967295
   e3064:	f815 4b01 	ldrb.w	r4, [r5], #1
   e3068:	e7d8      	b.n	e301c <_strtoul_r+0x6c>
   e306a:	2e00      	cmp	r6, #0
   e306c:	da07      	bge.n	e307e <_strtoul_r+0xce>
   e306e:	2322      	movs	r3, #34	; 0x22
   e3070:	f8c8 3000 	str.w	r3, [r8]
   e3074:	f04f 30ff 	mov.w	r0, #4294967295
   e3078:	b92a      	cbnz	r2, e3086 <_strtoul_r+0xd6>
   e307a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e307e:	b107      	cbz	r7, e3082 <_strtoul_r+0xd2>
   e3080:	4240      	negs	r0, r0
   e3082:	b172      	cbz	r2, e30a2 <_strtoul_r+0xf2>
   e3084:	b106      	cbz	r6, e3088 <_strtoul_r+0xd8>
   e3086:	1e69      	subs	r1, r5, #1
   e3088:	6011      	str	r1, [r2, #0]
   e308a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e308e:	2430      	movs	r4, #48	; 0x30
   e3090:	2b00      	cmp	r3, #0
   e3092:	d1b9      	bne.n	e3008 <_strtoul_r+0x58>
   e3094:	2308      	movs	r3, #8
   e3096:	e7b7      	b.n	e3008 <_strtoul_r+0x58>
   e3098:	230a      	movs	r3, #10
   e309a:	e7b5      	b.n	e3008 <_strtoul_r+0x58>
   e309c:	2c30      	cmp	r4, #48	; 0x30
   e309e:	d0ab      	beq.n	e2ff8 <_strtoul_r+0x48>
   e30a0:	e7b2      	b.n	e3008 <_strtoul_r+0x58>
   e30a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e30a6:	bf00      	nop
   e30a8:	2003e1fc 	.word	0x2003e1fc

000e30ac <strtoul>:
   e30ac:	4613      	mov	r3, r2
   e30ae:	460a      	mov	r2, r1
   e30b0:	4601      	mov	r1, r0
   e30b2:	4802      	ldr	r0, [pc, #8]	; (e30bc <strtoul+0x10>)
   e30b4:	6800      	ldr	r0, [r0, #0]
   e30b6:	f7ff bf7b 	b.w	e2fb0 <_strtoul_r>
   e30ba:	bf00      	nop
   e30bc:	2003e260 	.word	0x2003e260

000e30c0 <__tzcalc_limits>:
   e30c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e30c4:	4604      	mov	r4, r0
   e30c6:	f000 fd8d 	bl	e3be4 <__gettzinfo>
   e30ca:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e30ce:	429c      	cmp	r4, r3
   e30d0:	f340 8096 	ble.w	e3200 <__tzcalc_limits+0x140>
   e30d4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e30d8:	18e3      	adds	r3, r4, r3
   e30da:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e30de:	109b      	asrs	r3, r3, #2
   e30e0:	f240 156d 	movw	r5, #365	; 0x16d
   e30e4:	fb05 3502 	mla	r5, r5, r2, r3
   e30e8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e30ec:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e30f0:	fb92 f3f3 	sdiv	r3, r2, r3
   e30f4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e30f8:	442b      	add	r3, r5
   e30fa:	18a5      	adds	r5, r4, r2
   e30fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3100:	fb95 f5f2 	sdiv	r5, r5, r2
   e3104:	441d      	add	r5, r3
   e3106:	2364      	movs	r3, #100	; 0x64
   e3108:	fb94 f7f2 	sdiv	r7, r4, r2
   e310c:	fb94 f6f3 	sdiv	r6, r4, r3
   e3110:	fb02 4717 	mls	r7, r2, r7, r4
   e3114:	fb03 4616 	mls	r6, r3, r6, r4
   e3118:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e311c:	fab7 fe87 	clz	lr, r7
   e3120:	9301      	str	r3, [sp, #4]
   e3122:	f004 0303 	and.w	r3, r4, #3
   e3126:	6044      	str	r4, [r0, #4]
   e3128:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e312c:	4601      	mov	r1, r0
   e312e:	9300      	str	r3, [sp, #0]
   e3130:	f04f 0c07 	mov.w	ip, #7
   e3134:	7a0b      	ldrb	r3, [r1, #8]
   e3136:	2b4a      	cmp	r3, #74	; 0x4a
   e3138:	d10e      	bne.n	e3158 <__tzcalc_limits+0x98>
   e313a:	694b      	ldr	r3, [r1, #20]
   e313c:	9a00      	ldr	r2, [sp, #0]
   e313e:	18ec      	adds	r4, r5, r3
   e3140:	b902      	cbnz	r2, e3144 <__tzcalc_limits+0x84>
   e3142:	b906      	cbnz	r6, e3146 <__tzcalc_limits+0x86>
   e3144:	b927      	cbnz	r7, e3150 <__tzcalc_limits+0x90>
   e3146:	2b3b      	cmp	r3, #59	; 0x3b
   e3148:	bfd4      	ite	le
   e314a:	2300      	movle	r3, #0
   e314c:	2301      	movgt	r3, #1
   e314e:	e000      	b.n	e3152 <__tzcalc_limits+0x92>
   e3150:	2300      	movs	r3, #0
   e3152:	4423      	add	r3, r4
   e3154:	3b01      	subs	r3, #1
   e3156:	e03f      	b.n	e31d8 <__tzcalc_limits+0x118>
   e3158:	2b44      	cmp	r3, #68	; 0x44
   e315a:	d102      	bne.n	e3162 <__tzcalc_limits+0xa2>
   e315c:	694b      	ldr	r3, [r1, #20]
   e315e:	442b      	add	r3, r5
   e3160:	e03a      	b.n	e31d8 <__tzcalc_limits+0x118>
   e3162:	9b00      	ldr	r3, [sp, #0]
   e3164:	b92b      	cbnz	r3, e3172 <__tzcalc_limits+0xb2>
   e3166:	2e00      	cmp	r6, #0
   e3168:	bf0c      	ite	eq
   e316a:	46f0      	moveq	r8, lr
   e316c:	f04f 0801 	movne.w	r8, #1
   e3170:	e000      	b.n	e3174 <__tzcalc_limits+0xb4>
   e3172:	46f0      	mov	r8, lr
   e3174:	4b24      	ldr	r3, [pc, #144]	; (e3208 <__tzcalc_limits+0x148>)
   e3176:	68cc      	ldr	r4, [r1, #12]
   e3178:	2230      	movs	r2, #48	; 0x30
   e317a:	fb02 3808 	mla	r8, r2, r8, r3
   e317e:	f1a8 0a04 	sub.w	sl, r8, #4
   e3182:	46a9      	mov	r9, r5
   e3184:	2301      	movs	r3, #1
   e3186:	42a3      	cmp	r3, r4
   e3188:	da04      	bge.n	e3194 <__tzcalc_limits+0xd4>
   e318a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e318e:	3301      	adds	r3, #1
   e3190:	44d9      	add	r9, fp
   e3192:	e7f8      	b.n	e3186 <__tzcalc_limits+0xc6>
   e3194:	f109 0304 	add.w	r3, r9, #4
   e3198:	fb93 fbfc 	sdiv	fp, r3, ip
   e319c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e31a0:	2c01      	cmp	r4, #1
   e31a2:	ebca 0a03 	rsb	sl, sl, r3
   e31a6:	694b      	ldr	r3, [r1, #20]
   e31a8:	bfb8      	it	lt
   e31aa:	2401      	movlt	r4, #1
   e31ac:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e31b0:	ebb3 0a0a 	subs.w	sl, r3, sl
   e31b4:	690b      	ldr	r3, [r1, #16]
   e31b6:	f104 34ff 	add.w	r4, r4, #4294967295
   e31ba:	f103 33ff 	add.w	r3, r3, #4294967295
   e31be:	bf48      	it	mi
   e31c0:	f10a 0a07 	addmi.w	sl, sl, #7
   e31c4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e31c8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e31cc:	4453      	add	r3, sl
   e31ce:	42a3      	cmp	r3, r4
   e31d0:	db01      	blt.n	e31d6 <__tzcalc_limits+0x116>
   e31d2:	3b07      	subs	r3, #7
   e31d4:	e7fb      	b.n	e31ce <__tzcalc_limits+0x10e>
   e31d6:	444b      	add	r3, r9
   e31d8:	698c      	ldr	r4, [r1, #24]
   e31da:	4a0c      	ldr	r2, [pc, #48]	; (e320c <__tzcalc_limits+0x14c>)
   e31dc:	fb02 4303 	mla	r3, r2, r3, r4
   e31e0:	6a0c      	ldr	r4, [r1, #32]
   e31e2:	4423      	add	r3, r4
   e31e4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e31e8:	9b01      	ldr	r3, [sp, #4]
   e31ea:	4299      	cmp	r1, r3
   e31ec:	d1a2      	bne.n	e3134 <__tzcalc_limits+0x74>
   e31ee:	69c3      	ldr	r3, [r0, #28]
   e31f0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e31f2:	4293      	cmp	r3, r2
   e31f4:	bfac      	ite	ge
   e31f6:	2300      	movge	r3, #0
   e31f8:	2301      	movlt	r3, #1
   e31fa:	6003      	str	r3, [r0, #0]
   e31fc:	2001      	movs	r0, #1
   e31fe:	e000      	b.n	e3202 <__tzcalc_limits+0x142>
   e3200:	2000      	movs	r0, #0
   e3202:	b003      	add	sp, #12
   e3204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3208:	000e4b2c 	.word	0x000e4b2c
   e320c:	00015180 	.word	0x00015180

000e3210 <__tz_lock>:
   e3210:	4770      	bx	lr

000e3212 <__tz_unlock>:
   e3212:	4770      	bx	lr

000e3214 <_tzset_unlocked>:
   e3214:	4b01      	ldr	r3, [pc, #4]	; (e321c <_tzset_unlocked+0x8>)
   e3216:	6818      	ldr	r0, [r3, #0]
   e3218:	f000 b802 	b.w	e3220 <_tzset_unlocked_r>
   e321c:	2003e260 	.word	0x2003e260

000e3220 <_tzset_unlocked_r>:
   e3220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3224:	b08d      	sub	sp, #52	; 0x34
   e3226:	4607      	mov	r7, r0
   e3228:	f000 fcdc 	bl	e3be4 <__gettzinfo>
   e322c:	49b0      	ldr	r1, [pc, #704]	; (e34f0 <_tzset_unlocked_r+0x2d0>)
   e322e:	4eb1      	ldr	r6, [pc, #708]	; (e34f4 <_tzset_unlocked_r+0x2d4>)
   e3230:	4604      	mov	r4, r0
   e3232:	4638      	mov	r0, r7
   e3234:	f000 fcce 	bl	e3bd4 <_getenv_r>
   e3238:	4605      	mov	r5, r0
   e323a:	b960      	cbnz	r0, e3256 <_tzset_unlocked_r+0x36>
   e323c:	4bae      	ldr	r3, [pc, #696]	; (e34f8 <_tzset_unlocked_r+0x2d8>)
   e323e:	4aaf      	ldr	r2, [pc, #700]	; (e34fc <_tzset_unlocked_r+0x2dc>)
   e3240:	6018      	str	r0, [r3, #0]
   e3242:	4baf      	ldr	r3, [pc, #700]	; (e3500 <_tzset_unlocked_r+0x2e0>)
   e3244:	6018      	str	r0, [r3, #0]
   e3246:	4baf      	ldr	r3, [pc, #700]	; (e3504 <_tzset_unlocked_r+0x2e4>)
   e3248:	6830      	ldr	r0, [r6, #0]
   e324a:	601a      	str	r2, [r3, #0]
   e324c:	605a      	str	r2, [r3, #4]
   e324e:	f7fb ffeb 	bl	df228 <free>
   e3252:	6035      	str	r5, [r6, #0]
   e3254:	e148      	b.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e3256:	6831      	ldr	r1, [r6, #0]
   e3258:	b979      	cbnz	r1, e327a <_tzset_unlocked_r+0x5a>
   e325a:	6830      	ldr	r0, [r6, #0]
   e325c:	f7fb ffe4 	bl	df228 <free>
   e3260:	4628      	mov	r0, r5
   e3262:	f7ff f856 	bl	e2312 <strlen>
   e3266:	1c41      	adds	r1, r0, #1
   e3268:	4638      	mov	r0, r7
   e326a:	f7fb fffd 	bl	df268 <_malloc_r>
   e326e:	6030      	str	r0, [r6, #0]
   e3270:	b148      	cbz	r0, e3286 <_tzset_unlocked_r+0x66>
   e3272:	4629      	mov	r1, r5
   e3274:	f7ff f82a 	bl	e22cc <strcpy>
   e3278:	e005      	b.n	e3286 <_tzset_unlocked_r+0x66>
   e327a:	f7ff f81d 	bl	e22b8 <strcmp>
   e327e:	2800      	cmp	r0, #0
   e3280:	f000 8132 	beq.w	e34e8 <_tzset_unlocked_r+0x2c8>
   e3284:	e7e9      	b.n	e325a <_tzset_unlocked_r+0x3a>
   e3286:	782b      	ldrb	r3, [r5, #0]
   e3288:	4a9f      	ldr	r2, [pc, #636]	; (e3508 <_tzset_unlocked_r+0x2e8>)
   e328a:	49a0      	ldr	r1, [pc, #640]	; (e350c <_tzset_unlocked_r+0x2ec>)
   e328c:	2b3a      	cmp	r3, #58	; 0x3a
   e328e:	bf08      	it	eq
   e3290:	3501      	addeq	r5, #1
   e3292:	ae0a      	add	r6, sp, #40	; 0x28
   e3294:	4633      	mov	r3, r6
   e3296:	4628      	mov	r0, r5
   e3298:	f7fb ffd6 	bl	df248 <siscanf>
   e329c:	2800      	cmp	r0, #0
   e329e:	f340 8123 	ble.w	e34e8 <_tzset_unlocked_r+0x2c8>
   e32a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e32a4:	18ef      	adds	r7, r5, r3
   e32a6:	5ceb      	ldrb	r3, [r5, r3]
   e32a8:	2b2d      	cmp	r3, #45	; 0x2d
   e32aa:	d103      	bne.n	e32b4 <_tzset_unlocked_r+0x94>
   e32ac:	3701      	adds	r7, #1
   e32ae:	f04f 35ff 	mov.w	r5, #4294967295
   e32b2:	e003      	b.n	e32bc <_tzset_unlocked_r+0x9c>
   e32b4:	2b2b      	cmp	r3, #43	; 0x2b
   e32b6:	bf08      	it	eq
   e32b8:	3701      	addeq	r7, #1
   e32ba:	2501      	movs	r5, #1
   e32bc:	f10d 0a20 	add.w	sl, sp, #32
   e32c0:	f10d 0b1e 	add.w	fp, sp, #30
   e32c4:	f04f 0800 	mov.w	r8, #0
   e32c8:	9603      	str	r6, [sp, #12]
   e32ca:	f8cd a008 	str.w	sl, [sp, #8]
   e32ce:	9601      	str	r6, [sp, #4]
   e32d0:	f8cd b000 	str.w	fp, [sp]
   e32d4:	4633      	mov	r3, r6
   e32d6:	aa07      	add	r2, sp, #28
   e32d8:	498d      	ldr	r1, [pc, #564]	; (e3510 <_tzset_unlocked_r+0x2f0>)
   e32da:	f8ad 801e 	strh.w	r8, [sp, #30]
   e32de:	4638      	mov	r0, r7
   e32e0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e32e4:	f7fb ffb0 	bl	df248 <siscanf>
   e32e8:	4540      	cmp	r0, r8
   e32ea:	f340 80fd 	ble.w	e34e8 <_tzset_unlocked_r+0x2c8>
   e32ee:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e32f2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e32f6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e351c <_tzset_unlocked_r+0x2fc>
   e32fa:	213c      	movs	r1, #60	; 0x3c
   e32fc:	fb01 3302 	mla	r3, r1, r2, r3
   e3300:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3304:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3308:	fb01 3302 	mla	r3, r1, r2, r3
   e330c:	435d      	muls	r5, r3
   e330e:	6225      	str	r5, [r4, #32]
   e3310:	4d7c      	ldr	r5, [pc, #496]	; (e3504 <_tzset_unlocked_r+0x2e4>)
   e3312:	4b7d      	ldr	r3, [pc, #500]	; (e3508 <_tzset_unlocked_r+0x2e8>)
   e3314:	602b      	str	r3, [r5, #0]
   e3316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3318:	497c      	ldr	r1, [pc, #496]	; (e350c <_tzset_unlocked_r+0x2ec>)
   e331a:	441f      	add	r7, r3
   e331c:	464a      	mov	r2, r9
   e331e:	4633      	mov	r3, r6
   e3320:	4638      	mov	r0, r7
   e3322:	f7fb ff91 	bl	df248 <siscanf>
   e3326:	4540      	cmp	r0, r8
   e3328:	dc08      	bgt.n	e333c <_tzset_unlocked_r+0x11c>
   e332a:	682b      	ldr	r3, [r5, #0]
   e332c:	606b      	str	r3, [r5, #4]
   e332e:	4b72      	ldr	r3, [pc, #456]	; (e34f8 <_tzset_unlocked_r+0x2d8>)
   e3330:	6a22      	ldr	r2, [r4, #32]
   e3332:	601a      	str	r2, [r3, #0]
   e3334:	4b72      	ldr	r3, [pc, #456]	; (e3500 <_tzset_unlocked_r+0x2e0>)
   e3336:	f8c3 8000 	str.w	r8, [r3]
   e333a:	e0d5      	b.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e333c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e333e:	f8c5 9004 	str.w	r9, [r5, #4]
   e3342:	18fd      	adds	r5, r7, r3
   e3344:	5cfb      	ldrb	r3, [r7, r3]
   e3346:	2b2d      	cmp	r3, #45	; 0x2d
   e3348:	d103      	bne.n	e3352 <_tzset_unlocked_r+0x132>
   e334a:	3501      	adds	r5, #1
   e334c:	f04f 37ff 	mov.w	r7, #4294967295
   e3350:	e003      	b.n	e335a <_tzset_unlocked_r+0x13a>
   e3352:	2b2b      	cmp	r3, #43	; 0x2b
   e3354:	bf08      	it	eq
   e3356:	3501      	addeq	r5, #1
   e3358:	2701      	movs	r7, #1
   e335a:	2300      	movs	r3, #0
   e335c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e3360:	f8ad 301e 	strh.w	r3, [sp, #30]
   e3364:	f8ad 3020 	strh.w	r3, [sp, #32]
   e3368:	930a      	str	r3, [sp, #40]	; 0x28
   e336a:	9603      	str	r6, [sp, #12]
   e336c:	f8cd a008 	str.w	sl, [sp, #8]
   e3370:	9601      	str	r6, [sp, #4]
   e3372:	f8cd b000 	str.w	fp, [sp]
   e3376:	4633      	mov	r3, r6
   e3378:	aa07      	add	r2, sp, #28
   e337a:	4965      	ldr	r1, [pc, #404]	; (e3510 <_tzset_unlocked_r+0x2f0>)
   e337c:	4628      	mov	r0, r5
   e337e:	f7fb ff63 	bl	df248 <siscanf>
   e3382:	2800      	cmp	r0, #0
   e3384:	dc04      	bgt.n	e3390 <_tzset_unlocked_r+0x170>
   e3386:	6a23      	ldr	r3, [r4, #32]
   e3388:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e338c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e338e:	e00e      	b.n	e33ae <_tzset_unlocked_r+0x18e>
   e3390:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3394:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3398:	213c      	movs	r1, #60	; 0x3c
   e339a:	fb01 3302 	mla	r3, r1, r2, r3
   e339e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e33a2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e33a6:	fb01 3302 	mla	r3, r1, r2, r3
   e33aa:	435f      	muls	r7, r3
   e33ac:	63e7      	str	r7, [r4, #60]	; 0x3c
   e33ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e33b0:	4627      	mov	r7, r4
   e33b2:	441d      	add	r5, r3
   e33b4:	f04f 0900 	mov.w	r9, #0
   e33b8:	782b      	ldrb	r3, [r5, #0]
   e33ba:	2b2c      	cmp	r3, #44	; 0x2c
   e33bc:	bf08      	it	eq
   e33be:	3501      	addeq	r5, #1
   e33c0:	f895 8000 	ldrb.w	r8, [r5]
   e33c4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e33c8:	d126      	bne.n	e3418 <_tzset_unlocked_r+0x1f8>
   e33ca:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e33ce:	9302      	str	r3, [sp, #8]
   e33d0:	ab09      	add	r3, sp, #36	; 0x24
   e33d2:	9300      	str	r3, [sp, #0]
   e33d4:	9603      	str	r6, [sp, #12]
   e33d6:	9601      	str	r6, [sp, #4]
   e33d8:	4633      	mov	r3, r6
   e33da:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e33de:	494d      	ldr	r1, [pc, #308]	; (e3514 <_tzset_unlocked_r+0x2f4>)
   e33e0:	4628      	mov	r0, r5
   e33e2:	f7fb ff31 	bl	df248 <siscanf>
   e33e6:	2803      	cmp	r0, #3
   e33e8:	d17e      	bne.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e33ea:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e33ee:	1e4b      	subs	r3, r1, #1
   e33f0:	2b0b      	cmp	r3, #11
   e33f2:	d879      	bhi.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e33f4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e33f8:	1e53      	subs	r3, r2, #1
   e33fa:	2b04      	cmp	r3, #4
   e33fc:	d874      	bhi.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e33fe:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e3402:	2b06      	cmp	r3, #6
   e3404:	d870      	bhi.n	e34e8 <_tzset_unlocked_r+0x2c8>
   e3406:	f887 8008 	strb.w	r8, [r7, #8]
   e340a:	60f9      	str	r1, [r7, #12]
   e340c:	613a      	str	r2, [r7, #16]
   e340e:	617b      	str	r3, [r7, #20]
   e3410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3412:	eb05 0803 	add.w	r8, r5, r3
   e3416:	e02a      	b.n	e346e <_tzset_unlocked_r+0x24e>
   e3418:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e341c:	bf06      	itte	eq
   e341e:	3501      	addeq	r5, #1
   e3420:	4643      	moveq	r3, r8
   e3422:	2344      	movne	r3, #68	; 0x44
   e3424:	220a      	movs	r2, #10
   e3426:	a90b      	add	r1, sp, #44	; 0x2c
   e3428:	4628      	mov	r0, r5
   e342a:	9305      	str	r3, [sp, #20]
   e342c:	f7ff fe3e 	bl	e30ac <strtoul>
   e3430:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e3434:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e3438:	4545      	cmp	r5, r8
   e343a:	9b05      	ldr	r3, [sp, #20]
   e343c:	d114      	bne.n	e3468 <_tzset_unlocked_r+0x248>
   e343e:	234d      	movs	r3, #77	; 0x4d
   e3440:	f1b9 0f00 	cmp.w	r9, #0
   e3444:	d107      	bne.n	e3456 <_tzset_unlocked_r+0x236>
   e3446:	7223      	strb	r3, [r4, #8]
   e3448:	2303      	movs	r3, #3
   e344a:	60e3      	str	r3, [r4, #12]
   e344c:	2302      	movs	r3, #2
   e344e:	6123      	str	r3, [r4, #16]
   e3450:	f8c4 9014 	str.w	r9, [r4, #20]
   e3454:	e00b      	b.n	e346e <_tzset_unlocked_r+0x24e>
   e3456:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e345a:	230b      	movs	r3, #11
   e345c:	62a3      	str	r3, [r4, #40]	; 0x28
   e345e:	2301      	movs	r3, #1
   e3460:	62e3      	str	r3, [r4, #44]	; 0x2c
   e3462:	2300      	movs	r3, #0
   e3464:	6323      	str	r3, [r4, #48]	; 0x30
   e3466:	e002      	b.n	e346e <_tzset_unlocked_r+0x24e>
   e3468:	b280      	uxth	r0, r0
   e346a:	723b      	strb	r3, [r7, #8]
   e346c:	6178      	str	r0, [r7, #20]
   e346e:	2302      	movs	r3, #2
   e3470:	f8ad 301c 	strh.w	r3, [sp, #28]
   e3474:	2300      	movs	r3, #0
   e3476:	f8ad 301e 	strh.w	r3, [sp, #30]
   e347a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e347e:	930a      	str	r3, [sp, #40]	; 0x28
   e3480:	f898 3000 	ldrb.w	r3, [r8]
   e3484:	2b2f      	cmp	r3, #47	; 0x2f
   e3486:	d10b      	bne.n	e34a0 <_tzset_unlocked_r+0x280>
   e3488:	9603      	str	r6, [sp, #12]
   e348a:	f8cd a008 	str.w	sl, [sp, #8]
   e348e:	9601      	str	r6, [sp, #4]
   e3490:	f8cd b000 	str.w	fp, [sp]
   e3494:	4633      	mov	r3, r6
   e3496:	aa07      	add	r2, sp, #28
   e3498:	491f      	ldr	r1, [pc, #124]	; (e3518 <_tzset_unlocked_r+0x2f8>)
   e349a:	4640      	mov	r0, r8
   e349c:	f7fb fed4 	bl	df248 <siscanf>
   e34a0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e34a4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e34a8:	213c      	movs	r1, #60	; 0x3c
   e34aa:	fb01 3302 	mla	r3, r1, r2, r3
   e34ae:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e34b2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e34b6:	fb01 3302 	mla	r3, r1, r2, r3
   e34ba:	61bb      	str	r3, [r7, #24]
   e34bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e34be:	f109 0901 	add.w	r9, r9, #1
   e34c2:	f1b9 0f02 	cmp.w	r9, #2
   e34c6:	4445      	add	r5, r8
   e34c8:	f107 071c 	add.w	r7, r7, #28
   e34cc:	f47f af74 	bne.w	e33b8 <_tzset_unlocked_r+0x198>
   e34d0:	6860      	ldr	r0, [r4, #4]
   e34d2:	f7ff fdf5 	bl	e30c0 <__tzcalc_limits>
   e34d6:	4b08      	ldr	r3, [pc, #32]	; (e34f8 <_tzset_unlocked_r+0x2d8>)
   e34d8:	6a22      	ldr	r2, [r4, #32]
   e34da:	601a      	str	r2, [r3, #0]
   e34dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e34de:	1a9b      	subs	r3, r3, r2
   e34e0:	4a07      	ldr	r2, [pc, #28]	; (e3500 <_tzset_unlocked_r+0x2e0>)
   e34e2:	bf18      	it	ne
   e34e4:	2301      	movne	r3, #1
   e34e6:	6013      	str	r3, [r2, #0]
   e34e8:	b00d      	add	sp, #52	; 0x34
   e34ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e34ee:	bf00      	nop
   e34f0:	000e4be8 	.word	0x000e4be8
   e34f4:	2003e7e0 	.word	0x2003e7e0
   e34f8:	2003e7e8 	.word	0x2003e7e8
   e34fc:	000e4beb 	.word	0x000e4beb
   e3500:	2003e7e4 	.word	0x2003e7e4
   e3504:	2003e29c 	.word	0x2003e29c
   e3508:	2003e7d3 	.word	0x2003e7d3
   e350c:	000e4bef 	.word	0x000e4bef
   e3510:	000e4c12 	.word	0x000e4c12
   e3514:	000e4bfe 	.word	0x000e4bfe
   e3518:	000e4c11 	.word	0x000e4c11
   e351c:	2003e7c8 	.word	0x2003e7c8

000e3520 <rshift>:
   e3520:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3522:	6906      	ldr	r6, [r0, #16]
   e3524:	114b      	asrs	r3, r1, #5
   e3526:	42b3      	cmp	r3, r6
   e3528:	f100 0514 	add.w	r5, r0, #20
   e352c:	da27      	bge.n	e357e <rshift+0x5e>
   e352e:	f011 011f 	ands.w	r1, r1, #31
   e3532:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e3536:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e353a:	d101      	bne.n	e3540 <rshift+0x20>
   e353c:	4629      	mov	r1, r5
   e353e:	e016      	b.n	e356e <rshift+0x4e>
   e3540:	1d14      	adds	r4, r2, #4
   e3542:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e3546:	f1c1 0e20 	rsb	lr, r1, #32
   e354a:	40ca      	lsrs	r2, r1
   e354c:	462b      	mov	r3, r5
   e354e:	42b4      	cmp	r4, r6
   e3550:	d209      	bcs.n	e3566 <rshift+0x46>
   e3552:	6827      	ldr	r7, [r4, #0]
   e3554:	fa07 f70e 	lsl.w	r7, r7, lr
   e3558:	433a      	orrs	r2, r7
   e355a:	f843 2b04 	str.w	r2, [r3], #4
   e355e:	f854 2b04 	ldr.w	r2, [r4], #4
   e3562:	40ca      	lsrs	r2, r1
   e3564:	e7f3      	b.n	e354e <rshift+0x2e>
   e3566:	601a      	str	r2, [r3, #0]
   e3568:	b152      	cbz	r2, e3580 <rshift+0x60>
   e356a:	3304      	adds	r3, #4
   e356c:	e008      	b.n	e3580 <rshift+0x60>
   e356e:	42b2      	cmp	r2, r6
   e3570:	460b      	mov	r3, r1
   e3572:	d205      	bcs.n	e3580 <rshift+0x60>
   e3574:	f852 3b04 	ldr.w	r3, [r2], #4
   e3578:	f841 3b04 	str.w	r3, [r1], #4
   e357c:	e7f7      	b.n	e356e <rshift+0x4e>
   e357e:	462b      	mov	r3, r5
   e3580:	1b5b      	subs	r3, r3, r5
   e3582:	109b      	asrs	r3, r3, #2
   e3584:	6103      	str	r3, [r0, #16]
   e3586:	b903      	cbnz	r3, e358a <rshift+0x6a>
   e3588:	6143      	str	r3, [r0, #20]
   e358a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e358c <__hexdig_fun>:
   e358c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e3590:	2b09      	cmp	r3, #9
   e3592:	d801      	bhi.n	e3598 <__hexdig_fun+0xc>
   e3594:	3820      	subs	r0, #32
   e3596:	e00a      	b.n	e35ae <__hexdig_fun+0x22>
   e3598:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e359c:	2b05      	cmp	r3, #5
   e359e:	d801      	bhi.n	e35a4 <__hexdig_fun+0x18>
   e35a0:	3847      	subs	r0, #71	; 0x47
   e35a2:	e004      	b.n	e35ae <__hexdig_fun+0x22>
   e35a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e35a8:	2b05      	cmp	r3, #5
   e35aa:	d802      	bhi.n	e35b2 <__hexdig_fun+0x26>
   e35ac:	3827      	subs	r0, #39	; 0x27
   e35ae:	b2c0      	uxtb	r0, r0
   e35b0:	4770      	bx	lr
   e35b2:	2000      	movs	r0, #0
   e35b4:	4770      	bx	lr

000e35b6 <__gethex>:
   e35b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e35ba:	b08b      	sub	sp, #44	; 0x2c
   e35bc:	468a      	mov	sl, r1
   e35be:	4690      	mov	r8, r2
   e35c0:	9306      	str	r3, [sp, #24]
   e35c2:	9002      	str	r0, [sp, #8]
   e35c4:	f7fe fe2a 	bl	e221c <_localeconv_r>
   e35c8:	6803      	ldr	r3, [r0, #0]
   e35ca:	9303      	str	r3, [sp, #12]
   e35cc:	4618      	mov	r0, r3
   e35ce:	f7fe fea0 	bl	e2312 <strlen>
   e35d2:	9b03      	ldr	r3, [sp, #12]
   e35d4:	9001      	str	r0, [sp, #4]
   e35d6:	4403      	add	r3, r0
   e35d8:	f04f 0b00 	mov.w	fp, #0
   e35dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e35e0:	9307      	str	r3, [sp, #28]
   e35e2:	f8da 3000 	ldr.w	r3, [sl]
   e35e6:	3302      	adds	r3, #2
   e35e8:	461f      	mov	r7, r3
   e35ea:	f813 0b01 	ldrb.w	r0, [r3], #1
   e35ee:	2830      	cmp	r0, #48	; 0x30
   e35f0:	d102      	bne.n	e35f8 <__gethex+0x42>
   e35f2:	f10b 0b01 	add.w	fp, fp, #1
   e35f6:	e7f7      	b.n	e35e8 <__gethex+0x32>
   e35f8:	f7ff ffc8 	bl	e358c <__hexdig_fun>
   e35fc:	4604      	mov	r4, r0
   e35fe:	b9e0      	cbnz	r0, e363a <__gethex+0x84>
   e3600:	9a01      	ldr	r2, [sp, #4]
   e3602:	9903      	ldr	r1, [sp, #12]
   e3604:	4638      	mov	r0, r7
   e3606:	f7fe fe8c 	bl	e2322 <strncmp>
   e360a:	2800      	cmp	r0, #0
   e360c:	d134      	bne.n	e3678 <__gethex+0xc2>
   e360e:	9b01      	ldr	r3, [sp, #4]
   e3610:	5cf8      	ldrb	r0, [r7, r3]
   e3612:	18fe      	adds	r6, r7, r3
   e3614:	f7ff ffba 	bl	e358c <__hexdig_fun>
   e3618:	b380      	cbz	r0, e367c <__gethex+0xc6>
   e361a:	4633      	mov	r3, r6
   e361c:	7818      	ldrb	r0, [r3, #0]
   e361e:	2830      	cmp	r0, #48	; 0x30
   e3620:	461f      	mov	r7, r3
   e3622:	f103 0301 	add.w	r3, r3, #1
   e3626:	d0f9      	beq.n	e361c <__gethex+0x66>
   e3628:	f7ff ffb0 	bl	e358c <__hexdig_fun>
   e362c:	fab0 f580 	clz	r5, r0
   e3630:	096d      	lsrs	r5, r5, #5
   e3632:	4634      	mov	r4, r6
   e3634:	f04f 0b01 	mov.w	fp, #1
   e3638:	e001      	b.n	e363e <__gethex+0x88>
   e363a:	2500      	movs	r5, #0
   e363c:	462c      	mov	r4, r5
   e363e:	463a      	mov	r2, r7
   e3640:	4616      	mov	r6, r2
   e3642:	3201      	adds	r2, #1
   e3644:	7830      	ldrb	r0, [r6, #0]
   e3646:	f7ff ffa1 	bl	e358c <__hexdig_fun>
   e364a:	2800      	cmp	r0, #0
   e364c:	d1f8      	bne.n	e3640 <__gethex+0x8a>
   e364e:	9a01      	ldr	r2, [sp, #4]
   e3650:	9903      	ldr	r1, [sp, #12]
   e3652:	4630      	mov	r0, r6
   e3654:	f7fe fe65 	bl	e2322 <strncmp>
   e3658:	b950      	cbnz	r0, e3670 <__gethex+0xba>
   e365a:	b954      	cbnz	r4, e3672 <__gethex+0xbc>
   e365c:	9b01      	ldr	r3, [sp, #4]
   e365e:	18f4      	adds	r4, r6, r3
   e3660:	4622      	mov	r2, r4
   e3662:	4616      	mov	r6, r2
   e3664:	3201      	adds	r2, #1
   e3666:	7830      	ldrb	r0, [r6, #0]
   e3668:	f7ff ff90 	bl	e358c <__hexdig_fun>
   e366c:	2800      	cmp	r0, #0
   e366e:	d1f8      	bne.n	e3662 <__gethex+0xac>
   e3670:	b134      	cbz	r4, e3680 <__gethex+0xca>
   e3672:	1ba4      	subs	r4, r4, r6
   e3674:	00a4      	lsls	r4, r4, #2
   e3676:	e003      	b.n	e3680 <__gethex+0xca>
   e3678:	463e      	mov	r6, r7
   e367a:	e000      	b.n	e367e <__gethex+0xc8>
   e367c:	4604      	mov	r4, r0
   e367e:	2501      	movs	r5, #1
   e3680:	7833      	ldrb	r3, [r6, #0]
   e3682:	2b50      	cmp	r3, #80	; 0x50
   e3684:	d001      	beq.n	e368a <__gethex+0xd4>
   e3686:	2b70      	cmp	r3, #112	; 0x70
   e3688:	d12a      	bne.n	e36e0 <__gethex+0x12a>
   e368a:	7873      	ldrb	r3, [r6, #1]
   e368c:	2b2b      	cmp	r3, #43	; 0x2b
   e368e:	d008      	beq.n	e36a2 <__gethex+0xec>
   e3690:	2b2d      	cmp	r3, #45	; 0x2d
   e3692:	d003      	beq.n	e369c <__gethex+0xe6>
   e3694:	1c71      	adds	r1, r6, #1
   e3696:	f04f 0900 	mov.w	r9, #0
   e369a:	e005      	b.n	e36a8 <__gethex+0xf2>
   e369c:	f04f 0901 	mov.w	r9, #1
   e36a0:	e001      	b.n	e36a6 <__gethex+0xf0>
   e36a2:	f04f 0900 	mov.w	r9, #0
   e36a6:	1cb1      	adds	r1, r6, #2
   e36a8:	7808      	ldrb	r0, [r1, #0]
   e36aa:	f7ff ff6f 	bl	e358c <__hexdig_fun>
   e36ae:	1e43      	subs	r3, r0, #1
   e36b0:	b2db      	uxtb	r3, r3
   e36b2:	2b18      	cmp	r3, #24
   e36b4:	d814      	bhi.n	e36e0 <__gethex+0x12a>
   e36b6:	f1a0 0210 	sub.w	r2, r0, #16
   e36ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e36be:	f7ff ff65 	bl	e358c <__hexdig_fun>
   e36c2:	1e43      	subs	r3, r0, #1
   e36c4:	b2db      	uxtb	r3, r3
   e36c6:	2b18      	cmp	r3, #24
   e36c8:	d804      	bhi.n	e36d4 <__gethex+0x11e>
   e36ca:	230a      	movs	r3, #10
   e36cc:	fb03 0202 	mla	r2, r3, r2, r0
   e36d0:	3a10      	subs	r2, #16
   e36d2:	e7f2      	b.n	e36ba <__gethex+0x104>
   e36d4:	f1b9 0f00 	cmp.w	r9, #0
   e36d8:	d000      	beq.n	e36dc <__gethex+0x126>
   e36da:	4252      	negs	r2, r2
   e36dc:	4414      	add	r4, r2
   e36de:	e000      	b.n	e36e2 <__gethex+0x12c>
   e36e0:	4631      	mov	r1, r6
   e36e2:	f8ca 1000 	str.w	r1, [sl]
   e36e6:	b12d      	cbz	r5, e36f4 <__gethex+0x13e>
   e36e8:	f1bb 0f00 	cmp.w	fp, #0
   e36ec:	bf14      	ite	ne
   e36ee:	2000      	movne	r0, #0
   e36f0:	2006      	moveq	r0, #6
   e36f2:	e17c      	b.n	e39ee <__gethex+0x438>
   e36f4:	1bf3      	subs	r3, r6, r7
   e36f6:	3b01      	subs	r3, #1
   e36f8:	4629      	mov	r1, r5
   e36fa:	2b07      	cmp	r3, #7
   e36fc:	dd02      	ble.n	e3704 <__gethex+0x14e>
   e36fe:	3101      	adds	r1, #1
   e3700:	105b      	asrs	r3, r3, #1
   e3702:	e7fa      	b.n	e36fa <__gethex+0x144>
   e3704:	9802      	ldr	r0, [sp, #8]
   e3706:	f000 fb09 	bl	e3d1c <_Balloc>
   e370a:	9b01      	ldr	r3, [sp, #4]
   e370c:	f100 0a14 	add.w	sl, r0, #20
   e3710:	f04f 0900 	mov.w	r9, #0
   e3714:	f1c3 0301 	rsb	r3, r3, #1
   e3718:	4605      	mov	r5, r0
   e371a:	f8cd a010 	str.w	sl, [sp, #16]
   e371e:	46cb      	mov	fp, r9
   e3720:	9308      	str	r3, [sp, #32]
   e3722:	42b7      	cmp	r7, r6
   e3724:	d22f      	bcs.n	e3786 <__gethex+0x1d0>
   e3726:	1e73      	subs	r3, r6, #1
   e3728:	9305      	str	r3, [sp, #20]
   e372a:	9a07      	ldr	r2, [sp, #28]
   e372c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e3730:	4293      	cmp	r3, r2
   e3732:	d00b      	beq.n	e374c <__gethex+0x196>
   e3734:	f1bb 0f20 	cmp.w	fp, #32
   e3738:	d116      	bne.n	e3768 <__gethex+0x1b2>
   e373a:	9b04      	ldr	r3, [sp, #16]
   e373c:	f8c3 9000 	str.w	r9, [r3]
   e3740:	3304      	adds	r3, #4
   e3742:	f04f 0900 	mov.w	r9, #0
   e3746:	9304      	str	r3, [sp, #16]
   e3748:	46cb      	mov	fp, r9
   e374a:	e00d      	b.n	e3768 <__gethex+0x1b2>
   e374c:	9b05      	ldr	r3, [sp, #20]
   e374e:	9a08      	ldr	r2, [sp, #32]
   e3750:	4413      	add	r3, r2
   e3752:	429f      	cmp	r7, r3
   e3754:	d8ee      	bhi.n	e3734 <__gethex+0x17e>
   e3756:	4618      	mov	r0, r3
   e3758:	9a01      	ldr	r2, [sp, #4]
   e375a:	9903      	ldr	r1, [sp, #12]
   e375c:	9309      	str	r3, [sp, #36]	; 0x24
   e375e:	f7fe fde0 	bl	e2322 <strncmp>
   e3762:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3764:	b168      	cbz	r0, e3782 <__gethex+0x1cc>
   e3766:	e7e5      	b.n	e3734 <__gethex+0x17e>
   e3768:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e376c:	f7ff ff0e 	bl	e358c <__hexdig_fun>
   e3770:	f000 000f 	and.w	r0, r0, #15
   e3774:	fa00 f00b 	lsl.w	r0, r0, fp
   e3778:	9b05      	ldr	r3, [sp, #20]
   e377a:	ea49 0900 	orr.w	r9, r9, r0
   e377e:	f10b 0b04 	add.w	fp, fp, #4
   e3782:	461e      	mov	r6, r3
   e3784:	e7cd      	b.n	e3722 <__gethex+0x16c>
   e3786:	9804      	ldr	r0, [sp, #16]
   e3788:	f840 9b04 	str.w	r9, [r0], #4
   e378c:	ebca 0000 	rsb	r0, sl, r0
   e3790:	1080      	asrs	r0, r0, #2
   e3792:	6128      	str	r0, [r5, #16]
   e3794:	0147      	lsls	r7, r0, #5
   e3796:	4648      	mov	r0, r9
   e3798:	f000 fb85 	bl	e3ea6 <__hi0bits>
   e379c:	f8d8 6000 	ldr.w	r6, [r8]
   e37a0:	1a38      	subs	r0, r7, r0
   e37a2:	42b0      	cmp	r0, r6
   e37a4:	dd26      	ble.n	e37f4 <__gethex+0x23e>
   e37a6:	1b87      	subs	r7, r0, r6
   e37a8:	4639      	mov	r1, r7
   e37aa:	4628      	mov	r0, r5
   e37ac:	f000 fe83 	bl	e44b6 <__any_on>
   e37b0:	b1c8      	cbz	r0, e37e6 <__gethex+0x230>
   e37b2:	1e7b      	subs	r3, r7, #1
   e37b4:	1159      	asrs	r1, r3, #5
   e37b6:	f003 021f 	and.w	r2, r3, #31
   e37ba:	f04f 0901 	mov.w	r9, #1
   e37be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e37c2:	fa09 f202 	lsl.w	r2, r9, r2
   e37c6:	420a      	tst	r2, r1
   e37c8:	d00e      	beq.n	e37e8 <__gethex+0x232>
   e37ca:	454b      	cmp	r3, r9
   e37cc:	dc02      	bgt.n	e37d4 <__gethex+0x21e>
   e37ce:	f04f 0902 	mov.w	r9, #2
   e37d2:	e009      	b.n	e37e8 <__gethex+0x232>
   e37d4:	1eb9      	subs	r1, r7, #2
   e37d6:	4628      	mov	r0, r5
   e37d8:	f000 fe6d 	bl	e44b6 <__any_on>
   e37dc:	2800      	cmp	r0, #0
   e37de:	d0f6      	beq.n	e37ce <__gethex+0x218>
   e37e0:	f04f 0903 	mov.w	r9, #3
   e37e4:	e000      	b.n	e37e8 <__gethex+0x232>
   e37e6:	4681      	mov	r9, r0
   e37e8:	4639      	mov	r1, r7
   e37ea:	4628      	mov	r0, r5
   e37ec:	f7ff fe98 	bl	e3520 <rshift>
   e37f0:	443c      	add	r4, r7
   e37f2:	e00c      	b.n	e380e <__gethex+0x258>
   e37f4:	da09      	bge.n	e380a <__gethex+0x254>
   e37f6:	1a37      	subs	r7, r6, r0
   e37f8:	4629      	mov	r1, r5
   e37fa:	463a      	mov	r2, r7
   e37fc:	9802      	ldr	r0, [sp, #8]
   e37fe:	f000 fc87 	bl	e4110 <__lshift>
   e3802:	1be4      	subs	r4, r4, r7
   e3804:	4605      	mov	r5, r0
   e3806:	f100 0a14 	add.w	sl, r0, #20
   e380a:	f04f 0900 	mov.w	r9, #0
   e380e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3812:	429c      	cmp	r4, r3
   e3814:	dd08      	ble.n	e3828 <__gethex+0x272>
   e3816:	9802      	ldr	r0, [sp, #8]
   e3818:	4629      	mov	r1, r5
   e381a:	f000 fab4 	bl	e3d86 <_Bfree>
   e381e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e3820:	2300      	movs	r3, #0
   e3822:	6013      	str	r3, [r2, #0]
   e3824:	20a3      	movs	r0, #163	; 0xa3
   e3826:	e0e2      	b.n	e39ee <__gethex+0x438>
   e3828:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e382c:	4284      	cmp	r4, r0
   e382e:	da53      	bge.n	e38d8 <__gethex+0x322>
   e3830:	1b04      	subs	r4, r0, r4
   e3832:	42a6      	cmp	r6, r4
   e3834:	dc2e      	bgt.n	e3894 <__gethex+0x2de>
   e3836:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e383a:	2b02      	cmp	r3, #2
   e383c:	d01a      	beq.n	e3874 <__gethex+0x2be>
   e383e:	2b03      	cmp	r3, #3
   e3840:	d01c      	beq.n	e387c <__gethex+0x2c6>
   e3842:	2b01      	cmp	r3, #1
   e3844:	d11d      	bne.n	e3882 <__gethex+0x2cc>
   e3846:	42a6      	cmp	r6, r4
   e3848:	d11b      	bne.n	e3882 <__gethex+0x2cc>
   e384a:	2e01      	cmp	r6, #1
   e384c:	dc0b      	bgt.n	e3866 <__gethex+0x2b0>
   e384e:	9a06      	ldr	r2, [sp, #24]
   e3850:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e3854:	6013      	str	r3, [r2, #0]
   e3856:	2301      	movs	r3, #1
   e3858:	612b      	str	r3, [r5, #16]
   e385a:	f8ca 3000 	str.w	r3, [sl]
   e385e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e3860:	2062      	movs	r0, #98	; 0x62
   e3862:	601d      	str	r5, [r3, #0]
   e3864:	e0c3      	b.n	e39ee <__gethex+0x438>
   e3866:	1e71      	subs	r1, r6, #1
   e3868:	4628      	mov	r0, r5
   e386a:	f000 fe24 	bl	e44b6 <__any_on>
   e386e:	2800      	cmp	r0, #0
   e3870:	d1ed      	bne.n	e384e <__gethex+0x298>
   e3872:	e006      	b.n	e3882 <__gethex+0x2cc>
   e3874:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3876:	2b00      	cmp	r3, #0
   e3878:	d0e9      	beq.n	e384e <__gethex+0x298>
   e387a:	e002      	b.n	e3882 <__gethex+0x2cc>
   e387c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e387e:	2b00      	cmp	r3, #0
   e3880:	d1e5      	bne.n	e384e <__gethex+0x298>
   e3882:	9802      	ldr	r0, [sp, #8]
   e3884:	4629      	mov	r1, r5
   e3886:	f000 fa7e 	bl	e3d86 <_Bfree>
   e388a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e388c:	2300      	movs	r3, #0
   e388e:	6013      	str	r3, [r2, #0]
   e3890:	2050      	movs	r0, #80	; 0x50
   e3892:	e0ac      	b.n	e39ee <__gethex+0x438>
   e3894:	1e67      	subs	r7, r4, #1
   e3896:	f1b9 0f00 	cmp.w	r9, #0
   e389a:	d106      	bne.n	e38aa <__gethex+0x2f4>
   e389c:	b13f      	cbz	r7, e38ae <__gethex+0x2f8>
   e389e:	4639      	mov	r1, r7
   e38a0:	4628      	mov	r0, r5
   e38a2:	f000 fe08 	bl	e44b6 <__any_on>
   e38a6:	4681      	mov	r9, r0
   e38a8:	e001      	b.n	e38ae <__gethex+0x2f8>
   e38aa:	f04f 0901 	mov.w	r9, #1
   e38ae:	117a      	asrs	r2, r7, #5
   e38b0:	2301      	movs	r3, #1
   e38b2:	f007 071f 	and.w	r7, r7, #31
   e38b6:	fa03 f707 	lsl.w	r7, r3, r7
   e38ba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e38be:	4621      	mov	r1, r4
   e38c0:	421f      	tst	r7, r3
   e38c2:	4628      	mov	r0, r5
   e38c4:	bf18      	it	ne
   e38c6:	f049 0902 	orrne.w	r9, r9, #2
   e38ca:	1b36      	subs	r6, r6, r4
   e38cc:	f7ff fe28 	bl	e3520 <rshift>
   e38d0:	2702      	movs	r7, #2
   e38d2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e38d6:	e000      	b.n	e38da <__gethex+0x324>
   e38d8:	2701      	movs	r7, #1
   e38da:	f1b9 0f00 	cmp.w	r9, #0
   e38de:	f000 8081 	beq.w	e39e4 <__gethex+0x42e>
   e38e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e38e6:	2b02      	cmp	r3, #2
   e38e8:	d00e      	beq.n	e3908 <__gethex+0x352>
   e38ea:	2b03      	cmp	r3, #3
   e38ec:	d010      	beq.n	e3910 <__gethex+0x35a>
   e38ee:	2b01      	cmp	r3, #1
   e38f0:	d176      	bne.n	e39e0 <__gethex+0x42a>
   e38f2:	f019 0f02 	tst.w	r9, #2
   e38f6:	d073      	beq.n	e39e0 <__gethex+0x42a>
   e38f8:	f8da 0000 	ldr.w	r0, [sl]
   e38fc:	ea49 0900 	orr.w	r9, r9, r0
   e3900:	f019 0f01 	tst.w	r9, #1
   e3904:	d107      	bne.n	e3916 <__gethex+0x360>
   e3906:	e06b      	b.n	e39e0 <__gethex+0x42a>
   e3908:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e390a:	f1c3 0301 	rsb	r3, r3, #1
   e390e:	9315      	str	r3, [sp, #84]	; 0x54
   e3910:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3912:	2b00      	cmp	r3, #0
   e3914:	d064      	beq.n	e39e0 <__gethex+0x42a>
   e3916:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e391a:	f105 0314 	add.w	r3, r5, #20
   e391e:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e3922:	eb03 0109 	add.w	r1, r3, r9
   e3926:	2000      	movs	r0, #0
   e3928:	681a      	ldr	r2, [r3, #0]
   e392a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e392e:	d002      	beq.n	e3936 <__gethex+0x380>
   e3930:	3201      	adds	r2, #1
   e3932:	601a      	str	r2, [r3, #0]
   e3934:	e020      	b.n	e3978 <__gethex+0x3c2>
   e3936:	f843 0b04 	str.w	r0, [r3], #4
   e393a:	4299      	cmp	r1, r3
   e393c:	d8f4      	bhi.n	e3928 <__gethex+0x372>
   e393e:	68ab      	ldr	r3, [r5, #8]
   e3940:	459a      	cmp	sl, r3
   e3942:	db12      	blt.n	e396a <__gethex+0x3b4>
   e3944:	6869      	ldr	r1, [r5, #4]
   e3946:	9802      	ldr	r0, [sp, #8]
   e3948:	3101      	adds	r1, #1
   e394a:	f000 f9e7 	bl	e3d1c <_Balloc>
   e394e:	692a      	ldr	r2, [r5, #16]
   e3950:	3202      	adds	r2, #2
   e3952:	f105 010c 	add.w	r1, r5, #12
   e3956:	4683      	mov	fp, r0
   e3958:	0092      	lsls	r2, r2, #2
   e395a:	300c      	adds	r0, #12
   e395c:	f7fe fc71 	bl	e2242 <memcpy>
   e3960:	4629      	mov	r1, r5
   e3962:	9802      	ldr	r0, [sp, #8]
   e3964:	f000 fa0f 	bl	e3d86 <_Bfree>
   e3968:	465d      	mov	r5, fp
   e396a:	692b      	ldr	r3, [r5, #16]
   e396c:	1c5a      	adds	r2, r3, #1
   e396e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e3972:	612a      	str	r2, [r5, #16]
   e3974:	2201      	movs	r2, #1
   e3976:	615a      	str	r2, [r3, #20]
   e3978:	2f02      	cmp	r7, #2
   e397a:	f105 0214 	add.w	r2, r5, #20
   e397e:	d111      	bne.n	e39a4 <__gethex+0x3ee>
   e3980:	f8d8 3000 	ldr.w	r3, [r8]
   e3984:	3b01      	subs	r3, #1
   e3986:	429e      	cmp	r6, r3
   e3988:	d127      	bne.n	e39da <__gethex+0x424>
   e398a:	1171      	asrs	r1, r6, #5
   e398c:	2301      	movs	r3, #1
   e398e:	f006 061f 	and.w	r6, r6, #31
   e3992:	fa03 f606 	lsl.w	r6, r3, r6
   e3996:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e399a:	421e      	tst	r6, r3
   e399c:	bf0c      	ite	eq
   e399e:	2702      	moveq	r7, #2
   e39a0:	2701      	movne	r7, #1
   e39a2:	e01a      	b.n	e39da <__gethex+0x424>
   e39a4:	692b      	ldr	r3, [r5, #16]
   e39a6:	459a      	cmp	sl, r3
   e39a8:	da0a      	bge.n	e39c0 <__gethex+0x40a>
   e39aa:	2101      	movs	r1, #1
   e39ac:	4628      	mov	r0, r5
   e39ae:	f7ff fdb7 	bl	e3520 <rshift>
   e39b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e39b6:	3401      	adds	r4, #1
   e39b8:	429c      	cmp	r4, r3
   e39ba:	f73f af2c 	bgt.w	e3816 <__gethex+0x260>
   e39be:	e00b      	b.n	e39d8 <__gethex+0x422>
   e39c0:	f016 061f 	ands.w	r6, r6, #31
   e39c4:	d008      	beq.n	e39d8 <__gethex+0x422>
   e39c6:	4491      	add	r9, r2
   e39c8:	f1c6 0620 	rsb	r6, r6, #32
   e39cc:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e39d0:	f000 fa69 	bl	e3ea6 <__hi0bits>
   e39d4:	42b0      	cmp	r0, r6
   e39d6:	dbe8      	blt.n	e39aa <__gethex+0x3f4>
   e39d8:	2701      	movs	r7, #1
   e39da:	f047 0720 	orr.w	r7, r7, #32
   e39de:	e001      	b.n	e39e4 <__gethex+0x42e>
   e39e0:	f047 0710 	orr.w	r7, r7, #16
   e39e4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e39e6:	601d      	str	r5, [r3, #0]
   e39e8:	9b06      	ldr	r3, [sp, #24]
   e39ea:	4638      	mov	r0, r7
   e39ec:	601c      	str	r4, [r3, #0]
   e39ee:	b00b      	add	sp, #44	; 0x2c
   e39f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e39f4 <L_shift>:
   e39f4:	f1c2 0208 	rsb	r2, r2, #8
   e39f8:	0092      	lsls	r2, r2, #2
   e39fa:	b570      	push	{r4, r5, r6, lr}
   e39fc:	f1c2 0620 	rsb	r6, r2, #32
   e3a00:	6843      	ldr	r3, [r0, #4]
   e3a02:	6805      	ldr	r5, [r0, #0]
   e3a04:	fa03 f406 	lsl.w	r4, r3, r6
   e3a08:	432c      	orrs	r4, r5
   e3a0a:	40d3      	lsrs	r3, r2
   e3a0c:	6004      	str	r4, [r0, #0]
   e3a0e:	f840 3f04 	str.w	r3, [r0, #4]!
   e3a12:	4288      	cmp	r0, r1
   e3a14:	d3f4      	bcc.n	e3a00 <L_shift+0xc>
   e3a16:	bd70      	pop	{r4, r5, r6, pc}

000e3a18 <__match>:
   e3a18:	b530      	push	{r4, r5, lr}
   e3a1a:	6803      	ldr	r3, [r0, #0]
   e3a1c:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3a20:	3301      	adds	r3, #1
   e3a22:	b14c      	cbz	r4, e3a38 <__match+0x20>
   e3a24:	781a      	ldrb	r2, [r3, #0]
   e3a26:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e3a2a:	2d19      	cmp	r5, #25
   e3a2c:	bf98      	it	ls
   e3a2e:	3220      	addls	r2, #32
   e3a30:	42a2      	cmp	r2, r4
   e3a32:	d0f3      	beq.n	e3a1c <__match+0x4>
   e3a34:	2000      	movs	r0, #0
   e3a36:	bd30      	pop	{r4, r5, pc}
   e3a38:	6003      	str	r3, [r0, #0]
   e3a3a:	2001      	movs	r0, #1
   e3a3c:	bd30      	pop	{r4, r5, pc}

000e3a3e <__hexnan>:
   e3a3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3a42:	680b      	ldr	r3, [r1, #0]
   e3a44:	f8d0 b000 	ldr.w	fp, [r0]
   e3a48:	115e      	asrs	r6, r3, #5
   e3a4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e3a4e:	f013 031f 	ands.w	r3, r3, #31
   e3a52:	b085      	sub	sp, #20
   e3a54:	bf18      	it	ne
   e3a56:	3604      	addne	r6, #4
   e3a58:	1f35      	subs	r5, r6, #4
   e3a5a:	4617      	mov	r7, r2
   e3a5c:	2200      	movs	r2, #0
   e3a5e:	4682      	mov	sl, r0
   e3a60:	9301      	str	r3, [sp, #4]
   e3a62:	f846 2c04 	str.w	r2, [r6, #-4]
   e3a66:	46a8      	mov	r8, r5
   e3a68:	462c      	mov	r4, r5
   e3a6a:	9200      	str	r2, [sp, #0]
   e3a6c:	4691      	mov	r9, r2
   e3a6e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e3a72:	2900      	cmp	r1, #0
   e3a74:	d03c      	beq.n	e3af0 <__hexnan+0xb2>
   e3a76:	4608      	mov	r0, r1
   e3a78:	9203      	str	r2, [sp, #12]
   e3a7a:	9102      	str	r1, [sp, #8]
   e3a7c:	f7ff fd86 	bl	e358c <__hexdig_fun>
   e3a80:	9a03      	ldr	r2, [sp, #12]
   e3a82:	bb00      	cbnz	r0, e3ac6 <__hexnan+0x88>
   e3a84:	9902      	ldr	r1, [sp, #8]
   e3a86:	2920      	cmp	r1, #32
   e3a88:	d816      	bhi.n	e3ab8 <__hexnan+0x7a>
   e3a8a:	9b00      	ldr	r3, [sp, #0]
   e3a8c:	4599      	cmp	r9, r3
   e3a8e:	ddee      	ble.n	e3a6e <__hexnan+0x30>
   e3a90:	4544      	cmp	r4, r8
   e3a92:	d205      	bcs.n	e3aa0 <__hexnan+0x62>
   e3a94:	2a07      	cmp	r2, #7
   e3a96:	dc03      	bgt.n	e3aa0 <__hexnan+0x62>
   e3a98:	4641      	mov	r1, r8
   e3a9a:	4620      	mov	r0, r4
   e3a9c:	f7ff ffaa 	bl	e39f4 <L_shift>
   e3aa0:	42bc      	cmp	r4, r7
   e3aa2:	d923      	bls.n	e3aec <__hexnan+0xae>
   e3aa4:	2300      	movs	r3, #0
   e3aa6:	f1a4 0804 	sub.w	r8, r4, #4
   e3aaa:	f844 3c04 	str.w	r3, [r4, #-4]
   e3aae:	f8cd 9000 	str.w	r9, [sp]
   e3ab2:	4644      	mov	r4, r8
   e3ab4:	461a      	mov	r2, r3
   e3ab6:	e7da      	b.n	e3a6e <__hexnan+0x30>
   e3ab8:	2929      	cmp	r1, #41	; 0x29
   e3aba:	d148      	bne.n	e3b4e <__hexnan+0x110>
   e3abc:	f10b 0301 	add.w	r3, fp, #1
   e3ac0:	f8ca 3000 	str.w	r3, [sl]
   e3ac4:	e014      	b.n	e3af0 <__hexnan+0xb2>
   e3ac6:	3201      	adds	r2, #1
   e3ac8:	2a08      	cmp	r2, #8
   e3aca:	f109 0901 	add.w	r9, r9, #1
   e3ace:	dd06      	ble.n	e3ade <__hexnan+0xa0>
   e3ad0:	42bc      	cmp	r4, r7
   e3ad2:	d9cc      	bls.n	e3a6e <__hexnan+0x30>
   e3ad4:	2300      	movs	r3, #0
   e3ad6:	f844 3c04 	str.w	r3, [r4, #-4]
   e3ada:	2201      	movs	r2, #1
   e3adc:	3c04      	subs	r4, #4
   e3ade:	6821      	ldr	r1, [r4, #0]
   e3ae0:	f000 000f 	and.w	r0, r0, #15
   e3ae4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e3ae8:	6020      	str	r0, [r4, #0]
   e3aea:	e7c0      	b.n	e3a6e <__hexnan+0x30>
   e3aec:	2208      	movs	r2, #8
   e3aee:	e7be      	b.n	e3a6e <__hexnan+0x30>
   e3af0:	f1b9 0f00 	cmp.w	r9, #0
   e3af4:	d02b      	beq.n	e3b4e <__hexnan+0x110>
   e3af6:	4544      	cmp	r4, r8
   e3af8:	d205      	bcs.n	e3b06 <__hexnan+0xc8>
   e3afa:	2a07      	cmp	r2, #7
   e3afc:	dc03      	bgt.n	e3b06 <__hexnan+0xc8>
   e3afe:	4641      	mov	r1, r8
   e3b00:	4620      	mov	r0, r4
   e3b02:	f7ff ff77 	bl	e39f4 <L_shift>
   e3b06:	42bc      	cmp	r4, r7
   e3b08:	d90c      	bls.n	e3b24 <__hexnan+0xe6>
   e3b0a:	463b      	mov	r3, r7
   e3b0c:	f854 2b04 	ldr.w	r2, [r4], #4
   e3b10:	f843 2b04 	str.w	r2, [r3], #4
   e3b14:	42a5      	cmp	r5, r4
   e3b16:	d2f9      	bcs.n	e3b0c <__hexnan+0xce>
   e3b18:	2200      	movs	r2, #0
   e3b1a:	f843 2b04 	str.w	r2, [r3], #4
   e3b1e:	429d      	cmp	r5, r3
   e3b20:	d2fb      	bcs.n	e3b1a <__hexnan+0xdc>
   e3b22:	e00b      	b.n	e3b3c <__hexnan+0xfe>
   e3b24:	9b01      	ldr	r3, [sp, #4]
   e3b26:	b14b      	cbz	r3, e3b3c <__hexnan+0xfe>
   e3b28:	f1c3 0220 	rsb	r2, r3, #32
   e3b2c:	f04f 33ff 	mov.w	r3, #4294967295
   e3b30:	40d3      	lsrs	r3, r2
   e3b32:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e3b36:	4013      	ands	r3, r2
   e3b38:	f846 3c04 	str.w	r3, [r6, #-4]
   e3b3c:	682b      	ldr	r3, [r5, #0]
   e3b3e:	b943      	cbnz	r3, e3b52 <__hexnan+0x114>
   e3b40:	42bd      	cmp	r5, r7
   e3b42:	d102      	bne.n	e3b4a <__hexnan+0x10c>
   e3b44:	2301      	movs	r3, #1
   e3b46:	602b      	str	r3, [r5, #0]
   e3b48:	e003      	b.n	e3b52 <__hexnan+0x114>
   e3b4a:	3d04      	subs	r5, #4
   e3b4c:	e7f6      	b.n	e3b3c <__hexnan+0xfe>
   e3b4e:	2004      	movs	r0, #4
   e3b50:	e000      	b.n	e3b54 <__hexnan+0x116>
   e3b52:	2005      	movs	r0, #5
   e3b54:	b005      	add	sp, #20
   e3b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e3b5c <_findenv_r>:
   e3b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3b60:	4607      	mov	r7, r0
   e3b62:	468b      	mov	fp, r1
   e3b64:	4690      	mov	r8, r2
   e3b66:	f000 fcd6 	bl	e4516 <__env_lock>
   e3b6a:	4b19      	ldr	r3, [pc, #100]	; (e3bd0 <_findenv_r+0x74>)
   e3b6c:	681d      	ldr	r5, [r3, #0]
   e3b6e:	469a      	mov	sl, r3
   e3b70:	b13d      	cbz	r5, e3b82 <_findenv_r+0x26>
   e3b72:	465c      	mov	r4, fp
   e3b74:	4623      	mov	r3, r4
   e3b76:	f813 2b01 	ldrb.w	r2, [r3], #1
   e3b7a:	b142      	cbz	r2, e3b8e <_findenv_r+0x32>
   e3b7c:	2a3d      	cmp	r2, #61	; 0x3d
   e3b7e:	461c      	mov	r4, r3
   e3b80:	d1f8      	bne.n	e3b74 <_findenv_r+0x18>
   e3b82:	4638      	mov	r0, r7
   e3b84:	f000 fcc8 	bl	e4518 <__env_unlock>
   e3b88:	2000      	movs	r0, #0
   e3b8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3b8e:	ebcb 0404 	rsb	r4, fp, r4
   e3b92:	46a9      	mov	r9, r5
   e3b94:	f859 0b04 	ldr.w	r0, [r9], #4
   e3b98:	2800      	cmp	r0, #0
   e3b9a:	d0f2      	beq.n	e3b82 <_findenv_r+0x26>
   e3b9c:	4622      	mov	r2, r4
   e3b9e:	4659      	mov	r1, fp
   e3ba0:	f7fe fbbf 	bl	e2322 <strncmp>
   e3ba4:	b988      	cbnz	r0, e3bca <_findenv_r+0x6e>
   e3ba6:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e3baa:	191e      	adds	r6, r3, r4
   e3bac:	5d1b      	ldrb	r3, [r3, r4]
   e3bae:	2b3d      	cmp	r3, #61	; 0x3d
   e3bb0:	d10b      	bne.n	e3bca <_findenv_r+0x6e>
   e3bb2:	f8da 3000 	ldr.w	r3, [sl]
   e3bb6:	1aed      	subs	r5, r5, r3
   e3bb8:	10ad      	asrs	r5, r5, #2
   e3bba:	4638      	mov	r0, r7
   e3bbc:	f8c8 5000 	str.w	r5, [r8]
   e3bc0:	f000 fcaa 	bl	e4518 <__env_unlock>
   e3bc4:	1c70      	adds	r0, r6, #1
   e3bc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3bca:	464d      	mov	r5, r9
   e3bcc:	e7e1      	b.n	e3b92 <_findenv_r+0x36>
   e3bce:	bf00      	nop
   e3bd0:	2003e2e4 	.word	0x2003e2e4

000e3bd4 <_getenv_r>:
   e3bd4:	b507      	push	{r0, r1, r2, lr}
   e3bd6:	aa01      	add	r2, sp, #4
   e3bd8:	f7ff ffc0 	bl	e3b5c <_findenv_r>
   e3bdc:	b003      	add	sp, #12
   e3bde:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e3be4 <__gettzinfo>:
   e3be4:	4800      	ldr	r0, [pc, #0]	; (e3be8 <__gettzinfo+0x4>)
   e3be6:	4770      	bx	lr
   e3be8:	2003e2a4 	.word	0x2003e2a4

000e3bec <gmtime_r>:
   e3bec:	6802      	ldr	r2, [r0, #0]
   e3bee:	4b47      	ldr	r3, [pc, #284]	; (e3d0c <gmtime_r+0x120>)
   e3bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3bf2:	fb92 f4f3 	sdiv	r4, r2, r3
   e3bf6:	fb03 2214 	mls	r2, r3, r4, r2
   e3bfa:	2a00      	cmp	r2, #0
   e3bfc:	bfbc      	itt	lt
   e3bfe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e3c02:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e3c06:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e3c0a:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e3c0e:	fb92 f3f0 	sdiv	r3, r2, r0
   e3c12:	fb00 2213 	mls	r2, r0, r3, r2
   e3c16:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e3c1a:	bfac      	ite	ge
   e3c1c:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e3c20:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e3c24:	608b      	str	r3, [r1, #8]
   e3c26:	fb92 f3f0 	sdiv	r3, r2, r0
   e3c2a:	fb00 2213 	mls	r2, r0, r3, r2
   e3c2e:	604b      	str	r3, [r1, #4]
   e3c30:	600a      	str	r2, [r1, #0]
   e3c32:	2307      	movs	r3, #7
   e3c34:	1ce2      	adds	r2, r4, #3
   e3c36:	fb92 f3f3 	sdiv	r3, r2, r3
   e3c3a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3c3e:	1ad3      	subs	r3, r2, r3
   e3c40:	618b      	str	r3, [r1, #24]
   e3c42:	4b33      	ldr	r3, [pc, #204]	; (e3d10 <gmtime_r+0x124>)
   e3c44:	4d33      	ldr	r5, [pc, #204]	; (e3d14 <gmtime_r+0x128>)
   e3c46:	fb94 f5f5 	sdiv	r5, r4, r5
   e3c4a:	fb03 4405 	mla	r4, r3, r5, r4
   e3c4e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e3c52:	fbb4 f2f2 	udiv	r2, r4, r2
   e3c56:	4422      	add	r2, r4
   e3c58:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e3c5c:	fbb4 f3f7 	udiv	r3, r4, r7
   e3c60:	1ad2      	subs	r2, r2, r3
   e3c62:	482d      	ldr	r0, [pc, #180]	; (e3d18 <gmtime_r+0x12c>)
   e3c64:	fbb4 f0f0 	udiv	r0, r4, r0
   e3c68:	f648 6694 	movw	r6, #36500	; 0x8e94
   e3c6c:	1a13      	subs	r3, r2, r0
   e3c6e:	fbb3 f6f6 	udiv	r6, r3, r6
   e3c72:	4434      	add	r4, r6
   e3c74:	f240 126d 	movw	r2, #365	; 0x16d
   e3c78:	fbb3 f0f2 	udiv	r0, r3, r2
   e3c7c:	fbb3 f3f7 	udiv	r3, r3, r7
   e3c80:	1ae3      	subs	r3, r4, r3
   e3c82:	fb02 3310 	mls	r3, r2, r0, r3
   e3c86:	2499      	movs	r4, #153	; 0x99
   e3c88:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e3c8c:	3202      	adds	r2, #2
   e3c8e:	fbb2 f2f4 	udiv	r2, r2, r4
   e3c92:	2a0a      	cmp	r2, #10
   e3c94:	fb04 f402 	mul.w	r4, r4, r2
   e3c98:	f104 0602 	add.w	r6, r4, #2
   e3c9c:	f04f 0405 	mov.w	r4, #5
   e3ca0:	fbb6 f4f4 	udiv	r4, r6, r4
   e3ca4:	bf34      	ite	cc
   e3ca6:	2602      	movcc	r6, #2
   e3ca8:	f06f 0609 	mvncs.w	r6, #9
   e3cac:	4416      	add	r6, r2
   e3cae:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3cb2:	fb02 0505 	mla	r5, r2, r5, r0
   e3cb6:	1c5f      	adds	r7, r3, #1
   e3cb8:	2e01      	cmp	r6, #1
   e3cba:	bf98      	it	ls
   e3cbc:	3501      	addls	r5, #1
   e3cbe:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e3cc2:	eba7 0704 	sub.w	r7, r7, r4
   e3cc6:	d302      	bcc.n	e3cce <gmtime_r+0xe2>
   e3cc8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e3ccc:	e014      	b.n	e3cf8 <gmtime_r+0x10c>
   e3cce:	0782      	lsls	r2, r0, #30
   e3cd0:	d105      	bne.n	e3cde <gmtime_r+0xf2>
   e3cd2:	2464      	movs	r4, #100	; 0x64
   e3cd4:	fbb0 f2f4 	udiv	r2, r0, r4
   e3cd8:	fb04 0212 	mls	r2, r4, r2, r0
   e3cdc:	b94a      	cbnz	r2, e3cf2 <gmtime_r+0x106>
   e3cde:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3ce2:	fbb0 f4f2 	udiv	r4, r0, r2
   e3ce6:	fb02 0014 	mls	r0, r2, r4, r0
   e3cea:	fab0 f280 	clz	r2, r0
   e3cee:	0952      	lsrs	r2, r2, #5
   e3cf0:	e000      	b.n	e3cf4 <gmtime_r+0x108>
   e3cf2:	2201      	movs	r2, #1
   e3cf4:	333b      	adds	r3, #59	; 0x3b
   e3cf6:	441a      	add	r2, r3
   e3cf8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e3cfc:	2300      	movs	r3, #0
   e3cfe:	61ca      	str	r2, [r1, #28]
   e3d00:	614d      	str	r5, [r1, #20]
   e3d02:	610e      	str	r6, [r1, #16]
   e3d04:	60cf      	str	r7, [r1, #12]
   e3d06:	620b      	str	r3, [r1, #32]
   e3d08:	4608      	mov	r0, r1
   e3d0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e3d0c:	00015180 	.word	0x00015180
   e3d10:	fffdc54f 	.word	0xfffdc54f
   e3d14:	00023ab1 	.word	0x00023ab1
   e3d18:	00023ab0 	.word	0x00023ab0

000e3d1c <_Balloc>:
   e3d1c:	b570      	push	{r4, r5, r6, lr}
   e3d1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e3d20:	4604      	mov	r4, r0
   e3d22:	460e      	mov	r6, r1
   e3d24:	b93d      	cbnz	r5, e3d36 <_Balloc+0x1a>
   e3d26:	2010      	movs	r0, #16
   e3d28:	f7fb fa76 	bl	df218 <malloc>
   e3d2c:	6260      	str	r0, [r4, #36]	; 0x24
   e3d2e:	6045      	str	r5, [r0, #4]
   e3d30:	6085      	str	r5, [r0, #8]
   e3d32:	6005      	str	r5, [r0, #0]
   e3d34:	60c5      	str	r5, [r0, #12]
   e3d36:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e3d38:	68eb      	ldr	r3, [r5, #12]
   e3d3a:	b143      	cbz	r3, e3d4e <_Balloc+0x32>
   e3d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3d3e:	68db      	ldr	r3, [r3, #12]
   e3d40:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e3d44:	b178      	cbz	r0, e3d66 <_Balloc+0x4a>
   e3d46:	6802      	ldr	r2, [r0, #0]
   e3d48:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e3d4c:	e017      	b.n	e3d7e <_Balloc+0x62>
   e3d4e:	2221      	movs	r2, #33	; 0x21
   e3d50:	2104      	movs	r1, #4
   e3d52:	4620      	mov	r0, r4
   e3d54:	f000 fbd1 	bl	e44fa <_calloc_r>
   e3d58:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3d5a:	60e8      	str	r0, [r5, #12]
   e3d5c:	68db      	ldr	r3, [r3, #12]
   e3d5e:	2b00      	cmp	r3, #0
   e3d60:	d1ec      	bne.n	e3d3c <_Balloc+0x20>
   e3d62:	2000      	movs	r0, #0
   e3d64:	bd70      	pop	{r4, r5, r6, pc}
   e3d66:	2101      	movs	r1, #1
   e3d68:	fa01 f506 	lsl.w	r5, r1, r6
   e3d6c:	1d6a      	adds	r2, r5, #5
   e3d6e:	0092      	lsls	r2, r2, #2
   e3d70:	4620      	mov	r0, r4
   e3d72:	f000 fbc2 	bl	e44fa <_calloc_r>
   e3d76:	2800      	cmp	r0, #0
   e3d78:	d0f3      	beq.n	e3d62 <_Balloc+0x46>
   e3d7a:	6046      	str	r6, [r0, #4]
   e3d7c:	6085      	str	r5, [r0, #8]
   e3d7e:	2300      	movs	r3, #0
   e3d80:	6103      	str	r3, [r0, #16]
   e3d82:	60c3      	str	r3, [r0, #12]
   e3d84:	bd70      	pop	{r4, r5, r6, pc}

000e3d86 <_Bfree>:
   e3d86:	b570      	push	{r4, r5, r6, lr}
   e3d88:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e3d8a:	4606      	mov	r6, r0
   e3d8c:	460d      	mov	r5, r1
   e3d8e:	b93c      	cbnz	r4, e3da0 <_Bfree+0x1a>
   e3d90:	2010      	movs	r0, #16
   e3d92:	f7fb fa41 	bl	df218 <malloc>
   e3d96:	6270      	str	r0, [r6, #36]	; 0x24
   e3d98:	6044      	str	r4, [r0, #4]
   e3d9a:	6084      	str	r4, [r0, #8]
   e3d9c:	6004      	str	r4, [r0, #0]
   e3d9e:	60c4      	str	r4, [r0, #12]
   e3da0:	b13d      	cbz	r5, e3db2 <_Bfree+0x2c>
   e3da2:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e3da4:	686a      	ldr	r2, [r5, #4]
   e3da6:	68db      	ldr	r3, [r3, #12]
   e3da8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e3dac:	6029      	str	r1, [r5, #0]
   e3dae:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e3db2:	bd70      	pop	{r4, r5, r6, pc}

000e3db4 <__multadd>:
   e3db4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3db8:	690d      	ldr	r5, [r1, #16]
   e3dba:	461f      	mov	r7, r3
   e3dbc:	4606      	mov	r6, r0
   e3dbe:	460c      	mov	r4, r1
   e3dc0:	f101 0e14 	add.w	lr, r1, #20
   e3dc4:	2300      	movs	r3, #0
   e3dc6:	f8de 0000 	ldr.w	r0, [lr]
   e3dca:	b281      	uxth	r1, r0
   e3dcc:	fb02 7101 	mla	r1, r2, r1, r7
   e3dd0:	0c0f      	lsrs	r7, r1, #16
   e3dd2:	0c00      	lsrs	r0, r0, #16
   e3dd4:	fb02 7000 	mla	r0, r2, r0, r7
   e3dd8:	b289      	uxth	r1, r1
   e3dda:	3301      	adds	r3, #1
   e3ddc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e3de0:	429d      	cmp	r5, r3
   e3de2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e3de6:	f84e 1b04 	str.w	r1, [lr], #4
   e3dea:	dcec      	bgt.n	e3dc6 <__multadd+0x12>
   e3dec:	b1d7      	cbz	r7, e3e24 <__multadd+0x70>
   e3dee:	68a3      	ldr	r3, [r4, #8]
   e3df0:	429d      	cmp	r5, r3
   e3df2:	db12      	blt.n	e3e1a <__multadd+0x66>
   e3df4:	6861      	ldr	r1, [r4, #4]
   e3df6:	4630      	mov	r0, r6
   e3df8:	3101      	adds	r1, #1
   e3dfa:	f7ff ff8f 	bl	e3d1c <_Balloc>
   e3dfe:	6922      	ldr	r2, [r4, #16]
   e3e00:	3202      	adds	r2, #2
   e3e02:	f104 010c 	add.w	r1, r4, #12
   e3e06:	4680      	mov	r8, r0
   e3e08:	0092      	lsls	r2, r2, #2
   e3e0a:	300c      	adds	r0, #12
   e3e0c:	f7fe fa19 	bl	e2242 <memcpy>
   e3e10:	4621      	mov	r1, r4
   e3e12:	4630      	mov	r0, r6
   e3e14:	f7ff ffb7 	bl	e3d86 <_Bfree>
   e3e18:	4644      	mov	r4, r8
   e3e1a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e3e1e:	3501      	adds	r5, #1
   e3e20:	615f      	str	r7, [r3, #20]
   e3e22:	6125      	str	r5, [r4, #16]
   e3e24:	4620      	mov	r0, r4
   e3e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e3e2a <__s2b>:
   e3e2a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3e2e:	460c      	mov	r4, r1
   e3e30:	4615      	mov	r5, r2
   e3e32:	461f      	mov	r7, r3
   e3e34:	2209      	movs	r2, #9
   e3e36:	3308      	adds	r3, #8
   e3e38:	4606      	mov	r6, r0
   e3e3a:	fb93 f3f2 	sdiv	r3, r3, r2
   e3e3e:	2100      	movs	r1, #0
   e3e40:	2201      	movs	r2, #1
   e3e42:	429a      	cmp	r2, r3
   e3e44:	da02      	bge.n	e3e4c <__s2b+0x22>
   e3e46:	0052      	lsls	r2, r2, #1
   e3e48:	3101      	adds	r1, #1
   e3e4a:	e7fa      	b.n	e3e42 <__s2b+0x18>
   e3e4c:	4630      	mov	r0, r6
   e3e4e:	f7ff ff65 	bl	e3d1c <_Balloc>
   e3e52:	9b08      	ldr	r3, [sp, #32]
   e3e54:	6143      	str	r3, [r0, #20]
   e3e56:	2d09      	cmp	r5, #9
   e3e58:	f04f 0301 	mov.w	r3, #1
   e3e5c:	6103      	str	r3, [r0, #16]
   e3e5e:	dd11      	ble.n	e3e84 <__s2b+0x5a>
   e3e60:	f104 0809 	add.w	r8, r4, #9
   e3e64:	46c1      	mov	r9, r8
   e3e66:	442c      	add	r4, r5
   e3e68:	f819 3b01 	ldrb.w	r3, [r9], #1
   e3e6c:	4601      	mov	r1, r0
   e3e6e:	3b30      	subs	r3, #48	; 0x30
   e3e70:	220a      	movs	r2, #10
   e3e72:	4630      	mov	r0, r6
   e3e74:	f7ff ff9e 	bl	e3db4 <__multadd>
   e3e78:	45a1      	cmp	r9, r4
   e3e7a:	d1f5      	bne.n	e3e68 <__s2b+0x3e>
   e3e7c:	eb08 0405 	add.w	r4, r8, r5
   e3e80:	3c08      	subs	r4, #8
   e3e82:	e001      	b.n	e3e88 <__s2b+0x5e>
   e3e84:	340a      	adds	r4, #10
   e3e86:	2509      	movs	r5, #9
   e3e88:	1b2d      	subs	r5, r5, r4
   e3e8a:	1963      	adds	r3, r4, r5
   e3e8c:	429f      	cmp	r7, r3
   e3e8e:	dd08      	ble.n	e3ea2 <__s2b+0x78>
   e3e90:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3e94:	4601      	mov	r1, r0
   e3e96:	3b30      	subs	r3, #48	; 0x30
   e3e98:	220a      	movs	r2, #10
   e3e9a:	4630      	mov	r0, r6
   e3e9c:	f7ff ff8a 	bl	e3db4 <__multadd>
   e3ea0:	e7f3      	b.n	e3e8a <__s2b+0x60>
   e3ea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e3ea6 <__hi0bits>:
   e3ea6:	0c03      	lsrs	r3, r0, #16
   e3ea8:	041b      	lsls	r3, r3, #16
   e3eaa:	b913      	cbnz	r3, e3eb2 <__hi0bits+0xc>
   e3eac:	0400      	lsls	r0, r0, #16
   e3eae:	2310      	movs	r3, #16
   e3eb0:	e000      	b.n	e3eb4 <__hi0bits+0xe>
   e3eb2:	2300      	movs	r3, #0
   e3eb4:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e3eb8:	bf04      	itt	eq
   e3eba:	0200      	lsleq	r0, r0, #8
   e3ebc:	3308      	addeq	r3, #8
   e3ebe:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e3ec2:	bf04      	itt	eq
   e3ec4:	0100      	lsleq	r0, r0, #4
   e3ec6:	3304      	addeq	r3, #4
   e3ec8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e3ecc:	bf04      	itt	eq
   e3ece:	0080      	lsleq	r0, r0, #2
   e3ed0:	3302      	addeq	r3, #2
   e3ed2:	2800      	cmp	r0, #0
   e3ed4:	db03      	blt.n	e3ede <__hi0bits+0x38>
   e3ed6:	0042      	lsls	r2, r0, #1
   e3ed8:	d503      	bpl.n	e3ee2 <__hi0bits+0x3c>
   e3eda:	1c58      	adds	r0, r3, #1
   e3edc:	4770      	bx	lr
   e3ede:	4618      	mov	r0, r3
   e3ee0:	4770      	bx	lr
   e3ee2:	2020      	movs	r0, #32
   e3ee4:	4770      	bx	lr

000e3ee6 <__lo0bits>:
   e3ee6:	6803      	ldr	r3, [r0, #0]
   e3ee8:	f013 0207 	ands.w	r2, r3, #7
   e3eec:	d00b      	beq.n	e3f06 <__lo0bits+0x20>
   e3eee:	07d9      	lsls	r1, r3, #31
   e3ef0:	d422      	bmi.n	e3f38 <__lo0bits+0x52>
   e3ef2:	079a      	lsls	r2, r3, #30
   e3ef4:	bf4b      	itete	mi
   e3ef6:	085b      	lsrmi	r3, r3, #1
   e3ef8:	089b      	lsrpl	r3, r3, #2
   e3efa:	6003      	strmi	r3, [r0, #0]
   e3efc:	6003      	strpl	r3, [r0, #0]
   e3efe:	bf4c      	ite	mi
   e3f00:	2001      	movmi	r0, #1
   e3f02:	2002      	movpl	r0, #2
   e3f04:	4770      	bx	lr
   e3f06:	b299      	uxth	r1, r3
   e3f08:	b909      	cbnz	r1, e3f0e <__lo0bits+0x28>
   e3f0a:	0c1b      	lsrs	r3, r3, #16
   e3f0c:	2210      	movs	r2, #16
   e3f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
   e3f12:	bf04      	itt	eq
   e3f14:	0a1b      	lsreq	r3, r3, #8
   e3f16:	3208      	addeq	r2, #8
   e3f18:	0719      	lsls	r1, r3, #28
   e3f1a:	bf04      	itt	eq
   e3f1c:	091b      	lsreq	r3, r3, #4
   e3f1e:	3204      	addeq	r2, #4
   e3f20:	0799      	lsls	r1, r3, #30
   e3f22:	bf04      	itt	eq
   e3f24:	089b      	lsreq	r3, r3, #2
   e3f26:	3202      	addeq	r2, #2
   e3f28:	07d9      	lsls	r1, r3, #31
   e3f2a:	d402      	bmi.n	e3f32 <__lo0bits+0x4c>
   e3f2c:	085b      	lsrs	r3, r3, #1
   e3f2e:	d005      	beq.n	e3f3c <__lo0bits+0x56>
   e3f30:	3201      	adds	r2, #1
   e3f32:	6003      	str	r3, [r0, #0]
   e3f34:	4610      	mov	r0, r2
   e3f36:	4770      	bx	lr
   e3f38:	2000      	movs	r0, #0
   e3f3a:	4770      	bx	lr
   e3f3c:	2020      	movs	r0, #32
   e3f3e:	4770      	bx	lr

000e3f40 <__i2b>:
   e3f40:	b510      	push	{r4, lr}
   e3f42:	460c      	mov	r4, r1
   e3f44:	2101      	movs	r1, #1
   e3f46:	f7ff fee9 	bl	e3d1c <_Balloc>
   e3f4a:	2201      	movs	r2, #1
   e3f4c:	6144      	str	r4, [r0, #20]
   e3f4e:	6102      	str	r2, [r0, #16]
   e3f50:	bd10      	pop	{r4, pc}

000e3f52 <__multiply>:
   e3f52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3f56:	4614      	mov	r4, r2
   e3f58:	690a      	ldr	r2, [r1, #16]
   e3f5a:	6923      	ldr	r3, [r4, #16]
   e3f5c:	429a      	cmp	r2, r3
   e3f5e:	bfb8      	it	lt
   e3f60:	460b      	movlt	r3, r1
   e3f62:	4688      	mov	r8, r1
   e3f64:	bfbc      	itt	lt
   e3f66:	46a0      	movlt	r8, r4
   e3f68:	461c      	movlt	r4, r3
   e3f6a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e3f6e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e3f72:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3f76:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e3f7a:	eb07 0609 	add.w	r6, r7, r9
   e3f7e:	429e      	cmp	r6, r3
   e3f80:	bfc8      	it	gt
   e3f82:	3101      	addgt	r1, #1
   e3f84:	f7ff feca 	bl	e3d1c <_Balloc>
   e3f88:	f100 0514 	add.w	r5, r0, #20
   e3f8c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e3f90:	462b      	mov	r3, r5
   e3f92:	2200      	movs	r2, #0
   e3f94:	4563      	cmp	r3, ip
   e3f96:	d202      	bcs.n	e3f9e <__multiply+0x4c>
   e3f98:	f843 2b04 	str.w	r2, [r3], #4
   e3f9c:	e7fa      	b.n	e3f94 <__multiply+0x42>
   e3f9e:	f104 0214 	add.w	r2, r4, #20
   e3fa2:	f108 0114 	add.w	r1, r8, #20
   e3fa6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e3faa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e3fae:	9300      	str	r3, [sp, #0]
   e3fb0:	9b00      	ldr	r3, [sp, #0]
   e3fb2:	9201      	str	r2, [sp, #4]
   e3fb4:	4293      	cmp	r3, r2
   e3fb6:	d957      	bls.n	e4068 <__multiply+0x116>
   e3fb8:	f8b2 b000 	ldrh.w	fp, [r2]
   e3fbc:	f1bb 0f00 	cmp.w	fp, #0
   e3fc0:	d023      	beq.n	e400a <__multiply+0xb8>
   e3fc2:	4689      	mov	r9, r1
   e3fc4:	46ae      	mov	lr, r5
   e3fc6:	f04f 0800 	mov.w	r8, #0
   e3fca:	f859 4b04 	ldr.w	r4, [r9], #4
   e3fce:	f8be a000 	ldrh.w	sl, [lr]
   e3fd2:	b2a3      	uxth	r3, r4
   e3fd4:	fb0b a303 	mla	r3, fp, r3, sl
   e3fd8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e3fdc:	f8de 4000 	ldr.w	r4, [lr]
   e3fe0:	4443      	add	r3, r8
   e3fe2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3fe6:	fb0b 840a 	mla	r4, fp, sl, r8
   e3fea:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e3fee:	46f2      	mov	sl, lr
   e3ff0:	b29b      	uxth	r3, r3
   e3ff2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e3ff6:	454f      	cmp	r7, r9
   e3ff8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3ffc:	f84a 3b04 	str.w	r3, [sl], #4
   e4000:	d901      	bls.n	e4006 <__multiply+0xb4>
   e4002:	46d6      	mov	lr, sl
   e4004:	e7e1      	b.n	e3fca <__multiply+0x78>
   e4006:	f8ce 8004 	str.w	r8, [lr, #4]
   e400a:	9b01      	ldr	r3, [sp, #4]
   e400c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e4010:	3204      	adds	r2, #4
   e4012:	f1ba 0f00 	cmp.w	sl, #0
   e4016:	d021      	beq.n	e405c <__multiply+0x10a>
   e4018:	682b      	ldr	r3, [r5, #0]
   e401a:	462c      	mov	r4, r5
   e401c:	4689      	mov	r9, r1
   e401e:	f04f 0800 	mov.w	r8, #0
   e4022:	f8b9 e000 	ldrh.w	lr, [r9]
   e4026:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e402a:	fb0a be0e 	mla	lr, sl, lr, fp
   e402e:	44f0      	add	r8, lr
   e4030:	46a3      	mov	fp, r4
   e4032:	b29b      	uxth	r3, r3
   e4034:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e4038:	f84b 3b04 	str.w	r3, [fp], #4
   e403c:	f859 3b04 	ldr.w	r3, [r9], #4
   e4040:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e4044:	0c1b      	lsrs	r3, r3, #16
   e4046:	fb0a e303 	mla	r3, sl, r3, lr
   e404a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e404e:	454f      	cmp	r7, r9
   e4050:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e4054:	d901      	bls.n	e405a <__multiply+0x108>
   e4056:	465c      	mov	r4, fp
   e4058:	e7e3      	b.n	e4022 <__multiply+0xd0>
   e405a:	6063      	str	r3, [r4, #4]
   e405c:	3504      	adds	r5, #4
   e405e:	e7a7      	b.n	e3fb0 <__multiply+0x5e>
   e4060:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e4064:	b913      	cbnz	r3, e406c <__multiply+0x11a>
   e4066:	3e01      	subs	r6, #1
   e4068:	2e00      	cmp	r6, #0
   e406a:	dcf9      	bgt.n	e4060 <__multiply+0x10e>
   e406c:	6106      	str	r6, [r0, #16]
   e406e:	b003      	add	sp, #12
   e4070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e4074 <__pow5mult>:
   e4074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e4078:	4615      	mov	r5, r2
   e407a:	f012 0203 	ands.w	r2, r2, #3
   e407e:	4606      	mov	r6, r0
   e4080:	460f      	mov	r7, r1
   e4082:	d007      	beq.n	e4094 <__pow5mult+0x20>
   e4084:	3a01      	subs	r2, #1
   e4086:	4c21      	ldr	r4, [pc, #132]	; (e410c <__pow5mult+0x98>)
   e4088:	2300      	movs	r3, #0
   e408a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e408e:	f7ff fe91 	bl	e3db4 <__multadd>
   e4092:	4607      	mov	r7, r0
   e4094:	10ad      	asrs	r5, r5, #2
   e4096:	d036      	beq.n	e4106 <__pow5mult+0x92>
   e4098:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e409a:	b93c      	cbnz	r4, e40ac <__pow5mult+0x38>
   e409c:	2010      	movs	r0, #16
   e409e:	f7fb f8bb 	bl	df218 <malloc>
   e40a2:	6270      	str	r0, [r6, #36]	; 0x24
   e40a4:	6044      	str	r4, [r0, #4]
   e40a6:	6084      	str	r4, [r0, #8]
   e40a8:	6004      	str	r4, [r0, #0]
   e40aa:	60c4      	str	r4, [r0, #12]
   e40ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e40b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e40b4:	b94c      	cbnz	r4, e40ca <__pow5mult+0x56>
   e40b6:	f240 2171 	movw	r1, #625	; 0x271
   e40ba:	4630      	mov	r0, r6
   e40bc:	f7ff ff40 	bl	e3f40 <__i2b>
   e40c0:	2300      	movs	r3, #0
   e40c2:	f8c8 0008 	str.w	r0, [r8, #8]
   e40c6:	4604      	mov	r4, r0
   e40c8:	6003      	str	r3, [r0, #0]
   e40ca:	f04f 0800 	mov.w	r8, #0
   e40ce:	07eb      	lsls	r3, r5, #31
   e40d0:	d50a      	bpl.n	e40e8 <__pow5mult+0x74>
   e40d2:	4639      	mov	r1, r7
   e40d4:	4622      	mov	r2, r4
   e40d6:	4630      	mov	r0, r6
   e40d8:	f7ff ff3b 	bl	e3f52 <__multiply>
   e40dc:	4639      	mov	r1, r7
   e40de:	4681      	mov	r9, r0
   e40e0:	4630      	mov	r0, r6
   e40e2:	f7ff fe50 	bl	e3d86 <_Bfree>
   e40e6:	464f      	mov	r7, r9
   e40e8:	106d      	asrs	r5, r5, #1
   e40ea:	d00c      	beq.n	e4106 <__pow5mult+0x92>
   e40ec:	6820      	ldr	r0, [r4, #0]
   e40ee:	b108      	cbz	r0, e40f4 <__pow5mult+0x80>
   e40f0:	4604      	mov	r4, r0
   e40f2:	e7ec      	b.n	e40ce <__pow5mult+0x5a>
   e40f4:	4622      	mov	r2, r4
   e40f6:	4621      	mov	r1, r4
   e40f8:	4630      	mov	r0, r6
   e40fa:	f7ff ff2a 	bl	e3f52 <__multiply>
   e40fe:	6020      	str	r0, [r4, #0]
   e4100:	f8c0 8000 	str.w	r8, [r0]
   e4104:	e7f4      	b.n	e40f0 <__pow5mult+0x7c>
   e4106:	4638      	mov	r0, r7
   e4108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e410c:	000e4d18 	.word	0x000e4d18

000e4110 <__lshift>:
   e4110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e4114:	460c      	mov	r4, r1
   e4116:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e411a:	6926      	ldr	r6, [r4, #16]
   e411c:	6849      	ldr	r1, [r1, #4]
   e411e:	68a3      	ldr	r3, [r4, #8]
   e4120:	4456      	add	r6, sl
   e4122:	4607      	mov	r7, r0
   e4124:	4691      	mov	r9, r2
   e4126:	1c75      	adds	r5, r6, #1
   e4128:	42ab      	cmp	r3, r5
   e412a:	da02      	bge.n	e4132 <__lshift+0x22>
   e412c:	3101      	adds	r1, #1
   e412e:	005b      	lsls	r3, r3, #1
   e4130:	e7fa      	b.n	e4128 <__lshift+0x18>
   e4132:	4638      	mov	r0, r7
   e4134:	f7ff fdf2 	bl	e3d1c <_Balloc>
   e4138:	2300      	movs	r3, #0
   e413a:	4680      	mov	r8, r0
   e413c:	f100 0114 	add.w	r1, r0, #20
   e4140:	461a      	mov	r2, r3
   e4142:	4553      	cmp	r3, sl
   e4144:	da03      	bge.n	e414e <__lshift+0x3e>
   e4146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e414a:	3301      	adds	r3, #1
   e414c:	e7f9      	b.n	e4142 <__lshift+0x32>
   e414e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e4152:	6920      	ldr	r0, [r4, #16]
   e4154:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e4158:	f019 091f 	ands.w	r9, r9, #31
   e415c:	f104 0114 	add.w	r1, r4, #20
   e4160:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e4164:	d014      	beq.n	e4190 <__lshift+0x80>
   e4166:	f1c9 0c20 	rsb	ip, r9, #32
   e416a:	2200      	movs	r2, #0
   e416c:	6808      	ldr	r0, [r1, #0]
   e416e:	fa00 f009 	lsl.w	r0, r0, r9
   e4172:	4302      	orrs	r2, r0
   e4174:	469a      	mov	sl, r3
   e4176:	f843 2b04 	str.w	r2, [r3], #4
   e417a:	f851 2b04 	ldr.w	r2, [r1], #4
   e417e:	458e      	cmp	lr, r1
   e4180:	fa22 f20c 	lsr.w	r2, r2, ip
   e4184:	d8f2      	bhi.n	e416c <__lshift+0x5c>
   e4186:	f8ca 2004 	str.w	r2, [sl, #4]
   e418a:	b142      	cbz	r2, e419e <__lshift+0x8e>
   e418c:	1cb5      	adds	r5, r6, #2
   e418e:	e006      	b.n	e419e <__lshift+0x8e>
   e4190:	3b04      	subs	r3, #4
   e4192:	f851 2b04 	ldr.w	r2, [r1], #4
   e4196:	f843 2f04 	str.w	r2, [r3, #4]!
   e419a:	458e      	cmp	lr, r1
   e419c:	d8f9      	bhi.n	e4192 <__lshift+0x82>
   e419e:	3d01      	subs	r5, #1
   e41a0:	4638      	mov	r0, r7
   e41a2:	f8c8 5010 	str.w	r5, [r8, #16]
   e41a6:	4621      	mov	r1, r4
   e41a8:	f7ff fded 	bl	e3d86 <_Bfree>
   e41ac:	4640      	mov	r0, r8
   e41ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e41b2 <__mcmp>:
   e41b2:	6903      	ldr	r3, [r0, #16]
   e41b4:	690a      	ldr	r2, [r1, #16]
   e41b6:	1a9b      	subs	r3, r3, r2
   e41b8:	b510      	push	{r4, lr}
   e41ba:	d111      	bne.n	e41e0 <__mcmp+0x2e>
   e41bc:	0092      	lsls	r2, r2, #2
   e41be:	3014      	adds	r0, #20
   e41c0:	3114      	adds	r1, #20
   e41c2:	1883      	adds	r3, r0, r2
   e41c4:	440a      	add	r2, r1
   e41c6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e41ca:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e41ce:	428c      	cmp	r4, r1
   e41d0:	d002      	beq.n	e41d8 <__mcmp+0x26>
   e41d2:	d307      	bcc.n	e41e4 <__mcmp+0x32>
   e41d4:	2001      	movs	r0, #1
   e41d6:	bd10      	pop	{r4, pc}
   e41d8:	4298      	cmp	r0, r3
   e41da:	d3f4      	bcc.n	e41c6 <__mcmp+0x14>
   e41dc:	2000      	movs	r0, #0
   e41de:	bd10      	pop	{r4, pc}
   e41e0:	4618      	mov	r0, r3
   e41e2:	bd10      	pop	{r4, pc}
   e41e4:	f04f 30ff 	mov.w	r0, #4294967295
   e41e8:	bd10      	pop	{r4, pc}

000e41ea <__mdiff>:
   e41ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e41ee:	460c      	mov	r4, r1
   e41f0:	4607      	mov	r7, r0
   e41f2:	4611      	mov	r1, r2
   e41f4:	4620      	mov	r0, r4
   e41f6:	4615      	mov	r5, r2
   e41f8:	f7ff ffdb 	bl	e41b2 <__mcmp>
   e41fc:	1e06      	subs	r6, r0, #0
   e41fe:	d108      	bne.n	e4212 <__mdiff+0x28>
   e4200:	4631      	mov	r1, r6
   e4202:	4638      	mov	r0, r7
   e4204:	f7ff fd8a 	bl	e3d1c <_Balloc>
   e4208:	2301      	movs	r3, #1
   e420a:	6103      	str	r3, [r0, #16]
   e420c:	6146      	str	r6, [r0, #20]
   e420e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e4212:	bfbc      	itt	lt
   e4214:	4623      	movlt	r3, r4
   e4216:	462c      	movlt	r4, r5
   e4218:	4638      	mov	r0, r7
   e421a:	6861      	ldr	r1, [r4, #4]
   e421c:	bfba      	itte	lt
   e421e:	461d      	movlt	r5, r3
   e4220:	2601      	movlt	r6, #1
   e4222:	2600      	movge	r6, #0
   e4224:	f7ff fd7a 	bl	e3d1c <_Balloc>
   e4228:	692b      	ldr	r3, [r5, #16]
   e422a:	60c6      	str	r6, [r0, #12]
   e422c:	6926      	ldr	r6, [r4, #16]
   e422e:	f105 0914 	add.w	r9, r5, #20
   e4232:	3414      	adds	r4, #20
   e4234:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e4238:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e423c:	f100 0514 	add.w	r5, r0, #20
   e4240:	f04f 0c00 	mov.w	ip, #0
   e4244:	f854 3b04 	ldr.w	r3, [r4], #4
   e4248:	f859 2b04 	ldr.w	r2, [r9], #4
   e424c:	fa1c f183 	uxtah	r1, ip, r3
   e4250:	fa1f fe82 	uxth.w	lr, r2
   e4254:	0c12      	lsrs	r2, r2, #16
   e4256:	ebce 0101 	rsb	r1, lr, r1
   e425a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e425e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e4262:	b289      	uxth	r1, r1
   e4264:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e4268:	45c8      	cmp	r8, r9
   e426a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e426e:	46a6      	mov	lr, r4
   e4270:	f845 3b04 	str.w	r3, [r5], #4
   e4274:	d8e6      	bhi.n	e4244 <__mdiff+0x5a>
   e4276:	45be      	cmp	lr, r7
   e4278:	d20e      	bcs.n	e4298 <__mdiff+0xae>
   e427a:	f85e 1b04 	ldr.w	r1, [lr], #4
   e427e:	fa1c f281 	uxtah	r2, ip, r1
   e4282:	1413      	asrs	r3, r2, #16
   e4284:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e4288:	b292      	uxth	r2, r2
   e428a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e428e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e4292:	f845 2b04 	str.w	r2, [r5], #4
   e4296:	e7ee      	b.n	e4276 <__mdiff+0x8c>
   e4298:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e429c:	b90b      	cbnz	r3, e42a2 <__mdiff+0xb8>
   e429e:	3e01      	subs	r6, #1
   e42a0:	e7fa      	b.n	e4298 <__mdiff+0xae>
   e42a2:	6106      	str	r6, [r0, #16]
   e42a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e42a8 <__ulp>:
   e42a8:	4b12      	ldr	r3, [pc, #72]	; (e42f4 <__ulp+0x4c>)
   e42aa:	ee10 2a90 	vmov	r2, s1
   e42ae:	401a      	ands	r2, r3
   e42b0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e42b4:	2b00      	cmp	r3, #0
   e42b6:	dd02      	ble.n	e42be <__ulp+0x16>
   e42b8:	2000      	movs	r0, #0
   e42ba:	4619      	mov	r1, r3
   e42bc:	e017      	b.n	e42ee <__ulp+0x46>
   e42be:	425b      	negs	r3, r3
   e42c0:	151b      	asrs	r3, r3, #20
   e42c2:	2b13      	cmp	r3, #19
   e42c4:	f04f 0000 	mov.w	r0, #0
   e42c8:	f04f 0100 	mov.w	r1, #0
   e42cc:	dc04      	bgt.n	e42d8 <__ulp+0x30>
   e42ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e42d2:	fa42 f103 	asr.w	r1, r2, r3
   e42d6:	e00a      	b.n	e42ee <__ulp+0x46>
   e42d8:	3b14      	subs	r3, #20
   e42da:	2b1e      	cmp	r3, #30
   e42dc:	f04f 0201 	mov.w	r2, #1
   e42e0:	bfda      	itte	le
   e42e2:	f1c3 031f 	rsble	r3, r3, #31
   e42e6:	fa02 f303 	lslle.w	r3, r2, r3
   e42ea:	4613      	movgt	r3, r2
   e42ec:	4618      	mov	r0, r3
   e42ee:	ec41 0b10 	vmov	d0, r0, r1
   e42f2:	4770      	bx	lr
   e42f4:	7ff00000 	.word	0x7ff00000

000e42f8 <__b2d>:
   e42f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e42fa:	6905      	ldr	r5, [r0, #16]
   e42fc:	f100 0614 	add.w	r6, r0, #20
   e4300:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e4304:	1f2f      	subs	r7, r5, #4
   e4306:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e430a:	4620      	mov	r0, r4
   e430c:	f7ff fdcb 	bl	e3ea6 <__hi0bits>
   e4310:	f1c0 0320 	rsb	r3, r0, #32
   e4314:	280a      	cmp	r0, #10
   e4316:	600b      	str	r3, [r1, #0]
   e4318:	dc14      	bgt.n	e4344 <__b2d+0x4c>
   e431a:	f1c0 0e0b 	rsb	lr, r0, #11
   e431e:	fa24 f10e 	lsr.w	r1, r4, lr
   e4322:	42be      	cmp	r6, r7
   e4324:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e4328:	bf34      	ite	cc
   e432a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e432e:	2100      	movcs	r1, #0
   e4330:	3015      	adds	r0, #21
   e4332:	fa04 f000 	lsl.w	r0, r4, r0
   e4336:	fa21 f10e 	lsr.w	r1, r1, lr
   e433a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e433e:	ea40 0201 	orr.w	r2, r0, r1
   e4342:	e023      	b.n	e438c <__b2d+0x94>
   e4344:	42be      	cmp	r6, r7
   e4346:	bf3a      	itte	cc
   e4348:	f1a5 0708 	subcc.w	r7, r5, #8
   e434c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e4350:	2100      	movcs	r1, #0
   e4352:	380b      	subs	r0, #11
   e4354:	d015      	beq.n	e4382 <__b2d+0x8a>
   e4356:	4084      	lsls	r4, r0
   e4358:	f1c0 0520 	rsb	r5, r0, #32
   e435c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e4360:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e4364:	42b7      	cmp	r7, r6
   e4366:	fa21 fe05 	lsr.w	lr, r1, r5
   e436a:	ea44 030e 	orr.w	r3, r4, lr
   e436e:	bf8c      	ite	hi
   e4370:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e4374:	2400      	movls	r4, #0
   e4376:	fa01 f000 	lsl.w	r0, r1, r0
   e437a:	40ec      	lsrs	r4, r5
   e437c:	ea40 0204 	orr.w	r2, r0, r4
   e4380:	e004      	b.n	e438c <__b2d+0x94>
   e4382:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e4386:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e438a:	460a      	mov	r2, r1
   e438c:	ec43 2b10 	vmov	d0, r2, r3
   e4390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4392 <__d2b>:
   e4392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e4396:	460e      	mov	r6, r1
   e4398:	2101      	movs	r1, #1
   e439a:	ec59 8b10 	vmov	r8, r9, d0
   e439e:	4615      	mov	r5, r2
   e43a0:	f7ff fcbc 	bl	e3d1c <_Balloc>
   e43a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e43a8:	4607      	mov	r7, r0
   e43aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e43ae:	b10c      	cbz	r4, e43b4 <__d2b+0x22>
   e43b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e43b4:	9301      	str	r3, [sp, #4]
   e43b6:	f1b8 0f00 	cmp.w	r8, #0
   e43ba:	d019      	beq.n	e43f0 <__d2b+0x5e>
   e43bc:	a802      	add	r0, sp, #8
   e43be:	f840 8d08 	str.w	r8, [r0, #-8]!
   e43c2:	f7ff fd90 	bl	e3ee6 <__lo0bits>
   e43c6:	9b00      	ldr	r3, [sp, #0]
   e43c8:	b148      	cbz	r0, e43de <__d2b+0x4c>
   e43ca:	9a01      	ldr	r2, [sp, #4]
   e43cc:	f1c0 0120 	rsb	r1, r0, #32
   e43d0:	fa02 f101 	lsl.w	r1, r2, r1
   e43d4:	430b      	orrs	r3, r1
   e43d6:	40c2      	lsrs	r2, r0
   e43d8:	617b      	str	r3, [r7, #20]
   e43da:	9201      	str	r2, [sp, #4]
   e43dc:	e000      	b.n	e43e0 <__d2b+0x4e>
   e43de:	617b      	str	r3, [r7, #20]
   e43e0:	9b01      	ldr	r3, [sp, #4]
   e43e2:	61bb      	str	r3, [r7, #24]
   e43e4:	2b00      	cmp	r3, #0
   e43e6:	bf14      	ite	ne
   e43e8:	2102      	movne	r1, #2
   e43ea:	2101      	moveq	r1, #1
   e43ec:	6139      	str	r1, [r7, #16]
   e43ee:	e007      	b.n	e4400 <__d2b+0x6e>
   e43f0:	a801      	add	r0, sp, #4
   e43f2:	f7ff fd78 	bl	e3ee6 <__lo0bits>
   e43f6:	9b01      	ldr	r3, [sp, #4]
   e43f8:	617b      	str	r3, [r7, #20]
   e43fa:	2101      	movs	r1, #1
   e43fc:	6139      	str	r1, [r7, #16]
   e43fe:	3020      	adds	r0, #32
   e4400:	b134      	cbz	r4, e4410 <__d2b+0x7e>
   e4402:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e4406:	4404      	add	r4, r0
   e4408:	6034      	str	r4, [r6, #0]
   e440a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e440e:	e009      	b.n	e4424 <__d2b+0x92>
   e4410:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e4414:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e4418:	6030      	str	r0, [r6, #0]
   e441a:	6918      	ldr	r0, [r3, #16]
   e441c:	f7ff fd43 	bl	e3ea6 <__hi0bits>
   e4420:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e4424:	6028      	str	r0, [r5, #0]
   e4426:	4638      	mov	r0, r7
   e4428:	b003      	add	sp, #12
   e442a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e442e <__ratio>:
   e442e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e4432:	4688      	mov	r8, r1
   e4434:	4669      	mov	r1, sp
   e4436:	4681      	mov	r9, r0
   e4438:	f7ff ff5e 	bl	e42f8 <__b2d>
   e443c:	a901      	add	r1, sp, #4
   e443e:	4640      	mov	r0, r8
   e4440:	ec55 4b10 	vmov	r4, r5, d0
   e4444:	f7ff ff58 	bl	e42f8 <__b2d>
   e4448:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e444c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e4450:	1a9a      	subs	r2, r3, r2
   e4452:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e4456:	1ac9      	subs	r1, r1, r3
   e4458:	ec57 6b10 	vmov	r6, r7, d0
   e445c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e4460:	2b00      	cmp	r3, #0
   e4462:	bfcc      	ite	gt
   e4464:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e4468:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e446c:	4632      	mov	r2, r6
   e446e:	463b      	mov	r3, r7
   e4470:	4620      	mov	r0, r4
   e4472:	4629      	mov	r1, r5
   e4474:	f7fd fbc0 	bl	e1bf8 <__aeabi_ddiv>
   e4478:	ec41 0b10 	vmov	d0, r0, r1
   e447c:	b003      	add	sp, #12
   e447e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e4482 <__copybits>:
   e4482:	3901      	subs	r1, #1
   e4484:	b510      	push	{r4, lr}
   e4486:	1149      	asrs	r1, r1, #5
   e4488:	6914      	ldr	r4, [r2, #16]
   e448a:	3101      	adds	r1, #1
   e448c:	f102 0314 	add.w	r3, r2, #20
   e4490:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e4494:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e4498:	42a3      	cmp	r3, r4
   e449a:	4602      	mov	r2, r0
   e449c:	d204      	bcs.n	e44a8 <__copybits+0x26>
   e449e:	f853 2b04 	ldr.w	r2, [r3], #4
   e44a2:	f840 2b04 	str.w	r2, [r0], #4
   e44a6:	e7f7      	b.n	e4498 <__copybits+0x16>
   e44a8:	2300      	movs	r3, #0
   e44aa:	428a      	cmp	r2, r1
   e44ac:	d202      	bcs.n	e44b4 <__copybits+0x32>
   e44ae:	f842 3b04 	str.w	r3, [r2], #4
   e44b2:	e7fa      	b.n	e44aa <__copybits+0x28>
   e44b4:	bd10      	pop	{r4, pc}

000e44b6 <__any_on>:
   e44b6:	f100 0214 	add.w	r2, r0, #20
   e44ba:	6900      	ldr	r0, [r0, #16]
   e44bc:	114b      	asrs	r3, r1, #5
   e44be:	4298      	cmp	r0, r3
   e44c0:	b510      	push	{r4, lr}
   e44c2:	db0c      	blt.n	e44de <__any_on+0x28>
   e44c4:	dd0c      	ble.n	e44e0 <__any_on+0x2a>
   e44c6:	f011 011f 	ands.w	r1, r1, #31
   e44ca:	d009      	beq.n	e44e0 <__any_on+0x2a>
   e44cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e44d0:	fa24 f001 	lsr.w	r0, r4, r1
   e44d4:	fa00 f101 	lsl.w	r1, r0, r1
   e44d8:	428c      	cmp	r4, r1
   e44da:	d10c      	bne.n	e44f6 <__any_on+0x40>
   e44dc:	e000      	b.n	e44e0 <__any_on+0x2a>
   e44de:	4603      	mov	r3, r0
   e44e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e44e4:	4293      	cmp	r3, r2
   e44e6:	d904      	bls.n	e44f2 <__any_on+0x3c>
   e44e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e44ec:	2900      	cmp	r1, #0
   e44ee:	d0f9      	beq.n	e44e4 <__any_on+0x2e>
   e44f0:	e001      	b.n	e44f6 <__any_on+0x40>
   e44f2:	2000      	movs	r0, #0
   e44f4:	bd10      	pop	{r4, pc}
   e44f6:	2001      	movs	r0, #1
   e44f8:	bd10      	pop	{r4, pc}

000e44fa <_calloc_r>:
   e44fa:	b538      	push	{r3, r4, r5, lr}
   e44fc:	fb02 f401 	mul.w	r4, r2, r1
   e4500:	4621      	mov	r1, r4
   e4502:	f7fa feb1 	bl	df268 <_malloc_r>
   e4506:	4605      	mov	r5, r0
   e4508:	b118      	cbz	r0, e4512 <_calloc_r+0x18>
   e450a:	4622      	mov	r2, r4
   e450c:	2100      	movs	r1, #0
   e450e:	f7fd fea3 	bl	e2258 <memset>
   e4512:	4628      	mov	r0, r5
   e4514:	bd38      	pop	{r3, r4, r5, pc}

000e4516 <__env_lock>:
   e4516:	4770      	bx	lr

000e4518 <__env_unlock>:
   e4518:	4770      	bx	lr

000e451a <link_code_end>:
	...

000e451c <dynalib_user>:
   e451c:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e452c:	0000 0000 6f6d 6564 0030 6f6d 6564 0031     ....mode0.mode1.
   e453c:	6553 7474 6e69 7367 5700 4669 0069 6953     Settings.WiFi.Si
   e454c:	2067 7453 6772 6874 5400 6d69 2065 6f7a     g Strgth.Time zo
   e455c:	656e 5300 7379 7620 7372 006e 7344 2070     ne.Sys vrsn.Dsp 
   e456c:	7477 7268 4700 7465 4320 324f 4700 7465     wthr.Get CO2.Get
   e457c:	7420 706d 4400 6b72 6320 726c 4d00 6e69      tmp.Drk clr.Min
   e458c:	2069 6c63 006b 4559 0053 4f4e 5200 4445     i clk.YES.NO.RED
   e459c:	4700 4552 4e45 4200 554c 0045 6f68 6b6f     .GREEN.BLUE.hook
   e45ac:	722d 7365 6f70 736e 2f65 6557 7461 6568     -response/Weathe
   e45bc:	0072 6f68 6b6f 722d 7365 6f70 736e 2f65     r.hook-response/
   e45cc:	6f63 6432 7461 6800 6f6f 2d6b 6572 7073     co2dat.hook-resp
   e45dc:	6e6f 6573 692f 6574 706d 6164 0074 6f68     onse/itempdat.ho
   e45ec:	6b6f 722d 7365 6f70 736e 2f65 6567 5374     ok-response/getS
   e45fc:	6174 6574 7400 676f 6c67 4265 6e74 7000     tate.toggleBtn.p
   e460c:	6c63 636f 396b 3939 7400 676f 6c67 0065     clock999.toggle.
   e461c:	7462 706e 6572 7373 3939 0039 6850 746f     btnpress999.Phot
   e462c:	006f 6f43 0032 6e49 6973 6564 5420 6d65     o.Co2.Inside Tem
   e463c:	0070 4545 5250 4d4f 4300 324f 003a 0000     p.EEPROM.CO2:...
   e464c:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000e4658 <CSWTCH.65>:
   e4658:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   e4668:	0050 0000                                   P...

000e466c <_ZTVN5spark13EthernetClassE>:
	...
   e4674:	f2d7 000d f2cd 000d f2c3 000d f2b9 000d     ................
   e4684:	f2ad 000d f2a1 000d f295 000d f28d 000d     ................
   e4694:	f283 000d f279 000d 10c1 000e               ....y.......

000e46a0 <_ZTV3UDP>:
	...
   e46a8:	f9a5 000d f9c9 000d f381 000d f4ab 000d     ................
   e46b8:	f379 000d f397 000d f3b5 000d f3cf 000d     y...............
   e46c8:	f3f3 000d f48f 000d f791 000d f531 000d     ............1...
   e46d8:	f6b1 000d f361 000d f939 000d f635 000d     ....a...9...5...
   e46e8:	f569 000d f967 000d f4d5 000d f36f 000d     i...g.......o...
   e46f8:	f511 000d f375 000d f3d1 000d fff0 ffff     ....u...........
   e4708:	0000 0000 f3eb 000d 6162 6475 5300 7265     ........baud.Ser
   e4718:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   e4728:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   e4738:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   e4748:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   e4758:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   e4768:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   e4778:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   e4788:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   e4798:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   e47a8:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   e47b8:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   e47c8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   e47d8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   e47e8:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   e47f8:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e4808:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e4814 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e481c:	fead 000d feb3 000d fef7 000d fec1 000d     ................
   e482c:	feaf 000d                                   ....

000e4830 <_ZTV9IPAddress>:
	...
   e4838:	0445 000e 0435 000e 0437 000e               E...5...7...

000e4844 <_ZTV9USBSerial>:
	...
   e484c:	0549 000e 0599 000e 05a7 000e faf1 000d     I...............
   e485c:	0585 000e 054b 000e 0561 000e 0593 000e     ....K...a.......
   e486c:	0577 000e 0545 000e                         w...E...

000e4874 <_ZTV11USARTSerial>:
	...
   e487c:	067b 000e 06cb 000e 06d9 000e faf1 000d     {...............
   e488c:	068f 000e 06b1 000e 069d 000e 06c5 000e     ................
   e489c:	067d 000e 0681 000e                         }.......

000e48a4 <_ZTV7TwoWire>:
	...
   e48ac:	07a5 000e 07ef 000e 07c7 000e 07a7 000e     ................
   e48bc:	07cf 000e 07d7 000e 07df 000e 07e7 000e     ................

000e48cc <_ZTVN5spark9MeshClassE>:
	...
   e48d4:	08b5 000e 08ab 000e 08a1 000e 0897 000e     ................
   e48e4:	088b 000e 087f 000e 0873 000e 086b 000e     ........s...k...
   e48f4:	0861 000e 0857 000e 10c1 000e 6666 3330     a...W.......ff03
   e4904:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   e4914:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   e4924:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000e4930 <_ZTVN5spark9WiFiClassE>:
	...
   e4938:	0f2d 000e 0f23 000e 0f19 000e 0ec1 000e     -...#...........
   e4948:	0f0d 000e 0f01 000e 0ef5 000e 0eed 000e     ................
   e4958:	0ee3 000e 0ed9 000e 10c1 000e               ............

000e4964 <_ZTV10WiFiSignal>:
	...
   e496c:	0e61 000e 0ecb 000e 0e63 000e 0f6d 000e     a.......c...m...
   e497c:	0e69 000e 0f39 000e 0e95 000e               i...9.......

000e4988 <_ZTVN5spark12NetworkClassE>:
	...
   e4990:	1059 000e 1063 000e 106d 000e 1077 000e     Y...c...m...w...
   e49a0:	1081 000e 108d 000e 1099 000e 10a5 000e     ................
   e49b0:	10ad 000e 10b7 000e 10c1 000e               ............

000e49bc <_ZSt7nothrow>:
	...

000e49bd <_ctype_>:
   e49bd:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e49cd:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e49dd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e49ed:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e49fd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e4a0d:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e4a1d:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e4a2d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e4a3d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e4ac0 <__sf_fake_stdin>:
	...

000e4ae0 <__sf_fake_stdout>:
	...

000e4b00 <__sf_fake_stderr>:
	...
   e4b20:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000e4b2c <__month_lengths>:
   e4b2c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e4b3c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4b4c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e4b5c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e4b6c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4b7c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e4b8c <fpi.5344>:
   e4b8c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e4b9c:	0000 0000                                   ....

000e4ba0 <fpinan.5380>:
   e4ba0:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e4bb0:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000e4bc0 <tinytens>:
   e4bc0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e4bd0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e4be0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   e4bf0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   e4c00:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   e4c10:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   e4c20:	2575 006e 0000 0000                         u%n.....

000e4c28 <__mprec_tens>:
   e4c28:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e4c38:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e4c48:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e4c58:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e4c68:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4c78:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4c88:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4c98:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e4ca8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e4cb8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e4cc8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e4cd8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e4ce8:	9db4 79d9 7843 44ea                         ...yCx.D

000e4cf0 <__mprec_bigtens>:
   e4cf0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4d00:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4d10:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e4d18 <p05.5387>:
   e4d18:	0005 0000 0019 0000 007d 0000               ........}...

000e4d24 <link_const_variable_data_end>:
   e4d24:	000de6ad 	.word	0x000de6ad
   e4d28:	000deb69 	.word	0x000deb69
   e4d2c:	000df2e1 	.word	0x000df2e1
   e4d30:	000df32d 	.word	0x000df32d
   e4d34:	000dfac9 	.word	0x000dfac9
   e4d38:	000dfb89 	.word	0x000dfb89
   e4d3c:	000dfce1 	.word	0x000dfce1
   e4d40:	000dfd81 	.word	0x000dfd81
   e4d44:	000e0e11 	.word	0x000e0e11
   e4d48:	000e1045 	.word	0x000e1045
   e4d4c:	000e118d 	.word	0x000e118d
   e4d50:	000e13a5 	.word	0x000e13a5
   e4d54:	000e1429 	.word	0x000e1429
   e4d58:	000e14ed 	.word	0x000e14ed
   e4d5c:	000e15b1 	.word	0x000e15b1
