
c:/Users/mligh/OneDrive/Particle/ArgonClock/argonclock/target/1.5.2/argon/argonclock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010c20  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000e4c40  0001f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f0  2003e1ec  000e4c44  0002e1ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000514  2003e2dc  2003e2dc  0003e2dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000e4d34  000e4d34  00034d34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000e4d5c  000e4d5c  00034d5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00111cec  00000000  00000000  00034d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001384a  00000000  00000000  00146a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00024f6c  00000000  00000000  0015a296  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002d18  00000000  00000000  0017f202  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005288  00000000  00000000  00181f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003838b  00000000  00000000  001871a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f9d0  00000000  00000000  001bf52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010833c  00000000  00000000  001eeefd  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000eb64  00000000  00000000  002f723c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f00e f878 	bl	e2126 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f00e f87d 	bl	e213c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e1ec 	.word	0x2003e1ec
   d404c:	000e4c44 	.word	0x000e4c44
   d4050:	2003e2dc 	.word	0x2003e2dc
   d4054:	2003e2dc 	.word	0x2003e2dc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405e:	f00b fe6b 	bl	dfd38 <module_user_init_hook>
   d4062:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4064:	4b07      	ldr	r3, [pc, #28]	; (d4084 <module_user_init+0x28>)
   d4066:	1ae4      	subs	r4, r4, r3
   d4068:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d406a:	2500      	movs	r5, #0
   d406c:	461e      	mov	r6, r3
   d406e:	42a5      	cmp	r5, r4
   d4070:	d004      	beq.n	d407c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d4072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f8      	b.n	d406e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d407c:	bd70      	pop	{r4, r5, r6, pc}
   d407e:	bf00      	nop
   d4080:	000e4c40 	.word	0x000e4c40
   d4084:	000e4c04 	.word	0x000e4c04

000d4088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4088:	f008 bfc0 	b.w	dd00c <setup>

000d408c <module_user_loop>:
}

void module_user_loop() {
   d408c:	b508      	push	{r3, lr}
    loop();
   d408e:	f009 f8c3 	bl	dd218 <loop>
    _post_loop();
}
   d4092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4096:	f00b be11 	b.w	dfcbc <_post_loop>

000d409a <_Znwj>:
   d409a:	f00b b83d 	b.w	df118 <malloc>

000d409e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409e:	f00b b83b 	b.w	df118 <malloc>

000d40a2 <_ZdlPv>:
   d40a2:	f00b b841 	b.w	df128 <free>

000d40a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a6:	f00b b83f 	b.w	df128 <free>

000d40aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40aa:	7800      	ldrb	r0, [r0, #0]
   d40ac:	fab0 f080 	clz	r0, r0
   d40b0:	0940      	lsrs	r0, r0, #5
   d40b2:	4770      	bx	lr

000d40b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b4:	2301      	movs	r3, #1
   d40b6:	7003      	strb	r3, [r0, #0]
   d40b8:	4770      	bx	lr
	...

000d40bc <_Z8mshHdlr2PKcS0_>:
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d40bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40be:	4c0f      	ldr	r4, [pc, #60]	; (d40fc <_Z8mshHdlr2PKcS0_+0x40>)
   d40c0:	2300      	movs	r3, #0
}
void mshHdlr(const char *event, const char *data) {
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
   d40c2:	460d      	mov	r5, r1
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40c4:	6023      	str	r3, [r4, #0]
   d40c6:	4628      	mov	r0, r5
   d40c8:	f00e f895 	bl	e21f6 <strlen>
   d40cc:	6823      	ldr	r3, [r4, #0]
   d40ce:	4298      	cmp	r0, r3
   d40d0:	d90f      	bls.n	d40f2 <_Z8mshHdlr2PKcS0_+0x36>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
   d40d2:	5cea      	ldrb	r2, [r5, r3]
   d40d4:	2a75      	cmp	r2, #117	; 0x75
   d40d6:	d109      	bne.n	d40ec <_Z8mshHdlr2PKcS0_+0x30>
   d40d8:	18ea      	adds	r2, r5, r3
   d40da:	7851      	ldrb	r1, [r2, #1]
   d40dc:	296c      	cmp	r1, #108	; 0x6c
   d40de:	d105      	bne.n	d40ec <_Z8mshHdlr2PKcS0_+0x30>
   d40e0:	7891      	ldrb	r1, [r2, #2]
   d40e2:	2974      	cmp	r1, #116	; 0x74
            dat[0] = data[i+5];
   d40e4:	bf04      	itt	eq
   d40e6:	7952      	ldrbeq	r2, [r2, #5]
   d40e8:	f88d 2004 	strbeq.w	r2, [sp, #4]
    Particle.publish("btnpress999","toggle");
}
void mshHdlr2(const char *event, const char *data) {
    int lmpmode;
    char dat[3];
    for(i=0;i<strlen(data);i++){
   d40ec:	3301      	adds	r3, #1
   d40ee:	6023      	str	r3, [r4, #0]
   d40f0:	e7e9      	b.n	d40c6 <_Z8mshHdlr2PKcS0_+0xa>
        if(data[i]=='u' && data[i+1]=='l' && data[i+2]=='t'){
            dat[0] = data[i+5];
        }
    }
    lmpmode = atof(dat);
   d40f2:	a801      	add	r0, sp, #4
   d40f4:	f00d fefa 	bl	e1eec <atof>
    else{
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
   d40f8:	b003      	add	sp, #12
   d40fa:	bd30      	pop	{r4, r5, pc}
   d40fc:	2003e33c 	.word	0x2003e33c

000d4100 <_Z9itHandlerPKcS0_>:
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d4100:	b537      	push	{r0, r1, r2, r4, r5, lr}
    for(j=0;j<strlen(data);j++){
   d4102:	4c27      	ldr	r4, [pc, #156]	; (d41a0 <_Z9itHandlerPKcS0_+0xa0>)
   d4104:	2300      	movs	r3, #0
            }
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
   d4106:	460d      	mov	r5, r1
    for(j=0;j<strlen(data);j++){
   d4108:	6023      	str	r3, [r4, #0]
   d410a:	4628      	mov	r0, r5
   d410c:	f00e f873 	bl	e21f6 <strlen>
   d4110:	6823      	ldr	r3, [r4, #0]
   d4112:	4298      	cmp	r0, r3
   d4114:	d93c      	bls.n	d4190 <_Z9itHandlerPKcS0_+0x90>
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d4116:	5cea      	ldrb	r2, [r5, r3]
   d4118:	2a6c      	cmp	r2, #108	; 0x6c
   d411a:	d115      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d411c:	442b      	add	r3, r5
   d411e:	785a      	ldrb	r2, [r3, #1]
   d4120:	2a75      	cmp	r2, #117	; 0x75
   d4122:	d111      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4124:	789a      	ldrb	r2, [r3, #2]
   d4126:	2a65      	cmp	r2, #101	; 0x65
   d4128:	d10e      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d412a:	78da      	ldrb	r2, [r3, #3]
   d412c:	2a22      	cmp	r2, #34	; 0x22
   d412e:	d10b      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4130:	791a      	ldrb	r2, [r3, #4]
   d4132:	2a3a      	cmp	r2, #58	; 0x3a
   d4134:	d108      	bne.n	d4148 <_Z9itHandlerPKcS0_+0x48>
   d4136:	795a      	ldrb	r2, [r3, #5]
   d4138:	2a22      	cmp	r2, #34	; 0x22
            tempdat[0] = data[j+6];
   d413a:	bf01      	itttt	eq
   d413c:	799a      	ldrbeq	r2, [r3, #6]
            tempdat[1] = data[j+7];
   d413e:	79db      	ldrbeq	r3, [r3, #7]
    for(j=0;j<strlen(data);j++){
        float tempF;
        float tempC;
        char tempdat[2];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            tempdat[0] = data[j+6];
   d4140:	f88d 2004 	strbeq.w	r2, [sp, #4]
            tempdat[1] = data[j+7];
   d4144:	f88d 3005 	strbeq.w	r3, [sp, #5]
            //tempdat[2] = data[j+8];
            //tempdat[3] = data[j+9];
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
   d4148:	a801      	add	r0, sp, #4
   d414a:	f00d fecf 	bl	e1eec <atof>
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
   d414e:	2200      	movs	r2, #0
   d4150:	ec51 0b10 	vmov	r0, r1, d0
   d4154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d4158:	f00d f9e2 	bl	e1520 <__aeabi_dsub>
   d415c:	f00d fe76 	bl	e1e4c <__aeabi_d2f>
   d4160:	f00d fb3e 	bl	e17e0 <__aeabi_f2d>
   d4164:	a30c      	add	r3, pc, #48	; (adr r3, d4198 <_Z9itHandlerPKcS0_+0x98>)
   d4166:	e9d3 2300 	ldrd	r2, r3, [r3]
   d416a:	f00d fb8d 	bl	e1888 <__aeabi_dmul>
   d416e:	4b0d      	ldr	r3, [pc, #52]	; (d41a4 <_Z9itHandlerPKcS0_+0xa4>)
   d4170:	2200      	movs	r2, #0
   d4172:	f00d f9d7 	bl	e1524 <__adddf3>
   d4176:	f00d fe69 	bl	e1e4c <__aeabi_d2f>
   d417a:	ee07 0a90 	vmov	s15, r0
   d417e:	4b0a      	ldr	r3, [pc, #40]	; (d41a8 <_Z9itHandlerPKcS0_+0xa8>)
   d4180:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   d4184:	edc3 7a00 	vstr	s15, [r3]
            strip.show();
        }
    }
}
void itHandler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d4188:	6823      	ldr	r3, [r4, #0]
   d418a:	3301      	adds	r3, #1
   d418c:	6023      	str	r3, [r4, #0]
   d418e:	e7bc      	b.n	d410a <_Z9itHandlerPKcS0_+0xa>
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   d4190:	b003      	add	sp, #12
   d4192:	bd30      	pop	{r4, r5, pc}
   d4194:	f3af 8000 	nop.w
   d4198:	cccccccd 	.word	0xcccccccd
   d419c:	3ffccccc 	.word	0x3ffccccc
   d41a0:	2003e340 	.word	0x2003e340
   d41a4:	40400000 	.word	0x40400000
   d41a8:	2003e344 	.word	0x2003e344

000d41ac <_Z10myHandler2PKcS0_>:
    TC1 = TFahr/10;
    TC2 = TFahr%10;
    strip.show();
    delay(10);
}
void myHandler2(const char *event, const char *data) {
   d41ac:	b510      	push	{r4, lr}
   d41ae:	460c      	mov	r4, r1
    if(strcmp(data,"mode0")==0)
   d41b0:	4620      	mov	r0, r4
   d41b2:	4912      	ldr	r1, [pc, #72]	; (d41fc <_Z10myHandler2PKcS0_+0x50>)
   d41b4:	f00d fff2 	bl	e219c <strcmp>
   d41b8:	b978      	cbnz	r0, d41da <_Z10myHandler2PKcS0_+0x2e>
    {
        if(analogRead(A4) > bound)
   d41ba:	200f      	movs	r0, #15
   d41bc:	f00c ffd5 	bl	e116a <analogRead>
   d41c0:	4b0f      	ldr	r3, [pc, #60]	; (d4200 <_Z10myHandler2PKcS0_+0x54>)
   d41c2:	681b      	ldr	r3, [r3, #0]
   d41c4:	4298      	cmp	r0, r3
   d41c6:	dd08      	ble.n	d41da <_Z10myHandler2PKcS0_+0x2e>
        {
            strip.clear();
   d41c8:	480e      	ldr	r0, [pc, #56]	; (d4204 <_Z10myHandler2PKcS0_+0x58>)
   d41ca:	f00a fc48 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
            scan = 2;
   d41ce:	4b0e      	ldr	r3, [pc, #56]	; (d4208 <_Z10myHandler2PKcS0_+0x5c>)
   d41d0:	2202      	movs	r2, #2
   d41d2:	601a      	str	r2, [r3, #0]
            dmode = 1;
   d41d4:	4b0d      	ldr	r3, [pc, #52]	; (d420c <_Z10myHandler2PKcS0_+0x60>)
   d41d6:	2201      	movs	r2, #1
   d41d8:	601a      	str	r2, [r3, #0]
        }
    }
    if(strcmp(data,"mode1")==0)
   d41da:	490d      	ldr	r1, [pc, #52]	; (d4210 <_Z10myHandler2PKcS0_+0x64>)
   d41dc:	4620      	mov	r0, r4
   d41de:	f00d ffdd 	bl	e219c <strcmp>
   d41e2:	b948      	cbnz	r0, d41f8 <_Z10myHandler2PKcS0_+0x4c>
    {
        if(analogRead(A4) > bound)
   d41e4:	200f      	movs	r0, #15
   d41e6:	f00c ffc0 	bl	e116a <analogRead>
   d41ea:	4b05      	ldr	r3, [pc, #20]	; (d4200 <_Z10myHandler2PKcS0_+0x54>)
   d41ec:	681b      	ldr	r3, [r3, #0]
   d41ee:	4298      	cmp	r0, r3
        {
            dmode = 2;
   d41f0:	bfc2      	ittt	gt
   d41f2:	4b06      	ldrgt	r3, [pc, #24]	; (d420c <_Z10myHandler2PKcS0_+0x60>)
   d41f4:	2202      	movgt	r2, #2
   d41f6:	601a      	strgt	r2, [r3, #0]
   d41f8:	bd10      	pop	{r4, pc}
   d41fa:	bf00      	nop
   d41fc:	000e4410 	.word	0x000e4410
   d4200:	2003e338 	.word	0x2003e338
   d4204:	2003e31c 	.word	0x2003e31c
   d4208:	2003e30c 	.word	0x2003e30c
   d420c:	2003e330 	.word	0x2003e330
   d4210:	000e4416 	.word	0x000e4416

000d4214 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4214:	b510      	push	{r4, lr}
   d4216:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d4218:	6800      	ldr	r0, [r0, #0]
   d421a:	b108      	cbz	r0, d4220 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d421c:	f00a ff84 	bl	df128 <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4220:	4620      	mov	r0, r4
   d4222:	bd10      	pop	{r4, pc}

000d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>:
     * @note The periodic functionality is not available for the Spark Core.
     */
    int publishVitals(system_tick_t period_s = particle::NOW);
    inline int publishVitals(std::chrono::seconds s) { return publishVitals(s.count()); }

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
   d4224:	b513      	push	{r0, r1, r4, lr}
    {
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4226:	2400      	movs	r4, #0
   d4228:	4613      	mov	r3, r2
   d422a:	9401      	str	r4, [sp, #4]
   d422c:	9400      	str	r4, [sp, #0]
   d422e:	4622      	mov	r2, r4
   d4230:	f00a ff52 	bl	df0d8 <spark_subscribe>
    }
   d4234:	b002      	add	sp, #8
   d4236:	bd10      	pop	{r4, pc}

000d4238 <_ZN11EEPROMClass4readEi.isra.10>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
   d4238:	f00a bcd8 	b.w	debec <HAL_EEPROM_Read>

000d423c <_Z10co2HandlerPKcS0_>:
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d423c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    for(j=0;j<strlen(data);j++){
   d4240:	4d51      	ldr	r5, [pc, #324]	; (d4388 <_Z10co2HandlerPKcS0_+0x14c>)
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d4242:	f8df 915c 	ldr.w	r9, [pc, #348]	; d43a0 <_Z10co2HandlerPKcS0_+0x164>
   d4246:	f8df a144 	ldr.w	sl, [pc, #324]	; d438c <_Z10co2HandlerPKcS0_+0x150>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d424a:	2300      	movs	r3, #0
        //for plugs, call
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
   d424c:	b085      	sub	sp, #20
   d424e:	460e      	mov	r6, r1
    for(j=0;j<strlen(data);j++){
   d4250:	602b      	str	r3, [r5, #0]
   d4252:	4630      	mov	r0, r6
   d4254:	f00d ffcf 	bl	e21f6 <strlen>
   d4258:	682b      	ldr	r3, [r5, #0]
   d425a:	4298      	cmp	r0, r3
   d425c:	f240 8090 	bls.w	d4380 <_Z10co2HandlerPKcS0_+0x144>
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
   d4260:	5cf2      	ldrb	r2, [r6, r3]
   d4262:	2a6c      	cmp	r2, #108	; 0x6c
   d4264:	d11b      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
   d4266:	4433      	add	r3, r6
   d4268:	785a      	ldrb	r2, [r3, #1]
   d426a:	2a75      	cmp	r2, #117	; 0x75
   d426c:	d117      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
   d426e:	789a      	ldrb	r2, [r3, #2]
   d4270:	2a65      	cmp	r2, #101	; 0x65
   d4272:	d114      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
   d4274:	78da      	ldrb	r2, [r3, #3]
   d4276:	2a22      	cmp	r2, #34	; 0x22
   d4278:	d111      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
   d427a:	791a      	ldrb	r2, [r3, #4]
   d427c:	2a3a      	cmp	r2, #58	; 0x3a
   d427e:	d10e      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
   d4280:	795a      	ldrb	r2, [r3, #5]
   d4282:	2a22      	cmp	r2, #34	; 0x22
   d4284:	d10b      	bne.n	d429e <_Z10co2HandlerPKcS0_+0x62>
            codat[0] = data[j+6];
   d4286:	799a      	ldrb	r2, [r3, #6]
   d4288:	f88d 200c 	strb.w	r2, [sp, #12]
            codat[1] = data[j+7];
   d428c:	79da      	ldrb	r2, [r3, #7]
   d428e:	f88d 200d 	strb.w	r2, [sp, #13]
            codat[2] = data[j+8];
   d4292:	7a1a      	ldrb	r2, [r3, #8]
            codat[3] = data[j+9];
   d4294:	7a5b      	ldrb	r3, [r3, #9]
        float codata;
        char codat[4];
        if(data[j] == 'l' && data[j+1] == 'u' && data[j+2] == 'e' && data[j+3] == '"' && data[j+4] == ':' && data[j+5] == '"'){
            codat[0] = data[j+6];
            codat[1] = data[j+7];
            codat[2] = data[j+8];
   d4296:	f88d 200e 	strb.w	r2, [sp, #14]
            codat[3] = data[j+9];
   d429a:	f88d 300f 	strb.w	r3, [sp, #15]
        }
        codata = atof(codat);
   d429e:	a803      	add	r0, sp, #12
   d42a0:	f00d fe24 	bl	e1eec <atof>
        ico2 = (int)codata;
   d42a4:	ec51 0b10 	vmov	r0, r1, d0
   d42a8:	f00d fdd0 	bl	e1e4c <__aeabi_d2f>
   d42ac:	ee07 0a90 	vmov	s15, r0
   d42b0:	4b36      	ldr	r3, [pc, #216]	; (d438c <_Z10co2HandlerPKcS0_+0x150>)
   d42b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d42b6:	200f      	movs	r0, #15
            codat[1] = data[j+7];
            codat[2] = data[j+8];
            codat[3] = data[j+9];
        }
        codata = atof(codat);
        ico2 = (int)codata;
   d42b8:	edc3 7a00 	vstr	s15, [r3]
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
   d42bc:	f00c ff55 	bl	e116a <analogRead>
   d42c0:	f8d9 3000 	ldr.w	r3, [r9]
   d42c4:	4298      	cmp	r0, r3
   d42c6:	da1c      	bge.n	d4302 <_Z10co2HandlerPKcS0_+0xc6>
   d42c8:	f00c ff66 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   d42cc:	2003      	movs	r0, #3
   d42ce:	f7ff ffb3 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   d42d2:	2801      	cmp	r0, #1
   d42d4:	d115      	bne.n	d4302 <_Z10co2HandlerPKcS0_+0xc6>
   d42d6:	e018      	b.n	d430a <_Z10co2HandlerPKcS0_+0xce>
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d42d8:	4b2d      	ldr	r3, [pc, #180]	; (d4390 <_Z10co2HandlerPKcS0_+0x154>)
                if(i>248 && i<256){
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
   d42da:	f8df b0c8 	ldr.w	fp, [pc, #200]	; d43a4 <_Z10co2HandlerPKcS0_+0x168>
   d42de:	4f2d      	ldr	r7, [pc, #180]	; (d4394 <_Z10co2HandlerPKcS0_+0x158>)
   d42e0:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d43a8 <_Z10co2HandlerPKcS0_+0x16c>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d42e4:	22f8      	movs	r2, #248	; 0xf8
   d42e6:	601a      	str	r2, [r3, #0]
   d42e8:	6821      	ldr	r1, [r4, #0]
   d42ea:	f8da 3000 	ldr.w	r3, [sl]
   d42ee:	f240 22ee 	movw	r2, #750	; 0x2ee
   d42f2:	fb93 f3f2 	sdiv	r3, r3, r2
   d42f6:	33f7      	adds	r3, #247	; 0xf7
   d42f8:	428b      	cmp	r3, r1
   d42fa:	da1b      	bge.n	d4334 <_Z10co2HandlerPKcS0_+0xf8>
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
                    }
                }
            }
            strip.show();
   d42fc:	4826      	ldr	r0, [pc, #152]	; (d4398 <_Z10co2HandlerPKcS0_+0x15c>)
   d42fe:	f00a f9dd 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        //TPLink_Plug(plugIP, 1);
        //where state = 0 for OFF, state = 1 for ON
    }
}
void co2Handler(const char *event, const char *data) {
    for(j=0;j<strlen(data);j++){
   d4302:	682b      	ldr	r3, [r5, #0]
   d4304:	3301      	adds	r3, #1
   d4306:	602b      	str	r3, [r5, #0]
   d4308:	e7a3      	b.n	d4252 <_Z10co2HandlerPKcS0_+0x16>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d430a:	4c21      	ldr	r4, [pc, #132]	; (d4390 <_Z10co2HandlerPKcS0_+0x154>)
   d430c:	23f8      	movs	r3, #248	; 0xf8
   d430e:	6023      	str	r3, [r4, #0]
   d4310:	4627      	mov	r7, r4
                strip.setPixelColor(i,0,0,0);
   d4312:	f04f 0800 	mov.w	r8, #0
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d4316:	6821      	ldr	r1, [r4, #0]
   d4318:	29ff      	cmp	r1, #255	; 0xff
   d431a:	dcdd      	bgt.n	d42d8 <_Z10co2HandlerPKcS0_+0x9c>
                strip.setPixelColor(i,0,0,0);
   d431c:	2300      	movs	r3, #0
   d431e:	461a      	mov	r2, r3
   d4320:	f8cd 8000 	str.w	r8, [sp]
   d4324:	b289      	uxth	r1, r1
   d4326:	481c      	ldr	r0, [pc, #112]	; (d4398 <_Z10co2HandlerPKcS0_+0x15c>)
   d4328:	f00a fb6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        codata = atof(codat);
        ico2 = (int)codata;
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
   d432c:	683b      	ldr	r3, [r7, #0]
   d432e:	3301      	adds	r3, #1
   d4330:	603b      	str	r3, [r7, #0]
   d4332:	e7f0      	b.n	d4316 <_Z10co2HandlerPKcS0_+0xda>
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
                if(i>248 && i<256){
   d4334:	f1a1 03f9 	sub.w	r3, r1, #249	; 0xf9
   d4338:	2b06      	cmp	r3, #6
   d433a:	d80a      	bhi.n	d4352 <_Z10co2HandlerPKcS0_+0x116>
                    strip.setPixelColor(i,rclock,gclock,bclock);
   d433c:	4817      	ldr	r0, [pc, #92]	; (d439c <_Z10co2HandlerPKcS0_+0x160>)
   d433e:	783b      	ldrb	r3, [r7, #0]
   d4340:	7800      	ldrb	r0, [r0, #0]
   d4342:	f898 2000 	ldrb.w	r2, [r8]
   d4346:	9000      	str	r0, [sp, #0]
   d4348:	b289      	uxth	r1, r1
   d434a:	4813      	ldr	r0, [pc, #76]	; (d4398 <_Z10co2HandlerPKcS0_+0x15c>)
   d434c:	f00a fb58 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d4350:	e012      	b.n	d4378 <_Z10co2HandlerPKcS0_+0x13c>
                }
                else if(i==248)
   d4352:	29f8      	cmp	r1, #248	; 0xf8
   d4354:	d110      	bne.n	d4378 <_Z10co2HandlerPKcS0_+0x13c>
                {
                    if(TFahr < 33){
   d4356:	f8db 3000 	ldr.w	r3, [fp]
   d435a:	4810      	ldr	r0, [pc, #64]	; (d439c <_Z10co2HandlerPKcS0_+0x160>)
   d435c:	2b20      	cmp	r3, #32
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d435e:	bfd6      	itet	le
   d4360:	7802      	ldrble	r2, [r0, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d4362:	7800      	ldrbgt	r0, [r0, #0]
                    strip.setPixelColor(i,rclock,gclock,bclock);
                }
                else if(i==248)
                {
                    if(TFahr < 33){
                        strip.setPixelColor(i,bclock,gclock,rclock);
   d4364:	f898 0000 	ldrble.w	r0, [r8]
   d4368:	783b      	ldrb	r3, [r7, #0]
                    }
                    else{
                        strip.setPixelColor(i,rclock,gclock,bclock);
   d436a:	bfc8      	it	gt
   d436c:	f898 2000 	ldrbgt.w	r2, [r8]
   d4370:	9000      	str	r0, [sp, #0]
   d4372:	4809      	ldr	r0, [pc, #36]	; (d4398 <_Z10co2HandlerPKcS0_+0x15c>)
   d4374:	f00a fb44 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(analogRead(A4) < bound && EEPROM.read(3) == 1)// && dco2 == 1)
        {
            for(i=248;i<256;i++){
                strip.setPixelColor(i,0,0,0);
            }
            for(i=248;i<(ico2/750)+248;i++){
   d4378:	6823      	ldr	r3, [r4, #0]
   d437a:	3301      	adds	r3, #1
   d437c:	6023      	str	r3, [r4, #0]
   d437e:	e7b3      	b.n	d42e8 <_Z10co2HandlerPKcS0_+0xac>
                }
            }
            strip.show();
        }
    }
}
   d4380:	b005      	add	sp, #20
   d4382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4386:	bf00      	nop
   d4388:	2003e340 	.word	0x2003e340
   d438c:	2003e308 	.word	0x2003e308
   d4390:	2003e33c 	.word	0x2003e33c
   d4394:	2003e314 	.word	0x2003e314
   d4398:	2003e31c 	.word	0x2003e31c
   d439c:	2003e35c 	.word	0x2003e35c
   d43a0:	2003e338 	.word	0x2003e338
   d43a4:	2003e358 	.word	0x2003e358
   d43a8:	2003e354 	.word	0x2003e354

000d43ac <_ZN11EEPROMClass5writeEih.isra.11>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d43ac:	f00a bc26 	b.w	debfc <HAL_EEPROM_Write>

000d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d43b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d43b2:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d43b6:	4323      	orrs	r3, r4
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43b8:	f88d 3000 	strb.w	r3, [sp]
   d43bc:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d43be:	4605      	mov	r5, r0
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d43c0:	f00b fe28 	bl	e0014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }
   d43c4:	4628      	mov	r0, r5
   d43c6:	b003      	add	sp, #12
   d43c8:	bd30      	pop	{r4, r5, pc}

000d43ca <_Z5soundii>:
uint8_t eevalue;
int fdark;
void fillStrip(int start, int end, int R, int G, int B);
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
   d43ca:	b510      	push	{r4, lr}
    tone(D3, freq, dur);
   d43cc:	460a      	mov	r2, r1
uint8_t eevalue;
int fdark;
void fillStrip(int start, int end, int R, int G, int B);
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
   d43ce:	460c      	mov	r4, r1
    tone(D3, freq, dur);
   d43d0:	4601      	mov	r1, r0
   d43d2:	2003      	movs	r0, #3
   d43d4:	f00c f8ac 	bl	e0530 <tone>
    delay(dur);
   d43d8:	4620      	mov	r0, r4
}
   d43da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void fillStrip(int start, int end, int R, int G, int B);
//uint8_t plugIP[4] = {192,168,1,36};

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
   d43de:	f00b bbfb 	b.w	dfbd8 <delay>
	...

000d43e4 <_Z3numiiiii>:
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
    delay(50);
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d43e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d43e8:	b085      	sub	sp, #20
   d43ea:	461e      	mov	r6, r3
if(num == 1)
   d43ec:	2801      	cmp	r0, #1
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
    delay(50);
}
void num(int num, int pix, int R, int G, int B) {       //Code block for displaying larger 4x7 numbers, pix arg is the top left pixel, num is the number
   d43ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d43f0:	9303      	str	r3, [sp, #12]
   d43f2:	460c      	mov	r4, r1
   d43f4:	4615      	mov	r5, r2
if(num == 1)
   d43f6:	f040 819b 	bne.w	d4730 <_Z3numiiiii+0x34c>
{
    if((pix/8)%2 == 1)
   d43fa:	4bcb      	ldr	r3, [pc, #812]	; (d4728 <_Z3numiiiii+0x344>)
   d43fc:	2708      	movs	r7, #8
   d43fe:	fb91 f7f7 	sdiv	r7, r1, r7
   d4402:	403b      	ands	r3, r7
   d4404:	2b00      	cmp	r3, #0
   d4406:	bfbe      	ittt	lt
   d4408:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d440c:	f063 0301 	ornlt	r3, r3, #1
   d4410:	3301      	addlt	r3, #1
   d4412:	2b01      	cmp	r3, #1
   d4414:	f040 80d0 	bne.w	d45b8 <_Z3numiiiii+0x1d4>
    {
        strip.setPixelColor(pix+23,R,G,B);
   d4418:	fa1f f881 	uxth.w	r8, r1
   d441c:	fa5f f982 	uxtb.w	r9, r2
   d4420:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4424:	48c1      	ldr	r0, [pc, #772]	; (d472c <_Z3numiiiii+0x348>)
   d4426:	f8cd b000 	str.w	fp, [sp]
   d442a:	fa5f fa86 	uxtb.w	sl, r6
   d442e:	f108 0117 	add.w	r1, r8, #23
   d4432:	464a      	mov	r2, r9
   d4434:	4653      	mov	r3, sl
   d4436:	b289      	uxth	r1, r1
   d4438:	f00a fae2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d443c:	f108 0111 	add.w	r1, r8, #17
   d4440:	464a      	mov	r2, r9
   d4442:	4653      	mov	r3, sl
   d4444:	b289      	uxth	r1, r1
   d4446:	48b9      	ldr	r0, [pc, #740]	; (d472c <_Z3numiiiii+0x348>)
   d4448:	f8cd b000 	str.w	fp, [sp]
   d444c:	f00a fad8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4450:	f108 0112 	add.w	r1, r8, #18
   d4454:	464a      	mov	r2, r9
   d4456:	4653      	mov	r3, sl
   d4458:	b289      	uxth	r1, r1
   d445a:	48b4      	ldr	r0, [pc, #720]	; (d472c <_Z3numiiiii+0x348>)
   d445c:	f8cd b000 	str.w	fp, [sp]
   d4460:	f00a face 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4464:	f108 0113 	add.w	r1, r8, #19
   d4468:	464a      	mov	r2, r9
   d446a:	4653      	mov	r3, sl
   d446c:	b289      	uxth	r1, r1
   d446e:	48af      	ldr	r0, [pc, #700]	; (d472c <_Z3numiiiii+0x348>)
   d4470:	f8cd b000 	str.w	fp, [sp]
   d4474:	f00a fac4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4478:	f108 0114 	add.w	r1, r8, #20
   d447c:	464a      	mov	r2, r9
   d447e:	4653      	mov	r3, sl
   d4480:	b289      	uxth	r1, r1
   d4482:	48aa      	ldr	r0, [pc, #680]	; (d472c <_Z3numiiiii+0x348>)
   d4484:	f8cd b000 	str.w	fp, [sp]
   d4488:	f00a faba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d448c:	f108 0115 	add.w	r1, r8, #21
   d4490:	464a      	mov	r2, r9
   d4492:	4653      	mov	r3, sl
   d4494:	b289      	uxth	r1, r1
   d4496:	48a5      	ldr	r0, [pc, #660]	; (d472c <_Z3numiiiii+0x348>)
   d4498:	f8cd b000 	str.w	fp, [sp]
   d449c:	f00a fab0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d44a0:	f108 0116 	add.w	r1, r8, #22
   d44a4:	464a      	mov	r2, r9
   d44a6:	4653      	mov	r3, sl
        
        strip.setPixelColor(pix,0,0,0);
   d44a8:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
   d44ac:	b289      	uxth	r1, r1
   d44ae:	489f      	ldr	r0, [pc, #636]	; (d472c <_Z3numiiiii+0x348>)
   d44b0:	f8cd b000 	str.w	fp, [sp]
   d44b4:	f00a faa4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d44b8:	464b      	mov	r3, r9
   d44ba:	464a      	mov	r2, r9
   d44bc:	4641      	mov	r1, r8
   d44be:	489b      	ldr	r0, [pc, #620]	; (d472c <_Z3numiiiii+0x348>)
   d44c0:	f8cd 9000 	str.w	r9, [sp]
   d44c4:	f00a fa9c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d44c8:	f108 0101 	add.w	r1, r8, #1
   d44cc:	464b      	mov	r3, r9
   d44ce:	464a      	mov	r2, r9
   d44d0:	b289      	uxth	r1, r1
   d44d2:	4896      	ldr	r0, [pc, #600]	; (d472c <_Z3numiiiii+0x348>)
   d44d4:	f8cd 9000 	str.w	r9, [sp]
   d44d8:	f00a fa92 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d44dc:	f108 0110 	add.w	r1, r8, #16
   d44e0:	464b      	mov	r3, r9
   d44e2:	464a      	mov	r2, r9
   d44e4:	b289      	uxth	r1, r1
   d44e6:	4891      	ldr	r0, [pc, #580]	; (d472c <_Z3numiiiii+0x348>)
   d44e8:	f8cd 9000 	str.w	r9, [sp]
   d44ec:	f00a fa88 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,0,0,0);
   d44f0:	f108 31ff 	add.w	r1, r8, #4294967295
   d44f4:	464b      	mov	r3, r9
   d44f6:	464a      	mov	r2, r9
   d44f8:	b289      	uxth	r1, r1
   d44fa:	488c      	ldr	r0, [pc, #560]	; (d472c <_Z3numiiiii+0x348>)
   d44fc:	f8cd 9000 	str.w	r9, [sp]
   d4500:	f00a fa7e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d4504:	f1a8 0102 	sub.w	r1, r8, #2
   d4508:	464b      	mov	r3, r9
   d450a:	464a      	mov	r2, r9
   d450c:	b289      	uxth	r1, r1
   d450e:	4887      	ldr	r0, [pc, #540]	; (d472c <_Z3numiiiii+0x348>)
   d4510:	f8cd 9000 	str.w	r9, [sp]
   d4514:	f00a fa74 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d4518:	f1a8 0103 	sub.w	r1, r8, #3
   d451c:	464b      	mov	r3, r9
   d451e:	464a      	mov	r2, r9
   d4520:	b289      	uxth	r1, r1
   d4522:	4882      	ldr	r0, [pc, #520]	; (d472c <_Z3numiiiii+0x348>)
   d4524:	f8cd 9000 	str.w	r9, [sp]
   d4528:	f00a fa6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d452c:	f1a8 0104 	sub.w	r1, r8, #4
   d4530:	464b      	mov	r3, r9
   d4532:	464a      	mov	r2, r9
   d4534:	b289      	uxth	r1, r1
   d4536:	487d      	ldr	r0, [pc, #500]	; (d472c <_Z3numiiiii+0x348>)
   d4538:	f8cd 9000 	str.w	r9, [sp]
   d453c:	f00a fa60 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4540:	f1a8 0105 	sub.w	r1, r8, #5
   d4544:	464b      	mov	r3, r9
   d4546:	464a      	mov	r2, r9
   d4548:	b289      	uxth	r1, r1
   d454a:	4878      	ldr	r0, [pc, #480]	; (d472c <_Z3numiiiii+0x348>)
   d454c:	f8cd 9000 	str.w	r9, [sp]
   d4550:	f00a fa56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d4554:	f1a8 0106 	sub.w	r1, r8, #6
   d4558:	464b      	mov	r3, r9
   d455a:	464a      	mov	r2, r9
   d455c:	b289      	uxth	r1, r1
   d455e:	4873      	ldr	r0, [pc, #460]	; (d472c <_Z3numiiiii+0x348>)
   d4560:	f8cd 9000 	str.w	r9, [sp]
   d4564:	f00a fa4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d4568:	f108 0107 	add.w	r1, r8, #7
   d456c:	464b      	mov	r3, r9
   d456e:	464a      	mov	r2, r9
   d4570:	b289      	uxth	r1, r1
   d4572:	486e      	ldr	r0, [pc, #440]	; (d472c <_Z3numiiiii+0x348>)
   d4574:	f8cd 9000 	str.w	r9, [sp]
   d4578:	f00a fa42 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d457c:	f108 010a 	add.w	r1, r8, #10
   d4580:	464b      	mov	r3, r9
   d4582:	464a      	mov	r2, r9
   d4584:	b289      	uxth	r1, r1
   d4586:	4869      	ldr	r0, [pc, #420]	; (d472c <_Z3numiiiii+0x348>)
   d4588:	f8cd 9000 	str.w	r9, [sp]
   d458c:	f00a fa38 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4590:	f108 0104 	add.w	r1, r8, #4
   d4594:	464b      	mov	r3, r9
   d4596:	464a      	mov	r2, r9
   d4598:	b289      	uxth	r1, r1
   d459a:	4864      	ldr	r0, [pc, #400]	; (d472c <_Z3numiiiii+0x348>)
   d459c:	f8cd 9000 	str.w	r9, [sp]
   d45a0:	f00a fa2e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d45a4:	f108 010d 	add.w	r1, r8, #13
   d45a8:	f8cd 9000 	str.w	r9, [sp]
   d45ac:	464b      	mov	r3, r9
   d45ae:	464a      	mov	r2, r9
   d45b0:	b289      	uxth	r1, r1
   d45b2:	485e      	ldr	r0, [pc, #376]	; (d472c <_Z3numiiiii+0x348>)
   d45b4:	f00a fa24 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d45b8:	f017 0701 	ands.w	r7, r7, #1
   d45bc:	f041 873e 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix+25,R,G,B);
   d45c0:	b2a4      	uxth	r4, r4
   d45c2:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d45c6:	4859      	ldr	r0, [pc, #356]	; (d472c <_Z3numiiiii+0x348>)
   d45c8:	f8cd 8000 	str.w	r8, [sp]
   d45cc:	b2ed      	uxtb	r5, r5
   d45ce:	b2f6      	uxtb	r6, r6
   d45d0:	f104 0119 	add.w	r1, r4, #25
   d45d4:	4633      	mov	r3, r6
   d45d6:	462a      	mov	r2, r5
   d45d8:	b289      	uxth	r1, r1
   d45da:	f00a fa11 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d45de:	f104 011a 	add.w	r1, r4, #26
   d45e2:	4633      	mov	r3, r6
   d45e4:	462a      	mov	r2, r5
   d45e6:	b289      	uxth	r1, r1
   d45e8:	4850      	ldr	r0, [pc, #320]	; (d472c <_Z3numiiiii+0x348>)
   d45ea:	f8cd 8000 	str.w	r8, [sp]
   d45ee:	f00a fa07 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d45f2:	f104 011b 	add.w	r1, r4, #27
   d45f6:	4633      	mov	r3, r6
   d45f8:	462a      	mov	r2, r5
   d45fa:	b289      	uxth	r1, r1
   d45fc:	484b      	ldr	r0, [pc, #300]	; (d472c <_Z3numiiiii+0x348>)
   d45fe:	f8cd 8000 	str.w	r8, [sp]
   d4602:	f00a f9fd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d4606:	f104 011c 	add.w	r1, r4, #28
   d460a:	4633      	mov	r3, r6
   d460c:	462a      	mov	r2, r5
   d460e:	b289      	uxth	r1, r1
   d4610:	4846      	ldr	r0, [pc, #280]	; (d472c <_Z3numiiiii+0x348>)
   d4612:	f8cd 8000 	str.w	r8, [sp]
   d4616:	f00a f9f3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d461a:	f104 011d 	add.w	r1, r4, #29
   d461e:	4633      	mov	r3, r6
   d4620:	462a      	mov	r2, r5
   d4622:	b289      	uxth	r1, r1
   d4624:	4841      	ldr	r0, [pc, #260]	; (d472c <_Z3numiiiii+0x348>)
   d4626:	f8cd 8000 	str.w	r8, [sp]
   d462a:	f00a f9e9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d462e:	f104 011e 	add.w	r1, r4, #30
   d4632:	4633      	mov	r3, r6
   d4634:	462a      	mov	r2, r5
   d4636:	b289      	uxth	r1, r1
   d4638:	483c      	ldr	r0, [pc, #240]	; (d472c <_Z3numiiiii+0x348>)
   d463a:	f8cd 8000 	str.w	r8, [sp]
   d463e:	f00a f9df 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4642:	f104 011f 	add.w	r1, r4, #31
   d4646:	4633      	mov	r3, r6
   d4648:	462a      	mov	r2, r5
   d464a:	b289      	uxth	r1, r1
   d464c:	4837      	ldr	r0, [pc, #220]	; (d472c <_Z3numiiiii+0x348>)
   d464e:	f8cd 8000 	str.w	r8, [sp]
   d4652:	f00a f9d5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix,0,0,0);
   d4656:	463b      	mov	r3, r7
   d4658:	463a      	mov	r2, r7
   d465a:	4621      	mov	r1, r4
   d465c:	4833      	ldr	r0, [pc, #204]	; (d472c <_Z3numiiiii+0x348>)
   d465e:	9700      	str	r7, [sp, #0]
   d4660:	f00a f9ce 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,0,0,0);
   d4664:	1c61      	adds	r1, r4, #1
   d4666:	463b      	mov	r3, r7
   d4668:	463a      	mov	r2, r7
   d466a:	b289      	uxth	r1, r1
   d466c:	482f      	ldr	r0, [pc, #188]	; (d472c <_Z3numiiiii+0x348>)
   d466e:	9700      	str	r7, [sp, #0]
   d4670:	f00a f9c6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4674:	1ca1      	adds	r1, r4, #2
   d4676:	463b      	mov	r3, r7
   d4678:	463a      	mov	r2, r7
   d467a:	b289      	uxth	r1, r1
   d467c:	482b      	ldr	r0, [pc, #172]	; (d472c <_Z3numiiiii+0x348>)
   d467e:	9700      	str	r7, [sp, #0]
   d4680:	f00a f9be 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d4684:	1ce1      	adds	r1, r4, #3
   d4686:	463b      	mov	r3, r7
   d4688:	463a      	mov	r2, r7
   d468a:	b289      	uxth	r1, r1
   d468c:	4827      	ldr	r0, [pc, #156]	; (d472c <_Z3numiiiii+0x348>)
   d468e:	9700      	str	r7, [sp, #0]
   d4690:	f00a f9b6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4694:	1d21      	adds	r1, r4, #4
   d4696:	463b      	mov	r3, r7
   d4698:	463a      	mov	r2, r7
   d469a:	b289      	uxth	r1, r1
   d469c:	4823      	ldr	r0, [pc, #140]	; (d472c <_Z3numiiiii+0x348>)
   d469e:	9700      	str	r7, [sp, #0]
   d46a0:	f00a f9ae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d46a4:	1d61      	adds	r1, r4, #5
   d46a6:	463b      	mov	r3, r7
   d46a8:	463a      	mov	r2, r7
   d46aa:	b289      	uxth	r1, r1
   d46ac:	481f      	ldr	r0, [pc, #124]	; (d472c <_Z3numiiiii+0x348>)
   d46ae:	9700      	str	r7, [sp, #0]
   d46b0:	f00a f9a6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d46b4:	1da1      	adds	r1, r4, #6
   d46b6:	463b      	mov	r3, r7
   d46b8:	463a      	mov	r2, r7
   d46ba:	b289      	uxth	r1, r1
   d46bc:	481b      	ldr	r0, [pc, #108]	; (d472c <_Z3numiiiii+0x348>)
   d46be:	9700      	str	r7, [sp, #0]
   d46c0:	f00a f99e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d46c4:	f104 0109 	add.w	r1, r4, #9
   d46c8:	463b      	mov	r3, r7
   d46ca:	463a      	mov	r2, r7
   d46cc:	b289      	uxth	r1, r1
   d46ce:	4817      	ldr	r0, [pc, #92]	; (d472c <_Z3numiiiii+0x348>)
   d46d0:	9700      	str	r7, [sp, #0]
   d46d2:	f00a f995 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d46d6:	f104 0116 	add.w	r1, r4, #22
   d46da:	463b      	mov	r3, r7
   d46dc:	463a      	mov	r2, r7
   d46de:	b289      	uxth	r1, r1
   d46e0:	4812      	ldr	r0, [pc, #72]	; (d472c <_Z3numiiiii+0x348>)
   d46e2:	9700      	str	r7, [sp, #0]
   d46e4:	f00a f98c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d46e8:	f104 010f 	add.w	r1, r4, #15
   d46ec:	463b      	mov	r3, r7
   d46ee:	463a      	mov	r2, r7
   d46f0:	b289      	uxth	r1, r1
   d46f2:	480e      	ldr	r0, [pc, #56]	; (d472c <_Z3numiiiii+0x348>)
   d46f4:	9700      	str	r7, [sp, #0]
   d46f6:	f00a f983 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d46fa:	f104 0110 	add.w	r1, r4, #16
   d46fe:	463b      	mov	r3, r7
   d4700:	463a      	mov	r2, r7
   d4702:	b289      	uxth	r1, r1
   d4704:	4809      	ldr	r0, [pc, #36]	; (d472c <_Z3numiiiii+0x348>)
   d4706:	9700      	str	r7, [sp, #0]
   d4708:	f00a f97a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,0,0,0);
   d470c:	f104 010c 	add.w	r1, r4, #12
   d4710:	b289      	uxth	r1, r1
   d4712:	9700      	str	r7, [sp, #0]
   d4714:	463b      	mov	r3, r7
   d4716:	463a      	mov	r2, r7
   d4718:	4804      	ldr	r0, [pc, #16]	; (d472c <_Z3numiiiii+0x348>)
   d471a:	f00a f971 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d471e:	f104 0113 	add.w	r1, r4, #19
   d4722:	f000 bce3 	b.w	d50ec <_Z3numiiiii+0xd08>
   d4726:	bf00      	nop
   d4728:	80000001 	.word	0x80000001
   d472c:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 2)
   d4730:	2802      	cmp	r0, #2
   d4732:	f040 819b 	bne.w	d4a6c <_Z3numiiiii+0x688>
{
    if((pix/8)%2 == 1)
   d4736:	4bcb      	ldr	r3, [pc, #812]	; (d4a64 <_Z3numiiiii+0x680>)
   d4738:	f04f 0a08 	mov.w	sl, #8
   d473c:	fb91 fafa 	sdiv	sl, r1, sl
   d4740:	ea0a 0303 	and.w	r3, sl, r3
   d4744:	2b00      	cmp	r3, #0
   d4746:	bfbe      	ittt	lt
   d4748:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d474c:	f063 0301 	ornlt	r3, r3, #1
   d4750:	3301      	addlt	r3, #1
   d4752:	2b01      	cmp	r3, #1
   d4754:	f040 80c6 	bne.w	d48e4 <_Z3numiiiii+0x500>
    {
        strip.setPixelColor(pix,R,G,B);
   d4758:	b28f      	uxth	r7, r1
   d475a:	fa5f f882 	uxtb.w	r8, r2
   d475e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4762:	48c1      	ldr	r0, [pc, #772]	; (d4a68 <_Z3numiiiii+0x684>)
   d4764:	f8cd b000 	str.w	fp, [sp]
   d4768:	fa5f f986 	uxtb.w	r9, r6
   d476c:	4642      	mov	r2, r8
   d476e:	464b      	mov	r3, r9
   d4770:	4639      	mov	r1, r7
   d4772:	f00a f945 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4776:	1c79      	adds	r1, r7, #1
   d4778:	4642      	mov	r2, r8
   d477a:	464b      	mov	r3, r9
   d477c:	b289      	uxth	r1, r1
   d477e:	48ba      	ldr	r0, [pc, #744]	; (d4a68 <_Z3numiiiii+0x684>)
   d4780:	f8cd b000 	str.w	fp, [sp]
   d4784:	f00a f93c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4788:	f107 0110 	add.w	r1, r7, #16
   d478c:	4642      	mov	r2, r8
   d478e:	464b      	mov	r3, r9
   d4790:	b289      	uxth	r1, r1
   d4792:	48b5      	ldr	r0, [pc, #724]	; (d4a68 <_Z3numiiiii+0x684>)
   d4794:	f8cd b000 	str.w	fp, [sp]
   d4798:	f00a f932 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d479c:	f107 0111 	add.w	r1, r7, #17
   d47a0:	4642      	mov	r2, r8
   d47a2:	464b      	mov	r3, r9
   d47a4:	b289      	uxth	r1, r1
   d47a6:	48b0      	ldr	r0, [pc, #704]	; (d4a68 <_Z3numiiiii+0x684>)
   d47a8:	f8cd b000 	str.w	fp, [sp]
   d47ac:	f00a f928 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d47b0:	f107 0112 	add.w	r1, r7, #18
   d47b4:	4642      	mov	r2, r8
   d47b6:	464b      	mov	r3, r9
   d47b8:	b289      	uxth	r1, r1
   d47ba:	48ab      	ldr	r0, [pc, #684]	; (d4a68 <_Z3numiiiii+0x684>)
   d47bc:	f8cd b000 	str.w	fp, [sp]
   d47c0:	f00a f91e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d47c4:	f107 0113 	add.w	r1, r7, #19
   d47c8:	4642      	mov	r2, r8
   d47ca:	464b      	mov	r3, r9
   d47cc:	b289      	uxth	r1, r1
   d47ce:	48a6      	ldr	r0, [pc, #664]	; (d4a68 <_Z3numiiiii+0x684>)
   d47d0:	f8cd b000 	str.w	fp, [sp]
   d47d4:	f00a f914 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d47d8:	f107 0114 	add.w	r1, r7, #20
   d47dc:	4642      	mov	r2, r8
   d47de:	464b      	mov	r3, r9
   d47e0:	b289      	uxth	r1, r1
   d47e2:	48a1      	ldr	r0, [pc, #644]	; (d4a68 <_Z3numiiiii+0x684>)
   d47e4:	f8cd b000 	str.w	fp, [sp]
   d47e8:	f00a f90a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d47ec:	f107 010d 	add.w	r1, r7, #13
   d47f0:	4642      	mov	r2, r8
   d47f2:	464b      	mov	r3, r9
   d47f4:	b289      	uxth	r1, r1
   d47f6:	489c      	ldr	r0, [pc, #624]	; (d4a68 <_Z3numiiiii+0x684>)
   d47f8:	f8cd b000 	str.w	fp, [sp]
   d47fc:	f00a f900 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4800:	1d39      	adds	r1, r7, #4
   d4802:	4642      	mov	r2, r8
   d4804:	464b      	mov	r3, r9
   d4806:	b289      	uxth	r1, r1
   d4808:	4897      	ldr	r0, [pc, #604]	; (d4a68 <_Z3numiiiii+0x684>)
   d480a:	f8cd b000 	str.w	fp, [sp]
   d480e:	f00a f8f7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4812:	1ef9      	subs	r1, r7, #3
   d4814:	4642      	mov	r2, r8
   d4816:	464b      	mov	r3, r9
   d4818:	b289      	uxth	r1, r1
   d481a:	4893      	ldr	r0, [pc, #588]	; (d4a68 <_Z3numiiiii+0x684>)
   d481c:	f8cd b000 	str.w	fp, [sp]
   d4820:	f00a f8ee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d4824:	1f39      	subs	r1, r7, #4
   d4826:	4642      	mov	r2, r8
   d4828:	464b      	mov	r3, r9
   d482a:	b289      	uxth	r1, r1
   d482c:	488e      	ldr	r0, [pc, #568]	; (d4a68 <_Z3numiiiii+0x684>)
   d482e:	f8cd b000 	str.w	fp, [sp]
   d4832:	f00a f8e5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d4836:	1f79      	subs	r1, r7, #5
   d4838:	4642      	mov	r2, r8
   d483a:	464b      	mov	r3, r9
   d483c:	b289      	uxth	r1, r1
   d483e:	488a      	ldr	r0, [pc, #552]	; (d4a68 <_Z3numiiiii+0x684>)
   d4840:	f8cd b000 	str.w	fp, [sp]
   d4844:	f00a f8dc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4848:	1fb9      	subs	r1, r7, #6
   d484a:	4642      	mov	r2, r8
   d484c:	464b      	mov	r3, r9
   d484e:	b289      	uxth	r1, r1
   d4850:	4885      	ldr	r0, [pc, #532]	; (d4a68 <_Z3numiiiii+0x684>)
   d4852:	f8cd b000 	str.w	fp, [sp]
   d4856:	f00a f8d3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d485a:	1df9      	adds	r1, r7, #7
   d485c:	4642      	mov	r2, r8
   d485e:	464b      	mov	r3, r9
   d4860:	b289      	uxth	r1, r1
   d4862:	4881      	ldr	r0, [pc, #516]	; (d4a68 <_Z3numiiiii+0x684>)
   d4864:	f8cd b000 	str.w	fp, [sp]
   d4868:	f00a f8ca 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d486c:	f107 010a 	add.w	r1, r7, #10
   d4870:	4642      	mov	r2, r8
   d4872:	464b      	mov	r3, r9
   d4874:	b289      	uxth	r1, r1
   d4876:	487c      	ldr	r0, [pc, #496]	; (d4a68 <_Z3numiiiii+0x684>)
   d4878:	f8cd b000 	str.w	fp, [sp]
   d487c:	f00a f8c0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4880:	f107 0117 	add.w	r1, r7, #23
   d4884:	4642      	mov	r2, r8
   d4886:	464b      	mov	r3, r9
   d4888:	b289      	uxth	r1, r1
   d488a:	4877      	ldr	r0, [pc, #476]	; (d4a68 <_Z3numiiiii+0x684>)
   d488c:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4890:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix-4,R,G,B);
        strip.setPixelColor(pix-5,R,G,B);
        strip.setPixelColor(pix-6,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d4894:	f00a f8b4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4898:	1e79      	subs	r1, r7, #1
   d489a:	4643      	mov	r3, r8
   d489c:	4642      	mov	r2, r8
   d489e:	b289      	uxth	r1, r1
   d48a0:	4871      	ldr	r0, [pc, #452]	; (d4a68 <_Z3numiiiii+0x684>)
   d48a2:	f8cd 8000 	str.w	r8, [sp]
   d48a6:	f00a f8ab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d48aa:	1eb9      	subs	r1, r7, #2
   d48ac:	4643      	mov	r3, r8
   d48ae:	4642      	mov	r2, r8
   d48b0:	b289      	uxth	r1, r1
   d48b2:	486d      	ldr	r0, [pc, #436]	; (d4a68 <_Z3numiiiii+0x684>)
   d48b4:	f8cd 8000 	str.w	r8, [sp]
   d48b8:	f00a f8a2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d48bc:	f107 0116 	add.w	r1, r7, #22
   d48c0:	4643      	mov	r3, r8
   d48c2:	4642      	mov	r2, r8
   d48c4:	b289      	uxth	r1, r1
   d48c6:	4868      	ldr	r0, [pc, #416]	; (d4a68 <_Z3numiiiii+0x684>)
   d48c8:	f8cd 8000 	str.w	r8, [sp]
   d48cc:	f00a f898 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,0,0,0);
   d48d0:	f107 0115 	add.w	r1, r7, #21
   d48d4:	f8cd 8000 	str.w	r8, [sp]
   d48d8:	4643      	mov	r3, r8
   d48da:	4642      	mov	r2, r8
   d48dc:	b289      	uxth	r1, r1
   d48de:	4862      	ldr	r0, [pc, #392]	; (d4a68 <_Z3numiiiii+0x684>)
   d48e0:	f00a f88e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d48e4:	f01a 0701 	ands.w	r7, sl, #1
   d48e8:	f041 85a8 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d48ec:	b2a4      	uxth	r4, r4
   d48ee:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d48f2:	485d      	ldr	r0, [pc, #372]	; (d4a68 <_Z3numiiiii+0x684>)
   d48f4:	f8cd 8000 	str.w	r8, [sp]
   d48f8:	b2ed      	uxtb	r5, r5
   d48fa:	b2f6      	uxtb	r6, r6
   d48fc:	4633      	mov	r3, r6
   d48fe:	462a      	mov	r2, r5
   d4900:	4621      	mov	r1, r4
   d4902:	f00a f87d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d4906:	f104 010f 	add.w	r1, r4, #15
   d490a:	4633      	mov	r3, r6
   d490c:	462a      	mov	r2, r5
   d490e:	b289      	uxth	r1, r1
   d4910:	4855      	ldr	r0, [pc, #340]	; (d4a68 <_Z3numiiiii+0x684>)
   d4912:	f8cd 8000 	str.w	r8, [sp]
   d4916:	f00a f873 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d491a:	f104 0110 	add.w	r1, r4, #16
   d491e:	4633      	mov	r3, r6
   d4920:	462a      	mov	r2, r5
   d4922:	b289      	uxth	r1, r1
   d4924:	4850      	ldr	r0, [pc, #320]	; (d4a68 <_Z3numiiiii+0x684>)
   d4926:	f8cd 8000 	str.w	r8, [sp]
   d492a:	f00a f869 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d492e:	1ce1      	adds	r1, r4, #3
   d4930:	4633      	mov	r3, r6
   d4932:	462a      	mov	r2, r5
   d4934:	b289      	uxth	r1, r1
   d4936:	484c      	ldr	r0, [pc, #304]	; (d4a68 <_Z3numiiiii+0x684>)
   d4938:	f8cd 8000 	str.w	r8, [sp]
   d493c:	f00a f860 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4940:	1d21      	adds	r1, r4, #4
   d4942:	4633      	mov	r3, r6
   d4944:	462a      	mov	r2, r5
   d4946:	b289      	uxth	r1, r1
   d4948:	4847      	ldr	r0, [pc, #284]	; (d4a68 <_Z3numiiiii+0x684>)
   d494a:	f8cd 8000 	str.w	r8, [sp]
   d494e:	f00a f857 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d4952:	1d61      	adds	r1, r4, #5
   d4954:	4633      	mov	r3, r6
   d4956:	462a      	mov	r2, r5
   d4958:	b289      	uxth	r1, r1
   d495a:	4843      	ldr	r0, [pc, #268]	; (d4a68 <_Z3numiiiii+0x684>)
   d495c:	f8cd 8000 	str.w	r8, [sp]
   d4960:	f00a f84e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4964:	1da1      	adds	r1, r4, #6
   d4966:	4633      	mov	r3, r6
   d4968:	462a      	mov	r2, r5
   d496a:	b289      	uxth	r1, r1
   d496c:	483e      	ldr	r0, [pc, #248]	; (d4a68 <_Z3numiiiii+0x684>)
   d496e:	f8cd 8000 	str.w	r8, [sp]
   d4972:	f00a f845 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4976:	f104 011f 	add.w	r1, r4, #31
   d497a:	4633      	mov	r3, r6
   d497c:	462a      	mov	r2, r5
   d497e:	b289      	uxth	r1, r1
   d4980:	4839      	ldr	r0, [pc, #228]	; (d4a68 <_Z3numiiiii+0x684>)
   d4982:	f8cd 8000 	str.w	r8, [sp]
   d4986:	f00a f83b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d498a:	f104 011e 	add.w	r1, r4, #30
   d498e:	4633      	mov	r3, r6
   d4990:	462a      	mov	r2, r5
   d4992:	b289      	uxth	r1, r1
   d4994:	4834      	ldr	r0, [pc, #208]	; (d4a68 <_Z3numiiiii+0x684>)
   d4996:	f8cd 8000 	str.w	r8, [sp]
   d499a:	f00a f831 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d499e:	f104 011d 	add.w	r1, r4, #29
   d49a2:	4633      	mov	r3, r6
   d49a4:	462a      	mov	r2, r5
   d49a6:	b289      	uxth	r1, r1
   d49a8:	482f      	ldr	r0, [pc, #188]	; (d4a68 <_Z3numiiiii+0x684>)
   d49aa:	f8cd 8000 	str.w	r8, [sp]
   d49ae:	f00a f827 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d49b2:	f104 011c 	add.w	r1, r4, #28
   d49b6:	4633      	mov	r3, r6
   d49b8:	462a      	mov	r2, r5
   d49ba:	b289      	uxth	r1, r1
   d49bc:	482a      	ldr	r0, [pc, #168]	; (d4a68 <_Z3numiiiii+0x684>)
   d49be:	f8cd 8000 	str.w	r8, [sp]
   d49c2:	f00a f81d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d49c6:	f104 010c 	add.w	r1, r4, #12
   d49ca:	4633      	mov	r3, r6
   d49cc:	462a      	mov	r2, r5
   d49ce:	b289      	uxth	r1, r1
   d49d0:	4825      	ldr	r0, [pc, #148]	; (d4a68 <_Z3numiiiii+0x684>)
   d49d2:	f8cd 8000 	str.w	r8, [sp]
   d49d6:	f00a f813 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d49da:	f104 0113 	add.w	r1, r4, #19
   d49de:	4633      	mov	r3, r6
   d49e0:	462a      	mov	r2, r5
   d49e2:	b289      	uxth	r1, r1
   d49e4:	4820      	ldr	r0, [pc, #128]	; (d4a68 <_Z3numiiiii+0x684>)
   d49e6:	f8cd 8000 	str.w	r8, [sp]
   d49ea:	f00a f809 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d49ee:	f104 0109 	add.w	r1, r4, #9
   d49f2:	4633      	mov	r3, r6
   d49f4:	462a      	mov	r2, r5
   d49f6:	b289      	uxth	r1, r1
   d49f8:	481b      	ldr	r0, [pc, #108]	; (d4a68 <_Z3numiiiii+0x684>)
   d49fa:	f8cd 8000 	str.w	r8, [sp]
   d49fe:	f009 ffff 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4a02:	f104 0116 	add.w	r1, r4, #22
   d4a06:	4633      	mov	r3, r6
   d4a08:	462a      	mov	r2, r5
   d4a0a:	b289      	uxth	r1, r1
   d4a0c:	4816      	ldr	r0, [pc, #88]	; (d4a68 <_Z3numiiiii+0x684>)
   d4a0e:	f8cd 8000 	str.w	r8, [sp]
   d4a12:	f009 fff5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4a16:	f104 0119 	add.w	r1, r4, #25
   d4a1a:	4633      	mov	r3, r6
   d4a1c:	462a      	mov	r2, r5
   d4a1e:	b289      	uxth	r1, r1
   d4a20:	4811      	ldr	r0, [pc, #68]	; (d4a68 <_Z3numiiiii+0x684>)
   d4a22:	f8cd 8000 	str.w	r8, [sp]
   d4a26:	f009 ffeb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4a2a:	1c61      	adds	r1, r4, #1
   d4a2c:	463b      	mov	r3, r7
   d4a2e:	463a      	mov	r2, r7
   d4a30:	b289      	uxth	r1, r1
   d4a32:	480d      	ldr	r0, [pc, #52]	; (d4a68 <_Z3numiiiii+0x684>)
   d4a34:	9700      	str	r7, [sp, #0]
   d4a36:	f009 ffe3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4a3a:	1ca1      	adds	r1, r4, #2
   d4a3c:	463b      	mov	r3, r7
   d4a3e:	463a      	mov	r2, r7
   d4a40:	b289      	uxth	r1, r1
   d4a42:	4809      	ldr	r0, [pc, #36]	; (d4a68 <_Z3numiiiii+0x684>)
   d4a44:	9700      	str	r7, [sp, #0]
   d4a46:	f009 ffdb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,0,0,0);
   d4a4a:	f104 011a 	add.w	r1, r4, #26
   d4a4e:	b289      	uxth	r1, r1
   d4a50:	9700      	str	r7, [sp, #0]
   d4a52:	463b      	mov	r3, r7
   d4a54:	463a      	mov	r2, r7
   d4a56:	4804      	ldr	r0, [pc, #16]	; (d4a68 <_Z3numiiiii+0x684>)
   d4a58:	f009 ffd2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,0,0,0);
   d4a5c:	f104 011b 	add.w	r1, r4, #27
   d4a60:	e344      	b.n	d50ec <_Z3numiiiii+0xd08>
   d4a62:	bf00      	nop
   d4a64:	80000001 	.word	0x80000001
   d4a68:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 3)
   d4a6c:	2803      	cmp	r0, #3
   d4a6e:	f040 819b 	bne.w	d4da8 <_Z3numiiiii+0x9c4>
{
    if((pix/8)%2 == 1)
   d4a72:	4bcb      	ldr	r3, [pc, #812]	; (d4da0 <_Z3numiiiii+0x9bc>)
   d4a74:	f04f 0a08 	mov.w	sl, #8
   d4a78:	fb91 fafa 	sdiv	sl, r1, sl
   d4a7c:	ea0a 0303 	and.w	r3, sl, r3
   d4a80:	2b00      	cmp	r3, #0
   d4a82:	bfbe      	ittt	lt
   d4a84:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4a88:	f063 0301 	ornlt	r3, r3, #1
   d4a8c:	3301      	addlt	r3, #1
   d4a8e:	2b01      	cmp	r3, #1
   d4a90:	f040 80c6 	bne.w	d4c20 <_Z3numiiiii+0x83c>
    {
        strip.setPixelColor(pix,R,G,B);
   d4a94:	b28f      	uxth	r7, r1
   d4a96:	fa5f f882 	uxtb.w	r8, r2
   d4a9a:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4a9e:	48c1      	ldr	r0, [pc, #772]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4aa0:	f8cd b000 	str.w	fp, [sp]
   d4aa4:	fa5f f986 	uxtb.w	r9, r6
   d4aa8:	4642      	mov	r2, r8
   d4aaa:	464b      	mov	r3, r9
   d4aac:	4639      	mov	r1, r7
   d4aae:	f009 ffa7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4ab2:	1c79      	adds	r1, r7, #1
   d4ab4:	4642      	mov	r2, r8
   d4ab6:	464b      	mov	r3, r9
   d4ab8:	b289      	uxth	r1, r1
   d4aba:	48ba      	ldr	r0, [pc, #744]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4abc:	f8cd b000 	str.w	fp, [sp]
   d4ac0:	f009 ff9e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4ac4:	f107 0110 	add.w	r1, r7, #16
   d4ac8:	4642      	mov	r2, r8
   d4aca:	464b      	mov	r3, r9
   d4acc:	b289      	uxth	r1, r1
   d4ace:	48b5      	ldr	r0, [pc, #724]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4ad0:	f8cd b000 	str.w	fp, [sp]
   d4ad4:	f009 ff94 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4ad8:	f107 0112 	add.w	r1, r7, #18
   d4adc:	4642      	mov	r2, r8
   d4ade:	464b      	mov	r3, r9
   d4ae0:	b289      	uxth	r1, r1
   d4ae2:	48b0      	ldr	r0, [pc, #704]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4ae4:	f8cd b000 	str.w	fp, [sp]
   d4ae8:	f009 ff8a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4aec:	f107 0113 	add.w	r1, r7, #19
   d4af0:	4642      	mov	r2, r8
   d4af2:	464b      	mov	r3, r9
   d4af4:	b289      	uxth	r1, r1
   d4af6:	48ab      	ldr	r0, [pc, #684]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4af8:	f8cd b000 	str.w	fp, [sp]
   d4afc:	f009 ff80 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d4b00:	f107 0115 	add.w	r1, r7, #21
   d4b04:	4642      	mov	r2, r8
   d4b06:	464b      	mov	r3, r9
   d4b08:	b289      	uxth	r1, r1
   d4b0a:	48a6      	ldr	r0, [pc, #664]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b0c:	f8cd b000 	str.w	fp, [sp]
   d4b10:	f009 ff76 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4b14:	f107 0116 	add.w	r1, r7, #22
   d4b18:	4642      	mov	r2, r8
   d4b1a:	464b      	mov	r3, r9
   d4b1c:	b289      	uxth	r1, r1
   d4b1e:	48a1      	ldr	r0, [pc, #644]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b20:	f8cd b000 	str.w	fp, [sp]
   d4b24:	f009 ff6c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4b28:	1ef9      	subs	r1, r7, #3
   d4b2a:	4642      	mov	r2, r8
   d4b2c:	464b      	mov	r3, r9
   d4b2e:	b289      	uxth	r1, r1
   d4b30:	489c      	ldr	r0, [pc, #624]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b32:	f8cd b000 	str.w	fp, [sp]
   d4b36:	f009 ff63 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d4b3a:	1fb9      	subs	r1, r7, #6
   d4b3c:	4642      	mov	r2, r8
   d4b3e:	464b      	mov	r3, r9
   d4b40:	b289      	uxth	r1, r1
   d4b42:	4898      	ldr	r0, [pc, #608]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b44:	f8cd b000 	str.w	fp, [sp]
   d4b48:	f009 ff5a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4b4c:	1d39      	adds	r1, r7, #4
   d4b4e:	4642      	mov	r2, r8
   d4b50:	464b      	mov	r3, r9
   d4b52:	b289      	uxth	r1, r1
   d4b54:	4893      	ldr	r0, [pc, #588]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b56:	f8cd b000 	str.w	fp, [sp]
   d4b5a:	f009 ff51 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d4b5e:	1df9      	adds	r1, r7, #7
   d4b60:	4642      	mov	r2, r8
   d4b62:	464b      	mov	r3, r9
   d4b64:	b289      	uxth	r1, r1
   d4b66:	488f      	ldr	r0, [pc, #572]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b68:	f8cd b000 	str.w	fp, [sp]
   d4b6c:	f009 ff48 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4b70:	f107 010d 	add.w	r1, r7, #13
   d4b74:	4642      	mov	r2, r8
   d4b76:	464b      	mov	r3, r9
   d4b78:	b289      	uxth	r1, r1
   d4b7a:	488a      	ldr	r0, [pc, #552]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b7c:	f8cd b000 	str.w	fp, [sp]
   d4b80:	f009 ff3e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d4b84:	f107 010a 	add.w	r1, r7, #10
   d4b88:	4642      	mov	r2, r8
   d4b8a:	464b      	mov	r3, r9
   d4b8c:	b289      	uxth	r1, r1
   d4b8e:	4885      	ldr	r0, [pc, #532]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4b90:	f8cd b000 	str.w	fp, [sp]
   d4b94:	f009 ff34 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d4b98:	f107 0111 	add.w	r1, r7, #17
   d4b9c:	4642      	mov	r2, r8
   d4b9e:	464b      	mov	r3, r9
   d4ba0:	b289      	uxth	r1, r1
   d4ba2:	4880      	ldr	r0, [pc, #512]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4ba4:	f8cd b000 	str.w	fp, [sp]
   d4ba8:	f009 ff2a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4bac:	f107 0117 	add.w	r1, r7, #23
   d4bb0:	4642      	mov	r2, r8
   d4bb2:	464b      	mov	r3, r9
   d4bb4:	b289      	uxth	r1, r1
   d4bb6:	487b      	ldr	r0, [pc, #492]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4bb8:	f8cd b000 	str.w	fp, [sp]
   d4bbc:	f009 ff20 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4bc0:	f107 0114 	add.w	r1, r7, #20
   d4bc4:	4642      	mov	r2, r8
   d4bc6:	464b      	mov	r3, r9
   d4bc8:	b289      	uxth	r1, r1
   d4bca:	4876      	ldr	r0, [pc, #472]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4bcc:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d4bd0:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+7,R,G,B);
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+17,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
   d4bd4:	f009 ff14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d4bd8:	1e79      	subs	r1, r7, #1
   d4bda:	4643      	mov	r3, r8
   d4bdc:	4642      	mov	r2, r8
   d4bde:	b289      	uxth	r1, r1
   d4be0:	4870      	ldr	r0, [pc, #448]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4be2:	f8cd 8000 	str.w	r8, [sp]
   d4be6:	f009 ff0b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d4bea:	1eb9      	subs	r1, r7, #2
   d4bec:	4643      	mov	r3, r8
   d4bee:	4642      	mov	r2, r8
   d4bf0:	b289      	uxth	r1, r1
   d4bf2:	486c      	ldr	r0, [pc, #432]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4bf4:	f8cd 8000 	str.w	r8, [sp]
   d4bf8:	f009 ff02 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d4bfc:	1f39      	subs	r1, r7, #4
   d4bfe:	4643      	mov	r3, r8
   d4c00:	4642      	mov	r2, r8
   d4c02:	b289      	uxth	r1, r1
   d4c04:	4867      	ldr	r0, [pc, #412]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c06:	f8cd 8000 	str.w	r8, [sp]
   d4c0a:	f009 fef9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4c0e:	1f79      	subs	r1, r7, #5
   d4c10:	f8cd 8000 	str.w	r8, [sp]
   d4c14:	4643      	mov	r3, r8
   d4c16:	4642      	mov	r2, r8
   d4c18:	b289      	uxth	r1, r1
   d4c1a:	4862      	ldr	r0, [pc, #392]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c1c:	f009 fef0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4c20:	f01a 0701 	ands.w	r7, sl, #1
   d4c24:	f041 840a 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4c28:	b2a4      	uxth	r4, r4
   d4c2a:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4c2e:	485d      	ldr	r0, [pc, #372]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c30:	f8cd 8000 	str.w	r8, [sp]
   d4c34:	b2ed      	uxtb	r5, r5
   d4c36:	b2f6      	uxtb	r6, r6
   d4c38:	4633      	mov	r3, r6
   d4c3a:	462a      	mov	r2, r5
   d4c3c:	4621      	mov	r1, r4
   d4c3e:	f009 fedf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d4c42:	f104 010f 	add.w	r1, r4, #15
   d4c46:	4633      	mov	r3, r6
   d4c48:	462a      	mov	r2, r5
   d4c4a:	b289      	uxth	r1, r1
   d4c4c:	4855      	ldr	r0, [pc, #340]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c4e:	f8cd 8000 	str.w	r8, [sp]
   d4c52:	f009 fed5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d4c56:	f104 0110 	add.w	r1, r4, #16
   d4c5a:	4633      	mov	r3, r6
   d4c5c:	462a      	mov	r2, r5
   d4c5e:	b289      	uxth	r1, r1
   d4c60:	4850      	ldr	r0, [pc, #320]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c62:	f8cd 8000 	str.w	r8, [sp]
   d4c66:	f009 fecb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d4c6a:	f104 011e 	add.w	r1, r4, #30
   d4c6e:	4633      	mov	r3, r6
   d4c70:	462a      	mov	r2, r5
   d4c72:	b289      	uxth	r1, r1
   d4c74:	484b      	ldr	r0, [pc, #300]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c76:	f8cd 8000 	str.w	r8, [sp]
   d4c7a:	f009 fec1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d4c7e:	f104 011d 	add.w	r1, r4, #29
   d4c82:	4633      	mov	r3, r6
   d4c84:	462a      	mov	r2, r5
   d4c86:	b289      	uxth	r1, r1
   d4c88:	4846      	ldr	r0, [pc, #280]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c8a:	f8cd 8000 	str.w	r8, [sp]
   d4c8e:	f009 feb7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4c92:	1ce1      	adds	r1, r4, #3
   d4c94:	4633      	mov	r3, r6
   d4c96:	462a      	mov	r2, r5
   d4c98:	b289      	uxth	r1, r1
   d4c9a:	4842      	ldr	r0, [pc, #264]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4c9c:	f8cd 8000 	str.w	r8, [sp]
   d4ca0:	f009 feae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4ca4:	f104 010c 	add.w	r1, r4, #12
   d4ca8:	4633      	mov	r3, r6
   d4caa:	462a      	mov	r2, r5
   d4cac:	b289      	uxth	r1, r1
   d4cae:	483d      	ldr	r0, [pc, #244]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4cb0:	f8cd 8000 	str.w	r8, [sp]
   d4cb4:	f009 fea4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4cb8:	f104 0113 	add.w	r1, r4, #19
   d4cbc:	4633      	mov	r3, r6
   d4cbe:	462a      	mov	r2, r5
   d4cc0:	b289      	uxth	r1, r1
   d4cc2:	4838      	ldr	r0, [pc, #224]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4cc4:	f8cd 8000 	str.w	r8, [sp]
   d4cc8:	f009 fe9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d4ccc:	f104 011b 	add.w	r1, r4, #27
   d4cd0:	4633      	mov	r3, r6
   d4cd2:	462a      	mov	r2, r5
   d4cd4:	b289      	uxth	r1, r1
   d4cd6:	4833      	ldr	r0, [pc, #204]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4cd8:	f8cd 8000 	str.w	r8, [sp]
   d4cdc:	f009 fe90 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d4ce0:	f104 011a 	add.w	r1, r4, #26
   d4ce4:	4633      	mov	r3, r6
   d4ce6:	462a      	mov	r2, r5
   d4ce8:	b289      	uxth	r1, r1
   d4cea:	482e      	ldr	r0, [pc, #184]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4cec:	f8cd 8000 	str.w	r8, [sp]
   d4cf0:	f009 fe86 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d4cf4:	1da1      	adds	r1, r4, #6
   d4cf6:	4633      	mov	r3, r6
   d4cf8:	462a      	mov	r2, r5
   d4cfa:	b289      	uxth	r1, r1
   d4cfc:	4829      	ldr	r0, [pc, #164]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4cfe:	f8cd 8000 	str.w	r8, [sp]
   d4d02:	f009 fe7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d4d06:	f104 0109 	add.w	r1, r4, #9
   d4d0a:	4633      	mov	r3, r6
   d4d0c:	462a      	mov	r2, r5
   d4d0e:	b289      	uxth	r1, r1
   d4d10:	4824      	ldr	r0, [pc, #144]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d12:	f8cd 8000 	str.w	r8, [sp]
   d4d16:	f009 fe73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4d1a:	f104 0116 	add.w	r1, r4, #22
   d4d1e:	4633      	mov	r3, r6
   d4d20:	462a      	mov	r2, r5
   d4d22:	b289      	uxth	r1, r1
   d4d24:	481f      	ldr	r0, [pc, #124]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d26:	f8cd 8000 	str.w	r8, [sp]
   d4d2a:	f009 fe69 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4d2e:	f104 011f 	add.w	r1, r4, #31
   d4d32:	4633      	mov	r3, r6
   d4d34:	462a      	mov	r2, r5
   d4d36:	b289      	uxth	r1, r1
   d4d38:	481a      	ldr	r0, [pc, #104]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d3a:	f8cd 8000 	str.w	r8, [sp]
   d4d3e:	f009 fe5f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d4d42:	f104 0119 	add.w	r1, r4, #25
   d4d46:	4633      	mov	r3, r6
   d4d48:	462a      	mov	r2, r5
   d4d4a:	b289      	uxth	r1, r1
   d4d4c:	4815      	ldr	r0, [pc, #84]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d4e:	f8cd 8000 	str.w	r8, [sp]
   d4d52:	f009 fe55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d4d56:	f104 011c 	add.w	r1, r4, #28
   d4d5a:	4633      	mov	r3, r6
   d4d5c:	462a      	mov	r2, r5
   d4d5e:	b289      	uxth	r1, r1
   d4d60:	4810      	ldr	r0, [pc, #64]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d62:	f8cd 8000 	str.w	r8, [sp]
   d4d66:	f009 fe4b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4d6a:	1c61      	adds	r1, r4, #1
   d4d6c:	463b      	mov	r3, r7
   d4d6e:	463a      	mov	r2, r7
   d4d70:	b289      	uxth	r1, r1
   d4d72:	480c      	ldr	r0, [pc, #48]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d74:	9700      	str	r7, [sp, #0]
   d4d76:	f009 fe43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d4d7a:	1ca1      	adds	r1, r4, #2
   d4d7c:	463b      	mov	r3, r7
   d4d7e:	463a      	mov	r2, r7
   d4d80:	b289      	uxth	r1, r1
   d4d82:	4808      	ldr	r0, [pc, #32]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d84:	9700      	str	r7, [sp, #0]
   d4d86:	f009 fe3b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d4d8a:	1d21      	adds	r1, r4, #4
   d4d8c:	b289      	uxth	r1, r1
   d4d8e:	9700      	str	r7, [sp, #0]
   d4d90:	463b      	mov	r3, r7
   d4d92:	463a      	mov	r2, r7
   d4d94:	4803      	ldr	r0, [pc, #12]	; (d4da4 <_Z3numiiiii+0x9c0>)
   d4d96:	f009 fe33 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d4d9a:	1d61      	adds	r1, r4, #5
   d4d9c:	e1a6      	b.n	d50ec <_Z3numiiiii+0xd08>
   d4d9e:	bf00      	nop
   d4da0:	80000001 	.word	0x80000001
   d4da4:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 4)
   d4da8:	2804      	cmp	r0, #4
   d4daa:	f040 81a8 	bne.w	d50fe <_Z3numiiiii+0xd1a>
{
    if((pix/8)%2 == 1)
   d4dae:	4bcd      	ldr	r3, [pc, #820]	; (d50e4 <_Z3numiiiii+0xd00>)
   d4db0:	2708      	movs	r7, #8
   d4db2:	fb94 f7f7 	sdiv	r7, r4, r7
   d4db6:	403b      	ands	r3, r7
   d4db8:	2b00      	cmp	r3, #0
   d4dba:	bfbe      	ittt	lt
   d4dbc:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d4dc0:	f063 0301 	ornlt	r3, r3, #1
   d4dc4:	3301      	addlt	r3, #1
   d4dc6:	2b01      	cmp	r3, #1
   d4dc8:	f040 80d0 	bne.w	d4f6c <_Z3numiiiii+0xb88>
    {
        strip.setPixelColor(pix,R,G,B);
   d4dcc:	fa1f f884 	uxth.w	r8, r4
   d4dd0:	fa5f f985 	uxtb.w	r9, r5
   d4dd4:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d4dd8:	48c3      	ldr	r0, [pc, #780]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4dda:	f8cd b000 	str.w	fp, [sp]
   d4dde:	fa5f fa86 	uxtb.w	sl, r6
   d4de2:	464a      	mov	r2, r9
   d4de4:	4653      	mov	r3, sl
   d4de6:	4641      	mov	r1, r8
   d4de8:	f009 fe0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d4dec:	f108 31ff 	add.w	r1, r8, #4294967295
   d4df0:	464a      	mov	r2, r9
   d4df2:	4653      	mov	r3, sl
   d4df4:	b289      	uxth	r1, r1
   d4df6:	48bc      	ldr	r0, [pc, #752]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4df8:	f8cd b000 	str.w	fp, [sp]
   d4dfc:	f009 fe00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d4e00:	f1a8 0102 	sub.w	r1, r8, #2
   d4e04:	464a      	mov	r2, r9
   d4e06:	4653      	mov	r3, sl
   d4e08:	b289      	uxth	r1, r1
   d4e0a:	48b7      	ldr	r0, [pc, #732]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e0c:	f8cd b000 	str.w	fp, [sp]
   d4e10:	f009 fdf6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d4e14:	f1a8 0103 	sub.w	r1, r8, #3
   d4e18:	464a      	mov	r2, r9
   d4e1a:	4653      	mov	r3, sl
   d4e1c:	b289      	uxth	r1, r1
   d4e1e:	48b2      	ldr	r0, [pc, #712]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e20:	f8cd b000 	str.w	fp, [sp]
   d4e24:	f009 fdec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d4e28:	f108 0104 	add.w	r1, r8, #4
   d4e2c:	464a      	mov	r2, r9
   d4e2e:	4653      	mov	r3, sl
   d4e30:	b289      	uxth	r1, r1
   d4e32:	48ad      	ldr	r0, [pc, #692]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e34:	f8cd b000 	str.w	fp, [sp]
   d4e38:	f009 fde2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d4e3c:	f108 010d 	add.w	r1, r8, #13
   d4e40:	464a      	mov	r2, r9
   d4e42:	4653      	mov	r3, sl
   d4e44:	b289      	uxth	r1, r1
   d4e46:	48a8      	ldr	r0, [pc, #672]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e48:	f8cd b000 	str.w	fp, [sp]
   d4e4c:	f009 fdd8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d4e50:	f108 0111 	add.w	r1, r8, #17
   d4e54:	464a      	mov	r2, r9
   d4e56:	4653      	mov	r3, sl
   d4e58:	b289      	uxth	r1, r1
   d4e5a:	48a3      	ldr	r0, [pc, #652]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e5c:	f8cd b000 	str.w	fp, [sp]
   d4e60:	f009 fdce 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d4e64:	f108 0112 	add.w	r1, r8, #18
   d4e68:	464a      	mov	r2, r9
   d4e6a:	4653      	mov	r3, sl
   d4e6c:	b289      	uxth	r1, r1
   d4e6e:	489e      	ldr	r0, [pc, #632]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e70:	f8cd b000 	str.w	fp, [sp]
   d4e74:	f009 fdc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4e78:	f108 0113 	add.w	r1, r8, #19
   d4e7c:	464a      	mov	r2, r9
   d4e7e:	4653      	mov	r3, sl
   d4e80:	b289      	uxth	r1, r1
   d4e82:	4899      	ldr	r0, [pc, #612]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e84:	f8cd b000 	str.w	fp, [sp]
   d4e88:	f009 fdba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d4e8c:	f108 0114 	add.w	r1, r8, #20
   d4e90:	464a      	mov	r2, r9
   d4e92:	4653      	mov	r3, sl
   d4e94:	b289      	uxth	r1, r1
   d4e96:	4894      	ldr	r0, [pc, #592]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4e98:	f8cd b000 	str.w	fp, [sp]
   d4e9c:	f009 fdb0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d4ea0:	f108 0115 	add.w	r1, r8, #21
   d4ea4:	464a      	mov	r2, r9
   d4ea6:	4653      	mov	r3, sl
   d4ea8:	b289      	uxth	r1, r1
   d4eaa:	488f      	ldr	r0, [pc, #572]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4eac:	f8cd b000 	str.w	fp, [sp]
   d4eb0:	f009 fda6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d4eb4:	f108 0116 	add.w	r1, r8, #22
   d4eb8:	464a      	mov	r2, r9
   d4eba:	4653      	mov	r3, sl
   d4ebc:	b289      	uxth	r1, r1
   d4ebe:	488a      	ldr	r0, [pc, #552]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4ec0:	f8cd b000 	str.w	fp, [sp]
   d4ec4:	f009 fd9c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d4ec8:	f108 0117 	add.w	r1, r8, #23
   d4ecc:	464a      	mov	r2, r9
   d4ece:	4653      	mov	r3, sl
   d4ed0:	b289      	uxth	r1, r1
   d4ed2:	4885      	ldr	r0, [pc, #532]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4ed4:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix+1,0,0,0);
   d4ed8:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
   d4edc:	f009 fd90 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d4ee0:	f108 0101 	add.w	r1, r8, #1
   d4ee4:	464b      	mov	r3, r9
   d4ee6:	464a      	mov	r2, r9
   d4ee8:	b289      	uxth	r1, r1
   d4eea:	487f      	ldr	r0, [pc, #508]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4eec:	f8cd 9000 	str.w	r9, [sp]
   d4ef0:	f009 fd86 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d4ef4:	f108 0110 	add.w	r1, r8, #16
   d4ef8:	464b      	mov	r3, r9
   d4efa:	464a      	mov	r2, r9
   d4efc:	b289      	uxth	r1, r1
   d4efe:	487a      	ldr	r0, [pc, #488]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f00:	f8cd 9000 	str.w	r9, [sp]
   d4f04:	f009 fd7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d4f08:	f1a8 0104 	sub.w	r1, r8, #4
   d4f0c:	464b      	mov	r3, r9
   d4f0e:	464a      	mov	r2, r9
   d4f10:	b289      	uxth	r1, r1
   d4f12:	4875      	ldr	r0, [pc, #468]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f14:	f8cd 9000 	str.w	r9, [sp]
   d4f18:	f009 fd72 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d4f1c:	f1a8 0105 	sub.w	r1, r8, #5
   d4f20:	464b      	mov	r3, r9
   d4f22:	464a      	mov	r2, r9
   d4f24:	b289      	uxth	r1, r1
   d4f26:	4870      	ldr	r0, [pc, #448]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f28:	f8cd 9000 	str.w	r9, [sp]
   d4f2c:	f009 fd68 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d4f30:	f1a8 0106 	sub.w	r1, r8, #6
   d4f34:	464b      	mov	r3, r9
   d4f36:	464a      	mov	r2, r9
   d4f38:	b289      	uxth	r1, r1
   d4f3a:	486b      	ldr	r0, [pc, #428]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f3c:	f8cd 9000 	str.w	r9, [sp]
   d4f40:	f009 fd5e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d4f44:	f108 0107 	add.w	r1, r8, #7
   d4f48:	464b      	mov	r3, r9
   d4f4a:	464a      	mov	r2, r9
   d4f4c:	b289      	uxth	r1, r1
   d4f4e:	4866      	ldr	r0, [pc, #408]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f50:	f8cd 9000 	str.w	r9, [sp]
   d4f54:	f009 fd54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d4f58:	f108 010a 	add.w	r1, r8, #10
   d4f5c:	f8cd 9000 	str.w	r9, [sp]
   d4f60:	464b      	mov	r3, r9
   d4f62:	464a      	mov	r2, r9
   d4f64:	b289      	uxth	r1, r1
   d4f66:	4860      	ldr	r0, [pc, #384]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f68:	f009 fd4a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d4f6c:	f017 0701 	ands.w	r7, r7, #1
   d4f70:	f041 8264 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d4f74:	b2a4      	uxth	r4, r4
   d4f76:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d4f7a:	485b      	ldr	r0, [pc, #364]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f7c:	f8cd 8000 	str.w	r8, [sp]
   d4f80:	b2ed      	uxtb	r5, r5
   d4f82:	b2f6      	uxtb	r6, r6
   d4f84:	4633      	mov	r3, r6
   d4f86:	462a      	mov	r2, r5
   d4f88:	4621      	mov	r1, r4
   d4f8a:	f009 fd39 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d4f8e:	1c61      	adds	r1, r4, #1
   d4f90:	4633      	mov	r3, r6
   d4f92:	462a      	mov	r2, r5
   d4f94:	b289      	uxth	r1, r1
   d4f96:	4854      	ldr	r0, [pc, #336]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4f98:	f8cd 8000 	str.w	r8, [sp]
   d4f9c:	f009 fd30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d4fa0:	1ca1      	adds	r1, r4, #2
   d4fa2:	4633      	mov	r3, r6
   d4fa4:	462a      	mov	r2, r5
   d4fa6:	b289      	uxth	r1, r1
   d4fa8:	484f      	ldr	r0, [pc, #316]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4faa:	f8cd 8000 	str.w	r8, [sp]
   d4fae:	f009 fd27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d4fb2:	1ce1      	adds	r1, r4, #3
   d4fb4:	4633      	mov	r3, r6
   d4fb6:	462a      	mov	r2, r5
   d4fb8:	b289      	uxth	r1, r1
   d4fba:	484b      	ldr	r0, [pc, #300]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4fbc:	f8cd 8000 	str.w	r8, [sp]
   d4fc0:	f009 fd1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d4fc4:	f104 010c 	add.w	r1, r4, #12
   d4fc8:	4633      	mov	r3, r6
   d4fca:	462a      	mov	r2, r5
   d4fcc:	b289      	uxth	r1, r1
   d4fce:	4846      	ldr	r0, [pc, #280]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4fd0:	f8cd 8000 	str.w	r8, [sp]
   d4fd4:	f009 fd14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d4fd8:	f104 0113 	add.w	r1, r4, #19
   d4fdc:	4633      	mov	r3, r6
   d4fde:	462a      	mov	r2, r5
   d4fe0:	b289      	uxth	r1, r1
   d4fe2:	4841      	ldr	r0, [pc, #260]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4fe4:	f8cd 8000 	str.w	r8, [sp]
   d4fe8:	f009 fd0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d4fec:	f104 011f 	add.w	r1, r4, #31
   d4ff0:	4633      	mov	r3, r6
   d4ff2:	462a      	mov	r2, r5
   d4ff4:	b289      	uxth	r1, r1
   d4ff6:	483c      	ldr	r0, [pc, #240]	; (d50e8 <_Z3numiiiii+0xd04>)
   d4ff8:	f8cd 8000 	str.w	r8, [sp]
   d4ffc:	f009 fd00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d5000:	f104 011e 	add.w	r1, r4, #30
   d5004:	4633      	mov	r3, r6
   d5006:	462a      	mov	r2, r5
   d5008:	b289      	uxth	r1, r1
   d500a:	4837      	ldr	r0, [pc, #220]	; (d50e8 <_Z3numiiiii+0xd04>)
   d500c:	f8cd 8000 	str.w	r8, [sp]
   d5010:	f009 fcf6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5014:	f104 011d 	add.w	r1, r4, #29
   d5018:	4633      	mov	r3, r6
   d501a:	462a      	mov	r2, r5
   d501c:	b289      	uxth	r1, r1
   d501e:	4832      	ldr	r0, [pc, #200]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5020:	f8cd 8000 	str.w	r8, [sp]
   d5024:	f009 fcec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5028:	f104 011c 	add.w	r1, r4, #28
   d502c:	4633      	mov	r3, r6
   d502e:	462a      	mov	r2, r5
   d5030:	b289      	uxth	r1, r1
   d5032:	482d      	ldr	r0, [pc, #180]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5034:	f8cd 8000 	str.w	r8, [sp]
   d5038:	f009 fce2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d503c:	f104 011b 	add.w	r1, r4, #27
   d5040:	4633      	mov	r3, r6
   d5042:	462a      	mov	r2, r5
   d5044:	b289      	uxth	r1, r1
   d5046:	4828      	ldr	r0, [pc, #160]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5048:	f8cd 8000 	str.w	r8, [sp]
   d504c:	f009 fcd8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5050:	f104 011a 	add.w	r1, r4, #26
   d5054:	4633      	mov	r3, r6
   d5056:	462a      	mov	r2, r5
   d5058:	b289      	uxth	r1, r1
   d505a:	4823      	ldr	r0, [pc, #140]	; (d50e8 <_Z3numiiiii+0xd04>)
   d505c:	f8cd 8000 	str.w	r8, [sp]
   d5060:	f009 fcce 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5064:	f104 0119 	add.w	r1, r4, #25
   d5068:	4633      	mov	r3, r6
   d506a:	462a      	mov	r2, r5
   d506c:	b289      	uxth	r1, r1
   d506e:	481e      	ldr	r0, [pc, #120]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5070:	f8cd 8000 	str.w	r8, [sp]
   d5074:	f009 fcc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5078:	1d21      	adds	r1, r4, #4
   d507a:	463b      	mov	r3, r7
   d507c:	463a      	mov	r2, r7
   d507e:	b289      	uxth	r1, r1
   d5080:	4819      	ldr	r0, [pc, #100]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5082:	9700      	str	r7, [sp, #0]
   d5084:	f009 fcbc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5088:	1d61      	adds	r1, r4, #5
   d508a:	463b      	mov	r3, r7
   d508c:	463a      	mov	r2, r7
   d508e:	b289      	uxth	r1, r1
   d5090:	4815      	ldr	r0, [pc, #84]	; (d50e8 <_Z3numiiiii+0xd04>)
   d5092:	9700      	str	r7, [sp, #0]
   d5094:	f009 fcb4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5098:	1da1      	adds	r1, r4, #6
   d509a:	463b      	mov	r3, r7
   d509c:	463a      	mov	r2, r7
   d509e:	b289      	uxth	r1, r1
   d50a0:	4811      	ldr	r0, [pc, #68]	; (d50e8 <_Z3numiiiii+0xd04>)
   d50a2:	9700      	str	r7, [sp, #0]
   d50a4:	f009 fcac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d50a8:	f104 0109 	add.w	r1, r4, #9
   d50ac:	463b      	mov	r3, r7
   d50ae:	463a      	mov	r2, r7
   d50b0:	b289      	uxth	r1, r1
   d50b2:	480d      	ldr	r0, [pc, #52]	; (d50e8 <_Z3numiiiii+0xd04>)
   d50b4:	9700      	str	r7, [sp, #0]
   d50b6:	f009 fca3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d50ba:	f104 0116 	add.w	r1, r4, #22
   d50be:	463b      	mov	r3, r7
   d50c0:	463a      	mov	r2, r7
   d50c2:	b289      	uxth	r1, r1
   d50c4:	4808      	ldr	r0, [pc, #32]	; (d50e8 <_Z3numiiiii+0xd04>)
   d50c6:	9700      	str	r7, [sp, #0]
   d50c8:	f009 fc9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,0,0,0);
   d50cc:	f104 010f 	add.w	r1, r4, #15
   d50d0:	b289      	uxth	r1, r1
   d50d2:	9700      	str	r7, [sp, #0]
   d50d4:	463b      	mov	r3, r7
   d50d6:	463a      	mov	r2, r7
   d50d8:	4803      	ldr	r0, [pc, #12]	; (d50e8 <_Z3numiiiii+0xd04>)
   d50da:	f009 fc91 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,0,0,0);
   d50de:	f104 0110 	add.w	r1, r4, #16
   d50e2:	e003      	b.n	d50ec <_Z3numiiiii+0xd08>
   d50e4:	80000001 	.word	0x80000001
   d50e8:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+6,R,G,B);
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
        strip.setPixelColor(pix+29,0,0,0);
        strip.setPixelColor(pix+30,0,0,0);
   d50ec:	9700      	str	r7, [sp, #0]
   d50ee:	463b      	mov	r3, r7
   d50f0:	463a      	mov	r2, r7
   d50f2:	b289      	uxth	r1, r1
   d50f4:	48ce      	ldr	r0, [pc, #824]	; (d5430 <_Z3numiiiii+0x104c>)
   d50f6:	f009 fc83 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d50fa:	f001 b99f 	b.w	d643c <_Z3numiiiii+0x2058>
        strip.setPixelColor(pix+16,0,0,0);
        
        
    }
}
if(num == 5)
   d50fe:	2805      	cmp	r0, #5
   d5100:	f040 819a 	bne.w	d5438 <_Z3numiiiii+0x1054>
{
    if((pix/8)%2 == 1)
   d5104:	4bcb      	ldr	r3, [pc, #812]	; (d5434 <_Z3numiiiii+0x1050>)
   d5106:	f04f 0a08 	mov.w	sl, #8
   d510a:	fb94 fafa 	sdiv	sl, r4, sl
   d510e:	ea0a 0303 	and.w	r3, sl, r3
   d5112:	2b00      	cmp	r3, #0
   d5114:	bfbe      	ittt	lt
   d5116:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d511a:	f063 0301 	ornlt	r3, r3, #1
   d511e:	3301      	addlt	r3, #1
   d5120:	2b01      	cmp	r3, #1
   d5122:	f040 80c6 	bne.w	d52b2 <_Z3numiiiii+0xece>
    {
        strip.setPixelColor(pix,R,G,B);
   d5126:	b2a7      	uxth	r7, r4
   d5128:	fa5f f885 	uxtb.w	r8, r5
   d512c:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d5130:	48bf      	ldr	r0, [pc, #764]	; (d5430 <_Z3numiiiii+0x104c>)
   d5132:	f8cd b000 	str.w	fp, [sp]
   d5136:	fa5f f986 	uxtb.w	r9, r6
   d513a:	4642      	mov	r2, r8
   d513c:	464b      	mov	r3, r9
   d513e:	4639      	mov	r1, r7
   d5140:	f009 fc5e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5144:	1c79      	adds	r1, r7, #1
   d5146:	4642      	mov	r2, r8
   d5148:	464b      	mov	r3, r9
   d514a:	b289      	uxth	r1, r1
   d514c:	48b8      	ldr	r0, [pc, #736]	; (d5430 <_Z3numiiiii+0x104c>)
   d514e:	f8cd b000 	str.w	fp, [sp]
   d5152:	f009 fc55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5156:	f107 0110 	add.w	r1, r7, #16
   d515a:	4642      	mov	r2, r8
   d515c:	464b      	mov	r3, r9
   d515e:	b289      	uxth	r1, r1
   d5160:	48b3      	ldr	r0, [pc, #716]	; (d5430 <_Z3numiiiii+0x104c>)
   d5162:	f8cd b000 	str.w	fp, [sp]
   d5166:	f009 fc4b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d516a:	f107 0111 	add.w	r1, r7, #17
   d516e:	4642      	mov	r2, r8
   d5170:	464b      	mov	r3, r9
   d5172:	b289      	uxth	r1, r1
   d5174:	48ae      	ldr	r0, [pc, #696]	; (d5430 <_Z3numiiiii+0x104c>)
   d5176:	f8cd b000 	str.w	fp, [sp]
   d517a:	f009 fc41 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d517e:	1e79      	subs	r1, r7, #1
   d5180:	4642      	mov	r2, r8
   d5182:	464b      	mov	r3, r9
   d5184:	b289      	uxth	r1, r1
   d5186:	48aa      	ldr	r0, [pc, #680]	; (d5430 <_Z3numiiiii+0x104c>)
   d5188:	f8cd b000 	str.w	fp, [sp]
   d518c:	f009 fc38 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5190:	1eb9      	subs	r1, r7, #2
   d5192:	4642      	mov	r2, r8
   d5194:	464b      	mov	r3, r9
   d5196:	b289      	uxth	r1, r1
   d5198:	48a5      	ldr	r0, [pc, #660]	; (d5430 <_Z3numiiiii+0x104c>)
   d519a:	f8cd b000 	str.w	fp, [sp]
   d519e:	f009 fc2f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d51a2:	1ef9      	subs	r1, r7, #3
   d51a4:	4642      	mov	r2, r8
   d51a6:	464b      	mov	r3, r9
   d51a8:	b289      	uxth	r1, r1
   d51aa:	48a1      	ldr	r0, [pc, #644]	; (d5430 <_Z3numiiiii+0x104c>)
   d51ac:	f8cd b000 	str.w	fp, [sp]
   d51b0:	f009 fc26 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d51b4:	1fb9      	subs	r1, r7, #6
   d51b6:	4642      	mov	r2, r8
   d51b8:	464b      	mov	r3, r9
   d51ba:	b289      	uxth	r1, r1
   d51bc:	489c      	ldr	r0, [pc, #624]	; (d5430 <_Z3numiiiii+0x104c>)
   d51be:	f8cd b000 	str.w	fp, [sp]
   d51c2:	f009 fc1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d51c6:	1d39      	adds	r1, r7, #4
   d51c8:	4642      	mov	r2, r8
   d51ca:	464b      	mov	r3, r9
   d51cc:	b289      	uxth	r1, r1
   d51ce:	4898      	ldr	r0, [pc, #608]	; (d5430 <_Z3numiiiii+0x104c>)
   d51d0:	f8cd b000 	str.w	fp, [sp]
   d51d4:	f009 fc14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d51d8:	f107 010d 	add.w	r1, r7, #13
   d51dc:	4642      	mov	r2, r8
   d51de:	464b      	mov	r3, r9
   d51e0:	b289      	uxth	r1, r1
   d51e2:	4893      	ldr	r0, [pc, #588]	; (d5430 <_Z3numiiiii+0x104c>)
   d51e4:	f8cd b000 	str.w	fp, [sp]
   d51e8:	f009 fc0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d51ec:	f107 0114 	add.w	r1, r7, #20
   d51f0:	4642      	mov	r2, r8
   d51f2:	464b      	mov	r3, r9
   d51f4:	b289      	uxth	r1, r1
   d51f6:	488e      	ldr	r0, [pc, #568]	; (d5430 <_Z3numiiiii+0x104c>)
   d51f8:	f8cd b000 	str.w	fp, [sp]
   d51fc:	f009 fc00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5200:	f107 0115 	add.w	r1, r7, #21
   d5204:	4642      	mov	r2, r8
   d5206:	464b      	mov	r3, r9
   d5208:	b289      	uxth	r1, r1
   d520a:	4889      	ldr	r0, [pc, #548]	; (d5430 <_Z3numiiiii+0x104c>)
   d520c:	f8cd b000 	str.w	fp, [sp]
   d5210:	f009 fbf6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5214:	f107 0116 	add.w	r1, r7, #22
   d5218:	4642      	mov	r2, r8
   d521a:	464b      	mov	r3, r9
   d521c:	b289      	uxth	r1, r1
   d521e:	4884      	ldr	r0, [pc, #528]	; (d5430 <_Z3numiiiii+0x104c>)
   d5220:	f8cd b000 	str.w	fp, [sp]
   d5224:	f009 fbec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5228:	f107 0117 	add.w	r1, r7, #23
   d522c:	4642      	mov	r2, r8
   d522e:	464b      	mov	r3, r9
   d5230:	b289      	uxth	r1, r1
   d5232:	487f      	ldr	r0, [pc, #508]	; (d5430 <_Z3numiiiii+0x104c>)
   d5234:	f8cd b000 	str.w	fp, [sp]
   d5238:	f009 fbe2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d523c:	f107 010a 	add.w	r1, r7, #10
   d5240:	4642      	mov	r2, r8
   d5242:	464b      	mov	r3, r9
   d5244:	b289      	uxth	r1, r1
   d5246:	487a      	ldr	r0, [pc, #488]	; (d5430 <_Z3numiiiii+0x104c>)
   d5248:	f8cd b000 	str.w	fp, [sp]
   d524c:	f009 fbd8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5250:	1df9      	adds	r1, r7, #7
   d5252:	4642      	mov	r2, r8
   d5254:	464b      	mov	r3, r9
   d5256:	b289      	uxth	r1, r1
   d5258:	4875      	ldr	r0, [pc, #468]	; (d5430 <_Z3numiiiii+0x104c>)
   d525a:	f8cd b000 	str.w	fp, [sp]

        strip.setPixelColor(pix-4,0,0,0);
   d525e:	f04f 0800 	mov.w	r8, #0
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+10,R,G,B);
        strip.setPixelColor(pix+7,R,G,B);
   d5262:	f009 fbcd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>

        strip.setPixelColor(pix-4,0,0,0);
   d5266:	1f39      	subs	r1, r7, #4
   d5268:	4643      	mov	r3, r8
   d526a:	4642      	mov	r2, r8
   d526c:	b289      	uxth	r1, r1
   d526e:	4870      	ldr	r0, [pc, #448]	; (d5430 <_Z3numiiiii+0x104c>)
   d5270:	f8cd 8000 	str.w	r8, [sp]
   d5274:	f009 fbc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5278:	1f79      	subs	r1, r7, #5
   d527a:	4643      	mov	r3, r8
   d527c:	4642      	mov	r2, r8
   d527e:	b289      	uxth	r1, r1
   d5280:	486b      	ldr	r0, [pc, #428]	; (d5430 <_Z3numiiiii+0x104c>)
   d5282:	f8cd 8000 	str.w	r8, [sp]
   d5286:	f009 fbbb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d528a:	f107 0113 	add.w	r1, r7, #19
   d528e:	4643      	mov	r3, r8
   d5290:	4642      	mov	r2, r8
   d5292:	b289      	uxth	r1, r1
   d5294:	4866      	ldr	r0, [pc, #408]	; (d5430 <_Z3numiiiii+0x104c>)
   d5296:	f8cd 8000 	str.w	r8, [sp]
   d529a:	f009 fbb1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d529e:	f107 0112 	add.w	r1, r7, #18
   d52a2:	f8cd 8000 	str.w	r8, [sp]
   d52a6:	4643      	mov	r3, r8
   d52a8:	4642      	mov	r2, r8
   d52aa:	b289      	uxth	r1, r1
   d52ac:	4860      	ldr	r0, [pc, #384]	; (d5430 <_Z3numiiiii+0x104c>)
   d52ae:	f009 fba7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d52b2:	f01a 0701 	ands.w	r7, sl, #1
   d52b6:	f041 80c1 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d52ba:	b2a4      	uxth	r4, r4
   d52bc:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d52c0:	485b      	ldr	r0, [pc, #364]	; (d5430 <_Z3numiiiii+0x104c>)
   d52c2:	f8cd 8000 	str.w	r8, [sp]
   d52c6:	b2ed      	uxtb	r5, r5
   d52c8:	b2f6      	uxtb	r6, r6
   d52ca:	4633      	mov	r3, r6
   d52cc:	462a      	mov	r2, r5
   d52ce:	4621      	mov	r1, r4
   d52d0:	f009 fb96 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d52d4:	f104 010f 	add.w	r1, r4, #15
   d52d8:	4633      	mov	r3, r6
   d52da:	462a      	mov	r2, r5
   d52dc:	b289      	uxth	r1, r1
   d52de:	4854      	ldr	r0, [pc, #336]	; (d5430 <_Z3numiiiii+0x104c>)
   d52e0:	f8cd 8000 	str.w	r8, [sp]
   d52e4:	f009 fb8c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d52e8:	f104 0110 	add.w	r1, r4, #16
   d52ec:	4633      	mov	r3, r6
   d52ee:	462a      	mov	r2, r5
   d52f0:	b289      	uxth	r1, r1
   d52f2:	484f      	ldr	r0, [pc, #316]	; (d5430 <_Z3numiiiii+0x104c>)
   d52f4:	f8cd 8000 	str.w	r8, [sp]
   d52f8:	f009 fb82 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d52fc:	f104 011f 	add.w	r1, r4, #31
   d5300:	4633      	mov	r3, r6
   d5302:	462a      	mov	r2, r5
   d5304:	b289      	uxth	r1, r1
   d5306:	484a      	ldr	r0, [pc, #296]	; (d5430 <_Z3numiiiii+0x104c>)
   d5308:	f8cd 8000 	str.w	r8, [sp]
   d530c:	f009 fb78 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5310:	1c61      	adds	r1, r4, #1
   d5312:	4633      	mov	r3, r6
   d5314:	462a      	mov	r2, r5
   d5316:	b289      	uxth	r1, r1
   d5318:	4845      	ldr	r0, [pc, #276]	; (d5430 <_Z3numiiiii+0x104c>)
   d531a:	f8cd 8000 	str.w	r8, [sp]
   d531e:	f009 fb6f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5322:	1ca1      	adds	r1, r4, #2
   d5324:	4633      	mov	r3, r6
   d5326:	462a      	mov	r2, r5
   d5328:	b289      	uxth	r1, r1
   d532a:	4841      	ldr	r0, [pc, #260]	; (d5430 <_Z3numiiiii+0x104c>)
   d532c:	f8cd 8000 	str.w	r8, [sp]
   d5330:	f009 fb66 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5334:	1ce1      	adds	r1, r4, #3
   d5336:	4633      	mov	r3, r6
   d5338:	462a      	mov	r2, r5
   d533a:	b289      	uxth	r1, r1
   d533c:	483c      	ldr	r0, [pc, #240]	; (d5430 <_Z3numiiiii+0x104c>)
   d533e:	f8cd 8000 	str.w	r8, [sp]
   d5342:	f009 fb5d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5346:	f104 010c 	add.w	r1, r4, #12
   d534a:	4633      	mov	r3, r6
   d534c:	462a      	mov	r2, r5
   d534e:	b289      	uxth	r1, r1
   d5350:	4837      	ldr	r0, [pc, #220]	; (d5430 <_Z3numiiiii+0x104c>)
   d5352:	f8cd 8000 	str.w	r8, [sp]
   d5356:	f009 fb53 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d535a:	f104 0113 	add.w	r1, r4, #19
   d535e:	4633      	mov	r3, r6
   d5360:	462a      	mov	r2, r5
   d5362:	b289      	uxth	r1, r1
   d5364:	4832      	ldr	r0, [pc, #200]	; (d5430 <_Z3numiiiii+0x104c>)
   d5366:	f8cd 8000 	str.w	r8, [sp]
   d536a:	f009 fb49 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d536e:	f104 011c 	add.w	r1, r4, #28
   d5372:	4633      	mov	r3, r6
   d5374:	462a      	mov	r2, r5
   d5376:	b289      	uxth	r1, r1
   d5378:	482d      	ldr	r0, [pc, #180]	; (d5430 <_Z3numiiiii+0x104c>)
   d537a:	f8cd 8000 	str.w	r8, [sp]
   d537e:	f009 fb3f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5382:	f104 011b 	add.w	r1, r4, #27
   d5386:	4633      	mov	r3, r6
   d5388:	462a      	mov	r2, r5
   d538a:	b289      	uxth	r1, r1
   d538c:	4828      	ldr	r0, [pc, #160]	; (d5430 <_Z3numiiiii+0x104c>)
   d538e:	f8cd 8000 	str.w	r8, [sp]
   d5392:	f009 fb35 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5396:	f104 011a 	add.w	r1, r4, #26
   d539a:	4633      	mov	r3, r6
   d539c:	462a      	mov	r2, r5
   d539e:	b289      	uxth	r1, r1
   d53a0:	4823      	ldr	r0, [pc, #140]	; (d5430 <_Z3numiiiii+0x104c>)
   d53a2:	f8cd 8000 	str.w	r8, [sp]
   d53a6:	f009 fb2b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d53aa:	f104 0119 	add.w	r1, r4, #25
   d53ae:	4633      	mov	r3, r6
   d53b0:	462a      	mov	r2, r5
   d53b2:	b289      	uxth	r1, r1
   d53b4:	481e      	ldr	r0, [pc, #120]	; (d5430 <_Z3numiiiii+0x104c>)
   d53b6:	f8cd 8000 	str.w	r8, [sp]
   d53ba:	f009 fb21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d53be:	f104 0116 	add.w	r1, r4, #22
   d53c2:	4633      	mov	r3, r6
   d53c4:	462a      	mov	r2, r5
   d53c6:	b289      	uxth	r1, r1
   d53c8:	4819      	ldr	r0, [pc, #100]	; (d5430 <_Z3numiiiii+0x104c>)
   d53ca:	f8cd 8000 	str.w	r8, [sp]
   d53ce:	f009 fb17 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d53d2:	f104 0109 	add.w	r1, r4, #9
   d53d6:	4633      	mov	r3, r6
   d53d8:	462a      	mov	r2, r5
   d53da:	b289      	uxth	r1, r1
   d53dc:	4814      	ldr	r0, [pc, #80]	; (d5430 <_Z3numiiiii+0x104c>)
   d53de:	f8cd 8000 	str.w	r8, [sp]
   d53e2:	f009 fb0d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d53e6:	1da1      	adds	r1, r4, #6
   d53e8:	4633      	mov	r3, r6
   d53ea:	462a      	mov	r2, r5
   d53ec:	b289      	uxth	r1, r1
   d53ee:	4810      	ldr	r0, [pc, #64]	; (d5430 <_Z3numiiiii+0x104c>)
   d53f0:	f8cd 8000 	str.w	r8, [sp]
   d53f4:	f009 fb04 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d53f8:	1d21      	adds	r1, r4, #4
   d53fa:	463b      	mov	r3, r7
   d53fc:	463a      	mov	r2, r7
   d53fe:	b289      	uxth	r1, r1
   d5400:	480b      	ldr	r0, [pc, #44]	; (d5430 <_Z3numiiiii+0x104c>)
   d5402:	9700      	str	r7, [sp, #0]
   d5404:	f009 fafc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5408:	1d61      	adds	r1, r4, #5
   d540a:	463b      	mov	r3, r7
   d540c:	463a      	mov	r2, r7
   d540e:	b289      	uxth	r1, r1
   d5410:	4807      	ldr	r0, [pc, #28]	; (d5430 <_Z3numiiiii+0x104c>)
   d5412:	9700      	str	r7, [sp, #0]
   d5414:	f009 faf4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,0,0,0);
   d5418:	f104 011d 	add.w	r1, r4, #29
   d541c:	b289      	uxth	r1, r1
   d541e:	9700      	str	r7, [sp, #0]
   d5420:	463b      	mov	r3, r7
   d5422:	463a      	mov	r2, r7
   d5424:	4802      	ldr	r0, [pc, #8]	; (d5430 <_Z3numiiiii+0x104c>)
   d5426:	f009 faeb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d542a:	f104 011e 	add.w	r1, r4, #30
   d542e:	e65d      	b.n	d50ec <_Z3numiiiii+0xd08>
   d5430:	2003e31c 	.word	0x2003e31c
   d5434:	80000001 	.word	0x80000001
    }
}
if(num == 6)
   d5438:	2806      	cmp	r0, #6
   d543a:	f040 819d 	bne.w	d5778 <_Z3numiiiii+0x1394>
{
    if((pix/8)%2 == 1)
   d543e:	4bcc      	ldr	r3, [pc, #816]	; (d5770 <_Z3numiiiii+0x138c>)
   d5440:	f04f 0b08 	mov.w	fp, #8
   d5444:	fb94 fbfb 	sdiv	fp, r4, fp
   d5448:	ea0b 0303 	and.w	r3, fp, r3
   d544c:	2b00      	cmp	r3, #0
   d544e:	bfbe      	ittt	lt
   d5450:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5454:	f063 0301 	ornlt	r3, r3, #1
   d5458:	3301      	addlt	r3, #1
   d545a:	2b01      	cmp	r3, #1
   d545c:	f040 80c6 	bne.w	d55ec <_Z3numiiiii+0x1208>
    {
        strip.setPixelColor(pix,R,G,B);
   d5460:	b2a7      	uxth	r7, r4
   d5462:	fa5f f885 	uxtb.w	r8, r5
   d5466:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d546a:	48c2      	ldr	r0, [pc, #776]	; (d5774 <_Z3numiiiii+0x1390>)
   d546c:	f8cd a000 	str.w	sl, [sp]
   d5470:	fa5f f986 	uxtb.w	r9, r6
   d5474:	4642      	mov	r2, r8
   d5476:	464b      	mov	r3, r9
   d5478:	4639      	mov	r1, r7
   d547a:	f009 fac1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d547e:	1c79      	adds	r1, r7, #1
   d5480:	4642      	mov	r2, r8
   d5482:	464b      	mov	r3, r9
   d5484:	b289      	uxth	r1, r1
   d5486:	48bb      	ldr	r0, [pc, #748]	; (d5774 <_Z3numiiiii+0x1390>)
   d5488:	f8cd a000 	str.w	sl, [sp]
   d548c:	f009 fab8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5490:	f107 0110 	add.w	r1, r7, #16
   d5494:	4642      	mov	r2, r8
   d5496:	464b      	mov	r3, r9
   d5498:	b289      	uxth	r1, r1
   d549a:	48b6      	ldr	r0, [pc, #728]	; (d5774 <_Z3numiiiii+0x1390>)
   d549c:	f8cd a000 	str.w	sl, [sp]
   d54a0:	f009 faae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d54a4:	f107 0111 	add.w	r1, r7, #17
   d54a8:	4642      	mov	r2, r8
   d54aa:	464b      	mov	r3, r9
   d54ac:	b289      	uxth	r1, r1
   d54ae:	48b1      	ldr	r0, [pc, #708]	; (d5774 <_Z3numiiiii+0x1390>)
   d54b0:	f8cd a000 	str.w	sl, [sp]
   d54b4:	f009 faa4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d54b8:	1e79      	subs	r1, r7, #1
   d54ba:	4642      	mov	r2, r8
   d54bc:	464b      	mov	r3, r9
   d54be:	b289      	uxth	r1, r1
   d54c0:	48ac      	ldr	r0, [pc, #688]	; (d5774 <_Z3numiiiii+0x1390>)
   d54c2:	f8cd a000 	str.w	sl, [sp]
   d54c6:	f009 fa9b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d54ca:	1eb9      	subs	r1, r7, #2
   d54cc:	4642      	mov	r2, r8
   d54ce:	464b      	mov	r3, r9
   d54d0:	b289      	uxth	r1, r1
   d54d2:	48a8      	ldr	r0, [pc, #672]	; (d5774 <_Z3numiiiii+0x1390>)
   d54d4:	f8cd a000 	str.w	sl, [sp]
   d54d8:	f009 fa92 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d54dc:	1ef9      	subs	r1, r7, #3
   d54de:	4642      	mov	r2, r8
   d54e0:	464b      	mov	r3, r9
   d54e2:	b289      	uxth	r1, r1
   d54e4:	48a3      	ldr	r0, [pc, #652]	; (d5774 <_Z3numiiiii+0x1390>)
   d54e6:	f8cd a000 	str.w	sl, [sp]
   d54ea:	f009 fa89 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d54ee:	1f39      	subs	r1, r7, #4
   d54f0:	4642      	mov	r2, r8
   d54f2:	464b      	mov	r3, r9
   d54f4:	b289      	uxth	r1, r1
   d54f6:	489f      	ldr	r0, [pc, #636]	; (d5774 <_Z3numiiiii+0x1390>)
   d54f8:	f8cd a000 	str.w	sl, [sp]
   d54fc:	f009 fa80 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d5500:	1f79      	subs	r1, r7, #5
   d5502:	4642      	mov	r2, r8
   d5504:	464b      	mov	r3, r9
   d5506:	b289      	uxth	r1, r1
   d5508:	489a      	ldr	r0, [pc, #616]	; (d5774 <_Z3numiiiii+0x1390>)
   d550a:	f8cd a000 	str.w	sl, [sp]
   d550e:	f009 fa77 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5512:	1fb9      	subs	r1, r7, #6
   d5514:	4642      	mov	r2, r8
   d5516:	464b      	mov	r3, r9
   d5518:	b289      	uxth	r1, r1
   d551a:	4896      	ldr	r0, [pc, #600]	; (d5774 <_Z3numiiiii+0x1390>)
   d551c:	f8cd a000 	str.w	sl, [sp]
   d5520:	f009 fa6e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5524:	1df9      	adds	r1, r7, #7
   d5526:	4642      	mov	r2, r8
   d5528:	464b      	mov	r3, r9
   d552a:	b289      	uxth	r1, r1
   d552c:	4891      	ldr	r0, [pc, #580]	; (d5774 <_Z3numiiiii+0x1390>)
   d552e:	f8cd a000 	str.w	sl, [sp]
   d5532:	f009 fa65 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d5536:	f107 010a 	add.w	r1, r7, #10
   d553a:	4642      	mov	r2, r8
   d553c:	464b      	mov	r3, r9
   d553e:	b289      	uxth	r1, r1
   d5540:	488c      	ldr	r0, [pc, #560]	; (d5774 <_Z3numiiiii+0x1390>)
   d5542:	f8cd a000 	str.w	sl, [sp]
   d5546:	f009 fa5b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d554a:	f107 0117 	add.w	r1, r7, #23
   d554e:	4642      	mov	r2, r8
   d5550:	464b      	mov	r3, r9
   d5552:	b289      	uxth	r1, r1
   d5554:	4887      	ldr	r0, [pc, #540]	; (d5774 <_Z3numiiiii+0x1390>)
   d5556:	f8cd a000 	str.w	sl, [sp]
   d555a:	f009 fa51 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d555e:	f107 0116 	add.w	r1, r7, #22
   d5562:	4642      	mov	r2, r8
   d5564:	464b      	mov	r3, r9
   d5566:	b289      	uxth	r1, r1
   d5568:	4882      	ldr	r0, [pc, #520]	; (d5774 <_Z3numiiiii+0x1390>)
   d556a:	f8cd a000 	str.w	sl, [sp]
   d556e:	f009 fa47 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5572:	f107 0115 	add.w	r1, r7, #21
   d5576:	4642      	mov	r2, r8
   d5578:	464b      	mov	r3, r9
   d557a:	b289      	uxth	r1, r1
   d557c:	487d      	ldr	r0, [pc, #500]	; (d5774 <_Z3numiiiii+0x1390>)
   d557e:	f8cd a000 	str.w	sl, [sp]
   d5582:	f009 fa3d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5586:	f107 0114 	add.w	r1, r7, #20
   d558a:	4642      	mov	r2, r8
   d558c:	464b      	mov	r3, r9
   d558e:	b289      	uxth	r1, r1
   d5590:	4878      	ldr	r0, [pc, #480]	; (d5774 <_Z3numiiiii+0x1390>)
   d5592:	f8cd a000 	str.w	sl, [sp]
   d5596:	f009 fa33 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d559a:	1d39      	adds	r1, r7, #4
   d559c:	4642      	mov	r2, r8
   d559e:	464b      	mov	r3, r9
   d55a0:	b289      	uxth	r1, r1
   d55a2:	4874      	ldr	r0, [pc, #464]	; (d5774 <_Z3numiiiii+0x1390>)
   d55a4:	f8cd a000 	str.w	sl, [sp]
   d55a8:	f009 fa2a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d55ac:	f107 010d 	add.w	r1, r7, #13
   d55b0:	4642      	mov	r2, r8
   d55b2:	464b      	mov	r3, r9
   d55b4:	b289      	uxth	r1, r1
   d55b6:	486f      	ldr	r0, [pc, #444]	; (d5774 <_Z3numiiiii+0x1390>)
   d55b8:	f8cd a000 	str.w	sl, [sp]
   d55bc:	f009 fa20 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+19,0,0,0);
   d55c0:	f04f 0800 	mov.w	r8, #0
   d55c4:	f107 0113 	add.w	r1, r7, #19
   d55c8:	4643      	mov	r3, r8
   d55ca:	4642      	mov	r2, r8
   d55cc:	b289      	uxth	r1, r1
   d55ce:	4869      	ldr	r0, [pc, #420]	; (d5774 <_Z3numiiiii+0x1390>)
   d55d0:	f8cd 8000 	str.w	r8, [sp]
   d55d4:	f009 fa14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,0,0,0);
   d55d8:	f107 0112 	add.w	r1, r7, #18
   d55dc:	f8cd 8000 	str.w	r8, [sp]
   d55e0:	4643      	mov	r3, r8
   d55e2:	4642      	mov	r2, r8
   d55e4:	b289      	uxth	r1, r1
   d55e6:	4863      	ldr	r0, [pc, #396]	; (d5774 <_Z3numiiiii+0x1390>)
   d55e8:	f009 fa0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d55ec:	f01b 0701 	ands.w	r7, fp, #1
   d55f0:	f040 8724 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d55f4:	b2a4      	uxth	r4, r4
   d55f6:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d55fa:	485e      	ldr	r0, [pc, #376]	; (d5774 <_Z3numiiiii+0x1390>)
   d55fc:	f8cd 8000 	str.w	r8, [sp]
   d5600:	b2ed      	uxtb	r5, r5
   d5602:	b2f6      	uxtb	r6, r6
   d5604:	4633      	mov	r3, r6
   d5606:	462a      	mov	r2, r5
   d5608:	4621      	mov	r1, r4
   d560a:	f009 f9f9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d560e:	f104 010f 	add.w	r1, r4, #15
   d5612:	4633      	mov	r3, r6
   d5614:	462a      	mov	r2, r5
   d5616:	b289      	uxth	r1, r1
   d5618:	4856      	ldr	r0, [pc, #344]	; (d5774 <_Z3numiiiii+0x1390>)
   d561a:	f8cd 8000 	str.w	r8, [sp]
   d561e:	f009 f9ef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5622:	f104 0110 	add.w	r1, r4, #16
   d5626:	4633      	mov	r3, r6
   d5628:	462a      	mov	r2, r5
   d562a:	b289      	uxth	r1, r1
   d562c:	4851      	ldr	r0, [pc, #324]	; (d5774 <_Z3numiiiii+0x1390>)
   d562e:	f8cd 8000 	str.w	r8, [sp]
   d5632:	f009 f9e5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5636:	f104 011f 	add.w	r1, r4, #31
   d563a:	4633      	mov	r3, r6
   d563c:	462a      	mov	r2, r5
   d563e:	b289      	uxth	r1, r1
   d5640:	484c      	ldr	r0, [pc, #304]	; (d5774 <_Z3numiiiii+0x1390>)
   d5642:	f8cd 8000 	str.w	r8, [sp]
   d5646:	f009 f9db 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d564a:	1c61      	adds	r1, r4, #1
   d564c:	4633      	mov	r3, r6
   d564e:	462a      	mov	r2, r5
   d5650:	b289      	uxth	r1, r1
   d5652:	4848      	ldr	r0, [pc, #288]	; (d5774 <_Z3numiiiii+0x1390>)
   d5654:	f8cd 8000 	str.w	r8, [sp]
   d5658:	f009 f9d2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d565c:	1ca1      	adds	r1, r4, #2
   d565e:	4633      	mov	r3, r6
   d5660:	462a      	mov	r2, r5
   d5662:	b289      	uxth	r1, r1
   d5664:	4843      	ldr	r0, [pc, #268]	; (d5774 <_Z3numiiiii+0x1390>)
   d5666:	f8cd 8000 	str.w	r8, [sp]
   d566a:	f009 f9c9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d566e:	1ce1      	adds	r1, r4, #3
   d5670:	4633      	mov	r3, r6
   d5672:	462a      	mov	r2, r5
   d5674:	b289      	uxth	r1, r1
   d5676:	483f      	ldr	r0, [pc, #252]	; (d5774 <_Z3numiiiii+0x1390>)
   d5678:	f8cd 8000 	str.w	r8, [sp]
   d567c:	f009 f9c0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5680:	1d21      	adds	r1, r4, #4
   d5682:	4633      	mov	r3, r6
   d5684:	462a      	mov	r2, r5
   d5686:	b289      	uxth	r1, r1
   d5688:	483a      	ldr	r0, [pc, #232]	; (d5774 <_Z3numiiiii+0x1390>)
   d568a:	f8cd 8000 	str.w	r8, [sp]
   d568e:	f009 f9b7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d5692:	1d61      	adds	r1, r4, #5
   d5694:	4633      	mov	r3, r6
   d5696:	462a      	mov	r2, r5
   d5698:	b289      	uxth	r1, r1
   d569a:	4836      	ldr	r0, [pc, #216]	; (d5774 <_Z3numiiiii+0x1390>)
   d569c:	f8cd 8000 	str.w	r8, [sp]
   d56a0:	f009 f9ae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d56a4:	1da1      	adds	r1, r4, #6
   d56a6:	4633      	mov	r3, r6
   d56a8:	462a      	mov	r2, r5
   d56aa:	b289      	uxth	r1, r1
   d56ac:	4831      	ldr	r0, [pc, #196]	; (d5774 <_Z3numiiiii+0x1390>)
   d56ae:	f8cd 8000 	str.w	r8, [sp]
   d56b2:	f009 f9a5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d56b6:	f104 0109 	add.w	r1, r4, #9
   d56ba:	4633      	mov	r3, r6
   d56bc:	462a      	mov	r2, r5
   d56be:	b289      	uxth	r1, r1
   d56c0:	482c      	ldr	r0, [pc, #176]	; (d5774 <_Z3numiiiii+0x1390>)
   d56c2:	f8cd 8000 	str.w	r8, [sp]
   d56c6:	f009 f99b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d56ca:	f104 0116 	add.w	r1, r4, #22
   d56ce:	4633      	mov	r3, r6
   d56d0:	462a      	mov	r2, r5
   d56d2:	b289      	uxth	r1, r1
   d56d4:	4827      	ldr	r0, [pc, #156]	; (d5774 <_Z3numiiiii+0x1390>)
   d56d6:	f8cd 8000 	str.w	r8, [sp]
   d56da:	f009 f991 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d56de:	f104 0119 	add.w	r1, r4, #25
   d56e2:	4633      	mov	r3, r6
   d56e4:	462a      	mov	r2, r5
   d56e6:	b289      	uxth	r1, r1
   d56e8:	4822      	ldr	r0, [pc, #136]	; (d5774 <_Z3numiiiii+0x1390>)
   d56ea:	f8cd 8000 	str.w	r8, [sp]
   d56ee:	f009 f987 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d56f2:	f104 011a 	add.w	r1, r4, #26
   d56f6:	4633      	mov	r3, r6
   d56f8:	462a      	mov	r2, r5
   d56fa:	b289      	uxth	r1, r1
   d56fc:	481d      	ldr	r0, [pc, #116]	; (d5774 <_Z3numiiiii+0x1390>)
   d56fe:	f8cd 8000 	str.w	r8, [sp]
   d5702:	f009 f97d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5706:	f104 011b 	add.w	r1, r4, #27
   d570a:	4633      	mov	r3, r6
   d570c:	462a      	mov	r2, r5
   d570e:	b289      	uxth	r1, r1
   d5710:	4818      	ldr	r0, [pc, #96]	; (d5774 <_Z3numiiiii+0x1390>)
   d5712:	f8cd 8000 	str.w	r8, [sp]
   d5716:	f009 f973 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d571a:	f104 011c 	add.w	r1, r4, #28
   d571e:	4633      	mov	r3, r6
   d5720:	462a      	mov	r2, r5
   d5722:	b289      	uxth	r1, r1
   d5724:	4813      	ldr	r0, [pc, #76]	; (d5774 <_Z3numiiiii+0x1390>)
   d5726:	f8cd 8000 	str.w	r8, [sp]
   d572a:	f009 f969 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d572e:	f104 0113 	add.w	r1, r4, #19
   d5732:	4633      	mov	r3, r6
   d5734:	462a      	mov	r2, r5
   d5736:	b289      	uxth	r1, r1
   d5738:	480e      	ldr	r0, [pc, #56]	; (d5774 <_Z3numiiiii+0x1390>)
   d573a:	f8cd 8000 	str.w	r8, [sp]
   d573e:	f009 f95f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5742:	f104 010c 	add.w	r1, r4, #12
   d5746:	4633      	mov	r3, r6
   d5748:	462a      	mov	r2, r5
   d574a:	b289      	uxth	r1, r1
   d574c:	4809      	ldr	r0, [pc, #36]	; (d5774 <_Z3numiiiii+0x1390>)
   d574e:	f8cd 8000 	str.w	r8, [sp]
   d5752:	f009 f955 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+29,0,0,0);
   d5756:	f104 011d 	add.w	r1, r4, #29
   d575a:	b289      	uxth	r1, r1
   d575c:	9700      	str	r7, [sp, #0]
   d575e:	463b      	mov	r3, r7
   d5760:	463a      	mov	r2, r7
   d5762:	4804      	ldr	r0, [pc, #16]	; (d5774 <_Z3numiiiii+0x1390>)
   d5764:	f009 f94c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,0,0,0);
   d5768:	f104 011e 	add.w	r1, r4, #30
   d576c:	e1a4      	b.n	d5ab8 <_Z3numiiiii+0x16d4>
   d576e:	bf00      	nop
   d5770:	80000001 	.word	0x80000001
   d5774:	2003e31c 	.word	0x2003e31c
    }
}
if(num == 7)
   d5778:	2807      	cmp	r0, #7
   d577a:	f000 81ab 	beq.w	d5ad4 <_Z3numiiiii+0x16f0>
        strip.setPixelColor(pix+22,0,0,0);
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
   d577e:	2808      	cmp	r0, #8
   d5780:	f000 84d6 	beq.w	d6130 <_Z3numiiiii+0x1d4c>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
    }
}
if(num == 9)
   d5784:	2809      	cmp	r0, #9
   d5786:	f040 8333 	bne.w	d5df0 <_Z3numiiiii+0x1a0c>
{
    if((pix/8)%2 == 1)
   d578a:	4bd0      	ldr	r3, [pc, #832]	; (d5acc <_Z3numiiiii+0x16e8>)
   d578c:	f04f 0b08 	mov.w	fp, #8
   d5790:	fb94 fbfb 	sdiv	fp, r4, fp
   d5794:	ea0b 0303 	and.w	r3, fp, r3
   d5798:	2b00      	cmp	r3, #0
   d579a:	bfbe      	ittt	lt
   d579c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d57a0:	f063 0301 	ornlt	r3, r3, #1
   d57a4:	3301      	addlt	r3, #1
   d57a6:	2b01      	cmp	r3, #1
   d57a8:	f040 80c6 	bne.w	d5938 <_Z3numiiiii+0x1554>
    {
        strip.setPixelColor(pix,R,G,B);
   d57ac:	b2a7      	uxth	r7, r4
   d57ae:	fa5f f885 	uxtb.w	r8, r5
   d57b2:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d57b6:	48c6      	ldr	r0, [pc, #792]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d57b8:	f8cd a000 	str.w	sl, [sp]
   d57bc:	fa5f f986 	uxtb.w	r9, r6
   d57c0:	4642      	mov	r2, r8
   d57c2:	464b      	mov	r3, r9
   d57c4:	4639      	mov	r1, r7
   d57c6:	f009 f91b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d57ca:	1c79      	adds	r1, r7, #1
   d57cc:	4642      	mov	r2, r8
   d57ce:	464b      	mov	r3, r9
   d57d0:	b289      	uxth	r1, r1
   d57d2:	48bf      	ldr	r0, [pc, #764]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d57d4:	f8cd a000 	str.w	sl, [sp]
   d57d8:	f009 f912 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d57dc:	f107 0110 	add.w	r1, r7, #16
   d57e0:	4642      	mov	r2, r8
   d57e2:	464b      	mov	r3, r9
   d57e4:	b289      	uxth	r1, r1
   d57e6:	48ba      	ldr	r0, [pc, #744]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d57e8:	f8cd a000 	str.w	sl, [sp]
   d57ec:	f009 f908 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d57f0:	f107 0111 	add.w	r1, r7, #17
   d57f4:	4642      	mov	r2, r8
   d57f6:	464b      	mov	r3, r9
   d57f8:	b289      	uxth	r1, r1
   d57fa:	48b5      	ldr	r0, [pc, #724]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d57fc:	f8cd a000 	str.w	sl, [sp]
   d5800:	f009 f8fe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d5804:	1e79      	subs	r1, r7, #1
   d5806:	4642      	mov	r2, r8
   d5808:	464b      	mov	r3, r9
   d580a:	b289      	uxth	r1, r1
   d580c:	48b0      	ldr	r0, [pc, #704]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d580e:	f8cd a000 	str.w	sl, [sp]
   d5812:	f009 f8f5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5816:	1eb9      	subs	r1, r7, #2
   d5818:	4642      	mov	r2, r8
   d581a:	464b      	mov	r3, r9
   d581c:	b289      	uxth	r1, r1
   d581e:	48ac      	ldr	r0, [pc, #688]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5820:	f8cd a000 	str.w	sl, [sp]
   d5824:	f009 f8ec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5828:	1ef9      	subs	r1, r7, #3
   d582a:	4642      	mov	r2, r8
   d582c:	464b      	mov	r3, r9
   d582e:	b289      	uxth	r1, r1
   d5830:	48a7      	ldr	r0, [pc, #668]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5832:	f8cd a000 	str.w	sl, [sp]
   d5836:	f009 f8e3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d583a:	f107 0117 	add.w	r1, r7, #23
   d583e:	4642      	mov	r2, r8
   d5840:	464b      	mov	r3, r9
   d5842:	b289      	uxth	r1, r1
   d5844:	48a2      	ldr	r0, [pc, #648]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5846:	f8cd a000 	str.w	sl, [sp]
   d584a:	f009 f8d9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d584e:	f107 0116 	add.w	r1, r7, #22
   d5852:	4642      	mov	r2, r8
   d5854:	464b      	mov	r3, r9
   d5856:	b289      	uxth	r1, r1
   d5858:	489d      	ldr	r0, [pc, #628]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d585a:	f8cd a000 	str.w	sl, [sp]
   d585e:	f009 f8cf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5862:	f107 0115 	add.w	r1, r7, #21
   d5866:	4642      	mov	r2, r8
   d5868:	464b      	mov	r3, r9
   d586a:	b289      	uxth	r1, r1
   d586c:	4898      	ldr	r0, [pc, #608]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d586e:	f8cd a000 	str.w	sl, [sp]
   d5872:	f009 f8c5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5876:	f107 0114 	add.w	r1, r7, #20
   d587a:	4642      	mov	r2, r8
   d587c:	464b      	mov	r3, r9
   d587e:	b289      	uxth	r1, r1
   d5880:	4893      	ldr	r0, [pc, #588]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5882:	f8cd a000 	str.w	sl, [sp]
   d5886:	f009 f8bb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d588a:	f107 0113 	add.w	r1, r7, #19
   d588e:	4642      	mov	r2, r8
   d5890:	464b      	mov	r3, r9
   d5892:	b289      	uxth	r1, r1
   d5894:	488e      	ldr	r0, [pc, #568]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5896:	f8cd a000 	str.w	sl, [sp]
   d589a:	f009 f8b1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d589e:	f107 0112 	add.w	r1, r7, #18
   d58a2:	4642      	mov	r2, r8
   d58a4:	464b      	mov	r3, r9
   d58a6:	b289      	uxth	r1, r1
   d58a8:	4889      	ldr	r0, [pc, #548]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d58aa:	f8cd a000 	str.w	sl, [sp]
   d58ae:	f009 f8a7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d58b2:	1d39      	adds	r1, r7, #4
   d58b4:	4642      	mov	r2, r8
   d58b6:	464b      	mov	r3, r9
   d58b8:	b289      	uxth	r1, r1
   d58ba:	4885      	ldr	r0, [pc, #532]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d58bc:	f8cd a000 	str.w	sl, [sp]
   d58c0:	f009 f89e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d58c4:	f107 010d 	add.w	r1, r7, #13
   d58c8:	4642      	mov	r2, r8
   d58ca:	464b      	mov	r3, r9
   d58cc:	b289      	uxth	r1, r1
   d58ce:	4880      	ldr	r0, [pc, #512]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d58d0:	f8cd a000 	str.w	sl, [sp]
   d58d4:	f009 f894 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d58d8:	1fb9      	subs	r1, r7, #6
   d58da:	4642      	mov	r2, r8
   d58dc:	464b      	mov	r3, r9
   d58de:	b289      	uxth	r1, r1
   d58e0:	487b      	ldr	r0, [pc, #492]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d58e2:	f8cd a000 	str.w	sl, [sp]
   d58e6:	f009 f88b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d58ea:	1df9      	adds	r1, r7, #7
   d58ec:	4642      	mov	r2, r8
   d58ee:	464b      	mov	r3, r9
   d58f0:	b289      	uxth	r1, r1
   d58f2:	4877      	ldr	r0, [pc, #476]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d58f4:	f8cd a000 	str.w	sl, [sp]
   d58f8:	f009 f882 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d58fc:	f107 010a 	add.w	r1, r7, #10
   d5900:	4642      	mov	r2, r8
   d5902:	464b      	mov	r3, r9
   d5904:	b289      	uxth	r1, r1
   d5906:	4872      	ldr	r0, [pc, #456]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5908:	f8cd a000 	str.w	sl, [sp]
   d590c:	f009 f878 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-4,0,0,0);
   d5910:	f04f 0800 	mov.w	r8, #0
   d5914:	1f39      	subs	r1, r7, #4
   d5916:	4643      	mov	r3, r8
   d5918:	4642      	mov	r2, r8
   d591a:	b289      	uxth	r1, r1
   d591c:	486c      	ldr	r0, [pc, #432]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d591e:	f8cd 8000 	str.w	r8, [sp]
   d5922:	f009 f86d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5926:	1f79      	subs	r1, r7, #5
   d5928:	f8cd 8000 	str.w	r8, [sp]
   d592c:	4643      	mov	r3, r8
   d592e:	4642      	mov	r2, r8
   d5930:	b289      	uxth	r1, r1
   d5932:	4867      	ldr	r0, [pc, #412]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5934:	f009 f864 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5938:	f01b 0701 	ands.w	r7, fp, #1
   d593c:	f040 857e 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5940:	b2a4      	uxth	r4, r4
   d5942:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5946:	4862      	ldr	r0, [pc, #392]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5948:	f8cd 8000 	str.w	r8, [sp]
   d594c:	b2ed      	uxtb	r5, r5
   d594e:	b2f6      	uxtb	r6, r6
   d5950:	4633      	mov	r3, r6
   d5952:	462a      	mov	r2, r5
   d5954:	4621      	mov	r1, r4
   d5956:	f009 f853 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d595a:	1c61      	adds	r1, r4, #1
   d595c:	4633      	mov	r3, r6
   d595e:	462a      	mov	r2, r5
   d5960:	b289      	uxth	r1, r1
   d5962:	485b      	ldr	r0, [pc, #364]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5964:	f8cd 8000 	str.w	r8, [sp]
   d5968:	f009 f84a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d596c:	1ca1      	adds	r1, r4, #2
   d596e:	4633      	mov	r3, r6
   d5970:	462a      	mov	r2, r5
   d5972:	b289      	uxth	r1, r1
   d5974:	4856      	ldr	r0, [pc, #344]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5976:	f8cd 8000 	str.w	r8, [sp]
   d597a:	f009 f841 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d597e:	1ce1      	adds	r1, r4, #3
   d5980:	4633      	mov	r3, r6
   d5982:	462a      	mov	r2, r5
   d5984:	b289      	uxth	r1, r1
   d5986:	4852      	ldr	r0, [pc, #328]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5988:	f8cd 8000 	str.w	r8, [sp]
   d598c:	f009 f838 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5990:	f104 0119 	add.w	r1, r4, #25
   d5994:	4633      	mov	r3, r6
   d5996:	462a      	mov	r2, r5
   d5998:	b289      	uxth	r1, r1
   d599a:	484d      	ldr	r0, [pc, #308]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d599c:	f8cd 8000 	str.w	r8, [sp]
   d59a0:	f009 f82e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d59a4:	f104 011a 	add.w	r1, r4, #26
   d59a8:	4633      	mov	r3, r6
   d59aa:	462a      	mov	r2, r5
   d59ac:	b289      	uxth	r1, r1
   d59ae:	4848      	ldr	r0, [pc, #288]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d59b0:	f8cd 8000 	str.w	r8, [sp]
   d59b4:	f009 f824 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d59b8:	f104 011b 	add.w	r1, r4, #27
   d59bc:	4633      	mov	r3, r6
   d59be:	462a      	mov	r2, r5
   d59c0:	b289      	uxth	r1, r1
   d59c2:	4843      	ldr	r0, [pc, #268]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d59c4:	f8cd 8000 	str.w	r8, [sp]
   d59c8:	f009 f81a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d59cc:	f104 011c 	add.w	r1, r4, #28
   d59d0:	4633      	mov	r3, r6
   d59d2:	462a      	mov	r2, r5
   d59d4:	b289      	uxth	r1, r1
   d59d6:	483e      	ldr	r0, [pc, #248]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d59d8:	f8cd 8000 	str.w	r8, [sp]
   d59dc:	f009 f810 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d59e0:	f104 011d 	add.w	r1, r4, #29
   d59e4:	4633      	mov	r3, r6
   d59e6:	462a      	mov	r2, r5
   d59e8:	b289      	uxth	r1, r1
   d59ea:	4839      	ldr	r0, [pc, #228]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d59ec:	f8cd 8000 	str.w	r8, [sp]
   d59f0:	f009 f806 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d59f4:	f104 011e 	add.w	r1, r4, #30
   d59f8:	4633      	mov	r3, r6
   d59fa:	462a      	mov	r2, r5
   d59fc:	b289      	uxth	r1, r1
   d59fe:	4834      	ldr	r0, [pc, #208]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a00:	f8cd 8000 	str.w	r8, [sp]
   d5a04:	f008 fffc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5a08:	f104 011f 	add.w	r1, r4, #31
   d5a0c:	4633      	mov	r3, r6
   d5a0e:	462a      	mov	r2, r5
   d5a10:	b289      	uxth	r1, r1
   d5a12:	482f      	ldr	r0, [pc, #188]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a14:	f8cd 8000 	str.w	r8, [sp]
   d5a18:	f008 fff2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5a1c:	f104 010f 	add.w	r1, r4, #15
   d5a20:	4633      	mov	r3, r6
   d5a22:	462a      	mov	r2, r5
   d5a24:	b289      	uxth	r1, r1
   d5a26:	482a      	ldr	r0, [pc, #168]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a28:	f8cd 8000 	str.w	r8, [sp]
   d5a2c:	f008 ffe8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5a30:	f104 0110 	add.w	r1, r4, #16
   d5a34:	4633      	mov	r3, r6
   d5a36:	462a      	mov	r2, r5
   d5a38:	b289      	uxth	r1, r1
   d5a3a:	4825      	ldr	r0, [pc, #148]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a3c:	f8cd 8000 	str.w	r8, [sp]
   d5a40:	f008 ffde 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d5a44:	f104 010c 	add.w	r1, r4, #12
   d5a48:	4633      	mov	r3, r6
   d5a4a:	462a      	mov	r2, r5
   d5a4c:	b289      	uxth	r1, r1
   d5a4e:	4820      	ldr	r0, [pc, #128]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a50:	f8cd 8000 	str.w	r8, [sp]
   d5a54:	f008 ffd4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5a58:	f104 0113 	add.w	r1, r4, #19
   d5a5c:	4633      	mov	r3, r6
   d5a5e:	462a      	mov	r2, r5
   d5a60:	b289      	uxth	r1, r1
   d5a62:	481b      	ldr	r0, [pc, #108]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a64:	f8cd 8000 	str.w	r8, [sp]
   d5a68:	f008 ffca 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d5a6c:	1da1      	adds	r1, r4, #6
   d5a6e:	4633      	mov	r3, r6
   d5a70:	462a      	mov	r2, r5
   d5a72:	b289      	uxth	r1, r1
   d5a74:	4816      	ldr	r0, [pc, #88]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a76:	f8cd 8000 	str.w	r8, [sp]
   d5a7a:	f008 ffc1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d5a7e:	f104 0109 	add.w	r1, r4, #9
   d5a82:	4633      	mov	r3, r6
   d5a84:	462a      	mov	r2, r5
   d5a86:	b289      	uxth	r1, r1
   d5a88:	4811      	ldr	r0, [pc, #68]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a8a:	f8cd 8000 	str.w	r8, [sp]
   d5a8e:	f008 ffb7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5a92:	f104 0116 	add.w	r1, r4, #22
   d5a96:	4633      	mov	r3, r6
   d5a98:	462a      	mov	r2, r5
   d5a9a:	b289      	uxth	r1, r1
   d5a9c:	480c      	ldr	r0, [pc, #48]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5a9e:	f8cd 8000 	str.w	r8, [sp]
   d5aa2:	f008 ffad 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5aa6:	1d21      	adds	r1, r4, #4
   d5aa8:	b289      	uxth	r1, r1
   d5aaa:	9700      	str	r7, [sp, #0]
   d5aac:	463b      	mov	r3, r7
   d5aae:	463a      	mov	r2, r7
   d5ab0:	4807      	ldr	r0, [pc, #28]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5ab2:	f008 ffa5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5ab6:	1d61      	adds	r1, r4, #5
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5ab8:	970e      	str	r7, [sp, #56]	; 0x38
   d5aba:	463b      	mov	r3, r7
   d5abc:	463a      	mov	r2, r7
   d5abe:	4804      	ldr	r0, [pc, #16]	; (d5ad0 <_Z3numiiiii+0x16ec>)
   d5ac0:	b289      	uxth	r1, r1
    }
}
}                           
   d5ac2:	b005      	add	sp, #20
   d5ac4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        strip.setPixelColor(pix+31,R,G,B);
        strip.setPixelColor(pix+15,R,G,B);
        strip.setPixelColor(pix+16,R,G,B);
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
   d5ac8:	f008 bf9a 	b.w	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d5acc:	80000001 	.word	0x80000001
   d5ad0:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+30,0,0,0);
    }
}
if(num == 7)
{
    if((pix/8)%2 == 1)
   d5ad4:	4bc4      	ldr	r3, [pc, #784]	; (d5de8 <_Z3numiiiii+0x1a04>)
   d5ad6:	2708      	movs	r7, #8
   d5ad8:	fb94 f7f7 	sdiv	r7, r4, r7
   d5adc:	403b      	ands	r3, r7
   d5ade:	2b00      	cmp	r3, #0
   d5ae0:	bfbe      	ittt	lt
   d5ae2:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5ae6:	f063 0301 	ornlt	r3, r3, #1
   d5aea:	3301      	addlt	r3, #1
   d5aec:	2b01      	cmp	r3, #1
   d5aee:	f040 80d0 	bne.w	d5c92 <_Z3numiiiii+0x18ae>
    {
        strip.setPixelColor(pix,R,G,B);
   d5af2:	fa1f f884 	uxth.w	r8, r4
   d5af6:	fa5f f985 	uxtb.w	r9, r5
   d5afa:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d5afe:	48bb      	ldr	r0, [pc, #748]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b00:	f8cd b000 	str.w	fp, [sp]
   d5b04:	fa5f fa86 	uxtb.w	sl, r6
   d5b08:	464a      	mov	r2, r9
   d5b0a:	4653      	mov	r3, sl
   d5b0c:	4641      	mov	r1, r8
   d5b0e:	f008 ff77 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5b12:	f108 0101 	add.w	r1, r8, #1
   d5b16:	464a      	mov	r2, r9
   d5b18:	4653      	mov	r3, sl
   d5b1a:	b289      	uxth	r1, r1
   d5b1c:	48b3      	ldr	r0, [pc, #716]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b1e:	f8cd b000 	str.w	fp, [sp]
   d5b22:	f008 ff6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5b26:	f108 0110 	add.w	r1, r8, #16
   d5b2a:	464a      	mov	r2, r9
   d5b2c:	4653      	mov	r3, sl
   d5b2e:	b289      	uxth	r1, r1
   d5b30:	48ae      	ldr	r0, [pc, #696]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b32:	f8cd b000 	str.w	fp, [sp]
   d5b36:	f008 ff63 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5b3a:	f108 0111 	add.w	r1, r8, #17
   d5b3e:	464a      	mov	r2, r9
   d5b40:	4653      	mov	r3, sl
   d5b42:	b289      	uxth	r1, r1
   d5b44:	48a9      	ldr	r0, [pc, #676]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b46:	f8cd b000 	str.w	fp, [sp]
   d5b4a:	f008 ff59 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5b4e:	f108 0117 	add.w	r1, r8, #23
   d5b52:	464a      	mov	r2, r9
   d5b54:	4653      	mov	r3, sl
   d5b56:	b289      	uxth	r1, r1
   d5b58:	48a4      	ldr	r0, [pc, #656]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b5a:	f8cd b000 	str.w	fp, [sp]
   d5b5e:	f008 ff4f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5b62:	f108 0116 	add.w	r1, r8, #22
   d5b66:	464a      	mov	r2, r9
   d5b68:	4653      	mov	r3, sl
   d5b6a:	b289      	uxth	r1, r1
   d5b6c:	489f      	ldr	r0, [pc, #636]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b6e:	f8cd b000 	str.w	fp, [sp]
   d5b72:	f008 ff45 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5b76:	f108 0115 	add.w	r1, r8, #21
   d5b7a:	464a      	mov	r2, r9
   d5b7c:	4653      	mov	r3, sl
   d5b7e:	b289      	uxth	r1, r1
   d5b80:	489a      	ldr	r0, [pc, #616]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b82:	f8cd b000 	str.w	fp, [sp]
   d5b86:	f008 ff3b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5b8a:	f108 0114 	add.w	r1, r8, #20
   d5b8e:	464a      	mov	r2, r9
   d5b90:	4653      	mov	r3, sl
   d5b92:	b289      	uxth	r1, r1
   d5b94:	4895      	ldr	r0, [pc, #596]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5b96:	f8cd b000 	str.w	fp, [sp]
   d5b9a:	f008 ff31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5b9e:	f108 0113 	add.w	r1, r8, #19
   d5ba2:	464a      	mov	r2, r9
   d5ba4:	4653      	mov	r3, sl
   d5ba6:	b289      	uxth	r1, r1
   d5ba8:	4890      	ldr	r0, [pc, #576]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5baa:	f8cd b000 	str.w	fp, [sp]
   d5bae:	f008 ff27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5bb2:	f108 0112 	add.w	r1, r8, #18
   d5bb6:	464a      	mov	r2, r9
   d5bb8:	4653      	mov	r3, sl
   d5bba:	b289      	uxth	r1, r1
   d5bbc:	488b      	ldr	r0, [pc, #556]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5bbe:	f8cd b000 	str.w	fp, [sp]
        
        strip.setPixelColor(pix-1,0,0,0);
   d5bc2:	f04f 0900 	mov.w	r9, #0
        strip.setPixelColor(pix+23,R,G,B);
        strip.setPixelColor(pix+22,R,G,B);
        strip.setPixelColor(pix+21,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d5bc6:	f008 ff1b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix-1,0,0,0);
   d5bca:	f108 31ff 	add.w	r1, r8, #4294967295
   d5bce:	464b      	mov	r3, r9
   d5bd0:	464a      	mov	r2, r9
   d5bd2:	b289      	uxth	r1, r1
   d5bd4:	4885      	ldr	r0, [pc, #532]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5bd6:	f8cd 9000 	str.w	r9, [sp]
   d5bda:	f008 ff11 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,0,0,0);
   d5bde:	f1a8 0102 	sub.w	r1, r8, #2
   d5be2:	464b      	mov	r3, r9
   d5be4:	464a      	mov	r2, r9
   d5be6:	b289      	uxth	r1, r1
   d5be8:	4880      	ldr	r0, [pc, #512]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5bea:	f8cd 9000 	str.w	r9, [sp]
   d5bee:	f008 ff07 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,0,0,0);
   d5bf2:	f1a8 0103 	sub.w	r1, r8, #3
   d5bf6:	464b      	mov	r3, r9
   d5bf8:	464a      	mov	r2, r9
   d5bfa:	b289      	uxth	r1, r1
   d5bfc:	487b      	ldr	r0, [pc, #492]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5bfe:	f8cd 9000 	str.w	r9, [sp]
   d5c02:	f008 fefd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,0,0,0);
   d5c06:	f1a8 0104 	sub.w	r1, r8, #4
   d5c0a:	464b      	mov	r3, r9
   d5c0c:	464a      	mov	r2, r9
   d5c0e:	b289      	uxth	r1, r1
   d5c10:	4876      	ldr	r0, [pc, #472]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c12:	f8cd 9000 	str.w	r9, [sp]
   d5c16:	f008 fef3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,0,0,0);
   d5c1a:	f1a8 0105 	sub.w	r1, r8, #5
   d5c1e:	464b      	mov	r3, r9
   d5c20:	464a      	mov	r2, r9
   d5c22:	b289      	uxth	r1, r1
   d5c24:	4871      	ldr	r0, [pc, #452]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c26:	f8cd 9000 	str.w	r9, [sp]
   d5c2a:	f008 fee9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,0,0,0);
   d5c2e:	f1a8 0106 	sub.w	r1, r8, #6
   d5c32:	464b      	mov	r3, r9
   d5c34:	464a      	mov	r2, r9
   d5c36:	b289      	uxth	r1, r1
   d5c38:	486c      	ldr	r0, [pc, #432]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c3a:	f8cd 9000 	str.w	r9, [sp]
   d5c3e:	f008 fedf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,0,0,0);
   d5c42:	f108 0107 	add.w	r1, r8, #7
   d5c46:	464b      	mov	r3, r9
   d5c48:	464a      	mov	r2, r9
   d5c4a:	b289      	uxth	r1, r1
   d5c4c:	4867      	ldr	r0, [pc, #412]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c4e:	f8cd 9000 	str.w	r9, [sp]
   d5c52:	f008 fed5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,0,0,0);
   d5c56:	f108 010a 	add.w	r1, r8, #10
   d5c5a:	464b      	mov	r3, r9
   d5c5c:	464a      	mov	r2, r9
   d5c5e:	b289      	uxth	r1, r1
   d5c60:	4862      	ldr	r0, [pc, #392]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c62:	f8cd 9000 	str.w	r9, [sp]
   d5c66:	f008 fecb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5c6a:	f108 0104 	add.w	r1, r8, #4
   d5c6e:	464b      	mov	r3, r9
   d5c70:	464a      	mov	r2, r9
   d5c72:	b289      	uxth	r1, r1
   d5c74:	485d      	ldr	r0, [pc, #372]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c76:	f8cd 9000 	str.w	r9, [sp]
   d5c7a:	f008 fec1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d5c7e:	f108 010d 	add.w	r1, r8, #13
   d5c82:	f8cd 9000 	str.w	r9, [sp]
   d5c86:	464b      	mov	r3, r9
   d5c88:	464a      	mov	r2, r9
   d5c8a:	b289      	uxth	r1, r1
   d5c8c:	4857      	ldr	r0, [pc, #348]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5c8e:	f008 feb7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5c92:	f017 0701 	ands.w	r7, r7, #1
   d5c96:	f040 83d1 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5c9a:	b2a4      	uxth	r4, r4
   d5c9c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5ca0:	4852      	ldr	r0, [pc, #328]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5ca2:	f8cd 8000 	str.w	r8, [sp]
   d5ca6:	b2ed      	uxtb	r5, r5
   d5ca8:	b2f6      	uxtb	r6, r6
   d5caa:	4633      	mov	r3, r6
   d5cac:	462a      	mov	r2, r5
   d5cae:	4621      	mov	r1, r4
   d5cb0:	f008 fea6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d5cb4:	f104 010f 	add.w	r1, r4, #15
   d5cb8:	4633      	mov	r3, r6
   d5cba:	462a      	mov	r2, r5
   d5cbc:	b289      	uxth	r1, r1
   d5cbe:	484b      	ldr	r0, [pc, #300]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5cc0:	f8cd 8000 	str.w	r8, [sp]
   d5cc4:	f008 fe9c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5cc8:	f104 0110 	add.w	r1, r4, #16
   d5ccc:	4633      	mov	r3, r6
   d5cce:	462a      	mov	r2, r5
   d5cd0:	b289      	uxth	r1, r1
   d5cd2:	4846      	ldr	r0, [pc, #280]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5cd4:	f8cd 8000 	str.w	r8, [sp]
   d5cd8:	f008 fe92 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d5cdc:	f104 011f 	add.w	r1, r4, #31
   d5ce0:	4633      	mov	r3, r6
   d5ce2:	462a      	mov	r2, r5
   d5ce4:	b289      	uxth	r1, r1
   d5ce6:	4841      	ldr	r0, [pc, #260]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5ce8:	f8cd 8000 	str.w	r8, [sp]
   d5cec:	f008 fe88 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d5cf0:	f104 011e 	add.w	r1, r4, #30
   d5cf4:	4633      	mov	r3, r6
   d5cf6:	462a      	mov	r2, r5
   d5cf8:	b289      	uxth	r1, r1
   d5cfa:	483c      	ldr	r0, [pc, #240]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5cfc:	f8cd 8000 	str.w	r8, [sp]
   d5d00:	f008 fe7e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d5d04:	f104 011d 	add.w	r1, r4, #29
   d5d08:	4633      	mov	r3, r6
   d5d0a:	462a      	mov	r2, r5
   d5d0c:	b289      	uxth	r1, r1
   d5d0e:	4837      	ldr	r0, [pc, #220]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d10:	f8cd 8000 	str.w	r8, [sp]
   d5d14:	f008 fe74 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d5d18:	f104 011c 	add.w	r1, r4, #28
   d5d1c:	4633      	mov	r3, r6
   d5d1e:	462a      	mov	r2, r5
   d5d20:	b289      	uxth	r1, r1
   d5d22:	4832      	ldr	r0, [pc, #200]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d24:	f8cd 8000 	str.w	r8, [sp]
   d5d28:	f008 fe6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d5d2c:	f104 011b 	add.w	r1, r4, #27
   d5d30:	4633      	mov	r3, r6
   d5d32:	462a      	mov	r2, r5
   d5d34:	b289      	uxth	r1, r1
   d5d36:	482d      	ldr	r0, [pc, #180]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d38:	f8cd 8000 	str.w	r8, [sp]
   d5d3c:	f008 fe60 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d5d40:	f104 011a 	add.w	r1, r4, #26
   d5d44:	4633      	mov	r3, r6
   d5d46:	462a      	mov	r2, r5
   d5d48:	b289      	uxth	r1, r1
   d5d4a:	4828      	ldr	r0, [pc, #160]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d4c:	f8cd 8000 	str.w	r8, [sp]
   d5d50:	f008 fe56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d5d54:	f104 0119 	add.w	r1, r4, #25
   d5d58:	4633      	mov	r3, r6
   d5d5a:	462a      	mov	r2, r5
   d5d5c:	b289      	uxth	r1, r1
   d5d5e:	4823      	ldr	r0, [pc, #140]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d60:	f8cd 8000 	str.w	r8, [sp]
   d5d64:	f008 fe4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+1,0,0,0);
   d5d68:	1c61      	adds	r1, r4, #1
   d5d6a:	463b      	mov	r3, r7
   d5d6c:	463a      	mov	r2, r7
   d5d6e:	b289      	uxth	r1, r1
   d5d70:	481e      	ldr	r0, [pc, #120]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d72:	9700      	str	r7, [sp, #0]
   d5d74:	f008 fe44 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,0,0,0);
   d5d78:	1ca1      	adds	r1, r4, #2
   d5d7a:	463b      	mov	r3, r7
   d5d7c:	463a      	mov	r2, r7
   d5d7e:	b289      	uxth	r1, r1
   d5d80:	481a      	ldr	r0, [pc, #104]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d82:	9700      	str	r7, [sp, #0]
   d5d84:	f008 fe3c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,0,0,0);
   d5d88:	1ce1      	adds	r1, r4, #3
   d5d8a:	463b      	mov	r3, r7
   d5d8c:	463a      	mov	r2, r7
   d5d8e:	b289      	uxth	r1, r1
   d5d90:	4816      	ldr	r0, [pc, #88]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5d92:	9700      	str	r7, [sp, #0]
   d5d94:	f008 fe34 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,0,0,0);
   d5d98:	1d21      	adds	r1, r4, #4
   d5d9a:	463b      	mov	r3, r7
   d5d9c:	463a      	mov	r2, r7
   d5d9e:	b289      	uxth	r1, r1
   d5da0:	4812      	ldr	r0, [pc, #72]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5da2:	9700      	str	r7, [sp, #0]
   d5da4:	f008 fe2c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,0,0,0);
   d5da8:	1d61      	adds	r1, r4, #5
   d5daa:	463b      	mov	r3, r7
   d5dac:	463a      	mov	r2, r7
   d5dae:	b289      	uxth	r1, r1
   d5db0:	480e      	ldr	r0, [pc, #56]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5db2:	9700      	str	r7, [sp, #0]
   d5db4:	f008 fe24 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,0,0,0);
   d5db8:	1da1      	adds	r1, r4, #6
   d5dba:	463b      	mov	r3, r7
   d5dbc:	463a      	mov	r2, r7
   d5dbe:	b289      	uxth	r1, r1
   d5dc0:	480a      	ldr	r0, [pc, #40]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5dc2:	9700      	str	r7, [sp, #0]
   d5dc4:	f008 fe1c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,0,0,0);
   d5dc8:	f104 0109 	add.w	r1, r4, #9
   d5dcc:	463b      	mov	r3, r7
   d5dce:	463a      	mov	r2, r7
   d5dd0:	b289      	uxth	r1, r1
   d5dd2:	9700      	str	r7, [sp, #0]
   d5dd4:	4805      	ldr	r0, [pc, #20]	; (d5dec <_Z3numiiiii+0x1a08>)
   d5dd6:	f008 fe13 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,0,0,0);
   d5dda:	f104 0116 	add.w	r1, r4, #22
   d5dde:	9700      	str	r7, [sp, #0]
   d5de0:	463b      	mov	r3, r7
   d5de2:	463a      	mov	r2, r7
   d5de4:	e18f      	b.n	d6106 <_Z3numiiiii+0x1d22>
   d5de6:	bf00      	nop
   d5de8:	80000001 	.word	0x80000001
   d5dec:	2003e31c 	.word	0x2003e31c
        
        strip.setPixelColor(pix+4,0,0,0);
        strip.setPixelColor(pix+5,0,0,0);
    }
}
if(num == 0)
   d5df0:	2800      	cmp	r0, #0
   d5df2:	f040 8323 	bne.w	d643c <_Z3numiiiii+0x2058>
{
    if((pix/8)%2 == 1)
   d5df6:	4bcc      	ldr	r3, [pc, #816]	; (d6128 <_Z3numiiiii+0x1d44>)
   d5df8:	f04f 0b08 	mov.w	fp, #8
   d5dfc:	fb94 fbfb 	sdiv	fp, r4, fp
   d5e00:	ea0b 0303 	and.w	r3, fp, r3
   d5e04:	2b00      	cmp	r3, #0
   d5e06:	bfbe      	ittt	lt
   d5e08:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d5e0c:	f063 0301 	ornlt	r3, r3, #1
   d5e10:	3301      	addlt	r3, #1
   d5e12:	2b01      	cmp	r3, #1
   d5e14:	f040 80c6 	bne.w	d5fa4 <_Z3numiiiii+0x1bc0>
    {
        strip.setPixelColor(pix,R,G,B);
   d5e18:	b2a7      	uxth	r7, r4
   d5e1a:	fa5f f885 	uxtb.w	r8, r5
   d5e1e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d5e22:	48c2      	ldr	r0, [pc, #776]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e24:	f8cd a000 	str.w	sl, [sp]
   d5e28:	fa5f f986 	uxtb.w	r9, r6
   d5e2c:	4642      	mov	r2, r8
   d5e2e:	464b      	mov	r3, r9
   d5e30:	4639      	mov	r1, r7
   d5e32:	f008 fde5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d5e36:	1e79      	subs	r1, r7, #1
   d5e38:	4642      	mov	r2, r8
   d5e3a:	464b      	mov	r3, r9
   d5e3c:	b289      	uxth	r1, r1
   d5e3e:	48bb      	ldr	r0, [pc, #748]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e40:	f8cd a000 	str.w	sl, [sp]
   d5e44:	f008 fddc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d5e48:	1eb9      	subs	r1, r7, #2
   d5e4a:	4642      	mov	r2, r8
   d5e4c:	464b      	mov	r3, r9
   d5e4e:	b289      	uxth	r1, r1
   d5e50:	48b6      	ldr	r0, [pc, #728]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e52:	f8cd a000 	str.w	sl, [sp]
   d5e56:	f008 fdd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d5e5a:	1ef9      	subs	r1, r7, #3
   d5e5c:	4642      	mov	r2, r8
   d5e5e:	464b      	mov	r3, r9
   d5e60:	b289      	uxth	r1, r1
   d5e62:	48b2      	ldr	r0, [pc, #712]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e64:	f8cd a000 	str.w	sl, [sp]
   d5e68:	f008 fdca 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d5e6c:	1f39      	subs	r1, r7, #4
   d5e6e:	4642      	mov	r2, r8
   d5e70:	464b      	mov	r3, r9
   d5e72:	b289      	uxth	r1, r1
   d5e74:	48ad      	ldr	r0, [pc, #692]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e76:	f8cd a000 	str.w	sl, [sp]
   d5e7a:	f008 fdc1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d5e7e:	1f79      	subs	r1, r7, #5
   d5e80:	4642      	mov	r2, r8
   d5e82:	464b      	mov	r3, r9
   d5e84:	b289      	uxth	r1, r1
   d5e86:	48a9      	ldr	r0, [pc, #676]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e88:	f8cd a000 	str.w	sl, [sp]
   d5e8c:	f008 fdb8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d5e90:	1fb9      	subs	r1, r7, #6
   d5e92:	4642      	mov	r2, r8
   d5e94:	464b      	mov	r3, r9
   d5e96:	b289      	uxth	r1, r1
   d5e98:	48a4      	ldr	r0, [pc, #656]	; (d612c <_Z3numiiiii+0x1d48>)
   d5e9a:	f8cd a000 	str.w	sl, [sp]
   d5e9e:	f008 fdaf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5ea2:	1c79      	adds	r1, r7, #1
   d5ea4:	4642      	mov	r2, r8
   d5ea6:	464b      	mov	r3, r9
   d5ea8:	b289      	uxth	r1, r1
   d5eaa:	48a0      	ldr	r0, [pc, #640]	; (d612c <_Z3numiiiii+0x1d48>)
   d5eac:	f8cd a000 	str.w	sl, [sp]
   d5eb0:	f008 fda6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d5eb4:	1df9      	adds	r1, r7, #7
   d5eb6:	4642      	mov	r2, r8
   d5eb8:	464b      	mov	r3, r9
   d5eba:	b289      	uxth	r1, r1
   d5ebc:	489b      	ldr	r0, [pc, #620]	; (d612c <_Z3numiiiii+0x1d48>)
   d5ebe:	f8cd a000 	str.w	sl, [sp]
   d5ec2:	f008 fd9d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d5ec6:	f107 0110 	add.w	r1, r7, #16
   d5eca:	4642      	mov	r2, r8
   d5ecc:	464b      	mov	r3, r9
   d5ece:	b289      	uxth	r1, r1
   d5ed0:	4896      	ldr	r0, [pc, #600]	; (d612c <_Z3numiiiii+0x1d48>)
   d5ed2:	f8cd a000 	str.w	sl, [sp]
   d5ed6:	f008 fd93 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d5eda:	f107 010a 	add.w	r1, r7, #10
   d5ede:	4642      	mov	r2, r8
   d5ee0:	464b      	mov	r3, r9
   d5ee2:	b289      	uxth	r1, r1
   d5ee4:	4891      	ldr	r0, [pc, #580]	; (d612c <_Z3numiiiii+0x1d48>)
   d5ee6:	f8cd a000 	str.w	sl, [sp]
   d5eea:	f008 fd89 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d5eee:	f107 0111 	add.w	r1, r7, #17
   d5ef2:	4642      	mov	r2, r8
   d5ef4:	464b      	mov	r3, r9
   d5ef6:	b289      	uxth	r1, r1
   d5ef8:	488c      	ldr	r0, [pc, #560]	; (d612c <_Z3numiiiii+0x1d48>)
   d5efa:	f8cd a000 	str.w	sl, [sp]
   d5efe:	f008 fd7f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d5f02:	f107 0112 	add.w	r1, r7, #18
   d5f06:	4642      	mov	r2, r8
   d5f08:	464b      	mov	r3, r9
   d5f0a:	b289      	uxth	r1, r1
   d5f0c:	4887      	ldr	r0, [pc, #540]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f0e:	f8cd a000 	str.w	sl, [sp]
   d5f12:	f008 fd75 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d5f16:	f107 0113 	add.w	r1, r7, #19
   d5f1a:	4642      	mov	r2, r8
   d5f1c:	464b      	mov	r3, r9
   d5f1e:	b289      	uxth	r1, r1
   d5f20:	4882      	ldr	r0, [pc, #520]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f22:	f8cd a000 	str.w	sl, [sp]
   d5f26:	f008 fd6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d5f2a:	f107 0114 	add.w	r1, r7, #20
   d5f2e:	4642      	mov	r2, r8
   d5f30:	464b      	mov	r3, r9
   d5f32:	b289      	uxth	r1, r1
   d5f34:	487d      	ldr	r0, [pc, #500]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f36:	f8cd a000 	str.w	sl, [sp]
   d5f3a:	f008 fd61 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d5f3e:	f107 0115 	add.w	r1, r7, #21
   d5f42:	4642      	mov	r2, r8
   d5f44:	464b      	mov	r3, r9
   d5f46:	b289      	uxth	r1, r1
   d5f48:	4878      	ldr	r0, [pc, #480]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f4a:	f8cd a000 	str.w	sl, [sp]
   d5f4e:	f008 fd57 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d5f52:	f107 0116 	add.w	r1, r7, #22
   d5f56:	4642      	mov	r2, r8
   d5f58:	464b      	mov	r3, r9
   d5f5a:	b289      	uxth	r1, r1
   d5f5c:	4873      	ldr	r0, [pc, #460]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f5e:	f8cd a000 	str.w	sl, [sp]
   d5f62:	f008 fd4d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d5f66:	f107 0117 	add.w	r1, r7, #23
   d5f6a:	4642      	mov	r2, r8
   d5f6c:	464b      	mov	r3, r9
   d5f6e:	b289      	uxth	r1, r1
   d5f70:	486e      	ldr	r0, [pc, #440]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f72:	f8cd a000 	str.w	sl, [sp]
   d5f76:	f008 fd43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+4,0,0,0);
   d5f7a:	f04f 0800 	mov.w	r8, #0
   d5f7e:	1d39      	adds	r1, r7, #4
   d5f80:	4643      	mov	r3, r8
   d5f82:	4642      	mov	r2, r8
   d5f84:	b289      	uxth	r1, r1
   d5f86:	4869      	ldr	r0, [pc, #420]	; (d612c <_Z3numiiiii+0x1d48>)
   d5f88:	f8cd 8000 	str.w	r8, [sp]
   d5f8c:	f008 fd38 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,0,0,0);
   d5f90:	f107 010d 	add.w	r1, r7, #13
   d5f94:	f8cd 8000 	str.w	r8, [sp]
   d5f98:	4643      	mov	r3, r8
   d5f9a:	4642      	mov	r2, r8
   d5f9c:	b289      	uxth	r1, r1
   d5f9e:	4863      	ldr	r0, [pc, #396]	; (d612c <_Z3numiiiii+0x1d48>)
   d5fa0:	f008 fd2e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d5fa4:	f01b 0701 	ands.w	r7, fp, #1
   d5fa8:	f040 8248 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d5fac:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d5fb0:	485e      	ldr	r0, [pc, #376]	; (d612c <_Z3numiiiii+0x1d48>)
   d5fb2:	f8cd 8000 	str.w	r8, [sp]
   d5fb6:	b2a4      	uxth	r4, r4
   d5fb8:	b2ed      	uxtb	r5, r5
   d5fba:	b2f6      	uxtb	r6, r6
   d5fbc:	4633      	mov	r3, r6
   d5fbe:	462a      	mov	r2, r5
   d5fc0:	4621      	mov	r1, r4
   d5fc2:	f008 fd1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d5fc6:	1c61      	adds	r1, r4, #1
   d5fc8:	4633      	mov	r3, r6
   d5fca:	462a      	mov	r2, r5
   d5fcc:	b289      	uxth	r1, r1
   d5fce:	4857      	ldr	r0, [pc, #348]	; (d612c <_Z3numiiiii+0x1d48>)
   d5fd0:	f8cd 8000 	str.w	r8, [sp]
   d5fd4:	f008 fd14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d5fd8:	1ca1      	adds	r1, r4, #2
   d5fda:	4633      	mov	r3, r6
   d5fdc:	462a      	mov	r2, r5
   d5fde:	b289      	uxth	r1, r1
   d5fe0:	4852      	ldr	r0, [pc, #328]	; (d612c <_Z3numiiiii+0x1d48>)
   d5fe2:	f8cd 8000 	str.w	r8, [sp]
   d5fe6:	f008 fd0b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d5fea:	1ce1      	adds	r1, r4, #3
   d5fec:	4633      	mov	r3, r6
   d5fee:	462a      	mov	r2, r5
   d5ff0:	b289      	uxth	r1, r1
   d5ff2:	484e      	ldr	r0, [pc, #312]	; (d612c <_Z3numiiiii+0x1d48>)
   d5ff4:	f8cd 8000 	str.w	r8, [sp]
   d5ff8:	f008 fd02 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d5ffc:	1d21      	adds	r1, r4, #4
   d5ffe:	4633      	mov	r3, r6
   d6000:	462a      	mov	r2, r5
   d6002:	b289      	uxth	r1, r1
   d6004:	4849      	ldr	r0, [pc, #292]	; (d612c <_Z3numiiiii+0x1d48>)
   d6006:	f8cd 8000 	str.w	r8, [sp]
   d600a:	f008 fcf9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d600e:	1d61      	adds	r1, r4, #5
   d6010:	4633      	mov	r3, r6
   d6012:	462a      	mov	r2, r5
   d6014:	b289      	uxth	r1, r1
   d6016:	4845      	ldr	r0, [pc, #276]	; (d612c <_Z3numiiiii+0x1d48>)
   d6018:	f8cd 8000 	str.w	r8, [sp]
   d601c:	f008 fcf0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d6020:	1da1      	adds	r1, r4, #6
   d6022:	4633      	mov	r3, r6
   d6024:	462a      	mov	r2, r5
   d6026:	b289      	uxth	r1, r1
   d6028:	4840      	ldr	r0, [pc, #256]	; (d612c <_Z3numiiiii+0x1d48>)
   d602a:	f8cd 8000 	str.w	r8, [sp]
   d602e:	f008 fce7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d6032:	f104 0109 	add.w	r1, r4, #9
   d6036:	4633      	mov	r3, r6
   d6038:	462a      	mov	r2, r5
   d603a:	b289      	uxth	r1, r1
   d603c:	483b      	ldr	r0, [pc, #236]	; (d612c <_Z3numiiiii+0x1d48>)
   d603e:	f8cd 8000 	str.w	r8, [sp]
   d6042:	f008 fcdd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6046:	f104 0116 	add.w	r1, r4, #22
   d604a:	4633      	mov	r3, r6
   d604c:	462a      	mov	r2, r5
   d604e:	b289      	uxth	r1, r1
   d6050:	4836      	ldr	r0, [pc, #216]	; (d612c <_Z3numiiiii+0x1d48>)
   d6052:	f8cd 8000 	str.w	r8, [sp]
   d6056:	f008 fcd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d605a:	f104 0119 	add.w	r1, r4, #25
   d605e:	4633      	mov	r3, r6
   d6060:	462a      	mov	r2, r5
   d6062:	b289      	uxth	r1, r1
   d6064:	4831      	ldr	r0, [pc, #196]	; (d612c <_Z3numiiiii+0x1d48>)
   d6066:	f8cd 8000 	str.w	r8, [sp]
   d606a:	f008 fcc9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d606e:	f104 011a 	add.w	r1, r4, #26
   d6072:	4633      	mov	r3, r6
   d6074:	462a      	mov	r2, r5
   d6076:	b289      	uxth	r1, r1
   d6078:	482c      	ldr	r0, [pc, #176]	; (d612c <_Z3numiiiii+0x1d48>)
   d607a:	f8cd 8000 	str.w	r8, [sp]
   d607e:	f008 fcbf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d6082:	f104 011b 	add.w	r1, r4, #27
   d6086:	4633      	mov	r3, r6
   d6088:	462a      	mov	r2, r5
   d608a:	b289      	uxth	r1, r1
   d608c:	4827      	ldr	r0, [pc, #156]	; (d612c <_Z3numiiiii+0x1d48>)
   d608e:	f8cd 8000 	str.w	r8, [sp]
   d6092:	f008 fcb5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d6096:	f104 011c 	add.w	r1, r4, #28
   d609a:	4633      	mov	r3, r6
   d609c:	462a      	mov	r2, r5
   d609e:	b289      	uxth	r1, r1
   d60a0:	4822      	ldr	r0, [pc, #136]	; (d612c <_Z3numiiiii+0x1d48>)
   d60a2:	f8cd 8000 	str.w	r8, [sp]
   d60a6:	f008 fcab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d60aa:	f104 011d 	add.w	r1, r4, #29
   d60ae:	4633      	mov	r3, r6
   d60b0:	462a      	mov	r2, r5
   d60b2:	b289      	uxth	r1, r1
   d60b4:	481d      	ldr	r0, [pc, #116]	; (d612c <_Z3numiiiii+0x1d48>)
   d60b6:	f8cd 8000 	str.w	r8, [sp]
   d60ba:	f008 fca1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d60be:	f104 011e 	add.w	r1, r4, #30
   d60c2:	4633      	mov	r3, r6
   d60c4:	462a      	mov	r2, r5
   d60c6:	b289      	uxth	r1, r1
   d60c8:	4818      	ldr	r0, [pc, #96]	; (d612c <_Z3numiiiii+0x1d48>)
   d60ca:	f8cd 8000 	str.w	r8, [sp]
   d60ce:	f008 fc97 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d60d2:	f104 011f 	add.w	r1, r4, #31
   d60d6:	4633      	mov	r3, r6
   d60d8:	462a      	mov	r2, r5
   d60da:	b289      	uxth	r1, r1
   d60dc:	4813      	ldr	r0, [pc, #76]	; (d612c <_Z3numiiiii+0x1d48>)
   d60de:	f8cd 8000 	str.w	r8, [sp]
   d60e2:	f008 fc8d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d60e6:	f104 010f 	add.w	r1, r4, #15
   d60ea:	4633      	mov	r3, r6
   d60ec:	462a      	mov	r2, r5
   d60ee:	b289      	uxth	r1, r1
   d60f0:	f8cd 8000 	str.w	r8, [sp]
   d60f4:	480d      	ldr	r0, [pc, #52]	; (d612c <_Z3numiiiii+0x1d48>)
   d60f6:	f008 fc83 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d60fa:	f104 0110 	add.w	r1, r4, #16
   d60fe:	f8cd 8000 	str.w	r8, [sp]
   d6102:	4633      	mov	r3, r6
   d6104:	462a      	mov	r2, r5
   d6106:	b289      	uxth	r1, r1
   d6108:	4808      	ldr	r0, [pc, #32]	; (d612c <_Z3numiiiii+0x1d48>)
   d610a:	f008 fc79 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        
        strip.setPixelColor(pix+12,0,0,0);
   d610e:	f104 010c 	add.w	r1, r4, #12
   d6112:	b289      	uxth	r1, r1
   d6114:	9700      	str	r7, [sp, #0]
   d6116:	463b      	mov	r3, r7
   d6118:	463a      	mov	r2, r7
   d611a:	4804      	ldr	r0, [pc, #16]	; (d612c <_Z3numiiiii+0x1d48>)
   d611c:	f008 fc70 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,0,0,0);
   d6120:	f104 0113 	add.w	r1, r4, #19
   d6124:	e4c8      	b.n	d5ab8 <_Z3numiiiii+0x16d4>
   d6126:	bf00      	nop
   d6128:	80000001 	.word	0x80000001
   d612c:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+19,0,0,0);
    }
}
if(num == 8)
{
    if((pix/8)%2 == 1)
   d6130:	4bc4      	ldr	r3, [pc, #784]	; (d6444 <_Z3numiiiii+0x2060>)
   d6132:	fb94 fbf0 	sdiv	fp, r4, r0
   d6136:	ea0b 0303 	and.w	r3, fp, r3
   d613a:	2b00      	cmp	r3, #0
   d613c:	bfbe      	ittt	lt
   d613e:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6142:	f063 0301 	ornlt	r3, r3, #1
   d6146:	3301      	addlt	r3, #1
   d6148:	2b01      	cmp	r3, #1
   d614a:	f040 80c4 	bne.w	d62d6 <_Z3numiiiii+0x1ef2>
    {
        strip.setPixelColor(pix,R,G,B);
   d614e:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6152:	48bd      	ldr	r0, [pc, #756]	; (d6448 <_Z3numiiiii+0x2064>)
   d6154:	f8cd a000 	str.w	sl, [sp]
   d6158:	b2a7      	uxth	r7, r4
   d615a:	fa5f f885 	uxtb.w	r8, r5
   d615e:	fa5f f986 	uxtb.w	r9, r6
   d6162:	464b      	mov	r3, r9
   d6164:	4642      	mov	r2, r8
   d6166:	4639      	mov	r1, r7
   d6168:	f008 fc4a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d616c:	1c79      	adds	r1, r7, #1
   d616e:	464b      	mov	r3, r9
   d6170:	4642      	mov	r2, r8
   d6172:	b289      	uxth	r1, r1
   d6174:	48b4      	ldr	r0, [pc, #720]	; (d6448 <_Z3numiiiii+0x2064>)
   d6176:	f8cd a000 	str.w	sl, [sp]
   d617a:	f008 fc41 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d617e:	f107 0110 	add.w	r1, r7, #16
   d6182:	464b      	mov	r3, r9
   d6184:	4642      	mov	r2, r8
   d6186:	b289      	uxth	r1, r1
   d6188:	48af      	ldr	r0, [pc, #700]	; (d6448 <_Z3numiiiii+0x2064>)
   d618a:	f8cd a000 	str.w	sl, [sp]
   d618e:	f008 fc37 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d6192:	f107 0111 	add.w	r1, r7, #17
   d6196:	464b      	mov	r3, r9
   d6198:	4642      	mov	r2, r8
   d619a:	b289      	uxth	r1, r1
   d619c:	48aa      	ldr	r0, [pc, #680]	; (d6448 <_Z3numiiiii+0x2064>)
   d619e:	f8cd a000 	str.w	sl, [sp]
   d61a2:	f008 fc2d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-1,R,G,B);
   d61a6:	1e79      	subs	r1, r7, #1
   d61a8:	464b      	mov	r3, r9
   d61aa:	4642      	mov	r2, r8
   d61ac:	b289      	uxth	r1, r1
   d61ae:	48a6      	ldr	r0, [pc, #664]	; (d6448 <_Z3numiiiii+0x2064>)
   d61b0:	f8cd a000 	str.w	sl, [sp]
   d61b4:	f008 fc24 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-2,R,G,B);
   d61b8:	1eb9      	subs	r1, r7, #2
   d61ba:	464b      	mov	r3, r9
   d61bc:	4642      	mov	r2, r8
   d61be:	b289      	uxth	r1, r1
   d61c0:	48a1      	ldr	r0, [pc, #644]	; (d6448 <_Z3numiiiii+0x2064>)
   d61c2:	f8cd a000 	str.w	sl, [sp]
   d61c6:	f008 fc1b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-3,R,G,B);
   d61ca:	1ef9      	subs	r1, r7, #3
   d61cc:	464b      	mov	r3, r9
   d61ce:	4642      	mov	r2, r8
   d61d0:	b289      	uxth	r1, r1
   d61d2:	489d      	ldr	r0, [pc, #628]	; (d6448 <_Z3numiiiii+0x2064>)
   d61d4:	f8cd a000 	str.w	sl, [sp]
   d61d8:	f008 fc12 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-4,R,G,B);
   d61dc:	1f39      	subs	r1, r7, #4
   d61de:	464b      	mov	r3, r9
   d61e0:	4642      	mov	r2, r8
   d61e2:	b289      	uxth	r1, r1
   d61e4:	4898      	ldr	r0, [pc, #608]	; (d6448 <_Z3numiiiii+0x2064>)
   d61e6:	f8cd a000 	str.w	sl, [sp]
   d61ea:	f008 fc09 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-5,R,G,B);
   d61ee:	1f79      	subs	r1, r7, #5
   d61f0:	464b      	mov	r3, r9
   d61f2:	4642      	mov	r2, r8
   d61f4:	b289      	uxth	r1, r1
   d61f6:	4894      	ldr	r0, [pc, #592]	; (d6448 <_Z3numiiiii+0x2064>)
   d61f8:	f8cd a000 	str.w	sl, [sp]
   d61fc:	f008 fc00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix-6,R,G,B);
   d6200:	1fb9      	subs	r1, r7, #6
   d6202:	464b      	mov	r3, r9
   d6204:	4642      	mov	r2, r8
   d6206:	b289      	uxth	r1, r1
   d6208:	488f      	ldr	r0, [pc, #572]	; (d6448 <_Z3numiiiii+0x2064>)
   d620a:	f8cd a000 	str.w	sl, [sp]
   d620e:	f008 fbf7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+7,R,G,B);
   d6212:	1df9      	adds	r1, r7, #7
   d6214:	464b      	mov	r3, r9
   d6216:	4642      	mov	r2, r8
   d6218:	b289      	uxth	r1, r1
   d621a:	488b      	ldr	r0, [pc, #556]	; (d6448 <_Z3numiiiii+0x2064>)
   d621c:	f8cd a000 	str.w	sl, [sp]
   d6220:	f008 fbee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+10,R,G,B);
   d6224:	f107 010a 	add.w	r1, r7, #10
   d6228:	464b      	mov	r3, r9
   d622a:	4642      	mov	r2, r8
   d622c:	b289      	uxth	r1, r1
   d622e:	4886      	ldr	r0, [pc, #536]	; (d6448 <_Z3numiiiii+0x2064>)
   d6230:	f8cd a000 	str.w	sl, [sp]
   d6234:	f008 fbe4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+23,R,G,B);
   d6238:	f107 0117 	add.w	r1, r7, #23
   d623c:	464b      	mov	r3, r9
   d623e:	4642      	mov	r2, r8
   d6240:	b289      	uxth	r1, r1
   d6242:	4881      	ldr	r0, [pc, #516]	; (d6448 <_Z3numiiiii+0x2064>)
   d6244:	f8cd a000 	str.w	sl, [sp]
   d6248:	f008 fbda 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d624c:	f107 0116 	add.w	r1, r7, #22
   d6250:	464b      	mov	r3, r9
   d6252:	4642      	mov	r2, r8
   d6254:	b289      	uxth	r1, r1
   d6256:	487c      	ldr	r0, [pc, #496]	; (d6448 <_Z3numiiiii+0x2064>)
   d6258:	f8cd a000 	str.w	sl, [sp]
   d625c:	f008 fbd0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+21,R,G,B);
   d6260:	f107 0115 	add.w	r1, r7, #21
   d6264:	464b      	mov	r3, r9
   d6266:	4642      	mov	r2, r8
   d6268:	b289      	uxth	r1, r1
   d626a:	4877      	ldr	r0, [pc, #476]	; (d6448 <_Z3numiiiii+0x2064>)
   d626c:	f8cd a000 	str.w	sl, [sp]
   d6270:	f008 fbc6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d6274:	f107 0114 	add.w	r1, r7, #20
   d6278:	464b      	mov	r3, r9
   d627a:	4642      	mov	r2, r8
   d627c:	b289      	uxth	r1, r1
   d627e:	4872      	ldr	r0, [pc, #456]	; (d6448 <_Z3numiiiii+0x2064>)
   d6280:	f8cd a000 	str.w	sl, [sp]
   d6284:	f008 fbbc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d6288:	f107 0113 	add.w	r1, r7, #19
   d628c:	464b      	mov	r3, r9
   d628e:	4642      	mov	r2, r8
   d6290:	b289      	uxth	r1, r1
   d6292:	486d      	ldr	r0, [pc, #436]	; (d6448 <_Z3numiiiii+0x2064>)
   d6294:	f8cd a000 	str.w	sl, [sp]
   d6298:	f008 fbb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d629c:	f107 0112 	add.w	r1, r7, #18
   d62a0:	464b      	mov	r3, r9
   d62a2:	4642      	mov	r2, r8
   d62a4:	b289      	uxth	r1, r1
   d62a6:	4868      	ldr	r0, [pc, #416]	; (d6448 <_Z3numiiiii+0x2064>)
   d62a8:	f8cd a000 	str.w	sl, [sp]
   d62ac:	f008 fba8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d62b0:	1d39      	adds	r1, r7, #4
   d62b2:	464b      	mov	r3, r9
   d62b4:	4642      	mov	r2, r8
   d62b6:	b289      	uxth	r1, r1
   d62b8:	4863      	ldr	r0, [pc, #396]	; (d6448 <_Z3numiiiii+0x2064>)
   d62ba:	f8cd a000 	str.w	sl, [sp]
   d62be:	f008 fb9f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d62c2:	f107 010d 	add.w	r1, r7, #13
   d62c6:	f8cd a000 	str.w	sl, [sp]
   d62ca:	464b      	mov	r3, r9
   d62cc:	4642      	mov	r2, r8
   d62ce:	b289      	uxth	r1, r1
   d62d0:	485d      	ldr	r0, [pc, #372]	; (d6448 <_Z3numiiiii+0x2064>)
   d62d2:	f008 fb95 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    if((pix/8)%2 == 0)
   d62d6:	f01b 0f01 	tst.w	fp, #1
   d62da:	f040 80af 	bne.w	d643c <_Z3numiiiii+0x2058>
    {
        strip.setPixelColor(pix,R,G,B);
   d62de:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d62e2:	4859      	ldr	r0, [pc, #356]	; (d6448 <_Z3numiiiii+0x2064>)
   d62e4:	9700      	str	r7, [sp, #0]
   d62e6:	b2a4      	uxth	r4, r4
   d62e8:	b2ed      	uxtb	r5, r5
   d62ea:	b2f6      	uxtb	r6, r6
   d62ec:	4633      	mov	r3, r6
   d62ee:	462a      	mov	r2, r5
   d62f0:	4621      	mov	r1, r4
   d62f2:	f008 fb85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+1,R,G,B);
   d62f6:	1c61      	adds	r1, r4, #1
   d62f8:	4633      	mov	r3, r6
   d62fa:	462a      	mov	r2, r5
   d62fc:	b289      	uxth	r1, r1
   d62fe:	4852      	ldr	r0, [pc, #328]	; (d6448 <_Z3numiiiii+0x2064>)
   d6300:	9700      	str	r7, [sp, #0]
   d6302:	f008 fb7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+2,R,G,B);
   d6306:	1ca1      	adds	r1, r4, #2
   d6308:	4633      	mov	r3, r6
   d630a:	462a      	mov	r2, r5
   d630c:	b289      	uxth	r1, r1
   d630e:	484e      	ldr	r0, [pc, #312]	; (d6448 <_Z3numiiiii+0x2064>)
   d6310:	9700      	str	r7, [sp, #0]
   d6312:	f008 fb75 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+3,R,G,B);
   d6316:	1ce1      	adds	r1, r4, #3
   d6318:	4633      	mov	r3, r6
   d631a:	462a      	mov	r2, r5
   d631c:	b289      	uxth	r1, r1
   d631e:	484a      	ldr	r0, [pc, #296]	; (d6448 <_Z3numiiiii+0x2064>)
   d6320:	9700      	str	r7, [sp, #0]
   d6322:	f008 fb6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+4,R,G,B);
   d6326:	1d21      	adds	r1, r4, #4
   d6328:	4633      	mov	r3, r6
   d632a:	462a      	mov	r2, r5
   d632c:	b289      	uxth	r1, r1
   d632e:	4846      	ldr	r0, [pc, #280]	; (d6448 <_Z3numiiiii+0x2064>)
   d6330:	9700      	str	r7, [sp, #0]
   d6332:	f008 fb65 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+5,R,G,B);
   d6336:	1d61      	adds	r1, r4, #5
   d6338:	4633      	mov	r3, r6
   d633a:	462a      	mov	r2, r5
   d633c:	b289      	uxth	r1, r1
   d633e:	4842      	ldr	r0, [pc, #264]	; (d6448 <_Z3numiiiii+0x2064>)
   d6340:	9700      	str	r7, [sp, #0]
   d6342:	f008 fb5d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+6,R,G,B);
   d6346:	1da1      	adds	r1, r4, #6
   d6348:	4633      	mov	r3, r6
   d634a:	462a      	mov	r2, r5
   d634c:	b289      	uxth	r1, r1
   d634e:	483e      	ldr	r0, [pc, #248]	; (d6448 <_Z3numiiiii+0x2064>)
   d6350:	9700      	str	r7, [sp, #0]
   d6352:	f008 fb55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+9,R,G,B);
   d6356:	f104 0109 	add.w	r1, r4, #9
   d635a:	4633      	mov	r3, r6
   d635c:	462a      	mov	r2, r5
   d635e:	b289      	uxth	r1, r1
   d6360:	4839      	ldr	r0, [pc, #228]	; (d6448 <_Z3numiiiii+0x2064>)
   d6362:	9700      	str	r7, [sp, #0]
   d6364:	f008 fb4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+22,R,G,B);
   d6368:	f104 0116 	add.w	r1, r4, #22
   d636c:	4633      	mov	r3, r6
   d636e:	462a      	mov	r2, r5
   d6370:	b289      	uxth	r1, r1
   d6372:	4835      	ldr	r0, [pc, #212]	; (d6448 <_Z3numiiiii+0x2064>)
   d6374:	9700      	str	r7, [sp, #0]
   d6376:	f008 fb43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+25,R,G,B);
   d637a:	f104 0119 	add.w	r1, r4, #25
   d637e:	4633      	mov	r3, r6
   d6380:	462a      	mov	r2, r5
   d6382:	b289      	uxth	r1, r1
   d6384:	4830      	ldr	r0, [pc, #192]	; (d6448 <_Z3numiiiii+0x2064>)
   d6386:	9700      	str	r7, [sp, #0]
   d6388:	f008 fb3a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+26,R,G,B);
   d638c:	f104 011a 	add.w	r1, r4, #26
   d6390:	4633      	mov	r3, r6
   d6392:	462a      	mov	r2, r5
   d6394:	b289      	uxth	r1, r1
   d6396:	482c      	ldr	r0, [pc, #176]	; (d6448 <_Z3numiiiii+0x2064>)
   d6398:	9700      	str	r7, [sp, #0]
   d639a:	f008 fb31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d639e:	f104 011b 	add.w	r1, r4, #27
   d63a2:	4633      	mov	r3, r6
   d63a4:	462a      	mov	r2, r5
   d63a6:	b289      	uxth	r1, r1
   d63a8:	4827      	ldr	r0, [pc, #156]	; (d6448 <_Z3numiiiii+0x2064>)
   d63aa:	9700      	str	r7, [sp, #0]
   d63ac:	f008 fb28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d63b0:	f104 011c 	add.w	r1, r4, #28
   d63b4:	4633      	mov	r3, r6
   d63b6:	462a      	mov	r2, r5
   d63b8:	b289      	uxth	r1, r1
   d63ba:	4823      	ldr	r0, [pc, #140]	; (d6448 <_Z3numiiiii+0x2064>)
   d63bc:	9700      	str	r7, [sp, #0]
   d63be:	f008 fb1f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d63c2:	f104 011d 	add.w	r1, r4, #29
   d63c6:	4633      	mov	r3, r6
   d63c8:	462a      	mov	r2, r5
   d63ca:	b289      	uxth	r1, r1
   d63cc:	481e      	ldr	r0, [pc, #120]	; (d6448 <_Z3numiiiii+0x2064>)
   d63ce:	9700      	str	r7, [sp, #0]
   d63d0:	f008 fb16 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d63d4:	f104 011e 	add.w	r1, r4, #30
   d63d8:	4633      	mov	r3, r6
   d63da:	462a      	mov	r2, r5
   d63dc:	b289      	uxth	r1, r1
   d63de:	481a      	ldr	r0, [pc, #104]	; (d6448 <_Z3numiiiii+0x2064>)
   d63e0:	9700      	str	r7, [sp, #0]
   d63e2:	f008 fb0d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d63e6:	f104 011f 	add.w	r1, r4, #31
   d63ea:	4633      	mov	r3, r6
   d63ec:	462a      	mov	r2, r5
   d63ee:	b289      	uxth	r1, r1
   d63f0:	4815      	ldr	r0, [pc, #84]	; (d6448 <_Z3numiiiii+0x2064>)
   d63f2:	9700      	str	r7, [sp, #0]
   d63f4:	f008 fb04 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d63f8:	f104 010f 	add.w	r1, r4, #15
   d63fc:	4633      	mov	r3, r6
   d63fe:	462a      	mov	r2, r5
   d6400:	b289      	uxth	r1, r1
   d6402:	4811      	ldr	r0, [pc, #68]	; (d6448 <_Z3numiiiii+0x2064>)
   d6404:	9700      	str	r7, [sp, #0]
   d6406:	f008 fafb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d640a:	f104 0110 	add.w	r1, r4, #16
   d640e:	4633      	mov	r3, r6
   d6410:	462a      	mov	r2, r5
   d6412:	b289      	uxth	r1, r1
   d6414:	480c      	ldr	r0, [pc, #48]	; (d6448 <_Z3numiiiii+0x2064>)
   d6416:	9700      	str	r7, [sp, #0]
   d6418:	f008 faf2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d641c:	f104 010c 	add.w	r1, r4, #12
   d6420:	4633      	mov	r3, r6
   d6422:	462a      	mov	r2, r5
   d6424:	b289      	uxth	r1, r1
   d6426:	9700      	str	r7, [sp, #0]
   d6428:	4807      	ldr	r0, [pc, #28]	; (d6448 <_Z3numiiiii+0x2064>)
   d642a:	f008 fae9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d642e:	f104 0113 	add.w	r1, r4, #19
   d6432:	970e      	str	r7, [sp, #56]	; 0x38
   d6434:	4633      	mov	r3, r6
   d6436:	462a      	mov	r2, r5
   d6438:	f7ff bb41 	b.w	d5abe <_Z3numiiiii+0x16da>
        
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
   d643c:	b005      	add	sp, #20
   d643e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6442:	bf00      	nop
   d6444:	80000001 	.word	0x80000001
   d6448:	2003e31c 	.word	0x2003e31c

000d644c <_Z4snumiiiii>:
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d644c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6450:	b085      	sub	sp, #20
   d6452:	461d      	mov	r5, r3
    if(num == 1)
   d6454:	2801      	cmp	r0, #1
        strip.setPixelColor(pix+12,0,0,0);
        strip.setPixelColor(pix+19,0,0,0);
    }
}
}                           
void snum(int num, int pix, int R, int G, int B){           //Code block for displaying smaller 3x5 numbers, pix arg is the top left pixel, num is the number
   d6456:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d6458:	9202      	str	r2, [sp, #8]
   d645a:	460c      	mov	r4, r1
   d645c:	9303      	str	r3, [sp, #12]
    if(num == 1)
   d645e:	f040 812d 	bne.w	d66bc <_Z4snumiiiii+0x270>
    {
        if((pix/8)%2 == 1)
   d6462:	4b94      	ldr	r3, [pc, #592]	; (d66b4 <_Z4snumiiiii+0x268>)
   d6464:	2608      	movs	r6, #8
   d6466:	fb91 f6f6 	sdiv	r6, r1, r6
   d646a:	4033      	ands	r3, r6
   d646c:	2b00      	cmp	r3, #0
   d646e:	bfbe      	ittt	lt
   d6470:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6474:	f063 0301 	ornlt	r3, r3, #1
   d6478:	3301      	addlt	r3, #1
   d647a:	2b01      	cmp	r3, #1
   d647c:	f040 8094 	bne.w	d65a8 <_Z4snumiiiii+0x15c>
        {
            strip.setPixelColor(pix,0,0,0);
   d6480:	f04f 0800 	mov.w	r8, #0
   d6484:	b28f      	uxth	r7, r1
   d6486:	4643      	mov	r3, r8
   d6488:	4642      	mov	r2, r8
   d648a:	f8cd 8000 	str.w	r8, [sp]
   d648e:	4639      	mov	r1, r7
   d6490:	4889      	ldr	r0, [pc, #548]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6492:	f008 fab5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6496:	1e79      	subs	r1, r7, #1
   d6498:	4643      	mov	r3, r8
   d649a:	4642      	mov	r2, r8
   d649c:	f8cd 8000 	str.w	r8, [sp]
   d64a0:	b289      	uxth	r1, r1
   d64a2:	4885      	ldr	r0, [pc, #532]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64a4:	f008 faac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d64a8:	1eb9      	subs	r1, r7, #2
   d64aa:	4643      	mov	r3, r8
   d64ac:	4642      	mov	r2, r8
   d64ae:	f8cd 8000 	str.w	r8, [sp]
   d64b2:	b289      	uxth	r1, r1
   d64b4:	4880      	ldr	r0, [pc, #512]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64b6:	f008 faa3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d64ba:	1ef9      	subs	r1, r7, #3
   d64bc:	4643      	mov	r3, r8
   d64be:	4642      	mov	r2, r8
   d64c0:	f8cd 8000 	str.w	r8, [sp]
   d64c4:	b289      	uxth	r1, r1
   d64c6:	487c      	ldr	r0, [pc, #496]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64c8:	f008 fa9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d64cc:	1f39      	subs	r1, r7, #4
   d64ce:	4643      	mov	r3, r8
   d64d0:	4642      	mov	r2, r8
   d64d2:	f8cd 8000 	str.w	r8, [sp]
   d64d6:	b289      	uxth	r1, r1
   d64d8:	4877      	ldr	r0, [pc, #476]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64da:	f008 fa91 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d64de:	1c79      	adds	r1, r7, #1
   d64e0:	4643      	mov	r3, r8
   d64e2:	4642      	mov	r2, r8
   d64e4:	f8cd 8000 	str.w	r8, [sp]
   d64e8:	b289      	uxth	r1, r1
   d64ea:	4873      	ldr	r0, [pc, #460]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64ec:	f008 fa88 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d64f0:	1cb9      	adds	r1, r7, #2
   d64f2:	4643      	mov	r3, r8
   d64f4:	4642      	mov	r2, r8
   d64f6:	f8cd 8000 	str.w	r8, [sp]
   d64fa:	b289      	uxth	r1, r1
   d64fc:	486e      	ldr	r0, [pc, #440]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d64fe:	f008 fa7f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6502:	1cf9      	adds	r1, r7, #3
   d6504:	4643      	mov	r3, r8
   d6506:	4642      	mov	r2, r8
   d6508:	f8cd 8000 	str.w	r8, [sp]
   d650c:	b289      	uxth	r1, r1
   d650e:	486a      	ldr	r0, [pc, #424]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6510:	f008 fa76 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6514:	1d39      	adds	r1, r7, #4
   d6516:	4643      	mov	r3, r8
   d6518:	4642      	mov	r2, r8
   d651a:	f8cd 8000 	str.w	r8, [sp]
   d651e:	b289      	uxth	r1, r1
   d6520:	4865      	ldr	r0, [pc, #404]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6522:	f008 fa6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d6526:	1d79      	adds	r1, r7, #5
   d6528:	4643      	mov	r3, r8
   d652a:	4642      	mov	r2, r8
   d652c:	f8cd 8000 	str.w	r8, [sp]
   d6530:	b289      	uxth	r1, r1
   d6532:	4861      	ldr	r0, [pc, #388]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6534:	f008 fa64 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6538:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d653c:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6540:	485d      	ldr	r0, [pc, #372]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6542:	f8cd a000 	str.w	sl, [sp]
   d6546:	fa5f f985 	uxtb.w	r9, r5
   d654a:	f107 0110 	add.w	r1, r7, #16
   d654e:	464b      	mov	r3, r9
   d6550:	4642      	mov	r2, r8
   d6552:	b289      	uxth	r1, r1
   d6554:	f008 fa54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6558:	f107 010f 	add.w	r1, r7, #15
   d655c:	464b      	mov	r3, r9
   d655e:	4642      	mov	r2, r8
   d6560:	b289      	uxth	r1, r1
   d6562:	4855      	ldr	r0, [pc, #340]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6564:	f8cd a000 	str.w	sl, [sp]
   d6568:	f008 fa4a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d656c:	f107 010e 	add.w	r1, r7, #14
   d6570:	464b      	mov	r3, r9
   d6572:	4642      	mov	r2, r8
   d6574:	b289      	uxth	r1, r1
   d6576:	4850      	ldr	r0, [pc, #320]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6578:	f8cd a000 	str.w	sl, [sp]
   d657c:	f008 fa40 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6580:	f107 010d 	add.w	r1, r7, #13
   d6584:	464b      	mov	r3, r9
   d6586:	4642      	mov	r2, r8
   d6588:	b289      	uxth	r1, r1
   d658a:	484b      	ldr	r0, [pc, #300]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d658c:	f8cd a000 	str.w	sl, [sp]
   d6590:	f008 fa36 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6594:	f107 010c 	add.w	r1, r7, #12
   d6598:	f8cd a000 	str.w	sl, [sp]
   d659c:	464b      	mov	r3, r9
   d659e:	4642      	mov	r2, r8
   d65a0:	b289      	uxth	r1, r1
   d65a2:	4845      	ldr	r0, [pc, #276]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65a4:	f008 fa2c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d65a8:	f016 0601 	ands.w	r6, r6, #1
   d65ac:	f041 82e8 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,0,0,0);
   d65b0:	b2a4      	uxth	r4, r4
   d65b2:	4633      	mov	r3, r6
   d65b4:	4632      	mov	r2, r6
   d65b6:	9600      	str	r6, [sp, #0]
   d65b8:	4621      	mov	r1, r4
   d65ba:	483f      	ldr	r0, [pc, #252]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65bc:	f008 fa20 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d65c0:	1c61      	adds	r1, r4, #1
   d65c2:	4633      	mov	r3, r6
   d65c4:	4632      	mov	r2, r6
   d65c6:	9600      	str	r6, [sp, #0]
   d65c8:	b289      	uxth	r1, r1
   d65ca:	483b      	ldr	r0, [pc, #236]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65cc:	f008 fa18 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d65d0:	1ca1      	adds	r1, r4, #2
   d65d2:	4633      	mov	r3, r6
   d65d4:	4632      	mov	r2, r6
   d65d6:	9600      	str	r6, [sp, #0]
   d65d8:	b289      	uxth	r1, r1
   d65da:	4837      	ldr	r0, [pc, #220]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65dc:	f008 fa10 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d65e0:	1ce1      	adds	r1, r4, #3
   d65e2:	4633      	mov	r3, r6
   d65e4:	4632      	mov	r2, r6
   d65e6:	9600      	str	r6, [sp, #0]
   d65e8:	b289      	uxth	r1, r1
   d65ea:	4833      	ldr	r0, [pc, #204]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65ec:	f008 fa08 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d65f0:	1d21      	adds	r1, r4, #4
   d65f2:	4633      	mov	r3, r6
   d65f4:	4632      	mov	r2, r6
   d65f6:	9600      	str	r6, [sp, #0]
   d65f8:	b289      	uxth	r1, r1
   d65fa:	482f      	ldr	r0, [pc, #188]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d65fc:	f008 fa00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d6600:	f104 010b 	add.w	r1, r4, #11
   d6604:	4633      	mov	r3, r6
   d6606:	4632      	mov	r2, r6
   d6608:	9600      	str	r6, [sp, #0]
   d660a:	b289      	uxth	r1, r1
   d660c:	482a      	ldr	r0, [pc, #168]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d660e:	f008 f9f7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6612:	f104 010c 	add.w	r1, r4, #12
   d6616:	4633      	mov	r3, r6
   d6618:	4632      	mov	r2, r6
   d661a:	9600      	str	r6, [sp, #0]
   d661c:	b289      	uxth	r1, r1
   d661e:	4826      	ldr	r0, [pc, #152]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6620:	f008 f9ee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d6624:	f104 010d 	add.w	r1, r4, #13
   d6628:	4633      	mov	r3, r6
   d662a:	4632      	mov	r2, r6
   d662c:	9600      	str	r6, [sp, #0]
   d662e:	b289      	uxth	r1, r1
   d6630:	4821      	ldr	r0, [pc, #132]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6632:	f008 f9e5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6636:	f104 010e 	add.w	r1, r4, #14
   d663a:	4633      	mov	r3, r6
   d663c:	4632      	mov	r2, r6
   d663e:	9600      	str	r6, [sp, #0]
   d6640:	b289      	uxth	r1, r1
   d6642:	481d      	ldr	r0, [pc, #116]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6644:	f008 f9dc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6648:	f104 010f 	add.w	r1, r4, #15
   d664c:	4633      	mov	r3, r6
   d664e:	4632      	mov	r2, r6
   d6650:	9600      	str	r6, [sp, #0]
   d6652:	b289      	uxth	r1, r1
   d6654:	4818      	ldr	r0, [pc, #96]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6656:	f008 f9d3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d665a:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d665e:	f89d 700c 	ldrb.w	r7, [sp, #12]
   d6662:	4815      	ldr	r0, [pc, #84]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6664:	9700      	str	r7, [sp, #0]
   d6666:	b2ed      	uxtb	r5, r5
   d6668:	f104 0110 	add.w	r1, r4, #16
   d666c:	462b      	mov	r3, r5
   d666e:	4632      	mov	r2, r6
   d6670:	b289      	uxth	r1, r1
   d6672:	f008 f9c5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6676:	f104 0111 	add.w	r1, r4, #17
   d667a:	462b      	mov	r3, r5
   d667c:	4632      	mov	r2, r6
   d667e:	b289      	uxth	r1, r1
   d6680:	480d      	ldr	r0, [pc, #52]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6682:	9700      	str	r7, [sp, #0]
   d6684:	f008 f9bc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6688:	f104 0112 	add.w	r1, r4, #18
   d668c:	462b      	mov	r3, r5
   d668e:	4632      	mov	r2, r6
   d6690:	b289      	uxth	r1, r1
   d6692:	4809      	ldr	r0, [pc, #36]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d6694:	9700      	str	r7, [sp, #0]
   d6696:	f008 f9b3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d669a:	f104 0113 	add.w	r1, r4, #19
   d669e:	b289      	uxth	r1, r1
   d66a0:	9700      	str	r7, [sp, #0]
   d66a2:	462b      	mov	r3, r5
   d66a4:	4632      	mov	r2, r6
   d66a6:	4804      	ldr	r0, [pc, #16]	; (d66b8 <_Z4snumiiiii+0x26c>)
   d66a8:	f008 f9aa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d66ac:	f104 0114 	add.w	r1, r4, #20
   d66b0:	9700      	str	r7, [sp, #0]
   d66b2:	e139      	b.n	d6928 <_Z4snumiiiii+0x4dc>
   d66b4:	80000001 	.word	0x80000001
   d66b8:	2003e31c 	.word	0x2003e31c
        }
    }
    if(num == 2)
   d66bc:	2802      	cmp	r0, #2
   d66be:	f040 813f 	bne.w	d6940 <_Z4snumiiiii+0x4f4>
    {
        if((pix/8)%2 == 1)
   d66c2:	4b9d      	ldr	r3, [pc, #628]	; (d6938 <_Z4snumiiiii+0x4ec>)
   d66c4:	2708      	movs	r7, #8
   d66c6:	fb91 f7f7 	sdiv	r7, r1, r7
   d66ca:	403b      	ands	r3, r7
   d66cc:	2b00      	cmp	r3, #0
   d66ce:	bfbe      	ittt	lt
   d66d0:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d66d4:	f063 0301 	ornlt	r3, r3, #1
   d66d8:	3301      	addlt	r3, #1
   d66da:	2b01      	cmp	r3, #1
   d66dc:	f040 8094 	bne.w	d6808 <_Z4snumiiiii+0x3bc>
        {
            strip.setPixelColor(pix,R,G,B);
   d66e0:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d66e4:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d66e8:	4894      	ldr	r0, [pc, #592]	; (d693c <_Z4snumiiiii+0x4f0>)
   d66ea:	f8cd a000 	str.w	sl, [sp]
   d66ee:	b28e      	uxth	r6, r1
   d66f0:	fa5f f985 	uxtb.w	r9, r5
   d66f4:	464b      	mov	r3, r9
   d66f6:	4642      	mov	r2, r8
   d66f8:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d66fa:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 2)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d66fe:	f008 f97f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6702:	1e71      	subs	r1, r6, #1
   d6704:	465b      	mov	r3, fp
   d6706:	465a      	mov	r2, fp
   d6708:	b289      	uxth	r1, r1
   d670a:	488c      	ldr	r0, [pc, #560]	; (d693c <_Z4snumiiiii+0x4f0>)
   d670c:	f8cd b000 	str.w	fp, [sp]
   d6710:	f008 f976 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6714:	1eb1      	subs	r1, r6, #2
   d6716:	464b      	mov	r3, r9
   d6718:	4642      	mov	r2, r8
   d671a:	b289      	uxth	r1, r1
   d671c:	4887      	ldr	r0, [pc, #540]	; (d693c <_Z4snumiiiii+0x4f0>)
   d671e:	f8cd a000 	str.w	sl, [sp]
   d6722:	f008 f96d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d6726:	1ef1      	subs	r1, r6, #3
   d6728:	464b      	mov	r3, r9
   d672a:	4642      	mov	r2, r8
   d672c:	b289      	uxth	r1, r1
   d672e:	4883      	ldr	r0, [pc, #524]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6730:	f8cd a000 	str.w	sl, [sp]
   d6734:	f008 f964 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6738:	1f31      	subs	r1, r6, #4
   d673a:	464b      	mov	r3, r9
   d673c:	4642      	mov	r2, r8
   d673e:	b289      	uxth	r1, r1
   d6740:	487e      	ldr	r0, [pc, #504]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6742:	f8cd a000 	str.w	sl, [sp]
   d6746:	f008 f95b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d674a:	1c71      	adds	r1, r6, #1
   d674c:	464b      	mov	r3, r9
   d674e:	4642      	mov	r2, r8
   d6750:	b289      	uxth	r1, r1
   d6752:	487a      	ldr	r0, [pc, #488]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6754:	f8cd a000 	str.w	sl, [sp]
   d6758:	f008 f952 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d675c:	1cb1      	adds	r1, r6, #2
   d675e:	465b      	mov	r3, fp
   d6760:	465a      	mov	r2, fp
   d6762:	b289      	uxth	r1, r1
   d6764:	4875      	ldr	r0, [pc, #468]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6766:	f8cd b000 	str.w	fp, [sp]
   d676a:	f008 f949 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d676e:	1cf1      	adds	r1, r6, #3
   d6770:	464b      	mov	r3, r9
   d6772:	4642      	mov	r2, r8
   d6774:	b289      	uxth	r1, r1
   d6776:	4871      	ldr	r0, [pc, #452]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6778:	f8cd a000 	str.w	sl, [sp]
   d677c:	f008 f940 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6780:	1d31      	adds	r1, r6, #4
   d6782:	465b      	mov	r3, fp
   d6784:	465a      	mov	r2, fp
   d6786:	b289      	uxth	r1, r1
   d6788:	486c      	ldr	r0, [pc, #432]	; (d693c <_Z4snumiiiii+0x4f0>)
   d678a:	f8cd b000 	str.w	fp, [sp]
   d678e:	f008 f937 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6792:	1d71      	adds	r1, r6, #5
   d6794:	464b      	mov	r3, r9
   d6796:	4642      	mov	r2, r8
   d6798:	b289      	uxth	r1, r1
   d679a:	4868      	ldr	r0, [pc, #416]	; (d693c <_Z4snumiiiii+0x4f0>)
   d679c:	f8cd a000 	str.w	sl, [sp]
   d67a0:	f008 f92e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d67a4:	f106 0110 	add.w	r1, r6, #16
   d67a8:	464b      	mov	r3, r9
   d67aa:	4642      	mov	r2, r8
   d67ac:	b289      	uxth	r1, r1
   d67ae:	4863      	ldr	r0, [pc, #396]	; (d693c <_Z4snumiiiii+0x4f0>)
   d67b0:	f8cd a000 	str.w	sl, [sp]
   d67b4:	f008 f924 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d67b8:	f106 010f 	add.w	r1, r6, #15
   d67bc:	464b      	mov	r3, r9
   d67be:	4642      	mov	r2, r8
   d67c0:	b289      	uxth	r1, r1
   d67c2:	485e      	ldr	r0, [pc, #376]	; (d693c <_Z4snumiiiii+0x4f0>)
   d67c4:	f8cd a000 	str.w	sl, [sp]
   d67c8:	f008 f91a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d67cc:	f106 010e 	add.w	r1, r6, #14
   d67d0:	464b      	mov	r3, r9
   d67d2:	4642      	mov	r2, r8
   d67d4:	b289      	uxth	r1, r1
   d67d6:	4859      	ldr	r0, [pc, #356]	; (d693c <_Z4snumiiiii+0x4f0>)
   d67d8:	f8cd a000 	str.w	sl, [sp]
   d67dc:	f008 f910 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d67e0:	f106 010d 	add.w	r1, r6, #13
   d67e4:	465b      	mov	r3, fp
   d67e6:	465a      	mov	r2, fp
   d67e8:	b289      	uxth	r1, r1
   d67ea:	4854      	ldr	r0, [pc, #336]	; (d693c <_Z4snumiiiii+0x4f0>)
   d67ec:	f8cd b000 	str.w	fp, [sp]
   d67f0:	f008 f906 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d67f4:	f106 010c 	add.w	r1, r6, #12
   d67f8:	f8cd a000 	str.w	sl, [sp]
   d67fc:	464b      	mov	r3, r9
   d67fe:	4642      	mov	r2, r8
   d6800:	b289      	uxth	r1, r1
   d6802:	484e      	ldr	r0, [pc, #312]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6804:	f008 f8fc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6808:	f017 0701 	ands.w	r7, r7, #1
   d680c:	f041 81b8 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6810:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6814:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6818:	4848      	ldr	r0, [pc, #288]	; (d693c <_Z4snumiiiii+0x4f0>)
   d681a:	f8cd 8000 	str.w	r8, [sp]
   d681e:	b2a4      	uxth	r4, r4
   d6820:	b2ed      	uxtb	r5, r5
   d6822:	462b      	mov	r3, r5
   d6824:	4632      	mov	r2, r6
   d6826:	4621      	mov	r1, r4
   d6828:	f008 f8ea 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d682c:	1c61      	adds	r1, r4, #1
   d682e:	463b      	mov	r3, r7
   d6830:	463a      	mov	r2, r7
   d6832:	b289      	uxth	r1, r1
   d6834:	4841      	ldr	r0, [pc, #260]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6836:	9700      	str	r7, [sp, #0]
   d6838:	f008 f8e2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d683c:	1ca1      	adds	r1, r4, #2
   d683e:	462b      	mov	r3, r5
   d6840:	4632      	mov	r2, r6
   d6842:	b289      	uxth	r1, r1
   d6844:	483d      	ldr	r0, [pc, #244]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6846:	f8cd 8000 	str.w	r8, [sp]
   d684a:	f008 f8d9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d684e:	1ce1      	adds	r1, r4, #3
   d6850:	462b      	mov	r3, r5
   d6852:	4632      	mov	r2, r6
   d6854:	b289      	uxth	r1, r1
   d6856:	4839      	ldr	r0, [pc, #228]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6858:	f8cd 8000 	str.w	r8, [sp]
   d685c:	f008 f8d0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6860:	1d21      	adds	r1, r4, #4
   d6862:	462b      	mov	r3, r5
   d6864:	4632      	mov	r2, r6
   d6866:	b289      	uxth	r1, r1
   d6868:	4834      	ldr	r0, [pc, #208]	; (d693c <_Z4snumiiiii+0x4f0>)
   d686a:	f8cd 8000 	str.w	r8, [sp]
   d686e:	f008 f8c7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6872:	f104 010b 	add.w	r1, r4, #11
   d6876:	462b      	mov	r3, r5
   d6878:	4632      	mov	r2, r6
   d687a:	b289      	uxth	r1, r1
   d687c:	482f      	ldr	r0, [pc, #188]	; (d693c <_Z4snumiiiii+0x4f0>)
   d687e:	f8cd 8000 	str.w	r8, [sp]
   d6882:	f008 f8bd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6886:	f104 010c 	add.w	r1, r4, #12
   d688a:	463b      	mov	r3, r7
   d688c:	463a      	mov	r2, r7
   d688e:	b289      	uxth	r1, r1
   d6890:	482a      	ldr	r0, [pc, #168]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6892:	9700      	str	r7, [sp, #0]
   d6894:	f008 f8b4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6898:	f104 010d 	add.w	r1, r4, #13
   d689c:	462b      	mov	r3, r5
   d689e:	4632      	mov	r2, r6
   d68a0:	b289      	uxth	r1, r1
   d68a2:	4826      	ldr	r0, [pc, #152]	; (d693c <_Z4snumiiiii+0x4f0>)
   d68a4:	f8cd 8000 	str.w	r8, [sp]
   d68a8:	f008 f8aa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d68ac:	f104 010e 	add.w	r1, r4, #14
   d68b0:	463b      	mov	r3, r7
   d68b2:	463a      	mov	r2, r7
   d68b4:	b289      	uxth	r1, r1
   d68b6:	4821      	ldr	r0, [pc, #132]	; (d693c <_Z4snumiiiii+0x4f0>)
   d68b8:	9700      	str	r7, [sp, #0]
   d68ba:	f008 f8a1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d68be:	f104 010f 	add.w	r1, r4, #15
   d68c2:	462b      	mov	r3, r5
   d68c4:	4632      	mov	r2, r6
   d68c6:	b289      	uxth	r1, r1
   d68c8:	481c      	ldr	r0, [pc, #112]	; (d693c <_Z4snumiiiii+0x4f0>)
   d68ca:	f8cd 8000 	str.w	r8, [sp]
   d68ce:	f008 f897 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d68d2:	f104 0110 	add.w	r1, r4, #16
   d68d6:	462b      	mov	r3, r5
   d68d8:	4632      	mov	r2, r6
   d68da:	b289      	uxth	r1, r1
   d68dc:	4817      	ldr	r0, [pc, #92]	; (d693c <_Z4snumiiiii+0x4f0>)
   d68de:	f8cd 8000 	str.w	r8, [sp]
   d68e2:	f008 f88d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d68e6:	f104 0111 	add.w	r1, r4, #17
   d68ea:	462b      	mov	r3, r5
   d68ec:	4632      	mov	r2, r6
   d68ee:	b289      	uxth	r1, r1
   d68f0:	4812      	ldr	r0, [pc, #72]	; (d693c <_Z4snumiiiii+0x4f0>)
   d68f2:	f8cd 8000 	str.w	r8, [sp]
   d68f6:	f008 f883 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d68fa:	f104 0112 	add.w	r1, r4, #18
   d68fe:	462b      	mov	r3, r5
   d6900:	4632      	mov	r2, r6
   d6902:	b289      	uxth	r1, r1
   d6904:	f8cd 8000 	str.w	r8, [sp]
   d6908:	480c      	ldr	r0, [pc, #48]	; (d693c <_Z4snumiiiii+0x4f0>)
   d690a:	f008 f879 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,0,0,0);
   d690e:	f104 0113 	add.w	r1, r4, #19
   d6912:	9700      	str	r7, [sp, #0]
   d6914:	463b      	mov	r3, r7
   d6916:	463a      	mov	r2, r7
   d6918:	b289      	uxth	r1, r1
   d691a:	4808      	ldr	r0, [pc, #32]	; (d693c <_Z4snumiiiii+0x4f0>)
   d691c:	f008 f870 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d6920:	f104 0114 	add.w	r1, r4, #20
   d6924:	f8cd 8000 	str.w	r8, [sp]
   d6928:	462b      	mov	r3, r5
   d692a:	4632      	mov	r2, r6
   d692c:	b289      	uxth	r1, r1
   d692e:	4803      	ldr	r0, [pc, #12]	; (d693c <_Z4snumiiiii+0x4f0>)
   d6930:	f008 f866 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d6934:	f001 b924 	b.w	d7b80 <_Z4snumiiiii+0x1734>
   d6938:	80000001 	.word	0x80000001
   d693c:	2003e31c 	.word	0x2003e31c
        }
    }
    if(num == 3)
   d6940:	2803      	cmp	r0, #3
   d6942:	f040 811d 	bne.w	d6b80 <_Z4snumiiiii+0x734>
    {
        if((pix/8)%2 == 1)
   d6946:	4b8c      	ldr	r3, [pc, #560]	; (d6b78 <_Z4snumiiiii+0x72c>)
   d6948:	2708      	movs	r7, #8
   d694a:	fb91 f7f7 	sdiv	r7, r1, r7
   d694e:	403b      	ands	r3, r7
   d6950:	2b00      	cmp	r3, #0
   d6952:	bfbe      	ittt	lt
   d6954:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6958:	f063 0301 	ornlt	r3, r3, #1
   d695c:	3301      	addlt	r3, #1
   d695e:	2b01      	cmp	r3, #1
   d6960:	f040 8094 	bne.w	d6a8c <_Z4snumiiiii+0x640>
        {
            strip.setPixelColor(pix,R,G,B);
   d6964:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6968:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d696c:	4883      	ldr	r0, [pc, #524]	; (d6b7c <_Z4snumiiiii+0x730>)
   d696e:	f8cd a000 	str.w	sl, [sp]
   d6972:	b28e      	uxth	r6, r1
   d6974:	fa5f f985 	uxtb.w	r9, r5
   d6978:	464b      	mov	r3, r9
   d697a:	4642      	mov	r2, r8
   d697c:	4631      	mov	r1, r6
            strip.setPixelColor(pix-1,0,0,0);
   d697e:	f04f 0b00 	mov.w	fp, #0
    }
    if(num == 3)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d6982:	f008 f83d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d6986:	1e71      	subs	r1, r6, #1
   d6988:	465b      	mov	r3, fp
   d698a:	465a      	mov	r2, fp
   d698c:	b289      	uxth	r1, r1
   d698e:	487b      	ldr	r0, [pc, #492]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6990:	f8cd b000 	str.w	fp, [sp]
   d6994:	f008 f834 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6998:	1eb1      	subs	r1, r6, #2
   d699a:	464b      	mov	r3, r9
   d699c:	4642      	mov	r2, r8
   d699e:	b289      	uxth	r1, r1
   d69a0:	4876      	ldr	r0, [pc, #472]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69a2:	f8cd a000 	str.w	sl, [sp]
   d69a6:	f008 f82b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d69aa:	1ef1      	subs	r1, r6, #3
   d69ac:	465b      	mov	r3, fp
   d69ae:	465a      	mov	r2, fp
   d69b0:	b289      	uxth	r1, r1
   d69b2:	4872      	ldr	r0, [pc, #456]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69b4:	f8cd b000 	str.w	fp, [sp]
   d69b8:	f008 f822 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d69bc:	1f31      	subs	r1, r6, #4
   d69be:	464b      	mov	r3, r9
   d69c0:	4642      	mov	r2, r8
   d69c2:	b289      	uxth	r1, r1
   d69c4:	486d      	ldr	r0, [pc, #436]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69c6:	f8cd a000 	str.w	sl, [sp]
   d69ca:	f008 f819 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d69ce:	1c71      	adds	r1, r6, #1
   d69d0:	464b      	mov	r3, r9
   d69d2:	4642      	mov	r2, r8
   d69d4:	b289      	uxth	r1, r1
   d69d6:	4869      	ldr	r0, [pc, #420]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69d8:	f8cd a000 	str.w	sl, [sp]
   d69dc:	f008 f810 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d69e0:	1cb1      	adds	r1, r6, #2
   d69e2:	465b      	mov	r3, fp
   d69e4:	465a      	mov	r2, fp
   d69e6:	b289      	uxth	r1, r1
   d69e8:	4864      	ldr	r0, [pc, #400]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69ea:	f8cd b000 	str.w	fp, [sp]
   d69ee:	f008 f807 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d69f2:	1cf1      	adds	r1, r6, #3
   d69f4:	464b      	mov	r3, r9
   d69f6:	4642      	mov	r2, r8
   d69f8:	b289      	uxth	r1, r1
   d69fa:	4860      	ldr	r0, [pc, #384]	; (d6b7c <_Z4snumiiiii+0x730>)
   d69fc:	f8cd a000 	str.w	sl, [sp]
   d6a00:	f007 fffe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6a04:	1d31      	adds	r1, r6, #4
   d6a06:	465b      	mov	r3, fp
   d6a08:	465a      	mov	r2, fp
   d6a0a:	b289      	uxth	r1, r1
   d6a0c:	485b      	ldr	r0, [pc, #364]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a0e:	f8cd b000 	str.w	fp, [sp]
   d6a12:	f007 fff5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6a16:	1d71      	adds	r1, r6, #5
   d6a18:	464b      	mov	r3, r9
   d6a1a:	4642      	mov	r2, r8
   d6a1c:	b289      	uxth	r1, r1
   d6a1e:	4857      	ldr	r0, [pc, #348]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a20:	f8cd a000 	str.w	sl, [sp]
   d6a24:	f007 ffec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6a28:	f106 0110 	add.w	r1, r6, #16
   d6a2c:	464b      	mov	r3, r9
   d6a2e:	4642      	mov	r2, r8
   d6a30:	b289      	uxth	r1, r1
   d6a32:	4852      	ldr	r0, [pc, #328]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a34:	f8cd a000 	str.w	sl, [sp]
   d6a38:	f007 ffe2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6a3c:	f106 010f 	add.w	r1, r6, #15
   d6a40:	464b      	mov	r3, r9
   d6a42:	4642      	mov	r2, r8
   d6a44:	b289      	uxth	r1, r1
   d6a46:	484d      	ldr	r0, [pc, #308]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a48:	f8cd a000 	str.w	sl, [sp]
   d6a4c:	f007 ffd8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6a50:	f106 010e 	add.w	r1, r6, #14
   d6a54:	464b      	mov	r3, r9
   d6a56:	4642      	mov	r2, r8
   d6a58:	b289      	uxth	r1, r1
   d6a5a:	4848      	ldr	r0, [pc, #288]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a5c:	f8cd a000 	str.w	sl, [sp]
   d6a60:	f007 ffce 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6a64:	f106 010d 	add.w	r1, r6, #13
   d6a68:	464b      	mov	r3, r9
   d6a6a:	4642      	mov	r2, r8
   d6a6c:	b289      	uxth	r1, r1
   d6a6e:	4843      	ldr	r0, [pc, #268]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a70:	f8cd a000 	str.w	sl, [sp]
   d6a74:	f007 ffc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6a78:	f106 010c 	add.w	r1, r6, #12
   d6a7c:	f8cd a000 	str.w	sl, [sp]
   d6a80:	464b      	mov	r3, r9
   d6a82:	4642      	mov	r2, r8
   d6a84:	b289      	uxth	r1, r1
   d6a86:	483d      	ldr	r0, [pc, #244]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a88:	f007 ffba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6a8c:	f017 0701 	ands.w	r7, r7, #1
   d6a90:	f041 8076 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6a94:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6a98:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6a9c:	4837      	ldr	r0, [pc, #220]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6a9e:	f8cd 8000 	str.w	r8, [sp]
   d6aa2:	b2a4      	uxth	r4, r4
   d6aa4:	b2ed      	uxtb	r5, r5
   d6aa6:	462b      	mov	r3, r5
   d6aa8:	4632      	mov	r2, r6
   d6aaa:	4621      	mov	r1, r4
   d6aac:	f007 ffa8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6ab0:	1c61      	adds	r1, r4, #1
   d6ab2:	463b      	mov	r3, r7
   d6ab4:	463a      	mov	r2, r7
   d6ab6:	b289      	uxth	r1, r1
   d6ab8:	4830      	ldr	r0, [pc, #192]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6aba:	9700      	str	r7, [sp, #0]
   d6abc:	f007 ffa0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6ac0:	1ca1      	adds	r1, r4, #2
   d6ac2:	462b      	mov	r3, r5
   d6ac4:	4632      	mov	r2, r6
   d6ac6:	b289      	uxth	r1, r1
   d6ac8:	482c      	ldr	r0, [pc, #176]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6aca:	f8cd 8000 	str.w	r8, [sp]
   d6ace:	f007 ff97 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6ad2:	1ce1      	adds	r1, r4, #3
   d6ad4:	463b      	mov	r3, r7
   d6ad6:	463a      	mov	r2, r7
   d6ad8:	b289      	uxth	r1, r1
   d6ada:	4828      	ldr	r0, [pc, #160]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6adc:	9700      	str	r7, [sp, #0]
   d6ade:	f007 ff8f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6ae2:	1d21      	adds	r1, r4, #4
   d6ae4:	462b      	mov	r3, r5
   d6ae6:	4632      	mov	r2, r6
   d6ae8:	b289      	uxth	r1, r1
   d6aea:	4824      	ldr	r0, [pc, #144]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6aec:	f8cd 8000 	str.w	r8, [sp]
   d6af0:	f007 ff86 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6af4:	f104 010b 	add.w	r1, r4, #11
   d6af8:	462b      	mov	r3, r5
   d6afa:	4632      	mov	r2, r6
   d6afc:	b289      	uxth	r1, r1
   d6afe:	481f      	ldr	r0, [pc, #124]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b00:	f8cd 8000 	str.w	r8, [sp]
   d6b04:	f007 ff7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6b08:	f104 010c 	add.w	r1, r4, #12
   d6b0c:	463b      	mov	r3, r7
   d6b0e:	463a      	mov	r2, r7
   d6b10:	b289      	uxth	r1, r1
   d6b12:	481a      	ldr	r0, [pc, #104]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b14:	9700      	str	r7, [sp, #0]
   d6b16:	f007 ff73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6b1a:	f104 010d 	add.w	r1, r4, #13
   d6b1e:	462b      	mov	r3, r5
   d6b20:	4632      	mov	r2, r6
   d6b22:	b289      	uxth	r1, r1
   d6b24:	4815      	ldr	r0, [pc, #84]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b26:	f8cd 8000 	str.w	r8, [sp]
   d6b2a:	f007 ff69 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6b2e:	f104 010e 	add.w	r1, r4, #14
   d6b32:	463b      	mov	r3, r7
   d6b34:	463a      	mov	r2, r7
   d6b36:	b289      	uxth	r1, r1
   d6b38:	4810      	ldr	r0, [pc, #64]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b3a:	9700      	str	r7, [sp, #0]
   d6b3c:	f007 ff60 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6b40:	f104 010f 	add.w	r1, r4, #15
   d6b44:	462b      	mov	r3, r5
   d6b46:	4632      	mov	r2, r6
   d6b48:	b289      	uxth	r1, r1
   d6b4a:	480c      	ldr	r0, [pc, #48]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b4c:	f8cd 8000 	str.w	r8, [sp]
   d6b50:	f007 ff56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6b54:	f104 0110 	add.w	r1, r4, #16
   d6b58:	462b      	mov	r3, r5
   d6b5a:	4632      	mov	r2, r6
   d6b5c:	b289      	uxth	r1, r1
   d6b5e:	f8cd 8000 	str.w	r8, [sp]
   d6b62:	4806      	ldr	r0, [pc, #24]	; (d6b7c <_Z4snumiiiii+0x730>)
   d6b64:	f007 ff4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d6b68:	f104 0111 	add.w	r1, r4, #17
   d6b6c:	f8cd 8000 	str.w	r8, [sp]
   d6b70:	462b      	mov	r3, r5
   d6b72:	4632      	mov	r2, r6
   d6b74:	e121      	b.n	d6dba <_Z4snumiiiii+0x96e>
   d6b76:	bf00      	nop
   d6b78:	80000001 	.word	0x80000001
   d6b7c:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
   d6b80:	2804      	cmp	r0, #4
   d6b82:	f000 8133 	beq.w	d6dec <_Z4snumiiiii+0x9a0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 5)
   d6b86:	2805      	cmp	r0, #5
   d6b88:	f040 826e 	bne.w	d7068 <_Z4snumiiiii+0xc1c>
    {
        if((pix/8)%2 == 1)
   d6b8c:	4b95      	ldr	r3, [pc, #596]	; (d6de4 <_Z4snumiiiii+0x998>)
   d6b8e:	2708      	movs	r7, #8
   d6b90:	fb94 f7f7 	sdiv	r7, r4, r7
   d6b94:	403b      	ands	r3, r7
   d6b96:	2b00      	cmp	r3, #0
   d6b98:	bfbe      	ittt	lt
   d6b9a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6b9e:	f063 0301 	ornlt	r3, r3, #1
   d6ba2:	3301      	addlt	r3, #1
   d6ba4:	2b01      	cmp	r3, #1
   d6ba6:	f040 8094 	bne.w	d6cd2 <_Z4snumiiiii+0x886>
        {
            strip.setPixelColor(pix,R,G,B);
   d6baa:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d6bae:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d6bb2:	488d      	ldr	r0, [pc, #564]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6bb4:	f8cd a000 	str.w	sl, [sp]
   d6bb8:	b2a6      	uxth	r6, r4
   d6bba:	fa5f f985 	uxtb.w	r9, r5
   d6bbe:	464b      	mov	r3, r9
   d6bc0:	4642      	mov	r2, r8
   d6bc2:	4631      	mov	r1, r6
   d6bc4:	f007 ff1c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6bc8:	1e71      	subs	r1, r6, #1
   d6bca:	464b      	mov	r3, r9
   d6bcc:	4642      	mov	r2, r8
   d6bce:	b289      	uxth	r1, r1
   d6bd0:	4885      	ldr	r0, [pc, #532]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6bd2:	f8cd a000 	str.w	sl, [sp]
   d6bd6:	f007 ff13 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6bda:	1eb1      	subs	r1, r6, #2
   d6bdc:	464b      	mov	r3, r9
   d6bde:	4642      	mov	r2, r8
   d6be0:	b289      	uxth	r1, r1
   d6be2:	4881      	ldr	r0, [pc, #516]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6be4:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d6be8:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d6bec:	f007 ff08 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6bf0:	1ef1      	subs	r1, r6, #3
   d6bf2:	465b      	mov	r3, fp
   d6bf4:	465a      	mov	r2, fp
   d6bf6:	b289      	uxth	r1, r1
   d6bf8:	487b      	ldr	r0, [pc, #492]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6bfa:	f8cd b000 	str.w	fp, [sp]
   d6bfe:	f007 feff 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d6c02:	1f31      	subs	r1, r6, #4
   d6c04:	464b      	mov	r3, r9
   d6c06:	4642      	mov	r2, r8
   d6c08:	b289      	uxth	r1, r1
   d6c0a:	4877      	ldr	r0, [pc, #476]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c0c:	f8cd a000 	str.w	sl, [sp]
   d6c10:	f007 fef6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6c14:	1c71      	adds	r1, r6, #1
   d6c16:	464b      	mov	r3, r9
   d6c18:	4642      	mov	r2, r8
   d6c1a:	b289      	uxth	r1, r1
   d6c1c:	4872      	ldr	r0, [pc, #456]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c1e:	f8cd a000 	str.w	sl, [sp]
   d6c22:	f007 feed 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6c26:	1cb1      	adds	r1, r6, #2
   d6c28:	465b      	mov	r3, fp
   d6c2a:	465a      	mov	r2, fp
   d6c2c:	b289      	uxth	r1, r1
   d6c2e:	486e      	ldr	r0, [pc, #440]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c30:	f8cd b000 	str.w	fp, [sp]
   d6c34:	f007 fee4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6c38:	1cf1      	adds	r1, r6, #3
   d6c3a:	464b      	mov	r3, r9
   d6c3c:	4642      	mov	r2, r8
   d6c3e:	b289      	uxth	r1, r1
   d6c40:	4869      	ldr	r0, [pc, #420]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c42:	f8cd a000 	str.w	sl, [sp]
   d6c46:	f007 fedb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6c4a:	1d31      	adds	r1, r6, #4
   d6c4c:	465b      	mov	r3, fp
   d6c4e:	465a      	mov	r2, fp
   d6c50:	b289      	uxth	r1, r1
   d6c52:	4865      	ldr	r0, [pc, #404]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c54:	f8cd b000 	str.w	fp, [sp]
   d6c58:	f007 fed2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d6c5c:	1d71      	adds	r1, r6, #5
   d6c5e:	464b      	mov	r3, r9
   d6c60:	4642      	mov	r2, r8
   d6c62:	b289      	uxth	r1, r1
   d6c64:	4860      	ldr	r0, [pc, #384]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c66:	f8cd a000 	str.w	sl, [sp]
   d6c6a:	f007 fec9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6c6e:	f106 0110 	add.w	r1, r6, #16
   d6c72:	464b      	mov	r3, r9
   d6c74:	4642      	mov	r2, r8
   d6c76:	b289      	uxth	r1, r1
   d6c78:	485b      	ldr	r0, [pc, #364]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c7a:	f8cd a000 	str.w	sl, [sp]
   d6c7e:	f007 febf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6c82:	f106 010f 	add.w	r1, r6, #15
   d6c86:	465b      	mov	r3, fp
   d6c88:	465a      	mov	r2, fp
   d6c8a:	b289      	uxth	r1, r1
   d6c8c:	4856      	ldr	r0, [pc, #344]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6c8e:	f8cd b000 	str.w	fp, [sp]
   d6c92:	f007 feb5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6c96:	f106 010e 	add.w	r1, r6, #14
   d6c9a:	464b      	mov	r3, r9
   d6c9c:	4642      	mov	r2, r8
   d6c9e:	b289      	uxth	r1, r1
   d6ca0:	4851      	ldr	r0, [pc, #324]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6ca2:	f8cd a000 	str.w	sl, [sp]
   d6ca6:	f007 feab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6caa:	f106 010d 	add.w	r1, r6, #13
   d6cae:	464b      	mov	r3, r9
   d6cb0:	4642      	mov	r2, r8
   d6cb2:	b289      	uxth	r1, r1
   d6cb4:	484c      	ldr	r0, [pc, #304]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6cb6:	f8cd a000 	str.w	sl, [sp]
   d6cba:	f007 fea1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6cbe:	f106 010c 	add.w	r1, r6, #12
   d6cc2:	f8cd a000 	str.w	sl, [sp]
   d6cc6:	464b      	mov	r3, r9
   d6cc8:	4642      	mov	r2, r8
   d6cca:	b289      	uxth	r1, r1
   d6ccc:	4846      	ldr	r0, [pc, #280]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6cce:	f007 fe97 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6cd2:	f017 0701 	ands.w	r7, r7, #1
   d6cd6:	f040 8753 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6cda:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d6cde:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6ce2:	4841      	ldr	r0, [pc, #260]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6ce4:	f8cd 8000 	str.w	r8, [sp]
   d6ce8:	b2a4      	uxth	r4, r4
   d6cea:	b2ed      	uxtb	r5, r5
   d6cec:	462b      	mov	r3, r5
   d6cee:	4632      	mov	r2, r6
   d6cf0:	4621      	mov	r1, r4
   d6cf2:	f007 fe85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6cf6:	1c61      	adds	r1, r4, #1
   d6cf8:	462b      	mov	r3, r5
   d6cfa:	4632      	mov	r2, r6
   d6cfc:	b289      	uxth	r1, r1
   d6cfe:	483a      	ldr	r0, [pc, #232]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d00:	f8cd 8000 	str.w	r8, [sp]
   d6d04:	f007 fe7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6d08:	1ca1      	adds	r1, r4, #2
   d6d0a:	462b      	mov	r3, r5
   d6d0c:	4632      	mov	r2, r6
   d6d0e:	b289      	uxth	r1, r1
   d6d10:	4835      	ldr	r0, [pc, #212]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d12:	f8cd 8000 	str.w	r8, [sp]
   d6d16:	f007 fe73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6d1a:	1ce1      	adds	r1, r4, #3
   d6d1c:	463b      	mov	r3, r7
   d6d1e:	463a      	mov	r2, r7
   d6d20:	b289      	uxth	r1, r1
   d6d22:	4831      	ldr	r0, [pc, #196]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d24:	9700      	str	r7, [sp, #0]
   d6d26:	f007 fe6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d6d2a:	1d21      	adds	r1, r4, #4
   d6d2c:	462b      	mov	r3, r5
   d6d2e:	4632      	mov	r2, r6
   d6d30:	b289      	uxth	r1, r1
   d6d32:	482d      	ldr	r0, [pc, #180]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d34:	f8cd 8000 	str.w	r8, [sp]
   d6d38:	f007 fe62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d6d3c:	f104 010b 	add.w	r1, r4, #11
   d6d40:	462b      	mov	r3, r5
   d6d42:	4632      	mov	r2, r6
   d6d44:	b289      	uxth	r1, r1
   d6d46:	4828      	ldr	r0, [pc, #160]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d48:	f8cd 8000 	str.w	r8, [sp]
   d6d4c:	f007 fe58 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6d50:	f104 010c 	add.w	r1, r4, #12
   d6d54:	463b      	mov	r3, r7
   d6d56:	463a      	mov	r2, r7
   d6d58:	b289      	uxth	r1, r1
   d6d5a:	4823      	ldr	r0, [pc, #140]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d5c:	9700      	str	r7, [sp, #0]
   d6d5e:	f007 fe4f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6d62:	f104 010d 	add.w	r1, r4, #13
   d6d66:	462b      	mov	r3, r5
   d6d68:	4632      	mov	r2, r6
   d6d6a:	b289      	uxth	r1, r1
   d6d6c:	481e      	ldr	r0, [pc, #120]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d6e:	f8cd 8000 	str.w	r8, [sp]
   d6d72:	f007 fe45 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6d76:	f104 010e 	add.w	r1, r4, #14
   d6d7a:	463b      	mov	r3, r7
   d6d7c:	463a      	mov	r2, r7
   d6d7e:	b289      	uxth	r1, r1
   d6d80:	4819      	ldr	r0, [pc, #100]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d82:	9700      	str	r7, [sp, #0]
   d6d84:	f007 fe3c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6d88:	f104 010f 	add.w	r1, r4, #15
   d6d8c:	462b      	mov	r3, r5
   d6d8e:	4632      	mov	r2, r6
   d6d90:	b289      	uxth	r1, r1
   d6d92:	4815      	ldr	r0, [pc, #84]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6d94:	f8cd 8000 	str.w	r8, [sp]
   d6d98:	f007 fe32 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6d9c:	f104 0110 	add.w	r1, r4, #16
   d6da0:	462b      	mov	r3, r5
   d6da2:	4632      	mov	r2, r6
   d6da4:	b289      	uxth	r1, r1
   d6da6:	f8cd 8000 	str.w	r8, [sp]
   d6daa:	480f      	ldr	r0, [pc, #60]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6dac:	f007 fe28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d6db0:	f104 0111 	add.w	r1, r4, #17
   d6db4:	9700      	str	r7, [sp, #0]
   d6db6:	463b      	mov	r3, r7
   d6db8:	463a      	mov	r2, r7
   d6dba:	b289      	uxth	r1, r1
   d6dbc:	480a      	ldr	r0, [pc, #40]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6dbe:	f007 fe1f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d6dc2:	f104 0112 	add.w	r1, r4, #18
   d6dc6:	462b      	mov	r3, r5
   d6dc8:	4632      	mov	r2, r6
   d6dca:	b289      	uxth	r1, r1
   d6dcc:	f8cd 8000 	str.w	r8, [sp]
   d6dd0:	4805      	ldr	r0, [pc, #20]	; (d6de8 <_Z4snumiiiii+0x99c>)
   d6dd2:	f007 fe15 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d6dd6:	f104 0113 	add.w	r1, r4, #19
   d6dda:	f8cd 8000 	str.w	r8, [sp]
   d6dde:	462b      	mov	r3, r5
   d6de0:	4632      	mov	r2, r6
   d6de2:	e599      	b.n	d6918 <_Z4snumiiiii+0x4cc>
   d6de4:	80000001 	.word	0x80000001
   d6de8:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 4)
    {
        if((pix/8)%2 == 1)
   d6dec:	4b9c      	ldr	r3, [pc, #624]	; (d7060 <_Z4snumiiiii+0xc14>)
   d6dee:	2608      	movs	r6, #8
   d6df0:	fb94 f6f6 	sdiv	r6, r4, r6
   d6df4:	4033      	ands	r3, r6
   d6df6:	2b00      	cmp	r3, #0
   d6df8:	bfbe      	ittt	lt
   d6dfa:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d6dfe:	f063 0301 	ornlt	r3, r3, #1
   d6e02:	3301      	addlt	r3, #1
   d6e04:	2b01      	cmp	r3, #1
   d6e06:	f040 8094 	bne.w	d6f32 <_Z4snumiiiii+0xae6>
        {
            strip.setPixelColor(pix,R,G,B);
   d6e0a:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d6e0e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d6e12:	4894      	ldr	r0, [pc, #592]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e14:	f8cd b000 	str.w	fp, [sp]
   d6e18:	b2a7      	uxth	r7, r4
   d6e1a:	fa5f fa85 	uxtb.w	sl, r5
   d6e1e:	4653      	mov	r3, sl
   d6e20:	464a      	mov	r2, r9
   d6e22:	4639      	mov	r1, r7
   d6e24:	f007 fdec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d6e28:	1e79      	subs	r1, r7, #1
   d6e2a:	4653      	mov	r3, sl
   d6e2c:	464a      	mov	r2, r9
   d6e2e:	b289      	uxth	r1, r1
   d6e30:	488c      	ldr	r0, [pc, #560]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e32:	f8cd b000 	str.w	fp, [sp]
   d6e36:	f007 fde3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d6e3a:	1eb9      	subs	r1, r7, #2
   d6e3c:	4653      	mov	r3, sl
   d6e3e:	464a      	mov	r2, r9
   d6e40:	b289      	uxth	r1, r1
   d6e42:	4888      	ldr	r0, [pc, #544]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e44:	f8cd b000 	str.w	fp, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d6e48:	f04f 0800 	mov.w	r8, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d6e4c:	f007 fdd8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d6e50:	1ef9      	subs	r1, r7, #3
   d6e52:	4643      	mov	r3, r8
   d6e54:	4642      	mov	r2, r8
   d6e56:	b289      	uxth	r1, r1
   d6e58:	4882      	ldr	r0, [pc, #520]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e5a:	f8cd 8000 	str.w	r8, [sp]
   d6e5e:	f007 fdcf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d6e62:	1f39      	subs	r1, r7, #4
   d6e64:	4643      	mov	r3, r8
   d6e66:	4642      	mov	r2, r8
   d6e68:	b289      	uxth	r1, r1
   d6e6a:	487e      	ldr	r0, [pc, #504]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e6c:	f8cd 8000 	str.w	r8, [sp]
   d6e70:	f007 fdc6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d6e74:	1c79      	adds	r1, r7, #1
   d6e76:	4643      	mov	r3, r8
   d6e78:	4642      	mov	r2, r8
   d6e7a:	b289      	uxth	r1, r1
   d6e7c:	4879      	ldr	r0, [pc, #484]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e7e:	f8cd 8000 	str.w	r8, [sp]
   d6e82:	f007 fdbd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d6e86:	1cb9      	adds	r1, r7, #2
   d6e88:	4643      	mov	r3, r8
   d6e8a:	4642      	mov	r2, r8
   d6e8c:	b289      	uxth	r1, r1
   d6e8e:	4875      	ldr	r0, [pc, #468]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6e90:	f8cd 8000 	str.w	r8, [sp]
   d6e94:	f007 fdb4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d6e98:	1cf9      	adds	r1, r7, #3
   d6e9a:	4653      	mov	r3, sl
   d6e9c:	464a      	mov	r2, r9
   d6e9e:	b289      	uxth	r1, r1
   d6ea0:	4870      	ldr	r0, [pc, #448]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6ea2:	f8cd b000 	str.w	fp, [sp]
   d6ea6:	f007 fdab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6eaa:	1d39      	adds	r1, r7, #4
   d6eac:	4643      	mov	r3, r8
   d6eae:	4642      	mov	r2, r8
   d6eb0:	b289      	uxth	r1, r1
   d6eb2:	486c      	ldr	r0, [pc, #432]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6eb4:	f8cd 8000 	str.w	r8, [sp]
   d6eb8:	f007 fda2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d6ebc:	1d79      	adds	r1, r7, #5
   d6ebe:	4643      	mov	r3, r8
   d6ec0:	4642      	mov	r2, r8
   d6ec2:	b289      	uxth	r1, r1
   d6ec4:	4867      	ldr	r0, [pc, #412]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6ec6:	f8cd 8000 	str.w	r8, [sp]
   d6eca:	f007 fd99 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6ece:	f107 0110 	add.w	r1, r7, #16
   d6ed2:	4653      	mov	r3, sl
   d6ed4:	464a      	mov	r2, r9
   d6ed6:	b289      	uxth	r1, r1
   d6ed8:	4862      	ldr	r0, [pc, #392]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6eda:	f8cd b000 	str.w	fp, [sp]
   d6ede:	f007 fd8f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d6ee2:	f107 010f 	add.w	r1, r7, #15
   d6ee6:	4653      	mov	r3, sl
   d6ee8:	464a      	mov	r2, r9
   d6eea:	b289      	uxth	r1, r1
   d6eec:	485d      	ldr	r0, [pc, #372]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6eee:	f8cd b000 	str.w	fp, [sp]
   d6ef2:	f007 fd85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d6ef6:	f107 010e 	add.w	r1, r7, #14
   d6efa:	4653      	mov	r3, sl
   d6efc:	464a      	mov	r2, r9
   d6efe:	b289      	uxth	r1, r1
   d6f00:	4858      	ldr	r0, [pc, #352]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f02:	f8cd b000 	str.w	fp, [sp]
   d6f06:	f007 fd7b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6f0a:	f107 010d 	add.w	r1, r7, #13
   d6f0e:	4653      	mov	r3, sl
   d6f10:	464a      	mov	r2, r9
   d6f12:	b289      	uxth	r1, r1
   d6f14:	4853      	ldr	r0, [pc, #332]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f16:	f8cd b000 	str.w	fp, [sp]
   d6f1a:	f007 fd71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d6f1e:	f107 010c 	add.w	r1, r7, #12
   d6f22:	f8cd b000 	str.w	fp, [sp]
   d6f26:	4653      	mov	r3, sl
   d6f28:	464a      	mov	r2, r9
   d6f2a:	b289      	uxth	r1, r1
   d6f2c:	484d      	ldr	r0, [pc, #308]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f2e:	f007 fd67 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d6f32:	f016 0601 	ands.w	r6, r6, #1
   d6f36:	f040 8623 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d6f3a:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d6f3e:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d6f42:	f8cd 8000 	str.w	r8, [sp]
   d6f46:	b2a4      	uxth	r4, r4
   d6f48:	b2ed      	uxtb	r5, r5
   d6f4a:	462b      	mov	r3, r5
   d6f4c:	463a      	mov	r2, r7
   d6f4e:	4621      	mov	r1, r4
   d6f50:	4844      	ldr	r0, [pc, #272]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f52:	f007 fd55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d6f56:	1c61      	adds	r1, r4, #1
   d6f58:	462b      	mov	r3, r5
   d6f5a:	463a      	mov	r2, r7
   d6f5c:	f8cd 8000 	str.w	r8, [sp]
   d6f60:	b289      	uxth	r1, r1
   d6f62:	4840      	ldr	r0, [pc, #256]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f64:	f007 fd4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d6f68:	1ca1      	adds	r1, r4, #2
   d6f6a:	462b      	mov	r3, r5
   d6f6c:	463a      	mov	r2, r7
   d6f6e:	f8cd 8000 	str.w	r8, [sp]
   d6f72:	b289      	uxth	r1, r1
   d6f74:	483b      	ldr	r0, [pc, #236]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f76:	f007 fd43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d6f7a:	1ce1      	adds	r1, r4, #3
   d6f7c:	4633      	mov	r3, r6
   d6f7e:	4632      	mov	r2, r6
   d6f80:	9600      	str	r6, [sp, #0]
   d6f82:	b289      	uxth	r1, r1
   d6f84:	4837      	ldr	r0, [pc, #220]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f86:	f007 fd3b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d6f8a:	1d21      	adds	r1, r4, #4
   d6f8c:	4633      	mov	r3, r6
   d6f8e:	4632      	mov	r2, r6
   d6f90:	9600      	str	r6, [sp, #0]
   d6f92:	b289      	uxth	r1, r1
   d6f94:	4833      	ldr	r0, [pc, #204]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6f96:	f007 fd33 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d6f9a:	f104 010b 	add.w	r1, r4, #11
   d6f9e:	4633      	mov	r3, r6
   d6fa0:	4632      	mov	r2, r6
   d6fa2:	9600      	str	r6, [sp, #0]
   d6fa4:	b289      	uxth	r1, r1
   d6fa6:	482f      	ldr	r0, [pc, #188]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6fa8:	f007 fd2a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d6fac:	f104 010c 	add.w	r1, r4, #12
   d6fb0:	4633      	mov	r3, r6
   d6fb2:	4632      	mov	r2, r6
   d6fb4:	9600      	str	r6, [sp, #0]
   d6fb6:	b289      	uxth	r1, r1
   d6fb8:	482a      	ldr	r0, [pc, #168]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6fba:	f007 fd21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d6fbe:	f104 010d 	add.w	r1, r4, #13
   d6fc2:	462b      	mov	r3, r5
   d6fc4:	463a      	mov	r2, r7
   d6fc6:	f8cd 8000 	str.w	r8, [sp]
   d6fca:	b289      	uxth	r1, r1
   d6fcc:	4825      	ldr	r0, [pc, #148]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6fce:	f007 fd17 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d6fd2:	f104 010e 	add.w	r1, r4, #14
   d6fd6:	4633      	mov	r3, r6
   d6fd8:	4632      	mov	r2, r6
   d6fda:	9600      	str	r6, [sp, #0]
   d6fdc:	b289      	uxth	r1, r1
   d6fde:	4821      	ldr	r0, [pc, #132]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6fe0:	f007 fd0e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d6fe4:	f104 010f 	add.w	r1, r4, #15
   d6fe8:	4633      	mov	r3, r6
   d6fea:	4632      	mov	r2, r6
   d6fec:	9600      	str	r6, [sp, #0]
   d6fee:	b289      	uxth	r1, r1
   d6ff0:	481c      	ldr	r0, [pc, #112]	; (d7064 <_Z4snumiiiii+0xc18>)
   d6ff2:	f007 fd05 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d6ff6:	f104 0110 	add.w	r1, r4, #16
   d6ffa:	462b      	mov	r3, r5
   d6ffc:	463a      	mov	r2, r7
   d6ffe:	f8cd 8000 	str.w	r8, [sp]
   d7002:	b289      	uxth	r1, r1
   d7004:	4817      	ldr	r0, [pc, #92]	; (d7064 <_Z4snumiiiii+0xc18>)
   d7006:	f007 fcfb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d700a:	f104 0111 	add.w	r1, r4, #17
   d700e:	462b      	mov	r3, r5
   d7010:	463a      	mov	r2, r7
   d7012:	f8cd 8000 	str.w	r8, [sp]
   d7016:	b289      	uxth	r1, r1
   d7018:	4812      	ldr	r0, [pc, #72]	; (d7064 <_Z4snumiiiii+0xc18>)
   d701a:	f007 fcf1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d701e:	f104 0112 	add.w	r1, r4, #18
   d7022:	462b      	mov	r3, r5
   d7024:	463a      	mov	r2, r7
   d7026:	f8cd 8000 	str.w	r8, [sp]
   d702a:	b289      	uxth	r1, r1
   d702c:	480d      	ldr	r0, [pc, #52]	; (d7064 <_Z4snumiiiii+0xc18>)
   d702e:	f007 fce7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d7032:	f104 0113 	add.w	r1, r4, #19
   d7036:	462b      	mov	r3, r5
   d7038:	463a      	mov	r2, r7
   d703a:	f8cd 8000 	str.w	r8, [sp]
   d703e:	b289      	uxth	r1, r1
   d7040:	4808      	ldr	r0, [pc, #32]	; (d7064 <_Z4snumiiiii+0xc18>)
   d7042:	f007 fcdd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7046:	f104 0114 	add.w	r1, r4, #20
   d704a:	f8cd 8000 	str.w	r8, [sp]
   d704e:	462b      	mov	r3, r5
   d7050:	463a      	mov	r2, r7
   d7052:	b289      	uxth	r1, r1
   d7054:	4803      	ldr	r0, [pc, #12]	; (d7064 <_Z4snumiiiii+0xc18>)
   d7056:	f007 fcd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d705a:	f000 bd91 	b.w	d7b80 <_Z4snumiiiii+0x1734>
   d705e:	bf00      	nop
   d7060:	80000001 	.word	0x80000001
   d7064:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 6)
   d7068:	2806      	cmp	r0, #6
   d706a:	f040 811d 	bne.w	d72a8 <_Z4snumiiiii+0xe5c>
    {
        if((pix/8)%2 == 1)
   d706e:	4b8c      	ldr	r3, [pc, #560]	; (d72a0 <_Z4snumiiiii+0xe54>)
   d7070:	2708      	movs	r7, #8
   d7072:	fb94 f7f7 	sdiv	r7, r4, r7
   d7076:	403b      	ands	r3, r7
   d7078:	2b00      	cmp	r3, #0
   d707a:	bfbe      	ittt	lt
   d707c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7080:	f063 0301 	ornlt	r3, r3, #1
   d7084:	3301      	addlt	r3, #1
   d7086:	2b01      	cmp	r3, #1
   d7088:	f040 8094 	bne.w	d71b4 <_Z4snumiiiii+0xd68>
        {
            strip.setPixelColor(pix,R,G,B);
   d708c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7090:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7094:	4883      	ldr	r0, [pc, #524]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7096:	f8cd a000 	str.w	sl, [sp]
   d709a:	b2a6      	uxth	r6, r4
   d709c:	fa5f f985 	uxtb.w	r9, r5
   d70a0:	464b      	mov	r3, r9
   d70a2:	4642      	mov	r2, r8
   d70a4:	4631      	mov	r1, r6
   d70a6:	f007 fcab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d70aa:	1e71      	subs	r1, r6, #1
   d70ac:	464b      	mov	r3, r9
   d70ae:	4642      	mov	r2, r8
   d70b0:	b289      	uxth	r1, r1
   d70b2:	487c      	ldr	r0, [pc, #496]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d70b4:	f8cd a000 	str.w	sl, [sp]
   d70b8:	f007 fca2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d70bc:	1eb1      	subs	r1, r6, #2
   d70be:	464b      	mov	r3, r9
   d70c0:	4642      	mov	r2, r8
   d70c2:	b289      	uxth	r1, r1
   d70c4:	4877      	ldr	r0, [pc, #476]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d70c6:	f8cd a000 	str.w	sl, [sp]
   d70ca:	f007 fc99 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d70ce:	1ef1      	subs	r1, r6, #3
   d70d0:	464b      	mov	r3, r9
   d70d2:	4642      	mov	r2, r8
   d70d4:	b289      	uxth	r1, r1
   d70d6:	4873      	ldr	r0, [pc, #460]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d70d8:	f8cd a000 	str.w	sl, [sp]
   d70dc:	f007 fc90 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d70e0:	1f31      	subs	r1, r6, #4
   d70e2:	464b      	mov	r3, r9
   d70e4:	4642      	mov	r2, r8
   d70e6:	b289      	uxth	r1, r1
   d70e8:	486e      	ldr	r0, [pc, #440]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d70ea:	f8cd a000 	str.w	sl, [sp]
   d70ee:	f007 fc87 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d70f2:	1c71      	adds	r1, r6, #1
   d70f4:	464b      	mov	r3, r9
   d70f6:	4642      	mov	r2, r8
   d70f8:	b289      	uxth	r1, r1
   d70fa:	486a      	ldr	r0, [pc, #424]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d70fc:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d7100:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d7104:	f007 fc7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7108:	1cb1      	adds	r1, r6, #2
   d710a:	465b      	mov	r3, fp
   d710c:	465a      	mov	r2, fp
   d710e:	b289      	uxth	r1, r1
   d7110:	4864      	ldr	r0, [pc, #400]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7112:	f8cd b000 	str.w	fp, [sp]
   d7116:	f007 fc73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d711a:	1cf1      	adds	r1, r6, #3
   d711c:	464b      	mov	r3, r9
   d711e:	4642      	mov	r2, r8
   d7120:	b289      	uxth	r1, r1
   d7122:	4860      	ldr	r0, [pc, #384]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7124:	f8cd a000 	str.w	sl, [sp]
   d7128:	f007 fc6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d712c:	1d31      	adds	r1, r6, #4
   d712e:	465b      	mov	r3, fp
   d7130:	465a      	mov	r2, fp
   d7132:	b289      	uxth	r1, r1
   d7134:	485b      	ldr	r0, [pc, #364]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7136:	f8cd b000 	str.w	fp, [sp]
   d713a:	f007 fc61 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d713e:	1d71      	adds	r1, r6, #5
   d7140:	464b      	mov	r3, r9
   d7142:	4642      	mov	r2, r8
   d7144:	b289      	uxth	r1, r1
   d7146:	4857      	ldr	r0, [pc, #348]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7148:	f8cd a000 	str.w	sl, [sp]
   d714c:	f007 fc58 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7150:	f106 0110 	add.w	r1, r6, #16
   d7154:	464b      	mov	r3, r9
   d7156:	4642      	mov	r2, r8
   d7158:	b289      	uxth	r1, r1
   d715a:	4852      	ldr	r0, [pc, #328]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d715c:	f8cd a000 	str.w	sl, [sp]
   d7160:	f007 fc4e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,0,0,0);
   d7164:	f106 010f 	add.w	r1, r6, #15
   d7168:	465b      	mov	r3, fp
   d716a:	465a      	mov	r2, fp
   d716c:	b289      	uxth	r1, r1
   d716e:	484d      	ldr	r0, [pc, #308]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7170:	f8cd b000 	str.w	fp, [sp]
   d7174:	f007 fc44 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7178:	f106 010e 	add.w	r1, r6, #14
   d717c:	464b      	mov	r3, r9
   d717e:	4642      	mov	r2, r8
   d7180:	b289      	uxth	r1, r1
   d7182:	4848      	ldr	r0, [pc, #288]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7184:	f8cd a000 	str.w	sl, [sp]
   d7188:	f007 fc3a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d718c:	f106 010d 	add.w	r1, r6, #13
   d7190:	464b      	mov	r3, r9
   d7192:	4642      	mov	r2, r8
   d7194:	b289      	uxth	r1, r1
   d7196:	4843      	ldr	r0, [pc, #268]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7198:	f8cd a000 	str.w	sl, [sp]
   d719c:	f007 fc30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d71a0:	f106 010c 	add.w	r1, r6, #12
   d71a4:	f8cd a000 	str.w	sl, [sp]
   d71a8:	464b      	mov	r3, r9
   d71aa:	4642      	mov	r2, r8
   d71ac:	b289      	uxth	r1, r1
   d71ae:	483d      	ldr	r0, [pc, #244]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d71b0:	f007 fc26 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d71b4:	f017 0701 	ands.w	r7, r7, #1
   d71b8:	f040 84e2 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d71bc:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d71c0:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d71c4:	4837      	ldr	r0, [pc, #220]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d71c6:	f8cd 8000 	str.w	r8, [sp]
   d71ca:	b2a4      	uxth	r4, r4
   d71cc:	b2ed      	uxtb	r5, r5
   d71ce:	462b      	mov	r3, r5
   d71d0:	4632      	mov	r2, r6
   d71d2:	4621      	mov	r1, r4
   d71d4:	f007 fc14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d71d8:	1c61      	adds	r1, r4, #1
   d71da:	462b      	mov	r3, r5
   d71dc:	4632      	mov	r2, r6
   d71de:	b289      	uxth	r1, r1
   d71e0:	4830      	ldr	r0, [pc, #192]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d71e2:	f8cd 8000 	str.w	r8, [sp]
   d71e6:	f007 fc0b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d71ea:	1ca1      	adds	r1, r4, #2
   d71ec:	462b      	mov	r3, r5
   d71ee:	4632      	mov	r2, r6
   d71f0:	b289      	uxth	r1, r1
   d71f2:	482c      	ldr	r0, [pc, #176]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d71f4:	f8cd 8000 	str.w	r8, [sp]
   d71f8:	f007 fc02 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d71fc:	1ce1      	adds	r1, r4, #3
   d71fe:	462b      	mov	r3, r5
   d7200:	4632      	mov	r2, r6
   d7202:	b289      	uxth	r1, r1
   d7204:	4827      	ldr	r0, [pc, #156]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7206:	f8cd 8000 	str.w	r8, [sp]
   d720a:	f007 fbf9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d720e:	1d21      	adds	r1, r4, #4
   d7210:	462b      	mov	r3, r5
   d7212:	4632      	mov	r2, r6
   d7214:	b289      	uxth	r1, r1
   d7216:	4823      	ldr	r0, [pc, #140]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7218:	f8cd 8000 	str.w	r8, [sp]
   d721c:	f007 fbf0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7220:	f104 010b 	add.w	r1, r4, #11
   d7224:	462b      	mov	r3, r5
   d7226:	4632      	mov	r2, r6
   d7228:	b289      	uxth	r1, r1
   d722a:	481e      	ldr	r0, [pc, #120]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d722c:	f8cd 8000 	str.w	r8, [sp]
   d7230:	f007 fbe6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7234:	f104 010c 	add.w	r1, r4, #12
   d7238:	463b      	mov	r3, r7
   d723a:	463a      	mov	r2, r7
   d723c:	b289      	uxth	r1, r1
   d723e:	4819      	ldr	r0, [pc, #100]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7240:	9700      	str	r7, [sp, #0]
   d7242:	f007 fbdd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7246:	f104 010d 	add.w	r1, r4, #13
   d724a:	462b      	mov	r3, r5
   d724c:	4632      	mov	r2, r6
   d724e:	b289      	uxth	r1, r1
   d7250:	4814      	ldr	r0, [pc, #80]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7252:	f8cd 8000 	str.w	r8, [sp]
   d7256:	f007 fbd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d725a:	f104 010e 	add.w	r1, r4, #14
   d725e:	463b      	mov	r3, r7
   d7260:	463a      	mov	r2, r7
   d7262:	b289      	uxth	r1, r1
   d7264:	480f      	ldr	r0, [pc, #60]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7266:	9700      	str	r7, [sp, #0]
   d7268:	f007 fbca 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d726c:	f104 010f 	add.w	r1, r4, #15
   d7270:	462b      	mov	r3, r5
   d7272:	4632      	mov	r2, r6
   d7274:	b289      	uxth	r1, r1
   d7276:	480b      	ldr	r0, [pc, #44]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7278:	f8cd 8000 	str.w	r8, [sp]
   d727c:	f007 fbc0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7280:	f104 0110 	add.w	r1, r4, #16
   d7284:	462b      	mov	r3, r5
   d7286:	4632      	mov	r2, r6
   d7288:	b289      	uxth	r1, r1
   d728a:	f8cd 8000 	str.w	r8, [sp]
   d728e:	4805      	ldr	r0, [pc, #20]	; (d72a4 <_Z4snumiiiii+0xe58>)
   d7290:	f007 fbb6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,0,0,0);
   d7294:	f104 0111 	add.w	r1, r4, #17
   d7298:	9700      	str	r7, [sp, #0]
   d729a:	463b      	mov	r3, r7
   d729c:	463a      	mov	r2, r7
   d729e:	e124      	b.n	d74ea <_Z4snumiiiii+0x109e>
   d72a0:	80000001 	.word	0x80000001
   d72a4:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
   d72a8:	2807      	cmp	r0, #7
   d72aa:	f000 8147 	beq.w	d753c <_Z4snumiiiii+0x10f0>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
   d72ae:	2808      	cmp	r0, #8
   d72b0:	f000 8236 	beq.w	d7720 <_Z4snumiiiii+0x12d4>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 9)
   d72b4:	2809      	cmp	r0, #9
   d72b6:	f040 836f 	bne.w	d7998 <_Z4snumiiiii+0x154c>
    {
        if((pix/8)%2 == 1)
   d72ba:	4b9e      	ldr	r3, [pc, #632]	; (d7534 <_Z4snumiiiii+0x10e8>)
   d72bc:	2708      	movs	r7, #8
   d72be:	fb94 f7f7 	sdiv	r7, r4, r7
   d72c2:	403b      	ands	r3, r7
   d72c4:	2b00      	cmp	r3, #0
   d72c6:	bfbe      	ittt	lt
   d72c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d72cc:	f063 0301 	ornlt	r3, r3, #1
   d72d0:	3301      	addlt	r3, #1
   d72d2:	2b01      	cmp	r3, #1
   d72d4:	f040 8094 	bne.w	d7400 <_Z4snumiiiii+0xfb4>
        {
            strip.setPixelColor(pix,R,G,B);
   d72d8:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d72dc:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d72e0:	4895      	ldr	r0, [pc, #596]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d72e2:	f8cd a000 	str.w	sl, [sp]
   d72e6:	b2a6      	uxth	r6, r4
   d72e8:	fa5f f985 	uxtb.w	r9, r5
   d72ec:	464b      	mov	r3, r9
   d72ee:	4642      	mov	r2, r8
   d72f0:	4631      	mov	r1, r6
   d72f2:	f007 fb85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d72f6:	1e71      	subs	r1, r6, #1
   d72f8:	464b      	mov	r3, r9
   d72fa:	4642      	mov	r2, r8
   d72fc:	b289      	uxth	r1, r1
   d72fe:	488e      	ldr	r0, [pc, #568]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7300:	f8cd a000 	str.w	sl, [sp]
   d7304:	f007 fb7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d7308:	1eb1      	subs	r1, r6, #2
   d730a:	464b      	mov	r3, r9
   d730c:	4642      	mov	r2, r8
   d730e:	b289      	uxth	r1, r1
   d7310:	4889      	ldr	r0, [pc, #548]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7312:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix-3,0,0,0);
   d7316:	f04f 0b00 	mov.w	fp, #0
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
   d731a:	f007 fb71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d731e:	1ef1      	subs	r1, r6, #3
   d7320:	465b      	mov	r3, fp
   d7322:	465a      	mov	r2, fp
   d7324:	b289      	uxth	r1, r1
   d7326:	4884      	ldr	r0, [pc, #528]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7328:	f8cd b000 	str.w	fp, [sp]
   d732c:	f007 fb68 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7330:	1f31      	subs	r1, r6, #4
   d7332:	464b      	mov	r3, r9
   d7334:	4642      	mov	r2, r8
   d7336:	b289      	uxth	r1, r1
   d7338:	487f      	ldr	r0, [pc, #508]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d733a:	f8cd a000 	str.w	sl, [sp]
   d733e:	f007 fb5f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7342:	1c71      	adds	r1, r6, #1
   d7344:	464b      	mov	r3, r9
   d7346:	4642      	mov	r2, r8
   d7348:	b289      	uxth	r1, r1
   d734a:	487b      	ldr	r0, [pc, #492]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d734c:	f8cd a000 	str.w	sl, [sp]
   d7350:	f007 fb56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7354:	1cb1      	adds	r1, r6, #2
   d7356:	465b      	mov	r3, fp
   d7358:	465a      	mov	r2, fp
   d735a:	b289      	uxth	r1, r1
   d735c:	4876      	ldr	r0, [pc, #472]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d735e:	f8cd b000 	str.w	fp, [sp]
   d7362:	f007 fb4d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7366:	1cf1      	adds	r1, r6, #3
   d7368:	464b      	mov	r3, r9
   d736a:	4642      	mov	r2, r8
   d736c:	b289      	uxth	r1, r1
   d736e:	4872      	ldr	r0, [pc, #456]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7370:	f8cd a000 	str.w	sl, [sp]
   d7374:	f007 fb44 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7378:	1d31      	adds	r1, r6, #4
   d737a:	465b      	mov	r3, fp
   d737c:	465a      	mov	r2, fp
   d737e:	b289      	uxth	r1, r1
   d7380:	486d      	ldr	r0, [pc, #436]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7382:	f8cd b000 	str.w	fp, [sp]
   d7386:	f007 fb3b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d738a:	1d71      	adds	r1, r6, #5
   d738c:	464b      	mov	r3, r9
   d738e:	4642      	mov	r2, r8
   d7390:	b289      	uxth	r1, r1
   d7392:	4869      	ldr	r0, [pc, #420]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7394:	f8cd a000 	str.w	sl, [sp]
   d7398:	f007 fb32 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d739c:	f106 0110 	add.w	r1, r6, #16
   d73a0:	464b      	mov	r3, r9
   d73a2:	4642      	mov	r2, r8
   d73a4:	b289      	uxth	r1, r1
   d73a6:	4864      	ldr	r0, [pc, #400]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d73a8:	f8cd a000 	str.w	sl, [sp]
   d73ac:	f007 fb28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d73b0:	f106 010f 	add.w	r1, r6, #15
   d73b4:	464b      	mov	r3, r9
   d73b6:	4642      	mov	r2, r8
   d73b8:	b289      	uxth	r1, r1
   d73ba:	485f      	ldr	r0, [pc, #380]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d73bc:	f8cd a000 	str.w	sl, [sp]
   d73c0:	f007 fb1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d73c4:	f106 010e 	add.w	r1, r6, #14
   d73c8:	464b      	mov	r3, r9
   d73ca:	4642      	mov	r2, r8
   d73cc:	b289      	uxth	r1, r1
   d73ce:	485a      	ldr	r0, [pc, #360]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d73d0:	f8cd a000 	str.w	sl, [sp]
   d73d4:	f007 fb14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d73d8:	f106 010d 	add.w	r1, r6, #13
   d73dc:	464b      	mov	r3, r9
   d73de:	4642      	mov	r2, r8
   d73e0:	b289      	uxth	r1, r1
   d73e2:	4855      	ldr	r0, [pc, #340]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d73e4:	f8cd a000 	str.w	sl, [sp]
   d73e8:	f007 fb0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d73ec:	f106 010c 	add.w	r1, r6, #12
   d73f0:	f8cd a000 	str.w	sl, [sp]
   d73f4:	464b      	mov	r3, r9
   d73f6:	4642      	mov	r2, r8
   d73f8:	b289      	uxth	r1, r1
   d73fa:	484f      	ldr	r0, [pc, #316]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d73fc:	f007 fb00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7400:	f017 0701 	ands.w	r7, r7, #1
   d7404:	f040 83bc 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d7408:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d740c:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7410:	4849      	ldr	r0, [pc, #292]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7412:	f8cd 8000 	str.w	r8, [sp]
   d7416:	b2a4      	uxth	r4, r4
   d7418:	b2ed      	uxtb	r5, r5
   d741a:	462b      	mov	r3, r5
   d741c:	4632      	mov	r2, r6
   d741e:	4621      	mov	r1, r4
   d7420:	f007 faee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7424:	1c61      	adds	r1, r4, #1
   d7426:	462b      	mov	r3, r5
   d7428:	4632      	mov	r2, r6
   d742a:	b289      	uxth	r1, r1
   d742c:	4842      	ldr	r0, [pc, #264]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d742e:	f8cd 8000 	str.w	r8, [sp]
   d7432:	f007 fae5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7436:	1ca1      	adds	r1, r4, #2
   d7438:	462b      	mov	r3, r5
   d743a:	4632      	mov	r2, r6
   d743c:	b289      	uxth	r1, r1
   d743e:	483e      	ldr	r0, [pc, #248]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7440:	f8cd 8000 	str.w	r8, [sp]
   d7444:	f007 fadc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7448:	1ce1      	adds	r1, r4, #3
   d744a:	463b      	mov	r3, r7
   d744c:	463a      	mov	r2, r7
   d744e:	b289      	uxth	r1, r1
   d7450:	4839      	ldr	r0, [pc, #228]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7452:	9700      	str	r7, [sp, #0]
   d7454:	f007 fad4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7458:	1d21      	adds	r1, r4, #4
   d745a:	462b      	mov	r3, r5
   d745c:	4632      	mov	r2, r6
   d745e:	b289      	uxth	r1, r1
   d7460:	4835      	ldr	r0, [pc, #212]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7462:	f8cd 8000 	str.w	r8, [sp]
   d7466:	f007 facb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d746a:	f104 010b 	add.w	r1, r4, #11
   d746e:	462b      	mov	r3, r5
   d7470:	4632      	mov	r2, r6
   d7472:	b289      	uxth	r1, r1
   d7474:	4830      	ldr	r0, [pc, #192]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7476:	f8cd 8000 	str.w	r8, [sp]
   d747a:	f007 fac1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d747e:	f104 010c 	add.w	r1, r4, #12
   d7482:	463b      	mov	r3, r7
   d7484:	463a      	mov	r2, r7
   d7486:	b289      	uxth	r1, r1
   d7488:	9700      	str	r7, [sp, #0]
   d748a:	482b      	ldr	r0, [pc, #172]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d748c:	f007 fab8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7490:	f104 010d 	add.w	r1, r4, #13
   d7494:	f8cd 8000 	str.w	r8, [sp]
   d7498:	462b      	mov	r3, r5
   d749a:	4632      	mov	r2, r6
            strip.setPixelColor(pix+2,R,G,B);
            strip.setPixelColor(pix+3,R,G,B);
            strip.setPixelColor(pix+4,R,G,B);
            strip.setPixelColor(pix+11,R,G,B);
            strip.setPixelColor(pix+12,0,0,0);
            strip.setPixelColor(pix+13,0,0,0);
   d749c:	b289      	uxth	r1, r1
   d749e:	4826      	ldr	r0, [pc, #152]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74a0:	f007 faae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d74a4:	f104 010e 	add.w	r1, r4, #14
   d74a8:	463b      	mov	r3, r7
   d74aa:	463a      	mov	r2, r7
   d74ac:	b289      	uxth	r1, r1
   d74ae:	4822      	ldr	r0, [pc, #136]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74b0:	9700      	str	r7, [sp, #0]
   d74b2:	f007 faa5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d74b6:	f104 010f 	add.w	r1, r4, #15
   d74ba:	462b      	mov	r3, r5
   d74bc:	4632      	mov	r2, r6
   d74be:	b289      	uxth	r1, r1
   d74c0:	481d      	ldr	r0, [pc, #116]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74c2:	f8cd 8000 	str.w	r8, [sp]
   d74c6:	f007 fa9b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d74ca:	f104 0110 	add.w	r1, r4, #16
   d74ce:	462b      	mov	r3, r5
   d74d0:	4632      	mov	r2, r6
   d74d2:	b289      	uxth	r1, r1
   d74d4:	f8cd 8000 	str.w	r8, [sp]
   d74d8:	4817      	ldr	r0, [pc, #92]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74da:	f007 fa91 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d74de:	f104 0111 	add.w	r1, r4, #17
   d74e2:	f8cd 8000 	str.w	r8, [sp]
   d74e6:	462b      	mov	r3, r5
   d74e8:	4632      	mov	r2, r6
   d74ea:	b289      	uxth	r1, r1
   d74ec:	4812      	ldr	r0, [pc, #72]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74ee:	f007 fa87 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d74f2:	f104 0112 	add.w	r1, r4, #18
   d74f6:	462b      	mov	r3, r5
   d74f8:	4632      	mov	r2, r6
   d74fa:	b289      	uxth	r1, r1
   d74fc:	480e      	ldr	r0, [pc, #56]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d74fe:	f8cd 8000 	str.w	r8, [sp]
   d7502:	f007 fa7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d7506:	f104 0113 	add.w	r1, r4, #19
   d750a:	462b      	mov	r3, r5
   d750c:	4632      	mov	r2, r6
   d750e:	b289      	uxth	r1, r1
   d7510:	f8cd 8000 	str.w	r8, [sp]
   d7514:	4808      	ldr	r0, [pc, #32]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7516:	f007 fa73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d751a:	f104 0114 	add.w	r1, r4, #20
   d751e:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d7522:	462b      	mov	r3, r5
   d7524:	4632      	mov	r2, r6
   d7526:	4804      	ldr	r0, [pc, #16]	; (d7538 <_Z4snumiiiii+0x10ec>)
   d7528:	b289      	uxth	r1, r1
        }
    }
}                           
   d752a:	b005      	add	sp, #20
   d752c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
            strip.setPixelColor(pix+15,R,G,B);
            strip.setPixelColor(pix+16,R,G,B);
            strip.setPixelColor(pix+17,R,G,B);
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
   d7530:	f007 ba66 	b.w	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d7534:	80000001 	.word	0x80000001
   d7538:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
   d753c:	4b76      	ldr	r3, [pc, #472]	; (d7718 <_Z4snumiiiii+0x12cc>)
   d753e:	2608      	movs	r6, #8
   d7540:	fb94 f6f6 	sdiv	r6, r4, r6
   d7544:	4033      	ands	r3, r6
   d7546:	2b00      	cmp	r3, #0
   d7548:	bfbe      	ittt	lt
   d754a:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d754e:	f063 0301 	ornlt	r3, r3, #1
   d7552:	3301      	addlt	r3, #1
   d7554:	2b01      	cmp	r3, #1
   d7556:	f040 8095 	bne.w	d7684 <_Z4snumiiiii+0x1238>
        {
            strip.setPixelColor(pix,R,G,B);
   d755a:	f89d 9008 	ldrb.w	r9, [sp, #8]
   d755e:	f89d b00c 	ldrb.w	fp, [sp, #12]
   d7562:	486e      	ldr	r0, [pc, #440]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7564:	f8cd b000 	str.w	fp, [sp]
   d7568:	fa1f f884 	uxth.w	r8, r4
   d756c:	fa5f fa85 	uxtb.w	sl, r5
   d7570:	4653      	mov	r3, sl
   d7572:	464a      	mov	r2, r9
   d7574:	4641      	mov	r1, r8
            strip.setPixelColor(pix-1,0,0,0);
   d7576:	2700      	movs	r7, #0
    }
    if(num == 7)
    {
        if((pix/8)%2 == 1)
        {
            strip.setPixelColor(pix,R,G,B);
   d7578:	f007 fa42 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,0,0,0);
   d757c:	f108 31ff 	add.w	r1, r8, #4294967295
   d7580:	463b      	mov	r3, r7
   d7582:	463a      	mov	r2, r7
   d7584:	b289      	uxth	r1, r1
   d7586:	4865      	ldr	r0, [pc, #404]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7588:	9700      	str	r7, [sp, #0]
   d758a:	f007 fa39 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,0,0,0);
   d758e:	f1a8 0102 	sub.w	r1, r8, #2
   d7592:	463b      	mov	r3, r7
   d7594:	463a      	mov	r2, r7
   d7596:	b289      	uxth	r1, r1
   d7598:	4860      	ldr	r0, [pc, #384]	; (d771c <_Z4snumiiiii+0x12d0>)
   d759a:	9700      	str	r7, [sp, #0]
   d759c:	f007 fa30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,0,0,0);
   d75a0:	f1a8 0103 	sub.w	r1, r8, #3
   d75a4:	463b      	mov	r3, r7
   d75a6:	463a      	mov	r2, r7
   d75a8:	b289      	uxth	r1, r1
   d75aa:	485c      	ldr	r0, [pc, #368]	; (d771c <_Z4snumiiiii+0x12d0>)
   d75ac:	9700      	str	r7, [sp, #0]
   d75ae:	f007 fa27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,0,0,0);
   d75b2:	f1a8 0104 	sub.w	r1, r8, #4
   d75b6:	463b      	mov	r3, r7
   d75b8:	463a      	mov	r2, r7
   d75ba:	b289      	uxth	r1, r1
   d75bc:	4857      	ldr	r0, [pc, #348]	; (d771c <_Z4snumiiiii+0x12d0>)
   d75be:	9700      	str	r7, [sp, #0]
   d75c0:	f007 fa1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d75c4:	f108 0101 	add.w	r1, r8, #1
   d75c8:	4653      	mov	r3, sl
   d75ca:	464a      	mov	r2, r9
   d75cc:	b289      	uxth	r1, r1
   d75ce:	4853      	ldr	r0, [pc, #332]	; (d771c <_Z4snumiiiii+0x12d0>)
   d75d0:	f8cd b000 	str.w	fp, [sp]
   d75d4:	f007 fa14 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d75d8:	f108 0102 	add.w	r1, r8, #2
   d75dc:	463b      	mov	r3, r7
   d75de:	463a      	mov	r2, r7
   d75e0:	b289      	uxth	r1, r1
   d75e2:	484e      	ldr	r0, [pc, #312]	; (d771c <_Z4snumiiiii+0x12d0>)
   d75e4:	9700      	str	r7, [sp, #0]
   d75e6:	f007 fa0b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d75ea:	f108 0103 	add.w	r1, r8, #3
   d75ee:	463b      	mov	r3, r7
   d75f0:	463a      	mov	r2, r7
   d75f2:	b289      	uxth	r1, r1
   d75f4:	4849      	ldr	r0, [pc, #292]	; (d771c <_Z4snumiiiii+0x12d0>)
   d75f6:	9700      	str	r7, [sp, #0]
   d75f8:	f007 fa02 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d75fc:	f108 0104 	add.w	r1, r8, #4
   d7600:	463b      	mov	r3, r7
   d7602:	463a      	mov	r2, r7
   d7604:	b289      	uxth	r1, r1
   d7606:	4845      	ldr	r0, [pc, #276]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7608:	9700      	str	r7, [sp, #0]
   d760a:	f007 f9f9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,0,0,0);
   d760e:	f108 0105 	add.w	r1, r8, #5
   d7612:	463b      	mov	r3, r7
   d7614:	463a      	mov	r2, r7
   d7616:	b289      	uxth	r1, r1
   d7618:	4840      	ldr	r0, [pc, #256]	; (d771c <_Z4snumiiiii+0x12d0>)
   d761a:	9700      	str	r7, [sp, #0]
   d761c:	f007 f9f0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7620:	f108 0110 	add.w	r1, r8, #16
   d7624:	4653      	mov	r3, sl
   d7626:	464a      	mov	r2, r9
   d7628:	b289      	uxth	r1, r1
   d762a:	483c      	ldr	r0, [pc, #240]	; (d771c <_Z4snumiiiii+0x12d0>)
   d762c:	f8cd b000 	str.w	fp, [sp]
   d7630:	f007 f9e6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7634:	f108 010f 	add.w	r1, r8, #15
   d7638:	4653      	mov	r3, sl
   d763a:	464a      	mov	r2, r9
   d763c:	b289      	uxth	r1, r1
   d763e:	4837      	ldr	r0, [pc, #220]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7640:	f8cd b000 	str.w	fp, [sp]
   d7644:	f007 f9dc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7648:	f108 010e 	add.w	r1, r8, #14
   d764c:	4653      	mov	r3, sl
   d764e:	464a      	mov	r2, r9
   d7650:	b289      	uxth	r1, r1
   d7652:	4832      	ldr	r0, [pc, #200]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7654:	f8cd b000 	str.w	fp, [sp]
   d7658:	f007 f9d2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d765c:	f108 010d 	add.w	r1, r8, #13
   d7660:	4653      	mov	r3, sl
   d7662:	464a      	mov	r2, r9
   d7664:	b289      	uxth	r1, r1
   d7666:	482d      	ldr	r0, [pc, #180]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7668:	f8cd b000 	str.w	fp, [sp]
   d766c:	f007 f9c8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7670:	f108 010c 	add.w	r1, r8, #12
   d7674:	f8cd b000 	str.w	fp, [sp]
   d7678:	4653      	mov	r3, sl
   d767a:	464a      	mov	r2, r9
   d767c:	b289      	uxth	r1, r1
   d767e:	4827      	ldr	r0, [pc, #156]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7680:	f007 f9be 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7684:	f016 0601 	ands.w	r6, r6, #1
   d7688:	f040 827a 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d768c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7690:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7694:	4821      	ldr	r0, [pc, #132]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7696:	f8cd 8000 	str.w	r8, [sp]
   d769a:	b2a4      	uxth	r4, r4
   d769c:	b2ed      	uxtb	r5, r5
   d769e:	462b      	mov	r3, r5
   d76a0:	463a      	mov	r2, r7
   d76a2:	4621      	mov	r1, r4
   d76a4:	f007 f9ac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,0,0,0);
   d76a8:	1c61      	adds	r1, r4, #1
   d76aa:	4633      	mov	r3, r6
   d76ac:	4632      	mov	r2, r6
   d76ae:	b289      	uxth	r1, r1
   d76b0:	481a      	ldr	r0, [pc, #104]	; (d771c <_Z4snumiiiii+0x12d0>)
   d76b2:	9600      	str	r6, [sp, #0]
   d76b4:	f007 f9a4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d76b8:	1ca1      	adds	r1, r4, #2
   d76ba:	4633      	mov	r3, r6
   d76bc:	4632      	mov	r2, r6
   d76be:	b289      	uxth	r1, r1
   d76c0:	4816      	ldr	r0, [pc, #88]	; (d771c <_Z4snumiiiii+0x12d0>)
   d76c2:	9600      	str	r6, [sp, #0]
   d76c4:	f007 f99c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d76c8:	1ce1      	adds	r1, r4, #3
   d76ca:	4633      	mov	r3, r6
   d76cc:	4632      	mov	r2, r6
   d76ce:	b289      	uxth	r1, r1
   d76d0:	4812      	ldr	r0, [pc, #72]	; (d771c <_Z4snumiiiii+0x12d0>)
   d76d2:	9600      	str	r6, [sp, #0]
   d76d4:	f007 f994 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d76d8:	1d21      	adds	r1, r4, #4
   d76da:	4633      	mov	r3, r6
   d76dc:	4632      	mov	r2, r6
   d76de:	b289      	uxth	r1, r1
   d76e0:	480e      	ldr	r0, [pc, #56]	; (d771c <_Z4snumiiiii+0x12d0>)
   d76e2:	9600      	str	r6, [sp, #0]
   d76e4:	f007 f98c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,0,0,0);
   d76e8:	f104 010b 	add.w	r1, r4, #11
   d76ec:	4633      	mov	r3, r6
   d76ee:	4632      	mov	r2, r6
   d76f0:	b289      	uxth	r1, r1
   d76f2:	480a      	ldr	r0, [pc, #40]	; (d771c <_Z4snumiiiii+0x12d0>)
   d76f4:	9600      	str	r6, [sp, #0]
   d76f6:	f007 f983 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d76fa:	f104 010c 	add.w	r1, r4, #12
   d76fe:	4633      	mov	r3, r6
   d7700:	4632      	mov	r2, r6
   d7702:	b289      	uxth	r1, r1
   d7704:	9600      	str	r6, [sp, #0]
   d7706:	4805      	ldr	r0, [pc, #20]	; (d771c <_Z4snumiiiii+0x12d0>)
   d7708:	f007 f97a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d770c:	f104 010d 	add.w	r1, r4, #13
   d7710:	9600      	str	r6, [sp, #0]
   d7712:	4633      	mov	r3, r6
   d7714:	4632      	mov	r2, r6
   d7716:	e0f4      	b.n	d7902 <_Z4snumiiiii+0x14b6>
   d7718:	80000001 	.word	0x80000001
   d771c:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 8)
    {
        if((pix/8)%2 == 1)
   d7720:	4b9b      	ldr	r3, [pc, #620]	; (d7990 <_Z4snumiiiii+0x1544>)
   d7722:	fb94 f6f0 	sdiv	r6, r4, r0
   d7726:	4033      	ands	r3, r6
   d7728:	2b00      	cmp	r3, #0
   d772a:	bfbe      	ittt	lt
   d772c:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d7730:	f063 0301 	ornlt	r3, r3, #1
   d7734:	3301      	addlt	r3, #1
   d7736:	2b01      	cmp	r3, #1
   d7738:	f040 8094 	bne.w	d7864 <_Z4snumiiiii+0x1418>
        {
            strip.setPixelColor(pix,R,G,B);
   d773c:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d7740:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d7744:	4893      	ldr	r0, [pc, #588]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7746:	f8cd a000 	str.w	sl, [sp]
   d774a:	b2a7      	uxth	r7, r4
   d774c:	fa5f f985 	uxtb.w	r9, r5
   d7750:	464b      	mov	r3, r9
   d7752:	4642      	mov	r2, r8
   d7754:	4639      	mov	r1, r7
   d7756:	f007 f953 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d775a:	1e79      	subs	r1, r7, #1
   d775c:	464b      	mov	r3, r9
   d775e:	4642      	mov	r2, r8
   d7760:	b289      	uxth	r1, r1
   d7762:	488c      	ldr	r0, [pc, #560]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7764:	f8cd a000 	str.w	sl, [sp]
   d7768:	f007 f94a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d776c:	1eb9      	subs	r1, r7, #2
   d776e:	464b      	mov	r3, r9
   d7770:	4642      	mov	r2, r8
   d7772:	b289      	uxth	r1, r1
   d7774:	4887      	ldr	r0, [pc, #540]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7776:	f8cd a000 	str.w	sl, [sp]
   d777a:	f007 f941 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d777e:	1ef9      	subs	r1, r7, #3
   d7780:	464b      	mov	r3, r9
   d7782:	4642      	mov	r2, r8
   d7784:	b289      	uxth	r1, r1
   d7786:	4883      	ldr	r0, [pc, #524]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7788:	f8cd a000 	str.w	sl, [sp]
   d778c:	f007 f938 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7790:	1f39      	subs	r1, r7, #4
   d7792:	464b      	mov	r3, r9
   d7794:	4642      	mov	r2, r8
   d7796:	b289      	uxth	r1, r1
   d7798:	487e      	ldr	r0, [pc, #504]	; (d7994 <_Z4snumiiiii+0x1548>)
   d779a:	f8cd a000 	str.w	sl, [sp]
   d779e:	f007 f92f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d77a2:	1c79      	adds	r1, r7, #1
   d77a4:	464b      	mov	r3, r9
   d77a6:	4642      	mov	r2, r8
   d77a8:	b289      	uxth	r1, r1
   d77aa:	487a      	ldr	r0, [pc, #488]	; (d7994 <_Z4snumiiiii+0x1548>)
   d77ac:	f8cd a000 	str.w	sl, [sp]
   d77b0:	f007 f926 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d77b4:	f04f 0b00 	mov.w	fp, #0
   d77b8:	1cb9      	adds	r1, r7, #2
   d77ba:	465b      	mov	r3, fp
   d77bc:	465a      	mov	r2, fp
   d77be:	b289      	uxth	r1, r1
   d77c0:	4874      	ldr	r0, [pc, #464]	; (d7994 <_Z4snumiiiii+0x1548>)
   d77c2:	f8cd b000 	str.w	fp, [sp]
   d77c6:	f007 f91b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d77ca:	1cf9      	adds	r1, r7, #3
   d77cc:	464b      	mov	r3, r9
   d77ce:	4642      	mov	r2, r8
   d77d0:	b289      	uxth	r1, r1
   d77d2:	4870      	ldr	r0, [pc, #448]	; (d7994 <_Z4snumiiiii+0x1548>)
   d77d4:	f8cd a000 	str.w	sl, [sp]
   d77d8:	f007 f912 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d77dc:	1d39      	adds	r1, r7, #4
   d77de:	465b      	mov	r3, fp
   d77e0:	465a      	mov	r2, fp
   d77e2:	b289      	uxth	r1, r1
   d77e4:	486b      	ldr	r0, [pc, #428]	; (d7994 <_Z4snumiiiii+0x1548>)
   d77e6:	f8cd b000 	str.w	fp, [sp]
   d77ea:	f007 f909 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d77ee:	1d79      	adds	r1, r7, #5
   d77f0:	464b      	mov	r3, r9
   d77f2:	4642      	mov	r2, r8
   d77f4:	b289      	uxth	r1, r1
   d77f6:	4867      	ldr	r0, [pc, #412]	; (d7994 <_Z4snumiiiii+0x1548>)
   d77f8:	f8cd a000 	str.w	sl, [sp]
   d77fc:	f007 f900 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7800:	f107 0110 	add.w	r1, r7, #16
   d7804:	464b      	mov	r3, r9
   d7806:	4642      	mov	r2, r8
   d7808:	b289      	uxth	r1, r1
   d780a:	4862      	ldr	r0, [pc, #392]	; (d7994 <_Z4snumiiiii+0x1548>)
   d780c:	f8cd a000 	str.w	sl, [sp]
   d7810:	f007 f8f6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7814:	f107 010f 	add.w	r1, r7, #15
   d7818:	464b      	mov	r3, r9
   d781a:	4642      	mov	r2, r8
   d781c:	b289      	uxth	r1, r1
   d781e:	485d      	ldr	r0, [pc, #372]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7820:	f8cd a000 	str.w	sl, [sp]
   d7824:	f007 f8ec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7828:	f107 010e 	add.w	r1, r7, #14
   d782c:	464b      	mov	r3, r9
   d782e:	4642      	mov	r2, r8
   d7830:	b289      	uxth	r1, r1
   d7832:	4858      	ldr	r0, [pc, #352]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7834:	f8cd a000 	str.w	sl, [sp]
   d7838:	f007 f8e2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d783c:	f107 010d 	add.w	r1, r7, #13
   d7840:	464b      	mov	r3, r9
   d7842:	4642      	mov	r2, r8
   d7844:	b289      	uxth	r1, r1
   d7846:	4853      	ldr	r0, [pc, #332]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7848:	f8cd a000 	str.w	sl, [sp]
   d784c:	f007 f8d8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7850:	f107 010c 	add.w	r1, r7, #12
   d7854:	f8cd a000 	str.w	sl, [sp]
   d7858:	464b      	mov	r3, r9
   d785a:	4642      	mov	r2, r8
   d785c:	b289      	uxth	r1, r1
   d785e:	484d      	ldr	r0, [pc, #308]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7860:	f007 f8ce 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7864:	f016 0601 	ands.w	r6, r6, #1
   d7868:	f040 818a 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d786c:	f89d 7008 	ldrb.w	r7, [sp, #8]
   d7870:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7874:	4847      	ldr	r0, [pc, #284]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7876:	f8cd 8000 	str.w	r8, [sp]
   d787a:	b2a4      	uxth	r4, r4
   d787c:	b2ed      	uxtb	r5, r5
   d787e:	462b      	mov	r3, r5
   d7880:	463a      	mov	r2, r7
   d7882:	4621      	mov	r1, r4
   d7884:	f007 f8bc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7888:	1c61      	adds	r1, r4, #1
   d788a:	462b      	mov	r3, r5
   d788c:	463a      	mov	r2, r7
   d788e:	b289      	uxth	r1, r1
   d7890:	4840      	ldr	r0, [pc, #256]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7892:	f8cd 8000 	str.w	r8, [sp]
   d7896:	f007 f8b3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d789a:	1ca1      	adds	r1, r4, #2
   d789c:	462b      	mov	r3, r5
   d789e:	463a      	mov	r2, r7
   d78a0:	b289      	uxth	r1, r1
   d78a2:	483c      	ldr	r0, [pc, #240]	; (d7994 <_Z4snumiiiii+0x1548>)
   d78a4:	f8cd 8000 	str.w	r8, [sp]
   d78a8:	f007 f8aa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d78ac:	1ce1      	adds	r1, r4, #3
   d78ae:	462b      	mov	r3, r5
   d78b0:	463a      	mov	r2, r7
   d78b2:	b289      	uxth	r1, r1
   d78b4:	4837      	ldr	r0, [pc, #220]	; (d7994 <_Z4snumiiiii+0x1548>)
   d78b6:	f8cd 8000 	str.w	r8, [sp]
   d78ba:	f007 f8a1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d78be:	1d21      	adds	r1, r4, #4
   d78c0:	462b      	mov	r3, r5
   d78c2:	463a      	mov	r2, r7
   d78c4:	b289      	uxth	r1, r1
   d78c6:	4833      	ldr	r0, [pc, #204]	; (d7994 <_Z4snumiiiii+0x1548>)
   d78c8:	f8cd 8000 	str.w	r8, [sp]
   d78cc:	f007 f898 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d78d0:	f104 010b 	add.w	r1, r4, #11
   d78d4:	462b      	mov	r3, r5
   d78d6:	463a      	mov	r2, r7
   d78d8:	b289      	uxth	r1, r1
   d78da:	482e      	ldr	r0, [pc, #184]	; (d7994 <_Z4snumiiiii+0x1548>)
   d78dc:	f8cd 8000 	str.w	r8, [sp]
   d78e0:	f007 f88e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d78e4:	f104 010c 	add.w	r1, r4, #12
   d78e8:	4633      	mov	r3, r6
   d78ea:	4632      	mov	r2, r6
   d78ec:	b289      	uxth	r1, r1
   d78ee:	9600      	str	r6, [sp, #0]
   d78f0:	4828      	ldr	r0, [pc, #160]	; (d7994 <_Z4snumiiiii+0x1548>)
   d78f2:	f007 f885 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d78f6:	f104 010d 	add.w	r1, r4, #13
   d78fa:	f8cd 8000 	str.w	r8, [sp]
   d78fe:	462b      	mov	r3, r5
   d7900:	463a      	mov	r2, r7
   d7902:	b289      	uxth	r1, r1
   d7904:	4823      	ldr	r0, [pc, #140]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7906:	f007 f87b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,0,0,0);
   d790a:	f104 010e 	add.w	r1, r4, #14
   d790e:	4633      	mov	r3, r6
   d7910:	4632      	mov	r2, r6
   d7912:	b289      	uxth	r1, r1
   d7914:	481f      	ldr	r0, [pc, #124]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7916:	9600      	str	r6, [sp, #0]
   d7918:	f007 f872 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d791c:	f104 010f 	add.w	r1, r4, #15
   d7920:	462b      	mov	r3, r5
   d7922:	463a      	mov	r2, r7
   d7924:	b289      	uxth	r1, r1
   d7926:	481b      	ldr	r0, [pc, #108]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7928:	f8cd 8000 	str.w	r8, [sp]
   d792c:	f007 f868 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7930:	f104 0110 	add.w	r1, r4, #16
   d7934:	462b      	mov	r3, r5
   d7936:	463a      	mov	r2, r7
   d7938:	b289      	uxth	r1, r1
   d793a:	4816      	ldr	r0, [pc, #88]	; (d7994 <_Z4snumiiiii+0x1548>)
   d793c:	f8cd 8000 	str.w	r8, [sp]
   d7940:	f007 f85e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+17,R,G,B);
   d7944:	f104 0111 	add.w	r1, r4, #17
   d7948:	462b      	mov	r3, r5
   d794a:	463a      	mov	r2, r7
   d794c:	b289      	uxth	r1, r1
   d794e:	4811      	ldr	r0, [pc, #68]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7950:	f8cd 8000 	str.w	r8, [sp]
   d7954:	f007 f854 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+18,R,G,B);
   d7958:	f104 0112 	add.w	r1, r4, #18
   d795c:	462b      	mov	r3, r5
   d795e:	463a      	mov	r2, r7
   d7960:	b289      	uxth	r1, r1
   d7962:	480c      	ldr	r0, [pc, #48]	; (d7994 <_Z4snumiiiii+0x1548>)
   d7964:	f8cd 8000 	str.w	r8, [sp]
   d7968:	f007 f84a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+19,R,G,B);
   d796c:	f104 0113 	add.w	r1, r4, #19
   d7970:	462b      	mov	r3, r5
   d7972:	463a      	mov	r2, r7
   d7974:	b289      	uxth	r1, r1
   d7976:	f8cd 8000 	str.w	r8, [sp]
   d797a:	4806      	ldr	r0, [pc, #24]	; (d7994 <_Z4snumiiiii+0x1548>)
   d797c:	f007 f840 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+20,R,G,B);
   d7980:	f104 0114 	add.w	r1, r4, #20
   d7984:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
   d7988:	462b      	mov	r3, r5
   d798a:	463a      	mov	r2, r7
   d798c:	e5cb      	b.n	d7526 <_Z4snumiiiii+0x10da>
   d798e:	bf00      	nop
   d7990:	80000001 	.word	0x80000001
   d7994:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
    if(num == 0)
   d7998:	2800      	cmp	r0, #0
   d799a:	f040 80f1 	bne.w	d7b80 <_Z4snumiiiii+0x1734>
    {
        if((pix/8)%2 == 1)
   d799e:	4b7a      	ldr	r3, [pc, #488]	; (d7b88 <_Z4snumiiiii+0x173c>)
   d79a0:	2708      	movs	r7, #8
   d79a2:	fb94 f7f7 	sdiv	r7, r4, r7
   d79a6:	403b      	ands	r3, r7
   d79a8:	2b00      	cmp	r3, #0
   d79aa:	bfbe      	ittt	lt
   d79ac:	f103 33ff 	addlt.w	r3, r3, #4294967295
   d79b0:	f063 0301 	ornlt	r3, r3, #1
   d79b4:	3301      	addlt	r3, #1
   d79b6:	2b01      	cmp	r3, #1
   d79b8:	f040 8094 	bne.w	d7ae4 <_Z4snumiiiii+0x1698>
        {
            strip.setPixelColor(pix,R,G,B);
   d79bc:	f89d 8008 	ldrb.w	r8, [sp, #8]
   d79c0:	f89d a00c 	ldrb.w	sl, [sp, #12]
   d79c4:	4871      	ldr	r0, [pc, #452]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d79c6:	f8cd a000 	str.w	sl, [sp]
   d79ca:	b2a6      	uxth	r6, r4
   d79cc:	fa5f f985 	uxtb.w	r9, r5
   d79d0:	464b      	mov	r3, r9
   d79d2:	4642      	mov	r2, r8
   d79d4:	4631      	mov	r1, r6
   d79d6:	f007 f813 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-1,R,G,B);
   d79da:	1e71      	subs	r1, r6, #1
   d79dc:	464b      	mov	r3, r9
   d79de:	4642      	mov	r2, r8
   d79e0:	b289      	uxth	r1, r1
   d79e2:	486a      	ldr	r0, [pc, #424]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d79e4:	f8cd a000 	str.w	sl, [sp]
   d79e8:	f007 f80a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-2,R,G,B);
   d79ec:	1eb1      	subs	r1, r6, #2
   d79ee:	464b      	mov	r3, r9
   d79f0:	4642      	mov	r2, r8
   d79f2:	b289      	uxth	r1, r1
   d79f4:	4865      	ldr	r0, [pc, #404]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d79f6:	f8cd a000 	str.w	sl, [sp]
   d79fa:	f007 f801 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-3,R,G,B);
   d79fe:	1ef1      	subs	r1, r6, #3
   d7a00:	464b      	mov	r3, r9
   d7a02:	4642      	mov	r2, r8
   d7a04:	b289      	uxth	r1, r1
   d7a06:	4861      	ldr	r0, [pc, #388]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a08:	f8cd a000 	str.w	sl, [sp]
   d7a0c:	f006 fff8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix-4,R,G,B);
   d7a10:	1f31      	subs	r1, r6, #4
   d7a12:	464b      	mov	r3, r9
   d7a14:	4642      	mov	r2, r8
   d7a16:	b289      	uxth	r1, r1
   d7a18:	485c      	ldr	r0, [pc, #368]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a1a:	f8cd a000 	str.w	sl, [sp]
   d7a1e:	f006 ffef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7a22:	1c71      	adds	r1, r6, #1
   d7a24:	464b      	mov	r3, r9
   d7a26:	4642      	mov	r2, r8
   d7a28:	b289      	uxth	r1, r1
   d7a2a:	4858      	ldr	r0, [pc, #352]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a2c:	f8cd a000 	str.w	sl, [sp]
            strip.setPixelColor(pix+2,0,0,0);
   d7a30:	f04f 0b00 	mov.w	fp, #0
            strip.setPixelColor(pix,R,G,B);
            strip.setPixelColor(pix-1,R,G,B);
            strip.setPixelColor(pix-2,R,G,B);
            strip.setPixelColor(pix-3,R,G,B);
            strip.setPixelColor(pix-4,R,G,B);
            strip.setPixelColor(pix+1,R,G,B);
   d7a34:	f006 ffe4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,0,0,0);
   d7a38:	1cb1      	adds	r1, r6, #2
   d7a3a:	465b      	mov	r3, fp
   d7a3c:	465a      	mov	r2, fp
   d7a3e:	b289      	uxth	r1, r1
   d7a40:	4852      	ldr	r0, [pc, #328]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a42:	f8cd b000 	str.w	fp, [sp]
   d7a46:	f006 ffdb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,0,0,0);
   d7a4a:	1cf1      	adds	r1, r6, #3
   d7a4c:	465b      	mov	r3, fp
   d7a4e:	465a      	mov	r2, fp
   d7a50:	b289      	uxth	r1, r1
   d7a52:	484e      	ldr	r0, [pc, #312]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a54:	f8cd b000 	str.w	fp, [sp]
   d7a58:	f006 ffd2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,0,0,0);
   d7a5c:	1d31      	adds	r1, r6, #4
   d7a5e:	465b      	mov	r3, fp
   d7a60:	465a      	mov	r2, fp
   d7a62:	b289      	uxth	r1, r1
   d7a64:	4849      	ldr	r0, [pc, #292]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a66:	f8cd b000 	str.w	fp, [sp]
   d7a6a:	f006 ffc9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+5,R,G,B);
   d7a6e:	1d71      	adds	r1, r6, #5
   d7a70:	464b      	mov	r3, r9
   d7a72:	4642      	mov	r2, r8
   d7a74:	b289      	uxth	r1, r1
   d7a76:	4845      	ldr	r0, [pc, #276]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a78:	f8cd a000 	str.w	sl, [sp]
   d7a7c:	f006 ffc0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+16,R,G,B);
   d7a80:	f106 0110 	add.w	r1, r6, #16
   d7a84:	464b      	mov	r3, r9
   d7a86:	4642      	mov	r2, r8
   d7a88:	b289      	uxth	r1, r1
   d7a8a:	4840      	ldr	r0, [pc, #256]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7a8c:	f8cd a000 	str.w	sl, [sp]
   d7a90:	f006 ffb6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+15,R,G,B);
   d7a94:	f106 010f 	add.w	r1, r6, #15
   d7a98:	464b      	mov	r3, r9
   d7a9a:	4642      	mov	r2, r8
   d7a9c:	b289      	uxth	r1, r1
   d7a9e:	483b      	ldr	r0, [pc, #236]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7aa0:	f8cd a000 	str.w	sl, [sp]
   d7aa4:	f006 ffac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+14,R,G,B);
   d7aa8:	f106 010e 	add.w	r1, r6, #14
   d7aac:	464b      	mov	r3, r9
   d7aae:	4642      	mov	r2, r8
   d7ab0:	b289      	uxth	r1, r1
   d7ab2:	4836      	ldr	r0, [pc, #216]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7ab4:	f8cd a000 	str.w	sl, [sp]
   d7ab8:	f006 ffa2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,R,G,B);
   d7abc:	f106 010d 	add.w	r1, r6, #13
   d7ac0:	464b      	mov	r3, r9
   d7ac2:	4642      	mov	r2, r8
   d7ac4:	b289      	uxth	r1, r1
   d7ac6:	4831      	ldr	r0, [pc, #196]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7ac8:	f8cd a000 	str.w	sl, [sp]
   d7acc:	f006 ff98 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,R,G,B);
   d7ad0:	f106 010c 	add.w	r1, r6, #12
   d7ad4:	f8cd a000 	str.w	sl, [sp]
   d7ad8:	464b      	mov	r3, r9
   d7ada:	4642      	mov	r2, r8
   d7adc:	b289      	uxth	r1, r1
   d7ade:	482b      	ldr	r0, [pc, #172]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7ae0:	f006 ff8e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if((pix/8)%2 == 0)
   d7ae4:	f017 0701 	ands.w	r7, r7, #1
   d7ae8:	d14a      	bne.n	d7b80 <_Z4snumiiiii+0x1734>
        {
            strip.setPixelColor(pix,R,G,B);
   d7aea:	f89d 6008 	ldrb.w	r6, [sp, #8]
   d7aee:	f89d 800c 	ldrb.w	r8, [sp, #12]
   d7af2:	4826      	ldr	r0, [pc, #152]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7af4:	f8cd 8000 	str.w	r8, [sp]
   d7af8:	b2a4      	uxth	r4, r4
   d7afa:	b2ed      	uxtb	r5, r5
   d7afc:	462b      	mov	r3, r5
   d7afe:	4632      	mov	r2, r6
   d7b00:	4621      	mov	r1, r4
   d7b02:	f006 ff7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+1,R,G,B);
   d7b06:	1c61      	adds	r1, r4, #1
   d7b08:	462b      	mov	r3, r5
   d7b0a:	4632      	mov	r2, r6
   d7b0c:	b289      	uxth	r1, r1
   d7b0e:	481f      	ldr	r0, [pc, #124]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b10:	f8cd 8000 	str.w	r8, [sp]
   d7b14:	f006 ff74 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+2,R,G,B);
   d7b18:	1ca1      	adds	r1, r4, #2
   d7b1a:	462b      	mov	r3, r5
   d7b1c:	4632      	mov	r2, r6
   d7b1e:	b289      	uxth	r1, r1
   d7b20:	481a      	ldr	r0, [pc, #104]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b22:	f8cd 8000 	str.w	r8, [sp]
   d7b26:	f006 ff6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+3,R,G,B);
   d7b2a:	1ce1      	adds	r1, r4, #3
   d7b2c:	462b      	mov	r3, r5
   d7b2e:	4632      	mov	r2, r6
   d7b30:	b289      	uxth	r1, r1
   d7b32:	4816      	ldr	r0, [pc, #88]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b34:	f8cd 8000 	str.w	r8, [sp]
   d7b38:	f006 ff62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+4,R,G,B);
   d7b3c:	1d21      	adds	r1, r4, #4
   d7b3e:	462b      	mov	r3, r5
   d7b40:	4632      	mov	r2, r6
   d7b42:	b289      	uxth	r1, r1
   d7b44:	4811      	ldr	r0, [pc, #68]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b46:	f8cd 8000 	str.w	r8, [sp]
   d7b4a:	f006 ff59 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+11,R,G,B);
   d7b4e:	f104 010b 	add.w	r1, r4, #11
   d7b52:	462b      	mov	r3, r5
   d7b54:	4632      	mov	r2, r6
   d7b56:	b289      	uxth	r1, r1
   d7b58:	480c      	ldr	r0, [pc, #48]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b5a:	f8cd 8000 	str.w	r8, [sp]
   d7b5e:	f006 ff4f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+12,0,0,0);
   d7b62:	f104 010c 	add.w	r1, r4, #12
   d7b66:	463b      	mov	r3, r7
   d7b68:	463a      	mov	r2, r7
   d7b6a:	b289      	uxth	r1, r1
   d7b6c:	9700      	str	r7, [sp, #0]
   d7b6e:	4807      	ldr	r0, [pc, #28]	; (d7b8c <_Z4snumiiiii+0x1740>)
   d7b70:	f006 ff46 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(pix+13,0,0,0);
   d7b74:	f104 010d 	add.w	r1, r4, #13
   d7b78:	9700      	str	r7, [sp, #0]
   d7b7a:	463b      	mov	r3, r7
   d7b7c:	463a      	mov	r2, r7
   d7b7e:	e48d      	b.n	d749c <_Z4snumiiiii+0x1050>
            strip.setPixelColor(pix+18,R,G,B);
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
   d7b80:	b005      	add	sp, #20
   d7b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7b86:	bf00      	nop
   d7b88:	80000001 	.word	0x80000001
   d7b8c:	2003e31c 	.word	0x2003e31c

000d7b90 <_Z6letterciiii>:
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(ltr == 'a')
   d7b92:	2861      	cmp	r0, #97	; 0x61
            strip.setPixelColor(pix+19,R,G,B);
            strip.setPixelColor(pix+20,R,G,B);
        }
    }
}                           
void letter(char ltr, int pix, int R, int G, int B){            //Code for displaying a single character, ltr is the letter (''), pix is the top left pixel in a standard letter which is 5x5 with a space
   d7b94:	9d08      	ldr	r5, [sp, #32]
    if(ltr == 'a')
   d7b96:	d118      	bne.n	d7bca <_Z6letterciiii+0x3a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7b98:	b28c      	uxth	r4, r1
   d7b9a:	b2d6      	uxtb	r6, r2
   d7b9c:	b2df      	uxtb	r7, r3
   d7b9e:	b2ed      	uxtb	r5, r5
   d7ba0:	f104 010c 	add.w	r1, r4, #12
   d7ba4:	463b      	mov	r3, r7
   d7ba6:	4632      	mov	r2, r6
   d7ba8:	b289      	uxth	r1, r1
   d7baa:	48ac      	ldr	r0, [pc, #688]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7bac:	9500      	str	r5, [sp, #0]
   d7bae:	f006 ff27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7bb2:	f104 010d 	add.w	r1, r4, #13
   d7bb6:	b289      	uxth	r1, r1
   d7bb8:	9500      	str	r5, [sp, #0]
   d7bba:	463b      	mov	r3, r7
   d7bbc:	4632      	mov	r2, r6
   d7bbe:	48a7      	ldr	r0, [pc, #668]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7bc0:	f006 ff1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7bc4:	f104 0111 	add.w	r1, r4, #17
   d7bc8:	e2d7      	b.n	d817a <_Z6letterciiii+0x5ea>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'b')
   d7bca:	2862      	cmp	r0, #98	; 0x62
   d7bcc:	d13c      	bne.n	d7c48 <_Z6letterciiii+0xb8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7bce:	b28c      	uxth	r4, r1
   d7bd0:	b2d6      	uxtb	r6, r2
   d7bd2:	b2df      	uxtb	r7, r3
   d7bd4:	b2ed      	uxtb	r5, r5
   d7bd6:	f104 010b 	add.w	r1, r4, #11
   d7bda:	463b      	mov	r3, r7
   d7bdc:	4632      	mov	r2, r6
   d7bde:	b289      	uxth	r1, r1
   d7be0:	489e      	ldr	r0, [pc, #632]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7be2:	9500      	str	r5, [sp, #0]
   d7be4:	f006 ff0c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7be8:	f104 010c 	add.w	r1, r4, #12
   d7bec:	463b      	mov	r3, r7
   d7bee:	4632      	mov	r2, r6
   d7bf0:	b289      	uxth	r1, r1
   d7bf2:	489a      	ldr	r0, [pc, #616]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7bf4:	9500      	str	r5, [sp, #0]
   d7bf6:	f006 ff03 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7bfa:	f104 010d 	add.w	r1, r4, #13
   d7bfe:	463b      	mov	r3, r7
   d7c00:	4632      	mov	r2, r6
   d7c02:	b289      	uxth	r1, r1
   d7c04:	4895      	ldr	r0, [pc, #596]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c06:	9500      	str	r5, [sp, #0]
   d7c08:	f006 fefa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7c0c:	f104 010e 	add.w	r1, r4, #14
   d7c10:	463b      	mov	r3, r7
   d7c12:	4632      	mov	r2, r6
   d7c14:	b289      	uxth	r1, r1
   d7c16:	4891      	ldr	r0, [pc, #580]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c18:	9500      	str	r5, [sp, #0]
   d7c1a:	f006 fef1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7c1e:	f104 010f 	add.w	r1, r4, #15
   d7c22:	463b      	mov	r3, r7
   d7c24:	4632      	mov	r2, r6
   d7c26:	b289      	uxth	r1, r1
   d7c28:	488c      	ldr	r0, [pc, #560]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c2a:	9500      	str	r5, [sp, #0]
   d7c2c:	f006 fee8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7c30:	f104 0112 	add.w	r1, r4, #18
   d7c34:	b289      	uxth	r1, r1
   d7c36:	9500      	str	r5, [sp, #0]
   d7c38:	463b      	mov	r3, r7
   d7c3a:	4632      	mov	r2, r6
   d7c3c:	4887      	ldr	r0, [pc, #540]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c3e:	f006 fedf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7c42:	f104 0114 	add.w	r1, r4, #20
   d7c46:	e0f5      	b.n	d7e34 <_Z6letterciiii+0x2a4>
        strip.setPixelColor(pix+28,R,G,B);
    }
    if(ltr == 'c')
   d7c48:	2863      	cmp	r0, #99	; 0x63
   d7c4a:	d12b      	bne.n	d7ca4 <_Z6letterciiii+0x114>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7c4c:	b28c      	uxth	r4, r1
   d7c4e:	b2d6      	uxtb	r6, r2
   d7c50:	b2df      	uxtb	r7, r3
   d7c52:	b2ed      	uxtb	r5, r5
   d7c54:	f104 010c 	add.w	r1, r4, #12
   d7c58:	463b      	mov	r3, r7
   d7c5a:	4632      	mov	r2, r6
   d7c5c:	b289      	uxth	r1, r1
   d7c5e:	487f      	ldr	r0, [pc, #508]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c60:	9500      	str	r5, [sp, #0]
   d7c62:	f006 fecd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7c66:	f104 010d 	add.w	r1, r4, #13
   d7c6a:	463b      	mov	r3, r7
   d7c6c:	4632      	mov	r2, r6
   d7c6e:	b289      	uxth	r1, r1
   d7c70:	487a      	ldr	r0, [pc, #488]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c72:	9500      	str	r5, [sp, #0]
   d7c74:	f006 fec4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d7c78:	f104 0111 	add.w	r1, r4, #17
   d7c7c:	463b      	mov	r3, r7
   d7c7e:	4632      	mov	r2, r6
   d7c80:	b289      	uxth	r1, r1
   d7c82:	4876      	ldr	r0, [pc, #472]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c84:	9500      	str	r5, [sp, #0]
   d7c86:	f006 febb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7c8a:	f104 0114 	add.w	r1, r4, #20
   d7c8e:	b289      	uxth	r1, r1
   d7c90:	9500      	str	r5, [sp, #0]
   d7c92:	463b      	mov	r3, r7
   d7c94:	4632      	mov	r2, r6
   d7c96:	4871      	ldr	r0, [pc, #452]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7c98:	f006 feb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7c9c:	f104 011b 	add.w	r1, r4, #27
   d7ca0:	f000 bfd6 	b.w	d8c50 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'd')
   d7ca4:	2864      	cmp	r0, #100	; 0x64
   d7ca6:	d110      	bne.n	d7cca <_Z6letterciiii+0x13a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7ca8:	b28c      	uxth	r4, r1
   d7caa:	b2d6      	uxtb	r6, r2
   d7cac:	b2df      	uxtb	r7, r3
   d7cae:	b2ed      	uxtb	r5, r5
   d7cb0:	f104 010c 	add.w	r1, r4, #12
   d7cb4:	b289      	uxth	r1, r1
   d7cb6:	9500      	str	r5, [sp, #0]
   d7cb8:	463b      	mov	r3, r7
   d7cba:	4632      	mov	r2, r6
   d7cbc:	4867      	ldr	r0, [pc, #412]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7cbe:	f006 fe9f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7cc2:	f104 0112 	add.w	r1, r4, #18
   d7cc6:	f001 b86f 	b.w	d8da8 <_Z6letterciiii+0x1218>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'e')
   d7cca:	2865      	cmp	r0, #101	; 0x65
   d7ccc:	d12a      	bne.n	d7d24 <_Z6letterciiii+0x194>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7cce:	b28c      	uxth	r4, r1
   d7cd0:	b2d6      	uxtb	r6, r2
   d7cd2:	b2df      	uxtb	r7, r3
   d7cd4:	b2ed      	uxtb	r5, r5
   d7cd6:	f104 010c 	add.w	r1, r4, #12
   d7cda:	463b      	mov	r3, r7
   d7cdc:	4632      	mov	r2, r6
   d7cde:	b289      	uxth	r1, r1
   d7ce0:	485e      	ldr	r0, [pc, #376]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7ce2:	9500      	str	r5, [sp, #0]
   d7ce4:	f006 fe8c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7ce8:	f104 010d 	add.w	r1, r4, #13
   d7cec:	463b      	mov	r3, r7
   d7cee:	4632      	mov	r2, r6
   d7cf0:	b289      	uxth	r1, r1
   d7cf2:	485a      	ldr	r0, [pc, #360]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7cf4:	9500      	str	r5, [sp, #0]
   d7cf6:	f006 fe83 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7cfa:	f104 010e 	add.w	r1, r4, #14
   d7cfe:	463b      	mov	r3, r7
   d7d00:	4632      	mov	r2, r6
   d7d02:	b289      	uxth	r1, r1
   d7d04:	4855      	ldr	r0, [pc, #340]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d06:	9500      	str	r5, [sp, #0]
   d7d08:	f006 fe7a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7d0c:	f104 0110 	add.w	r1, r4, #16
   d7d10:	b289      	uxth	r1, r1
   d7d12:	9500      	str	r5, [sp, #0]
   d7d14:	463b      	mov	r3, r7
   d7d16:	4632      	mov	r2, r6
   d7d18:	4850      	ldr	r0, [pc, #320]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d1a:	f006 fe71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7d1e:	f104 0112 	add.w	r1, r4, #18
   d7d22:	e316      	b.n	d8352 <_Z6letterciiii+0x7c2>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'f')
   d7d24:	2866      	cmp	r0, #102	; 0x66
   d7d26:	d122      	bne.n	d7d6e <_Z6letterciiii+0x1de>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7d28:	b28c      	uxth	r4, r1
   d7d2a:	b2d6      	uxtb	r6, r2
   d7d2c:	b2df      	uxtb	r7, r3
   d7d2e:	b2ed      	uxtb	r5, r5
   d7d30:	f104 010b 	add.w	r1, r4, #11
   d7d34:	463b      	mov	r3, r7
   d7d36:	4632      	mov	r2, r6
   d7d38:	b289      	uxth	r1, r1
   d7d3a:	4848      	ldr	r0, [pc, #288]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d3c:	9500      	str	r5, [sp, #0]
   d7d3e:	f006 fe5f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7d42:	f104 010c 	add.w	r1, r4, #12
   d7d46:	463b      	mov	r3, r7
   d7d48:	4632      	mov	r2, r6
   d7d4a:	b289      	uxth	r1, r1
   d7d4c:	4843      	ldr	r0, [pc, #268]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d4e:	9500      	str	r5, [sp, #0]
   d7d50:	f006 fe56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7d54:	f104 010d 	add.w	r1, r4, #13
   d7d58:	b289      	uxth	r1, r1
   d7d5a:	9500      	str	r5, [sp, #0]
   d7d5c:	463b      	mov	r3, r7
   d7d5e:	4632      	mov	r2, r6
   d7d60:	483e      	ldr	r0, [pc, #248]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d62:	f006 fe4d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7d66:	f104 010e 	add.w	r1, r4, #14
   d7d6a:	f000 bc4b 	b.w	d8604 <_Z6letterciiii+0xa74>
        strip.setPixelColor(pix+16,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'g')
   d7d6e:	2867      	cmp	r0, #103	; 0x67
   d7d70:	d122      	bne.n	d7db8 <_Z6letterciiii+0x228>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7d72:	b28c      	uxth	r4, r1
   d7d74:	b2d6      	uxtb	r6, r2
   d7d76:	b2df      	uxtb	r7, r3
   d7d78:	b2ed      	uxtb	r5, r5
   d7d7a:	f104 010b 	add.w	r1, r4, #11
   d7d7e:	463b      	mov	r3, r7
   d7d80:	4632      	mov	r2, r6
   d7d82:	b289      	uxth	r1, r1
   d7d84:	4835      	ldr	r0, [pc, #212]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d86:	9500      	str	r5, [sp, #0]
   d7d88:	f006 fe3a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7d8c:	f104 010e 	add.w	r1, r4, #14
   d7d90:	463b      	mov	r3, r7
   d7d92:	4632      	mov	r2, r6
   d7d94:	b289      	uxth	r1, r1
   d7d96:	4831      	ldr	r0, [pc, #196]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7d98:	9500      	str	r5, [sp, #0]
   d7d9a:	f006 fe31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d7d9e:	f104 0110 	add.w	r1, r4, #16
   d7da2:	b289      	uxth	r1, r1
   d7da4:	9500      	str	r5, [sp, #0]
   d7da6:	463b      	mov	r3, r7
   d7da8:	4632      	mov	r2, r6
   d7daa:	482c      	ldr	r0, [pc, #176]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7dac:	f006 fe28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7db0:	f104 0112 	add.w	r1, r4, #18
   d7db4:	f001 b82e 	b.w	d8e14 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'h')
   d7db8:	2868      	cmp	r0, #104	; 0x68
   d7dba:	d146      	bne.n	d7e4a <_Z6letterciiii+0x2ba>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7dbc:	b28c      	uxth	r4, r1
   d7dbe:	b2d6      	uxtb	r6, r2
   d7dc0:	b2df      	uxtb	r7, r3
   d7dc2:	b2ed      	uxtb	r5, r5
   d7dc4:	f104 010b 	add.w	r1, r4, #11
   d7dc8:	463b      	mov	r3, r7
   d7dca:	4632      	mov	r2, r6
   d7dcc:	b289      	uxth	r1, r1
   d7dce:	4823      	ldr	r0, [pc, #140]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7dd0:	9500      	str	r5, [sp, #0]
   d7dd2:	f006 fe15 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7dd6:	f104 010c 	add.w	r1, r4, #12
   d7dda:	463b      	mov	r3, r7
   d7ddc:	4632      	mov	r2, r6
   d7dde:	b289      	uxth	r1, r1
   d7de0:	481e      	ldr	r0, [pc, #120]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7de2:	9500      	str	r5, [sp, #0]
   d7de4:	f006 fe0c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7de8:	f104 010d 	add.w	r1, r4, #13
   d7dec:	463b      	mov	r3, r7
   d7dee:	4632      	mov	r2, r6
   d7df0:	b289      	uxth	r1, r1
   d7df2:	481a      	ldr	r0, [pc, #104]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7df4:	9500      	str	r5, [sp, #0]
   d7df6:	f006 fe03 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7dfa:	f104 010e 	add.w	r1, r4, #14
   d7dfe:	463b      	mov	r3, r7
   d7e00:	4632      	mov	r2, r6
   d7e02:	b289      	uxth	r1, r1
   d7e04:	4815      	ldr	r0, [pc, #84]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7e06:	9500      	str	r5, [sp, #0]
   d7e08:	f006 fdfa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7e0c:	f104 010f 	add.w	r1, r4, #15
   d7e10:	463b      	mov	r3, r7
   d7e12:	4632      	mov	r2, r6
   d7e14:	b289      	uxth	r1, r1
   d7e16:	4811      	ldr	r0, [pc, #68]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7e18:	9500      	str	r5, [sp, #0]
   d7e1a:	f006 fdf1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7e1e:	f104 0112 	add.w	r1, r4, #18
   d7e22:	b289      	uxth	r1, r1
   d7e24:	9500      	str	r5, [sp, #0]
   d7e26:	463b      	mov	r3, r7
   d7e28:	4632      	mov	r2, r6
   d7e2a:	480c      	ldr	r0, [pc, #48]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7e2c:	f006 fde8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7e30:	f104 011b 	add.w	r1, r4, #27
   d7e34:	b289      	uxth	r1, r1
   d7e36:	9500      	str	r5, [sp, #0]
   d7e38:	463b      	mov	r3, r7
   d7e3a:	4632      	mov	r2, r6
   d7e3c:	4807      	ldr	r0, [pc, #28]	; (d7e5c <_Z6letterciiii+0x2cc>)
   d7e3e:	f006 fddf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7e42:	f104 011c 	add.w	r1, r4, #28
   d7e46:	f000 bf0c 	b.w	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'i')
   d7e4a:	2869      	cmp	r0, #105	; 0x69
   d7e4c:	d108      	bne.n	d7e60 <_Z6letterciiii+0x2d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d7e4e:	b28c      	uxth	r4, r1
   d7e50:	b2d6      	uxtb	r6, r2
   d7e52:	b2df      	uxtb	r7, r3
   d7e54:	b2ed      	uxtb	r5, r5
   d7e56:	f104 010f 	add.w	r1, r4, #15
   d7e5a:	e064      	b.n	d7f26 <_Z6letterciiii+0x396>
   d7e5c:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+12,R,G,B);
        strip.setPixelColor(pix+11,R,G,B);
    }
    if(ltr == 'j')
   d7e60:	286a      	cmp	r0, #106	; 0x6a
   d7e62:	d122      	bne.n	d7eaa <_Z6letterciiii+0x31a>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d7e64:	b28c      	uxth	r4, r1
   d7e66:	b2d6      	uxtb	r6, r2
   d7e68:	b2df      	uxtb	r7, r3
   d7e6a:	b2ed      	uxtb	r5, r5
   d7e6c:	f104 010c 	add.w	r1, r4, #12
   d7e70:	463b      	mov	r3, r7
   d7e72:	4632      	mov	r2, r6
   d7e74:	b289      	uxth	r1, r1
   d7e76:	48b7      	ldr	r0, [pc, #732]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7e78:	9500      	str	r5, [sp, #0]
   d7e7a:	f006 fdc1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d7e7e:	f104 0114 	add.w	r1, r4, #20
   d7e82:	463b      	mov	r3, r7
   d7e84:	4632      	mov	r2, r6
   d7e86:	b289      	uxth	r1, r1
   d7e88:	48b2      	ldr	r0, [pc, #712]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7e8a:	9500      	str	r5, [sp, #0]
   d7e8c:	f006 fdb8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7e90:	f104 011c 	add.w	r1, r4, #28
   d7e94:	b289      	uxth	r1, r1
   d7e96:	9500      	str	r5, [sp, #0]
   d7e98:	463b      	mov	r3, r7
   d7e9a:	4632      	mov	r2, r6
   d7e9c:	48ad      	ldr	r0, [pc, #692]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7e9e:	f006 fdaf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d7ea2:	f104 011d 	add.w	r1, r4, #29
   d7ea6:	f001 b886 	b.w	d8fb6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'k')
   d7eaa:	286b      	cmp	r0, #107	; 0x6b
   d7eac:	d12a      	bne.n	d7f04 <_Z6letterciiii+0x374>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7eae:	b28c      	uxth	r4, r1
   d7eb0:	b2d6      	uxtb	r6, r2
   d7eb2:	b2df      	uxtb	r7, r3
   d7eb4:	b2ed      	uxtb	r5, r5
   d7eb6:	f104 010b 	add.w	r1, r4, #11
   d7eba:	463b      	mov	r3, r7
   d7ebc:	4632      	mov	r2, r6
   d7ebe:	b289      	uxth	r1, r1
   d7ec0:	48a4      	ldr	r0, [pc, #656]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7ec2:	9500      	str	r5, [sp, #0]
   d7ec4:	f006 fd9c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7ec8:	f104 010c 	add.w	r1, r4, #12
   d7ecc:	463b      	mov	r3, r7
   d7ece:	4632      	mov	r2, r6
   d7ed0:	b289      	uxth	r1, r1
   d7ed2:	48a0      	ldr	r0, [pc, #640]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7ed4:	9500      	str	r5, [sp, #0]
   d7ed6:	f006 fd93 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7eda:	f104 010d 	add.w	r1, r4, #13
   d7ede:	463b      	mov	r3, r7
   d7ee0:	4632      	mov	r2, r6
   d7ee2:	b289      	uxth	r1, r1
   d7ee4:	489b      	ldr	r0, [pc, #620]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7ee6:	9500      	str	r5, [sp, #0]
   d7ee8:	f006 fd8a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7eec:	f104 010e 	add.w	r1, r4, #14
   d7ef0:	b289      	uxth	r1, r1
   d7ef2:	9500      	str	r5, [sp, #0]
   d7ef4:	463b      	mov	r3, r7
   d7ef6:	4632      	mov	r2, r6
   d7ef8:	4896      	ldr	r0, [pc, #600]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7efa:	f006 fd81 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d7efe:	f104 010f 	add.w	r1, r4, #15
   d7f02:	e1cb      	b.n	d829c <_Z6letterciiii+0x70c>
        strip.setPixelColor(pix+19,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'l')
   d7f04:	286c      	cmp	r0, #108	; 0x6c
   d7f06:	d12b      	bne.n	d7f60 <_Z6letterciiii+0x3d0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d7f08:	b28c      	uxth	r4, r1
   d7f0a:	b2d6      	uxtb	r6, r2
   d7f0c:	b2df      	uxtb	r7, r3
   d7f0e:	b2ed      	uxtb	r5, r5
   d7f10:	f104 010f 	add.w	r1, r4, #15
   d7f14:	b289      	uxth	r1, r1
   d7f16:	9500      	str	r5, [sp, #0]
   d7f18:	463b      	mov	r3, r7
   d7f1a:	4632      	mov	r2, r6
   d7f1c:	488d      	ldr	r0, [pc, #564]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f1e:	f006 fd6f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d7f22:	f104 010e 	add.w	r1, r4, #14
   d7f26:	463b      	mov	r3, r7
   d7f28:	4632      	mov	r2, r6
   d7f2a:	b289      	uxth	r1, r1
   d7f2c:	4889      	ldr	r0, [pc, #548]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f2e:	9500      	str	r5, [sp, #0]
   d7f30:	f006 fd66 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7f34:	f104 010d 	add.w	r1, r4, #13
   d7f38:	463b      	mov	r3, r7
   d7f3a:	4632      	mov	r2, r6
   d7f3c:	b289      	uxth	r1, r1
   d7f3e:	4885      	ldr	r0, [pc, #532]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f40:	9500      	str	r5, [sp, #0]
   d7f42:	f006 fd5d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f46:	f104 010c 	add.w	r1, r4, #12
   d7f4a:	b289      	uxth	r1, r1
   d7f4c:	9500      	str	r5, [sp, #0]
   d7f4e:	463b      	mov	r3, r7
   d7f50:	4632      	mov	r2, r6
   d7f52:	4880      	ldr	r0, [pc, #512]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f54:	f006 fd54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d7f58:	f104 010b 	add.w	r1, r4, #11
   d7f5c:	f000 be81 	b.w	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'm')
   d7f60:	286d      	cmp	r0, #109	; 0x6d
   d7f62:	d134      	bne.n	d7fce <_Z6letterciiii+0x43e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7f64:	b28c      	uxth	r4, r1
   d7f66:	b2d6      	uxtb	r6, r2
   d7f68:	b2df      	uxtb	r7, r3
   d7f6a:	b2ed      	uxtb	r5, r5
   d7f6c:	f104 010b 	add.w	r1, r4, #11
   d7f70:	463b      	mov	r3, r7
   d7f72:	4632      	mov	r2, r6
   d7f74:	b289      	uxth	r1, r1
   d7f76:	4877      	ldr	r0, [pc, #476]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f78:	9500      	str	r5, [sp, #0]
   d7f7a:	f006 fd41 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7f7e:	f104 010c 	add.w	r1, r4, #12
   d7f82:	463b      	mov	r3, r7
   d7f84:	4632      	mov	r2, r6
   d7f86:	b289      	uxth	r1, r1
   d7f88:	4872      	ldr	r0, [pc, #456]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f8a:	9500      	str	r5, [sp, #0]
   d7f8c:	f006 fd38 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d7f90:	f104 0112 	add.w	r1, r4, #18
   d7f94:	463b      	mov	r3, r7
   d7f96:	4632      	mov	r2, r6
   d7f98:	b289      	uxth	r1, r1
   d7f9a:	486e      	ldr	r0, [pc, #440]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7f9c:	9500      	str	r5, [sp, #0]
   d7f9e:	f006 fd2f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d7fa2:	f104 011b 	add.w	r1, r4, #27
   d7fa6:	463b      	mov	r3, r7
   d7fa8:	4632      	mov	r2, r6
   d7faa:	b289      	uxth	r1, r1
   d7fac:	4869      	ldr	r0, [pc, #420]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7fae:	9500      	str	r5, [sp, #0]
   d7fb0:	f006 fd26 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d7fb4:	f104 011c 	add.w	r1, r4, #28
   d7fb8:	b289      	uxth	r1, r1
   d7fba:	9500      	str	r5, [sp, #0]
   d7fbc:	463b      	mov	r3, r7
   d7fbe:	4632      	mov	r2, r6
   d7fc0:	4864      	ldr	r0, [pc, #400]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7fc2:	f006 fd1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+34,R,G,B);
   d7fc6:	f104 0122 	add.w	r1, r4, #34	; 0x22
   d7fca:	f000 bcce 	b.w	d896a <_Z6letterciiii+0xdda>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+43,R,G,B);
    }
    if(ltr == 'n')
   d7fce:	286e      	cmp	r0, #110	; 0x6e
   d7fd0:	d12a      	bne.n	d8028 <_Z6letterciiii+0x498>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d7fd2:	b28c      	uxth	r4, r1
   d7fd4:	b2d6      	uxtb	r6, r2
   d7fd6:	b2df      	uxtb	r7, r3
   d7fd8:	b2ed      	uxtb	r5, r5
   d7fda:	f104 010b 	add.w	r1, r4, #11
   d7fde:	463b      	mov	r3, r7
   d7fe0:	4632      	mov	r2, r6
   d7fe2:	b289      	uxth	r1, r1
   d7fe4:	485b      	ldr	r0, [pc, #364]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7fe6:	9500      	str	r5, [sp, #0]
   d7fe8:	f006 fd0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d7fec:	f104 010c 	add.w	r1, r4, #12
   d7ff0:	463b      	mov	r3, r7
   d7ff2:	4632      	mov	r2, r6
   d7ff4:	b289      	uxth	r1, r1
   d7ff6:	4857      	ldr	r0, [pc, #348]	; (d8154 <_Z6letterciiii+0x5c4>)
   d7ff8:	9500      	str	r5, [sp, #0]
   d7ffa:	f006 fd01 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d7ffe:	f104 010d 	add.w	r1, r4, #13
   d8002:	463b      	mov	r3, r7
   d8004:	4632      	mov	r2, r6
   d8006:	b289      	uxth	r1, r1
   d8008:	4852      	ldr	r0, [pc, #328]	; (d8154 <_Z6letterciiii+0x5c4>)
   d800a:	9500      	str	r5, [sp, #0]
   d800c:	f006 fcf8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8010:	f104 010e 	add.w	r1, r4, #14
   d8014:	b289      	uxth	r1, r1
   d8016:	9500      	str	r5, [sp, #0]
   d8018:	463b      	mov	r3, r7
   d801a:	4632      	mov	r2, r6
   d801c:	484d      	ldr	r0, [pc, #308]	; (d8154 <_Z6letterciiii+0x5c4>)
   d801e:	f006 fcef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8022:	f104 0111 	add.w	r1, r4, #17
   d8026:	e0b1      	b.n	d818c <_Z6letterciiii+0x5fc>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'o')
   d8028:	286f      	cmp	r0, #111	; 0x6f
   d802a:	d118      	bne.n	d805e <_Z6letterciiii+0x4ce>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d802c:	b28c      	uxth	r4, r1
   d802e:	b2d6      	uxtb	r6, r2
   d8030:	b2df      	uxtb	r7, r3
   d8032:	b2ed      	uxtb	r5, r5
   d8034:	f104 010c 	add.w	r1, r4, #12
   d8038:	463b      	mov	r3, r7
   d803a:	4632      	mov	r2, r6
   d803c:	b289      	uxth	r1, r1
   d803e:	4845      	ldr	r0, [pc, #276]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8040:	9500      	str	r5, [sp, #0]
   d8042:	f006 fcdd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8046:	f104 010d 	add.w	r1, r4, #13
   d804a:	b289      	uxth	r1, r1
   d804c:	9500      	str	r5, [sp, #0]
   d804e:	463b      	mov	r3, r7
   d8050:	4632      	mov	r2, r6
   d8052:	4840      	ldr	r0, [pc, #256]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8054:	f006 fcd4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8058:	f104 0111 	add.w	r1, r4, #17
   d805c:	e0b1      	b.n	d81c2 <_Z6letterciiii+0x632>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'p')
   d805e:	2870      	cmp	r0, #112	; 0x70
   d8060:	f000 852a 	beq.w	d8ab8 <_Z6letterciiii+0xf28>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'q')
   d8064:	2871      	cmp	r0, #113	; 0x71
   d8066:	d10f      	bne.n	d8088 <_Z6letterciiii+0x4f8>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d8068:	b28c      	uxth	r4, r1
   d806a:	b2d6      	uxtb	r6, r2
   d806c:	b2df      	uxtb	r7, r3
   d806e:	b2ed      	uxtb	r5, r5
   d8070:	f104 010e 	add.w	r1, r4, #14
   d8074:	b289      	uxth	r1, r1
   d8076:	9500      	str	r5, [sp, #0]
   d8078:	463b      	mov	r3, r7
   d807a:	4632      	mov	r2, r6
   d807c:	4835      	ldr	r0, [pc, #212]	; (d8154 <_Z6letterciiii+0x5c4>)
   d807e:	f006 fcbf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8082:	f104 0110 	add.w	r1, r4, #16
   d8086:	e347      	b.n	d8718 <_Z6letterciiii+0xb88>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'r')
   d8088:	2872      	cmp	r0, #114	; 0x72
   d808a:	d12a      	bne.n	d80e2 <_Z6letterciiii+0x552>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d808c:	b28c      	uxth	r4, r1
   d808e:	b2d6      	uxtb	r6, r2
   d8090:	b2df      	uxtb	r7, r3
   d8092:	b2ed      	uxtb	r5, r5
   d8094:	f104 010b 	add.w	r1, r4, #11
   d8098:	463b      	mov	r3, r7
   d809a:	4632      	mov	r2, r6
   d809c:	b289      	uxth	r1, r1
   d809e:	482d      	ldr	r0, [pc, #180]	; (d8154 <_Z6letterciiii+0x5c4>)
   d80a0:	9500      	str	r5, [sp, #0]
   d80a2:	f006 fcad 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d80a6:	f104 010c 	add.w	r1, r4, #12
   d80aa:	463b      	mov	r3, r7
   d80ac:	4632      	mov	r2, r6
   d80ae:	b289      	uxth	r1, r1
   d80b0:	4828      	ldr	r0, [pc, #160]	; (d8154 <_Z6letterciiii+0x5c4>)
   d80b2:	9500      	str	r5, [sp, #0]
   d80b4:	f006 fca4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d80b8:	f104 010d 	add.w	r1, r4, #13
   d80bc:	463b      	mov	r3, r7
   d80be:	4632      	mov	r2, r6
   d80c0:	b289      	uxth	r1, r1
   d80c2:	4824      	ldr	r0, [pc, #144]	; (d8154 <_Z6letterciiii+0x5c4>)
   d80c4:	9500      	str	r5, [sp, #0]
   d80c6:	f006 fc9b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d80ca:	f104 010e 	add.w	r1, r4, #14
   d80ce:	b289      	uxth	r1, r1
   d80d0:	9500      	str	r5, [sp, #0]
   d80d2:	463b      	mov	r3, r7
   d80d4:	4632      	mov	r2, r6
   d80d6:	481f      	ldr	r0, [pc, #124]	; (d8154 <_Z6letterciiii+0x5c4>)
   d80d8:	f006 fc92 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d80dc:	f104 0111 	add.w	r1, r4, #17
   d80e0:	e0ee      	b.n	d82c0 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 's')
   d80e2:	2873      	cmp	r0, #115	; 0x73
   d80e4:	f000 85ca 	beq.w	d8c7c <_Z6letterciiii+0x10ec>
        strip.setPixelColor(pix+18,R,G,B);
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 't')
   d80e8:	2874      	cmp	r0, #116	; 0x74
   d80ea:	d135      	bne.n	d8158 <_Z6letterciiii+0x5c8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d80ec:	b28c      	uxth	r4, r1
   d80ee:	b2d6      	uxtb	r6, r2
   d80f0:	b2df      	uxtb	r7, r3
   d80f2:	b2ed      	uxtb	r5, r5
   d80f4:	f104 010d 	add.w	r1, r4, #13
   d80f8:	463b      	mov	r3, r7
   d80fa:	4632      	mov	r2, r6
   d80fc:	b289      	uxth	r1, r1
   d80fe:	4815      	ldr	r0, [pc, #84]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8100:	9500      	str	r5, [sp, #0]
   d8102:	f006 fc7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8106:	f104 0110 	add.w	r1, r4, #16
   d810a:	463b      	mov	r3, r7
   d810c:	4632      	mov	r2, r6
   d810e:	b289      	uxth	r1, r1
   d8110:	4810      	ldr	r0, [pc, #64]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8112:	9500      	str	r5, [sp, #0]
   d8114:	f006 fc74 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8118:	f104 0111 	add.w	r1, r4, #17
   d811c:	463b      	mov	r3, r7
   d811e:	4632      	mov	r2, r6
   d8120:	b289      	uxth	r1, r1
   d8122:	480c      	ldr	r0, [pc, #48]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8124:	9500      	str	r5, [sp, #0]
   d8126:	f006 fc6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d812a:	f104 0112 	add.w	r1, r4, #18
   d812e:	463b      	mov	r3, r7
   d8130:	4632      	mov	r2, r6
   d8132:	b289      	uxth	r1, r1
   d8134:	4807      	ldr	r0, [pc, #28]	; (d8154 <_Z6letterciiii+0x5c4>)
   d8136:	9500      	str	r5, [sp, #0]
   d8138:	f006 fc62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d813c:	f104 0113 	add.w	r1, r4, #19
   d8140:	b289      	uxth	r1, r1
   d8142:	9500      	str	r5, [sp, #0]
   d8144:	463b      	mov	r3, r7
   d8146:	4632      	mov	r2, r6
   d8148:	4802      	ldr	r0, [pc, #8]	; (d8154 <_Z6letterciiii+0x5c4>)
   d814a:	f006 fc59 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d814e:	f104 0114 	add.w	r1, r4, #20
   d8152:	e0b5      	b.n	d82c0 <_Z6letterciiii+0x730>
   d8154:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'u')
   d8158:	2875      	cmp	r0, #117	; 0x75
   d815a:	d121      	bne.n	d81a0 <_Z6letterciiii+0x610>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d815c:	b28c      	uxth	r4, r1
   d815e:	b2d6      	uxtb	r6, r2
   d8160:	b2df      	uxtb	r7, r3
   d8162:	b2ed      	uxtb	r5, r5
   d8164:	f104 010c 	add.w	r1, r4, #12
   d8168:	b289      	uxth	r1, r1
   d816a:	9500      	str	r5, [sp, #0]
   d816c:	463b      	mov	r3, r7
   d816e:	4632      	mov	r2, r6
   d8170:	48a1      	ldr	r0, [pc, #644]	; (d83f8 <_Z6letterciiii+0x868>)
   d8172:	f006 fc45 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8176:	f104 010d 	add.w	r1, r4, #13
   d817a:	b289      	uxth	r1, r1
   d817c:	9500      	str	r5, [sp, #0]
   d817e:	463b      	mov	r3, r7
   d8180:	4632      	mov	r2, r6
   d8182:	489d      	ldr	r0, [pc, #628]	; (d83f8 <_Z6letterciiii+0x868>)
   d8184:	f006 fc3c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8188:	f104 0114 	add.w	r1, r4, #20
   d818c:	b289      	uxth	r1, r1
   d818e:	9500      	str	r5, [sp, #0]
   d8190:	463b      	mov	r3, r7
   d8192:	4632      	mov	r2, r6
   d8194:	4898      	ldr	r0, [pc, #608]	; (d83f8 <_Z6letterciiii+0x868>)
   d8196:	f006 fc33 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d819a:	f104 011b 	add.w	r1, r4, #27
   d819e:	e019      	b.n	d81d4 <_Z6letterciiii+0x644>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'v')
   d81a0:	2876      	cmp	r0, #118	; 0x76
   d81a2:	d121      	bne.n	d81e8 <_Z6letterciiii+0x658>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d81a4:	b28c      	uxth	r4, r1
   d81a6:	b2d6      	uxtb	r6, r2
   d81a8:	b2df      	uxtb	r7, r3
   d81aa:	b2ed      	uxtb	r5, r5
   d81ac:	f104 010c 	add.w	r1, r4, #12
   d81b0:	b289      	uxth	r1, r1
   d81b2:	9500      	str	r5, [sp, #0]
   d81b4:	463b      	mov	r3, r7
   d81b6:	4632      	mov	r2, r6
   d81b8:	488f      	ldr	r0, [pc, #572]	; (d83f8 <_Z6letterciiii+0x868>)
   d81ba:	f006 fc21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d81be:	f104 010d 	add.w	r1, r4, #13
   d81c2:	b289      	uxth	r1, r1
   d81c4:	9500      	str	r5, [sp, #0]
   d81c6:	463b      	mov	r3, r7
   d81c8:	4632      	mov	r2, r6
   d81ca:	488b      	ldr	r0, [pc, #556]	; (d83f8 <_Z6letterciiii+0x868>)
   d81cc:	f006 fc18 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d81d0:	f104 0114 	add.w	r1, r4, #20
   d81d4:	b289      	uxth	r1, r1
   d81d6:	9500      	str	r5, [sp, #0]
   d81d8:	463b      	mov	r3, r7
   d81da:	4632      	mov	r2, r6
   d81dc:	4886      	ldr	r0, [pc, #536]	; (d83f8 <_Z6letterciiii+0x868>)
   d81de:	f006 fc0f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d81e2:	f104 011c 	add.w	r1, r4, #28
   d81e6:	e06b      	b.n	d82c0 <_Z6letterciiii+0x730>
        strip.setPixelColor(pix+29,R,G,B);
    }
    if(ltr == 'w')
   d81e8:	2877      	cmp	r0, #119	; 0x77
   d81ea:	d146      	bne.n	d827a <_Z6letterciiii+0x6ea>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d81ec:	b28c      	uxth	r4, r1
   d81ee:	b2d6      	uxtb	r6, r2
   d81f0:	b2df      	uxtb	r7, r3
   d81f2:	b2ed      	uxtb	r5, r5
   d81f4:	f104 010c 	add.w	r1, r4, #12
   d81f8:	463b      	mov	r3, r7
   d81fa:	4632      	mov	r2, r6
   d81fc:	b289      	uxth	r1, r1
   d81fe:	487e      	ldr	r0, [pc, #504]	; (d83f8 <_Z6letterciiii+0x868>)
   d8200:	9500      	str	r5, [sp, #0]
   d8202:	f006 fbfd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8206:	f104 010d 	add.w	r1, r4, #13
   d820a:	463b      	mov	r3, r7
   d820c:	4632      	mov	r2, r6
   d820e:	b289      	uxth	r1, r1
   d8210:	4879      	ldr	r0, [pc, #484]	; (d83f8 <_Z6letterciiii+0x868>)
   d8212:	9500      	str	r5, [sp, #0]
   d8214:	f006 fbf4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8218:	f104 0114 	add.w	r1, r4, #20
   d821c:	463b      	mov	r3, r7
   d821e:	4632      	mov	r2, r6
   d8220:	b289      	uxth	r1, r1
   d8222:	4875      	ldr	r0, [pc, #468]	; (d83f8 <_Z6letterciiii+0x868>)
   d8224:	9500      	str	r5, [sp, #0]
   d8226:	f006 fbeb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d822a:	f104 011c 	add.w	r1, r4, #28
   d822e:	463b      	mov	r3, r7
   d8230:	4632      	mov	r2, r6
   d8232:	b289      	uxth	r1, r1
   d8234:	4870      	ldr	r0, [pc, #448]	; (d83f8 <_Z6letterciiii+0x868>)
   d8236:	9500      	str	r5, [sp, #0]
   d8238:	f006 fbe2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d823c:	f104 011d 	add.w	r1, r4, #29
   d8240:	463b      	mov	r3, r7
   d8242:	4632      	mov	r2, r6
   d8244:	b289      	uxth	r1, r1
   d8246:	486c      	ldr	r0, [pc, #432]	; (d83f8 <_Z6letterciiii+0x868>)
   d8248:	9500      	str	r5, [sp, #0]
   d824a:	f006 fbd9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d824e:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8252:	463b      	mov	r3, r7
   d8254:	4632      	mov	r2, r6
   d8256:	b289      	uxth	r1, r1
   d8258:	4867      	ldr	r0, [pc, #412]	; (d83f8 <_Z6letterciiii+0x868>)
   d825a:	9500      	str	r5, [sp, #0]
   d825c:	f006 fbd0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8260:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8264:	b289      	uxth	r1, r1
   d8266:	9500      	str	r5, [sp, #0]
   d8268:	463b      	mov	r3, r7
   d826a:	4632      	mov	r2, r6
   d826c:	4862      	ldr	r0, [pc, #392]	; (d83f8 <_Z6letterciiii+0x868>)
   d826e:	f006 fbc7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8272:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8276:	f000 bcf4 	b.w	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'x')
   d827a:	2878      	cmp	r0, #120	; 0x78
   d827c:	d12b      	bne.n	d82d6 <_Z6letterciiii+0x746>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d827e:	b28c      	uxth	r4, r1
   d8280:	b2d6      	uxtb	r6, r2
   d8282:	b2df      	uxtb	r7, r3
   d8284:	b2ed      	uxtb	r5, r5
   d8286:	f104 010b 	add.w	r1, r4, #11
   d828a:	b289      	uxth	r1, r1
   d828c:	9500      	str	r5, [sp, #0]
   d828e:	463b      	mov	r3, r7
   d8290:	4632      	mov	r2, r6
   d8292:	4859      	ldr	r0, [pc, #356]	; (d83f8 <_Z6letterciiii+0x868>)
   d8294:	f006 fbb4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8298:	f104 010d 	add.w	r1, r4, #13
   d829c:	463b      	mov	r3, r7
   d829e:	4632      	mov	r2, r6
   d82a0:	b289      	uxth	r1, r1
   d82a2:	4855      	ldr	r0, [pc, #340]	; (d83f8 <_Z6letterciiii+0x868>)
   d82a4:	9500      	str	r5, [sp, #0]
   d82a6:	f006 fbab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d82aa:	f104 0113 	add.w	r1, r4, #19
   d82ae:	b289      	uxth	r1, r1
   d82b0:	9500      	str	r5, [sp, #0]
   d82b2:	463b      	mov	r3, r7
   d82b4:	4632      	mov	r2, r6
   d82b6:	4850      	ldr	r0, [pc, #320]	; (d83f8 <_Z6letterciiii+0x868>)
   d82b8:	f006 fba2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d82bc:	f104 011b 	add.w	r1, r4, #27
   d82c0:	b289      	uxth	r1, r1
   d82c2:	9500      	str	r5, [sp, #0]
   d82c4:	463b      	mov	r3, r7
   d82c6:	4632      	mov	r2, r6
   d82c8:	484b      	ldr	r0, [pc, #300]	; (d83f8 <_Z6letterciiii+0x868>)
   d82ca:	f006 fb99 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d82ce:	f104 011d 	add.w	r1, r4, #29
   d82d2:	f000 bcc6 	b.w	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'y')
   d82d6:	2879      	cmp	r0, #121	; 0x79
   d82d8:	d118      	bne.n	d830c <_Z6letterciiii+0x77c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d82da:	b28c      	uxth	r4, r1
   d82dc:	b2d6      	uxtb	r6, r2
   d82de:	b2df      	uxtb	r7, r3
   d82e0:	b2ed      	uxtb	r5, r5
   d82e2:	f104 010b 	add.w	r1, r4, #11
   d82e6:	463b      	mov	r3, r7
   d82e8:	4632      	mov	r2, r6
   d82ea:	b289      	uxth	r1, r1
   d82ec:	4842      	ldr	r0, [pc, #264]	; (d83f8 <_Z6letterciiii+0x868>)
   d82ee:	9500      	str	r5, [sp, #0]
   d82f0:	f006 fb86 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d82f4:	f104 010e 	add.w	r1, r4, #14
   d82f8:	b289      	uxth	r1, r1
   d82fa:	9500      	str	r5, [sp, #0]
   d82fc:	463b      	mov	r3, r7
   d82fe:	4632      	mov	r2, r6
   d8300:	483d      	ldr	r0, [pc, #244]	; (d83f8 <_Z6letterciiii+0x868>)
   d8302:	f006 fb7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8306:	f104 0112 	add.w	r1, r4, #18
   d830a:	e3b7      	b.n	d8a7c <_Z6letterciiii+0xeec>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'z')
   d830c:	287a      	cmp	r0, #122	; 0x7a
   d830e:	d133      	bne.n	d8378 <_Z6letterciiii+0x7e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8310:	b28c      	uxth	r4, r1
   d8312:	b2d6      	uxtb	r6, r2
   d8314:	b2df      	uxtb	r7, r3
   d8316:	b2ed      	uxtb	r5, r5
   d8318:	f104 010b 	add.w	r1, r4, #11
   d831c:	463b      	mov	r3, r7
   d831e:	4632      	mov	r2, r6
   d8320:	b289      	uxth	r1, r1
   d8322:	4835      	ldr	r0, [pc, #212]	; (d83f8 <_Z6letterciiii+0x868>)
   d8324:	9500      	str	r5, [sp, #0]
   d8326:	f006 fb6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d832a:	f104 010e 	add.w	r1, r4, #14
   d832e:	463b      	mov	r3, r7
   d8330:	4632      	mov	r2, r6
   d8332:	b289      	uxth	r1, r1
   d8334:	4830      	ldr	r0, [pc, #192]	; (d83f8 <_Z6letterciiii+0x868>)
   d8336:	9500      	str	r5, [sp, #0]
   d8338:	f006 fb62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d833c:	f104 0111 	add.w	r1, r4, #17
   d8340:	b289      	uxth	r1, r1
   d8342:	9500      	str	r5, [sp, #0]
   d8344:	463b      	mov	r3, r7
   d8346:	4632      	mov	r2, r6
   d8348:	482b      	ldr	r0, [pc, #172]	; (d83f8 <_Z6letterciiii+0x868>)
   d834a:	f006 fb59 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d834e:	f104 0113 	add.w	r1, r4, #19
   d8352:	463b      	mov	r3, r7
   d8354:	4632      	mov	r2, r6
   d8356:	b289      	uxth	r1, r1
   d8358:	4827      	ldr	r0, [pc, #156]	; (d83f8 <_Z6letterciiii+0x868>)
   d835a:	9500      	str	r5, [sp, #0]
   d835c:	f006 fb50 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8360:	f104 0114 	add.w	r1, r4, #20
   d8364:	b289      	uxth	r1, r1
   d8366:	9500      	str	r5, [sp, #0]
   d8368:	463b      	mov	r3, r7
   d836a:	4632      	mov	r2, r6
   d836c:	4822      	ldr	r0, [pc, #136]	; (d83f8 <_Z6letterciiii+0x868>)
   d836e:	f006 fb47 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8372:	f104 011b 	add.w	r1, r4, #27
   d8376:	e393      	b.n	d8aa0 <_Z6letterciiii+0xf10>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'A')
   d8378:	2841      	cmp	r0, #65	; 0x41
   d837a:	d13f      	bne.n	d83fc <_Z6letterciiii+0x86c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d837c:	b28c      	uxth	r4, r1
   d837e:	b2d6      	uxtb	r6, r2
   d8380:	b2df      	uxtb	r7, r3
   d8382:	b2ed      	uxtb	r5, r5
   d8384:	f104 010b 	add.w	r1, r4, #11
   d8388:	463b      	mov	r3, r7
   d838a:	4632      	mov	r2, r6
   d838c:	b289      	uxth	r1, r1
   d838e:	481a      	ldr	r0, [pc, #104]	; (d83f8 <_Z6letterciiii+0x868>)
   d8390:	9500      	str	r5, [sp, #0]
   d8392:	f006 fb35 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8396:	f104 010c 	add.w	r1, r4, #12
   d839a:	463b      	mov	r3, r7
   d839c:	4632      	mov	r2, r6
   d839e:	b289      	uxth	r1, r1
   d83a0:	4815      	ldr	r0, [pc, #84]	; (d83f8 <_Z6letterciiii+0x868>)
   d83a2:	9500      	str	r5, [sp, #0]
   d83a4:	f006 fb2c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d83a8:	f104 010d 	add.w	r1, r4, #13
   d83ac:	463b      	mov	r3, r7
   d83ae:	4632      	mov	r2, r6
   d83b0:	b289      	uxth	r1, r1
   d83b2:	4811      	ldr	r0, [pc, #68]	; (d83f8 <_Z6letterciiii+0x868>)
   d83b4:	9500      	str	r5, [sp, #0]
   d83b6:	f006 fb23 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d83ba:	f104 010e 	add.w	r1, r4, #14
   d83be:	463b      	mov	r3, r7
   d83c0:	4632      	mov	r2, r6
   d83c2:	b289      	uxth	r1, r1
   d83c4:	480c      	ldr	r0, [pc, #48]	; (d83f8 <_Z6letterciiii+0x868>)
   d83c6:	9500      	str	r5, [sp, #0]
   d83c8:	f006 fb1a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d83cc:	f104 0110 	add.w	r1, r4, #16
   d83d0:	463b      	mov	r3, r7
   d83d2:	4632      	mov	r2, r6
   d83d4:	b289      	uxth	r1, r1
   d83d6:	4808      	ldr	r0, [pc, #32]	; (d83f8 <_Z6letterciiii+0x868>)
   d83d8:	9500      	str	r5, [sp, #0]
   d83da:	f006 fb11 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d83de:	f104 0112 	add.w	r1, r4, #18
   d83e2:	b289      	uxth	r1, r1
   d83e4:	9500      	str	r5, [sp, #0]
   d83e6:	463b      	mov	r3, r7
   d83e8:	4632      	mov	r2, r6
   d83ea:	4803      	ldr	r0, [pc, #12]	; (d83f8 <_Z6letterciiii+0x868>)
   d83ec:	f006 fb08 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d83f0:	f104 011b 	add.w	r1, r4, #27
   d83f4:	e34b      	b.n	d8a8e <_Z6letterciiii+0xefe>
   d83f6:	bf00      	nop
   d83f8:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'B')
   d83fc:	2842      	cmp	r0, #66	; 0x42
   d83fe:	d145      	bne.n	d848c <_Z6letterciiii+0x8fc>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8400:	b28c      	uxth	r4, r1
   d8402:	b2d6      	uxtb	r6, r2
   d8404:	b2df      	uxtb	r7, r3
   d8406:	b2ed      	uxtb	r5, r5
   d8408:	f104 010b 	add.w	r1, r4, #11
   d840c:	463b      	mov	r3, r7
   d840e:	4632      	mov	r2, r6
   d8410:	b289      	uxth	r1, r1
   d8412:	48aa      	ldr	r0, [pc, #680]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8414:	9500      	str	r5, [sp, #0]
   d8416:	f006 faf3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d841a:	f104 010c 	add.w	r1, r4, #12
   d841e:	463b      	mov	r3, r7
   d8420:	4632      	mov	r2, r6
   d8422:	b289      	uxth	r1, r1
   d8424:	48a5      	ldr	r0, [pc, #660]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8426:	9500      	str	r5, [sp, #0]
   d8428:	f006 faea 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d842c:	f104 010d 	add.w	r1, r4, #13
   d8430:	463b      	mov	r3, r7
   d8432:	4632      	mov	r2, r6
   d8434:	b289      	uxth	r1, r1
   d8436:	48a1      	ldr	r0, [pc, #644]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8438:	9500      	str	r5, [sp, #0]
   d843a:	f006 fae1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d843e:	f104 010e 	add.w	r1, r4, #14
   d8442:	463b      	mov	r3, r7
   d8444:	4632      	mov	r2, r6
   d8446:	b289      	uxth	r1, r1
   d8448:	489c      	ldr	r0, [pc, #624]	; (d86bc <_Z6letterciiii+0xb2c>)
   d844a:	9500      	str	r5, [sp, #0]
   d844c:	f006 fad8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8450:	f104 010f 	add.w	r1, r4, #15
   d8454:	463b      	mov	r3, r7
   d8456:	4632      	mov	r2, r6
   d8458:	b289      	uxth	r1, r1
   d845a:	4898      	ldr	r0, [pc, #608]	; (d86bc <_Z6letterciiii+0xb2c>)
   d845c:	9500      	str	r5, [sp, #0]
   d845e:	f006 facf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8462:	f104 0110 	add.w	r1, r4, #16
   d8466:	463b      	mov	r3, r7
   d8468:	4632      	mov	r2, r6
   d846a:	b289      	uxth	r1, r1
   d846c:	4893      	ldr	r0, [pc, #588]	; (d86bc <_Z6letterciiii+0xb2c>)
   d846e:	9500      	str	r5, [sp, #0]
   d8470:	f006 fac6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8474:	f104 0112 	add.w	r1, r4, #18
   d8478:	b289      	uxth	r1, r1
   d847a:	9500      	str	r5, [sp, #0]
   d847c:	463b      	mov	r3, r7
   d847e:	4632      	mov	r2, r6
   d8480:	488e      	ldr	r0, [pc, #568]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8482:	f006 fabd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8486:	f104 0114 	add.w	r1, r4, #20
   d848a:	e3d8      	b.n	d8c3e <_Z6letterciiii+0x10ae>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'C')
   d848c:	2843      	cmp	r0, #67	; 0x43
   d848e:	d121      	bne.n	d84d4 <_Z6letterciiii+0x944>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8490:	b28c      	uxth	r4, r1
   d8492:	b2d6      	uxtb	r6, r2
   d8494:	b2df      	uxtb	r7, r3
   d8496:	b2ed      	uxtb	r5, r5
   d8498:	f104 010c 	add.w	r1, r4, #12
   d849c:	463b      	mov	r3, r7
   d849e:	4632      	mov	r2, r6
   d84a0:	b289      	uxth	r1, r1
   d84a2:	4886      	ldr	r0, [pc, #536]	; (d86bc <_Z6letterciiii+0xb2c>)
   d84a4:	9500      	str	r5, [sp, #0]
   d84a6:	f006 faab 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d84aa:	f104 010d 	add.w	r1, r4, #13
   d84ae:	463b      	mov	r3, r7
   d84b0:	4632      	mov	r2, r6
   d84b2:	b289      	uxth	r1, r1
   d84b4:	4881      	ldr	r0, [pc, #516]	; (d86bc <_Z6letterciiii+0xb2c>)
   d84b6:	9500      	str	r5, [sp, #0]
   d84b8:	f006 faa2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d84bc:	f104 010e 	add.w	r1, r4, #14
   d84c0:	b289      	uxth	r1, r1
   d84c2:	9500      	str	r5, [sp, #0]
   d84c4:	463b      	mov	r3, r7
   d84c6:	4632      	mov	r2, r6
   d84c8:	487c      	ldr	r0, [pc, #496]	; (d86bc <_Z6letterciiii+0xb2c>)
   d84ca:	f006 fa99 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d84ce:	f104 0110 	add.w	r1, r4, #16
   d84d2:	e160      	b.n	d8796 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'D')
   d84d4:	2844      	cmp	r0, #68	; 0x44
   d84d6:	d12a      	bne.n	d852e <_Z6letterciiii+0x99e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d84d8:	b28c      	uxth	r4, r1
   d84da:	b2d6      	uxtb	r6, r2
   d84dc:	b2df      	uxtb	r7, r3
   d84de:	b2ed      	uxtb	r5, r5
   d84e0:	f104 010b 	add.w	r1, r4, #11
   d84e4:	463b      	mov	r3, r7
   d84e6:	4632      	mov	r2, r6
   d84e8:	b289      	uxth	r1, r1
   d84ea:	4874      	ldr	r0, [pc, #464]	; (d86bc <_Z6letterciiii+0xb2c>)
   d84ec:	9500      	str	r5, [sp, #0]
   d84ee:	f006 fa87 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d84f2:	f104 010c 	add.w	r1, r4, #12
   d84f6:	463b      	mov	r3, r7
   d84f8:	4632      	mov	r2, r6
   d84fa:	b289      	uxth	r1, r1
   d84fc:	486f      	ldr	r0, [pc, #444]	; (d86bc <_Z6letterciiii+0xb2c>)
   d84fe:	9500      	str	r5, [sp, #0]
   d8500:	f006 fa7e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8504:	f104 010d 	add.w	r1, r4, #13
   d8508:	463b      	mov	r3, r7
   d850a:	4632      	mov	r2, r6
   d850c:	b289      	uxth	r1, r1
   d850e:	486b      	ldr	r0, [pc, #428]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8510:	9500      	str	r5, [sp, #0]
   d8512:	f006 fa75 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8516:	f104 010e 	add.w	r1, r4, #14
   d851a:	b289      	uxth	r1, r1
   d851c:	9500      	str	r5, [sp, #0]
   d851e:	463b      	mov	r3, r7
   d8520:	4632      	mov	r2, r6
   d8522:	4866      	ldr	r0, [pc, #408]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8524:	f006 fa6c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8528:	f104 010f 	add.w	r1, r4, #15
   d852c:	e29d      	b.n	d8a6a <_Z6letterciiii+0xeda>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'E')
   d852e:	2845      	cmp	r0, #69	; 0x45
   d8530:	d13c      	bne.n	d85ac <_Z6letterciiii+0xa1c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8532:	b28c      	uxth	r4, r1
   d8534:	b2d6      	uxtb	r6, r2
   d8536:	b2df      	uxtb	r7, r3
   d8538:	b2ed      	uxtb	r5, r5
   d853a:	f104 010b 	add.w	r1, r4, #11
   d853e:	463b      	mov	r3, r7
   d8540:	4632      	mov	r2, r6
   d8542:	b289      	uxth	r1, r1
   d8544:	485d      	ldr	r0, [pc, #372]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8546:	9500      	str	r5, [sp, #0]
   d8548:	f006 fa5a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d854c:	f104 010c 	add.w	r1, r4, #12
   d8550:	463b      	mov	r3, r7
   d8552:	4632      	mov	r2, r6
   d8554:	b289      	uxth	r1, r1
   d8556:	4859      	ldr	r0, [pc, #356]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8558:	9500      	str	r5, [sp, #0]
   d855a:	f006 fa51 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d855e:	f104 010d 	add.w	r1, r4, #13
   d8562:	463b      	mov	r3, r7
   d8564:	4632      	mov	r2, r6
   d8566:	b289      	uxth	r1, r1
   d8568:	4854      	ldr	r0, [pc, #336]	; (d86bc <_Z6letterciiii+0xb2c>)
   d856a:	9500      	str	r5, [sp, #0]
   d856c:	f006 fa48 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8570:	f104 010e 	add.w	r1, r4, #14
   d8574:	463b      	mov	r3, r7
   d8576:	4632      	mov	r2, r6
   d8578:	b289      	uxth	r1, r1
   d857a:	4850      	ldr	r0, [pc, #320]	; (d86bc <_Z6letterciiii+0xb2c>)
   d857c:	9500      	str	r5, [sp, #0]
   d857e:	f006 fa3f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8582:	f104 010f 	add.w	r1, r4, #15
   d8586:	463b      	mov	r3, r7
   d8588:	4632      	mov	r2, r6
   d858a:	b289      	uxth	r1, r1
   d858c:	484b      	ldr	r0, [pc, #300]	; (d86bc <_Z6letterciiii+0xb2c>)
   d858e:	9500      	str	r5, [sp, #0]
   d8590:	f006 fa36 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8594:	f104 0110 	add.w	r1, r4, #16
   d8598:	b289      	uxth	r1, r1
   d859a:	9500      	str	r5, [sp, #0]
   d859c:	463b      	mov	r3, r7
   d859e:	4632      	mov	r2, r6
   d85a0:	4846      	ldr	r0, [pc, #280]	; (d86bc <_Z6letterciiii+0xb2c>)
   d85a2:	f006 fa2d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d85a6:	f104 0112 	add.w	r1, r4, #18
   d85aa:	e0f4      	b.n	d8796 <_Z6letterciiii+0xc06>
        strip.setPixelColor(pix+20,R,G,B);
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'F')
   d85ac:	2846      	cmp	r0, #70	; 0x46
   d85ae:	d13d      	bne.n	d862c <_Z6letterciiii+0xa9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d85b0:	b28c      	uxth	r4, r1
   d85b2:	b2d6      	uxtb	r6, r2
   d85b4:	b2df      	uxtb	r7, r3
   d85b6:	b2ed      	uxtb	r5, r5
   d85b8:	f104 010b 	add.w	r1, r4, #11
   d85bc:	463b      	mov	r3, r7
   d85be:	4632      	mov	r2, r6
   d85c0:	b289      	uxth	r1, r1
   d85c2:	483e      	ldr	r0, [pc, #248]	; (d86bc <_Z6letterciiii+0xb2c>)
   d85c4:	9500      	str	r5, [sp, #0]
   d85c6:	f006 fa1b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d85ca:	f104 010c 	add.w	r1, r4, #12
   d85ce:	463b      	mov	r3, r7
   d85d0:	4632      	mov	r2, r6
   d85d2:	b289      	uxth	r1, r1
   d85d4:	4839      	ldr	r0, [pc, #228]	; (d86bc <_Z6letterciiii+0xb2c>)
   d85d6:	9500      	str	r5, [sp, #0]
   d85d8:	f006 fa12 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d85dc:	f104 010d 	add.w	r1, r4, #13
   d85e0:	463b      	mov	r3, r7
   d85e2:	4632      	mov	r2, r6
   d85e4:	b289      	uxth	r1, r1
   d85e6:	4835      	ldr	r0, [pc, #212]	; (d86bc <_Z6letterciiii+0xb2c>)
   d85e8:	9500      	str	r5, [sp, #0]
   d85ea:	f006 fa09 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d85ee:	f104 010e 	add.w	r1, r4, #14
   d85f2:	b289      	uxth	r1, r1
   d85f4:	9500      	str	r5, [sp, #0]
   d85f6:	463b      	mov	r3, r7
   d85f8:	4632      	mov	r2, r6
   d85fa:	4830      	ldr	r0, [pc, #192]	; (d86bc <_Z6letterciiii+0xb2c>)
   d85fc:	f006 fa00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8600:	f104 010f 	add.w	r1, r4, #15
   d8604:	463b      	mov	r3, r7
   d8606:	4632      	mov	r2, r6
   d8608:	b289      	uxth	r1, r1
   d860a:	482c      	ldr	r0, [pc, #176]	; (d86bc <_Z6letterciiii+0xb2c>)
   d860c:	9500      	str	r5, [sp, #0]
   d860e:	f006 f9f7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8612:	f104 0110 	add.w	r1, r4, #16
   d8616:	b289      	uxth	r1, r1
   d8618:	9500      	str	r5, [sp, #0]
   d861a:	463b      	mov	r3, r7
   d861c:	4632      	mov	r2, r6
   d861e:	4827      	ldr	r0, [pc, #156]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8620:	f006 f9ee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8624:	f104 0112 	add.w	r1, r4, #18
   d8628:	f000 bcc5 	b.w	d8fb6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'G')
   d862c:	2847      	cmp	r0, #71	; 0x47
   d862e:	d147      	bne.n	d86c0 <_Z6letterciiii+0xb30>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8630:	b28c      	uxth	r4, r1
   d8632:	b2d6      	uxtb	r6, r2
   d8634:	b2df      	uxtb	r7, r3
   d8636:	b2ed      	uxtb	r5, r5
   d8638:	f104 010b 	add.w	r1, r4, #11
   d863c:	463b      	mov	r3, r7
   d863e:	4632      	mov	r2, r6
   d8640:	b289      	uxth	r1, r1
   d8642:	481e      	ldr	r0, [pc, #120]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8644:	9500      	str	r5, [sp, #0]
   d8646:	f006 f9db 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d864a:	f104 010c 	add.w	r1, r4, #12
   d864e:	463b      	mov	r3, r7
   d8650:	4632      	mov	r2, r6
   d8652:	b289      	uxth	r1, r1
   d8654:	4819      	ldr	r0, [pc, #100]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8656:	9500      	str	r5, [sp, #0]
   d8658:	f006 f9d2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d865c:	f104 010d 	add.w	r1, r4, #13
   d8660:	463b      	mov	r3, r7
   d8662:	4632      	mov	r2, r6
   d8664:	b289      	uxth	r1, r1
   d8666:	4815      	ldr	r0, [pc, #84]	; (d86bc <_Z6letterciiii+0xb2c>)
   d8668:	9500      	str	r5, [sp, #0]
   d866a:	f006 f9c9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d866e:	f104 010e 	add.w	r1, r4, #14
   d8672:	463b      	mov	r3, r7
   d8674:	4632      	mov	r2, r6
   d8676:	b289      	uxth	r1, r1
   d8678:	4810      	ldr	r0, [pc, #64]	; (d86bc <_Z6letterciiii+0xb2c>)
   d867a:	9500      	str	r5, [sp, #0]
   d867c:	f006 f9c0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8680:	f104 010f 	add.w	r1, r4, #15
   d8684:	463b      	mov	r3, r7
   d8686:	4632      	mov	r2, r6
   d8688:	b289      	uxth	r1, r1
   d868a:	480c      	ldr	r0, [pc, #48]	; (d86bc <_Z6letterciiii+0xb2c>)
   d868c:	9500      	str	r5, [sp, #0]
   d868e:	f006 f9b7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8692:	f104 0110 	add.w	r1, r4, #16
   d8696:	463b      	mov	r3, r7
   d8698:	4632      	mov	r2, r6
   d869a:	b289      	uxth	r1, r1
   d869c:	4807      	ldr	r0, [pc, #28]	; (d86bc <_Z6letterciiii+0xb2c>)
   d869e:	9500      	str	r5, [sp, #0]
   d86a0:	f006 f9ae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d86a4:	f104 0114 	add.w	r1, r4, #20
   d86a8:	b289      	uxth	r1, r1
   d86aa:	9500      	str	r5, [sp, #0]
   d86ac:	463b      	mov	r3, r7
   d86ae:	4632      	mov	r2, r6
   d86b0:	4802      	ldr	r0, [pc, #8]	; (d86bc <_Z6letterciiii+0xb2c>)
   d86b2:	f006 f9a5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d86b6:	f104 011b 	add.w	r1, r4, #27
   d86ba:	e309      	b.n	d8cd0 <_Z6letterciiii+0x1140>
   d86bc:	2003e31c 	.word	0x2003e31c
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'H')
   d86c0:	2848      	cmp	r0, #72	; 0x48
   d86c2:	d133      	bne.n	d872c <_Z6letterciiii+0xb9c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d86c4:	b28c      	uxth	r4, r1
   d86c6:	b2d6      	uxtb	r6, r2
   d86c8:	b2df      	uxtb	r7, r3
   d86ca:	b2ed      	uxtb	r5, r5
   d86cc:	f104 010b 	add.w	r1, r4, #11
   d86d0:	463b      	mov	r3, r7
   d86d2:	4632      	mov	r2, r6
   d86d4:	b289      	uxth	r1, r1
   d86d6:	48ae      	ldr	r0, [pc, #696]	; (d8990 <_Z6letterciiii+0xe00>)
   d86d8:	9500      	str	r5, [sp, #0]
   d86da:	f006 f991 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d86de:	f104 010c 	add.w	r1, r4, #12
   d86e2:	463b      	mov	r3, r7
   d86e4:	4632      	mov	r2, r6
   d86e6:	b289      	uxth	r1, r1
   d86e8:	48a9      	ldr	r0, [pc, #676]	; (d8990 <_Z6letterciiii+0xe00>)
   d86ea:	9500      	str	r5, [sp, #0]
   d86ec:	f006 f988 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d86f0:	f104 010d 	add.w	r1, r4, #13
   d86f4:	463b      	mov	r3, r7
   d86f6:	4632      	mov	r2, r6
   d86f8:	b289      	uxth	r1, r1
   d86fa:	48a5      	ldr	r0, [pc, #660]	; (d8990 <_Z6letterciiii+0xe00>)
   d86fc:	9500      	str	r5, [sp, #0]
   d86fe:	f006 f97f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8702:	f104 010e 	add.w	r1, r4, #14
   d8706:	b289      	uxth	r1, r1
   d8708:	9500      	str	r5, [sp, #0]
   d870a:	463b      	mov	r3, r7
   d870c:	4632      	mov	r2, r6
   d870e:	48a0      	ldr	r0, [pc, #640]	; (d8990 <_Z6letterciiii+0xe00>)
   d8710:	f006 f976 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8714:	f104 010f 	add.w	r1, r4, #15
   d8718:	b289      	uxth	r1, r1
   d871a:	9500      	str	r5, [sp, #0]
   d871c:	463b      	mov	r3, r7
   d871e:	4632      	mov	r2, r6
   d8720:	489b      	ldr	r0, [pc, #620]	; (d8990 <_Z6letterciiii+0xe00>)
   d8722:	f006 f96d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8726:	f104 0112 	add.w	r1, r4, #18
   d872a:	e346      	b.n	d8dba <_Z6letterciiii+0x122a>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'I')
   d872c:	2849      	cmp	r0, #73	; 0x49
   d872e:	d145      	bne.n	d87bc <_Z6letterciiii+0xc2c>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8730:	b28c      	uxth	r4, r1
   d8732:	b2d6      	uxtb	r6, r2
   d8734:	b2df      	uxtb	r7, r3
   d8736:	b2ed      	uxtb	r5, r5
   d8738:	f104 010b 	add.w	r1, r4, #11
   d873c:	463b      	mov	r3, r7
   d873e:	4632      	mov	r2, r6
   d8740:	b289      	uxth	r1, r1
   d8742:	4893      	ldr	r0, [pc, #588]	; (d8990 <_Z6letterciiii+0xe00>)
   d8744:	9500      	str	r5, [sp, #0]
   d8746:	f006 f95b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d874a:	f104 010f 	add.w	r1, r4, #15
   d874e:	463b      	mov	r3, r7
   d8750:	4632      	mov	r2, r6
   d8752:	b289      	uxth	r1, r1
   d8754:	488e      	ldr	r0, [pc, #568]	; (d8990 <_Z6letterciiii+0xe00>)
   d8756:	9500      	str	r5, [sp, #0]
   d8758:	f006 f952 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d875c:	f104 0110 	add.w	r1, r4, #16
   d8760:	463b      	mov	r3, r7
   d8762:	4632      	mov	r2, r6
   d8764:	b289      	uxth	r1, r1
   d8766:	488a      	ldr	r0, [pc, #552]	; (d8990 <_Z6letterciiii+0xe00>)
   d8768:	9500      	str	r5, [sp, #0]
   d876a:	f006 f949 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d876e:	f104 0111 	add.w	r1, r4, #17
   d8772:	463b      	mov	r3, r7
   d8774:	4632      	mov	r2, r6
   d8776:	b289      	uxth	r1, r1
   d8778:	4885      	ldr	r0, [pc, #532]	; (d8990 <_Z6letterciiii+0xe00>)
   d877a:	9500      	str	r5, [sp, #0]
   d877c:	f006 f940 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8780:	f104 0112 	add.w	r1, r4, #18
   d8784:	b289      	uxth	r1, r1
   d8786:	9500      	str	r5, [sp, #0]
   d8788:	463b      	mov	r3, r7
   d878a:	4632      	mov	r2, r6
   d878c:	4880      	ldr	r0, [pc, #512]	; (d8990 <_Z6letterciiii+0xe00>)
   d878e:	f006 f937 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8792:	f104 0113 	add.w	r1, r4, #19
   d8796:	463b      	mov	r3, r7
   d8798:	4632      	mov	r2, r6
   d879a:	b289      	uxth	r1, r1
   d879c:	487c      	ldr	r0, [pc, #496]	; (d8990 <_Z6letterciiii+0xe00>)
   d879e:	9500      	str	r5, [sp, #0]
   d87a0:	f006 f92e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d87a4:	f104 0114 	add.w	r1, r4, #20
   d87a8:	b289      	uxth	r1, r1
   d87aa:	9500      	str	r5, [sp, #0]
   d87ac:	463b      	mov	r3, r7
   d87ae:	4632      	mov	r2, r6
   d87b0:	4877      	ldr	r0, [pc, #476]	; (d8990 <_Z6letterciiii+0xe00>)
   d87b2:	f006 f925 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d87b6:	f104 011b 	add.w	r1, r4, #27
   d87ba:	e3fc      	b.n	d8fb6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'J')
   d87bc:	284a      	cmp	r0, #74	; 0x4a
   d87be:	d118      	bne.n	d87f2 <_Z6letterciiii+0xc62>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d87c0:	b28c      	uxth	r4, r1
   d87c2:	b2d6      	uxtb	r6, r2
   d87c4:	b2df      	uxtb	r7, r3
   d87c6:	b2ed      	uxtb	r5, r5
   d87c8:	f104 010c 	add.w	r1, r4, #12
   d87cc:	463b      	mov	r3, r7
   d87ce:	4632      	mov	r2, r6
   d87d0:	b289      	uxth	r1, r1
   d87d2:	486f      	ldr	r0, [pc, #444]	; (d8990 <_Z6letterciiii+0xe00>)
   d87d4:	9500      	str	r5, [sp, #0]
   d87d6:	f006 f913 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d87da:	f104 010f 	add.w	r1, r4, #15
   d87de:	b289      	uxth	r1, r1
   d87e0:	9500      	str	r5, [sp, #0]
   d87e2:	463b      	mov	r3, r7
   d87e4:	4632      	mov	r2, r6
   d87e6:	486a      	ldr	r0, [pc, #424]	; (d8990 <_Z6letterciiii+0xe00>)
   d87e8:	f006 f90a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d87ec:	f104 0110 	add.w	r1, r4, #16
   d87f0:	e310      	b.n	d8e14 <_Z6letterciiii+0x1284>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'K')
   d87f2:	284b      	cmp	r0, #75	; 0x4b
   d87f4:	d118      	bne.n	d8828 <_Z6letterciiii+0xc98>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d87f6:	b28c      	uxth	r4, r1
   d87f8:	b2d6      	uxtb	r6, r2
   d87fa:	b2df      	uxtb	r7, r3
   d87fc:	b2ed      	uxtb	r5, r5
   d87fe:	f104 010b 	add.w	r1, r4, #11
   d8802:	463b      	mov	r3, r7
   d8804:	4632      	mov	r2, r6
   d8806:	b289      	uxth	r1, r1
   d8808:	4861      	ldr	r0, [pc, #388]	; (d8990 <_Z6letterciiii+0xe00>)
   d880a:	9500      	str	r5, [sp, #0]
   d880c:	f006 f8f8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8810:	f104 010c 	add.w	r1, r4, #12
   d8814:	b289      	uxth	r1, r1
   d8816:	9500      	str	r5, [sp, #0]
   d8818:	463b      	mov	r3, r7
   d881a:	4632      	mov	r2, r6
   d881c:	485c      	ldr	r0, [pc, #368]	; (d8990 <_Z6letterciiii+0xe00>)
   d881e:	f006 f8ef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8822:	f104 010d 	add.w	r1, r4, #13
   d8826:	e390      	b.n	d8f4a <_Z6letterciiii+0x13ba>
        strip.setPixelColor(pix+27,R,G,B);
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'L')
   d8828:	284c      	cmp	r0, #76	; 0x4c
   d882a:	d13c      	bne.n	d88a6 <_Z6letterciiii+0xd16>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d882c:	b28c      	uxth	r4, r1
   d882e:	b2d6      	uxtb	r6, r2
   d8830:	b2df      	uxtb	r7, r3
   d8832:	b2ed      	uxtb	r5, r5
   d8834:	f104 010b 	add.w	r1, r4, #11
   d8838:	463b      	mov	r3, r7
   d883a:	4632      	mov	r2, r6
   d883c:	b289      	uxth	r1, r1
   d883e:	4854      	ldr	r0, [pc, #336]	; (d8990 <_Z6letterciiii+0xe00>)
   d8840:	9500      	str	r5, [sp, #0]
   d8842:	f006 f8dd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8846:	f104 010c 	add.w	r1, r4, #12
   d884a:	463b      	mov	r3, r7
   d884c:	4632      	mov	r2, r6
   d884e:	b289      	uxth	r1, r1
   d8850:	484f      	ldr	r0, [pc, #316]	; (d8990 <_Z6letterciiii+0xe00>)
   d8852:	9500      	str	r5, [sp, #0]
   d8854:	f006 f8d4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8858:	f104 010d 	add.w	r1, r4, #13
   d885c:	463b      	mov	r3, r7
   d885e:	4632      	mov	r2, r6
   d8860:	b289      	uxth	r1, r1
   d8862:	484b      	ldr	r0, [pc, #300]	; (d8990 <_Z6letterciiii+0xe00>)
   d8864:	9500      	str	r5, [sp, #0]
   d8866:	f006 f8cb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d886a:	f104 010e 	add.w	r1, r4, #14
   d886e:	463b      	mov	r3, r7
   d8870:	4632      	mov	r2, r6
   d8872:	b289      	uxth	r1, r1
   d8874:	4846      	ldr	r0, [pc, #280]	; (d8990 <_Z6letterciiii+0xe00>)
   d8876:	9500      	str	r5, [sp, #0]
   d8878:	f006 f8c2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d887c:	f104 010f 	add.w	r1, r4, #15
   d8880:	463b      	mov	r3, r7
   d8882:	4632      	mov	r2, r6
   d8884:	b289      	uxth	r1, r1
   d8886:	4842      	ldr	r0, [pc, #264]	; (d8990 <_Z6letterciiii+0xe00>)
   d8888:	9500      	str	r5, [sp, #0]
   d888a:	f006 f8b9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d888e:	f104 0114 	add.w	r1, r4, #20
   d8892:	b289      	uxth	r1, r1
   d8894:	9500      	str	r5, [sp, #0]
   d8896:	463b      	mov	r3, r7
   d8898:	4632      	mov	r2, r6
   d889a:	483d      	ldr	r0, [pc, #244]	; (d8990 <_Z6letterciiii+0xe00>)
   d889c:	f006 f8b0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d88a0:	f104 011b 	add.w	r1, r4, #27
   d88a4:	e1dd      	b.n	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'M')
   d88a6:	284d      	cmp	r0, #77	; 0x4d
   d88a8:	d174      	bne.n	d8994 <_Z6letterciiii+0xe04>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d88aa:	b28c      	uxth	r4, r1
   d88ac:	b2d6      	uxtb	r6, r2
   d88ae:	b2df      	uxtb	r7, r3
   d88b0:	b2ed      	uxtb	r5, r5
   d88b2:	f104 0111 	add.w	r1, r4, #17
   d88b6:	463b      	mov	r3, r7
   d88b8:	4632      	mov	r2, r6
   d88ba:	b289      	uxth	r1, r1
   d88bc:	4834      	ldr	r0, [pc, #208]	; (d8990 <_Z6letterciiii+0xe00>)
   d88be:	9500      	str	r5, [sp, #0]
   d88c0:	f006 f89e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d88c4:	f104 010b 	add.w	r1, r4, #11
   d88c8:	463b      	mov	r3, r7
   d88ca:	4632      	mov	r2, r6
   d88cc:	b289      	uxth	r1, r1
   d88ce:	4830      	ldr	r0, [pc, #192]	; (d8990 <_Z6letterciiii+0xe00>)
   d88d0:	9500      	str	r5, [sp, #0]
   d88d2:	f006 f895 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d88d6:	f104 010c 	add.w	r1, r4, #12
   d88da:	463b      	mov	r3, r7
   d88dc:	4632      	mov	r2, r6
   d88de:	b289      	uxth	r1, r1
   d88e0:	482b      	ldr	r0, [pc, #172]	; (d8990 <_Z6letterciiii+0xe00>)
   d88e2:	9500      	str	r5, [sp, #0]
   d88e4:	f006 f88c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d88e8:	f104 010d 	add.w	r1, r4, #13
   d88ec:	463b      	mov	r3, r7
   d88ee:	4632      	mov	r2, r6
   d88f0:	b289      	uxth	r1, r1
   d88f2:	4827      	ldr	r0, [pc, #156]	; (d8990 <_Z6letterciiii+0xe00>)
   d88f4:	9500      	str	r5, [sp, #0]
   d88f6:	f006 f883 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d88fa:	f104 010e 	add.w	r1, r4, #14
   d88fe:	463b      	mov	r3, r7
   d8900:	4632      	mov	r2, r6
   d8902:	b289      	uxth	r1, r1
   d8904:	4822      	ldr	r0, [pc, #136]	; (d8990 <_Z6letterciiii+0xe00>)
   d8906:	9500      	str	r5, [sp, #0]
   d8908:	f006 f87a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d890c:	f104 010f 	add.w	r1, r4, #15
   d8910:	463b      	mov	r3, r7
   d8912:	4632      	mov	r2, r6
   d8914:	b289      	uxth	r1, r1
   d8916:	481e      	ldr	r0, [pc, #120]	; (d8990 <_Z6letterciiii+0xe00>)
   d8918:	9500      	str	r5, [sp, #0]
   d891a:	f006 f871 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d891e:	f104 011d 	add.w	r1, r4, #29
   d8922:	463b      	mov	r3, r7
   d8924:	4632      	mov	r2, r6
   d8926:	b289      	uxth	r1, r1
   d8928:	4819      	ldr	r0, [pc, #100]	; (d8990 <_Z6letterciiii+0xe00>)
   d892a:	9500      	str	r5, [sp, #0]
   d892c:	f006 f868 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,R,G,B);
   d8930:	f104 0121 	add.w	r1, r4, #33	; 0x21
   d8934:	463b      	mov	r3, r7
   d8936:	4632      	mov	r2, r6
   d8938:	b289      	uxth	r1, r1
   d893a:	4815      	ldr	r0, [pc, #84]	; (d8990 <_Z6letterciiii+0xe00>)
   d893c:	9500      	str	r5, [sp, #0]
   d893e:	f006 f85f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d8942:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d8946:	463b      	mov	r3, r7
   d8948:	4632      	mov	r2, r6
   d894a:	b289      	uxth	r1, r1
   d894c:	4810      	ldr	r0, [pc, #64]	; (d8990 <_Z6letterciiii+0xe00>)
   d894e:	9500      	str	r5, [sp, #0]
   d8950:	f006 f856 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d8954:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d8958:	b289      	uxth	r1, r1
   d895a:	9500      	str	r5, [sp, #0]
   d895c:	463b      	mov	r3, r7
   d895e:	4632      	mov	r2, r6
   d8960:	480b      	ldr	r0, [pc, #44]	; (d8990 <_Z6letterciiii+0xe00>)
   d8962:	f006 f84d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8966:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d896a:	463b      	mov	r3, r7
   d896c:	4632      	mov	r2, r6
   d896e:	b289      	uxth	r1, r1
   d8970:	4807      	ldr	r0, [pc, #28]	; (d8990 <_Z6letterciiii+0xe00>)
   d8972:	9500      	str	r5, [sp, #0]
   d8974:	f006 f844 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8978:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d897c:	b289      	uxth	r1, r1
   d897e:	9500      	str	r5, [sp, #0]
   d8980:	463b      	mov	r3, r7
   d8982:	4632      	mov	r2, r6
   d8984:	4802      	ldr	r0, [pc, #8]	; (d8990 <_Z6letterciiii+0xe00>)
   d8986:	f006 f83b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d898a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d898e:	e168      	b.n	d8c62 <_Z6letterciiii+0x10d2>
   d8990:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'N')
   d8994:	284e      	cmp	r0, #78	; 0x4e
   d8996:	d14e      	bne.n	d8a36 <_Z6letterciiii+0xea6>
    {
        strip.setPixelColor(pix+17,R,G,B);
   d8998:	b28c      	uxth	r4, r1
   d899a:	b2d6      	uxtb	r6, r2
   d899c:	b2df      	uxtb	r7, r3
   d899e:	b2ed      	uxtb	r5, r5
   d89a0:	f104 0111 	add.w	r1, r4, #17
   d89a4:	463b      	mov	r3, r7
   d89a6:	4632      	mov	r2, r6
   d89a8:	b289      	uxth	r1, r1
   d89aa:	48b2      	ldr	r0, [pc, #712]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d89ac:	9500      	str	r5, [sp, #0]
   d89ae:	f006 f827 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+11,R,G,B);
   d89b2:	f104 010b 	add.w	r1, r4, #11
   d89b6:	463b      	mov	r3, r7
   d89b8:	4632      	mov	r2, r6
   d89ba:	b289      	uxth	r1, r1
   d89bc:	48ad      	ldr	r0, [pc, #692]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d89be:	9500      	str	r5, [sp, #0]
   d89c0:	f006 f81e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d89c4:	f104 010c 	add.w	r1, r4, #12
   d89c8:	463b      	mov	r3, r7
   d89ca:	4632      	mov	r2, r6
   d89cc:	b289      	uxth	r1, r1
   d89ce:	48a9      	ldr	r0, [pc, #676]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d89d0:	9500      	str	r5, [sp, #0]
   d89d2:	f006 f815 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d89d6:	f104 010d 	add.w	r1, r4, #13
   d89da:	463b      	mov	r3, r7
   d89dc:	4632      	mov	r2, r6
   d89de:	b289      	uxth	r1, r1
   d89e0:	48a4      	ldr	r0, [pc, #656]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d89e2:	9500      	str	r5, [sp, #0]
   d89e4:	f006 f80c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d89e8:	f104 010e 	add.w	r1, r4, #14
   d89ec:	463b      	mov	r3, r7
   d89ee:	4632      	mov	r2, r6
   d89f0:	b289      	uxth	r1, r1
   d89f2:	48a0      	ldr	r0, [pc, #640]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d89f4:	9500      	str	r5, [sp, #0]
   d89f6:	f006 f803 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d89fa:	f104 010f 	add.w	r1, r4, #15
   d89fe:	463b      	mov	r3, r7
   d8a00:	4632      	mov	r2, r6
   d8a02:	b289      	uxth	r1, r1
   d8a04:	489b      	ldr	r0, [pc, #620]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a06:	9500      	str	r5, [sp, #0]
   d8a08:	f005 fffa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8a0c:	f104 011d 	add.w	r1, r4, #29
   d8a10:	463b      	mov	r3, r7
   d8a12:	4632      	mov	r2, r6
   d8a14:	b289      	uxth	r1, r1
   d8a16:	4897      	ldr	r0, [pc, #604]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a18:	9500      	str	r5, [sp, #0]
   d8a1a:	f005 fff1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+35,R,G,B);
   d8a1e:	f104 0123 	add.w	r1, r4, #35	; 0x23
   d8a22:	b289      	uxth	r1, r1
   d8a24:	9500      	str	r5, [sp, #0]
   d8a26:	463b      	mov	r3, r7
   d8a28:	4632      	mov	r2, r6
   d8a2a:	4892      	ldr	r0, [pc, #584]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a2c:	f005 ffe8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+43,R,G,B);
   d8a30:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   d8a34:	e251      	b.n	d8eda <_Z6letterciiii+0x134a>
        strip.setPixelColor(pix+44,R,G,B);
        strip.setPixelColor(pix+45,R,G,B);
        strip.setPixelColor(pix+46,R,G,B);
        strip.setPixelColor(pix+47,R,G,B);
    }
    if(ltr == 'O')
   d8a36:	284f      	cmp	r0, #79	; 0x4f
   d8a38:	d13c      	bne.n	d8ab4 <_Z6letterciiii+0xf24>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8a3a:	b28c      	uxth	r4, r1
   d8a3c:	b2d6      	uxtb	r6, r2
   d8a3e:	b2df      	uxtb	r7, r3
   d8a40:	b2ed      	uxtb	r5, r5
   d8a42:	f104 010c 	add.w	r1, r4, #12
   d8a46:	463b      	mov	r3, r7
   d8a48:	4632      	mov	r2, r6
   d8a4a:	b289      	uxth	r1, r1
   d8a4c:	4889      	ldr	r0, [pc, #548]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a4e:	9500      	str	r5, [sp, #0]
   d8a50:	f005 ffd6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8a54:	f104 010d 	add.w	r1, r4, #13
   d8a58:	b289      	uxth	r1, r1
   d8a5a:	9500      	str	r5, [sp, #0]
   d8a5c:	463b      	mov	r3, r7
   d8a5e:	4632      	mov	r2, r6
   d8a60:	4884      	ldr	r0, [pc, #528]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a62:	f005 ffcd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8a66:	f104 010e 	add.w	r1, r4, #14
   d8a6a:	b289      	uxth	r1, r1
   d8a6c:	9500      	str	r5, [sp, #0]
   d8a6e:	463b      	mov	r3, r7
   d8a70:	4632      	mov	r2, r6
   d8a72:	4880      	ldr	r0, [pc, #512]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a74:	f005 ffc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8a78:	f104 0110 	add.w	r1, r4, #16
   d8a7c:	b289      	uxth	r1, r1
   d8a7e:	9500      	str	r5, [sp, #0]
   d8a80:	463b      	mov	r3, r7
   d8a82:	4632      	mov	r2, r6
   d8a84:	487b      	ldr	r0, [pc, #492]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a86:	f005 ffbb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8a8a:	f104 0114 	add.w	r1, r4, #20
   d8a8e:	b289      	uxth	r1, r1
   d8a90:	9500      	str	r5, [sp, #0]
   d8a92:	463b      	mov	r3, r7
   d8a94:	4632      	mov	r2, r6
   d8a96:	4877      	ldr	r0, [pc, #476]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8a98:	f005 ffb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8a9c:	f104 011c 	add.w	r1, r4, #28
   d8aa0:	b289      	uxth	r1, r1
   d8aa2:	9500      	str	r5, [sp, #0]
   d8aa4:	463b      	mov	r3, r7
   d8aa6:	4632      	mov	r2, r6
   d8aa8:	4872      	ldr	r0, [pc, #456]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8aaa:	f005 ffa9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8aae:	f104 011d 	add.w	r1, r4, #29
   d8ab2:	e0cd      	b.n	d8c50 <_Z6letterciiii+0x10c0>
        strip.setPixelColor(pix+30,R,G,B);
    }
    if(ltr == 'P')
   d8ab4:	2850      	cmp	r0, #80	; 0x50
   d8ab6:	d13c      	bne.n	d8b32 <_Z6letterciiii+0xfa2>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8ab8:	b28c      	uxth	r4, r1
   d8aba:	b2d6      	uxtb	r6, r2
   d8abc:	b2df      	uxtb	r7, r3
   d8abe:	b2ed      	uxtb	r5, r5
   d8ac0:	f104 010b 	add.w	r1, r4, #11
   d8ac4:	463b      	mov	r3, r7
   d8ac6:	4632      	mov	r2, r6
   d8ac8:	b289      	uxth	r1, r1
   d8aca:	486a      	ldr	r0, [pc, #424]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8acc:	9500      	str	r5, [sp, #0]
   d8ace:	f005 ff97 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8ad2:	f104 010c 	add.w	r1, r4, #12
   d8ad6:	463b      	mov	r3, r7
   d8ad8:	4632      	mov	r2, r6
   d8ada:	b289      	uxth	r1, r1
   d8adc:	4865      	ldr	r0, [pc, #404]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8ade:	9500      	str	r5, [sp, #0]
   d8ae0:	f005 ff8e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8ae4:	f104 010d 	add.w	r1, r4, #13
   d8ae8:	463b      	mov	r3, r7
   d8aea:	4632      	mov	r2, r6
   d8aec:	b289      	uxth	r1, r1
   d8aee:	4861      	ldr	r0, [pc, #388]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8af0:	9500      	str	r5, [sp, #0]
   d8af2:	f005 ff85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8af6:	f104 010e 	add.w	r1, r4, #14
   d8afa:	463b      	mov	r3, r7
   d8afc:	4632      	mov	r2, r6
   d8afe:	b289      	uxth	r1, r1
   d8b00:	485c      	ldr	r0, [pc, #368]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b02:	9500      	str	r5, [sp, #0]
   d8b04:	f005 ff7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8b08:	f104 010f 	add.w	r1, r4, #15
   d8b0c:	463b      	mov	r3, r7
   d8b0e:	4632      	mov	r2, r6
   d8b10:	b289      	uxth	r1, r1
   d8b12:	4858      	ldr	r0, [pc, #352]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b14:	9500      	str	r5, [sp, #0]
   d8b16:	f005 ff73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8b1a:	f104 0110 	add.w	r1, r4, #16
   d8b1e:	b289      	uxth	r1, r1
   d8b20:	9500      	str	r5, [sp, #0]
   d8b22:	463b      	mov	r3, r7
   d8b24:	4632      	mov	r2, r6
   d8b26:	4853      	ldr	r0, [pc, #332]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b28:	f005 ff6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8b2c:	f104 0112 	add.w	r1, r4, #18
   d8b30:	e182      	b.n	d8e38 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Q')
   d8b32:	2851      	cmp	r0, #81	; 0x51
   d8b34:	d13c      	bne.n	d8bb0 <_Z6letterciiii+0x1020>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8b36:	b28c      	uxth	r4, r1
   d8b38:	b2d6      	uxtb	r6, r2
   d8b3a:	b2df      	uxtb	r7, r3
   d8b3c:	b2ed      	uxtb	r5, r5
   d8b3e:	f104 010c 	add.w	r1, r4, #12
   d8b42:	463b      	mov	r3, r7
   d8b44:	4632      	mov	r2, r6
   d8b46:	b289      	uxth	r1, r1
   d8b48:	484a      	ldr	r0, [pc, #296]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b4a:	9500      	str	r5, [sp, #0]
   d8b4c:	f005 ff58 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8b50:	f104 010d 	add.w	r1, r4, #13
   d8b54:	463b      	mov	r3, r7
   d8b56:	4632      	mov	r2, r6
   d8b58:	b289      	uxth	r1, r1
   d8b5a:	4846      	ldr	r0, [pc, #280]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b5c:	9500      	str	r5, [sp, #0]
   d8b5e:	f005 ff4f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8b62:	f104 010e 	add.w	r1, r4, #14
   d8b66:	463b      	mov	r3, r7
   d8b68:	4632      	mov	r2, r6
   d8b6a:	b289      	uxth	r1, r1
   d8b6c:	4841      	ldr	r0, [pc, #260]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b6e:	9500      	str	r5, [sp, #0]
   d8b70:	f005 ff46 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8b74:	f104 010f 	add.w	r1, r4, #15
   d8b78:	463b      	mov	r3, r7
   d8b7a:	4632      	mov	r2, r6
   d8b7c:	b289      	uxth	r1, r1
   d8b7e:	483d      	ldr	r0, [pc, #244]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b80:	9500      	str	r5, [sp, #0]
   d8b82:	f005 ff3d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8b86:	f104 0110 	add.w	r1, r4, #16
   d8b8a:	463b      	mov	r3, r7
   d8b8c:	4632      	mov	r2, r6
   d8b8e:	b289      	uxth	r1, r1
   d8b90:	4838      	ldr	r0, [pc, #224]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8b92:	9500      	str	r5, [sp, #0]
   d8b94:	f005 ff34 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8b98:	f104 0113 	add.w	r1, r4, #19
   d8b9c:	b289      	uxth	r1, r1
   d8b9e:	9500      	str	r5, [sp, #0]
   d8ba0:	463b      	mov	r3, r7
   d8ba2:	4632      	mov	r2, r6
   d8ba4:	4833      	ldr	r0, [pc, #204]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8ba6:	f005 ff2b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8baa:	f104 011b 	add.w	r1, r4, #27
   d8bae:	e143      	b.n	d8e38 <_Z6letterciiii+0x12a8>
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'R')
   d8bb0:	2852      	cmp	r0, #82	; 0x52
   d8bb2:	d161      	bne.n	d8c78 <_Z6letterciiii+0x10e8>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8bb4:	b28c      	uxth	r4, r1
   d8bb6:	b2d6      	uxtb	r6, r2
   d8bb8:	b2df      	uxtb	r7, r3
   d8bba:	b2ed      	uxtb	r5, r5
   d8bbc:	f104 010b 	add.w	r1, r4, #11
   d8bc0:	463b      	mov	r3, r7
   d8bc2:	4632      	mov	r2, r6
   d8bc4:	b289      	uxth	r1, r1
   d8bc6:	482b      	ldr	r0, [pc, #172]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8bc8:	9500      	str	r5, [sp, #0]
   d8bca:	f005 ff19 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8bce:	f104 010c 	add.w	r1, r4, #12
   d8bd2:	463b      	mov	r3, r7
   d8bd4:	4632      	mov	r2, r6
   d8bd6:	b289      	uxth	r1, r1
   d8bd8:	4826      	ldr	r0, [pc, #152]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8bda:	9500      	str	r5, [sp, #0]
   d8bdc:	f005 ff10 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8be0:	f104 010d 	add.w	r1, r4, #13
   d8be4:	463b      	mov	r3, r7
   d8be6:	4632      	mov	r2, r6
   d8be8:	b289      	uxth	r1, r1
   d8bea:	4822      	ldr	r0, [pc, #136]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8bec:	9500      	str	r5, [sp, #0]
   d8bee:	f005 ff07 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8bf2:	f104 010e 	add.w	r1, r4, #14
   d8bf6:	463b      	mov	r3, r7
   d8bf8:	4632      	mov	r2, r6
   d8bfa:	b289      	uxth	r1, r1
   d8bfc:	481d      	ldr	r0, [pc, #116]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8bfe:	9500      	str	r5, [sp, #0]
   d8c00:	f005 fefe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8c04:	f104 010f 	add.w	r1, r4, #15
   d8c08:	463b      	mov	r3, r7
   d8c0a:	4632      	mov	r2, r6
   d8c0c:	b289      	uxth	r1, r1
   d8c0e:	4819      	ldr	r0, [pc, #100]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c10:	9500      	str	r5, [sp, #0]
   d8c12:	f005 fef5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8c16:	f104 0110 	add.w	r1, r4, #16
   d8c1a:	463b      	mov	r3, r7
   d8c1c:	4632      	mov	r2, r6
   d8c1e:	b289      	uxth	r1, r1
   d8c20:	4814      	ldr	r0, [pc, #80]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c22:	9500      	str	r5, [sp, #0]
   d8c24:	f005 feec 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8c28:	f104 0112 	add.w	r1, r4, #18
   d8c2c:	b289      	uxth	r1, r1
   d8c2e:	9500      	str	r5, [sp, #0]
   d8c30:	463b      	mov	r3, r7
   d8c32:	4632      	mov	r2, r6
   d8c34:	480f      	ldr	r0, [pc, #60]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c36:	f005 fee3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8c3a:	f104 011b 	add.w	r1, r4, #27
   d8c3e:	b289      	uxth	r1, r1
   d8c40:	9500      	str	r5, [sp, #0]
   d8c42:	463b      	mov	r3, r7
   d8c44:	4632      	mov	r2, r6
   d8c46:	480b      	ldr	r0, [pc, #44]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c48:	f005 feda 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8c4c:	f104 011c 	add.w	r1, r4, #28
   d8c50:	b289      	uxth	r1, r1
   d8c52:	9500      	str	r5, [sp, #0]
   d8c54:	463b      	mov	r3, r7
   d8c56:	4632      	mov	r2, r6
   d8c58:	4806      	ldr	r0, [pc, #24]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c5a:	f005 fed1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d8c5e:	f104 011e 	add.w	r1, r4, #30
   d8c62:	9500      	str	r5, [sp, #0]
   d8c64:	463b      	mov	r3, r7
   d8c66:	4632      	mov	r2, r6
   d8c68:	b289      	uxth	r1, r1
   d8c6a:	4802      	ldr	r0, [pc, #8]	; (d8c74 <_Z6letterciiii+0x10e4>)
   d8c6c:	f005 fec8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d8c70:	e302      	b.n	d9278 <_Z6letterciiii+0x16e8>
   d8c72:	bf00      	nop
   d8c74:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'S')
   d8c78:	2853      	cmp	r0, #83	; 0x53
   d8c7a:	d133      	bne.n	d8ce4 <_Z6letterciiii+0x1154>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8c7c:	b28c      	uxth	r4, r1
   d8c7e:	b2d6      	uxtb	r6, r2
   d8c80:	b2df      	uxtb	r7, r3
   d8c82:	b2ed      	uxtb	r5, r5
   d8c84:	f104 010b 	add.w	r1, r4, #11
   d8c88:	463b      	mov	r3, r7
   d8c8a:	4632      	mov	r2, r6
   d8c8c:	b289      	uxth	r1, r1
   d8c8e:	48a5      	ldr	r0, [pc, #660]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8c90:	9500      	str	r5, [sp, #0]
   d8c92:	f005 feb5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8c96:	f104 010e 	add.w	r1, r4, #14
   d8c9a:	463b      	mov	r3, r7
   d8c9c:	4632      	mov	r2, r6
   d8c9e:	b289      	uxth	r1, r1
   d8ca0:	48a0      	ldr	r0, [pc, #640]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8ca2:	9500      	str	r5, [sp, #0]
   d8ca4:	f005 feac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8ca8:	f104 0110 	add.w	r1, r4, #16
   d8cac:	463b      	mov	r3, r7
   d8cae:	4632      	mov	r2, r6
   d8cb0:	b289      	uxth	r1, r1
   d8cb2:	489c      	ldr	r0, [pc, #624]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8cb4:	9500      	str	r5, [sp, #0]
   d8cb6:	f005 fea3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8cba:	f104 0112 	add.w	r1, r4, #18
   d8cbe:	b289      	uxth	r1, r1
   d8cc0:	9500      	str	r5, [sp, #0]
   d8cc2:	463b      	mov	r3, r7
   d8cc4:	4632      	mov	r2, r6
   d8cc6:	4897      	ldr	r0, [pc, #604]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8cc8:	f005 fe9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8ccc:	f104 0114 	add.w	r1, r4, #20
   d8cd0:	b289      	uxth	r1, r1
   d8cd2:	9500      	str	r5, [sp, #0]
   d8cd4:	463b      	mov	r3, r7
   d8cd6:	4632      	mov	r2, r6
   d8cd8:	4892      	ldr	r0, [pc, #584]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8cda:	f005 fe91 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8cde:	f104 011c 	add.w	r1, r4, #28
   d8ce2:	e168      	b.n	d8fb6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'T')
   d8ce4:	2854      	cmp	r0, #84	; 0x54
   d8ce6:	d133      	bne.n	d8d50 <_Z6letterciiii+0x11c0>
    {
        strip.setPixelColor(pix+15,R,G,B);
   d8ce8:	b28c      	uxth	r4, r1
   d8cea:	b2d6      	uxtb	r6, r2
   d8cec:	b2df      	uxtb	r7, r3
   d8cee:	b2ed      	uxtb	r5, r5
   d8cf0:	f104 010f 	add.w	r1, r4, #15
   d8cf4:	463b      	mov	r3, r7
   d8cf6:	4632      	mov	r2, r6
   d8cf8:	b289      	uxth	r1, r1
   d8cfa:	488a      	ldr	r0, [pc, #552]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8cfc:	9500      	str	r5, [sp, #0]
   d8cfe:	f005 fe7f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d8d02:	f104 0110 	add.w	r1, r4, #16
   d8d06:	463b      	mov	r3, r7
   d8d08:	4632      	mov	r2, r6
   d8d0a:	b289      	uxth	r1, r1
   d8d0c:	4885      	ldr	r0, [pc, #532]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d0e:	9500      	str	r5, [sp, #0]
   d8d10:	f005 fe76 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d8d14:	f104 0111 	add.w	r1, r4, #17
   d8d18:	463b      	mov	r3, r7
   d8d1a:	4632      	mov	r2, r6
   d8d1c:	b289      	uxth	r1, r1
   d8d1e:	4881      	ldr	r0, [pc, #516]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d20:	9500      	str	r5, [sp, #0]
   d8d22:	f005 fe6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8d26:	f104 0112 	add.w	r1, r4, #18
   d8d2a:	463b      	mov	r3, r7
   d8d2c:	4632      	mov	r2, r6
   d8d2e:	b289      	uxth	r1, r1
   d8d30:	487c      	ldr	r0, [pc, #496]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d32:	9500      	str	r5, [sp, #0]
   d8d34:	f005 fe64 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d8d38:	f104 0113 	add.w	r1, r4, #19
   d8d3c:	b289      	uxth	r1, r1
   d8d3e:	9500      	str	r5, [sp, #0]
   d8d40:	463b      	mov	r3, r7
   d8d42:	4632      	mov	r2, r6
   d8d44:	4877      	ldr	r0, [pc, #476]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d46:	f005 fe5b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8d4a:	f104 0114 	add.w	r1, r4, #20
   d8d4e:	e132      	b.n	d8fb6 <_Z6letterciiii+0x1426>
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'U')
   d8d50:	2855      	cmp	r0, #85	; 0x55
   d8d52:	d13c      	bne.n	d8dce <_Z6letterciiii+0x123e>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8d54:	b28c      	uxth	r4, r1
   d8d56:	b2d6      	uxtb	r6, r2
   d8d58:	b2df      	uxtb	r7, r3
   d8d5a:	b2ed      	uxtb	r5, r5
   d8d5c:	f104 010b 	add.w	r1, r4, #11
   d8d60:	463b      	mov	r3, r7
   d8d62:	4632      	mov	r2, r6
   d8d64:	b289      	uxth	r1, r1
   d8d66:	486f      	ldr	r0, [pc, #444]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d68:	9500      	str	r5, [sp, #0]
   d8d6a:	f005 fe49 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8d6e:	f104 010c 	add.w	r1, r4, #12
   d8d72:	463b      	mov	r3, r7
   d8d74:	4632      	mov	r2, r6
   d8d76:	b289      	uxth	r1, r1
   d8d78:	486a      	ldr	r0, [pc, #424]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d7a:	9500      	str	r5, [sp, #0]
   d8d7c:	f005 fe40 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8d80:	f104 010d 	add.w	r1, r4, #13
   d8d84:	463b      	mov	r3, r7
   d8d86:	4632      	mov	r2, r6
   d8d88:	b289      	uxth	r1, r1
   d8d8a:	4866      	ldr	r0, [pc, #408]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8d8c:	9500      	str	r5, [sp, #0]
   d8d8e:	f005 fe37 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8d92:	f104 010e 	add.w	r1, r4, #14
   d8d96:	b289      	uxth	r1, r1
   d8d98:	9500      	str	r5, [sp, #0]
   d8d9a:	463b      	mov	r3, r7
   d8d9c:	4632      	mov	r2, r6
   d8d9e:	4861      	ldr	r0, [pc, #388]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8da0:	f005 fe2e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8da4:	f104 010f 	add.w	r1, r4, #15
   d8da8:	b289      	uxth	r1, r1
   d8daa:	9500      	str	r5, [sp, #0]
   d8dac:	463b      	mov	r3, r7
   d8dae:	4632      	mov	r2, r6
   d8db0:	485c      	ldr	r0, [pc, #368]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8db2:	f005 fe25 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8db6:	f104 0114 	add.w	r1, r4, #20
   d8dba:	b289      	uxth	r1, r1
   d8dbc:	9500      	str	r5, [sp, #0]
   d8dbe:	463b      	mov	r3, r7
   d8dc0:	4632      	mov	r2, r6
   d8dc2:	4858      	ldr	r0, [pc, #352]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8dc4:	f005 fe1c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8dc8:	f104 011b 	add.w	r1, r4, #27
   d8dcc:	e02b      	b.n	d8e26 <_Z6letterciiii+0x1296>
        strip.setPixelColor(pix+28,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'V')
   d8dce:	2856      	cmp	r0, #86	; 0x56
   d8dd0:	d13c      	bne.n	d8e4c <_Z6letterciiii+0x12bc>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d8dd2:	b28c      	uxth	r4, r1
   d8dd4:	b2d6      	uxtb	r6, r2
   d8dd6:	b2df      	uxtb	r7, r3
   d8dd8:	b2ed      	uxtb	r5, r5
   d8dda:	f104 010c 	add.w	r1, r4, #12
   d8dde:	463b      	mov	r3, r7
   d8de0:	4632      	mov	r2, r6
   d8de2:	b289      	uxth	r1, r1
   d8de4:	484f      	ldr	r0, [pc, #316]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8de6:	9500      	str	r5, [sp, #0]
   d8de8:	f005 fe0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8dec:	f104 010d 	add.w	r1, r4, #13
   d8df0:	463b      	mov	r3, r7
   d8df2:	4632      	mov	r2, r6
   d8df4:	b289      	uxth	r1, r1
   d8df6:	484b      	ldr	r0, [pc, #300]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8df8:	9500      	str	r5, [sp, #0]
   d8dfa:	f005 fe01 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8dfe:	f104 010e 	add.w	r1, r4, #14
   d8e02:	b289      	uxth	r1, r1
   d8e04:	9500      	str	r5, [sp, #0]
   d8e06:	463b      	mov	r3, r7
   d8e08:	4632      	mov	r2, r6
   d8e0a:	4846      	ldr	r0, [pc, #280]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e0c:	f005 fdf8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8e10:	f104 010f 	add.w	r1, r4, #15
   d8e14:	b289      	uxth	r1, r1
   d8e16:	9500      	str	r5, [sp, #0]
   d8e18:	463b      	mov	r3, r7
   d8e1a:	4632      	mov	r2, r6
   d8e1c:	4841      	ldr	r0, [pc, #260]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e1e:	f005 fdef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d8e22:	f104 0114 	add.w	r1, r4, #20
   d8e26:	b289      	uxth	r1, r1
   d8e28:	9500      	str	r5, [sp, #0]
   d8e2a:	463b      	mov	r3, r7
   d8e2c:	4632      	mov	r2, r6
   d8e2e:	483d      	ldr	r0, [pc, #244]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e30:	f005 fde6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8e34:	f104 011c 	add.w	r1, r4, #28
   d8e38:	b289      	uxth	r1, r1
   d8e3a:	9500      	str	r5, [sp, #0]
   d8e3c:	463b      	mov	r3, r7
   d8e3e:	4632      	mov	r2, r6
   d8e40:	4838      	ldr	r0, [pc, #224]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e42:	f005 fddd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8e46:	f104 011d 	add.w	r1, r4, #29
   d8e4a:	e0ab      	b.n	d8fa4 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'W')
   d8e4c:	2857      	cmp	r0, #87	; 0x57
   d8e4e:	d16b      	bne.n	d8f28 <_Z6letterciiii+0x1398>
    {
        strip.setPixelColor(pix+20,R,G,B);
   d8e50:	b28c      	uxth	r4, r1
   d8e52:	b2d6      	uxtb	r6, r2
   d8e54:	b2df      	uxtb	r7, r3
   d8e56:	b2ed      	uxtb	r5, r5
   d8e58:	f104 0114 	add.w	r1, r4, #20
   d8e5c:	463b      	mov	r3, r7
   d8e5e:	4632      	mov	r2, r6
   d8e60:	b289      	uxth	r1, r1
   d8e62:	4830      	ldr	r0, [pc, #192]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e64:	9500      	str	r5, [sp, #0]
   d8e66:	f005 fdcb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8e6a:	f104 010e 	add.w	r1, r4, #14
   d8e6e:	463b      	mov	r3, r7
   d8e70:	4632      	mov	r2, r6
   d8e72:	b289      	uxth	r1, r1
   d8e74:	482b      	ldr	r0, [pc, #172]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e76:	9500      	str	r5, [sp, #0]
   d8e78:	f005 fdc2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8e7c:	f104 010c 	add.w	r1, r4, #12
   d8e80:	463b      	mov	r3, r7
   d8e82:	4632      	mov	r2, r6
   d8e84:	b289      	uxth	r1, r1
   d8e86:	4827      	ldr	r0, [pc, #156]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e88:	9500      	str	r5, [sp, #0]
   d8e8a:	f005 fdb9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d8e8e:	f104 010d 	add.w	r1, r4, #13
   d8e92:	463b      	mov	r3, r7
   d8e94:	4632      	mov	r2, r6
   d8e96:	b289      	uxth	r1, r1
   d8e98:	4822      	ldr	r0, [pc, #136]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8e9a:	9500      	str	r5, [sp, #0]
   d8e9c:	f005 fdb0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8ea0:	f104 010f 	add.w	r1, r4, #15
   d8ea4:	463b      	mov	r3, r7
   d8ea6:	4632      	mov	r2, r6
   d8ea8:	b289      	uxth	r1, r1
   d8eaa:	481e      	ldr	r0, [pc, #120]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8eac:	9500      	str	r5, [sp, #0]
   d8eae:	f005 fda7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8eb2:	f104 011c 	add.w	r1, r4, #28
   d8eb6:	463b      	mov	r3, r7
   d8eb8:	4632      	mov	r2, r6
   d8eba:	b289      	uxth	r1, r1
   d8ebc:	4819      	ldr	r0, [pc, #100]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8ebe:	9500      	str	r5, [sp, #0]
   d8ec0:	f005 fd9e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d8ec4:	f104 011d 	add.w	r1, r4, #29
   d8ec8:	b289      	uxth	r1, r1
   d8eca:	9500      	str	r5, [sp, #0]
   d8ecc:	463b      	mov	r3, r7
   d8ece:	4632      	mov	r2, r6
   d8ed0:	4814      	ldr	r0, [pc, #80]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8ed2:	f005 fd95 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+36,R,G,B);
   d8ed6:	f104 0124 	add.w	r1, r4, #36	; 0x24
   d8eda:	463b      	mov	r3, r7
   d8edc:	4632      	mov	r2, r6
   d8ede:	b289      	uxth	r1, r1
   d8ee0:	4810      	ldr	r0, [pc, #64]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8ee2:	9500      	str	r5, [sp, #0]
   d8ee4:	f005 fd8c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+44,R,G,B);
   d8ee8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d8eec:	463b      	mov	r3, r7
   d8eee:	4632      	mov	r2, r6
   d8ef0:	b289      	uxth	r1, r1
   d8ef2:	480c      	ldr	r0, [pc, #48]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8ef4:	9500      	str	r5, [sp, #0]
   d8ef6:	f005 fd83 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+45,R,G,B);
   d8efa:	f104 012d 	add.w	r1, r4, #45	; 0x2d
   d8efe:	463b      	mov	r3, r7
   d8f00:	4632      	mov	r2, r6
   d8f02:	b289      	uxth	r1, r1
   d8f04:	4807      	ldr	r0, [pc, #28]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8f06:	9500      	str	r5, [sp, #0]
   d8f08:	f005 fd7a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+46,R,G,B);
   d8f0c:	f104 012e 	add.w	r1, r4, #46	; 0x2e
   d8f10:	b289      	uxth	r1, r1
   d8f12:	9500      	str	r5, [sp, #0]
   d8f14:	463b      	mov	r3, r7
   d8f16:	4632      	mov	r2, r6
   d8f18:	4802      	ldr	r0, [pc, #8]	; (d8f24 <_Z6letterciiii+0x1394>)
   d8f1a:	f005 fd71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+47,R,G,B);
   d8f1e:	f104 012f 	add.w	r1, r4, #47	; 0x2f
   d8f22:	e69e      	b.n	d8c62 <_Z6letterciiii+0x10d2>
   d8f24:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == 'X')
   d8f28:	2858      	cmp	r0, #88	; 0x58
   d8f2a:	d14e      	bne.n	d8fca <_Z6letterciiii+0x143a>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d8f2c:	b28c      	uxth	r4, r1
   d8f2e:	b2d6      	uxtb	r6, r2
   d8f30:	b2df      	uxtb	r7, r3
   d8f32:	b2ed      	uxtb	r5, r5
   d8f34:	f104 010b 	add.w	r1, r4, #11
   d8f38:	b289      	uxth	r1, r1
   d8f3a:	9500      	str	r5, [sp, #0]
   d8f3c:	463b      	mov	r3, r7
   d8f3e:	4632      	mov	r2, r6
   d8f40:	48a2      	ldr	r0, [pc, #648]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f42:	f005 fd5d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d8f46:	f104 010c 	add.w	r1, r4, #12
   d8f4a:	463b      	mov	r3, r7
   d8f4c:	4632      	mov	r2, r6
   d8f4e:	b289      	uxth	r1, r1
   d8f50:	489e      	ldr	r0, [pc, #632]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f52:	9500      	str	r5, [sp, #0]
   d8f54:	f005 fd54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d8f58:	f104 010e 	add.w	r1, r4, #14
   d8f5c:	463b      	mov	r3, r7
   d8f5e:	4632      	mov	r2, r6
   d8f60:	b289      	uxth	r1, r1
   d8f62:	489a      	ldr	r0, [pc, #616]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f64:	9500      	str	r5, [sp, #0]
   d8f66:	f005 fd4b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8f6a:	f104 010f 	add.w	r1, r4, #15
   d8f6e:	463b      	mov	r3, r7
   d8f70:	4632      	mov	r2, r6
   d8f72:	b289      	uxth	r1, r1
   d8f74:	4895      	ldr	r0, [pc, #596]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f76:	9500      	str	r5, [sp, #0]
   d8f78:	f005 fd42 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8f7c:	f104 0112 	add.w	r1, r4, #18
   d8f80:	463b      	mov	r3, r7
   d8f82:	4632      	mov	r2, r6
   d8f84:	b289      	uxth	r1, r1
   d8f86:	4891      	ldr	r0, [pc, #580]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f88:	9500      	str	r5, [sp, #0]
   d8f8a:	f005 fd39 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d8f8e:	f104 011b 	add.w	r1, r4, #27
   d8f92:	b289      	uxth	r1, r1
   d8f94:	9500      	str	r5, [sp, #0]
   d8f96:	463b      	mov	r3, r7
   d8f98:	4632      	mov	r2, r6
   d8f9a:	488c      	ldr	r0, [pc, #560]	; (d91cc <_Z6letterciiii+0x163c>)
   d8f9c:	f005 fd30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+28,R,G,B);
   d8fa0:	f104 011c 	add.w	r1, r4, #28
   d8fa4:	b289      	uxth	r1, r1
   d8fa6:	9500      	str	r5, [sp, #0]
   d8fa8:	463b      	mov	r3, r7
   d8faa:	4632      	mov	r2, r6
   d8fac:	4887      	ldr	r0, [pc, #540]	; (d91cc <_Z6letterciiii+0x163c>)
   d8fae:	f005 fd27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+30,R,G,B);
   d8fb2:	f104 011e 	add.w	r1, r4, #30
   d8fb6:	b289      	uxth	r1, r1
   d8fb8:	9500      	str	r5, [sp, #0]
   d8fba:	463b      	mov	r3, r7
   d8fbc:	4632      	mov	r2, r6
   d8fbe:	4883      	ldr	r0, [pc, #524]	; (d91cc <_Z6letterciiii+0x163c>)
   d8fc0:	f005 fd1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+31,R,G,B);
   d8fc4:	f104 011f 	add.w	r1, r4, #31
   d8fc8:	e64b      	b.n	d8c62 <_Z6letterciiii+0x10d2>
    }
    if(ltr == 'Y')
   d8fca:	2859      	cmp	r0, #89	; 0x59
   d8fcc:	d12a      	bne.n	d9024 <_Z6letterciiii+0x1494>
    {
        strip.setPixelColor(pix+14,R,G,B);
   d8fce:	b28c      	uxth	r4, r1
   d8fd0:	b2d6      	uxtb	r6, r2
   d8fd2:	b2df      	uxtb	r7, r3
   d8fd4:	b2ed      	uxtb	r5, r5
   d8fd6:	f104 010e 	add.w	r1, r4, #14
   d8fda:	463b      	mov	r3, r7
   d8fdc:	4632      	mov	r2, r6
   d8fde:	b289      	uxth	r1, r1
   d8fe0:	487a      	ldr	r0, [pc, #488]	; (d91cc <_Z6letterciiii+0x163c>)
   d8fe2:	9500      	str	r5, [sp, #0]
   d8fe4:	f005 fd0c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d8fe8:	f104 010f 	add.w	r1, r4, #15
   d8fec:	463b      	mov	r3, r7
   d8fee:	4632      	mov	r2, r6
   d8ff0:	b289      	uxth	r1, r1
   d8ff2:	4876      	ldr	r0, [pc, #472]	; (d91cc <_Z6letterciiii+0x163c>)
   d8ff4:	9500      	str	r5, [sp, #0]
   d8ff6:	f005 fd03 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d8ffa:	f104 0112 	add.w	r1, r4, #18
   d8ffe:	463b      	mov	r3, r7
   d9000:	4632      	mov	r2, r6
   d9002:	b289      	uxth	r1, r1
   d9004:	4871      	ldr	r0, [pc, #452]	; (d91cc <_Z6letterciiii+0x163c>)
   d9006:	9500      	str	r5, [sp, #0]
   d9008:	f005 fcfa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d900c:	f104 0113 	add.w	r1, r4, #19
   d9010:	b289      	uxth	r1, r1
   d9012:	9500      	str	r5, [sp, #0]
   d9014:	463b      	mov	r3, r7
   d9016:	4632      	mov	r2, r6
   d9018:	486c      	ldr	r0, [pc, #432]	; (d91cc <_Z6letterciiii+0x163c>)
   d901a:	f005 fcf1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d901e:	f104 0114 	add.w	r1, r4, #20
   d9022:	e7bf      	b.n	d8fa4 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == 'Z')
   d9024:	285a      	cmp	r0, #90	; 0x5a
   d9026:	d13c      	bne.n	d90a2 <_Z6letterciiii+0x1512>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9028:	b28c      	uxth	r4, r1
   d902a:	b2d6      	uxtb	r6, r2
   d902c:	b2df      	uxtb	r7, r3
   d902e:	b2ed      	uxtb	r5, r5
   d9030:	f104 010b 	add.w	r1, r4, #11
   d9034:	463b      	mov	r3, r7
   d9036:	4632      	mov	r2, r6
   d9038:	b289      	uxth	r1, r1
   d903a:	4864      	ldr	r0, [pc, #400]	; (d91cc <_Z6letterciiii+0x163c>)
   d903c:	9500      	str	r5, [sp, #0]
   d903e:	f005 fcdf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+12,R,G,B);
   d9042:	f104 010c 	add.w	r1, r4, #12
   d9046:	463b      	mov	r3, r7
   d9048:	4632      	mov	r2, r6
   d904a:	b289      	uxth	r1, r1
   d904c:	485f      	ldr	r0, [pc, #380]	; (d91cc <_Z6letterciiii+0x163c>)
   d904e:	9500      	str	r5, [sp, #0]
   d9050:	f005 fcd6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9054:	f104 010f 	add.w	r1, r4, #15
   d9058:	463b      	mov	r3, r7
   d905a:	4632      	mov	r2, r6
   d905c:	b289      	uxth	r1, r1
   d905e:	485b      	ldr	r0, [pc, #364]	; (d91cc <_Z6letterciiii+0x163c>)
   d9060:	9500      	str	r5, [sp, #0]
   d9062:	f005 fccd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+16,R,G,B);
   d9066:	f104 0110 	add.w	r1, r4, #16
   d906a:	463b      	mov	r3, r7
   d906c:	4632      	mov	r2, r6
   d906e:	b289      	uxth	r1, r1
   d9070:	4856      	ldr	r0, [pc, #344]	; (d91cc <_Z6letterciiii+0x163c>)
   d9072:	9500      	str	r5, [sp, #0]
   d9074:	f005 fcc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9078:	f104 0112 	add.w	r1, r4, #18
   d907c:	463b      	mov	r3, r7
   d907e:	4632      	mov	r2, r6
   d9080:	b289      	uxth	r1, r1
   d9082:	4852      	ldr	r0, [pc, #328]	; (d91cc <_Z6letterciiii+0x163c>)
   d9084:	9500      	str	r5, [sp, #0]
   d9086:	f005 fcbb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+20,R,G,B);
   d908a:	f104 0114 	add.w	r1, r4, #20
   d908e:	b289      	uxth	r1, r1
   d9090:	9500      	str	r5, [sp, #0]
   d9092:	463b      	mov	r3, r7
   d9094:	4632      	mov	r2, r6
   d9096:	484d      	ldr	r0, [pc, #308]	; (d91cc <_Z6letterciiii+0x163c>)
   d9098:	f005 fcb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+27,R,G,B);
   d909c:	f104 011b 	add.w	r1, r4, #27
   d90a0:	e780      	b.n	d8fa4 <_Z6letterciiii+0x1414>
        strip.setPixelColor(pix+30,R,G,B);
        strip.setPixelColor(pix+31,R,G,B);
    }
    if(ltr == '0')
   d90a2:	2830      	cmp	r0, #48	; 0x30
   d90a4:	d105      	bne.n	d90b2 <_Z6letterciiii+0x1522>
    {
        snum(0,pix+15,R,G,B);
   d90a6:	9500      	str	r5, [sp, #0]
   d90a8:	310f      	adds	r1, #15
   d90aa:	2000      	movs	r0, #0
   d90ac:	f7fd f9ce 	bl	d644c <_Z4snumiiiii>
   d90b0:	e0e2      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '1')
   d90b2:	2831      	cmp	r0, #49	; 0x31
   d90b4:	d105      	bne.n	d90c2 <_Z6letterciiii+0x1532>
    {
        snum(1,pix+15,R,G,B);
   d90b6:	9500      	str	r5, [sp, #0]
   d90b8:	310f      	adds	r1, #15
   d90ba:	2001      	movs	r0, #1
   d90bc:	f7fd f9c6 	bl	d644c <_Z4snumiiiii>
   d90c0:	e0da      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '2')
   d90c2:	2832      	cmp	r0, #50	; 0x32
   d90c4:	d105      	bne.n	d90d2 <_Z6letterciiii+0x1542>
    {
        snum(2,pix+15,R,G,B);
   d90c6:	9500      	str	r5, [sp, #0]
   d90c8:	310f      	adds	r1, #15
   d90ca:	2002      	movs	r0, #2
   d90cc:	f7fd f9be 	bl	d644c <_Z4snumiiiii>
   d90d0:	e0d2      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '3')
   d90d2:	2833      	cmp	r0, #51	; 0x33
   d90d4:	d105      	bne.n	d90e2 <_Z6letterciiii+0x1552>
    {
        snum(3,pix+15,R,G,B);
   d90d6:	9500      	str	r5, [sp, #0]
   d90d8:	310f      	adds	r1, #15
   d90da:	2003      	movs	r0, #3
   d90dc:	f7fd f9b6 	bl	d644c <_Z4snumiiiii>
   d90e0:	e0ca      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '4')
   d90e2:	2834      	cmp	r0, #52	; 0x34
   d90e4:	d105      	bne.n	d90f2 <_Z6letterciiii+0x1562>
    {
        snum(4,pix+15,R,G,B);
   d90e6:	9500      	str	r5, [sp, #0]
   d90e8:	310f      	adds	r1, #15
   d90ea:	2004      	movs	r0, #4
   d90ec:	f7fd f9ae 	bl	d644c <_Z4snumiiiii>
   d90f0:	e0c2      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '5')
   d90f2:	2835      	cmp	r0, #53	; 0x35
   d90f4:	d105      	bne.n	d9102 <_Z6letterciiii+0x1572>
    {
        snum(5,pix+15,R,G,B);
   d90f6:	9500      	str	r5, [sp, #0]
   d90f8:	310f      	adds	r1, #15
   d90fa:	2005      	movs	r0, #5
   d90fc:	f7fd f9a6 	bl	d644c <_Z4snumiiiii>
   d9100:	e0ba      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '6')
   d9102:	2836      	cmp	r0, #54	; 0x36
   d9104:	d105      	bne.n	d9112 <_Z6letterciiii+0x1582>
    {
        snum(6,pix+15,R,G,B);
   d9106:	9500      	str	r5, [sp, #0]
   d9108:	310f      	adds	r1, #15
   d910a:	2006      	movs	r0, #6
   d910c:	f7fd f99e 	bl	d644c <_Z4snumiiiii>
   d9110:	e0b2      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '7')
   d9112:	2837      	cmp	r0, #55	; 0x37
   d9114:	d105      	bne.n	d9122 <_Z6letterciiii+0x1592>
    {
        snum(7,pix+15,R,G,B);
   d9116:	9500      	str	r5, [sp, #0]
   d9118:	310f      	adds	r1, #15
   d911a:	2007      	movs	r0, #7
   d911c:	f7fd f996 	bl	d644c <_Z4snumiiiii>
   d9120:	e0aa      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '8')
   d9122:	2838      	cmp	r0, #56	; 0x38
   d9124:	d105      	bne.n	d9132 <_Z6letterciiii+0x15a2>
    {
        snum(8,pix+15,R,G,B);
   d9126:	9500      	str	r5, [sp, #0]
   d9128:	310f      	adds	r1, #15
   d912a:	2008      	movs	r0, #8
   d912c:	f7fd f98e 	bl	d644c <_Z4snumiiiii>
   d9130:	e0a2      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '9')
   d9132:	2839      	cmp	r0, #57	; 0x39
   d9134:	d105      	bne.n	d9142 <_Z6letterciiii+0x15b2>
    {
        snum(9,pix+15,R,G,B);
   d9136:	9500      	str	r5, [sp, #0]
   d9138:	310f      	adds	r1, #15
   d913a:	2009      	movs	r0, #9
   d913c:	f7fd f986 	bl	d644c <_Z4snumiiiii>
   d9140:	e09a      	b.n	d9278 <_Z6letterciiii+0x16e8>
    }
    if(ltr == '!')
   d9142:	2821      	cmp	r0, #33	; 0x21
   d9144:	d124      	bne.n	d9190 <_Z6letterciiii+0x1600>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9146:	b28c      	uxth	r4, r1
   d9148:	b2d6      	uxtb	r6, r2
   d914a:	b2df      	uxtb	r7, r3
   d914c:	b2ed      	uxtb	r5, r5
   d914e:	f104 010b 	add.w	r1, r4, #11
   d9152:	463b      	mov	r3, r7
   d9154:	4632      	mov	r2, r6
   d9156:	b289      	uxth	r1, r1
   d9158:	481c      	ldr	r0, [pc, #112]	; (d91cc <_Z6letterciiii+0x163c>)
   d915a:	9500      	str	r5, [sp, #0]
   d915c:	f005 fc50 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+13,R,G,B);
   d9160:	f104 010d 	add.w	r1, r4, #13
   d9164:	463b      	mov	r3, r7
   d9166:	4632      	mov	r2, r6
   d9168:	b289      	uxth	r1, r1
   d916a:	4818      	ldr	r0, [pc, #96]	; (d91cc <_Z6letterciiii+0x163c>)
   d916c:	9500      	str	r5, [sp, #0]
   d916e:	f005 fc47 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d9172:	f104 010e 	add.w	r1, r4, #14
   d9176:	463b      	mov	r3, r7
   d9178:	4632      	mov	r2, r6
   d917a:	b289      	uxth	r1, r1
   d917c:	9500      	str	r5, [sp, #0]
   d917e:	4813      	ldr	r0, [pc, #76]	; (d91cc <_Z6letterciiii+0x163c>)
   d9180:	f005 fc3e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+15,R,G,B);
   d9184:	f104 010f 	add.w	r1, r4, #15
   d9188:	9508      	str	r5, [sp, #32]
   d918a:	463b      	mov	r3, r7
   d918c:	4632      	mov	r2, r6
   d918e:	e06c      	b.n	d926a <_Z6letterciiii+0x16da>
    }
    if(ltr == '.')
   d9190:	282e      	cmp	r0, #46	; 0x2e
   d9192:	d105      	bne.n	d91a0 <_Z6letterciiii+0x1610>
    {
        strip.setPixelColor(pix+11,R,G,B);
   d9194:	b2ed      	uxtb	r5, r5
   d9196:	310b      	adds	r1, #11
   d9198:	9508      	str	r5, [sp, #32]
   d919a:	b2db      	uxtb	r3, r3
   d919c:	b2d2      	uxtb	r2, r2
   d919e:	e064      	b.n	d926a <_Z6letterciiii+0x16da>
    }
    if(ltr == ':')
   d91a0:	283a      	cmp	r0, #58	; 0x3a
   d91a2:	d115      	bne.n	d91d0 <_Z6letterciiii+0x1640>
    {
        strip.setPixelColor(pix+12,R,G,B);
   d91a4:	b28c      	uxth	r4, r1
   d91a6:	b2d6      	uxtb	r6, r2
   d91a8:	b2df      	uxtb	r7, r3
   d91aa:	b2ed      	uxtb	r5, r5
   d91ac:	f104 010c 	add.w	r1, r4, #12
   d91b0:	463b      	mov	r3, r7
   d91b2:	4632      	mov	r2, r6
   d91b4:	b289      	uxth	r1, r1
   d91b6:	9500      	str	r5, [sp, #0]
   d91b8:	4804      	ldr	r0, [pc, #16]	; (d91cc <_Z6letterciiii+0x163c>)
   d91ba:	f005 fc21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+14,R,G,B);
   d91be:	f104 010e 	add.w	r1, r4, #14
   d91c2:	9508      	str	r5, [sp, #32]
   d91c4:	463b      	mov	r3, r7
   d91c6:	4632      	mov	r2, r6
   d91c8:	e04f      	b.n	d926a <_Z6letterciiii+0x16da>
   d91ca:	bf00      	nop
   d91cc:	2003e31c 	.word	0x2003e31c
    }
    if(ltr == '+')
   d91d0:	282b      	cmp	r0, #43	; 0x2b
   d91d2:	d12d      	bne.n	d9230 <_Z6letterciiii+0x16a0>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d91d4:	b28c      	uxth	r4, r1
   d91d6:	b2d6      	uxtb	r6, r2
   d91d8:	b2df      	uxtb	r7, r3
   d91da:	b2ed      	uxtb	r5, r5
   d91dc:	f104 010d 	add.w	r1, r4, #13
   d91e0:	463b      	mov	r3, r7
   d91e2:	4632      	mov	r2, r6
   d91e4:	b289      	uxth	r1, r1
   d91e6:	4825      	ldr	r0, [pc, #148]	; (d927c <_Z6letterciiii+0x16ec>)
   d91e8:	9500      	str	r5, [sp, #0]
   d91ea:	f005 fc09 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d91ee:	f104 0112 	add.w	r1, r4, #18
   d91f2:	463b      	mov	r3, r7
   d91f4:	4632      	mov	r2, r6
   d91f6:	b289      	uxth	r1, r1
   d91f8:	4820      	ldr	r0, [pc, #128]	; (d927c <_Z6letterciiii+0x16ec>)
   d91fa:	9500      	str	r5, [sp, #0]
   d91fc:	f005 fc00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d9200:	f104 011d 	add.w	r1, r4, #29
   d9204:	463b      	mov	r3, r7
   d9206:	4632      	mov	r2, r6
   d9208:	b289      	uxth	r1, r1
   d920a:	481c      	ldr	r0, [pc, #112]	; (d927c <_Z6letterciiii+0x16ec>)
   d920c:	9500      	str	r5, [sp, #0]
   d920e:	f005 fbf7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+17,R,G,B);
   d9212:	f104 0111 	add.w	r1, r4, #17
   d9216:	463b      	mov	r3, r7
   d9218:	4632      	mov	r2, r6
   d921a:	b289      	uxth	r1, r1
   d921c:	9500      	str	r5, [sp, #0]
   d921e:	4817      	ldr	r0, [pc, #92]	; (d927c <_Z6letterciiii+0x16ec>)
   d9220:	f005 fbee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+19,R,G,B);
   d9224:	f104 0113 	add.w	r1, r4, #19
   d9228:	9508      	str	r5, [sp, #32]
   d922a:	463b      	mov	r3, r7
   d922c:	4632      	mov	r2, r6
   d922e:	e01c      	b.n	d926a <_Z6letterciiii+0x16da>
    }
    if(ltr == '-')
   d9230:	282d      	cmp	r0, #45	; 0x2d
   d9232:	d121      	bne.n	d9278 <_Z6letterciiii+0x16e8>
    {
        strip.setPixelColor(pix+13,R,G,B);
   d9234:	b28c      	uxth	r4, r1
   d9236:	b2d7      	uxtb	r7, r2
   d9238:	b2de      	uxtb	r6, r3
   d923a:	b2ed      	uxtb	r5, r5
   d923c:	f104 010d 	add.w	r1, r4, #13
   d9240:	4633      	mov	r3, r6
   d9242:	463a      	mov	r2, r7
   d9244:	b289      	uxth	r1, r1
   d9246:	480d      	ldr	r0, [pc, #52]	; (d927c <_Z6letterciiii+0x16ec>)
   d9248:	9500      	str	r5, [sp, #0]
   d924a:	f005 fbd9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+29,R,G,B);
   d924e:	f104 011d 	add.w	r1, r4, #29
   d9252:	4633      	mov	r3, r6
   d9254:	463a      	mov	r2, r7
   d9256:	b289      	uxth	r1, r1
   d9258:	9500      	str	r5, [sp, #0]
   d925a:	4808      	ldr	r0, [pc, #32]	; (d927c <_Z6letterciiii+0x16ec>)
   d925c:	f005 fbd0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+18,R,G,B);
   d9260:	f104 0112 	add.w	r1, r4, #18
   d9264:	9508      	str	r5, [sp, #32]
   d9266:	4633      	mov	r3, r6
   d9268:	463a      	mov	r2, r7
   d926a:	4804      	ldr	r0, [pc, #16]	; (d927c <_Z6letterciiii+0x16ec>)
   d926c:	b289      	uxth	r1, r1
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d926e:	b003      	add	sp, #12
   d9270:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    }
    if(ltr == '-')
    {
        strip.setPixelColor(pix+13,R,G,B);
        strip.setPixelColor(pix+29,R,G,B);
        strip.setPixelColor(pix+18,R,G,B);
   d9274:	f005 bbc4 	b.w	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(pix+33,);
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
   d9278:	b003      	add	sp, #12
   d927a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d927c:	2003e31c 	.word	0x2003e31c

000d9280 <_Z7strdispPKciiii>:
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9280:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9284:	4d28      	ldr	r5, [pc, #160]	; (d9328 <_Z7strdispPKciiii+0xa8>)
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d9286:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d928a:	2600      	movs	r6, #0
        strip.setPixelColor(pix+34,);
        strip.setPixelColor(pix+35,);
        strip.setPixelColor(pix+36,);
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
   d928c:	4682      	mov	sl, r0
   d928e:	460c      	mov	r4, r1
   d9290:	4617      	mov	r7, r2
   d9292:	4698      	mov	r8, r3
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9294:	602e      	str	r6, [r5, #0]
   d9296:	4650      	mov	r0, sl
   d9298:	f008 ffad 	bl	e21f6 <strlen>
   d929c:	682b      	ldr	r3, [r5, #0]
   d929e:	4298      	cmp	r0, r3
   d92a0:	d93c      	bls.n	d931c <_Z7strdispPKciiii+0x9c>
    {
        if(wrd[i] == 'i' || wrd[i] == 'l' || wrd[i] == '.' || wrd[i] == '!')
   d92a2:	f81a 0003 	ldrb.w	r0, [sl, r3]
   d92a6:	2869      	cmp	r0, #105	; 0x69
   d92a8:	d005      	beq.n	d92b6 <_Z7strdispPKciiii+0x36>
   d92aa:	286c      	cmp	r0, #108	; 0x6c
   d92ac:	d003      	beq.n	d92b6 <_Z7strdispPKciiii+0x36>
   d92ae:	282e      	cmp	r0, #46	; 0x2e
   d92b0:	d001      	beq.n	d92b6 <_Z7strdispPKciiii+0x36>
   d92b2:	2821      	cmp	r0, #33	; 0x21
   d92b4:	d108      	bne.n	d92c8 <_Z7strdispPKciiii+0x48>
        {
            letter(wrd[i],pnum,R,G,B);
   d92b6:	4621      	mov	r1, r4
   d92b8:	f8cd 9000 	str.w	r9, [sp]
   d92bc:	4643      	mov	r3, r8
   d92be:	463a      	mov	r2, r7
   d92c0:	f7fe fc66 	bl	d7b90 <_Z6letterciiii>
            pnum=pnum+16;
   d92c4:	3410      	adds	r4, #16
   d92c6:	e025      	b.n	d9314 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == 'm' || wrd[i] == 'w' || wrd[i] == 'W' || wrd[i] == 'M' || wrd[i] == 'N')
   d92c8:	286d      	cmp	r0, #109	; 0x6d
   d92ca:	d007      	beq.n	d92dc <_Z7strdispPKciiii+0x5c>
   d92cc:	f000 03df 	and.w	r3, r0, #223	; 0xdf
   d92d0:	2b57      	cmp	r3, #87	; 0x57
   d92d2:	d003      	beq.n	d92dc <_Z7strdispPKciiii+0x5c>
   d92d4:	f1a0 034d 	sub.w	r3, r0, #77	; 0x4d
   d92d8:	2b01      	cmp	r3, #1
   d92da:	d808      	bhi.n	d92ee <_Z7strdispPKciiii+0x6e>
        {
            letter(wrd[i],pnum,R,G,B);
   d92dc:	4621      	mov	r1, r4
   d92de:	f8cd 9000 	str.w	r9, [sp]
   d92e2:	4643      	mov	r3, r8
   d92e4:	463a      	mov	r2, r7
   d92e6:	f7fe fc53 	bl	d7b90 <_Z6letterciiii>
            pnum=pnum+48;
   d92ea:	3430      	adds	r4, #48	; 0x30
   d92ec:	e012      	b.n	d9314 <_Z7strdispPKciiii+0x94>
        }
        else if(wrd[i] == ' ')
   d92ee:	2820      	cmp	r0, #32
   d92f0:	d108      	bne.n	d9304 <_Z7strdispPKciiii+0x84>
        {
            letter('l',pnum,0,0,0);
   d92f2:	2300      	movs	r3, #0
   d92f4:	4621      	mov	r1, r4
   d92f6:	9600      	str	r6, [sp, #0]
   d92f8:	461a      	mov	r2, r3
   d92fa:	206c      	movs	r0, #108	; 0x6c
   d92fc:	f7fe fc48 	bl	d7b90 <_Z6letterciiii>
            pnum=pnum+16;
   d9300:	3410      	adds	r4, #16
   d9302:	e007      	b.n	d9314 <_Z7strdispPKciiii+0x94>
        }
        else
        {
            letter(wrd[i],pnum,R,G,B);
   d9304:	4621      	mov	r1, r4
   d9306:	f8cd 9000 	str.w	r9, [sp]
   d930a:	4643      	mov	r3, r8
   d930c:	463a      	mov	r2, r7
   d930e:	f7fe fc3f 	bl	d7b90 <_Z6letterciiii>
            pnum=pnum+32;
   d9312:	3420      	adds	r4, #32
    }*/
}                        
void strdisp(const char *wrd, int pix, int R, int G, int B){            //Code block for displaying a small string of characters ("") that fits on the screen
    int pnum;
    pnum=pix;
    for(i=0;i<strlen(wrd);i++)
   d9314:	682b      	ldr	r3, [r5, #0]
   d9316:	3301      	adds	r3, #1
   d9318:	602b      	str	r3, [r5, #0]
   d931a:	e7bc      	b.n	d9296 <_Z7strdispPKciiii+0x16>
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d931c:	4803      	ldr	r0, [pc, #12]	; (d932c <_Z7strdispPKciiii+0xac>)
}                
   d931e:	b002      	add	sp, #8
   d9320:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        {
            letter(wrd[i],pnum,R,G,B);
            pnum=pnum+32;
        }
    }
    strip.show();
   d9324:	f005 b9ca 	b.w	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   d9328:	2003e33c 	.word	0x2003e33c
   d932c:	2003e31c 	.word	0x2003e31c

000d9330 <_Z4dimgii>:
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix){                     //Code block for displaying a still weather animation when in dark mode
    if(cnum > 299 && cnum < 322)
   d9330:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   d9334:	2b15      	cmp	r3, #21
        strip.show();
        delay(1000);
    }*/
    
}       
void dimg(int cnum, int inpix){                     //Code block for displaying a still weather animation when in dark mode
   d9336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if(cnum > 299 && cnum < 322)
   d9338:	d821      	bhi.n	d937e <_Z4dimgii+0x4e>
    {
        strip.setPixelColor(inpix+10,rclock,gclock,bclock);
   d933a:	4d47      	ldr	r5, [pc, #284]	; (d9458 <_Z4dimgii+0x128>)
   d933c:	4f47      	ldr	r7, [pc, #284]	; (d945c <_Z4dimgii+0x12c>)
   d933e:	4e48      	ldr	r6, [pc, #288]	; (d9460 <_Z4dimgii+0x130>)
   d9340:	7828      	ldrb	r0, [r5, #0]
   d9342:	783b      	ldrb	r3, [r7, #0]
   d9344:	7832      	ldrb	r2, [r6, #0]
   d9346:	9000      	str	r0, [sp, #0]
   d9348:	b28c      	uxth	r4, r1
   d934a:	f104 010a 	add.w	r1, r4, #10
   d934e:	b289      	uxth	r1, r1
   d9350:	4844      	ldr	r0, [pc, #272]	; (d9464 <_Z4dimgii+0x134>)
   d9352:	f005 fb55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,rclock,gclock,bclock);
   d9356:	7828      	ldrb	r0, [r5, #0]
   d9358:	783b      	ldrb	r3, [r7, #0]
   d935a:	7832      	ldrb	r2, [r6, #0]
   d935c:	9000      	str	r0, [sp, #0]
   d935e:	f104 0119 	add.w	r1, r4, #25
   d9362:	b289      	uxth	r1, r1
   d9364:	483f      	ldr	r0, [pc, #252]	; (d9464 <_Z4dimgii+0x134>)
   d9366:	f005 fb4b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   d936a:	342b      	adds	r4, #43	; 0x2b
   d936c:	7829      	ldrb	r1, [r5, #0]
   d936e:	783b      	ldrb	r3, [r7, #0]
   d9370:	7832      	ldrb	r2, [r6, #0]
   d9372:	9100      	str	r1, [sp, #0]
   d9374:	483b      	ldr	r0, [pc, #236]	; (d9464 <_Z4dimgii+0x134>)
   d9376:	b2a1      	uxth	r1, r4
   d9378:	f005 fb42 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d937c:	e069      	b.n	d9452 <_Z4dimgii+0x122>
    }
    else if(cnum > 199 && cnum < 235)
   d937e:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
   d9382:	2b22      	cmp	r3, #34	; 0x22
   d9384:	d826      	bhi.n	d93d4 <_Z4dimgii+0xa4>
    {
        strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   d9386:	4d34      	ldr	r5, [pc, #208]	; (d9458 <_Z4dimgii+0x128>)
   d9388:	4f34      	ldr	r7, [pc, #208]	; (d945c <_Z4dimgii+0x12c>)
   d938a:	4e35      	ldr	r6, [pc, #212]	; (d9460 <_Z4dimgii+0x130>)
   d938c:	7828      	ldrb	r0, [r5, #0]
   d938e:	783b      	ldrb	r3, [r7, #0]
   d9390:	7832      	ldrb	r2, [r6, #0]
   d9392:	9000      	str	r0, [sp, #0]
   d9394:	b28c      	uxth	r4, r1
   d9396:	f104 011c 	add.w	r1, r4, #28
   d939a:	b289      	uxth	r1, r1
   d939c:	4831      	ldr	r0, [pc, #196]	; (d9464 <_Z4dimgii+0x134>)
   d939e:	f005 fb2f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d93a2:	7828      	ldrb	r0, [r5, #0]
   d93a4:	783b      	ldrb	r3, [r7, #0]
   d93a6:	7832      	ldrb	r2, [r6, #0]
   d93a8:	9000      	str	r0, [sp, #0]
   d93aa:	f104 0114 	add.w	r1, r4, #20
   d93ae:	b289      	uxth	r1, r1
   d93b0:	482c      	ldr	r0, [pc, #176]	; (d9464 <_Z4dimgii+0x134>)
   d93b2:	f005 fb25 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   d93b6:	7828      	ldrb	r0, [r5, #0]
   d93b8:	783b      	ldrb	r3, [r7, #0]
   d93ba:	7832      	ldrb	r2, [r6, #0]
   d93bc:	9000      	str	r0, [sp, #0]
   d93be:	f104 011a 	add.w	r1, r4, #26
   d93c2:	b289      	uxth	r1, r1
   d93c4:	4827      	ldr	r0, [pc, #156]	; (d9464 <_Z4dimgii+0x134>)
   d93c6:	f005 fb1b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   d93ca:	783b      	ldrb	r3, [r7, #0]
   d93cc:	7832      	ldrb	r2, [r6, #0]
   d93ce:	f104 0116 	add.w	r1, r4, #22
   d93d2:	e033      	b.n	d943c <_Z4dimgii+0x10c>
    }
    else if(cnum > 499 && cnum < 533)
   d93d4:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   d93d8:	2b20      	cmp	r3, #32
   d93da:	d836      	bhi.n	d944a <_Z4dimgii+0x11a>
    {
        strip.setPixelColor(inpix+12,rclock,gclock,bclock);
   d93dc:	4d1e      	ldr	r5, [pc, #120]	; (d9458 <_Z4dimgii+0x128>)
   d93de:	4f1f      	ldr	r7, [pc, #124]	; (d945c <_Z4dimgii+0x12c>)
   d93e0:	4e1f      	ldr	r6, [pc, #124]	; (d9460 <_Z4dimgii+0x130>)
   d93e2:	7828      	ldrb	r0, [r5, #0]
   d93e4:	783b      	ldrb	r3, [r7, #0]
   d93e6:	7832      	ldrb	r2, [r6, #0]
   d93e8:	9000      	str	r0, [sp, #0]
   d93ea:	b28c      	uxth	r4, r1
   d93ec:	f104 010c 	add.w	r1, r4, #12
   d93f0:	b289      	uxth	r1, r1
   d93f2:	481c      	ldr	r0, [pc, #112]	; (d9464 <_Z4dimgii+0x134>)
   d93f4:	f005 fb04 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   d93f8:	7828      	ldrb	r0, [r5, #0]
   d93fa:	783b      	ldrb	r3, [r7, #0]
   d93fc:	7832      	ldrb	r2, [r6, #0]
   d93fe:	9000      	str	r0, [sp, #0]
   d9400:	f104 0116 	add.w	r1, r4, #22
   d9404:	b289      	uxth	r1, r1
   d9406:	4817      	ldr	r0, [pc, #92]	; (d9464 <_Z4dimgii+0x134>)
   d9408:	f005 fafa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   d940c:	7828      	ldrb	r0, [r5, #0]
   d940e:	783b      	ldrb	r3, [r7, #0]
   d9410:	7832      	ldrb	r2, [r6, #0]
   d9412:	9000      	str	r0, [sp, #0]
   d9414:	f104 011b 	add.w	r1, r4, #27
   d9418:	b289      	uxth	r1, r1
   d941a:	4812      	ldr	r0, [pc, #72]	; (d9464 <_Z4dimgii+0x134>)
   d941c:	f005 faf0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   d9420:	7828      	ldrb	r0, [r5, #0]
   d9422:	783b      	ldrb	r3, [r7, #0]
   d9424:	7832      	ldrb	r2, [r6, #0]
   d9426:	9000      	str	r0, [sp, #0]
   d9428:	f104 0125 	add.w	r1, r4, #37	; 0x25
   d942c:	b289      	uxth	r1, r1
   d942e:	480d      	ldr	r0, [pc, #52]	; (d9464 <_Z4dimgii+0x134>)
   d9430:	f005 fae6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   d9434:	783b      	ldrb	r3, [r7, #0]
   d9436:	7832      	ldrb	r2, [r6, #0]
   d9438:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   d943c:	7828      	ldrb	r0, [r5, #0]
   d943e:	9000      	str	r0, [sp, #0]
   d9440:	b289      	uxth	r1, r1
   d9442:	4808      	ldr	r0, [pc, #32]	; (d9464 <_Z4dimgii+0x134>)
   d9444:	f005 fadc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9448:	e003      	b.n	d9452 <_Z4dimgii+0x122>
    }
    else if(cnum > 599 && cnum < 630)                                    //Snow
   d944a:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   d944e:	281d      	cmp	r0, #29
   d9450:	d9c4      	bls.n	d93dc <_Z4dimgii+0xac>
        strip.setPixelColor(inpix+22,rclock,gclock,bclock);
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
   d9452:	b003      	add	sp, #12
   d9454:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9456:	bf00      	nop
   d9458:	2003e35c 	.word	0x2003e35c
   d945c:	2003e314 	.word	0x2003e314
   d9460:	2003e354 	.word	0x2003e354
   d9464:	2003e31c 	.word	0x2003e31c

000d9468 <_Z9conditionii>:
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cltr[0] == 'd')
   d946c:	4bd6      	ldr	r3, [pc, #856]	; (d97c8 <_Z9conditionii+0x360>)
   d946e:	781b      	ldrb	r3, [r3, #0]
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9470:	b085      	sub	sp, #20
    if(cltr[0] == 'd')
   d9472:	2b64      	cmp	r3, #100	; 0x64
   d9474:	f2a0 3222 	subw	r2, r0, #802	; 0x322
        strip.setPixelColor(inpix+27,rclock,gclock,bclock);
        strip.setPixelColor(inpix+37,rclock,gclock,bclock);
        strip.setPixelColor(inpix+44,rclock,gclock,bclock);    
    }
}                                             
void condition(int cnum, int inpix){                    //Code block for displaying the current weather condition (eg. sunny, rainy, cloudy...)
   d9478:	4606      	mov	r6, r0
   d947a:	460c      	mov	r4, r1
   d947c:	f5a0 7348 	sub.w	r3, r0, #800	; 0x320
   d9480:	9203      	str	r2, [sp, #12]
   d9482:	f5a0 7b16 	sub.w	fp, r0, #600	; 0x258
    if(cltr[0] == 'd')
   d9486:	f040 863d 	bne.w	da104 <_Z9conditionii+0xc9c>
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)                       //Clear or Haze
   d948a:	2b01      	cmp	r3, #1
   d948c:	d904      	bls.n	d9498 <_Z9conditionii+0x30>
   d948e:	f240 23d1 	movw	r3, #721	; 0x2d1
   d9492:	4298      	cmp	r0, r3
   d9494:	f040 81c5 	bne.w	d9822 <_Z9conditionii+0x3ba>
        {
            strip.setPixelColor(inpix+3,rclock/1.8,gclock*1.3,0);
   d9498:	f8df 9334 	ldr.w	r9, [pc, #820]	; d97d0 <_Z9conditionii+0x368>
   d949c:	f8df 8334 	ldr.w	r8, [pc, #820]	; d97d4 <_Z9conditionii+0x36c>
   d94a0:	f8d9 0000 	ldr.w	r0, [r9]
   d94a4:	f008 f98a 	bl	e17bc <__aeabi_i2d>
   d94a8:	a3c3      	add	r3, pc, #780	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d94aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94ae:	f008 f9eb 	bl	e1888 <__aeabi_dmul>
   d94b2:	f008 fcab 	bl	e1e0c <__aeabi_d2uiz>
   d94b6:	fa5f fa80 	uxtb.w	sl, r0
   d94ba:	f8d8 0000 	ldr.w	r0, [r8]
   d94be:	f008 f97d 	bl	e17bc <__aeabi_i2d>
   d94c2:	a3bf      	add	r3, pc, #764	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d94c4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94c8:	f008 fb08 	bl	e1adc <__aeabi_ddiv>
   d94cc:	f008 fc9e 	bl	e1e0c <__aeabi_d2uiz>
   d94d0:	b2a5      	uxth	r5, r4
   d94d2:	2700      	movs	r7, #0
   d94d4:	1ce9      	adds	r1, r5, #3
   d94d6:	4653      	mov	r3, sl
   d94d8:	b2c2      	uxtb	r2, r0
   d94da:	b289      	uxth	r1, r1
   d94dc:	48bb      	ldr	r0, [pc, #748]	; (d97cc <_Z9conditionii+0x364>)
   d94de:	9700      	str	r7, [sp, #0]
   d94e0:	f005 fa8e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock/1.8,gclock*1.3,0);
   d94e4:	f8d9 0000 	ldr.w	r0, [r9]
   d94e8:	f008 f968 	bl	e17bc <__aeabi_i2d>
   d94ec:	a3b2      	add	r3, pc, #712	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d94ee:	e9d3 2300 	ldrd	r2, r3, [r3]
   d94f2:	f008 f9c9 	bl	e1888 <__aeabi_dmul>
   d94f6:	f008 fc89 	bl	e1e0c <__aeabi_d2uiz>
   d94fa:	fa5f fa80 	uxtb.w	sl, r0
   d94fe:	f8d8 0000 	ldr.w	r0, [r8]
   d9502:	f008 f95b 	bl	e17bc <__aeabi_i2d>
   d9506:	a3ae      	add	r3, pc, #696	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d9508:	e9d3 2300 	ldrd	r2, r3, [r3]
   d950c:	f008 fae6 	bl	e1adc <__aeabi_ddiv>
   d9510:	f008 fc7c 	bl	e1e0c <__aeabi_d2uiz>
   d9514:	f105 0112 	add.w	r1, r5, #18
   d9518:	4653      	mov	r3, sl
   d951a:	b2c2      	uxtb	r2, r0
   d951c:	b289      	uxth	r1, r1
   d951e:	48ab      	ldr	r0, [pc, #684]	; (d97cc <_Z9conditionii+0x364>)
   d9520:	9700      	str	r7, [sp, #0]
   d9522:	f005 fa6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,rclock/1.8,gclock*1.3,0);
   d9526:	f8d9 0000 	ldr.w	r0, [r9]
   d952a:	f008 f947 	bl	e17bc <__aeabi_i2d>
   d952e:	a3a2      	add	r3, pc, #648	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d9530:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9534:	f008 f9a8 	bl	e1888 <__aeabi_dmul>
   d9538:	f008 fc68 	bl	e1e0c <__aeabi_d2uiz>
   d953c:	fa5f fa80 	uxtb.w	sl, r0
   d9540:	f8d8 0000 	ldr.w	r0, [r8]
   d9544:	f008 f93a 	bl	e17bc <__aeabi_i2d>
   d9548:	a39d      	add	r3, pc, #628	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d954a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d954e:	f008 fac5 	bl	e1adc <__aeabi_ddiv>
   d9552:	f008 fc5b 	bl	e1e0c <__aeabi_d2uiz>
   d9556:	f105 0113 	add.w	r1, r5, #19
   d955a:	4653      	mov	r3, sl
   d955c:	b2c2      	uxtb	r2, r0
   d955e:	b289      	uxth	r1, r1
   d9560:	489a      	ldr	r0, [pc, #616]	; (d97cc <_Z9conditionii+0x364>)
   d9562:	9700      	str	r7, [sp, #0]
   d9564:	f005 fa4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/1.8,gclock*1.3,0);
   d9568:	f8d9 0000 	ldr.w	r0, [r9]
   d956c:	f008 f926 	bl	e17bc <__aeabi_i2d>
   d9570:	a391      	add	r3, pc, #580	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d9572:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9576:	f008 f987 	bl	e1888 <__aeabi_dmul>
   d957a:	f008 fc47 	bl	e1e0c <__aeabi_d2uiz>
   d957e:	fa5f fa80 	uxtb.w	sl, r0
   d9582:	f8d8 0000 	ldr.w	r0, [r8]
   d9586:	f008 f919 	bl	e17bc <__aeabi_i2d>
   d958a:	a38d      	add	r3, pc, #564	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d958c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9590:	f008 faa4 	bl	e1adc <__aeabi_ddiv>
   d9594:	f008 fc3a 	bl	e1e0c <__aeabi_d2uiz>
   d9598:	f105 0114 	add.w	r1, r5, #20
   d959c:	4653      	mov	r3, sl
   d959e:	b2c2      	uxtb	r2, r0
   d95a0:	b289      	uxth	r1, r1
   d95a2:	488a      	ldr	r0, [pc, #552]	; (d97cc <_Z9conditionii+0x364>)
   d95a4:	9700      	str	r7, [sp, #0]
   d95a6:	f005 fa2b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock/1.8,gclock*1.3,0);
   d95aa:	f8d9 0000 	ldr.w	r0, [r9]
   d95ae:	f008 f905 	bl	e17bc <__aeabi_i2d>
   d95b2:	a381      	add	r3, pc, #516	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d95b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95b8:	f008 f966 	bl	e1888 <__aeabi_dmul>
   d95bc:	f008 fc26 	bl	e1e0c <__aeabi_d2uiz>
   d95c0:	fa5f fa80 	uxtb.w	sl, r0
   d95c4:	f8d8 0000 	ldr.w	r0, [r8]
   d95c8:	f008 f8f8 	bl	e17bc <__aeabi_i2d>
   d95cc:	a37c      	add	r3, pc, #496	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d95ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95d2:	f008 fa83 	bl	e1adc <__aeabi_ddiv>
   d95d6:	f008 fc19 	bl	e1e0c <__aeabi_d2uiz>
   d95da:	f105 011f 	add.w	r1, r5, #31
   d95de:	4653      	mov	r3, sl
   d95e0:	b2c2      	uxtb	r2, r0
   d95e2:	b289      	uxth	r1, r1
   d95e4:	4879      	ldr	r0, [pc, #484]	; (d97cc <_Z9conditionii+0x364>)
   d95e6:	9700      	str	r7, [sp, #0]
   d95e8:	f005 fa0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock/1.8,gclock*1.3,0);
   d95ec:	f8d9 0000 	ldr.w	r0, [r9]
   d95f0:	f008 f8e4 	bl	e17bc <__aeabi_i2d>
   d95f4:	a370      	add	r3, pc, #448	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d95f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d95fa:	f008 f945 	bl	e1888 <__aeabi_dmul>
   d95fe:	f008 fc05 	bl	e1e0c <__aeabi_d2uiz>
   d9602:	fa5f fa80 	uxtb.w	sl, r0
   d9606:	f8d8 0000 	ldr.w	r0, [r8]
   d960a:	f008 f8d7 	bl	e17bc <__aeabi_i2d>
   d960e:	a36c      	add	r3, pc, #432	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d9610:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9614:	f008 fa62 	bl	e1adc <__aeabi_ddiv>
   d9618:	f008 fbf8 	bl	e1e0c <__aeabi_d2uiz>
   d961c:	f105 011d 	add.w	r1, r5, #29
   d9620:	4653      	mov	r3, sl
   d9622:	b2c2      	uxtb	r2, r0
   d9624:	b289      	uxth	r1, r1
   d9626:	4869      	ldr	r0, [pc, #420]	; (d97cc <_Z9conditionii+0x364>)
   d9628:	9700      	str	r7, [sp, #0]
   d962a:	f005 f9e9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock/1.8,gclock*1.3,0);
   d962e:	f8d9 0000 	ldr.w	r0, [r9]
   d9632:	f008 f8c3 	bl	e17bc <__aeabi_i2d>
   d9636:	a360      	add	r3, pc, #384	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d9638:	e9d3 2300 	ldrd	r2, r3, [r3]
   d963c:	f008 f924 	bl	e1888 <__aeabi_dmul>
   d9640:	f008 fbe4 	bl	e1e0c <__aeabi_d2uiz>
   d9644:	fa5f fa80 	uxtb.w	sl, r0
   d9648:	f8d8 0000 	ldr.w	r0, [r8]
   d964c:	f008 f8b6 	bl	e17bc <__aeabi_i2d>
   d9650:	a35b      	add	r3, pc, #364	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d9652:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9656:	f008 fa41 	bl	e1adc <__aeabi_ddiv>
   d965a:	f008 fbd7 	bl	e1e0c <__aeabi_d2uiz>
   d965e:	f105 011c 	add.w	r1, r5, #28
   d9662:	4653      	mov	r3, sl
   d9664:	b2c2      	uxtb	r2, r0
   d9666:	b289      	uxth	r1, r1
   d9668:	4858      	ldr	r0, [pc, #352]	; (d97cc <_Z9conditionii+0x364>)
   d966a:	9700      	str	r7, [sp, #0]
   d966c:	f005 f9c8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/1.8,gclock*1.3,0);
   d9670:	f8d9 0000 	ldr.w	r0, [r9]
   d9674:	f008 f8a2 	bl	e17bc <__aeabi_i2d>
   d9678:	a34f      	add	r3, pc, #316	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d967a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d967e:	f008 f903 	bl	e1888 <__aeabi_dmul>
   d9682:	f008 fbc3 	bl	e1e0c <__aeabi_d2uiz>
   d9686:	fa5f fa80 	uxtb.w	sl, r0
   d968a:	f8d8 0000 	ldr.w	r0, [r8]
   d968e:	f008 f895 	bl	e17bc <__aeabi_i2d>
   d9692:	a34b      	add	r3, pc, #300	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d9694:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9698:	f008 fa20 	bl	e1adc <__aeabi_ddiv>
   d969c:	f008 fbb6 	bl	e1e0c <__aeabi_d2uiz>
   d96a0:	f105 011b 	add.w	r1, r5, #27
   d96a4:	4653      	mov	r3, sl
   d96a6:	b2c2      	uxtb	r2, r0
   d96a8:	b289      	uxth	r1, r1
   d96aa:	4848      	ldr	r0, [pc, #288]	; (d97cc <_Z9conditionii+0x364>)
   d96ac:	9700      	str	r7, [sp, #0]
   d96ae:	f005 f9a7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/1.8,gclock*1.3,0);
   d96b2:	f8d9 0000 	ldr.w	r0, [r9]
   d96b6:	f008 f881 	bl	e17bc <__aeabi_i2d>
   d96ba:	a33f      	add	r3, pc, #252	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d96bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96c0:	f008 f8e2 	bl	e1888 <__aeabi_dmul>
   d96c4:	f008 fba2 	bl	e1e0c <__aeabi_d2uiz>
   d96c8:	fa5f fa80 	uxtb.w	sl, r0
   d96cc:	f8d8 0000 	ldr.w	r0, [r8]
   d96d0:	f008 f874 	bl	e17bc <__aeabi_i2d>
   d96d4:	a33a      	add	r3, pc, #232	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d96d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d96da:	f008 f9ff 	bl	e1adc <__aeabi_ddiv>
   d96de:	f008 fb95 	bl	e1e0c <__aeabi_d2uiz>
   d96e2:	f105 0119 	add.w	r1, r5, #25
   d96e6:	4653      	mov	r3, sl
   d96e8:	b2c2      	uxtb	r2, r0
   d96ea:	b289      	uxth	r1, r1
   d96ec:	4837      	ldr	r0, [pc, #220]	; (d97cc <_Z9conditionii+0x364>)
   d96ee:	9700      	str	r7, [sp, #0]
   d96f0:	f005 f986 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock/1.8,gclock*1.3,0);
   d96f4:	f8d9 0000 	ldr.w	r0, [r9]
   d96f8:	f008 f860 	bl	e17bc <__aeabi_i2d>
   d96fc:	a32e      	add	r3, pc, #184	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d96fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9702:	f008 f8c1 	bl	e1888 <__aeabi_dmul>
   d9706:	f008 fb81 	bl	e1e0c <__aeabi_d2uiz>
   d970a:	fa5f fa80 	uxtb.w	sl, r0
   d970e:	f8d8 0000 	ldr.w	r0, [r8]
   d9712:	f008 f853 	bl	e17bc <__aeabi_i2d>
   d9716:	a32a      	add	r3, pc, #168	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d9718:	e9d3 2300 	ldrd	r2, r3, [r3]
   d971c:	f008 f9de 	bl	e1adc <__aeabi_ddiv>
   d9720:	f008 fb74 	bl	e1e0c <__aeabi_d2uiz>
   d9724:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9728:	4653      	mov	r3, sl
   d972a:	b2c2      	uxtb	r2, r0
   d972c:	b289      	uxth	r1, r1
   d972e:	4827      	ldr	r0, [pc, #156]	; (d97cc <_Z9conditionii+0x364>)
   d9730:	9700      	str	r7, [sp, #0]
   d9732:	f005 f965 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock/1.8,gclock*1.3,0);
   d9736:	f8d9 0000 	ldr.w	r0, [r9]
   d973a:	f008 f83f 	bl	e17bc <__aeabi_i2d>
   d973e:	a31e      	add	r3, pc, #120	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d9740:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9744:	f008 f8a0 	bl	e1888 <__aeabi_dmul>
   d9748:	f008 fb60 	bl	e1e0c <__aeabi_d2uiz>
   d974c:	fa5f fa80 	uxtb.w	sl, r0
   d9750:	f8d8 0000 	ldr.w	r0, [r8]
   d9754:	f008 f832 	bl	e17bc <__aeabi_i2d>
   d9758:	a319      	add	r3, pc, #100	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d975a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d975e:	f008 f9bd 	bl	e1adc <__aeabi_ddiv>
   d9762:	f008 fb53 	bl	e1e0c <__aeabi_d2uiz>
   d9766:	f105 0123 	add.w	r1, r5, #35	; 0x23
   d976a:	4653      	mov	r3, sl
   d976c:	b2c2      	uxtb	r2, r0
   d976e:	b289      	uxth	r1, r1
   d9770:	4816      	ldr	r0, [pc, #88]	; (d97cc <_Z9conditionii+0x364>)
   d9772:	9700      	str	r7, [sp, #0]
   d9774:	f005 f944 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/1.8,gclock*1.3,0);
   d9778:	f8d9 0000 	ldr.w	r0, [r9]
   d977c:	f008 f81e 	bl	e17bc <__aeabi_i2d>
   d9780:	a30d      	add	r3, pc, #52	; (adr r3, d97b8 <_Z9conditionii+0x350>)
   d9782:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9786:	f008 f87f 	bl	e1888 <__aeabi_dmul>
   d978a:	f008 fb3f 	bl	e1e0c <__aeabi_d2uiz>
   d978e:	fa5f fa80 	uxtb.w	sl, r0
   d9792:	f8d8 0000 	ldr.w	r0, [r8]
   d9796:	f008 f811 	bl	e17bc <__aeabi_i2d>
   d979a:	a309      	add	r3, pc, #36	; (adr r3, d97c0 <_Z9conditionii+0x358>)
   d979c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97a0:	f008 f99c 	bl	e1adc <__aeabi_ddiv>
   d97a4:	f008 fb32 	bl	e1e0c <__aeabi_d2uiz>
   d97a8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d97ac:	b2c2      	uxtb	r2, r0
   d97ae:	4653      	mov	r3, sl
   d97b0:	b289      	uxth	r1, r1
   d97b2:	e011      	b.n	d97d8 <_Z9conditionii+0x370>
   d97b4:	f3af 8000 	nop.w
   d97b8:	cccccccd 	.word	0xcccccccd
   d97bc:	3ff4cccc 	.word	0x3ff4cccc
   d97c0:	cccccccd 	.word	0xcccccccd
   d97c4:	3ffccccc 	.word	0x3ffccccc
   d97c8:	2003e360 	.word	0x2003e360
   d97cc:	2003e31c 	.word	0x2003e31c
   d97d0:	2003e314 	.word	0x2003e314
   d97d4:	2003e354 	.word	0x2003e354
   d97d8:	48c7      	ldr	r0, [pc, #796]	; (d9af8 <_Z9conditionii+0x690>)
   d97da:	9700      	str	r7, [sp, #0]
   d97dc:	f005 f910 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock/1.8,gclock*1.3,0);
   d97e0:	f8d9 0000 	ldr.w	r0, [r9]
   d97e4:	f007 ffea 	bl	e17bc <__aeabi_i2d>
   d97e8:	a3bd      	add	r3, pc, #756	; (adr r3, d9ae0 <_Z9conditionii+0x678>)
   d97ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   d97ee:	f008 f84b 	bl	e1888 <__aeabi_dmul>
   d97f2:	f008 fb0b 	bl	e1e0c <__aeabi_d2uiz>
   d97f6:	fa5f f980 	uxtb.w	r9, r0
   d97fa:	f8d8 0000 	ldr.w	r0, [r8]
   d97fe:	f007 ffdd 	bl	e17bc <__aeabi_i2d>
   d9802:	a3b9      	add	r3, pc, #740	; (adr r3, d9ae8 <_Z9conditionii+0x680>)
   d9804:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9808:	f008 f968 	bl	e1adc <__aeabi_ddiv>
   d980c:	f008 fafe 	bl	e1e0c <__aeabi_d2uiz>
   d9810:	f105 0133 	add.w	r1, r5, #51	; 0x33
   d9814:	b2c2      	uxtb	r2, r0
   d9816:	9700      	str	r7, [sp, #0]
   d9818:	464b      	mov	r3, r9
   d981a:	b289      	uxth	r1, r1
   d981c:	48b6      	ldr	r0, [pc, #728]	; (d9af8 <_Z9conditionii+0x690>)
   d981e:	f005 f8ef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 802 || cnum == 803)                                      //Partly cloudy
   d9822:	9b03      	ldr	r3, [sp, #12]
   d9824:	2b01      	cmp	r3, #1
   d9826:	f200 812d 	bhi.w	d9a84 <_Z9conditionii+0x61c>
        {
            strip.setPixelColor(inpix+3,rclock,gclock*1.9,0);
   d982a:	f8df 82d8 	ldr.w	r8, [pc, #728]	; d9b04 <_Z9conditionii+0x69c>
   d982e:	4fb3      	ldr	r7, [pc, #716]	; (d9afc <_Z9conditionii+0x694>)
   d9830:	f8d8 0000 	ldr.w	r0, [r8]
   d9834:	f007 ffc2 	bl	e17bc <__aeabi_i2d>
   d9838:	a3ad      	add	r3, pc, #692	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d983a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d983e:	f008 f823 	bl	e1888 <__aeabi_dmul>
   d9842:	f008 fae3 	bl	e1e0c <__aeabi_d2uiz>
   d9846:	b2a5      	uxth	r5, r4
   d9848:	f04f 0900 	mov.w	r9, #0
   d984c:	1ce9      	adds	r1, r5, #3
   d984e:	783a      	ldrb	r2, [r7, #0]
   d9850:	f8cd 9000 	str.w	r9, [sp]
   d9854:	b2c3      	uxtb	r3, r0
   d9856:	b289      	uxth	r1, r1
   d9858:	48a7      	ldr	r0, [pc, #668]	; (d9af8 <_Z9conditionii+0x690>)
   d985a:	f005 f8d1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock*1.9,0);
   d985e:	f8d8 0000 	ldr.w	r0, [r8]
   d9862:	f007 ffab 	bl	e17bc <__aeabi_i2d>
   d9866:	a3a2      	add	r3, pc, #648	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d9868:	e9d3 2300 	ldrd	r2, r3, [r3]
   d986c:	f008 f80c 	bl	e1888 <__aeabi_dmul>
   d9870:	f008 facc 	bl	e1e0c <__aeabi_d2uiz>
   d9874:	f105 0112 	add.w	r1, r5, #18
   d9878:	783a      	ldrb	r2, [r7, #0]
   d987a:	f8cd 9000 	str.w	r9, [sp]
   d987e:	b2c3      	uxtb	r3, r0
   d9880:	b289      	uxth	r1, r1
   d9882:	489d      	ldr	r0, [pc, #628]	; (d9af8 <_Z9conditionii+0x690>)
   d9884:	f005 f8bc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+19,rclock,gclock*1.9,0);
   d9888:	f8d8 0000 	ldr.w	r0, [r8]
   d988c:	f007 ff96 	bl	e17bc <__aeabi_i2d>
   d9890:	a397      	add	r3, pc, #604	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d9892:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9896:	f007 fff7 	bl	e1888 <__aeabi_dmul>
   d989a:	f008 fab7 	bl	e1e0c <__aeabi_d2uiz>
   d989e:	f105 0113 	add.w	r1, r5, #19
   d98a2:	783a      	ldrb	r2, [r7, #0]
   d98a4:	f8cd 9000 	str.w	r9, [sp]
   d98a8:	b2c3      	uxtb	r3, r0
   d98aa:	b289      	uxth	r1, r1
   d98ac:	4892      	ldr	r0, [pc, #584]	; (d9af8 <_Z9conditionii+0x690>)
   d98ae:	f005 f8a7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock*1.9,0);
   d98b2:	f8d8 0000 	ldr.w	r0, [r8]
   d98b6:	f007 ff81 	bl	e17bc <__aeabi_i2d>
   d98ba:	a38d      	add	r3, pc, #564	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d98bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98c0:	f007 ffe2 	bl	e1888 <__aeabi_dmul>
   d98c4:	f008 faa2 	bl	e1e0c <__aeabi_d2uiz>
   d98c8:	f105 011f 	add.w	r1, r5, #31
   d98cc:	783a      	ldrb	r2, [r7, #0]
   d98ce:	f8cd 9000 	str.w	r9, [sp]
   d98d2:	b2c3      	uxtb	r3, r0
   d98d4:	b289      	uxth	r1, r1
   d98d6:	4888      	ldr	r0, [pc, #544]	; (d9af8 <_Z9conditionii+0x690>)
   d98d8:	f005 f892 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock*1.9,0);
   d98dc:	f8d8 0000 	ldr.w	r0, [r8]
   d98e0:	f007 ff6c 	bl	e17bc <__aeabi_i2d>
   d98e4:	a382      	add	r3, pc, #520	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d98e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d98ea:	f007 ffcd 	bl	e1888 <__aeabi_dmul>
   d98ee:	f008 fa8d 	bl	e1e0c <__aeabi_d2uiz>
   d98f2:	f105 011d 	add.w	r1, r5, #29
   d98f6:	783a      	ldrb	r2, [r7, #0]
   d98f8:	f8cd 9000 	str.w	r9, [sp]
   d98fc:	b2c3      	uxtb	r3, r0
   d98fe:	b289      	uxth	r1, r1
   d9900:	487d      	ldr	r0, [pc, #500]	; (d9af8 <_Z9conditionii+0x690>)
   d9902:	f005 f87d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.9,0);
   d9906:	f8d8 0000 	ldr.w	r0, [r8]
   d990a:	f007 ff57 	bl	e17bc <__aeabi_i2d>
   d990e:	a378      	add	r3, pc, #480	; (adr r3, d9af0 <_Z9conditionii+0x688>)
   d9910:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9914:	f007 ffb8 	bl	e1888 <__aeabi_dmul>
   d9918:	f008 fa78 	bl	e1e0c <__aeabi_d2uiz>
   d991c:	783a      	ldrb	r2, [r7, #0]
   d991e:	f8cd 9000 	str.w	r9, [sp]
   d9922:	f105 0122 	add.w	r1, r5, #34	; 0x22
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d9926:	f8df 91d8 	ldr.w	r9, [pc, #472]	; d9b00 <_Z9conditionii+0x698>
            strip.setPixelColor(inpix+3,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+18,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+19,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+31,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+29,rclock,gclock*1.9,0);
            strip.setPixelColor(inpix+34,rclock,gclock*1.9,0);
   d992a:	b2c3      	uxtb	r3, r0
   d992c:	b289      	uxth	r1, r1
   d992e:	4872      	ldr	r0, [pc, #456]	; (d9af8 <_Z9conditionii+0x690>)
   d9930:	f005 f866 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   d9934:	f899 0000 	ldrb.w	r0, [r9]
   d9938:	f898 3000 	ldrb.w	r3, [r8]
   d993c:	783a      	ldrb	r2, [r7, #0]
   d993e:	9000      	str	r0, [sp, #0]
   d9940:	f105 0114 	add.w	r1, r5, #20
   d9944:	b289      	uxth	r1, r1
   d9946:	486c      	ldr	r0, [pc, #432]	; (d9af8 <_Z9conditionii+0x690>)
   d9948:	f005 f85a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   d994c:	f899 0000 	ldrb.w	r0, [r9]
   d9950:	f898 3000 	ldrb.w	r3, [r8]
   d9954:	783a      	ldrb	r2, [r7, #0]
   d9956:	9000      	str	r0, [sp, #0]
   d9958:	f105 011a 	add.w	r1, r5, #26
   d995c:	b289      	uxth	r1, r1
   d995e:	4866      	ldr	r0, [pc, #408]	; (d9af8 <_Z9conditionii+0x690>)
   d9960:	f005 f84e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   d9964:	f899 0000 	ldrb.w	r0, [r9]
   d9968:	f898 3000 	ldrb.w	r3, [r8]
   d996c:	783a      	ldrb	r2, [r7, #0]
   d996e:	9000      	str	r0, [sp, #0]
   d9970:	f105 011b 	add.w	r1, r5, #27
   d9974:	b289      	uxth	r1, r1
   d9976:	4860      	ldr	r0, [pc, #384]	; (d9af8 <_Z9conditionii+0x690>)
   d9978:	f005 f842 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   d997c:	f899 0000 	ldrb.w	r0, [r9]
   d9980:	f898 3000 	ldrb.w	r3, [r8]
   d9984:	783a      	ldrb	r2, [r7, #0]
   d9986:	9000      	str	r0, [sp, #0]
   d9988:	f105 011c 	add.w	r1, r5, #28
   d998c:	b289      	uxth	r1, r1
   d998e:	485a      	ldr	r0, [pc, #360]	; (d9af8 <_Z9conditionii+0x690>)
   d9990:	f005 f836 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock,bclock);
   d9994:	f899 0000 	ldrb.w	r0, [r9]
   d9998:	f898 3000 	ldrb.w	r3, [r8]
   d999c:	783a      	ldrb	r2, [r7, #0]
   d999e:	9000      	str	r0, [sp, #0]
   d99a0:	f105 0123 	add.w	r1, r5, #35	; 0x23
   d99a4:	b289      	uxth	r1, r1
   d99a6:	4854      	ldr	r0, [pc, #336]	; (d9af8 <_Z9conditionii+0x690>)
   d99a8:	f005 f82a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   d99ac:	f899 0000 	ldrb.w	r0, [r9]
   d99b0:	f898 3000 	ldrb.w	r3, [r8]
   d99b4:	783a      	ldrb	r2, [r7, #0]
   d99b6:	9000      	str	r0, [sp, #0]
   d99b8:	f105 0124 	add.w	r1, r5, #36	; 0x24
   d99bc:	b289      	uxth	r1, r1
   d99be:	484e      	ldr	r0, [pc, #312]	; (d9af8 <_Z9conditionii+0x690>)
   d99c0:	f005 f81e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   d99c4:	f899 0000 	ldrb.w	r0, [r9]
   d99c8:	f898 3000 	ldrb.w	r3, [r8]
   d99cc:	783a      	ldrb	r2, [r7, #0]
   d99ce:	9000      	str	r0, [sp, #0]
   d99d0:	f105 0125 	add.w	r1, r5, #37	; 0x25
   d99d4:	b289      	uxth	r1, r1
   d99d6:	4848      	ldr	r0, [pc, #288]	; (d9af8 <_Z9conditionii+0x690>)
   d99d8:	f005 f812 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);
   d99dc:	f899 0000 	ldrb.w	r0, [r9]
   d99e0:	f898 3000 	ldrb.w	r3, [r8]
   d99e4:	783a      	ldrb	r2, [r7, #0]
   d99e6:	9000      	str	r0, [sp, #0]
   d99e8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   d99ec:	b289      	uxth	r1, r1
   d99ee:	4842      	ldr	r0, [pc, #264]	; (d9af8 <_Z9conditionii+0x690>)
   d99f0:	f005 f806 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   d99f4:	f899 0000 	ldrb.w	r0, [r9]
   d99f8:	f898 3000 	ldrb.w	r3, [r8]
   d99fc:	783a      	ldrb	r2, [r7, #0]
   d99fe:	9000      	str	r0, [sp, #0]
   d9a00:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   d9a04:	b289      	uxth	r1, r1
   d9a06:	483c      	ldr	r0, [pc, #240]	; (d9af8 <_Z9conditionii+0x690>)
   d9a08:	f004 fffa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   d9a0c:	f899 0000 	ldrb.w	r0, [r9]
   d9a10:	f898 3000 	ldrb.w	r3, [r8]
   d9a14:	783a      	ldrb	r2, [r7, #0]
   d9a16:	9000      	str	r0, [sp, #0]
   d9a18:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   d9a1c:	b289      	uxth	r1, r1
   d9a1e:	4836      	ldr	r0, [pc, #216]	; (d9af8 <_Z9conditionii+0x690>)
   d9a20:	f004 ffee 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
   d9a24:	f899 0000 	ldrb.w	r0, [r9]
   d9a28:	f898 3000 	ldrb.w	r3, [r8]
   d9a2c:	783a      	ldrb	r2, [r7, #0]
   d9a2e:	9000      	str	r0, [sp, #0]
   d9a30:	f105 0134 	add.w	r1, r5, #52	; 0x34
   d9a34:	b289      	uxth	r1, r1
   d9a36:	4830      	ldr	r0, [pc, #192]	; (d9af8 <_Z9conditionii+0x690>)
   d9a38:	f004 ffe2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
   d9a3c:	f899 0000 	ldrb.w	r0, [r9]
   d9a40:	f898 3000 	ldrb.w	r3, [r8]
   d9a44:	783a      	ldrb	r2, [r7, #0]
   d9a46:	9000      	str	r0, [sp, #0]
   d9a48:	f105 0133 	add.w	r1, r5, #51	; 0x33
   d9a4c:	b289      	uxth	r1, r1
   d9a4e:	482a      	ldr	r0, [pc, #168]	; (d9af8 <_Z9conditionii+0x690>)
   d9a50:	f004 ffd6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
   d9a54:	f899 0000 	ldrb.w	r0, [r9]
   d9a58:	f898 3000 	ldrb.w	r3, [r8]
   d9a5c:	783a      	ldrb	r2, [r7, #0]
   d9a5e:	9000      	str	r0, [sp, #0]
   d9a60:	f105 0135 	add.w	r1, r5, #53	; 0x35
   d9a64:	b289      	uxth	r1, r1
   d9a66:	4824      	ldr	r0, [pc, #144]	; (d9af8 <_Z9conditionii+0x690>)
   d9a68:	f004 ffca 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
   d9a6c:	f899 0000 	ldrb.w	r0, [r9]
   d9a70:	f898 3000 	ldrb.w	r3, [r8]
   d9a74:	783a      	ldrb	r2, [r7, #0]
   d9a76:	9000      	str	r0, [sp, #0]
   d9a78:	f105 013b 	add.w	r1, r5, #59	; 0x3b
   d9a7c:	b289      	uxth	r1, r1
   d9a7e:	481e      	ldr	r0, [pc, #120]	; (d9af8 <_Z9conditionii+0x690>)
   d9a80:	f004 ffbe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   d9a84:	f1bb 0f1d 	cmp.w	fp, #29
   d9a88:	f200 80ec 	bhi.w	d9c64 <_Z9conditionii+0x7fc>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9a8c:	4f1c      	ldr	r7, [pc, #112]	; (d9b00 <_Z9conditionii+0x698>)
   d9a8e:	f8df 9074 	ldr.w	r9, [pc, #116]	; d9b04 <_Z9conditionii+0x69c>
   d9a92:	f8df 8068 	ldr.w	r8, [pc, #104]	; d9afc <_Z9conditionii+0x694>
   d9a96:	7838      	ldrb	r0, [r7, #0]
   d9a98:	f899 3000 	ldrb.w	r3, [r9]
   d9a9c:	f898 2000 	ldrb.w	r2, [r8]
   d9aa0:	9000      	str	r0, [sp, #0]
   d9aa2:	b2a5      	uxth	r5, r4
   d9aa4:	1c69      	adds	r1, r5, #1
   d9aa6:	b289      	uxth	r1, r1
   d9aa8:	4813      	ldr	r0, [pc, #76]	; (d9af8 <_Z9conditionii+0x690>)
   d9aaa:	f004 ffa9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9aae:	7838      	ldrb	r0, [r7, #0]
   d9ab0:	f899 3000 	ldrb.w	r3, [r9]
   d9ab4:	f898 2000 	ldrb.w	r2, [r8]
   d9ab8:	9000      	str	r0, [sp, #0]
   d9aba:	f105 011f 	add.w	r1, r5, #31
   d9abe:	b289      	uxth	r1, r1
   d9ac0:	480d      	ldr	r0, [pc, #52]	; (d9af8 <_Z9conditionii+0x690>)
   d9ac2:	f004 ff9d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9ac6:	7838      	ldrb	r0, [r7, #0]
   d9ac8:	f899 3000 	ldrb.w	r3, [r9]
   d9acc:	f898 2000 	ldrb.w	r2, [r8]
   d9ad0:	9000      	str	r0, [sp, #0]
   d9ad2:	f105 010f 	add.w	r1, r5, #15
   d9ad6:	b289      	uxth	r1, r1
   d9ad8:	e016      	b.n	d9b08 <_Z9conditionii+0x6a0>
   d9ada:	bf00      	nop
   d9adc:	f3af 8000 	nop.w
   d9ae0:	cccccccd 	.word	0xcccccccd
   d9ae4:	3ff4cccc 	.word	0x3ff4cccc
   d9ae8:	cccccccd 	.word	0xcccccccd
   d9aec:	3ffccccc 	.word	0x3ffccccc
   d9af0:	66666666 	.word	0x66666666
   d9af4:	3ffe6666 	.word	0x3ffe6666
   d9af8:	2003e31c 	.word	0x2003e31c
   d9afc:	2003e354 	.word	0x2003e354
   d9b00:	2003e35c 	.word	0x2003e35c
   d9b04:	2003e314 	.word	0x2003e314
   d9b08:	4855      	ldr	r0, [pc, #340]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b0a:	f004 ff79 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9b0e:	7838      	ldrb	r0, [r7, #0]
   d9b10:	f899 3000 	ldrb.w	r3, [r9]
   d9b14:	f898 2000 	ldrb.w	r2, [r8]
   d9b18:	9000      	str	r0, [sp, #0]
   d9b1a:	f105 010e 	add.w	r1, r5, #14
   d9b1e:	b289      	uxth	r1, r1
   d9b20:	484f      	ldr	r0, [pc, #316]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b22:	f004 ff6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9b26:	7838      	ldrb	r0, [r7, #0]
   d9b28:	f899 3000 	ldrb.w	r3, [r9]
   d9b2c:	f898 2000 	ldrb.w	r2, [r8]
   d9b30:	9000      	str	r0, [sp, #0]
   d9b32:	f105 010d 	add.w	r1, r5, #13
   d9b36:	b289      	uxth	r1, r1
   d9b38:	4849      	ldr	r0, [pc, #292]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b3a:	f004 ff61 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9b3e:	7838      	ldrb	r0, [r7, #0]
   d9b40:	f899 3000 	ldrb.w	r3, [r9]
   d9b44:	f898 2000 	ldrb.w	r2, [r8]
   d9b48:	9000      	str	r0, [sp, #0]
   d9b4a:	f105 0110 	add.w	r1, r5, #16
   d9b4e:	b289      	uxth	r1, r1
   d9b50:	4843      	ldr	r0, [pc, #268]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b52:	f004 ff55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9b56:	7838      	ldrb	r0, [r7, #0]
   d9b58:	f899 3000 	ldrb.w	r3, [r9]
   d9b5c:	f898 2000 	ldrb.w	r2, [r8]
   d9b60:	9000      	str	r0, [sp, #0]
   d9b62:	f105 0111 	add.w	r1, r5, #17
   d9b66:	b289      	uxth	r1, r1
   d9b68:	483d      	ldr	r0, [pc, #244]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b6a:	f004 ff49 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9b6e:	7838      	ldrb	r0, [r7, #0]
   d9b70:	f899 3000 	ldrb.w	r3, [r9]
   d9b74:	f898 2000 	ldrb.w	r2, [r8]
   d9b78:	9000      	str	r0, [sp, #0]
   d9b7a:	f105 0112 	add.w	r1, r5, #18
   d9b7e:	b289      	uxth	r1, r1
   d9b80:	4837      	ldr	r0, [pc, #220]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b82:	f004 ff3d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9b86:	7838      	ldrb	r0, [r7, #0]
   d9b88:	f899 3000 	ldrb.w	r3, [r9]
   d9b8c:	f898 2000 	ldrb.w	r2, [r8]
   d9b90:	9000      	str	r0, [sp, #0]
   d9b92:	f105 011e 	add.w	r1, r5, #30
   d9b96:	b289      	uxth	r1, r1
   d9b98:	4831      	ldr	r0, [pc, #196]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9b9a:	f004 ff31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9b9e:	7838      	ldrb	r0, [r7, #0]
   d9ba0:	f899 3000 	ldrb.w	r3, [r9]
   d9ba4:	f898 2000 	ldrb.w	r2, [r8]
   d9ba8:	9000      	str	r0, [sp, #0]
   d9baa:	f105 011d 	add.w	r1, r5, #29
   d9bae:	b289      	uxth	r1, r1
   d9bb0:	482b      	ldr	r0, [pc, #172]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9bb2:	f004 ff25 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9bb6:	7838      	ldrb	r0, [r7, #0]
   d9bb8:	f899 3000 	ldrb.w	r3, [r9]
   d9bbc:	f898 2000 	ldrb.w	r2, [r8]
   d9bc0:	9000      	str	r0, [sp, #0]
   d9bc2:	f105 0120 	add.w	r1, r5, #32
   d9bc6:	b289      	uxth	r1, r1
   d9bc8:	4825      	ldr	r0, [pc, #148]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9bca:	f004 ff19 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9bce:	7838      	ldrb	r0, [r7, #0]
   d9bd0:	f899 3000 	ldrb.w	r3, [r9]
   d9bd4:	f898 2000 	ldrb.w	r2, [r8]
   d9bd8:	9000      	str	r0, [sp, #0]
   d9bda:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9bde:	b289      	uxth	r1, r1
   d9be0:	481f      	ldr	r0, [pc, #124]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9be2:	f004 ff0d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9be6:	7838      	ldrb	r0, [r7, #0]
   d9be8:	f899 3000 	ldrb.w	r3, [r9]
   d9bec:	f898 2000 	ldrb.w	r2, [r8]
   d9bf0:	9000      	str	r0, [sp, #0]
   d9bf2:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9bf6:	b289      	uxth	r1, r1
   d9bf8:	4819      	ldr	r0, [pc, #100]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9bfa:	f004 ff01 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9bfe:	7838      	ldrb	r0, [r7, #0]
   d9c00:	f899 3000 	ldrb.w	r3, [r9]
   d9c04:	f898 2000 	ldrb.w	r2, [r8]
   d9c08:	9000      	str	r0, [sp, #0]
   d9c0a:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9c0e:	b289      	uxth	r1, r1
   d9c10:	4813      	ldr	r0, [pc, #76]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9c12:	f004 fef5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9c16:	7838      	ldrb	r0, [r7, #0]
   d9c18:	f899 3000 	ldrb.w	r3, [r9]
   d9c1c:	f898 2000 	ldrb.w	r2, [r8]
   d9c20:	9000      	str	r0, [sp, #0]
   d9c22:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9c26:	b289      	uxth	r1, r1
   d9c28:	480d      	ldr	r0, [pc, #52]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9c2a:	f004 fee9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9c2e:	7838      	ldrb	r0, [r7, #0]
   d9c30:	f899 3000 	ldrb.w	r3, [r9]
   d9c34:	f898 2000 	ldrb.w	r2, [r8]
   d9c38:	9000      	str	r0, [sp, #0]
   d9c3a:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9c3e:	b289      	uxth	r1, r1
   d9c40:	4807      	ldr	r0, [pc, #28]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9c42:	f004 fedd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9c46:	7838      	ldrb	r0, [r7, #0]
   d9c48:	f899 3000 	ldrb.w	r3, [r9]
   d9c4c:	f898 2000 	ldrb.w	r2, [r8]
   d9c50:	9000      	str	r0, [sp, #0]
   d9c52:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9c56:	b289      	uxth	r1, r1
   d9c58:	4801      	ldr	r0, [pc, #4]	; (d9c60 <_Z9conditionii+0x7f8>)
   d9c5a:	f004 fed1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9c5e:	e0df      	b.n	d9e20 <_Z9conditionii+0x9b8>
   d9c60:	2003e31c 	.word	0x2003e31c
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9c64:	f5b6 7f49 	cmp.w	r6, #804	; 0x324
   d9c68:	f040 80da 	bne.w	d9e20 <_Z9conditionii+0x9b8>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9c6c:	4f68      	ldr	r7, [pc, #416]	; (d9e10 <_Z9conditionii+0x9a8>)
   d9c6e:	f8df 91a8 	ldr.w	r9, [pc, #424]	; d9e18 <_Z9conditionii+0x9b0>
   d9c72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; d9e1c <_Z9conditionii+0x9b4>
   d9c76:	7838      	ldrb	r0, [r7, #0]
   d9c78:	f899 3000 	ldrb.w	r3, [r9]
   d9c7c:	f898 2000 	ldrb.w	r2, [r8]
   d9c80:	9000      	str	r0, [sp, #0]
   d9c82:	b2a5      	uxth	r5, r4
   d9c84:	1c69      	adds	r1, r5, #1
   d9c86:	b289      	uxth	r1, r1
   d9c88:	4862      	ldr	r0, [pc, #392]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9c8a:	f004 feb9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9c8e:	7838      	ldrb	r0, [r7, #0]
   d9c90:	f899 3000 	ldrb.w	r3, [r9]
   d9c94:	f898 2000 	ldrb.w	r2, [r8]
   d9c98:	9000      	str	r0, [sp, #0]
   d9c9a:	f105 011f 	add.w	r1, r5, #31
   d9c9e:	b289      	uxth	r1, r1
   d9ca0:	485c      	ldr	r0, [pc, #368]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9ca2:	f004 fead 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9ca6:	7838      	ldrb	r0, [r7, #0]
   d9ca8:	f899 3000 	ldrb.w	r3, [r9]
   d9cac:	f898 2000 	ldrb.w	r2, [r8]
   d9cb0:	9000      	str	r0, [sp, #0]
   d9cb2:	f105 010f 	add.w	r1, r5, #15
   d9cb6:	b289      	uxth	r1, r1
   d9cb8:	4856      	ldr	r0, [pc, #344]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9cba:	f004 fea1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9cbe:	7838      	ldrb	r0, [r7, #0]
   d9cc0:	f899 3000 	ldrb.w	r3, [r9]
   d9cc4:	f898 2000 	ldrb.w	r2, [r8]
   d9cc8:	9000      	str	r0, [sp, #0]
   d9cca:	f105 010e 	add.w	r1, r5, #14
   d9cce:	b289      	uxth	r1, r1
   d9cd0:	4850      	ldr	r0, [pc, #320]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9cd2:	f004 fe95 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9cd6:	7838      	ldrb	r0, [r7, #0]
   d9cd8:	f899 3000 	ldrb.w	r3, [r9]
   d9cdc:	f898 2000 	ldrb.w	r2, [r8]
   d9ce0:	9000      	str	r0, [sp, #0]
   d9ce2:	f105 010d 	add.w	r1, r5, #13
   d9ce6:	b289      	uxth	r1, r1
   d9ce8:	484a      	ldr	r0, [pc, #296]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9cea:	f004 fe89 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9cee:	7838      	ldrb	r0, [r7, #0]
   d9cf0:	f899 3000 	ldrb.w	r3, [r9]
   d9cf4:	f898 2000 	ldrb.w	r2, [r8]
   d9cf8:	9000      	str	r0, [sp, #0]
   d9cfa:	f105 0110 	add.w	r1, r5, #16
   d9cfe:	b289      	uxth	r1, r1
   d9d00:	4844      	ldr	r0, [pc, #272]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d02:	f004 fe7d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9d06:	7838      	ldrb	r0, [r7, #0]
   d9d08:	f899 3000 	ldrb.w	r3, [r9]
   d9d0c:	f898 2000 	ldrb.w	r2, [r8]
   d9d10:	9000      	str	r0, [sp, #0]
   d9d12:	f105 0111 	add.w	r1, r5, #17
   d9d16:	b289      	uxth	r1, r1
   d9d18:	483e      	ldr	r0, [pc, #248]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d1a:	f004 fe71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9d1e:	7838      	ldrb	r0, [r7, #0]
   d9d20:	f899 3000 	ldrb.w	r3, [r9]
   d9d24:	f898 2000 	ldrb.w	r2, [r8]
   d9d28:	9000      	str	r0, [sp, #0]
   d9d2a:	f105 0112 	add.w	r1, r5, #18
   d9d2e:	b289      	uxth	r1, r1
   d9d30:	4838      	ldr	r0, [pc, #224]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d32:	f004 fe65 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9d36:	7838      	ldrb	r0, [r7, #0]
   d9d38:	f899 3000 	ldrb.w	r3, [r9]
   d9d3c:	f898 2000 	ldrb.w	r2, [r8]
   d9d40:	9000      	str	r0, [sp, #0]
   d9d42:	f105 011e 	add.w	r1, r5, #30
   d9d46:	b289      	uxth	r1, r1
   d9d48:	4832      	ldr	r0, [pc, #200]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d4a:	f004 fe59 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9d4e:	7838      	ldrb	r0, [r7, #0]
   d9d50:	f899 3000 	ldrb.w	r3, [r9]
   d9d54:	f898 2000 	ldrb.w	r2, [r8]
   d9d58:	9000      	str	r0, [sp, #0]
   d9d5a:	f105 011d 	add.w	r1, r5, #29
   d9d5e:	b289      	uxth	r1, r1
   d9d60:	482c      	ldr	r0, [pc, #176]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d62:	f004 fe4d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9d66:	7838      	ldrb	r0, [r7, #0]
   d9d68:	f899 3000 	ldrb.w	r3, [r9]
   d9d6c:	f898 2000 	ldrb.w	r2, [r8]
   d9d70:	9000      	str	r0, [sp, #0]
   d9d72:	f105 0120 	add.w	r1, r5, #32
   d9d76:	b289      	uxth	r1, r1
   d9d78:	4826      	ldr	r0, [pc, #152]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d7a:	f004 fe41 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9d7e:	7838      	ldrb	r0, [r7, #0]
   d9d80:	f899 3000 	ldrb.w	r3, [r9]
   d9d84:	f898 2000 	ldrb.w	r2, [r8]
   d9d88:	9000      	str	r0, [sp, #0]
   d9d8a:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9d8e:	b289      	uxth	r1, r1
   d9d90:	4820      	ldr	r0, [pc, #128]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9d92:	f004 fe35 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9d96:	7838      	ldrb	r0, [r7, #0]
   d9d98:	f899 3000 	ldrb.w	r3, [r9]
   d9d9c:	f898 2000 	ldrb.w	r2, [r8]
   d9da0:	9000      	str	r0, [sp, #0]
   d9da2:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9da6:	b289      	uxth	r1, r1
   d9da8:	481a      	ldr	r0, [pc, #104]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9daa:	f004 fe29 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9dae:	7838      	ldrb	r0, [r7, #0]
   d9db0:	f899 3000 	ldrb.w	r3, [r9]
   d9db4:	f898 2000 	ldrb.w	r2, [r8]
   d9db8:	9000      	str	r0, [sp, #0]
   d9dba:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9dbe:	b289      	uxth	r1, r1
   d9dc0:	4814      	ldr	r0, [pc, #80]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9dc2:	f004 fe1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9dc6:	7838      	ldrb	r0, [r7, #0]
   d9dc8:	f899 3000 	ldrb.w	r3, [r9]
   d9dcc:	f898 2000 	ldrb.w	r2, [r8]
   d9dd0:	9000      	str	r0, [sp, #0]
   d9dd2:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9dd6:	b289      	uxth	r1, r1
   d9dd8:	480e      	ldr	r0, [pc, #56]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9dda:	f004 fe11 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9dde:	7838      	ldrb	r0, [r7, #0]
   d9de0:	f899 3000 	ldrb.w	r3, [r9]
   d9de4:	f898 2000 	ldrb.w	r2, [r8]
   d9de8:	9000      	str	r0, [sp, #0]
   d9dea:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9dee:	b289      	uxth	r1, r1
   d9df0:	4808      	ldr	r0, [pc, #32]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9df2:	f004 fe05 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9df6:	7838      	ldrb	r0, [r7, #0]
   d9df8:	f899 3000 	ldrb.w	r3, [r9]
   d9dfc:	f898 2000 	ldrb.w	r2, [r8]
   d9e00:	9000      	str	r0, [sp, #0]
   d9e02:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9e06:	b289      	uxth	r1, r1
   d9e08:	4802      	ldr	r0, [pc, #8]	; (d9e14 <_Z9conditionii+0x9ac>)
   d9e0a:	f004 fdf9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   d9e0e:	e011      	b.n	d9e34 <_Z9conditionii+0x9cc>
   d9e10:	2003e35c 	.word	0x2003e35c
   d9e14:	2003e31c 	.word	0x2003e31c
   d9e18:	2003e314 	.word	0x2003e314
   d9e1c:	2003e354 	.word	0x2003e354
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))                       //Cloudy or Thunderstorm (base)
   d9e20:	f1a6 03c8 	sub.w	r3, r6, #200	; 0xc8
   d9e24:	2b20      	cmp	r3, #32
   d9e26:	f67f af21 	bls.w	d9c6c <_Z9conditionii+0x804>
   d9e2a:	f5a6 7396 	sub.w	r3, r6, #300	; 0x12c
   d9e2e:	2be7      	cmp	r3, #231	; 0xe7
   d9e30:	f67f af1c 	bls.w	d9c6c <_Z9conditionii+0x804>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
        }
        if(cnum == 701 || cnum == 761)                                      //Mist
   d9e34:	f240 23bd 	movw	r3, #701	; 0x2bd
   d9e38:	429e      	cmp	r6, r3
   d9e3a:	d004      	beq.n	d9e46 <_Z9conditionii+0x9de>
   d9e3c:	f240 23f9 	movw	r3, #761	; 0x2f9
   d9e40:	429e      	cmp	r6, r3
   d9e42:	f040 87bd 	bne.w	dadc0 <_Z9conditionii+0x1958>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   d9e46:	4fab      	ldr	r7, [pc, #684]	; (da0f4 <_Z9conditionii+0xc8c>)
   d9e48:	f8df 92b0 	ldr.w	r9, [pc, #688]	; da0fc <_Z9conditionii+0xc94>
   d9e4c:	f8df 82b0 	ldr.w	r8, [pc, #688]	; da100 <_Z9conditionii+0xc98>
   d9e50:	7838      	ldrb	r0, [r7, #0]
   d9e52:	f899 3000 	ldrb.w	r3, [r9]
   d9e56:	f898 2000 	ldrb.w	r2, [r8]
   d9e5a:	9000      	str	r0, [sp, #0]
   d9e5c:	b2a5      	uxth	r5, r4
   d9e5e:	1c69      	adds	r1, r5, #1
   d9e60:	b289      	uxth	r1, r1
   d9e62:	48a5      	ldr	r0, [pc, #660]	; (da0f8 <_Z9conditionii+0xc90>)
   d9e64:	f004 fdcc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   d9e68:	7838      	ldrb	r0, [r7, #0]
   d9e6a:	f899 3000 	ldrb.w	r3, [r9]
   d9e6e:	f898 2000 	ldrb.w	r2, [r8]
   d9e72:	9000      	str	r0, [sp, #0]
   d9e74:	f105 011f 	add.w	r1, r5, #31
   d9e78:	b289      	uxth	r1, r1
   d9e7a:	489f      	ldr	r0, [pc, #636]	; (da0f8 <_Z9conditionii+0xc90>)
   d9e7c:	f004 fdc0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   d9e80:	7838      	ldrb	r0, [r7, #0]
   d9e82:	f899 3000 	ldrb.w	r3, [r9]
   d9e86:	f898 2000 	ldrb.w	r2, [r8]
   d9e8a:	9000      	str	r0, [sp, #0]
   d9e8c:	f105 010f 	add.w	r1, r5, #15
   d9e90:	b289      	uxth	r1, r1
   d9e92:	4899      	ldr	r0, [pc, #612]	; (da0f8 <_Z9conditionii+0xc90>)
   d9e94:	f004 fdb4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   d9e98:	7838      	ldrb	r0, [r7, #0]
   d9e9a:	f899 3000 	ldrb.w	r3, [r9]
   d9e9e:	f898 2000 	ldrb.w	r2, [r8]
   d9ea2:	9000      	str	r0, [sp, #0]
   d9ea4:	f105 010e 	add.w	r1, r5, #14
   d9ea8:	b289      	uxth	r1, r1
   d9eaa:	4893      	ldr	r0, [pc, #588]	; (da0f8 <_Z9conditionii+0xc90>)
   d9eac:	f004 fda8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   d9eb0:	7838      	ldrb	r0, [r7, #0]
   d9eb2:	f899 3000 	ldrb.w	r3, [r9]
   d9eb6:	f898 2000 	ldrb.w	r2, [r8]
   d9eba:	9000      	str	r0, [sp, #0]
   d9ebc:	f105 010d 	add.w	r1, r5, #13
   d9ec0:	b289      	uxth	r1, r1
   d9ec2:	488d      	ldr	r0, [pc, #564]	; (da0f8 <_Z9conditionii+0xc90>)
   d9ec4:	f004 fd9c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   d9ec8:	7838      	ldrb	r0, [r7, #0]
   d9eca:	f899 3000 	ldrb.w	r3, [r9]
   d9ece:	f898 2000 	ldrb.w	r2, [r8]
   d9ed2:	9000      	str	r0, [sp, #0]
   d9ed4:	f105 0110 	add.w	r1, r5, #16
   d9ed8:	b289      	uxth	r1, r1
   d9eda:	4887      	ldr	r0, [pc, #540]	; (da0f8 <_Z9conditionii+0xc90>)
   d9edc:	f004 fd90 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   d9ee0:	7838      	ldrb	r0, [r7, #0]
   d9ee2:	f899 3000 	ldrb.w	r3, [r9]
   d9ee6:	f898 2000 	ldrb.w	r2, [r8]
   d9eea:	9000      	str	r0, [sp, #0]
   d9eec:	f105 0111 	add.w	r1, r5, #17
   d9ef0:	b289      	uxth	r1, r1
   d9ef2:	4881      	ldr	r0, [pc, #516]	; (da0f8 <_Z9conditionii+0xc90>)
   d9ef4:	f004 fd84 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   d9ef8:	7838      	ldrb	r0, [r7, #0]
   d9efa:	f899 3000 	ldrb.w	r3, [r9]
   d9efe:	f898 2000 	ldrb.w	r2, [r8]
   d9f02:	9000      	str	r0, [sp, #0]
   d9f04:	f105 0112 	add.w	r1, r5, #18
   d9f08:	b289      	uxth	r1, r1
   d9f0a:	487b      	ldr	r0, [pc, #492]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f0c:	f004 fd78 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   d9f10:	7838      	ldrb	r0, [r7, #0]
   d9f12:	f899 3000 	ldrb.w	r3, [r9]
   d9f16:	f898 2000 	ldrb.w	r2, [r8]
   d9f1a:	9000      	str	r0, [sp, #0]
   d9f1c:	f105 011e 	add.w	r1, r5, #30
   d9f20:	b289      	uxth	r1, r1
   d9f22:	4875      	ldr	r0, [pc, #468]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f24:	f004 fd6c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   d9f28:	7838      	ldrb	r0, [r7, #0]
   d9f2a:	f899 3000 	ldrb.w	r3, [r9]
   d9f2e:	f898 2000 	ldrb.w	r2, [r8]
   d9f32:	9000      	str	r0, [sp, #0]
   d9f34:	f105 011d 	add.w	r1, r5, #29
   d9f38:	b289      	uxth	r1, r1
   d9f3a:	486f      	ldr	r0, [pc, #444]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f3c:	f004 fd60 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   d9f40:	7838      	ldrb	r0, [r7, #0]
   d9f42:	f899 3000 	ldrb.w	r3, [r9]
   d9f46:	f898 2000 	ldrb.w	r2, [r8]
   d9f4a:	9000      	str	r0, [sp, #0]
   d9f4c:	f105 0120 	add.w	r1, r5, #32
   d9f50:	b289      	uxth	r1, r1
   d9f52:	4869      	ldr	r0, [pc, #420]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f54:	f004 fd54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   d9f58:	7838      	ldrb	r0, [r7, #0]
   d9f5a:	f899 3000 	ldrb.w	r3, [r9]
   d9f5e:	f898 2000 	ldrb.w	r2, [r8]
   d9f62:	9000      	str	r0, [sp, #0]
   d9f64:	f105 0121 	add.w	r1, r5, #33	; 0x21
   d9f68:	b289      	uxth	r1, r1
   d9f6a:	4863      	ldr	r0, [pc, #396]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f6c:	f004 fd48 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   d9f70:	7838      	ldrb	r0, [r7, #0]
   d9f72:	f899 3000 	ldrb.w	r3, [r9]
   d9f76:	f898 2000 	ldrb.w	r2, [r8]
   d9f7a:	9000      	str	r0, [sp, #0]
   d9f7c:	f105 0122 	add.w	r1, r5, #34	; 0x22
   d9f80:	b289      	uxth	r1, r1
   d9f82:	485d      	ldr	r0, [pc, #372]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f84:	f004 fd3c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   d9f88:	7838      	ldrb	r0, [r7, #0]
   d9f8a:	f899 3000 	ldrb.w	r3, [r9]
   d9f8e:	f898 2000 	ldrb.w	r2, [r8]
   d9f92:	9000      	str	r0, [sp, #0]
   d9f94:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   d9f98:	b289      	uxth	r1, r1
   d9f9a:	4857      	ldr	r0, [pc, #348]	; (da0f8 <_Z9conditionii+0xc90>)
   d9f9c:	f004 fd30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   d9fa0:	7838      	ldrb	r0, [r7, #0]
   d9fa2:	f899 3000 	ldrb.w	r3, [r9]
   d9fa6:	f898 2000 	ldrb.w	r2, [r8]
   d9faa:	9000      	str	r0, [sp, #0]
   d9fac:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   d9fb0:	b289      	uxth	r1, r1
   d9fb2:	4851      	ldr	r0, [pc, #324]	; (da0f8 <_Z9conditionii+0xc90>)
   d9fb4:	f004 fd24 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   d9fb8:	7838      	ldrb	r0, [r7, #0]
   d9fba:	f899 3000 	ldrb.w	r3, [r9]
   d9fbe:	f898 2000 	ldrb.w	r2, [r8]
   d9fc2:	9000      	str	r0, [sp, #0]
   d9fc4:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   d9fc8:	b289      	uxth	r1, r1
   d9fca:	484b      	ldr	r0, [pc, #300]	; (da0f8 <_Z9conditionii+0xc90>)
   d9fcc:	f004 fd18 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9fd0:	7838      	ldrb	r0, [r7, #0]
   d9fd2:	f899 3000 	ldrb.w	r3, [r9]
   d9fd6:	f898 2000 	ldrb.w	r2, [r8]
   d9fda:	9000      	str	r0, [sp, #0]
   d9fdc:	f105 0131 	add.w	r1, r5, #49	; 0x31
   d9fe0:	b289      	uxth	r1, r1
   d9fe2:	4845      	ldr	r0, [pc, #276]	; (da0f8 <_Z9conditionii+0xc90>)
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   d9fe4:	f04f 0a02 	mov.w	sl, #2
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   d9fe8:	f004 fd0a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   d9fec:	6838      	ldr	r0, [r7, #0]
   d9fee:	fb90 f0fa 	sdiv	r0, r0, sl
   d9ff2:	f105 010b 	add.w	r1, r5, #11
   d9ff6:	b2c0      	uxtb	r0, r0
   d9ff8:	f8d9 3000 	ldr.w	r3, [r9]
   d9ffc:	f8d8 2000 	ldr.w	r2, [r8]
   da000:	fb93 f3fa 	sdiv	r3, r3, sl
   da004:	fb92 f2fa 	sdiv	r2, r2, sl
   da008:	9000      	str	r0, [sp, #0]
   da00a:	b2db      	uxtb	r3, r3
   da00c:	b2d2      	uxtb	r2, r2
   da00e:	b289      	uxth	r1, r1
   da010:	4839      	ldr	r0, [pc, #228]	; (da0f8 <_Z9conditionii+0xc90>)
   da012:	f004 fcf5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/2,gclock/2,bclock/2);
   da016:	6838      	ldr	r0, [r7, #0]
   da018:	fb90 f0fa 	sdiv	r0, r0, sl
   da01c:	f105 0114 	add.w	r1, r5, #20
   da020:	b2c0      	uxtb	r0, r0
   da022:	f8d9 3000 	ldr.w	r3, [r9]
   da026:	f8d8 2000 	ldr.w	r2, [r8]
   da02a:	fb93 f3fa 	sdiv	r3, r3, sl
   da02e:	fb92 f2fa 	sdiv	r2, r2, sl
   da032:	9000      	str	r0, [sp, #0]
   da034:	b2db      	uxtb	r3, r3
   da036:	b2d2      	uxtb	r2, r2
   da038:	b289      	uxth	r1, r1
   da03a:	482f      	ldr	r0, [pc, #188]	; (da0f8 <_Z9conditionii+0xc90>)
   da03c:	f004 fce0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/2,gclock/2,bclock/2);
   da040:	6838      	ldr	r0, [r7, #0]
   da042:	fb90 f0fa 	sdiv	r0, r0, sl
   da046:	f105 011b 	add.w	r1, r5, #27
   da04a:	b2c0      	uxtb	r0, r0
   da04c:	f8d9 3000 	ldr.w	r3, [r9]
   da050:	f8d8 2000 	ldr.w	r2, [r8]
   da054:	fb93 f3fa 	sdiv	r3, r3, sl
   da058:	fb92 f2fa 	sdiv	r2, r2, sl
   da05c:	9000      	str	r0, [sp, #0]
   da05e:	b2db      	uxtb	r3, r3
   da060:	b2d2      	uxtb	r2, r2
   da062:	b289      	uxth	r1, r1
   da064:	4824      	ldr	r0, [pc, #144]	; (da0f8 <_Z9conditionii+0xc90>)
   da066:	f004 fccb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/2,gclock/2,bclock/2);
   da06a:	6838      	ldr	r0, [r7, #0]
   da06c:	fb90 f0fa 	sdiv	r0, r0, sl
   da070:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da074:	b2c0      	uxtb	r0, r0
   da076:	f8d9 3000 	ldr.w	r3, [r9]
   da07a:	f8d8 2000 	ldr.w	r2, [r8]
   da07e:	fb93 f3fa 	sdiv	r3, r3, sl
   da082:	fb92 f2fa 	sdiv	r2, r2, sl
   da086:	9000      	str	r0, [sp, #0]
   da088:	b2db      	uxtb	r3, r3
   da08a:	b2d2      	uxtb	r2, r2
   da08c:	b289      	uxth	r1, r1
   da08e:	481a      	ldr	r0, [pc, #104]	; (da0f8 <_Z9conditionii+0xc90>)
   da090:	f004 fcb6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock/2,gclock/2,bclock/2);
   da094:	6838      	ldr	r0, [r7, #0]
   da096:	fb90 f0fa 	sdiv	r0, r0, sl
   da09a:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da09e:	b2c0      	uxtb	r0, r0
   da0a0:	f8d9 3000 	ldr.w	r3, [r9]
   da0a4:	f8d8 2000 	ldr.w	r2, [r8]
   da0a8:	fb93 f3fa 	sdiv	r3, r3, sl
   da0ac:	fb92 f2fa 	sdiv	r2, r2, sl
   da0b0:	9000      	str	r0, [sp, #0]
   da0b2:	b2db      	uxtb	r3, r3
   da0b4:	b2d2      	uxtb	r2, r2
   da0b6:	b289      	uxth	r1, r1
   da0b8:	480f      	ldr	r0, [pc, #60]	; (da0f8 <_Z9conditionii+0xc90>)
   da0ba:	f004 fca1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock/3,gclock/3,bclock/3);
   da0be:	f04f 0a03 	mov.w	sl, #3
   da0c2:	6838      	ldr	r0, [r7, #0]
   da0c4:	fb90 f0fa 	sdiv	r0, r0, sl
   da0c8:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da0cc:	b2c0      	uxtb	r0, r0
   da0ce:	f8d9 3000 	ldr.w	r3, [r9]
   da0d2:	f8d8 2000 	ldr.w	r2, [r8]
   da0d6:	fb93 f3fa 	sdiv	r3, r3, sl
   da0da:	9000      	str	r0, [sp, #0]
   da0dc:	b2db      	uxtb	r3, r3
   da0de:	fb92 f2fa 	sdiv	r2, r2, sl
   da0e2:	b289      	uxth	r1, r1
   da0e4:	b2d2      	uxtb	r2, r2
   da0e6:	4804      	ldr	r0, [pc, #16]	; (da0f8 <_Z9conditionii+0xc90>)
   da0e8:	f004 fc8a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
   da0ec:	f8d9 3000 	ldr.w	r3, [r9]
   da0f0:	f000 be3d 	b.w	dad6e <_Z9conditionii+0x1906>
   da0f4:	2003e35c 	.word	0x2003e35c
   da0f8:	2003e31c 	.word	0x2003e31c
   da0fc:	2003e314 	.word	0x2003e314
   da100:	2003e354 	.word	0x2003e354
            
        }
    }
    else
    {
        if(cnum == 800 || cnum == 801 || cnum == 721)
   da104:	2b01      	cmp	r3, #1
   da106:	d904      	bls.n	da112 <_Z9conditionii+0xcaa>
   da108:	f240 23d1 	movw	r3, #721	; 0x2d1
   da10c:	4298      	cmp	r0, r3
   da10e:	f040 81e8 	bne.w	da4e2 <_Z9conditionii+0x107a>
        {
            strip.setPixelColor(inpix+16,rclock,gclock*1.2,bclock/3);
   da112:	f8df a354 	ldr.w	sl, [pc, #852]	; da468 <_Z9conditionii+0x1000>
   da116:	f8df 8354 	ldr.w	r8, [pc, #852]	; da46c <_Z9conditionii+0x1004>
   da11a:	f8da 0000 	ldr.w	r0, [sl]
   da11e:	f8df 9350 	ldr.w	r9, [pc, #848]	; da470 <_Z9conditionii+0x1008>
   da122:	f007 fb4b 	bl	e17bc <__aeabi_i2d>
   da126:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da12a:	4bcd      	ldr	r3, [pc, #820]	; (da460 <_Z9conditionii+0xff8>)
   da12c:	f007 fbac 	bl	e1888 <__aeabi_dmul>
   da130:	f007 fe6c 	bl	e1e0c <__aeabi_d2uiz>
   da134:	b2a5      	uxth	r5, r4
   da136:	2703      	movs	r7, #3
   da138:	f8d8 3000 	ldr.w	r3, [r8]
   da13c:	fb93 f3f7 	sdiv	r3, r3, r7
   da140:	f105 0110 	add.w	r1, r5, #16
   da144:	b2db      	uxtb	r3, r3
   da146:	f899 2000 	ldrb.w	r2, [r9]
   da14a:	9300      	str	r3, [sp, #0]
   da14c:	b289      	uxth	r1, r1
   da14e:	b2c3      	uxtb	r3, r0
   da150:	48c4      	ldr	r0, [pc, #784]	; (da464 <_Z9conditionii+0xffc>)
   da152:	f004 fc55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock*1.2,bclock/3);
   da156:	f8da 0000 	ldr.w	r0, [sl]
   da15a:	f007 fb2f 	bl	e17bc <__aeabi_i2d>
   da15e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da162:	4bbf      	ldr	r3, [pc, #764]	; (da460 <_Z9conditionii+0xff8>)
   da164:	f007 fb90 	bl	e1888 <__aeabi_dmul>
   da168:	f007 fe50 	bl	e1e0c <__aeabi_d2uiz>
   da16c:	f8d8 3000 	ldr.w	r3, [r8]
   da170:	fb93 f3f7 	sdiv	r3, r3, r7
   da174:	f105 011f 	add.w	r1, r5, #31
   da178:	b2db      	uxtb	r3, r3
   da17a:	f899 2000 	ldrb.w	r2, [r9]
   da17e:	9300      	str	r3, [sp, #0]
   da180:	b289      	uxth	r1, r1
   da182:	b2c3      	uxtb	r3, r0
   da184:	48b7      	ldr	r0, [pc, #732]	; (da464 <_Z9conditionii+0xffc>)
   da186:	f004 fc3b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock*1.2,bclock/3);
   da18a:	f8da 0000 	ldr.w	r0, [sl]
   da18e:	f007 fb15 	bl	e17bc <__aeabi_i2d>
   da192:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da196:	4bb2      	ldr	r3, [pc, #712]	; (da460 <_Z9conditionii+0xff8>)
   da198:	f007 fb76 	bl	e1888 <__aeabi_dmul>
   da19c:	f007 fe36 	bl	e1e0c <__aeabi_d2uiz>
   da1a0:	f8d8 3000 	ldr.w	r3, [r8]
   da1a4:	fb93 f3f7 	sdiv	r3, r3, r7
   da1a8:	f105 0120 	add.w	r1, r5, #32
   da1ac:	b2db      	uxtb	r3, r3
   da1ae:	f899 2000 	ldrb.w	r2, [r9]
   da1b2:	9300      	str	r3, [sp, #0]
   da1b4:	b289      	uxth	r1, r1
   da1b6:	b2c3      	uxtb	r3, r0
   da1b8:	48aa      	ldr	r0, [pc, #680]	; (da464 <_Z9conditionii+0xffc>)
   da1ba:	f004 fc21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock*1.2,bclock/3);
   da1be:	f8da 0000 	ldr.w	r0, [sl]
   da1c2:	f007 fafb 	bl	e17bc <__aeabi_i2d>
   da1c6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da1ca:	4ba5      	ldr	r3, [pc, #660]	; (da460 <_Z9conditionii+0xff8>)
   da1cc:	f007 fb5c 	bl	e1888 <__aeabi_dmul>
   da1d0:	f007 fe1c 	bl	e1e0c <__aeabi_d2uiz>
   da1d4:	f8d8 3000 	ldr.w	r3, [r8]
   da1d8:	fb93 f3f7 	sdiv	r3, r3, r7
   da1dc:	f105 011e 	add.w	r1, r5, #30
   da1e0:	b2db      	uxtb	r3, r3
   da1e2:	f899 2000 	ldrb.w	r2, [r9]
   da1e6:	9300      	str	r3, [sp, #0]
   da1e8:	b289      	uxth	r1, r1
   da1ea:	b2c3      	uxtb	r3, r0
   da1ec:	489d      	ldr	r0, [pc, #628]	; (da464 <_Z9conditionii+0xffc>)
   da1ee:	f004 fc07 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock*1.2,bclock/3);
   da1f2:	f8da 0000 	ldr.w	r0, [sl]
   da1f6:	f007 fae1 	bl	e17bc <__aeabi_i2d>
   da1fa:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da1fe:	4b98      	ldr	r3, [pc, #608]	; (da460 <_Z9conditionii+0xff8>)
   da200:	f007 fb42 	bl	e1888 <__aeabi_dmul>
   da204:	f007 fe02 	bl	e1e0c <__aeabi_d2uiz>
   da208:	f8d8 3000 	ldr.w	r3, [r8]
   da20c:	fb93 f3f7 	sdiv	r3, r3, r7
   da210:	f105 0121 	add.w	r1, r5, #33	; 0x21
   da214:	b2db      	uxtb	r3, r3
   da216:	f899 2000 	ldrb.w	r2, [r9]
   da21a:	9300      	str	r3, [sp, #0]
   da21c:	b289      	uxth	r1, r1
   da21e:	b2c3      	uxtb	r3, r0
   da220:	4890      	ldr	r0, [pc, #576]	; (da464 <_Z9conditionii+0xffc>)
   da222:	f004 fbed 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock*1.2,bclock/3);
   da226:	f8da 0000 	ldr.w	r0, [sl]
   da22a:	f007 fac7 	bl	e17bc <__aeabi_i2d>
   da22e:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da232:	4b8b      	ldr	r3, [pc, #556]	; (da460 <_Z9conditionii+0xff8>)
   da234:	f007 fb28 	bl	e1888 <__aeabi_dmul>
   da238:	f007 fde8 	bl	e1e0c <__aeabi_d2uiz>
   da23c:	f8d8 3000 	ldr.w	r3, [r8]
   da240:	fb93 f3f7 	sdiv	r3, r3, r7
   da244:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   da248:	b2db      	uxtb	r3, r3
   da24a:	f899 2000 	ldrb.w	r2, [r9]
   da24e:	9300      	str	r3, [sp, #0]
   da250:	b289      	uxth	r1, r1
   da252:	b2c3      	uxtb	r3, r0
   da254:	4883      	ldr	r0, [pc, #524]	; (da464 <_Z9conditionii+0xffc>)
   da256:	f004 fbd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.2,bclock/3);
   da25a:	f8da 0000 	ldr.w	r0, [sl]
   da25e:	f007 faad 	bl	e17bc <__aeabi_i2d>
   da262:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da266:	4b7e      	ldr	r3, [pc, #504]	; (da460 <_Z9conditionii+0xff8>)
   da268:	f007 fb0e 	bl	e1888 <__aeabi_dmul>
   da26c:	f007 fdce 	bl	e1e0c <__aeabi_d2uiz>
   da270:	f8d8 3000 	ldr.w	r3, [r8]
   da274:	fb93 f3f7 	sdiv	r3, r3, r7
   da278:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da27c:	b2db      	uxtb	r3, r3
   da27e:	f899 2000 	ldrb.w	r2, [r9]
   da282:	9300      	str	r3, [sp, #0]
   da284:	b289      	uxth	r1, r1
   da286:	b2c3      	uxtb	r3, r0
   da288:	4876      	ldr	r0, [pc, #472]	; (da464 <_Z9conditionii+0xffc>)
   da28a:	f004 fbb9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock*1.2,bclock/3);
   da28e:	f8da 0000 	ldr.w	r0, [sl]
   da292:	f007 fa93 	bl	e17bc <__aeabi_i2d>
   da296:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da29a:	4b71      	ldr	r3, [pc, #452]	; (da460 <_Z9conditionii+0xff8>)
   da29c:	f007 faf4 	bl	e1888 <__aeabi_dmul>
   da2a0:	f007 fdb4 	bl	e1e0c <__aeabi_d2uiz>
   da2a4:	f8d8 3000 	ldr.w	r3, [r8]
   da2a8:	fb93 f3f7 	sdiv	r3, r3, r7
   da2ac:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   da2b0:	b2db      	uxtb	r3, r3
   da2b2:	f899 2000 	ldrb.w	r2, [r9]
   da2b6:	9300      	str	r3, [sp, #0]
   da2b8:	b289      	uxth	r1, r1
   da2ba:	b2c3      	uxtb	r3, r0
   da2bc:	4869      	ldr	r0, [pc, #420]	; (da464 <_Z9conditionii+0xffc>)
   da2be:	f004 fb9f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock*1.2,bclock/3);
   da2c2:	f8da 0000 	ldr.w	r0, [sl]
   da2c6:	f007 fa79 	bl	e17bc <__aeabi_i2d>
   da2ca:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da2ce:	4b64      	ldr	r3, [pc, #400]	; (da460 <_Z9conditionii+0xff8>)
   da2d0:	f007 fada 	bl	e1888 <__aeabi_dmul>
   da2d4:	f007 fd9a 	bl	e1e0c <__aeabi_d2uiz>
   da2d8:	f8d8 3000 	ldr.w	r3, [r8]
   da2dc:	fb93 f3f7 	sdiv	r3, r3, r7
   da2e0:	f105 0123 	add.w	r1, r5, #35	; 0x23
   da2e4:	b2db      	uxtb	r3, r3
   da2e6:	f899 2000 	ldrb.w	r2, [r9]
   da2ea:	9300      	str	r3, [sp, #0]
   da2ec:	b289      	uxth	r1, r1
   da2ee:	b2c3      	uxtb	r3, r0
   da2f0:	485c      	ldr	r0, [pc, #368]	; (da464 <_Z9conditionii+0xffc>)
   da2f2:	f004 fb85 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock*1.2,bclock/3);
   da2f6:	f8da 0000 	ldr.w	r0, [sl]
   da2fa:	f007 fa5f 	bl	e17bc <__aeabi_i2d>
   da2fe:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da302:	4b57      	ldr	r3, [pc, #348]	; (da460 <_Z9conditionii+0xff8>)
   da304:	f007 fac0 	bl	e1888 <__aeabi_dmul>
   da308:	f007 fd80 	bl	e1e0c <__aeabi_d2uiz>
   da30c:	f8d8 3000 	ldr.w	r3, [r8]
   da310:	fb93 f3f7 	sdiv	r3, r3, r7
   da314:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   da318:	b2db      	uxtb	r3, r3
   da31a:	f899 2000 	ldrb.w	r2, [r9]
   da31e:	9300      	str	r3, [sp, #0]
   da320:	b289      	uxth	r1, r1
   da322:	b2c3      	uxtb	r3, r0
   da324:	484f      	ldr	r0, [pc, #316]	; (da464 <_Z9conditionii+0xffc>)
   da326:	f004 fb6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock*1.2,bclock/3);
   da32a:	f8da 0000 	ldr.w	r0, [sl]
   da32e:	f007 fa45 	bl	e17bc <__aeabi_i2d>
   da332:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da336:	4b4a      	ldr	r3, [pc, #296]	; (da460 <_Z9conditionii+0xff8>)
   da338:	f007 faa6 	bl	e1888 <__aeabi_dmul>
   da33c:	f007 fd66 	bl	e1e0c <__aeabi_d2uiz>
   da340:	f8d8 3000 	ldr.w	r3, [r8]
   da344:	fb93 f3f7 	sdiv	r3, r3, r7
   da348:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da34c:	b2db      	uxtb	r3, r3
   da34e:	f899 2000 	ldrb.w	r2, [r9]
   da352:	9300      	str	r3, [sp, #0]
   da354:	b289      	uxth	r1, r1
   da356:	b2c3      	uxtb	r3, r0
   da358:	4842      	ldr	r0, [pc, #264]	; (da464 <_Z9conditionii+0xffc>)
   da35a:	f004 fb51 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock*1.2,bclock/3);
   da35e:	f8da 0000 	ldr.w	r0, [sl]
   da362:	f007 fa2b 	bl	e17bc <__aeabi_i2d>
   da366:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da36a:	4b3d      	ldr	r3, [pc, #244]	; (da460 <_Z9conditionii+0xff8>)
   da36c:	f007 fa8c 	bl	e1888 <__aeabi_dmul>
   da370:	f007 fd4c 	bl	e1e0c <__aeabi_d2uiz>
   da374:	f8d8 3000 	ldr.w	r3, [r8]
   da378:	fb93 f3f7 	sdiv	r3, r3, r7
   da37c:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da380:	b2db      	uxtb	r3, r3
   da382:	f899 2000 	ldrb.w	r2, [r9]
   da386:	9300      	str	r3, [sp, #0]
   da388:	b289      	uxth	r1, r1
   da38a:	b2c3      	uxtb	r3, r0
   da38c:	4835      	ldr	r0, [pc, #212]	; (da464 <_Z9conditionii+0xffc>)
   da38e:	f004 fb37 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock*1.2,bclock/3);
   da392:	f8da 0000 	ldr.w	r0, [sl]
   da396:	f007 fa11 	bl	e17bc <__aeabi_i2d>
   da39a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da39e:	4b30      	ldr	r3, [pc, #192]	; (da460 <_Z9conditionii+0xff8>)
   da3a0:	f007 fa72 	bl	e1888 <__aeabi_dmul>
   da3a4:	f007 fd32 	bl	e1e0c <__aeabi_d2uiz>
   da3a8:	f8d8 3000 	ldr.w	r3, [r8]
   da3ac:	fb93 f3f7 	sdiv	r3, r3, r7
   da3b0:	f105 011a 	add.w	r1, r5, #26
   da3b4:	b2db      	uxtb	r3, r3
   da3b6:	f899 2000 	ldrb.w	r2, [r9]
   da3ba:	9300      	str	r3, [sp, #0]
   da3bc:	b289      	uxth	r1, r1
   da3be:	b2c3      	uxtb	r3, r0
   da3c0:	4828      	ldr	r0, [pc, #160]	; (da464 <_Z9conditionii+0xffc>)
   da3c2:	f004 fb1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock*1.2,bclock/3);
   da3c6:	f8da 0000 	ldr.w	r0, [sl]
   da3ca:	f007 f9f7 	bl	e17bc <__aeabi_i2d>
   da3ce:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da3d2:	4b23      	ldr	r3, [pc, #140]	; (da460 <_Z9conditionii+0xff8>)
   da3d4:	f007 fa58 	bl	e1888 <__aeabi_dmul>
   da3d8:	f007 fd18 	bl	e1e0c <__aeabi_d2uiz>
   da3dc:	f8d8 3000 	ldr.w	r3, [r8]
   da3e0:	fb93 f3f7 	sdiv	r3, r3, r7
   da3e4:	f105 0125 	add.w	r1, r5, #37	; 0x25
   da3e8:	b2db      	uxtb	r3, r3
   da3ea:	f899 2000 	ldrb.w	r2, [r9]
   da3ee:	9300      	str	r3, [sp, #0]
   da3f0:	b289      	uxth	r1, r1
   da3f2:	b2c3      	uxtb	r3, r0
   da3f4:	481b      	ldr	r0, [pc, #108]	; (da464 <_Z9conditionii+0xffc>)
   da3f6:	f004 fb03 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock*1.2,bclock/3);
   da3fa:	f8da 0000 	ldr.w	r0, [sl]
   da3fe:	f007 f9dd 	bl	e17bc <__aeabi_i2d>
   da402:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da406:	4b16      	ldr	r3, [pc, #88]	; (da460 <_Z9conditionii+0xff8>)
   da408:	f007 fa3e 	bl	e1888 <__aeabi_dmul>
   da40c:	f007 fcfe 	bl	e1e0c <__aeabi_d2uiz>
   da410:	f8d8 3000 	ldr.w	r3, [r8]
   da414:	fb93 f3f7 	sdiv	r3, r3, r7
   da418:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da41c:	b2db      	uxtb	r3, r3
   da41e:	f899 2000 	ldrb.w	r2, [r9]
   da422:	9300      	str	r3, [sp, #0]
   da424:	b289      	uxth	r1, r1
   da426:	b2c3      	uxtb	r3, r0
   da428:	480e      	ldr	r0, [pc, #56]	; (da464 <_Z9conditionii+0xffc>)
   da42a:	f004 fae9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,rclock,gclock*1.2,bclock/3);
   da42e:	f8da 0000 	ldr.w	r0, [sl]
   da432:	f007 f9c3 	bl	e17bc <__aeabi_i2d>
   da436:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da43a:	4b09      	ldr	r3, [pc, #36]	; (da460 <_Z9conditionii+0xff8>)
   da43c:	f007 fa24 	bl	e1888 <__aeabi_dmul>
   da440:	f007 fce4 	bl	e1e0c <__aeabi_d2uiz>
   da444:	f8d8 3000 	ldr.w	r3, [r8]
   da448:	fb93 f3f7 	sdiv	r3, r3, r7
   da44c:	f105 0116 	add.w	r1, r5, #22
   da450:	b2db      	uxtb	r3, r3
   da452:	f899 2000 	ldrb.w	r2, [r9]
   da456:	9300      	str	r3, [sp, #0]
   da458:	b289      	uxth	r1, r1
   da45a:	b2c3      	uxtb	r3, r0
   da45c:	e00a      	b.n	da474 <_Z9conditionii+0x100c>
   da45e:	bf00      	nop
   da460:	3ff33333 	.word	0x3ff33333
   da464:	2003e31c 	.word	0x2003e31c
   da468:	2003e314 	.word	0x2003e314
   da46c:	2003e35c 	.word	0x2003e35c
   da470:	2003e354 	.word	0x2003e354
   da474:	48c3      	ldr	r0, [pc, #780]	; (da784 <_Z9conditionii+0x131c>)
   da476:	f004 fac3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock,gclock*1.2,bclock/3);
   da47a:	f8da 0000 	ldr.w	r0, [sl]
   da47e:	f007 f99d 	bl	e17bc <__aeabi_i2d>
   da482:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da486:	4bc0      	ldr	r3, [pc, #768]	; (da788 <_Z9conditionii+0x1320>)
   da488:	f007 f9fe 	bl	e1888 <__aeabi_dmul>
   da48c:	f007 fcbe 	bl	e1e0c <__aeabi_d2uiz>
   da490:	f8d8 3000 	ldr.w	r3, [r8]
   da494:	fb93 f3f7 	sdiv	r3, r3, r7
   da498:	f105 0119 	add.w	r1, r5, #25
   da49c:	b2db      	uxtb	r3, r3
   da49e:	f899 2000 	ldrb.w	r2, [r9]
   da4a2:	9300      	str	r3, [sp, #0]
   da4a4:	b289      	uxth	r1, r1
   da4a6:	b2c3      	uxtb	r3, r0
   da4a8:	48b6      	ldr	r0, [pc, #728]	; (da784 <_Z9conditionii+0x131c>)
   da4aa:	f004 faa9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock,gclock*1.2,bclock/3);
   da4ae:	f8da 0000 	ldr.w	r0, [sl]
   da4b2:	f007 f983 	bl	e17bc <__aeabi_i2d>
   da4b6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da4ba:	4bb3      	ldr	r3, [pc, #716]	; (da788 <_Z9conditionii+0x1320>)
   da4bc:	f007 f9e4 	bl	e1888 <__aeabi_dmul>
   da4c0:	f007 fca4 	bl	e1e0c <__aeabi_d2uiz>
   da4c4:	f8d8 3000 	ldr.w	r3, [r8]
   da4c8:	fb93 f7f7 	sdiv	r7, r3, r7
   da4cc:	f105 0126 	add.w	r1, r5, #38	; 0x26
   da4d0:	b2ff      	uxtb	r7, r7
   da4d2:	f899 2000 	ldrb.w	r2, [r9]
   da4d6:	9700      	str	r7, [sp, #0]
   da4d8:	b2c3      	uxtb	r3, r0
   da4da:	b289      	uxth	r1, r1
   da4dc:	48a9      	ldr	r0, [pc, #676]	; (da784 <_Z9conditionii+0x131c>)
   da4de:	f004 fa8f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum > 599 && cnum < 630)                                    //Snow
   da4e2:	f1bb 0f1d 	cmp.w	fp, #29
   da4e6:	f200 80d1 	bhi.w	da68c <_Z9conditionii+0x1224>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   da4ea:	4fa8      	ldr	r7, [pc, #672]	; (da78c <_Z9conditionii+0x1324>)
   da4ec:	f8df 92a0 	ldr.w	r9, [pc, #672]	; da790 <_Z9conditionii+0x1328>
   da4f0:	f8df 82a0 	ldr.w	r8, [pc, #672]	; da794 <_Z9conditionii+0x132c>
   da4f4:	7838      	ldrb	r0, [r7, #0]
   da4f6:	f899 3000 	ldrb.w	r3, [r9]
   da4fa:	f898 2000 	ldrb.w	r2, [r8]
   da4fe:	9000      	str	r0, [sp, #0]
   da500:	b2a5      	uxth	r5, r4
   da502:	1c69      	adds	r1, r5, #1
   da504:	b289      	uxth	r1, r1
   da506:	489f      	ldr	r0, [pc, #636]	; (da784 <_Z9conditionii+0x131c>)
   da508:	f004 fa7a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   da50c:	7838      	ldrb	r0, [r7, #0]
   da50e:	f899 3000 	ldrb.w	r3, [r9]
   da512:	f898 2000 	ldrb.w	r2, [r8]
   da516:	9000      	str	r0, [sp, #0]
   da518:	f105 011f 	add.w	r1, r5, #31
   da51c:	b289      	uxth	r1, r1
   da51e:	4899      	ldr	r0, [pc, #612]	; (da784 <_Z9conditionii+0x131c>)
   da520:	f004 fa6e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   da524:	7838      	ldrb	r0, [r7, #0]
   da526:	f899 3000 	ldrb.w	r3, [r9]
   da52a:	f898 2000 	ldrb.w	r2, [r8]
   da52e:	9000      	str	r0, [sp, #0]
   da530:	f105 010f 	add.w	r1, r5, #15
   da534:	b289      	uxth	r1, r1
   da536:	4893      	ldr	r0, [pc, #588]	; (da784 <_Z9conditionii+0x131c>)
   da538:	f004 fa62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   da53c:	7838      	ldrb	r0, [r7, #0]
   da53e:	f899 3000 	ldrb.w	r3, [r9]
   da542:	f898 2000 	ldrb.w	r2, [r8]
   da546:	9000      	str	r0, [sp, #0]
   da548:	f105 010e 	add.w	r1, r5, #14
   da54c:	b289      	uxth	r1, r1
   da54e:	488d      	ldr	r0, [pc, #564]	; (da784 <_Z9conditionii+0x131c>)
   da550:	f004 fa56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   da554:	7838      	ldrb	r0, [r7, #0]
   da556:	f899 3000 	ldrb.w	r3, [r9]
   da55a:	f898 2000 	ldrb.w	r2, [r8]
   da55e:	9000      	str	r0, [sp, #0]
   da560:	f105 010d 	add.w	r1, r5, #13
   da564:	b289      	uxth	r1, r1
   da566:	4887      	ldr	r0, [pc, #540]	; (da784 <_Z9conditionii+0x131c>)
   da568:	f004 fa4a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   da56c:	7838      	ldrb	r0, [r7, #0]
   da56e:	f899 3000 	ldrb.w	r3, [r9]
   da572:	f898 2000 	ldrb.w	r2, [r8]
   da576:	9000      	str	r0, [sp, #0]
   da578:	f105 0110 	add.w	r1, r5, #16
   da57c:	b289      	uxth	r1, r1
   da57e:	4881      	ldr	r0, [pc, #516]	; (da784 <_Z9conditionii+0x131c>)
   da580:	f004 fa3e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   da584:	7838      	ldrb	r0, [r7, #0]
   da586:	f899 3000 	ldrb.w	r3, [r9]
   da58a:	f898 2000 	ldrb.w	r2, [r8]
   da58e:	9000      	str	r0, [sp, #0]
   da590:	f105 0111 	add.w	r1, r5, #17
   da594:	b289      	uxth	r1, r1
   da596:	487b      	ldr	r0, [pc, #492]	; (da784 <_Z9conditionii+0x131c>)
   da598:	f004 fa32 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   da59c:	7838      	ldrb	r0, [r7, #0]
   da59e:	f899 3000 	ldrb.w	r3, [r9]
   da5a2:	f898 2000 	ldrb.w	r2, [r8]
   da5a6:	9000      	str	r0, [sp, #0]
   da5a8:	f105 0112 	add.w	r1, r5, #18
   da5ac:	b289      	uxth	r1, r1
   da5ae:	4875      	ldr	r0, [pc, #468]	; (da784 <_Z9conditionii+0x131c>)
   da5b0:	f004 fa26 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   da5b4:	7838      	ldrb	r0, [r7, #0]
   da5b6:	f899 3000 	ldrb.w	r3, [r9]
   da5ba:	f898 2000 	ldrb.w	r2, [r8]
   da5be:	9000      	str	r0, [sp, #0]
   da5c0:	f105 011e 	add.w	r1, r5, #30
   da5c4:	b289      	uxth	r1, r1
   da5c6:	486f      	ldr	r0, [pc, #444]	; (da784 <_Z9conditionii+0x131c>)
   da5c8:	f004 fa1a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   da5cc:	7838      	ldrb	r0, [r7, #0]
   da5ce:	f899 3000 	ldrb.w	r3, [r9]
   da5d2:	f898 2000 	ldrb.w	r2, [r8]
   da5d6:	9000      	str	r0, [sp, #0]
   da5d8:	f105 011d 	add.w	r1, r5, #29
   da5dc:	b289      	uxth	r1, r1
   da5de:	4869      	ldr	r0, [pc, #420]	; (da784 <_Z9conditionii+0x131c>)
   da5e0:	f004 fa0e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   da5e4:	7838      	ldrb	r0, [r7, #0]
   da5e6:	f899 3000 	ldrb.w	r3, [r9]
   da5ea:	f898 2000 	ldrb.w	r2, [r8]
   da5ee:	9000      	str	r0, [sp, #0]
   da5f0:	f105 0120 	add.w	r1, r5, #32
   da5f4:	b289      	uxth	r1, r1
   da5f6:	4863      	ldr	r0, [pc, #396]	; (da784 <_Z9conditionii+0x131c>)
   da5f8:	f004 fa02 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   da5fc:	7838      	ldrb	r0, [r7, #0]
   da5fe:	f899 3000 	ldrb.w	r3, [r9]
   da602:	f898 2000 	ldrb.w	r2, [r8]
   da606:	9000      	str	r0, [sp, #0]
   da608:	f105 0121 	add.w	r1, r5, #33	; 0x21
   da60c:	b289      	uxth	r1, r1
   da60e:	485d      	ldr	r0, [pc, #372]	; (da784 <_Z9conditionii+0x131c>)
   da610:	f004 f9f6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   da614:	7838      	ldrb	r0, [r7, #0]
   da616:	f899 3000 	ldrb.w	r3, [r9]
   da61a:	f898 2000 	ldrb.w	r2, [r8]
   da61e:	9000      	str	r0, [sp, #0]
   da620:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da624:	b289      	uxth	r1, r1
   da626:	4857      	ldr	r0, [pc, #348]	; (da784 <_Z9conditionii+0x131c>)
   da628:	f004 f9ea 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   da62c:	7838      	ldrb	r0, [r7, #0]
   da62e:	f899 3000 	ldrb.w	r3, [r9]
   da632:	f898 2000 	ldrb.w	r2, [r8]
   da636:	9000      	str	r0, [sp, #0]
   da638:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   da63c:	b289      	uxth	r1, r1
   da63e:	4851      	ldr	r0, [pc, #324]	; (da784 <_Z9conditionii+0x131c>)
   da640:	f004 f9de 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   da644:	7838      	ldrb	r0, [r7, #0]
   da646:	f899 3000 	ldrb.w	r3, [r9]
   da64a:	f898 2000 	ldrb.w	r2, [r8]
   da64e:	9000      	str	r0, [sp, #0]
   da650:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   da654:	b289      	uxth	r1, r1
   da656:	484b      	ldr	r0, [pc, #300]	; (da784 <_Z9conditionii+0x131c>)
   da658:	f004 f9d2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   da65c:	7838      	ldrb	r0, [r7, #0]
   da65e:	f899 3000 	ldrb.w	r3, [r9]
   da662:	f898 2000 	ldrb.w	r2, [r8]
   da666:	9000      	str	r0, [sp, #0]
   da668:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   da66c:	b289      	uxth	r1, r1
   da66e:	4845      	ldr	r0, [pc, #276]	; (da784 <_Z9conditionii+0x131c>)
   da670:	f004 f9c6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   da674:	7838      	ldrb	r0, [r7, #0]
   da676:	f899 3000 	ldrb.w	r3, [r9]
   da67a:	f898 2000 	ldrb.w	r2, [r8]
   da67e:	9000      	str	r0, [sp, #0]
   da680:	f105 0131 	add.w	r1, r5, #49	; 0x31
   da684:	b289      	uxth	r1, r1
   da686:	483f      	ldr	r0, [pc, #252]	; (da784 <_Z9conditionii+0x131c>)
   da688:	f004 f9ba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);*/
        }
        if(cnum == 802 || cnum == 803)
   da68c:	9b03      	ldr	r3, [sp, #12]
   da68e:	2b01      	cmp	r3, #1
   da690:	f200 813c 	bhi.w	da90c <_Z9conditionii+0x14a4>
        {
            strip.setPixelColor(inpix+17,rclock,gclock*1.2,bclock/3);
   da694:	f8df 90f8 	ldr.w	r9, [pc, #248]	; da790 <_Z9conditionii+0x1328>
   da698:	4f3c      	ldr	r7, [pc, #240]	; (da78c <_Z9conditionii+0x1324>)
   da69a:	f8d9 0000 	ldr.w	r0, [r9]
   da69e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; da794 <_Z9conditionii+0x132c>
   da6a2:	f007 f88b 	bl	e17bc <__aeabi_i2d>
   da6a6:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da6aa:	4b37      	ldr	r3, [pc, #220]	; (da788 <_Z9conditionii+0x1320>)
   da6ac:	f007 f8ec 	bl	e1888 <__aeabi_dmul>
   da6b0:	f007 fbac 	bl	e1e0c <__aeabi_d2uiz>
   da6b4:	b2a5      	uxth	r5, r4
   da6b6:	f04f 0a03 	mov.w	sl, #3
   da6ba:	683b      	ldr	r3, [r7, #0]
   da6bc:	fb93 f3fa 	sdiv	r3, r3, sl
   da6c0:	f105 0111 	add.w	r1, r5, #17
   da6c4:	b2db      	uxtb	r3, r3
   da6c6:	f898 2000 	ldrb.w	r2, [r8]
   da6ca:	9300      	str	r3, [sp, #0]
   da6cc:	b289      	uxth	r1, r1
   da6ce:	b2c3      	uxtb	r3, r0
   da6d0:	482c      	ldr	r0, [pc, #176]	; (da784 <_Z9conditionii+0x131c>)
   da6d2:	f004 f995 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+21,rclock,gclock*1.2,bclock/3);
   da6d6:	f8d9 0000 	ldr.w	r0, [r9]
   da6da:	f007 f86f 	bl	e17bc <__aeabi_i2d>
   da6de:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da6e2:	4b29      	ldr	r3, [pc, #164]	; (da788 <_Z9conditionii+0x1320>)
   da6e4:	f007 f8d0 	bl	e1888 <__aeabi_dmul>
   da6e8:	f007 fb90 	bl	e1e0c <__aeabi_d2uiz>
   da6ec:	683b      	ldr	r3, [r7, #0]
   da6ee:	fb93 f3fa 	sdiv	r3, r3, sl
   da6f2:	f105 0115 	add.w	r1, r5, #21
   da6f6:	b2db      	uxtb	r3, r3
   da6f8:	f898 2000 	ldrb.w	r2, [r8]
   da6fc:	9300      	str	r3, [sp, #0]
   da6fe:	b289      	uxth	r1, r1
   da700:	b2c3      	uxtb	r3, r0
   da702:	4820      	ldr	r0, [pc, #128]	; (da784 <_Z9conditionii+0x131c>)
   da704:	f004 f97c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock*1.2,bclock/3);
   da708:	f8d9 0000 	ldr.w	r0, [r9]
   da70c:	f007 f856 	bl	e17bc <__aeabi_i2d>
   da710:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da714:	4b1c      	ldr	r3, [pc, #112]	; (da788 <_Z9conditionii+0x1320>)
   da716:	f007 f8b7 	bl	e1888 <__aeabi_dmul>
   da71a:	f007 fb77 	bl	e1e0c <__aeabi_d2uiz>
   da71e:	683b      	ldr	r3, [r7, #0]
   da720:	fb93 f3fa 	sdiv	r3, r3, sl
   da724:	f105 011e 	add.w	r1, r5, #30
   da728:	b2db      	uxtb	r3, r3
   da72a:	f898 2000 	ldrb.w	r2, [r8]
   da72e:	9300      	str	r3, [sp, #0]
   da730:	b289      	uxth	r1, r1
   da732:	b2c3      	uxtb	r3, r0
   da734:	4813      	ldr	r0, [pc, #76]	; (da784 <_Z9conditionii+0x131c>)
   da736:	f004 f963 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock*1.2,bclock/3);
   da73a:	f8d9 0000 	ldr.w	r0, [r9]
   da73e:	f007 f83d 	bl	e17bc <__aeabi_i2d>
   da742:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da746:	4b10      	ldr	r3, [pc, #64]	; (da788 <_Z9conditionii+0x1320>)
   da748:	f007 f89e 	bl	e1888 <__aeabi_dmul>
   da74c:	f007 fb5e 	bl	e1e0c <__aeabi_d2uiz>
   da750:	683b      	ldr	r3, [r7, #0]
   da752:	fb93 f3fa 	sdiv	r3, r3, sl
   da756:	f105 011d 	add.w	r1, r5, #29
   da75a:	b2db      	uxtb	r3, r3
   da75c:	f898 2000 	ldrb.w	r2, [r8]
   da760:	9300      	str	r3, [sp, #0]
   da762:	b289      	uxth	r1, r1
   da764:	b2c3      	uxtb	r3, r0
   da766:	4807      	ldr	r0, [pc, #28]	; (da784 <_Z9conditionii+0x131c>)
   da768:	f004 f94a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock*1.2,bclock/3);
   da76c:	f8d9 0000 	ldr.w	r0, [r9]
   da770:	f007 f824 	bl	e17bc <__aeabi_i2d>
   da774:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   da778:	4b03      	ldr	r3, [pc, #12]	; (da788 <_Z9conditionii+0x1320>)
   da77a:	f007 f885 	bl	e1888 <__aeabi_dmul>
   da77e:	f007 fb45 	bl	e1e0c <__aeabi_d2uiz>
   da782:	e009      	b.n	da798 <_Z9conditionii+0x1330>
   da784:	2003e31c 	.word	0x2003e31c
   da788:	3ff33333 	.word	0x3ff33333
   da78c:	2003e35c 	.word	0x2003e35c
   da790:	2003e314 	.word	0x2003e314
   da794:	2003e354 	.word	0x2003e354
   da798:	683b      	ldr	r3, [r7, #0]
   da79a:	fb93 f3fa 	sdiv	r3, r3, sl
   da79e:	f105 0122 	add.w	r1, r5, #34	; 0x22
   da7a2:	b2db      	uxtb	r3, r3
   da7a4:	f898 2000 	ldrb.w	r2, [r8]
   da7a8:	9300      	str	r3, [sp, #0]
   da7aa:	b289      	uxth	r1, r1
   da7ac:	b2c3      	uxtb	r3, r0
   da7ae:	4856      	ldr	r0, [pc, #344]	; (da908 <_Z9conditionii+0x14a0>)
   da7b0:	f004 f926 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   da7b4:	7838      	ldrb	r0, [r7, #0]
   da7b6:	f899 3000 	ldrb.w	r3, [r9]
   da7ba:	f898 2000 	ldrb.w	r2, [r8]
   da7be:	9000      	str	r0, [sp, #0]
   da7c0:	f105 0114 	add.w	r1, r5, #20
   da7c4:	b289      	uxth	r1, r1
   da7c6:	4850      	ldr	r0, [pc, #320]	; (da908 <_Z9conditionii+0x14a0>)
   da7c8:	f004 f91a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+26,rclock,gclock,bclock);
   da7cc:	7838      	ldrb	r0, [r7, #0]
   da7ce:	f899 3000 	ldrb.w	r3, [r9]
   da7d2:	f898 2000 	ldrb.w	r2, [r8]
   da7d6:	9000      	str	r0, [sp, #0]
   da7d8:	f105 011a 	add.w	r1, r5, #26
   da7dc:	b289      	uxth	r1, r1
   da7de:	484a      	ldr	r0, [pc, #296]	; (da908 <_Z9conditionii+0x14a0>)
   da7e0:	f004 f90e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   da7e4:	7838      	ldrb	r0, [r7, #0]
   da7e6:	f899 3000 	ldrb.w	r3, [r9]
   da7ea:	f898 2000 	ldrb.w	r2, [r8]
   da7ee:	9000      	str	r0, [sp, #0]
   da7f0:	f105 011b 	add.w	r1, r5, #27
   da7f4:	b289      	uxth	r1, r1
   da7f6:	4844      	ldr	r0, [pc, #272]	; (da908 <_Z9conditionii+0x14a0>)
   da7f8:	f004 f902 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,rclock,gclock,bclock);
   da7fc:	7838      	ldrb	r0, [r7, #0]
   da7fe:	f899 3000 	ldrb.w	r3, [r9]
   da802:	f898 2000 	ldrb.w	r2, [r8]
   da806:	9000      	str	r0, [sp, #0]
   da808:	f105 011c 	add.w	r1, r5, #28
   da80c:	b289      	uxth	r1, r1
   da80e:	483e      	ldr	r0, [pc, #248]	; (da908 <_Z9conditionii+0x14a0>)
   da810:	f004 f8f6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+35,rclock,gclock,bclock);
   da814:	7838      	ldrb	r0, [r7, #0]
   da816:	f899 3000 	ldrb.w	r3, [r9]
   da81a:	f898 2000 	ldrb.w	r2, [r8]
   da81e:	9000      	str	r0, [sp, #0]
   da820:	f105 0123 	add.w	r1, r5, #35	; 0x23
   da824:	b289      	uxth	r1, r1
   da826:	4838      	ldr	r0, [pc, #224]	; (da908 <_Z9conditionii+0x14a0>)
   da828:	f004 f8ea 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   da82c:	7838      	ldrb	r0, [r7, #0]
   da82e:	f899 3000 	ldrb.w	r3, [r9]
   da832:	f898 2000 	ldrb.w	r2, [r8]
   da836:	9000      	str	r0, [sp, #0]
   da838:	f105 0124 	add.w	r1, r5, #36	; 0x24
   da83c:	b289      	uxth	r1, r1
   da83e:	4832      	ldr	r0, [pc, #200]	; (da908 <_Z9conditionii+0x14a0>)
   da840:	f004 f8de 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+37,rclock,gclock,bclock);
   da844:	7838      	ldrb	r0, [r7, #0]
   da846:	f899 3000 	ldrb.w	r3, [r9]
   da84a:	f898 2000 	ldrb.w	r2, [r8]
   da84e:	9000      	str	r0, [sp, #0]
   da850:	f105 0125 	add.w	r1, r5, #37	; 0x25
   da854:	b289      	uxth	r1, r1
   da856:	482c      	ldr	r0, [pc, #176]	; (da908 <_Z9conditionii+0x14a0>)
   da858:	f004 f8d2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+42,rclock,gclock,bclock);
   da85c:	7838      	ldrb	r0, [r7, #0]
   da85e:	f899 3000 	ldrb.w	r3, [r9]
   da862:	f898 2000 	ldrb.w	r2, [r8]
   da866:	9000      	str	r0, [sp, #0]
   da868:	f105 012a 	add.w	r1, r5, #42	; 0x2a
   da86c:	b289      	uxth	r1, r1
   da86e:	4826      	ldr	r0, [pc, #152]	; (da908 <_Z9conditionii+0x14a0>)
   da870:	f004 f8c6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock,gclock,bclock);
   da874:	7838      	ldrb	r0, [r7, #0]
   da876:	f899 3000 	ldrb.w	r3, [r9]
   da87a:	f898 2000 	ldrb.w	r2, [r8]
   da87e:	9000      	str	r0, [sp, #0]
   da880:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   da884:	b289      	uxth	r1, r1
   da886:	4820      	ldr	r0, [pc, #128]	; (da908 <_Z9conditionii+0x14a0>)
   da888:	f004 f8ba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+44,rclock,gclock,bclock);
   da88c:	7838      	ldrb	r0, [r7, #0]
   da88e:	f899 3000 	ldrb.w	r3, [r9]
   da892:	f898 2000 	ldrb.w	r2, [r8]
   da896:	9000      	str	r0, [sp, #0]
   da898:	f105 012c 	add.w	r1, r5, #44	; 0x2c
   da89c:	b289      	uxth	r1, r1
   da89e:	481a      	ldr	r0, [pc, #104]	; (da908 <_Z9conditionii+0x14a0>)
   da8a0:	f004 f8ae 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
   da8a4:	7838      	ldrb	r0, [r7, #0]
   da8a6:	f899 3000 	ldrb.w	r3, [r9]
   da8aa:	f898 2000 	ldrb.w	r2, [r8]
   da8ae:	9000      	str	r0, [sp, #0]
   da8b0:	f105 0134 	add.w	r1, r5, #52	; 0x34
   da8b4:	b289      	uxth	r1, r1
   da8b6:	4814      	ldr	r0, [pc, #80]	; (da908 <_Z9conditionii+0x14a0>)
   da8b8:	f004 f8a2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
   da8bc:	7838      	ldrb	r0, [r7, #0]
   da8be:	f899 3000 	ldrb.w	r3, [r9]
   da8c2:	f898 2000 	ldrb.w	r2, [r8]
   da8c6:	9000      	str	r0, [sp, #0]
   da8c8:	f105 0133 	add.w	r1, r5, #51	; 0x33
   da8cc:	b289      	uxth	r1, r1
   da8ce:	480e      	ldr	r0, [pc, #56]	; (da908 <_Z9conditionii+0x14a0>)
   da8d0:	f004 f896 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
   da8d4:	7838      	ldrb	r0, [r7, #0]
   da8d6:	f899 3000 	ldrb.w	r3, [r9]
   da8da:	f898 2000 	ldrb.w	r2, [r8]
   da8de:	9000      	str	r0, [sp, #0]
   da8e0:	f105 0135 	add.w	r1, r5, #53	; 0x35
   da8e4:	b289      	uxth	r1, r1
   da8e6:	4808      	ldr	r0, [pc, #32]	; (da908 <_Z9conditionii+0x14a0>)
   da8e8:	f004 f88a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
   da8ec:	7838      	ldrb	r0, [r7, #0]
   da8ee:	f899 3000 	ldrb.w	r3, [r9]
   da8f2:	f898 2000 	ldrb.w	r2, [r8]
   da8f6:	9000      	str	r0, [sp, #0]
   da8f8:	f105 013b 	add.w	r1, r5, #59	; 0x3b
   da8fc:	b289      	uxth	r1, r1
   da8fe:	4802      	ldr	r0, [pc, #8]	; (da908 <_Z9conditionii+0x14a0>)
   da900:	f004 f87e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   da904:	e0e0      	b.n	daac8 <_Z9conditionii+0x1660>
   da906:	bf00      	nop
   da908:	2003e31c 	.word	0x2003e31c
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   da90c:	f5b6 7f49 	cmp.w	r6, #804	; 0x324
   da910:	f040 80da 	bne.w	daac8 <_Z9conditionii+0x1660>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   da914:	4f68      	ldr	r7, [pc, #416]	; (daab8 <_Z9conditionii+0x1650>)
   da916:	f8df 91a8 	ldr.w	r9, [pc, #424]	; daac0 <_Z9conditionii+0x1658>
   da91a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; daac4 <_Z9conditionii+0x165c>
   da91e:	7838      	ldrb	r0, [r7, #0]
   da920:	f899 3000 	ldrb.w	r3, [r9]
   da924:	f898 2000 	ldrb.w	r2, [r8]
   da928:	9000      	str	r0, [sp, #0]
   da92a:	b2a5      	uxth	r5, r4
   da92c:	1c69      	adds	r1, r5, #1
   da92e:	b289      	uxth	r1, r1
   da930:	4862      	ldr	r0, [pc, #392]	; (daabc <_Z9conditionii+0x1654>)
   da932:	f004 f865 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   da936:	7838      	ldrb	r0, [r7, #0]
   da938:	f899 3000 	ldrb.w	r3, [r9]
   da93c:	f898 2000 	ldrb.w	r2, [r8]
   da940:	9000      	str	r0, [sp, #0]
   da942:	f105 011f 	add.w	r1, r5, #31
   da946:	b289      	uxth	r1, r1
   da948:	485c      	ldr	r0, [pc, #368]	; (daabc <_Z9conditionii+0x1654>)
   da94a:	f004 f859 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   da94e:	7838      	ldrb	r0, [r7, #0]
   da950:	f899 3000 	ldrb.w	r3, [r9]
   da954:	f898 2000 	ldrb.w	r2, [r8]
   da958:	9000      	str	r0, [sp, #0]
   da95a:	f105 010f 	add.w	r1, r5, #15
   da95e:	b289      	uxth	r1, r1
   da960:	4856      	ldr	r0, [pc, #344]	; (daabc <_Z9conditionii+0x1654>)
   da962:	f004 f84d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   da966:	7838      	ldrb	r0, [r7, #0]
   da968:	f899 3000 	ldrb.w	r3, [r9]
   da96c:	f898 2000 	ldrb.w	r2, [r8]
   da970:	9000      	str	r0, [sp, #0]
   da972:	f105 010e 	add.w	r1, r5, #14
   da976:	b289      	uxth	r1, r1
   da978:	4850      	ldr	r0, [pc, #320]	; (daabc <_Z9conditionii+0x1654>)
   da97a:	f004 f841 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   da97e:	7838      	ldrb	r0, [r7, #0]
   da980:	f899 3000 	ldrb.w	r3, [r9]
   da984:	f898 2000 	ldrb.w	r2, [r8]
   da988:	9000      	str	r0, [sp, #0]
   da98a:	f105 010d 	add.w	r1, r5, #13
   da98e:	b289      	uxth	r1, r1
   da990:	484a      	ldr	r0, [pc, #296]	; (daabc <_Z9conditionii+0x1654>)
   da992:	f004 f835 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   da996:	7838      	ldrb	r0, [r7, #0]
   da998:	f899 3000 	ldrb.w	r3, [r9]
   da99c:	f898 2000 	ldrb.w	r2, [r8]
   da9a0:	9000      	str	r0, [sp, #0]
   da9a2:	f105 0110 	add.w	r1, r5, #16
   da9a6:	b289      	uxth	r1, r1
   da9a8:	4844      	ldr	r0, [pc, #272]	; (daabc <_Z9conditionii+0x1654>)
   da9aa:	f004 f829 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   da9ae:	7838      	ldrb	r0, [r7, #0]
   da9b0:	f899 3000 	ldrb.w	r3, [r9]
   da9b4:	f898 2000 	ldrb.w	r2, [r8]
   da9b8:	9000      	str	r0, [sp, #0]
   da9ba:	f105 0111 	add.w	r1, r5, #17
   da9be:	b289      	uxth	r1, r1
   da9c0:	483e      	ldr	r0, [pc, #248]	; (daabc <_Z9conditionii+0x1654>)
   da9c2:	f004 f81d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   da9c6:	7838      	ldrb	r0, [r7, #0]
   da9c8:	f899 3000 	ldrb.w	r3, [r9]
   da9cc:	f898 2000 	ldrb.w	r2, [r8]
   da9d0:	9000      	str	r0, [sp, #0]
   da9d2:	f105 0112 	add.w	r1, r5, #18
   da9d6:	b289      	uxth	r1, r1
   da9d8:	4838      	ldr	r0, [pc, #224]	; (daabc <_Z9conditionii+0x1654>)
   da9da:	f004 f811 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   da9de:	7838      	ldrb	r0, [r7, #0]
   da9e0:	f899 3000 	ldrb.w	r3, [r9]
   da9e4:	f898 2000 	ldrb.w	r2, [r8]
   da9e8:	9000      	str	r0, [sp, #0]
   da9ea:	f105 011e 	add.w	r1, r5, #30
   da9ee:	b289      	uxth	r1, r1
   da9f0:	4832      	ldr	r0, [pc, #200]	; (daabc <_Z9conditionii+0x1654>)
   da9f2:	f004 f805 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   da9f6:	7838      	ldrb	r0, [r7, #0]
   da9f8:	f899 3000 	ldrb.w	r3, [r9]
   da9fc:	f898 2000 	ldrb.w	r2, [r8]
   daa00:	9000      	str	r0, [sp, #0]
   daa02:	f105 011d 	add.w	r1, r5, #29
   daa06:	b289      	uxth	r1, r1
   daa08:	482c      	ldr	r0, [pc, #176]	; (daabc <_Z9conditionii+0x1654>)
   daa0a:	f003 fff9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   daa0e:	7838      	ldrb	r0, [r7, #0]
   daa10:	f899 3000 	ldrb.w	r3, [r9]
   daa14:	f898 2000 	ldrb.w	r2, [r8]
   daa18:	9000      	str	r0, [sp, #0]
   daa1a:	f105 0120 	add.w	r1, r5, #32
   daa1e:	b289      	uxth	r1, r1
   daa20:	4826      	ldr	r0, [pc, #152]	; (daabc <_Z9conditionii+0x1654>)
   daa22:	f003 ffed 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   daa26:	7838      	ldrb	r0, [r7, #0]
   daa28:	f899 3000 	ldrb.w	r3, [r9]
   daa2c:	f898 2000 	ldrb.w	r2, [r8]
   daa30:	9000      	str	r0, [sp, #0]
   daa32:	f105 0121 	add.w	r1, r5, #33	; 0x21
   daa36:	b289      	uxth	r1, r1
   daa38:	4820      	ldr	r0, [pc, #128]	; (daabc <_Z9conditionii+0x1654>)
   daa3a:	f003 ffe1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   daa3e:	7838      	ldrb	r0, [r7, #0]
   daa40:	f899 3000 	ldrb.w	r3, [r9]
   daa44:	f898 2000 	ldrb.w	r2, [r8]
   daa48:	9000      	str	r0, [sp, #0]
   daa4a:	f105 0122 	add.w	r1, r5, #34	; 0x22
   daa4e:	b289      	uxth	r1, r1
   daa50:	481a      	ldr	r0, [pc, #104]	; (daabc <_Z9conditionii+0x1654>)
   daa52:	f003 ffd5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   daa56:	7838      	ldrb	r0, [r7, #0]
   daa58:	f899 3000 	ldrb.w	r3, [r9]
   daa5c:	f898 2000 	ldrb.w	r2, [r8]
   daa60:	9000      	str	r0, [sp, #0]
   daa62:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   daa66:	b289      	uxth	r1, r1
   daa68:	4814      	ldr	r0, [pc, #80]	; (daabc <_Z9conditionii+0x1654>)
   daa6a:	f003 ffc9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   daa6e:	7838      	ldrb	r0, [r7, #0]
   daa70:	f899 3000 	ldrb.w	r3, [r9]
   daa74:	f898 2000 	ldrb.w	r2, [r8]
   daa78:	9000      	str	r0, [sp, #0]
   daa7a:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   daa7e:	b289      	uxth	r1, r1
   daa80:	480e      	ldr	r0, [pc, #56]	; (daabc <_Z9conditionii+0x1654>)
   daa82:	f003 ffbd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   daa86:	7838      	ldrb	r0, [r7, #0]
   daa88:	f899 3000 	ldrb.w	r3, [r9]
   daa8c:	f898 2000 	ldrb.w	r2, [r8]
   daa90:	9000      	str	r0, [sp, #0]
   daa92:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   daa96:	b289      	uxth	r1, r1
   daa98:	4808      	ldr	r0, [pc, #32]	; (daabc <_Z9conditionii+0x1654>)
   daa9a:	f003 ffb1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   daa9e:	7838      	ldrb	r0, [r7, #0]
   daaa0:	f899 3000 	ldrb.w	r3, [r9]
   daaa4:	f898 2000 	ldrb.w	r2, [r8]
   daaa8:	9000      	str	r0, [sp, #0]
   daaaa:	f105 0131 	add.w	r1, r5, #49	; 0x31
   daaae:	b289      	uxth	r1, r1
   daab0:	4802      	ldr	r0, [pc, #8]	; (daabc <_Z9conditionii+0x1654>)
   daab2:	f003 ffa5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
   daab6:	e011      	b.n	daadc <_Z9conditionii+0x1674>
   daab8:	2003e35c 	.word	0x2003e35c
   daabc:	2003e31c 	.word	0x2003e31c
   daac0:	2003e314 	.word	0x2003e314
   daac4:	2003e354 	.word	0x2003e354
            strip.setPixelColor(inpix+52,rclock,gclock,bclock);
            strip.setPixelColor(inpix+51,rclock,gclock,bclock);
            strip.setPixelColor(inpix+53,rclock,gclock,bclock);
            strip.setPixelColor(inpix+59,rclock,gclock,bclock);
        }
        if(cnum == 804 || (cnum > 199 && cnum < 233) || (cnum > 299 && cnum < 532))
   daac8:	f1a6 03c8 	sub.w	r3, r6, #200	; 0xc8
   daacc:	2b20      	cmp	r3, #32
   daace:	f67f af21 	bls.w	da914 <_Z9conditionii+0x14ac>
   daad2:	f5a6 7396 	sub.w	r3, r6, #300	; 0x12c
   daad6:	2be7      	cmp	r3, #231	; 0xe7
   daad8:	f67f af1c 	bls.w	da914 <_Z9conditionii+0x14ac>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
        }
        if(cnum == 701 || cnum == 741)
   daadc:	f240 23bd 	movw	r3, #701	; 0x2bd
   daae0:	429e      	cmp	r6, r3
   daae2:	d004      	beq.n	daaee <_Z9conditionii+0x1686>
   daae4:	f240 23e5 	movw	r3, #741	; 0x2e5
   daae8:	429e      	cmp	r6, r3
   daaea:	f040 8169 	bne.w	dadc0 <_Z9conditionii+0x1958>
        {
            strip.setPixelColor(inpix+1,rclock,gclock,bclock);
   daaee:	4fc0      	ldr	r7, [pc, #768]	; (dadf0 <_Z9conditionii+0x1988>)
   daaf0:	f8df 9308 	ldr.w	r9, [pc, #776]	; dadfc <_Z9conditionii+0x1994>
   daaf4:	f8df 8308 	ldr.w	r8, [pc, #776]	; dae00 <_Z9conditionii+0x1998>
   daaf8:	7838      	ldrb	r0, [r7, #0]
   daafa:	f899 3000 	ldrb.w	r3, [r9]
   daafe:	f898 2000 	ldrb.w	r2, [r8]
   dab02:	9000      	str	r0, [sp, #0]
   dab04:	b2a5      	uxth	r5, r4
   dab06:	1c69      	adds	r1, r5, #1
   dab08:	b289      	uxth	r1, r1
   dab0a:	48ba      	ldr	r0, [pc, #744]	; (dadf4 <_Z9conditionii+0x198c>)
   dab0c:	f003 ff78 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   dab10:	7838      	ldrb	r0, [r7, #0]
   dab12:	f899 3000 	ldrb.w	r3, [r9]
   dab16:	f898 2000 	ldrb.w	r2, [r8]
   dab1a:	9000      	str	r0, [sp, #0]
   dab1c:	f105 011f 	add.w	r1, r5, #31
   dab20:	b289      	uxth	r1, r1
   dab22:	48b4      	ldr	r0, [pc, #720]	; (dadf4 <_Z9conditionii+0x198c>)
   dab24:	f003 ff6c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   dab28:	7838      	ldrb	r0, [r7, #0]
   dab2a:	f899 3000 	ldrb.w	r3, [r9]
   dab2e:	f898 2000 	ldrb.w	r2, [r8]
   dab32:	9000      	str	r0, [sp, #0]
   dab34:	f105 010f 	add.w	r1, r5, #15
   dab38:	b289      	uxth	r1, r1
   dab3a:	48ae      	ldr	r0, [pc, #696]	; (dadf4 <_Z9conditionii+0x198c>)
   dab3c:	f003 ff60 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+14,rclock,gclock,bclock);
   dab40:	7838      	ldrb	r0, [r7, #0]
   dab42:	f899 3000 	ldrb.w	r3, [r9]
   dab46:	f898 2000 	ldrb.w	r2, [r8]
   dab4a:	9000      	str	r0, [sp, #0]
   dab4c:	f105 010e 	add.w	r1, r5, #14
   dab50:	b289      	uxth	r1, r1
   dab52:	48a8      	ldr	r0, [pc, #672]	; (dadf4 <_Z9conditionii+0x198c>)
   dab54:	f003 ff54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+13,rclock,gclock,bclock);
   dab58:	7838      	ldrb	r0, [r7, #0]
   dab5a:	f899 3000 	ldrb.w	r3, [r9]
   dab5e:	f898 2000 	ldrb.w	r2, [r8]
   dab62:	9000      	str	r0, [sp, #0]
   dab64:	f105 010d 	add.w	r1, r5, #13
   dab68:	b289      	uxth	r1, r1
   dab6a:	48a2      	ldr	r0, [pc, #648]	; (dadf4 <_Z9conditionii+0x198c>)
   dab6c:	f003 ff48 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   dab70:	7838      	ldrb	r0, [r7, #0]
   dab72:	f899 3000 	ldrb.w	r3, [r9]
   dab76:	f898 2000 	ldrb.w	r2, [r8]
   dab7a:	9000      	str	r0, [sp, #0]
   dab7c:	f105 0110 	add.w	r1, r5, #16
   dab80:	b289      	uxth	r1, r1
   dab82:	489c      	ldr	r0, [pc, #624]	; (dadf4 <_Z9conditionii+0x198c>)
   dab84:	f003 ff3c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+17,rclock,gclock,bclock);
   dab88:	7838      	ldrb	r0, [r7, #0]
   dab8a:	f899 3000 	ldrb.w	r3, [r9]
   dab8e:	f898 2000 	ldrb.w	r2, [r8]
   dab92:	9000      	str	r0, [sp, #0]
   dab94:	f105 0111 	add.w	r1, r5, #17
   dab98:	b289      	uxth	r1, r1
   dab9a:	4896      	ldr	r0, [pc, #600]	; (dadf4 <_Z9conditionii+0x198c>)
   dab9c:	f003 ff30 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   daba0:	7838      	ldrb	r0, [r7, #0]
   daba2:	f899 3000 	ldrb.w	r3, [r9]
   daba6:	f898 2000 	ldrb.w	r2, [r8]
   dabaa:	9000      	str	r0, [sp, #0]
   dabac:	f105 0112 	add.w	r1, r5, #18
   dabb0:	b289      	uxth	r1, r1
   dabb2:	4890      	ldr	r0, [pc, #576]	; (dadf4 <_Z9conditionii+0x198c>)
   dabb4:	f003 ff24 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,rclock,gclock,bclock);
   dabb8:	7838      	ldrb	r0, [r7, #0]
   dabba:	f899 3000 	ldrb.w	r3, [r9]
   dabbe:	f898 2000 	ldrb.w	r2, [r8]
   dabc2:	9000      	str	r0, [sp, #0]
   dabc4:	f105 011e 	add.w	r1, r5, #30
   dabc8:	b289      	uxth	r1, r1
   dabca:	488a      	ldr	r0, [pc, #552]	; (dadf4 <_Z9conditionii+0x198c>)
   dabcc:	f003 ff18 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   dabd0:	7838      	ldrb	r0, [r7, #0]
   dabd2:	f899 3000 	ldrb.w	r3, [r9]
   dabd6:	f898 2000 	ldrb.w	r2, [r8]
   dabda:	9000      	str	r0, [sp, #0]
   dabdc:	f105 011d 	add.w	r1, r5, #29
   dabe0:	b289      	uxth	r1, r1
   dabe2:	4884      	ldr	r0, [pc, #528]	; (dadf4 <_Z9conditionii+0x198c>)
   dabe4:	f003 ff0c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   dabe8:	7838      	ldrb	r0, [r7, #0]
   dabea:	f899 3000 	ldrb.w	r3, [r9]
   dabee:	f898 2000 	ldrb.w	r2, [r8]
   dabf2:	9000      	str	r0, [sp, #0]
   dabf4:	f105 0120 	add.w	r1, r5, #32
   dabf8:	b289      	uxth	r1, r1
   dabfa:	487e      	ldr	r0, [pc, #504]	; (dadf4 <_Z9conditionii+0x198c>)
   dabfc:	f003 ff00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
   dac00:	7838      	ldrb	r0, [r7, #0]
   dac02:	f899 3000 	ldrb.w	r3, [r9]
   dac06:	f898 2000 	ldrb.w	r2, [r8]
   dac0a:	9000      	str	r0, [sp, #0]
   dac0c:	f105 0121 	add.w	r1, r5, #33	; 0x21
   dac10:	b289      	uxth	r1, r1
   dac12:	4878      	ldr	r0, [pc, #480]	; (dadf4 <_Z9conditionii+0x198c>)
   dac14:	f003 fef4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   dac18:	7838      	ldrb	r0, [r7, #0]
   dac1a:	f899 3000 	ldrb.w	r3, [r9]
   dac1e:	f898 2000 	ldrb.w	r2, [r8]
   dac22:	9000      	str	r0, [sp, #0]
   dac24:	f105 0122 	add.w	r1, r5, #34	; 0x22
   dac28:	b289      	uxth	r1, r1
   dac2a:	4872      	ldr	r0, [pc, #456]	; (dadf4 <_Z9conditionii+0x198c>)
   dac2c:	f003 fee8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   dac30:	7838      	ldrb	r0, [r7, #0]
   dac32:	f899 3000 	ldrb.w	r3, [r9]
   dac36:	f898 2000 	ldrb.w	r2, [r8]
   dac3a:	9000      	str	r0, [sp, #0]
   dac3c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   dac40:	b289      	uxth	r1, r1
   dac42:	486c      	ldr	r0, [pc, #432]	; (dadf4 <_Z9conditionii+0x198c>)
   dac44:	f003 fedc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
   dac48:	7838      	ldrb	r0, [r7, #0]
   dac4a:	f899 3000 	ldrb.w	r3, [r9]
   dac4e:	f898 2000 	ldrb.w	r2, [r8]
   dac52:	9000      	str	r0, [sp, #0]
   dac54:	f105 012e 	add.w	r1, r5, #46	; 0x2e
   dac58:	b289      	uxth	r1, r1
   dac5a:	4866      	ldr	r0, [pc, #408]	; (dadf4 <_Z9conditionii+0x198c>)
   dac5c:	f003 fed0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
   dac60:	7838      	ldrb	r0, [r7, #0]
   dac62:	f899 3000 	ldrb.w	r3, [r9]
   dac66:	f898 2000 	ldrb.w	r2, [r8]
   dac6a:	9000      	str	r0, [sp, #0]
   dac6c:	f105 012d 	add.w	r1, r5, #45	; 0x2d
   dac70:	b289      	uxth	r1, r1
   dac72:	4860      	ldr	r0, [pc, #384]	; (dadf4 <_Z9conditionii+0x198c>)
   dac74:	f003 fec4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   dac78:	7838      	ldrb	r0, [r7, #0]
   dac7a:	f899 3000 	ldrb.w	r3, [r9]
   dac7e:	f898 2000 	ldrb.w	r2, [r8]
   dac82:	9000      	str	r0, [sp, #0]
   dac84:	f105 0131 	add.w	r1, r5, #49	; 0x31
   dac88:	b289      	uxth	r1, r1
   dac8a:	485a      	ldr	r0, [pc, #360]	; (dadf4 <_Z9conditionii+0x198c>)
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   dac8c:	f04f 0a02 	mov.w	sl, #2
            strip.setPixelColor(inpix+33,rclock,gclock,bclock);
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
            strip.setPixelColor(inpix+46,rclock,gclock,bclock);
            strip.setPixelColor(inpix+45,rclock,gclock,bclock);
            strip.setPixelColor(inpix+49,rclock,gclock,bclock);
   dac90:	f003 feb6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock/2,gclock/2,bclock/2);
   dac94:	6838      	ldr	r0, [r7, #0]
   dac96:	fb90 f0fa 	sdiv	r0, r0, sl
   dac9a:	f105 010b 	add.w	r1, r5, #11
   dac9e:	b2c0      	uxtb	r0, r0
   daca0:	f8d9 3000 	ldr.w	r3, [r9]
   daca4:	f8d8 2000 	ldr.w	r2, [r8]
   daca8:	fb93 f3fa 	sdiv	r3, r3, sl
   dacac:	fb92 f2fa 	sdiv	r2, r2, sl
   dacb0:	9000      	str	r0, [sp, #0]
   dacb2:	b2db      	uxtb	r3, r3
   dacb4:	b2d2      	uxtb	r2, r2
   dacb6:	b289      	uxth	r1, r1
   dacb8:	484e      	ldr	r0, [pc, #312]	; (dadf4 <_Z9conditionii+0x198c>)
   dacba:	f003 fea1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock/2,gclock/2,bclock/2);
   dacbe:	6838      	ldr	r0, [r7, #0]
   dacc0:	fb90 f0fa 	sdiv	r0, r0, sl
   dacc4:	f105 0114 	add.w	r1, r5, #20
   dacc8:	b2c0      	uxtb	r0, r0
   dacca:	f8d9 3000 	ldr.w	r3, [r9]
   dacce:	f8d8 2000 	ldr.w	r2, [r8]
   dacd2:	fb93 f3fa 	sdiv	r3, r3, sl
   dacd6:	fb92 f2fa 	sdiv	r2, r2, sl
   dacda:	9000      	str	r0, [sp, #0]
   dacdc:	b2db      	uxtb	r3, r3
   dacde:	b2d2      	uxtb	r2, r2
   dace0:	b289      	uxth	r1, r1
   dace2:	4844      	ldr	r0, [pc, #272]	; (dadf4 <_Z9conditionii+0x198c>)
   dace4:	f003 fe8c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock/2,gclock/2,bclock/2);
   dace8:	6838      	ldr	r0, [r7, #0]
   dacea:	fb90 f0fa 	sdiv	r0, r0, sl
   dacee:	f105 011b 	add.w	r1, r5, #27
   dacf2:	b2c0      	uxtb	r0, r0
   dacf4:	f8d9 3000 	ldr.w	r3, [r9]
   dacf8:	f8d8 2000 	ldr.w	r2, [r8]
   dacfc:	fb93 f3fa 	sdiv	r3, r3, sl
   dad00:	fb92 f2fa 	sdiv	r2, r2, sl
   dad04:	9000      	str	r0, [sp, #0]
   dad06:	b2db      	uxtb	r3, r3
   dad08:	b2d2      	uxtb	r2, r2
   dad0a:	b289      	uxth	r1, r1
   dad0c:	4839      	ldr	r0, [pc, #228]	; (dadf4 <_Z9conditionii+0x198c>)
   dad0e:	f003 fe77 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock/2,gclock/2,bclock/2);
   dad12:	6838      	ldr	r0, [r7, #0]
   dad14:	fb90 f0fa 	sdiv	r0, r0, sl
   dad18:	f105 0124 	add.w	r1, r5, #36	; 0x24
   dad1c:	b2c0      	uxtb	r0, r0
   dad1e:	f8d9 3000 	ldr.w	r3, [r9]
   dad22:	f8d8 2000 	ldr.w	r2, [r8]
   dad26:	fb93 f3fa 	sdiv	r3, r3, sl
   dad2a:	fb92 f2fa 	sdiv	r2, r2, sl
   dad2e:	9000      	str	r0, [sp, #0]
   dad30:	b2db      	uxtb	r3, r3
   dad32:	b2d2      	uxtb	r2, r2
   dad34:	b289      	uxth	r1, r1
   dad36:	482f      	ldr	r0, [pc, #188]	; (dadf4 <_Z9conditionii+0x198c>)
   dad38:	f003 fe62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+43,rclock/2,gclock/2,bclock/2);
   dad3c:	6838      	ldr	r0, [r7, #0]
   dad3e:	fb90 f0fa 	sdiv	r0, r0, sl
   dad42:	f105 012b 	add.w	r1, r5, #43	; 0x2b
   dad46:	b2c0      	uxtb	r0, r0
   dad48:	f8d9 3000 	ldr.w	r3, [r9]
   dad4c:	f8d8 2000 	ldr.w	r2, [r8]
   dad50:	fb93 f3fa 	sdiv	r3, r3, sl
   dad54:	fb92 f2fa 	sdiv	r2, r2, sl
   dad58:	9000      	str	r0, [sp, #0]
   dad5a:	b2db      	uxtb	r3, r3
   dad5c:	b2d2      	uxtb	r2, r2
   dad5e:	b289      	uxth	r1, r1
   dad60:	4824      	ldr	r0, [pc, #144]	; (dadf4 <_Z9conditionii+0x198c>)
   dad62:	f003 fe4d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
   dad66:	f8d9 3000 	ldr.w	r3, [r9]
   dad6a:	f04f 0a03 	mov.w	sl, #3
   dad6e:	6838      	ldr	r0, [r7, #0]
   dad70:	fb90 f0fa 	sdiv	r0, r0, sl
   dad74:	f105 0119 	add.w	r1, r5, #25
   dad78:	b2c0      	uxtb	r0, r0
   dad7a:	f8d8 2000 	ldr.w	r2, [r8]
   dad7e:	fb93 f3fa 	sdiv	r3, r3, sl
   dad82:	fb92 f2fa 	sdiv	r2, r2, sl
   dad86:	9000      	str	r0, [sp, #0]
   dad88:	b2db      	uxtb	r3, r3
   dad8a:	b2d2      	uxtb	r2, r2
   dad8c:	b289      	uxth	r1, r1
   dad8e:	4819      	ldr	r0, [pc, #100]	; (dadf4 <_Z9conditionii+0x198c>)
   dad90:	f003 fe36 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock/3,gclock/3,bclock/3);
   dad94:	6838      	ldr	r0, [r7, #0]
   dad96:	f8d9 3000 	ldr.w	r3, [r9]
   dad9a:	f8d8 2000 	ldr.w	r2, [r8]
   dad9e:	fb93 f3fa 	sdiv	r3, r3, sl
   dada2:	fb92 f2fa 	sdiv	r2, r2, sl
   dada6:	f105 0126 	add.w	r1, r5, #38	; 0x26
   dadaa:	fb90 fafa 	sdiv	sl, r0, sl
   dadae:	fa5f f08a 	uxtb.w	r0, sl
   dadb2:	9000      	str	r0, [sp, #0]
   dadb4:	b2db      	uxtb	r3, r3
   dadb6:	b2d2      	uxtb	r2, r2
   dadb8:	b289      	uxth	r1, r1
   dadba:	480e      	ldr	r0, [pc, #56]	; (dadf4 <_Z9conditionii+0x198c>)
   dadbc:	f003 fe20 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)
   dadc0:	f240 23c7 	movw	r3, #711	; 0x2c7
   dadc4:	429e      	cmp	r6, r3
   dadc6:	d009      	beq.n	daddc <_Z9conditionii+0x1974>
            strip.setPixelColor(inpix+42,rclock/3,gclock/3,bclock/3);
            strip.setPixelColor(inpix+25,rclock/3,gclock/3,bclock/3);
            strip.setPixelColor(inpix+38,rclock/3,gclock/3,bclock/3);
            
        }
        if(cnum == 711 || cnum == 731 || cnum == 761 || cnum == 751 || cnum == 762)         //Fog
   dadc8:	f2a6 22db 	subw	r2, r6, #731	; 0x2db
   dadcc:	2a1f      	cmp	r2, #31
   dadce:	f200 80d7 	bhi.w	daf80 <_Z9conditionii+0x1b18>
   dadd2:	4b09      	ldr	r3, [pc, #36]	; (dadf8 <_Z9conditionii+0x1990>)
   dadd4:	40d3      	lsrs	r3, r2
   dadd6:	07db      	lsls	r3, r3, #31
   dadd8:	f140 80d2 	bpl.w	daf80 <_Z9conditionii+0x1b18>
        {
            strip.setPixelColor(inpix+15,rclock,gclock,bclock);
   daddc:	4f04      	ldr	r7, [pc, #16]	; (dadf0 <_Z9conditionii+0x1988>)
   dadde:	f8df 901c 	ldr.w	r9, [pc, #28]	; dadfc <_Z9conditionii+0x1994>
   dade2:	f8df 801c 	ldr.w	r8, [pc, #28]	; dae00 <_Z9conditionii+0x1998>
   dade6:	7838      	ldrb	r0, [r7, #0]
   dade8:	f899 3000 	ldrb.w	r3, [r9]
   dadec:	e00a      	b.n	dae04 <_Z9conditionii+0x199c>
   dadee:	bf00      	nop
   dadf0:	2003e35c 	.word	0x2003e35c
   dadf4:	2003e31c 	.word	0x2003e31c
   dadf8:	c0100001 	.word	0xc0100001
   dadfc:	2003e314 	.word	0x2003e314
   dae00:	2003e354 	.word	0x2003e354
   dae04:	f898 2000 	ldrb.w	r2, [r8]
   dae08:	9000      	str	r0, [sp, #0]
   dae0a:	b2a5      	uxth	r5, r4
   dae0c:	f105 010f 	add.w	r1, r5, #15
   dae10:	b289      	uxth	r1, r1
   dae12:	487b      	ldr	r0, [pc, #492]	; (db000 <_Z9conditionii+0x1b98>)
   dae14:	f003 fdf4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+16,rclock,gclock,bclock);
   dae18:	7838      	ldrb	r0, [r7, #0]
   dae1a:	f899 3000 	ldrb.w	r3, [r9]
   dae1e:	f898 2000 	ldrb.w	r2, [r8]
   dae22:	9000      	str	r0, [sp, #0]
   dae24:	f105 0110 	add.w	r1, r5, #16
   dae28:	b289      	uxth	r1, r1
   dae2a:	4875      	ldr	r0, [pc, #468]	; (db000 <_Z9conditionii+0x1b98>)
   dae2c:	f003 fde8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,rclock,gclock,bclock);
   dae30:	7838      	ldrb	r0, [r7, #0]
   dae32:	f899 3000 	ldrb.w	r3, [r9]
   dae36:	f898 2000 	ldrb.w	r2, [r8]
   dae3a:	9000      	str	r0, [sp, #0]
   dae3c:	f105 011f 	add.w	r1, r5, #31
   dae40:	b289      	uxth	r1, r1
   dae42:	486f      	ldr	r0, [pc, #444]	; (db000 <_Z9conditionii+0x1b98>)
   dae44:	f003 fddc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+32,rclock,gclock,bclock);
   dae48:	7838      	ldrb	r0, [r7, #0]
   dae4a:	f899 3000 	ldrb.w	r3, [r9]
   dae4e:	f898 2000 	ldrb.w	r2, [r8]
   dae52:	9000      	str	r0, [sp, #0]
   dae54:	f105 0120 	add.w	r1, r5, #32
   dae58:	b289      	uxth	r1, r1
   dae5a:	4869      	ldr	r0, [pc, #420]	; (db000 <_Z9conditionii+0x1b98>)
   dae5c:	f003 fdd0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+47,rclock,gclock,bclock);
   dae60:	7838      	ldrb	r0, [r7, #0]
   dae62:	f899 3000 	ldrb.w	r3, [r9]
   dae66:	f898 2000 	ldrb.w	r2, [r8]
   dae6a:	9000      	str	r0, [sp, #0]
   dae6c:	f105 012f 	add.w	r1, r5, #47	; 0x2f
   dae70:	b289      	uxth	r1, r1
   dae72:	4863      	ldr	r0, [pc, #396]	; (db000 <_Z9conditionii+0x1b98>)
   dae74:	f003 fdc4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+18,rclock,gclock,bclock);
   dae78:	7838      	ldrb	r0, [r7, #0]
   dae7a:	f899 3000 	ldrb.w	r3, [r9]
   dae7e:	f898 2000 	ldrb.w	r2, [r8]
   dae82:	9000      	str	r0, [sp, #0]
   dae84:	f105 0112 	add.w	r1, r5, #18
   dae88:	b289      	uxth	r1, r1
   dae8a:	485d      	ldr	r0, [pc, #372]	; (db000 <_Z9conditionii+0x1b98>)
   dae8c:	f003 fdb8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,rclock,gclock,bclock);
   dae90:	7838      	ldrb	r0, [r7, #0]
   dae92:	f899 3000 	ldrb.w	r3, [r9]
   dae96:	f898 2000 	ldrb.w	r2, [r8]
   dae9a:	9000      	str	r0, [sp, #0]
   dae9c:	f105 011d 	add.w	r1, r5, #29
   daea0:	b289      	uxth	r1, r1
   daea2:	4857      	ldr	r0, [pc, #348]	; (db000 <_Z9conditionii+0x1b98>)
   daea4:	f003 fdac 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+34,rclock,gclock,bclock);
   daea8:	7838      	ldrb	r0, [r7, #0]
   daeaa:	f899 3000 	ldrb.w	r3, [r9]
   daeae:	f898 2000 	ldrb.w	r2, [r8]
   daeb2:	9000      	str	r0, [sp, #0]
   daeb4:	f105 0122 	add.w	r1, r5, #34	; 0x22
   daeb8:	b289      	uxth	r1, r1
   daeba:	4851      	ldr	r0, [pc, #324]	; (db000 <_Z9conditionii+0x1b98>)
   daebc:	f003 fda0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+11,rclock,gclock,bclock);
   daec0:	7838      	ldrb	r0, [r7, #0]
   daec2:	f899 3000 	ldrb.w	r3, [r9]
   daec6:	f898 2000 	ldrb.w	r2, [r8]
   daeca:	9000      	str	r0, [sp, #0]
   daecc:	f105 010b 	add.w	r1, r5, #11
   daed0:	b289      	uxth	r1, r1
   daed2:	484b      	ldr	r0, [pc, #300]	; (db000 <_Z9conditionii+0x1b98>)
   daed4:	f003 fd94 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+20,rclock,gclock,bclock);
   daed8:	7838      	ldrb	r0, [r7, #0]
   daeda:	f899 3000 	ldrb.w	r3, [r9]
   daede:	f898 2000 	ldrb.w	r2, [r8]
   daee2:	9000      	str	r0, [sp, #0]
   daee4:	f105 0114 	add.w	r1, r5, #20
   daee8:	b289      	uxth	r1, r1
   daeea:	4845      	ldr	r0, [pc, #276]	; (db000 <_Z9conditionii+0x1b98>)
   daeec:	f003 fd88 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,rclock,gclock,bclock);
   daef0:	7838      	ldrb	r0, [r7, #0]
   daef2:	f899 3000 	ldrb.w	r3, [r9]
   daef6:	f898 2000 	ldrb.w	r2, [r8]
   daefa:	9000      	str	r0, [sp, #0]
   daefc:	f105 011b 	add.w	r1, r5, #27
   daf00:	b289      	uxth	r1, r1
   daf02:	483f      	ldr	r0, [pc, #252]	; (db000 <_Z9conditionii+0x1b98>)
   daf04:	f003 fd7c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+36,rclock,gclock,bclock);
   daf08:	7838      	ldrb	r0, [r7, #0]
   daf0a:	f899 3000 	ldrb.w	r3, [r9]
   daf0e:	f898 2000 	ldrb.w	r2, [r8]
   daf12:	9000      	str	r0, [sp, #0]
   daf14:	f105 0124 	add.w	r1, r5, #36	; 0x24
   daf18:	b289      	uxth	r1, r1
   daf1a:	4839      	ldr	r0, [pc, #228]	; (db000 <_Z9conditionii+0x1b98>)
   daf1c:	f003 fd70 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+22,rclock,gclock,bclock);
   daf20:	7838      	ldrb	r0, [r7, #0]
   daf22:	f899 3000 	ldrb.w	r3, [r9]
   daf26:	f898 2000 	ldrb.w	r2, [r8]
   daf2a:	9000      	str	r0, [sp, #0]
   daf2c:	f105 0116 	add.w	r1, r5, #22
   daf30:	b289      	uxth	r1, r1
   daf32:	4833      	ldr	r0, [pc, #204]	; (db000 <_Z9conditionii+0x1b98>)
   daf34:	f003 fd64 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+25,rclock,gclock,bclock);
   daf38:	7838      	ldrb	r0, [r7, #0]
   daf3a:	f899 3000 	ldrb.w	r3, [r9]
   daf3e:	f898 2000 	ldrb.w	r2, [r8]
   daf42:	9000      	str	r0, [sp, #0]
   daf44:	f105 0119 	add.w	r1, r5, #25
   daf48:	b289      	uxth	r1, r1
   daf4a:	482d      	ldr	r0, [pc, #180]	; (db000 <_Z9conditionii+0x1b98>)
   daf4c:	f003 fd58 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+38,rclock,gclock,bclock);
   daf50:	7838      	ldrb	r0, [r7, #0]
   daf52:	f899 3000 	ldrb.w	r3, [r9]
   daf56:	f898 2000 	ldrb.w	r2, [r8]
   daf5a:	9000      	str	r0, [sp, #0]
   daf5c:	f105 0126 	add.w	r1, r5, #38	; 0x26
   daf60:	b289      	uxth	r1, r1
   daf62:	4827      	ldr	r0, [pc, #156]	; (db000 <_Z9conditionii+0x1b98>)
   daf64:	f003 fd4c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+41,rclock,gclock,bclock);
   daf68:	7838      	ldrb	r0, [r7, #0]
   daf6a:	f899 3000 	ldrb.w	r3, [r9]
   daf6e:	f898 2000 	ldrb.w	r2, [r8]
   daf72:	9000      	str	r0, [sp, #0]
   daf74:	f105 0129 	add.w	r1, r5, #41	; 0x29
   daf78:	b289      	uxth	r1, r1
   daf7a:	4821      	ldr	r0, [pc, #132]	; (db000 <_Z9conditionii+0x1b98>)
   daf7c:	f003 fd40 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        }
        if(cnum == 781)
   daf80:	f240 330d 	movw	r3, #781	; 0x30d
   daf84:	429e      	cmp	r6, r3
   daf86:	d137      	bne.n	daff8 <_Z9conditionii+0x1b90>
        {
            strip.setPixelColor(inpix+25,255,127,0);
   daf88:	b2a4      	uxth	r4, r4
   daf8a:	2500      	movs	r5, #0
   daf8c:	f104 0119 	add.w	r1, r4, #25
   daf90:	237f      	movs	r3, #127	; 0x7f
   daf92:	22ff      	movs	r2, #255	; 0xff
   daf94:	b289      	uxth	r1, r1
   daf96:	481a      	ldr	r0, [pc, #104]	; (db000 <_Z9conditionii+0x1b98>)
   daf98:	9500      	str	r5, [sp, #0]
   daf9a:	f003 fd31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+27,255,127,0);
   daf9e:	f104 011b 	add.w	r1, r4, #27
   dafa2:	237f      	movs	r3, #127	; 0x7f
   dafa4:	22ff      	movs	r2, #255	; 0xff
   dafa6:	b289      	uxth	r1, r1
   dafa8:	4815      	ldr	r0, [pc, #84]	; (db000 <_Z9conditionii+0x1b98>)
   dafaa:	9500      	str	r5, [sp, #0]
   dafac:	f003 fd28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+28,255,127,0);
   dafb0:	f104 011c 	add.w	r1, r4, #28
   dafb4:	237f      	movs	r3, #127	; 0x7f
   dafb6:	22ff      	movs	r2, #255	; 0xff
   dafb8:	b289      	uxth	r1, r1
   dafba:	4811      	ldr	r0, [pc, #68]	; (db000 <_Z9conditionii+0x1b98>)
   dafbc:	9500      	str	r5, [sp, #0]
   dafbe:	f003 fd1f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+29,255,127,0);
   dafc2:	f104 011d 	add.w	r1, r4, #29
   dafc6:	237f      	movs	r3, #127	; 0x7f
   dafc8:	22ff      	movs	r2, #255	; 0xff
   dafca:	b289      	uxth	r1, r1
   dafcc:	480c      	ldr	r0, [pc, #48]	; (db000 <_Z9conditionii+0x1b98>)
   dafce:	9500      	str	r5, [sp, #0]
   dafd0:	f003 fd16 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+30,255,127,0);
   dafd4:	f104 011e 	add.w	r1, r4, #30
   dafd8:	237f      	movs	r3, #127	; 0x7f
   dafda:	22ff      	movs	r2, #255	; 0xff
   dafdc:	b289      	uxth	r1, r1
   dafde:	4808      	ldr	r0, [pc, #32]	; (db000 <_Z9conditionii+0x1b98>)
   dafe0:	9500      	str	r5, [sp, #0]
   dafe2:	f003 fd0d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(inpix+31,255,127,0);
   dafe6:	f104 011f 	add.w	r1, r4, #31
   dafea:	9500      	str	r5, [sp, #0]
   dafec:	237f      	movs	r3, #127	; 0x7f
   dafee:	22ff      	movs	r2, #255	; 0xff
   daff0:	b289      	uxth	r1, r1
   daff2:	4803      	ldr	r0, [pc, #12]	; (db000 <_Z9conditionii+0x1b98>)
   daff4:	f003 fd04 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(cnum > 599 || cnum < 623)
        {
            
        }
    }
}                                        
   daff8:	b005      	add	sp, #20
   daffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   daffe:	bf00      	nop
   db000:	2003e31c 	.word	0x2003e31c
   db004:	00000000 	.word	0x00000000

000db008 <_Z9myHandlerPKcS0_>:
    else{
        tmr = tmr+1;
    }

}
void myHandler(const char *event, const char *data) {
   db008:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
            {
                humdata[2] = data[j+12];
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
            cltr[0] = data[j+9];
   db00c:	4f7e      	ldr	r7, [pc, #504]	; (db208 <_Z9myHandlerPKcS0_+0x200>)
    else{
        tmr = tmr+1;
    }

}
void myHandler(const char *event, const char *data) {
   db00e:	b087      	sub	sp, #28
   db010:	460e      	mov	r6, r1
   db012:	1c8d      	adds	r5, r1, #2
   db014:	460c      	mov	r4, r1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   db016:	4630      	mov	r0, r6
   db018:	f007 f8ed 	bl	e21f6 <strlen>
   db01c:	1ba3      	subs	r3, r4, r6
   db01e:	4298      	cmp	r0, r3
   db020:	d962      	bls.n	db0e8 <_Z9myHandlerPKcS0_+0xe0>
    {
        if(data[j] == 't' && data[j+1] == 'e' && data[j+2] == 'm' && data[j+3] == 'p' && data[j+4] == '"'){
   db022:	f814 3b01 	ldrb.w	r3, [r4], #1
   db026:	2b74      	cmp	r3, #116	; 0x74
   db028:	d11e      	bne.n	db068 <_Z9myHandlerPKcS0_+0x60>
   db02a:	7823      	ldrb	r3, [r4, #0]
   db02c:	2b65      	cmp	r3, #101	; 0x65
   db02e:	d13f      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db030:	782b      	ldrb	r3, [r5, #0]
   db032:	2b6d      	cmp	r3, #109	; 0x6d
   db034:	d13c      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db036:	786b      	ldrb	r3, [r5, #1]
   db038:	2b70      	cmp	r3, #112	; 0x70
   db03a:	d139      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db03c:	78e3      	ldrb	r3, [r4, #3]
   db03e:	2b22      	cmp	r3, #34	; 0x22
   db040:	d136      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
            tempdata[0] = data[j+6];
   db042:	7963      	ldrb	r3, [r4, #5]
   db044:	f88d 3010 	strb.w	r3, [sp, #16]
            tempdata[1] = data[j+7];
   db048:	79a3      	ldrb	r3, [r4, #6]
   db04a:	f88d 3011 	strb.w	r3, [sp, #17]
            tempdata[2] = data[j+8];
   db04e:	79e3      	ldrb	r3, [r4, #7]
   db050:	f88d 3012 	strb.w	r3, [sp, #18]
            tempdata[3] = data[j+9];
   db054:	7a23      	ldrb	r3, [r4, #8]
   db056:	f88d 3013 	strb.w	r3, [sp, #19]
            tempdata[4] = data[j+10];
   db05a:	7a63      	ldrb	r3, [r4, #9]
   db05c:	f88d 3014 	strb.w	r3, [sp, #20]
            tempdata[5] = data[j+11];
   db060:	7aa3      	ldrb	r3, [r4, #10]
   db062:	f88d 3015 	strb.w	r3, [sp, #21]
   db066:	e023      	b.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
        }
        if(data[j] == 'h' && data[j+1] == 'u' && data[j+2] == 'm' && data[j+3] == 'i'){
   db068:	2b68      	cmp	r3, #104	; 0x68
   db06a:	d114      	bne.n	db096 <_Z9myHandlerPKcS0_+0x8e>
   db06c:	7823      	ldrb	r3, [r4, #0]
   db06e:	2b75      	cmp	r3, #117	; 0x75
   db070:	d11e      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db072:	782b      	ldrb	r3, [r5, #0]
   db074:	2b6d      	cmp	r3, #109	; 0x6d
   db076:	d11b      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db078:	786b      	ldrb	r3, [r5, #1]
   db07a:	2b69      	cmp	r3, #105	; 0x69
   db07c:	d118      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
            humdata[0] = data[j+10];
   db07e:	7a63      	ldrb	r3, [r4, #9]
   db080:	f88d 3008 	strb.w	r3, [sp, #8]
            humdata[1] = data[j+11];
   db084:	7aa3      	ldrb	r3, [r4, #10]
   db086:	f88d 3009 	strb.w	r3, [sp, #9]
            if(data[j+12] == '0')
   db08a:	7ae3      	ldrb	r3, [r4, #11]
   db08c:	2b30      	cmp	r3, #48	; 0x30
   db08e:	d10f      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
            {
                humdata[2] = data[j+12];
   db090:	f88d 300a 	strb.w	r3, [sp, #10]
   db094:	e00c      	b.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
            }
        }
        if(data[j] == 'i' && data[j+1] == 'c' && data[j+2] == 'o' && data[j+3] == 'n'){
   db096:	2b69      	cmp	r3, #105	; 0x69
   db098:	d10a      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db09a:	7823      	ldrb	r3, [r4, #0]
   db09c:	2b63      	cmp	r3, #99	; 0x63
   db09e:	d107      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db0a0:	782b      	ldrb	r3, [r5, #0]
   db0a2:	2b6f      	cmp	r3, #111	; 0x6f
   db0a4:	d104      	bne.n	db0b0 <_Z9myHandlerPKcS0_+0xa8>
   db0a6:	786b      	ldrb	r3, [r5, #1]
   db0a8:	2b6e      	cmp	r3, #110	; 0x6e
            cltr[0] = data[j+9];
   db0aa:	bf04      	itt	eq
   db0ac:	7a23      	ldrbeq	r3, [r4, #8]
   db0ae:	703b      	strbeq	r3, [r7, #0]
        }
        if(data[j-1] == '[' && data[j] == '{' && data[j+1] == '"' && data[j+2] == 'i' && data[j+3] == 'd'){
   db0b0:	f814 3c02 	ldrb.w	r3, [r4, #-2]
   db0b4:	2b5b      	cmp	r3, #91	; 0x5b
   db0b6:	d115      	bne.n	db0e4 <_Z9myHandlerPKcS0_+0xdc>
   db0b8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   db0bc:	2b7b      	cmp	r3, #123	; 0x7b
   db0be:	d111      	bne.n	db0e4 <_Z9myHandlerPKcS0_+0xdc>
   db0c0:	7823      	ldrb	r3, [r4, #0]
   db0c2:	2b22      	cmp	r3, #34	; 0x22
   db0c4:	d10e      	bne.n	db0e4 <_Z9myHandlerPKcS0_+0xdc>
   db0c6:	782b      	ldrb	r3, [r5, #0]
   db0c8:	2b69      	cmp	r3, #105	; 0x69
   db0ca:	d10b      	bne.n	db0e4 <_Z9myHandlerPKcS0_+0xdc>
   db0cc:	786b      	ldrb	r3, [r5, #1]
   db0ce:	2b64      	cmp	r3, #100	; 0x64
   db0d0:	d108      	bne.n	db0e4 <_Z9myHandlerPKcS0_+0xdc>
            cdata[0] = data[j+6];
   db0d2:	7963      	ldrb	r3, [r4, #5]
   db0d4:	f88d 300c 	strb.w	r3, [sp, #12]
            cdata[1] = data[j+7];
   db0d8:	79a3      	ldrb	r3, [r4, #6]
   db0da:	f88d 300d 	strb.w	r3, [sp, #13]
            cdata[2] = data[j+8];
   db0de:	79e3      	ldrb	r3, [r4, #7]
   db0e0:	f88d 300e 	strb.w	r3, [sp, #14]
   db0e4:	3501      	adds	r5, #1
    char cdata[3];
    float tempK;
    float tempF;
    float tempC;
    int humidity;
    for(j=0;j<strlen(data);j++)
   db0e6:	e796      	b.n	db016 <_Z9myHandlerPKcS0_+0xe>
            cdata[0] = data[j+6];
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    humidity = atof(humdata);
   db0e8:	a802      	add	r0, sp, #8
   db0ea:	f006 feff 	bl	e1eec <atof>
   db0ee:	ec51 0b10 	vmov	r0, r1, d0
   db0f2:	f006 fe63 	bl	e1dbc <__aeabi_d2iz>
   db0f6:	4607      	mov	r7, r0
    cid = atof(cdata);
   db0f8:	a803      	add	r0, sp, #12
   db0fa:	f006 fef7 	bl	e1eec <atof>
   db0fe:	ec51 0b10 	vmov	r0, r1, d0
   db102:	f006 fe5b 	bl	e1dbc <__aeabi_d2iz>
   db106:	4e41      	ldr	r6, [pc, #260]	; (db20c <_Z9myHandlerPKcS0_+0x204>)
    if(cid == 781)
   db108:	f240 330d 	movw	r3, #781	; 0x30d
   db10c:	4298      	cmp	r0, r3
            cdata[1] = data[j+7];
            cdata[2] = data[j+8];
        }
    }
    humidity = atof(humdata);
    cid = atof(cdata);
   db10e:	6030      	str	r0, [r6, #0]
    if(cid == 781)
   db110:	d12f      	bne.n	db172 <_Z9myHandlerPKcS0_+0x16a>
    {
        for(i=160;i<247;i++)
   db112:	4c3f      	ldr	r4, [pc, #252]	; (db210 <_Z9myHandlerPKcS0_+0x208>)
   db114:	23a0      	movs	r3, #160	; 0xa0
   db116:	6023      	str	r3, [r4, #0]
   db118:	46a0      	mov	r8, r4
        {
            strip.setPixelColor(i,0,0,0);
   db11a:	f04f 0900 	mov.w	r9, #0
    }
    humidity = atof(humdata);
    cid = atof(cdata);
    if(cid == 781)
    {
        for(i=160;i<247;i++)
   db11e:	6821      	ldr	r1, [r4, #0]
   db120:	4d3b      	ldr	r5, [pc, #236]	; (db210 <_Z9myHandlerPKcS0_+0x208>)
   db122:	29f6      	cmp	r1, #246	; 0xf6
   db124:	dc0d      	bgt.n	db142 <_Z9myHandlerPKcS0_+0x13a>
        {
            strip.setPixelColor(i,0,0,0);
   db126:	2300      	movs	r3, #0
   db128:	461a      	mov	r2, r3
   db12a:	f8cd 9000 	str.w	r9, [sp]
   db12e:	b289      	uxth	r1, r1
   db130:	4838      	ldr	r0, [pc, #224]	; (db214 <_Z9myHandlerPKcS0_+0x20c>)
   db132:	f003 fc65 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    }
    humidity = atof(humdata);
    cid = atof(cdata);
    if(cid == 781)
    {
        for(i=160;i<247;i++)
   db136:	f8d8 3000 	ldr.w	r3, [r8]
   db13a:	3301      	adds	r3, #1
   db13c:	f8c8 3000 	str.w	r3, [r8]
   db140:	e7ed      	b.n	db11e <_Z9myHandlerPKcS0_+0x116>
        {
            strip.setPixelColor(i,0,0,0);
        }
        condition(cid,160);
   db142:	21a0      	movs	r1, #160	; 0xa0
   db144:	6830      	ldr	r0, [r6, #0]
   db146:	f7fe f98f 	bl	d9468 <_Z9conditionii>
        strip.show();
   db14a:	4832      	ldr	r0, [pc, #200]	; (db214 <_Z9myHandlerPKcS0_+0x20c>)
   db14c:	f003 fab6 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0;i<100;i++)
   db150:	2300      	movs	r3, #0
   db152:	602b      	str	r3, [r5, #0]
   db154:	6823      	ldr	r3, [r4, #0]
   db156:	2b63      	cmp	r3, #99	; 0x63
   db158:	dc0b      	bgt.n	db172 <_Z9myHandlerPKcS0_+0x16a>
        {
            sound(300, 250);
   db15a:	21fa      	movs	r1, #250	; 0xfa
   db15c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   db160:	f7f9 f933 	bl	d43ca <_Z5soundii>
            delay(250);
   db164:	20fa      	movs	r0, #250	; 0xfa
   db166:	f004 fd37 	bl	dfbd8 <delay>
        {
            strip.setPixelColor(i,0,0,0);
        }
        condition(cid,160);
        strip.show();
        for(i=0;i<100;i++)
   db16a:	682b      	ldr	r3, [r5, #0]
   db16c:	3301      	adds	r3, #1
   db16e:	602b      	str	r3, [r5, #0]
   db170:	e7f0      	b.n	db154 <_Z9myHandlerPKcS0_+0x14c>
        {
            sound(300, 250);
            delay(250);
        }
    }
    HC1 = humidity/10;
   db172:	4b29      	ldr	r3, [pc, #164]	; (db218 <_Z9myHandlerPKcS0_+0x210>)
   db174:	240a      	movs	r4, #10
   db176:	fb97 f0f4 	sdiv	r0, r7, r4
   db17a:	6018      	str	r0, [r3, #0]
    HC2 = humidity%10;
   db17c:	4b27      	ldr	r3, [pc, #156]	; (db21c <_Z9myHandlerPKcS0_+0x214>)
   db17e:	fb04 7010 	mls	r0, r4, r0, r7
   db182:	6018      	str	r0, [r3, #0]
    tempK = atof(tempdata);
   db184:	a804      	add	r0, sp, #16
   db186:	f006 feb1 	bl	e1eec <atof>
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
   db18a:	ec51 0b10 	vmov	r0, r1, d0
   db18e:	f006 fe5d 	bl	e1e4c <__aeabi_d2f>
   db192:	f006 fb25 	bl	e17e0 <__aeabi_f2d>
   db196:	a318      	add	r3, pc, #96	; (adr r3, db1f8 <_Z9myHandlerPKcS0_+0x1f0>)
   db198:	e9d3 2300 	ldrd	r2, r3, [r3]
   db19c:	f006 f9c0 	bl	e1520 <__aeabi_dsub>
   db1a0:	f006 fe54 	bl	e1e4c <__aeabi_d2f>
   db1a4:	f006 fb1c 	bl	e17e0 <__aeabi_f2d>
   db1a8:	a315      	add	r3, pc, #84	; (adr r3, db200 <_Z9myHandlerPKcS0_+0x1f8>)
   db1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   db1ae:	f006 fb6b 	bl	e1888 <__aeabi_dmul>
   db1b2:	2200      	movs	r2, #0
   db1b4:	4b1a      	ldr	r3, [pc, #104]	; (db220 <_Z9myHandlerPKcS0_+0x218>)
   db1b6:	f006 f9b5 	bl	e1524 <__adddf3>
   db1ba:	f006 fe47 	bl	e1e4c <__aeabi_d2f>
   db1be:	ee07 0a90 	vmov	s15, r0
   db1c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
   db1c6:	4b17      	ldr	r3, [pc, #92]	; (db224 <_Z9myHandlerPKcS0_+0x21c>)
    TC1 = TFahr/10;
   db1c8:	4a17      	ldr	r2, [pc, #92]	; (db228 <_Z9myHandlerPKcS0_+0x220>)
    HC1 = humidity/10;
    HC2 = humidity%10;
    tempK = atof(tempdata);
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
   db1ca:	edc3 7a00 	vstr	s15, [r3]
   db1ce:	ee17 0a90 	vmov	r0, s15
    TC1 = TFahr/10;
   db1d2:	fb90 f3f4 	sdiv	r3, r0, r4
   db1d6:	6013      	str	r3, [r2, #0]
    TC2 = TFahr%10;
   db1d8:	4a14      	ldr	r2, [pc, #80]	; (db22c <_Z9myHandlerPKcS0_+0x224>)
   db1da:	fb04 0313 	mls	r3, r4, r3, r0
    strip.show();
   db1de:	480d      	ldr	r0, [pc, #52]	; (db214 <_Z9myHandlerPKcS0_+0x20c>)
    tempK = atof(tempdata);
    tempC = tempK-273.15;
    tempF = (tempC*1.8)+32;
    TFahr = (int)tempF;
    TC1 = TFahr/10;
    TC2 = TFahr%10;
   db1e0:	6013      	str	r3, [r2, #0]
    strip.show();
   db1e2:	f003 fa6b 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
    delay(10);
   db1e6:	4620      	mov	r0, r4
   db1e8:	f004 fcf6 	bl	dfbd8 <delay>
}
   db1ec:	b007      	add	sp, #28
   db1ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   db1f2:	bf00      	nop
   db1f4:	f3af 8000 	nop.w
   db1f8:	66666666 	.word	0x66666666
   db1fc:	40711266 	.word	0x40711266
   db200:	cccccccd 	.word	0xcccccccd
   db204:	3ffccccc 	.word	0x3ffccccc
   db208:	2003e360 	.word	0x2003e360
   db20c:	2003e2e4 	.word	0x2003e2e4
   db210:	2003e33c 	.word	0x2003e33c
   db214:	2003e31c 	.word	0x2003e31c
   db218:	2003e2e8 	.word	0x2003e2e8
   db21c:	2003e2f0 	.word	0x2003e2f0
   db220:	40400000 	.word	0x40400000
   db224:	2003e358 	.word	0x2003e358
   db228:	2003e2f8 	.word	0x2003e2f8
   db22c:	2003e34c 	.word	0x2003e34c

000db230 <_Z5canimiib>:
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   db230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if(cnum > 199 && cnum < 235)
   db234:	f1a0 03c8 	sub.w	r3, r0, #200	; 0xc8
   db238:	2b22      	cmp	r3, #34	; 0x22
        {
            
        }
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
   db23a:	b091      	sub	sp, #68	; 0x44
   db23c:	4693      	mov	fp, r2
    if(cnum > 199 && cnum < 235)
   db23e:	f200 80d7 	bhi.w	db3f0 <_Z5canimiib+0x1c0>
    {
        strip.setPixelColor(inpix+28,0,0,0);
   db242:	b28c      	uxth	r4, r1
   db244:	f104 031c 	add.w	r3, r4, #28
   db248:	b29b      	uxth	r3, r3
   db24a:	2500      	movs	r5, #0
   db24c:	9303      	str	r3, [sp, #12]
        strip.setPixelColor(inpix+26,0,0,0);
   db24e:	f104 071a 	add.w	r7, r4, #26
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
   db252:	462b      	mov	r3, r5
   db254:	462a      	mov	r2, r5
   db256:	9903      	ldr	r1, [sp, #12]
   db258:	489c      	ldr	r0, [pc, #624]	; (db4cc <_Z5canimiib+0x29c>)
   db25a:	9500      	str	r5, [sp, #0]
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   db25c:	f104 0816 	add.w	r8, r4, #22
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db260:	b2bf      	uxth	r7, r7
    }
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
   db262:	f003 fbcd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   db266:	fa1f f888 	uxth.w	r8, r8
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db26a:	462b      	mov	r3, r5
   db26c:	462a      	mov	r2, r5
   db26e:	4639      	mov	r1, r7
   db270:	4896      	ldr	r0, [pc, #600]	; (db4cc <_Z5canimiib+0x29c>)
   db272:	9500      	str	r5, [sp, #0]
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
   db274:	3414      	adds	r4, #20
}                                        
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db276:	f003 fbc3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+20,0,0,0);
   db27a:	b2a4      	uxth	r4, r4
void canim(int cnum, int inpix, bool tmr){                      //Code block for displaying one animation of a weather condition such as rain
    if(cnum > 199 && cnum < 235)
    {
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+22,0,0,0);
   db27c:	462b      	mov	r3, r5
   db27e:	462a      	mov	r2, r5
   db280:	4641      	mov	r1, r8
   db282:	4892      	ldr	r0, [pc, #584]	; (db4cc <_Z5canimiib+0x29c>)
   db284:	9500      	str	r5, [sp, #0]
   db286:	f003 fbbb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   db28a:	9500      	str	r5, [sp, #0]
   db28c:	462b      	mov	r3, r5
   db28e:	462a      	mov	r2, r5
   db290:	4621      	mov	r1, r4
   db292:	488e      	ldr	r0, [pc, #568]	; (db4cc <_Z5canimiib+0x29c>)
   db294:	f003 fbb4 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(tmr)
   db298:	f1bb 0f00 	cmp.w	fp, #0
   db29c:	d01a      	beq.n	db2d4 <_Z5canimiib+0xa4>
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            strip.show();
   db29e:	488b      	ldr	r0, [pc, #556]	; (db4cc <_Z5canimiib+0x29c>)
   db2a0:	f003 fa0c 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            for(i=0; i<100; i++)
   db2a4:	4b8a      	ldr	r3, [pc, #552]	; (db4d0 <_Z5canimiib+0x2a0>)
   db2a6:	601d      	str	r5, [r3, #0]
   db2a8:	461d      	mov	r5, r3
   db2aa:	682b      	ldr	r3, [r5, #0]
   db2ac:	2b63      	cmp	r3, #99	; 0x63
   db2ae:	dc11      	bgt.n	db2d4 <_Z5canimiib+0xa4>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db2b0:	2000      	movs	r0, #0
   db2b2:	f005 ff47 	bl	e1144 <digitalRead>
   db2b6:	b948      	cbnz	r0, db2cc <_Z5canimiib+0x9c>
   db2b8:	2001      	movs	r0, #1
   db2ba:	f005 ff43 	bl	e1144 <digitalRead>
   db2be:	b928      	cbnz	r0, db2cc <_Z5canimiib+0x9c>
   db2c0:	2002      	movs	r0, #2
   db2c2:	f005 ff3f 	bl	e1144 <digitalRead>
   db2c6:	2800      	cmp	r0, #0
   db2c8:	f001 8146 	beq.w	dc558 <_Z5canimiib+0x1328>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            strip.show();
            for(i=0; i<100; i++)
   db2cc:	682b      	ldr	r3, [r5, #0]
   db2ce:	3301      	adds	r3, #1
   db2d0:	602b      	str	r3, [r5, #0]
   db2d2:	e7ea      	b.n	db2aa <_Z5canimiib+0x7a>
                {
                    delay(5);
                }
            }
        }
        strip.setPixelColor(inpix+28,rclock/1.2,gclock*2,0);
   db2d4:	f8df 9208 	ldr.w	r9, [pc, #520]	; db4e0 <_Z5canimiib+0x2b0>
   db2d8:	f8df a200 	ldr.w	sl, [pc, #512]	; db4dc <_Z5canimiib+0x2ac>
   db2dc:	f8d9 0000 	ldr.w	r0, [r9]
   db2e0:	f8da 6000 	ldr.w	r6, [sl]
   db2e4:	f006 fa6a 	bl	e17bc <__aeabi_i2d>
   db2e8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db2ec:	4b79      	ldr	r3, [pc, #484]	; (db4d4 <_Z5canimiib+0x2a4>)
   db2ee:	f006 fbf5 	bl	e1adc <__aeabi_ddiv>
   db2f2:	f006 fd8b 	bl	e1e0c <__aeabi_d2uiz>
   db2f6:	0076      	lsls	r6, r6, #1
   db2f8:	2500      	movs	r5, #0
   db2fa:	b2f6      	uxtb	r6, r6
   db2fc:	4633      	mov	r3, r6
   db2fe:	b2c2      	uxtb	r2, r0
   db300:	9903      	ldr	r1, [sp, #12]
   db302:	4872      	ldr	r0, [pc, #456]	; (db4cc <_Z5canimiib+0x29c>)
   db304:	9500      	str	r5, [sp, #0]
   db306:	f003 fb7b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db30a:	4870      	ldr	r0, [pc, #448]	; (db4cc <_Z5canimiib+0x29c>)
   db30c:	f003 f9d6 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db310:	200a      	movs	r0, #10
   db312:	f004 fc61 	bl	dfbd8 <delay>
        strip.setPixelColor(inpix+20,rclock/1.2,gclock*2,0);
   db316:	f8d9 0000 	ldr.w	r0, [r9]
   db31a:	f8da 6000 	ldr.w	r6, [sl]
   db31e:	f006 fa4d 	bl	e17bc <__aeabi_i2d>
   db322:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db326:	4b6b      	ldr	r3, [pc, #428]	; (db4d4 <_Z5canimiib+0x2a4>)
   db328:	f006 fbd8 	bl	e1adc <__aeabi_ddiv>
   db32c:	f006 fd6e 	bl	e1e0c <__aeabi_d2uiz>
   db330:	0076      	lsls	r6, r6, #1
   db332:	b2f6      	uxtb	r6, r6
   db334:	b2c2      	uxtb	r2, r0
   db336:	4633      	mov	r3, r6
   db338:	4621      	mov	r1, r4
   db33a:	4864      	ldr	r0, [pc, #400]	; (db4cc <_Z5canimiib+0x29c>)
   db33c:	9500      	str	r5, [sp, #0]
   db33e:	f003 fb5f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db342:	4862      	ldr	r0, [pc, #392]	; (db4cc <_Z5canimiib+0x29c>)
   db344:	f003 f9ba 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db348:	200a      	movs	r0, #10
   db34a:	f004 fc45 	bl	dfbd8 <delay>
        strip.setPixelColor(inpix+26,rclock/1.2,gclock*2,0);
   db34e:	f8d9 0000 	ldr.w	r0, [r9]
   db352:	f8da 4000 	ldr.w	r4, [sl]
   db356:	f006 fa31 	bl	e17bc <__aeabi_i2d>
   db35a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db35e:	4b5d      	ldr	r3, [pc, #372]	; (db4d4 <_Z5canimiib+0x2a4>)
   db360:	f006 fbbc 	bl	e1adc <__aeabi_ddiv>
   db364:	f006 fd52 	bl	e1e0c <__aeabi_d2uiz>
   db368:	0064      	lsls	r4, r4, #1
   db36a:	b2e4      	uxtb	r4, r4
   db36c:	4623      	mov	r3, r4
   db36e:	b2c2      	uxtb	r2, r0
   db370:	4639      	mov	r1, r7
   db372:	4856      	ldr	r0, [pc, #344]	; (db4cc <_Z5canimiib+0x29c>)
   db374:	9500      	str	r5, [sp, #0]
   db376:	f003 fb43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db37a:	4854      	ldr	r0, [pc, #336]	; (db4cc <_Z5canimiib+0x29c>)
   db37c:	f003 f99e 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(10);
   db380:	200a      	movs	r0, #10
   db382:	f004 fc29 	bl	dfbd8 <delay>
        strip.setPixelColor(inpix+22,rclock/1.2,gclock*2,0);
   db386:	f8d9 0000 	ldr.w	r0, [r9]
   db38a:	f8da 4000 	ldr.w	r4, [sl]
   db38e:	f006 fa15 	bl	e17bc <__aeabi_i2d>
   db392:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   db396:	4b4f      	ldr	r3, [pc, #316]	; (db4d4 <_Z5canimiib+0x2a4>)
   db398:	f006 fba0 	bl	e1adc <__aeabi_ddiv>
   db39c:	f006 fd36 	bl	e1e0c <__aeabi_d2uiz>
   db3a0:	0064      	lsls	r4, r4, #1
   db3a2:	b2e4      	uxtb	r4, r4
   db3a4:	b2c2      	uxtb	r2, r0
   db3a6:	9500      	str	r5, [sp, #0]
   db3a8:	4623      	mov	r3, r4
   db3aa:	4641      	mov	r1, r8
   db3ac:	4847      	ldr	r0, [pc, #284]	; (db4cc <_Z5canimiib+0x29c>)
   db3ae:	f003 fb27 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        if(tmr)
   db3b2:	f1bb 0f00 	cmp.w	fp, #0
   db3b6:	f001 812b 	beq.w	dc610 <_Z5canimiib+0x13e0>
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            strip.show();
            for(i=0; i<100; i++)
   db3ba:	4c45      	ldr	r4, [pc, #276]	; (db4d0 <_Z5canimiib+0x2a0>)
        strip.setPixelColor(inpix+22,rclock/1.2,gclock*2,0);
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            strip.show();
   db3bc:	4843      	ldr	r0, [pc, #268]	; (db4cc <_Z5canimiib+0x29c>)
   db3be:	f003 f97d 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            for(i=0; i<100; i++)
   db3c2:	6025      	str	r5, [r4, #0]
   db3c4:	6823      	ldr	r3, [r4, #0]
   db3c6:	2b63      	cmp	r3, #99	; 0x63
   db3c8:	f301 8122 	bgt.w	dc610 <_Z5canimiib+0x13e0>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db3cc:	2000      	movs	r0, #0
   db3ce:	f005 feb9 	bl	e1144 <digitalRead>
   db3d2:	b948      	cbnz	r0, db3e8 <_Z5canimiib+0x1b8>
   db3d4:	2001      	movs	r0, #1
   db3d6:	f005 feb5 	bl	e1144 <digitalRead>
   db3da:	b928      	cbnz	r0, db3e8 <_Z5canimiib+0x1b8>
   db3dc:	2002      	movs	r0, #2
   db3de:	f005 feb1 	bl	e1144 <digitalRead>
   db3e2:	2800      	cmp	r0, #0
   db3e4:	f001 80bd 	beq.w	dc562 <_Z5canimiib+0x1332>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            strip.show();
            for(i=0; i<100; i++)
   db3e8:	6823      	ldr	r3, [r4, #0]
   db3ea:	3301      	adds	r3, #1
   db3ec:	6023      	str	r3, [r4, #0]
   db3ee:	e7e9      	b.n	db3c4 <_Z5canimiib+0x194>
                    delay(5);
                }
            }
        }
    }
    else if(cnum > 299 && cnum < 322)
   db3f0:	f5a0 7396 	sub.w	r3, r0, #300	; 0x12c
   db3f4:	2b15      	cmp	r3, #21
   db3f6:	f200 8175 	bhi.w	db6e4 <_Z5canimiib+0x4b4>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   db3fa:	b28c      	uxth	r4, r1
   db3fc:	4e36      	ldr	r6, [pc, #216]	; (db4d8 <_Z5canimiib+0x2a8>)
   db3fe:	4d37      	ldr	r5, [pc, #220]	; (db4dc <_Z5canimiib+0x2ac>)
   db400:	7832      	ldrb	r2, [r6, #0]
   db402:	782b      	ldrb	r3, [r5, #0]
   db404:	4831      	ldr	r0, [pc, #196]	; (db4cc <_Z5canimiib+0x29c>)
   db406:	9200      	str	r2, [sp, #0]
   db408:	f104 080c 	add.w	r8, r4, #12
   db40c:	fa1f f888 	uxth.w	r8, r8
   db410:	2200      	movs	r2, #0
   db412:	4641      	mov	r1, r8
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db414:	f104 0a1b 	add.w	sl, r4, #27
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
   db418:	f003 faf2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db41c:	fa1f fa8a 	uxth.w	sl, sl
   db420:	7832      	ldrb	r2, [r6, #0]
   db422:	782b      	ldrb	r3, [r5, #0]
   db424:	4829      	ldr	r0, [pc, #164]	; (db4cc <_Z5canimiib+0x29c>)
   db426:	9200      	str	r2, [sp, #0]
   db428:	4651      	mov	r1, sl
   db42a:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   db42c:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock,bclock);
        //strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock,bclock);
   db430:	f003 fae6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,gclock/3,bclock);
        strip.setPixelColor(inpix+44,0,gclock,bclock);
   db434:	fa1f fb8b 	uxth.w	fp, fp
   db438:	7832      	ldrb	r2, [r6, #0]
   db43a:	782b      	ldrb	r3, [r5, #0]
   db43c:	4823      	ldr	r0, [pc, #140]	; (db4cc <_Z5canimiib+0x29c>)
   db43e:	9200      	str	r2, [sp, #0]
   db440:	4659      	mov	r1, fp
   db442:	2200      	movs	r2, #0
   db444:	f003 fadc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   db448:	f104 0309 	add.w	r3, r4, #9
   db44c:	b29b      	uxth	r3, r3
   db44e:	2700      	movs	r7, #0
   db450:	9303      	str	r3, [sp, #12]
   db452:	463a      	mov	r2, r7
   db454:	463b      	mov	r3, r7
   db456:	9903      	ldr	r1, [sp, #12]
   db458:	481c      	ldr	r0, [pc, #112]	; (db4cc <_Z5canimiib+0x29c>)
   db45a:	9700      	str	r7, [sp, #0]
   db45c:	f003 fad0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
   db460:	f104 031c 	add.w	r3, r4, #28
   db464:	b29b      	uxth	r3, r3
   db466:	9304      	str	r3, [sp, #16]
   db468:	463a      	mov	r2, r7
   db46a:	463b      	mov	r3, r7
   db46c:	9904      	ldr	r1, [sp, #16]
   db46e:	4817      	ldr	r0, [pc, #92]	; (db4cc <_Z5canimiib+0x29c>)
   db470:	9700      	str	r7, [sp, #0]
   db472:	f003 fac5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
   db476:	f104 0329 	add.w	r3, r4, #41	; 0x29
   db47a:	b29b      	uxth	r3, r3
   db47c:	9305      	str	r3, [sp, #20]
   db47e:	463a      	mov	r2, r7
   db480:	463b      	mov	r3, r7
   db482:	9905      	ldr	r1, [sp, #20]
   db484:	4811      	ldr	r0, [pc, #68]	; (db4cc <_Z5canimiib+0x29c>)
   db486:	9700      	str	r7, [sp, #0]
   db488:	f003 faba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db48c:	480f      	ldr	r0, [pc, #60]	; (db4cc <_Z5canimiib+0x29c>)
   db48e:	f003 f915 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db492:	4b0f      	ldr	r3, [pc, #60]	; (db4d0 <_Z5canimiib+0x2a0>)
   db494:	601f      	str	r7, [r3, #0]
   db496:	4699      	mov	r9, r3
   db498:	f8d9 3000 	ldr.w	r3, [r9]
   db49c:	4f0c      	ldr	r7, [pc, #48]	; (db4d0 <_Z5canimiib+0x2a0>)
   db49e:	2b31      	cmp	r3, #49	; 0x31
   db4a0:	dc20      	bgt.n	db4e4 <_Z5canimiib+0x2b4>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db4a2:	2000      	movs	r0, #0
   db4a4:	f005 fe4e 	bl	e1144 <digitalRead>
   db4a8:	b948      	cbnz	r0, db4be <_Z5canimiib+0x28e>
   db4aa:	2001      	movs	r0, #1
   db4ac:	f005 fe4a 	bl	e1144 <digitalRead>
   db4b0:	b928      	cbnz	r0, db4be <_Z5canimiib+0x28e>
   db4b2:	2002      	movs	r0, #2
   db4b4:	f005 fe46 	bl	e1144 <digitalRead>
   db4b8:	2800      	cmp	r0, #0
   db4ba:	f001 8057 	beq.w	dc56c <_Z5canimiib+0x133c>
        //strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        //strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db4be:	f8d9 3000 	ldr.w	r3, [r9]
   db4c2:	3301      	adds	r3, #1
   db4c4:	f8c9 3000 	str.w	r3, [r9]
   db4c8:	e7e6      	b.n	db498 <_Z5canimiib+0x268>
   db4ca:	bf00      	nop
   db4cc:	2003e31c 	.word	0x2003e31c
   db4d0:	2003e33c 	.word	0x2003e33c
   db4d4:	3ff33333 	.word	0x3ff33333
   db4d8:	2003e35c 	.word	0x2003e35c
   db4dc:	2003e314 	.word	0x2003e314
   db4e0:	2003e354 	.word	0x2003e354
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
   db4e4:	f104 030b 	add.w	r3, r4, #11
   db4e8:	b29b      	uxth	r3, r3
   db4ea:	9306      	str	r3, [sp, #24]
   db4ec:	7832      	ldrb	r2, [r6, #0]
   db4ee:	782b      	ldrb	r3, [r5, #0]
   db4f0:	9906      	ldr	r1, [sp, #24]
   db4f2:	9200      	str	r2, [sp, #0]
   db4f4:	4877      	ldr	r0, [pc, #476]	; (db6d4 <_Z5canimiib+0x4a4>)
   db4f6:	2200      	movs	r2, #0
   db4f8:	f003 fa82 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   db4fc:	f104 031a 	add.w	r3, r4, #26
   db500:	b29b      	uxth	r3, r3
   db502:	9307      	str	r3, [sp, #28]
   db504:	7832      	ldrb	r2, [r6, #0]
   db506:	782b      	ldrb	r3, [r5, #0]
   db508:	9907      	ldr	r1, [sp, #28]
   db50a:	9200      	str	r2, [sp, #0]
   db50c:	4871      	ldr	r0, [pc, #452]	; (db6d4 <_Z5canimiib+0x4a4>)
   db50e:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db510:	f104 092b 	add.w	r9, r4, #43	; 0x2b
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
   db514:	f003 fa74 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db518:	fa1f f989 	uxth.w	r9, r9
   db51c:	7832      	ldrb	r2, [r6, #0]
   db51e:	782b      	ldrb	r3, [r5, #0]
   db520:	486c      	ldr	r0, [pc, #432]	; (db6d4 <_Z5canimiib+0x4a4>)
   db522:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+12,0,0,0);
   db524:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+11,0,gclock,bclock);
        //strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock,bclock);
        //strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock,bclock);
   db526:	2200      	movs	r2, #0
   db528:	4649      	mov	r1, r9
   db52a:	f003 fa69 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   db52e:	462b      	mov	r3, r5
   db530:	462a      	mov	r2, r5
   db532:	9500      	str	r5, [sp, #0]
   db534:	4641      	mov	r1, r8
   db536:	4867      	ldr	r0, [pc, #412]	; (db6d4 <_Z5canimiib+0x4a4>)
   db538:	f003 fa62 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
   db53c:	462b      	mov	r3, r5
   db53e:	462a      	mov	r2, r5
   db540:	9500      	str	r5, [sp, #0]
   db542:	4651      	mov	r1, sl
   db544:	4863      	ldr	r0, [pc, #396]	; (db6d4 <_Z5canimiib+0x4a4>)
   db546:	f003 fa5b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
   db54a:	462b      	mov	r3, r5
   db54c:	462a      	mov	r2, r5
   db54e:	9500      	str	r5, [sp, #0]
   db550:	4659      	mov	r1, fp
   db552:	4860      	ldr	r0, [pc, #384]	; (db6d4 <_Z5canimiib+0x4a4>)
   db554:	f003 fa54 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db558:	485e      	ldr	r0, [pc, #376]	; (db6d4 <_Z5canimiib+0x4a4>)
   db55a:	f003 f8af 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db55e:	603d      	str	r5, [r7, #0]
   db560:	463d      	mov	r5, r7
   db562:	683b      	ldr	r3, [r7, #0]
   db564:	f8df 8178 	ldr.w	r8, [pc, #376]	; db6e0 <_Z5canimiib+0x4b0>
   db568:	2b31      	cmp	r3, #49	; 0x31
   db56a:	dc11      	bgt.n	db590 <_Z5canimiib+0x360>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db56c:	2000      	movs	r0, #0
   db56e:	f005 fde9 	bl	e1144 <digitalRead>
   db572:	b948      	cbnz	r0, db588 <_Z5canimiib+0x358>
   db574:	2001      	movs	r0, #1
   db576:	f005 fde5 	bl	e1144 <digitalRead>
   db57a:	b928      	cbnz	r0, db588 <_Z5canimiib+0x358>
   db57c:	2002      	movs	r0, #2
   db57e:	f005 fde1 	bl	e1144 <digitalRead>
   db582:	2800      	cmp	r0, #0
   db584:	f000 87f7 	beq.w	dc576 <_Z5canimiib+0x1346>
        //strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        //strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db588:	682b      	ldr	r3, [r5, #0]
   db58a:	3301      	adds	r3, #1
   db58c:	602b      	str	r3, [r5, #0]
   db58e:	e7e8      	b.n	db562 <_Z5canimiib+0x332>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   db590:	4f51      	ldr	r7, [pc, #324]	; (db6d8 <_Z5canimiib+0x4a8>)
   db592:	4e52      	ldr	r6, [pc, #328]	; (db6dc <_Z5canimiib+0x4ac>)
   db594:	783a      	ldrb	r2, [r7, #0]
   db596:	7833      	ldrb	r3, [r6, #0]
   db598:	484e      	ldr	r0, [pc, #312]	; (db6d4 <_Z5canimiib+0x4a4>)
   db59a:	9200      	str	r2, [sp, #0]
   db59c:	f104 0a0a 	add.w	sl, r4, #10
   db5a0:	fa1f fa8a 	uxth.w	sl, sl
   db5a4:	2200      	movs	r2, #0
   db5a6:	4651      	mov	r1, sl
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db5a8:	f104 0b19 	add.w	fp, r4, #25
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
   db5ac:	f003 fa28 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db5b0:	fa1f fb8b 	uxth.w	fp, fp
   db5b4:	783a      	ldrb	r2, [r7, #0]
   db5b6:	7833      	ldrb	r3, [r6, #0]
   db5b8:	4846      	ldr	r0, [pc, #280]	; (db6d4 <_Z5canimiib+0x4a4>)
   db5ba:	9200      	str	r2, [sp, #0]
   db5bc:	4659      	mov	r1, fp
   db5be:	2200      	movs	r2, #0
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db5c0:	342a      	adds	r4, #42	; 0x2a
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
   db5c2:	f003 fa1d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db5c6:	b2a4      	uxth	r4, r4
   db5c8:	783a      	ldrb	r2, [r7, #0]
   db5ca:	7833      	ldrb	r3, [r6, #0]
   db5cc:	4841      	ldr	r0, [pc, #260]	; (db6d4 <_Z5canimiib+0x4a4>)
   db5ce:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   db5d0:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+10,0,gclock,bclock);
        //strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock,bclock);
        //strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock,bclock);
   db5d2:	2200      	movs	r2, #0
   db5d4:	4621      	mov	r1, r4
   db5d6:	f003 fa13 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   db5da:	462b      	mov	r3, r5
   db5dc:	462a      	mov	r2, r5
   db5de:	9906      	ldr	r1, [sp, #24]
   db5e0:	483c      	ldr	r0, [pc, #240]	; (db6d4 <_Z5canimiib+0x4a4>)
   db5e2:	9500      	str	r5, [sp, #0]
   db5e4:	f003 fa0c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
   db5e8:	462b      	mov	r3, r5
   db5ea:	462a      	mov	r2, r5
   db5ec:	9907      	ldr	r1, [sp, #28]
   db5ee:	4839      	ldr	r0, [pc, #228]	; (db6d4 <_Z5canimiib+0x4a4>)
   db5f0:	9500      	str	r5, [sp, #0]
   db5f2:	f003 fa05 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
   db5f6:	4649      	mov	r1, r9
   db5f8:	462b      	mov	r3, r5
   db5fa:	462a      	mov	r2, r5
   db5fc:	4835      	ldr	r0, [pc, #212]	; (db6d4 <_Z5canimiib+0x4a4>)
   db5fe:	9500      	str	r5, [sp, #0]
   db600:	f003 f9fe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db604:	4833      	ldr	r0, [pc, #204]	; (db6d4 <_Z5canimiib+0x4a4>)
   db606:	f003 f859 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   db60a:	46c1      	mov	r9, r8
        for(i=0; i<50; i++)
   db60c:	f8c8 5000 	str.w	r5, [r8]
   db610:	f8d8 3000 	ldr.w	r3, [r8]
   db614:	4d32      	ldr	r5, [pc, #200]	; (db6e0 <_Z5canimiib+0x4b0>)
   db616:	2b31      	cmp	r3, #49	; 0x31
   db618:	dc13      	bgt.n	db642 <_Z5canimiib+0x412>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db61a:	2000      	movs	r0, #0
   db61c:	f005 fd92 	bl	e1144 <digitalRead>
   db620:	b948      	cbnz	r0, db636 <_Z5canimiib+0x406>
   db622:	2001      	movs	r0, #1
   db624:	f005 fd8e 	bl	e1144 <digitalRead>
   db628:	b928      	cbnz	r0, db636 <_Z5canimiib+0x406>
   db62a:	2002      	movs	r0, #2
   db62c:	f005 fd8a 	bl	e1144 <digitalRead>
   db630:	2800      	cmp	r0, #0
   db632:	f000 87a5 	beq.w	dc580 <_Z5canimiib+0x1350>
        //strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        //strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db636:	f8d9 3000 	ldr.w	r3, [r9]
   db63a:	3301      	adds	r3, #1
   db63c:	f8c9 3000 	str.w	r3, [r9]
   db640:	e7e6      	b.n	db610 <_Z5canimiib+0x3e0>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
   db642:	783a      	ldrb	r2, [r7, #0]
   db644:	7833      	ldrb	r3, [r6, #0]
   db646:	9903      	ldr	r1, [sp, #12]
   db648:	9200      	str	r2, [sp, #0]
   db64a:	4822      	ldr	r0, [pc, #136]	; (db6d4 <_Z5canimiib+0x4a4>)
   db64c:	2200      	movs	r2, #0
   db64e:	f003 f9d7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
   db652:	783a      	ldrb	r2, [r7, #0]
   db654:	7833      	ldrb	r3, [r6, #0]
   db656:	9904      	ldr	r1, [sp, #16]
   db658:	9200      	str	r2, [sp, #0]
   db65a:	481e      	ldr	r0, [pc, #120]	; (db6d4 <_Z5canimiib+0x4a4>)
   db65c:	2200      	movs	r2, #0
   db65e:	f003 f9cf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   db662:	783a      	ldrb	r2, [r7, #0]
   db664:	7833      	ldrb	r3, [r6, #0]
   db666:	9905      	ldr	r1, [sp, #20]
   db668:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   db66a:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+9,0,gclock,bclock);
        //strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock,bclock);
        //strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock,bclock);
   db66c:	2200      	movs	r2, #0
   db66e:	4819      	ldr	r0, [pc, #100]	; (db6d4 <_Z5canimiib+0x4a4>)
   db670:	f003 f9c6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   db674:	4633      	mov	r3, r6
   db676:	4632      	mov	r2, r6
   db678:	4651      	mov	r1, sl
   db67a:	4816      	ldr	r0, [pc, #88]	; (db6d4 <_Z5canimiib+0x4a4>)
   db67c:	9600      	str	r6, [sp, #0]
   db67e:	f003 f9bf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
   db682:	4633      	mov	r3, r6
   db684:	4632      	mov	r2, r6
   db686:	4659      	mov	r1, fp
   db688:	4812      	ldr	r0, [pc, #72]	; (db6d4 <_Z5canimiib+0x4a4>)
   db68a:	9600      	str	r6, [sp, #0]
   db68c:	f003 f9b8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
   db690:	4621      	mov	r1, r4
   db692:	4633      	mov	r3, r6
   db694:	4632      	mov	r2, r6
   db696:	480f      	ldr	r0, [pc, #60]	; (db6d4 <_Z5canimiib+0x4a4>)
   db698:	9600      	str	r6, [sp, #0]
   db69a:	f003 f9b1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db69e:	480d      	ldr	r0, [pc, #52]	; (db6d4 <_Z5canimiib+0x4a4>)
   db6a0:	f003 f80c 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   db6a4:	462c      	mov	r4, r5
        for(i=0; i<50; i++)
   db6a6:	602e      	str	r6, [r5, #0]
   db6a8:	682b      	ldr	r3, [r5, #0]
   db6aa:	2b31      	cmp	r3, #49	; 0x31
   db6ac:	f300 87b0 	bgt.w	dc610 <_Z5canimiib+0x13e0>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db6b0:	2000      	movs	r0, #0
   db6b2:	f005 fd47 	bl	e1144 <digitalRead>
   db6b6:	b948      	cbnz	r0, db6cc <_Z5canimiib+0x49c>
   db6b8:	2001      	movs	r0, #1
   db6ba:	f005 fd43 	bl	e1144 <digitalRead>
   db6be:	b928      	cbnz	r0, db6cc <_Z5canimiib+0x49c>
   db6c0:	2002      	movs	r0, #2
   db6c2:	f005 fd3f 	bl	e1144 <digitalRead>
   db6c6:	2800      	cmp	r0, #0
   db6c8:	f000 875f 	beq.w	dc58a <_Z5canimiib+0x135a>
        //strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        //strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db6cc:	6823      	ldr	r3, [r4, #0]
   db6ce:	3301      	adds	r3, #1
   db6d0:	6023      	str	r3, [r4, #0]
   db6d2:	e7e9      	b.n	db6a8 <_Z5canimiib+0x478>
   db6d4:	2003e31c 	.word	0x2003e31c
   db6d8:	2003e35c 	.word	0x2003e35c
   db6dc:	2003e314 	.word	0x2003e314
   db6e0:	2003e33c 	.word	0x2003e33c
            {
                delay(5);
            }
        }
    }
    else if(cnum > 499 && cnum < 533)
   db6e4:	f5a0 73fa 	sub.w	r3, r0, #500	; 0x1f4
   db6e8:	2b20      	cmp	r3, #32
   db6ea:	f200 824f 	bhi.w	dbb8c <_Z5canimiib+0x95c>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   db6ee:	b28c      	uxth	r4, r1
   db6f0:	4d97      	ldr	r5, [pc, #604]	; (db950 <_Z5canimiib+0x720>)
   db6f2:	4f98      	ldr	r7, [pc, #608]	; (db954 <_Z5canimiib+0x724>)
   db6f4:	782a      	ldrb	r2, [r5, #0]
   db6f6:	683b      	ldr	r3, [r7, #0]
   db6f8:	4897      	ldr	r0, [pc, #604]	; (db958 <_Z5canimiib+0x728>)
   db6fa:	9200      	str	r2, [sp, #0]
   db6fc:	f104 080c 	add.w	r8, r4, #12
   db700:	fa1f f888 	uxth.w	r8, r8
   db704:	2603      	movs	r6, #3
   db706:	2200      	movs	r2, #0
   db708:	fb93 f3f6 	sdiv	r3, r3, r6
   db70c:	4641      	mov	r1, r8
   db70e:	b2db      	uxtb	r3, r3
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db710:	f104 0916 	add.w	r9, r4, #22
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
   db714:	f003 f974 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db718:	fa1f f989 	uxth.w	r9, r9
   db71c:	782a      	ldrb	r2, [r5, #0]
   db71e:	683b      	ldr	r3, [r7, #0]
   db720:	488d      	ldr	r0, [pc, #564]	; (db958 <_Z5canimiib+0x728>)
   db722:	fb93 f3f6 	sdiv	r3, r3, r6
   db726:	9200      	str	r2, [sp, #0]
   db728:	b2db      	uxtb	r3, r3
   db72a:	2200      	movs	r2, #0
   db72c:	4649      	mov	r1, r9
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db72e:	f104 0a1b 	add.w	sl, r4, #27
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
   db732:	f003 f965 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db736:	fa1f fa8a 	uxth.w	sl, sl
   db73a:	782a      	ldrb	r2, [r5, #0]
   db73c:	683b      	ldr	r3, [r7, #0]
   db73e:	4886      	ldr	r0, [pc, #536]	; (db958 <_Z5canimiib+0x728>)
   db740:	fb93 f3f6 	sdiv	r3, r3, r6
   db744:	9200      	str	r2, [sp, #0]
   db746:	b2db      	uxtb	r3, r3
   db748:	2200      	movs	r2, #0
   db74a:	4651      	mov	r1, sl
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
   db74c:	f104 0b25 	add.w	fp, r4, #37	; 0x25
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,0,gclock/3,bclock);
        strip.setPixelColor(inpix+22,0,gclock/3,bclock);
        strip.setPixelColor(inpix+27,0,gclock/3,bclock);
   db750:	f003 f956 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,gclock/3,bclock);
   db754:	fa1f fb8b 	uxth.w	fp, fp
   db758:	782a      	ldrb	r2, [r5, #0]
   db75a:	683b      	ldr	r3, [r7, #0]
   db75c:	487e      	ldr	r0, [pc, #504]	; (db958 <_Z5canimiib+0x728>)
   db75e:	fb93 f3f6 	sdiv	r3, r3, r6
   db762:	9200      	str	r2, [sp, #0]
   db764:	b2db      	uxtb	r3, r3
   db766:	2200      	movs	r2, #0
   db768:	4659      	mov	r1, fp
   db76a:	f003 f949 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,gclock/3,bclock);
   db76e:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   db772:	b29b      	uxth	r3, r3
   db774:	782a      	ldrb	r2, [r5, #0]
   db776:	9303      	str	r3, [sp, #12]
   db778:	9903      	ldr	r1, [sp, #12]
   db77a:	683b      	ldr	r3, [r7, #0]
   db77c:	4876      	ldr	r0, [pc, #472]	; (db958 <_Z5canimiib+0x728>)
   db77e:	fb93 f3f6 	sdiv	r3, r3, r6
   db782:	9200      	str	r2, [sp, #0]
   db784:	b2db      	uxtb	r3, r3
   db786:	2200      	movs	r2, #0
   db788:	f003 f93a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   db78c:	f104 0309 	add.w	r3, r4, #9
   db790:	b29b      	uxth	r3, r3
   db792:	2600      	movs	r6, #0
   db794:	9304      	str	r3, [sp, #16]
   db796:	4632      	mov	r2, r6
   db798:	4633      	mov	r3, r6
   db79a:	9904      	ldr	r1, [sp, #16]
   db79c:	486e      	ldr	r0, [pc, #440]	; (db958 <_Z5canimiib+0x728>)
   db79e:	9600      	str	r6, [sp, #0]
   db7a0:	f003 f92e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   db7a4:	f104 0315 	add.w	r3, r4, #21
   db7a8:	b29b      	uxth	r3, r3
   db7aa:	9305      	str	r3, [sp, #20]
   db7ac:	4632      	mov	r2, r6
   db7ae:	4633      	mov	r3, r6
   db7b0:	9905      	ldr	r1, [sp, #20]
   db7b2:	4869      	ldr	r0, [pc, #420]	; (db958 <_Z5canimiib+0x728>)
   db7b4:	9600      	str	r6, [sp, #0]
   db7b6:	f003 f923 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   db7ba:	f104 031c 	add.w	r3, r4, #28
   db7be:	b29b      	uxth	r3, r3
   db7c0:	9306      	str	r3, [sp, #24]
   db7c2:	4632      	mov	r2, r6
   db7c4:	4633      	mov	r3, r6
   db7c6:	9906      	ldr	r1, [sp, #24]
   db7c8:	4863      	ldr	r0, [pc, #396]	; (db958 <_Z5canimiib+0x728>)
   db7ca:	9600      	str	r6, [sp, #0]
   db7cc:	f003 f918 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   db7d0:	f104 0324 	add.w	r3, r4, #36	; 0x24
   db7d4:	b29b      	uxth	r3, r3
   db7d6:	9307      	str	r3, [sp, #28]
   db7d8:	4632      	mov	r2, r6
   db7da:	4633      	mov	r3, r6
   db7dc:	9907      	ldr	r1, [sp, #28]
   db7de:	485e      	ldr	r0, [pc, #376]	; (db958 <_Z5canimiib+0x728>)
   db7e0:	9600      	str	r6, [sp, #0]
   db7e2:	f003 f90d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   db7e6:	f104 0329 	add.w	r3, r4, #41	; 0x29
   db7ea:	b29b      	uxth	r3, r3
   db7ec:	9308      	str	r3, [sp, #32]
   db7ee:	4632      	mov	r2, r6
   db7f0:	4633      	mov	r3, r6
   db7f2:	9908      	ldr	r1, [sp, #32]
   db7f4:	4858      	ldr	r0, [pc, #352]	; (db958 <_Z5canimiib+0x728>)
   db7f6:	9600      	str	r6, [sp, #0]
        strip.show();
        for(i=0; i<50; i++)
   db7f8:	4d58      	ldr	r5, [pc, #352]	; (db95c <_Z5canimiib+0x72c>)
        strip.setPixelColor(inpix+44,0,gclock/3,bclock);
        strip.setPixelColor(inpix+9,0,0,0);
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
   db7fa:	f003 f901 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db7fe:	4856      	ldr	r0, [pc, #344]	; (db958 <_Z5canimiib+0x728>)
   db800:	f002 ff5c 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db804:	602e      	str	r6, [r5, #0]
   db806:	682b      	ldr	r3, [r5, #0]
   db808:	2b31      	cmp	r3, #49	; 0x31
   db80a:	dc11      	bgt.n	db830 <_Z5canimiib+0x600>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db80c:	2000      	movs	r0, #0
   db80e:	f005 fc99 	bl	e1144 <digitalRead>
   db812:	b948      	cbnz	r0, db828 <_Z5canimiib+0x5f8>
   db814:	2001      	movs	r0, #1
   db816:	f005 fc95 	bl	e1144 <digitalRead>
   db81a:	b928      	cbnz	r0, db828 <_Z5canimiib+0x5f8>
   db81c:	2002      	movs	r0, #2
   db81e:	f005 fc91 	bl	e1144 <digitalRead>
   db822:	2800      	cmp	r0, #0
   db824:	f000 86b6 	beq.w	dc594 <_Z5canimiib+0x1364>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db828:	682b      	ldr	r3, [r5, #0]
   db82a:	3301      	adds	r3, #1
   db82c:	602b      	str	r3, [r5, #0]
   db82e:	e7ea      	b.n	db806 <_Z5canimiib+0x5d6>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
   db830:	4e47      	ldr	r6, [pc, #284]	; (db950 <_Z5canimiib+0x720>)
   db832:	4d48      	ldr	r5, [pc, #288]	; (db954 <_Z5canimiib+0x724>)
   db834:	7832      	ldrb	r2, [r6, #0]
   db836:	4848      	ldr	r0, [pc, #288]	; (db958 <_Z5canimiib+0x728>)
   db838:	f104 030b 	add.w	r3, r4, #11
   db83c:	b29b      	uxth	r3, r3
   db83e:	9309      	str	r3, [sp, #36]	; 0x24
   db840:	2703      	movs	r7, #3
   db842:	682b      	ldr	r3, [r5, #0]
   db844:	9909      	ldr	r1, [sp, #36]	; 0x24
   db846:	fb93 f3f7 	sdiv	r3, r3, r7
   db84a:	9200      	str	r2, [sp, #0]
   db84c:	b2db      	uxtb	r3, r3
   db84e:	2200      	movs	r2, #0
   db850:	f003 f8d6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
   db854:	f104 0313 	add.w	r3, r4, #19
   db858:	b29b      	uxth	r3, r3
   db85a:	7832      	ldrb	r2, [r6, #0]
   db85c:	930a      	str	r3, [sp, #40]	; 0x28
   db85e:	990a      	ldr	r1, [sp, #40]	; 0x28
   db860:	682b      	ldr	r3, [r5, #0]
   db862:	483d      	ldr	r0, [pc, #244]	; (db958 <_Z5canimiib+0x728>)
   db864:	fb93 f3f7 	sdiv	r3, r3, r7
   db868:	9200      	str	r2, [sp, #0]
   db86a:	b2db      	uxtb	r3, r3
   db86c:	2200      	movs	r2, #0
   db86e:	f003 f8c7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
   db872:	f104 031a 	add.w	r3, r4, #26
   db876:	b29b      	uxth	r3, r3
   db878:	7832      	ldrb	r2, [r6, #0]
   db87a:	930b      	str	r3, [sp, #44]	; 0x2c
   db87c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   db87e:	682b      	ldr	r3, [r5, #0]
   db880:	4835      	ldr	r0, [pc, #212]	; (db958 <_Z5canimiib+0x728>)
   db882:	fb93 f3f7 	sdiv	r3, r3, r7
   db886:	9200      	str	r2, [sp, #0]
   db888:	b2db      	uxtb	r3, r3
   db88a:	2200      	movs	r2, #0
   db88c:	f003 f8b8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
   db890:	f104 0326 	add.w	r3, r4, #38	; 0x26
   db894:	b29b      	uxth	r3, r3
   db896:	7832      	ldrb	r2, [r6, #0]
   db898:	930c      	str	r3, [sp, #48]	; 0x30
   db89a:	990c      	ldr	r1, [sp, #48]	; 0x30
   db89c:	682b      	ldr	r3, [r5, #0]
   db89e:	482e      	ldr	r0, [pc, #184]	; (db958 <_Z5canimiib+0x728>)
   db8a0:	fb93 f3f7 	sdiv	r3, r3, r7
   db8a4:	9200      	str	r2, [sp, #0]
   db8a6:	b2db      	uxtb	r3, r3
   db8a8:	2200      	movs	r2, #0
   db8aa:	f003 f8a9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   db8ae:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   db8b2:	b29b      	uxth	r3, r3
   db8b4:	7832      	ldrb	r2, [r6, #0]
   db8b6:	930d      	str	r3, [sp, #52]	; 0x34
        strip.setPixelColor(inpix+12,0,0,0);
   db8b8:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,0,gclock/3,bclock);
        strip.setPixelColor(inpix+19,0,gclock/3,bclock);
        strip.setPixelColor(inpix+26,0,gclock/3,bclock);
        strip.setPixelColor(inpix+38,0,gclock/3,bclock);
        strip.setPixelColor(inpix+43,0,gclock/3,bclock);
   db8ba:	682b      	ldr	r3, [r5, #0]
   db8bc:	990d      	ldr	r1, [sp, #52]	; 0x34
   db8be:	fb93 f3f7 	sdiv	r3, r3, r7
   db8c2:	9200      	str	r2, [sp, #0]
   db8c4:	b2db      	uxtb	r3, r3
   db8c6:	2200      	movs	r2, #0
   db8c8:	4823      	ldr	r0, [pc, #140]	; (db958 <_Z5canimiib+0x728>)
   db8ca:	f003 f899 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   db8ce:	4633      	mov	r3, r6
   db8d0:	4632      	mov	r2, r6
   db8d2:	9600      	str	r6, [sp, #0]
   db8d4:	4641      	mov	r1, r8
   db8d6:	4820      	ldr	r0, [pc, #128]	; (db958 <_Z5canimiib+0x728>)
   db8d8:	f003 f892 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   db8dc:	4633      	mov	r3, r6
   db8de:	4632      	mov	r2, r6
   db8e0:	9600      	str	r6, [sp, #0]
   db8e2:	4649      	mov	r1, r9
   db8e4:	481c      	ldr	r0, [pc, #112]	; (db958 <_Z5canimiib+0x728>)
   db8e6:	f003 f88b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   db8ea:	4633      	mov	r3, r6
   db8ec:	4632      	mov	r2, r6
   db8ee:	9600      	str	r6, [sp, #0]
   db8f0:	4651      	mov	r1, sl
   db8f2:	4819      	ldr	r0, [pc, #100]	; (db958 <_Z5canimiib+0x728>)
   db8f4:	f003 f884 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   db8f8:	4633      	mov	r3, r6
   db8fa:	4632      	mov	r2, r6
   db8fc:	9600      	str	r6, [sp, #0]
   db8fe:	4659      	mov	r1, fp
   db900:	4815      	ldr	r0, [pc, #84]	; (db958 <_Z5canimiib+0x728>)
   db902:	f003 f87d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   db906:	4633      	mov	r3, r6
   db908:	4632      	mov	r2, r6
   db90a:	9600      	str	r6, [sp, #0]
   db90c:	9903      	ldr	r1, [sp, #12]
   db90e:	4812      	ldr	r0, [pc, #72]	; (db958 <_Z5canimiib+0x728>)
   db910:	f003 f876 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   db914:	4810      	ldr	r0, [pc, #64]	; (db958 <_Z5canimiib+0x728>)
   db916:	f002 fed1 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   db91a:	4b10      	ldr	r3, [pc, #64]	; (db95c <_Z5canimiib+0x72c>)
   db91c:	601e      	str	r6, [r3, #0]
   db91e:	461f      	mov	r7, r3
   db920:	461e      	mov	r6, r3
   db922:	6833      	ldr	r3, [r6, #0]
   db924:	f8df b034 	ldr.w	fp, [pc, #52]	; db95c <_Z5canimiib+0x72c>
   db928:	2b31      	cmp	r3, #49	; 0x31
   db92a:	dc19      	bgt.n	db960 <_Z5canimiib+0x730>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   db92c:	2000      	movs	r0, #0
   db92e:	f005 fc09 	bl	e1144 <digitalRead>
   db932:	b948      	cbnz	r0, db948 <_Z5canimiib+0x718>
   db934:	2001      	movs	r0, #1
   db936:	f005 fc05 	bl	e1144 <digitalRead>
   db93a:	b928      	cbnz	r0, db948 <_Z5canimiib+0x718>
   db93c:	2002      	movs	r0, #2
   db93e:	f005 fc01 	bl	e1144 <digitalRead>
   db942:	2800      	cmp	r0, #0
   db944:	f000 862b 	beq.w	dc59e <_Z5canimiib+0x136e>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   db948:	683b      	ldr	r3, [r7, #0]
   db94a:	3301      	adds	r3, #1
   db94c:	603b      	str	r3, [r7, #0]
   db94e:	e7e8      	b.n	db922 <_Z5canimiib+0x6f2>
   db950:	2003e35c 	.word	0x2003e35c
   db954:	2003e314 	.word	0x2003e314
   db958:	2003e31c 	.word	0x2003e31c
   db95c:	2003e33c 	.word	0x2003e33c
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
   db960:	4e86      	ldr	r6, [pc, #536]	; (dbb7c <_Z5canimiib+0x94c>)
   db962:	4887      	ldr	r0, [pc, #540]	; (dbb80 <_Z5canimiib+0x950>)
   db964:	7832      	ldrb	r2, [r6, #0]
   db966:	f104 030a 	add.w	r3, r4, #10
   db96a:	b29b      	uxth	r3, r3
   db96c:	9303      	str	r3, [sp, #12]
   db96e:	f04f 0a03 	mov.w	sl, #3
   db972:	682b      	ldr	r3, [r5, #0]
   db974:	9903      	ldr	r1, [sp, #12]
   db976:	fb93 f3fa 	sdiv	r3, r3, sl
   db97a:	9200      	str	r2, [sp, #0]
   db97c:	b2db      	uxtb	r3, r3
   db97e:	2200      	movs	r2, #0
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   db980:	f104 0714 	add.w	r7, r4, #20
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
   db984:	f003 f83c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   db988:	b2bf      	uxth	r7, r7
   db98a:	7832      	ldrb	r2, [r6, #0]
   db98c:	682b      	ldr	r3, [r5, #0]
   db98e:	487c      	ldr	r0, [pc, #496]	; (dbb80 <_Z5canimiib+0x950>)
   db990:	fb93 f3fa 	sdiv	r3, r3, sl
   db994:	9200      	str	r2, [sp, #0]
   db996:	b2db      	uxtb	r3, r3
   db998:	2200      	movs	r2, #0
   db99a:	4639      	mov	r1, r7
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   db99c:	f104 0819 	add.w	r8, r4, #25
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
   db9a0:	f003 f82e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   db9a4:	fa1f f888 	uxth.w	r8, r8
   db9a8:	7832      	ldrb	r2, [r6, #0]
   db9aa:	682b      	ldr	r3, [r5, #0]
   db9ac:	4874      	ldr	r0, [pc, #464]	; (dbb80 <_Z5canimiib+0x950>)
   db9ae:	fb93 f3fa 	sdiv	r3, r3, sl
   db9b2:	9200      	str	r2, [sp, #0]
   db9b4:	b2db      	uxtb	r3, r3
   db9b6:	2200      	movs	r2, #0
   db9b8:	4641      	mov	r1, r8
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db9ba:	f104 0923 	add.w	r9, r4, #35	; 0x23
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
   db9be:	f003 f81f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db9c2:	fa1f f989 	uxth.w	r9, r9
   db9c6:	7832      	ldrb	r2, [r6, #0]
   db9c8:	682b      	ldr	r3, [r5, #0]
   db9ca:	486d      	ldr	r0, [pc, #436]	; (dbb80 <_Z5canimiib+0x950>)
   db9cc:	fb93 f3fa 	sdiv	r3, r3, sl
   db9d0:	9200      	str	r2, [sp, #0]
   db9d2:	b2db      	uxtb	r3, r3
   db9d4:	2200      	movs	r2, #0
   db9d6:	4649      	mov	r1, r9
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db9d8:	342a      	adds	r4, #42	; 0x2a
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
   db9da:	f003 f811 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db9de:	b2a4      	uxth	r4, r4
   db9e0:	7832      	ldrb	r2, [r6, #0]
   db9e2:	682b      	ldr	r3, [r5, #0]
   db9e4:	4866      	ldr	r0, [pc, #408]	; (dbb80 <_Z5canimiib+0x950>)
   db9e6:	fb93 f3fa 	sdiv	r3, r3, sl
        strip.setPixelColor(inpix+11,0,0,0);
   db9ea:	2500      	movs	r5, #0
        }
        strip.setPixelColor(inpix+10,0,gclock/3,bclock);
        strip.setPixelColor(inpix+20,0,gclock/3,bclock);
        strip.setPixelColor(inpix+25,0,gclock/3,bclock);
        strip.setPixelColor(inpix+35,0,gclock/3,bclock);
        strip.setPixelColor(inpix+42,0,gclock/3,bclock);
   db9ec:	9200      	str	r2, [sp, #0]
   db9ee:	b2db      	uxtb	r3, r3
   db9f0:	2200      	movs	r2, #0
   db9f2:	4621      	mov	r1, r4
   db9f4:	f003 f804 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   db9f8:	462b      	mov	r3, r5
   db9fa:	462a      	mov	r2, r5
   db9fc:	9909      	ldr	r1, [sp, #36]	; 0x24
   db9fe:	4860      	ldr	r0, [pc, #384]	; (dbb80 <_Z5canimiib+0x950>)
   dba00:	9500      	str	r5, [sp, #0]
   dba02:	f002 fffd 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   dba06:	462b      	mov	r3, r5
   dba08:	462a      	mov	r2, r5
   dba0a:	990a      	ldr	r1, [sp, #40]	; 0x28
   dba0c:	485c      	ldr	r0, [pc, #368]	; (dbb80 <_Z5canimiib+0x950>)
   dba0e:	9500      	str	r5, [sp, #0]
   dba10:	f002 fff6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   dba14:	462b      	mov	r3, r5
   dba16:	462a      	mov	r2, r5
   dba18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dba1a:	4859      	ldr	r0, [pc, #356]	; (dbb80 <_Z5canimiib+0x950>)
   dba1c:	9500      	str	r5, [sp, #0]
   dba1e:	f002 ffef 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   dba22:	462b      	mov	r3, r5
   dba24:	462a      	mov	r2, r5
   dba26:	990c      	ldr	r1, [sp, #48]	; 0x30
   dba28:	4855      	ldr	r0, [pc, #340]	; (dbb80 <_Z5canimiib+0x950>)
   dba2a:	9500      	str	r5, [sp, #0]
   dba2c:	f002 ffe8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   dba30:	462b      	mov	r3, r5
   dba32:	462a      	mov	r2, r5
   dba34:	990d      	ldr	r1, [sp, #52]	; 0x34
   dba36:	4852      	ldr	r0, [pc, #328]	; (dbb80 <_Z5canimiib+0x950>)
   dba38:	9500      	str	r5, [sp, #0]
   dba3a:	f002 ffe1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dba3e:	4850      	ldr	r0, [pc, #320]	; (dbb80 <_Z5canimiib+0x950>)
   dba40:	f002 fe3c 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dba44:	46da      	mov	sl, fp
   dba46:	f8cb 5000 	str.w	r5, [fp]
   dba4a:	f8da 3000 	ldr.w	r3, [sl]
   dba4e:	4d4d      	ldr	r5, [pc, #308]	; (dbb84 <_Z5canimiib+0x954>)
   dba50:	2b31      	cmp	r3, #49	; 0x31
   dba52:	dc13      	bgt.n	dba7c <_Z5canimiib+0x84c>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dba54:	2000      	movs	r0, #0
   dba56:	f005 fb75 	bl	e1144 <digitalRead>
   dba5a:	b948      	cbnz	r0, dba70 <_Z5canimiib+0x840>
   dba5c:	2001      	movs	r0, #1
   dba5e:	f005 fb71 	bl	e1144 <digitalRead>
   dba62:	b928      	cbnz	r0, dba70 <_Z5canimiib+0x840>
   dba64:	2002      	movs	r0, #2
   dba66:	f005 fb6d 	bl	e1144 <digitalRead>
   dba6a:	2800      	cmp	r0, #0
   dba6c:	f000 859c 	beq.w	dc5a8 <_Z5canimiib+0x1378>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dba70:	f8db 3000 	ldr.w	r3, [fp]
   dba74:	3301      	adds	r3, #1
   dba76:	f8cb 3000 	str.w	r3, [fp]
   dba7a:	e7e6      	b.n	dba4a <_Z5canimiib+0x81a>
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
   dba7c:	f8df b108 	ldr.w	fp, [pc, #264]	; dbb88 <_Z5canimiib+0x958>
   dba80:	7832      	ldrb	r2, [r6, #0]
   dba82:	f8db 3000 	ldr.w	r3, [fp]
   dba86:	9904      	ldr	r1, [sp, #16]
   dba88:	9200      	str	r2, [sp, #0]
   dba8a:	f04f 0a03 	mov.w	sl, #3
   dba8e:	2200      	movs	r2, #0
   dba90:	483b      	ldr	r0, [pc, #236]	; (dbb80 <_Z5canimiib+0x950>)
   dba92:	fb93 f3fa 	sdiv	r3, r3, sl
   dba96:	b2db      	uxtb	r3, r3
   dba98:	f002 ffb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
   dba9c:	7832      	ldrb	r2, [r6, #0]
   dba9e:	f8db 3000 	ldr.w	r3, [fp]
   dbaa2:	9905      	ldr	r1, [sp, #20]
   dbaa4:	9200      	str	r2, [sp, #0]
   dbaa6:	4836      	ldr	r0, [pc, #216]	; (dbb80 <_Z5canimiib+0x950>)
   dbaa8:	fb93 f3fa 	sdiv	r3, r3, sl
   dbaac:	2200      	movs	r2, #0
   dbaae:	b2db      	uxtb	r3, r3
   dbab0:	f002 ffa6 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
   dbab4:	7832      	ldrb	r2, [r6, #0]
   dbab6:	f8db 3000 	ldr.w	r3, [fp]
   dbaba:	9906      	ldr	r1, [sp, #24]
   dbabc:	9200      	str	r2, [sp, #0]
   dbabe:	4830      	ldr	r0, [pc, #192]	; (dbb80 <_Z5canimiib+0x950>)
   dbac0:	fb93 f3fa 	sdiv	r3, r3, sl
   dbac4:	2200      	movs	r2, #0
   dbac6:	b2db      	uxtb	r3, r3
   dbac8:	f002 ff9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
   dbacc:	7832      	ldrb	r2, [r6, #0]
   dbace:	f8db 3000 	ldr.w	r3, [fp]
   dbad2:	9907      	ldr	r1, [sp, #28]
   dbad4:	9200      	str	r2, [sp, #0]
   dbad6:	482a      	ldr	r0, [pc, #168]	; (dbb80 <_Z5canimiib+0x950>)
   dbad8:	fb93 f3fa 	sdiv	r3, r3, sl
   dbadc:	2200      	movs	r2, #0
   dbade:	b2db      	uxtb	r3, r3
   dbae0:	f002 ff8e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   dbae4:	7832      	ldrb	r2, [r6, #0]
   dbae6:	f8db 3000 	ldr.w	r3, [fp]
   dbaea:	9908      	ldr	r1, [sp, #32]
   dbaec:	9200      	str	r2, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dbaee:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+9,0,gclock/3,bclock);
        strip.setPixelColor(inpix+21,0,gclock/3,bclock);
        strip.setPixelColor(inpix+28,0,gclock/3,bclock);
        strip.setPixelColor(inpix+36,0,gclock/3,bclock);
        strip.setPixelColor(inpix+41,0,gclock/3,bclock);
   dbaf0:	2200      	movs	r2, #0
   dbaf2:	4823      	ldr	r0, [pc, #140]	; (dbb80 <_Z5canimiib+0x950>)
   dbaf4:	fb93 f3fa 	sdiv	r3, r3, sl
   dbaf8:	b2db      	uxtb	r3, r3
   dbafa:	f002 ff81 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dbafe:	4633      	mov	r3, r6
   dbb00:	4632      	mov	r2, r6
   dbb02:	9903      	ldr	r1, [sp, #12]
   dbb04:	481e      	ldr	r0, [pc, #120]	; (dbb80 <_Z5canimiib+0x950>)
   dbb06:	9600      	str	r6, [sp, #0]
   dbb08:	f002 ff7a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   dbb0c:	4633      	mov	r3, r6
   dbb0e:	4632      	mov	r2, r6
   dbb10:	4639      	mov	r1, r7
   dbb12:	481b      	ldr	r0, [pc, #108]	; (dbb80 <_Z5canimiib+0x950>)
   dbb14:	9600      	str	r6, [sp, #0]
   dbb16:	f002 ff73 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   dbb1a:	4633      	mov	r3, r6
   dbb1c:	4632      	mov	r2, r6
   dbb1e:	4641      	mov	r1, r8
   dbb20:	4817      	ldr	r0, [pc, #92]	; (dbb80 <_Z5canimiib+0x950>)
   dbb22:	9600      	str	r6, [sp, #0]
   dbb24:	f002 ff6c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   dbb28:	4633      	mov	r3, r6
   dbb2a:	4632      	mov	r2, r6
   dbb2c:	4649      	mov	r1, r9
   dbb2e:	4814      	ldr	r0, [pc, #80]	; (dbb80 <_Z5canimiib+0x950>)
   dbb30:	9600      	str	r6, [sp, #0]
   dbb32:	f002 ff65 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   dbb36:	4621      	mov	r1, r4
   dbb38:	4633      	mov	r3, r6
   dbb3a:	4632      	mov	r2, r6
   dbb3c:	4810      	ldr	r0, [pc, #64]	; (dbb80 <_Z5canimiib+0x950>)
   dbb3e:	9600      	str	r6, [sp, #0]
   dbb40:	f002 ff5e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbb44:	480e      	ldr	r0, [pc, #56]	; (dbb80 <_Z5canimiib+0x950>)
   dbb46:	f002 fdb9 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   dbb4a:	462c      	mov	r4, r5
        for(i=0; i<50; i++)
   dbb4c:	602e      	str	r6, [r5, #0]
   dbb4e:	682b      	ldr	r3, [r5, #0]
   dbb50:	2b31      	cmp	r3, #49	; 0x31
   dbb52:	f300 855d 	bgt.w	dc610 <_Z5canimiib+0x13e0>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbb56:	2000      	movs	r0, #0
   dbb58:	f005 faf4 	bl	e1144 <digitalRead>
   dbb5c:	b948      	cbnz	r0, dbb72 <_Z5canimiib+0x942>
   dbb5e:	2001      	movs	r0, #1
   dbb60:	f005 faf0 	bl	e1144 <digitalRead>
   dbb64:	b928      	cbnz	r0, dbb72 <_Z5canimiib+0x942>
   dbb66:	2002      	movs	r0, #2
   dbb68:	f005 faec 	bl	e1144 <digitalRead>
   dbb6c:	2800      	cmp	r0, #0
   dbb6e:	f000 8520 	beq.w	dc5b2 <_Z5canimiib+0x1382>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbb72:	6823      	ldr	r3, [r4, #0]
   dbb74:	3301      	adds	r3, #1
   dbb76:	6023      	str	r3, [r4, #0]
   dbb78:	e7e9      	b.n	dbb4e <_Z5canimiib+0x91e>
   dbb7a:	bf00      	nop
   dbb7c:	2003e35c 	.word	0x2003e35c
   dbb80:	2003e31c 	.word	0x2003e31c
   dbb84:	2003e33c 	.word	0x2003e33c
   dbb88:	2003e314 	.word	0x2003e314
            {
                delay(5);
            }
        }
    }
    else if(cnum > 599 && cnum < 630)
   dbb8c:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   dbb90:	281d      	cmp	r0, #29
   dbb92:	f200 84a7 	bhi.w	dc4e4 <_Z5canimiib+0x12b4>
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
        }
        strip.setPixelColor(inpix+12,rclock*1.5,gclock*1.5,bclock*1.8);
   dbb96:	4f9a      	ldr	r7, [pc, #616]	; (dbe00 <_Z5canimiib+0xbd0>)
   dbb98:	4e9a      	ldr	r6, [pc, #616]	; (dbe04 <_Z5canimiib+0xbd4>)
   dbb9a:	6838      	ldr	r0, [r7, #0]
   dbb9c:	4d9a      	ldr	r5, [pc, #616]	; (dbe08 <_Z5canimiib+0xbd8>)
   dbb9e:	b28c      	uxth	r4, r1
   dbba0:	f005 fe0c 	bl	e17bc <__aeabi_i2d>
   dbba4:	2200      	movs	r2, #0
   dbba6:	4b99      	ldr	r3, [pc, #612]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbba8:	f005 fe6e 	bl	e1888 <__aeabi_dmul>
   dbbac:	f006 f92e 	bl	e1e0c <__aeabi_d2uiz>
   dbbb0:	fa5f fa80 	uxtb.w	sl, r0
   dbbb4:	6830      	ldr	r0, [r6, #0]
   dbbb6:	f005 fe01 	bl	e17bc <__aeabi_i2d>
   dbbba:	2200      	movs	r2, #0
   dbbbc:	4b93      	ldr	r3, [pc, #588]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbbbe:	f005 fe63 	bl	e1888 <__aeabi_dmul>
   dbbc2:	f006 f923 	bl	e1e0c <__aeabi_d2uiz>
   dbbc6:	fa5f f980 	uxtb.w	r9, r0
   dbbca:	6828      	ldr	r0, [r5, #0]
   dbbcc:	f005 fdf6 	bl	e17bc <__aeabi_i2d>
   dbbd0:	a389      	add	r3, pc, #548	; (adr r3, dbdf8 <_Z5canimiib+0xbc8>)
   dbbd2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbbd6:	f005 fe57 	bl	e1888 <__aeabi_dmul>
   dbbda:	f006 f917 	bl	e1e0c <__aeabi_d2uiz>
   dbbde:	f104 080c 	add.w	r8, r4, #12
   dbbe2:	b2c0      	uxtb	r0, r0
   dbbe4:	fa1f f888 	uxth.w	r8, r8
   dbbe8:	4653      	mov	r3, sl
   dbbea:	464a      	mov	r2, r9
   dbbec:	9000      	str	r0, [sp, #0]
   dbbee:	4641      	mov	r1, r8
   dbbf0:	4887      	ldr	r0, [pc, #540]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbbf2:	f002 ff05 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,rclock*1.5,gclock*1.5,bclock*1.8);
   dbbf6:	6838      	ldr	r0, [r7, #0]
   dbbf8:	f005 fde0 	bl	e17bc <__aeabi_i2d>
   dbbfc:	2200      	movs	r2, #0
   dbbfe:	4b83      	ldr	r3, [pc, #524]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbc00:	f005 fe42 	bl	e1888 <__aeabi_dmul>
   dbc04:	f006 f902 	bl	e1e0c <__aeabi_d2uiz>
   dbc08:	fa5f fb80 	uxtb.w	fp, r0
   dbc0c:	6830      	ldr	r0, [r6, #0]
   dbc0e:	f005 fdd5 	bl	e17bc <__aeabi_i2d>
   dbc12:	2200      	movs	r2, #0
   dbc14:	4b7d      	ldr	r3, [pc, #500]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbc16:	f005 fe37 	bl	e1888 <__aeabi_dmul>
   dbc1a:	f006 f8f7 	bl	e1e0c <__aeabi_d2uiz>
   dbc1e:	fa5f fa80 	uxtb.w	sl, r0
   dbc22:	6828      	ldr	r0, [r5, #0]
   dbc24:	f005 fdca 	bl	e17bc <__aeabi_i2d>
   dbc28:	a373      	add	r3, pc, #460	; (adr r3, dbdf8 <_Z5canimiib+0xbc8>)
   dbc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc2e:	f005 fe2b 	bl	e1888 <__aeabi_dmul>
   dbc32:	f006 f8eb 	bl	e1e0c <__aeabi_d2uiz>
   dbc36:	f104 0916 	add.w	r9, r4, #22
   dbc3a:	b2c0      	uxtb	r0, r0
   dbc3c:	fa1f f989 	uxth.w	r9, r9
   dbc40:	4652      	mov	r2, sl
   dbc42:	465b      	mov	r3, fp
   dbc44:	9000      	str	r0, [sp, #0]
   dbc46:	4649      	mov	r1, r9
   dbc48:	4871      	ldr	r0, [pc, #452]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbc4a:	f002 fed9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,rclock*1.5,gclock*1.5,bclock*1.8);
   dbc4e:	f104 031b 	add.w	r3, r4, #27
   dbc52:	6838      	ldr	r0, [r7, #0]
   dbc54:	b29b      	uxth	r3, r3
   dbc56:	9303      	str	r3, [sp, #12]
   dbc58:	f005 fdb0 	bl	e17bc <__aeabi_i2d>
   dbc5c:	2200      	movs	r2, #0
   dbc5e:	4b6b      	ldr	r3, [pc, #428]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbc60:	f005 fe12 	bl	e1888 <__aeabi_dmul>
   dbc64:	f006 f8d2 	bl	e1e0c <__aeabi_d2uiz>
   dbc68:	fa5f fb80 	uxtb.w	fp, r0
   dbc6c:	6830      	ldr	r0, [r6, #0]
   dbc6e:	f005 fda5 	bl	e17bc <__aeabi_i2d>
   dbc72:	2200      	movs	r2, #0
   dbc74:	4b65      	ldr	r3, [pc, #404]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbc76:	f005 fe07 	bl	e1888 <__aeabi_dmul>
   dbc7a:	f006 f8c7 	bl	e1e0c <__aeabi_d2uiz>
   dbc7e:	fa5f fa80 	uxtb.w	sl, r0
   dbc82:	6828      	ldr	r0, [r5, #0]
   dbc84:	f005 fd9a 	bl	e17bc <__aeabi_i2d>
   dbc88:	a35b      	add	r3, pc, #364	; (adr r3, dbdf8 <_Z5canimiib+0xbc8>)
   dbc8a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbc8e:	f005 fdfb 	bl	e1888 <__aeabi_dmul>
   dbc92:	f006 f8bb 	bl	e1e0c <__aeabi_d2uiz>
   dbc96:	b2c0      	uxtb	r0, r0
   dbc98:	4652      	mov	r2, sl
   dbc9a:	465b      	mov	r3, fp
   dbc9c:	9000      	str	r0, [sp, #0]
   dbc9e:	9903      	ldr	r1, [sp, #12]
   dbca0:	485b      	ldr	r0, [pc, #364]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbca2:	f002 fead 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,rclock*1.5,gclock*1.5,bclock*1.8);
   dbca6:	f104 0325 	add.w	r3, r4, #37	; 0x25
   dbcaa:	6838      	ldr	r0, [r7, #0]
   dbcac:	b29b      	uxth	r3, r3
   dbcae:	9304      	str	r3, [sp, #16]
   dbcb0:	f005 fd84 	bl	e17bc <__aeabi_i2d>
   dbcb4:	2200      	movs	r2, #0
   dbcb6:	4b55      	ldr	r3, [pc, #340]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbcb8:	f005 fde6 	bl	e1888 <__aeabi_dmul>
   dbcbc:	f006 f8a6 	bl	e1e0c <__aeabi_d2uiz>
   dbcc0:	fa5f fb80 	uxtb.w	fp, r0
   dbcc4:	6830      	ldr	r0, [r6, #0]
   dbcc6:	f005 fd79 	bl	e17bc <__aeabi_i2d>
   dbcca:	2200      	movs	r2, #0
   dbccc:	4b4f      	ldr	r3, [pc, #316]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbcce:	f005 fddb 	bl	e1888 <__aeabi_dmul>
   dbcd2:	f006 f89b 	bl	e1e0c <__aeabi_d2uiz>
   dbcd6:	fa5f fa80 	uxtb.w	sl, r0
   dbcda:	6828      	ldr	r0, [r5, #0]
   dbcdc:	f005 fd6e 	bl	e17bc <__aeabi_i2d>
   dbce0:	a345      	add	r3, pc, #276	; (adr r3, dbdf8 <_Z5canimiib+0xbc8>)
   dbce2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbce6:	f005 fdcf 	bl	e1888 <__aeabi_dmul>
   dbcea:	f006 f88f 	bl	e1e0c <__aeabi_d2uiz>
   dbcee:	b2c0      	uxtb	r0, r0
   dbcf0:	4652      	mov	r2, sl
   dbcf2:	9000      	str	r0, [sp, #0]
   dbcf4:	465b      	mov	r3, fp
   dbcf6:	9904      	ldr	r1, [sp, #16]
   dbcf8:	4845      	ldr	r0, [pc, #276]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbcfa:	f002 fe81 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,rclock*1.5,gclock*1.5,bclock*1.8);
   dbcfe:	f104 032c 	add.w	r3, r4, #44	; 0x2c
   dbd02:	6838      	ldr	r0, [r7, #0]
   dbd04:	b29b      	uxth	r3, r3
   dbd06:	9305      	str	r3, [sp, #20]
   dbd08:	f005 fd58 	bl	e17bc <__aeabi_i2d>
   dbd0c:	2200      	movs	r2, #0
   dbd0e:	4b3f      	ldr	r3, [pc, #252]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbd10:	f005 fdba 	bl	e1888 <__aeabi_dmul>
   dbd14:	f006 f87a 	bl	e1e0c <__aeabi_d2uiz>
   dbd18:	b2c7      	uxtb	r7, r0
   dbd1a:	6830      	ldr	r0, [r6, #0]
   dbd1c:	f005 fd4e 	bl	e17bc <__aeabi_i2d>
   dbd20:	2200      	movs	r2, #0
   dbd22:	4b3a      	ldr	r3, [pc, #232]	; (dbe0c <_Z5canimiib+0xbdc>)
   dbd24:	f005 fdb0 	bl	e1888 <__aeabi_dmul>
   dbd28:	f006 f870 	bl	e1e0c <__aeabi_d2uiz>
   dbd2c:	b2c6      	uxtb	r6, r0
   dbd2e:	6828      	ldr	r0, [r5, #0]
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbd30:	4d38      	ldr	r5, [pc, #224]	; (dbe14 <_Z5canimiib+0xbe4>)
        }
        strip.setPixelColor(inpix+12,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+22,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+27,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+37,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+44,rclock*1.5,gclock*1.5,bclock*1.8);
   dbd32:	f005 fd43 	bl	e17bc <__aeabi_i2d>
   dbd36:	a330      	add	r3, pc, #192	; (adr r3, dbdf8 <_Z5canimiib+0xbc8>)
   dbd38:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbd3c:	f005 fda4 	bl	e1888 <__aeabi_dmul>
   dbd40:	f006 f864 	bl	e1e0c <__aeabi_d2uiz>
   dbd44:	b2c0      	uxtb	r0, r0
   dbd46:	4632      	mov	r2, r6
   dbd48:	9000      	str	r0, [sp, #0]
   dbd4a:	463b      	mov	r3, r7
   dbd4c:	9905      	ldr	r1, [sp, #20]
   dbd4e:	4830      	ldr	r0, [pc, #192]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbd50:	f002 fe56 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+9,0,0,0);
   dbd54:	f104 0309 	add.w	r3, r4, #9
   dbd58:	b29b      	uxth	r3, r3
   dbd5a:	2600      	movs	r6, #0
   dbd5c:	9306      	str	r3, [sp, #24]
   dbd5e:	4632      	mov	r2, r6
   dbd60:	4633      	mov	r3, r6
   dbd62:	9906      	ldr	r1, [sp, #24]
   dbd64:	482a      	ldr	r0, [pc, #168]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbd66:	9600      	str	r6, [sp, #0]
   dbd68:	f002 fe4a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,0,0,0);
   dbd6c:	f104 0315 	add.w	r3, r4, #21
   dbd70:	b29b      	uxth	r3, r3
   dbd72:	9307      	str	r3, [sp, #28]
   dbd74:	4632      	mov	r2, r6
   dbd76:	4633      	mov	r3, r6
   dbd78:	9907      	ldr	r1, [sp, #28]
   dbd7a:	4825      	ldr	r0, [pc, #148]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbd7c:	9600      	str	r6, [sp, #0]
   dbd7e:	f002 fe3f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,0,0,0);
   dbd82:	f104 031c 	add.w	r3, r4, #28
   dbd86:	b29b      	uxth	r3, r3
   dbd88:	9308      	str	r3, [sp, #32]
   dbd8a:	4632      	mov	r2, r6
   dbd8c:	4633      	mov	r3, r6
   dbd8e:	9908      	ldr	r1, [sp, #32]
   dbd90:	481f      	ldr	r0, [pc, #124]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbd92:	9600      	str	r6, [sp, #0]
   dbd94:	f002 fe34 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,0,0,0);
   dbd98:	f104 0324 	add.w	r3, r4, #36	; 0x24
   dbd9c:	b29b      	uxth	r3, r3
   dbd9e:	9309      	str	r3, [sp, #36]	; 0x24
   dbda0:	4632      	mov	r2, r6
   dbda2:	4633      	mov	r3, r6
   dbda4:	9909      	ldr	r1, [sp, #36]	; 0x24
   dbda6:	481a      	ldr	r0, [pc, #104]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbda8:	9600      	str	r6, [sp, #0]
   dbdaa:	f002 fe29 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,0,0,0);
   dbdae:	f104 0329 	add.w	r3, r4, #41	; 0x29
   dbdb2:	b29b      	uxth	r3, r3
   dbdb4:	930a      	str	r3, [sp, #40]	; 0x28
   dbdb6:	4632      	mov	r2, r6
   dbdb8:	4633      	mov	r3, r6
   dbdba:	990a      	ldr	r1, [sp, #40]	; 0x28
   dbdbc:	4814      	ldr	r0, [pc, #80]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbdbe:	9600      	str	r6, [sp, #0]
   dbdc0:	f002 fe1e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dbdc4:	4812      	ldr	r0, [pc, #72]	; (dbe10 <_Z5canimiib+0xbe0>)
   dbdc6:	f002 fc79 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dbdca:	602e      	str	r6, [r5, #0]
   dbdcc:	682b      	ldr	r3, [r5, #0]
   dbdce:	2b31      	cmp	r3, #49	; 0x31
   dbdd0:	dc22      	bgt.n	dbe18 <_Z5canimiib+0xbe8>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dbdd2:	2000      	movs	r0, #0
   dbdd4:	f005 f9b6 	bl	e1144 <digitalRead>
   dbdd8:	b948      	cbnz	r0, dbdee <_Z5canimiib+0xbbe>
   dbdda:	2001      	movs	r0, #1
   dbddc:	f005 f9b2 	bl	e1144 <digitalRead>
   dbde0:	b928      	cbnz	r0, dbdee <_Z5canimiib+0xbbe>
   dbde2:	2002      	movs	r0, #2
   dbde4:	f005 f9ae 	bl	e1144 <digitalRead>
   dbde8:	2800      	cmp	r0, #0
   dbdea:	f000 83e7 	beq.w	dc5bc <_Z5canimiib+0x138c>
        strip.setPixelColor(inpix+21,0,0,0);
        strip.setPixelColor(inpix+28,0,0,0);
        strip.setPixelColor(inpix+36,0,0,0);
        strip.setPixelColor(inpix+41,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dbdee:	682b      	ldr	r3, [r5, #0]
   dbdf0:	3301      	adds	r3, #1
   dbdf2:	602b      	str	r3, [r5, #0]
   dbdf4:	e7ea      	b.n	dbdcc <_Z5canimiib+0xb9c>
   dbdf6:	bf00      	nop
   dbdf8:	cccccccd 	.word	0xcccccccd
   dbdfc:	3ffccccc 	.word	0x3ffccccc
   dbe00:	2003e314 	.word	0x2003e314
   dbe04:	2003e354 	.word	0x2003e354
   dbe08:	2003e35c 	.word	0x2003e35c
   dbe0c:	3ff80000 	.word	0x3ff80000
   dbe10:	2003e31c 	.word	0x2003e31c
   dbe14:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
   dbe18:	4d91      	ldr	r5, [pc, #580]	; (dc060 <_Z5canimiib+0xe30>)
   dbe1a:	4f92      	ldr	r7, [pc, #584]	; (dc064 <_Z5canimiib+0xe34>)
   dbe1c:	6828      	ldr	r0, [r5, #0]
   dbe1e:	4e92      	ldr	r6, [pc, #584]	; (dc068 <_Z5canimiib+0xe38>)
   dbe20:	f104 030b 	add.w	r3, r4, #11
   dbe24:	b29b      	uxth	r3, r3
   dbe26:	930b      	str	r3, [sp, #44]	; 0x2c
   dbe28:	f005 fcc8 	bl	e17bc <__aeabi_i2d>
   dbe2c:	2200      	movs	r2, #0
   dbe2e:	4b8f      	ldr	r3, [pc, #572]	; (dc06c <_Z5canimiib+0xe3c>)
   dbe30:	f005 fd2a 	bl	e1888 <__aeabi_dmul>
   dbe34:	f005 ffea 	bl	e1e0c <__aeabi_d2uiz>
   dbe38:	fa5f fb80 	uxtb.w	fp, r0
   dbe3c:	6838      	ldr	r0, [r7, #0]
   dbe3e:	f005 fcbd 	bl	e17bc <__aeabi_i2d>
   dbe42:	2200      	movs	r2, #0
   dbe44:	4b89      	ldr	r3, [pc, #548]	; (dc06c <_Z5canimiib+0xe3c>)
   dbe46:	f005 fd1f 	bl	e1888 <__aeabi_dmul>
   dbe4a:	f005 ffdf 	bl	e1e0c <__aeabi_d2uiz>
   dbe4e:	fa5f fa80 	uxtb.w	sl, r0
   dbe52:	6830      	ldr	r0, [r6, #0]
   dbe54:	f005 fcb2 	bl	e17bc <__aeabi_i2d>
   dbe58:	a37f      	add	r3, pc, #508	; (adr r3, dc058 <_Z5canimiib+0xe28>)
   dbe5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbe5e:	f005 fd13 	bl	e1888 <__aeabi_dmul>
   dbe62:	f005 ffd3 	bl	e1e0c <__aeabi_d2uiz>
   dbe66:	b2c0      	uxtb	r0, r0
   dbe68:	4652      	mov	r2, sl
   dbe6a:	465b      	mov	r3, fp
   dbe6c:	9000      	str	r0, [sp, #0]
   dbe6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dbe70:	487f      	ldr	r0, [pc, #508]	; (dc070 <_Z5canimiib+0xe40>)
   dbe72:	f002 fdc5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
   dbe76:	f104 0313 	add.w	r3, r4, #19
   dbe7a:	b29b      	uxth	r3, r3
   dbe7c:	6828      	ldr	r0, [r5, #0]
   dbe7e:	930c      	str	r3, [sp, #48]	; 0x30
   dbe80:	f005 fc9c 	bl	e17bc <__aeabi_i2d>
   dbe84:	2200      	movs	r2, #0
   dbe86:	4b79      	ldr	r3, [pc, #484]	; (dc06c <_Z5canimiib+0xe3c>)
   dbe88:	f005 fcfe 	bl	e1888 <__aeabi_dmul>
   dbe8c:	f005 ffbe 	bl	e1e0c <__aeabi_d2uiz>
   dbe90:	fa5f fb80 	uxtb.w	fp, r0
   dbe94:	6838      	ldr	r0, [r7, #0]
   dbe96:	f005 fc91 	bl	e17bc <__aeabi_i2d>
   dbe9a:	2200      	movs	r2, #0
   dbe9c:	4b73      	ldr	r3, [pc, #460]	; (dc06c <_Z5canimiib+0xe3c>)
   dbe9e:	f005 fcf3 	bl	e1888 <__aeabi_dmul>
   dbea2:	f005 ffb3 	bl	e1e0c <__aeabi_d2uiz>
   dbea6:	fa5f fa80 	uxtb.w	sl, r0
   dbeaa:	6830      	ldr	r0, [r6, #0]
   dbeac:	f005 fc86 	bl	e17bc <__aeabi_i2d>
   dbeb0:	a369      	add	r3, pc, #420	; (adr r3, dc058 <_Z5canimiib+0xe28>)
   dbeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbeb6:	f005 fce7 	bl	e1888 <__aeabi_dmul>
   dbeba:	f005 ffa7 	bl	e1e0c <__aeabi_d2uiz>
   dbebe:	b2c0      	uxtb	r0, r0
   dbec0:	4652      	mov	r2, sl
   dbec2:	465b      	mov	r3, fp
   dbec4:	9000      	str	r0, [sp, #0]
   dbec6:	990c      	ldr	r1, [sp, #48]	; 0x30
   dbec8:	4869      	ldr	r0, [pc, #420]	; (dc070 <_Z5canimiib+0xe40>)
   dbeca:	f002 fd99 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
   dbece:	f104 031a 	add.w	r3, r4, #26
   dbed2:	b29b      	uxth	r3, r3
   dbed4:	6828      	ldr	r0, [r5, #0]
   dbed6:	930d      	str	r3, [sp, #52]	; 0x34
   dbed8:	f005 fc70 	bl	e17bc <__aeabi_i2d>
   dbedc:	2200      	movs	r2, #0
   dbede:	4b63      	ldr	r3, [pc, #396]	; (dc06c <_Z5canimiib+0xe3c>)
   dbee0:	f005 fcd2 	bl	e1888 <__aeabi_dmul>
   dbee4:	f005 ff92 	bl	e1e0c <__aeabi_d2uiz>
   dbee8:	fa5f fb80 	uxtb.w	fp, r0
   dbeec:	6838      	ldr	r0, [r7, #0]
   dbeee:	f005 fc65 	bl	e17bc <__aeabi_i2d>
   dbef2:	2200      	movs	r2, #0
   dbef4:	4b5d      	ldr	r3, [pc, #372]	; (dc06c <_Z5canimiib+0xe3c>)
   dbef6:	f005 fcc7 	bl	e1888 <__aeabi_dmul>
   dbefa:	f005 ff87 	bl	e1e0c <__aeabi_d2uiz>
   dbefe:	fa5f fa80 	uxtb.w	sl, r0
   dbf02:	6830      	ldr	r0, [r6, #0]
   dbf04:	f005 fc5a 	bl	e17bc <__aeabi_i2d>
   dbf08:	a353      	add	r3, pc, #332	; (adr r3, dc058 <_Z5canimiib+0xe28>)
   dbf0a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf0e:	f005 fcbb 	bl	e1888 <__aeabi_dmul>
   dbf12:	f005 ff7b 	bl	e1e0c <__aeabi_d2uiz>
   dbf16:	b2c0      	uxtb	r0, r0
   dbf18:	4652      	mov	r2, sl
   dbf1a:	465b      	mov	r3, fp
   dbf1c:	9000      	str	r0, [sp, #0]
   dbf1e:	990d      	ldr	r1, [sp, #52]	; 0x34
   dbf20:	4853      	ldr	r0, [pc, #332]	; (dc070 <_Z5canimiib+0xe40>)
   dbf22:	f002 fd6d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
   dbf26:	f104 0326 	add.w	r3, r4, #38	; 0x26
   dbf2a:	b29b      	uxth	r3, r3
   dbf2c:	6828      	ldr	r0, [r5, #0]
   dbf2e:	930e      	str	r3, [sp, #56]	; 0x38
   dbf30:	f005 fc44 	bl	e17bc <__aeabi_i2d>
   dbf34:	2200      	movs	r2, #0
   dbf36:	4b4d      	ldr	r3, [pc, #308]	; (dc06c <_Z5canimiib+0xe3c>)
   dbf38:	f005 fca6 	bl	e1888 <__aeabi_dmul>
   dbf3c:	f005 ff66 	bl	e1e0c <__aeabi_d2uiz>
   dbf40:	fa5f fb80 	uxtb.w	fp, r0
   dbf44:	6838      	ldr	r0, [r7, #0]
   dbf46:	f005 fc39 	bl	e17bc <__aeabi_i2d>
   dbf4a:	2200      	movs	r2, #0
   dbf4c:	4b47      	ldr	r3, [pc, #284]	; (dc06c <_Z5canimiib+0xe3c>)
   dbf4e:	f005 fc9b 	bl	e1888 <__aeabi_dmul>
   dbf52:	f005 ff5b 	bl	e1e0c <__aeabi_d2uiz>
   dbf56:	fa5f fa80 	uxtb.w	sl, r0
   dbf5a:	6830      	ldr	r0, [r6, #0]
   dbf5c:	f005 fc2e 	bl	e17bc <__aeabi_i2d>
   dbf60:	a33d      	add	r3, pc, #244	; (adr r3, dc058 <_Z5canimiib+0xe28>)
   dbf62:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbf66:	f005 fc8f 	bl	e1888 <__aeabi_dmul>
   dbf6a:	f005 ff4f 	bl	e1e0c <__aeabi_d2uiz>
   dbf6e:	b2c0      	uxtb	r0, r0
   dbf70:	4652      	mov	r2, sl
   dbf72:	465b      	mov	r3, fp
   dbf74:	9000      	str	r0, [sp, #0]
   dbf76:	990e      	ldr	r1, [sp, #56]	; 0x38
   dbf78:	483d      	ldr	r0, [pc, #244]	; (dc070 <_Z5canimiib+0xe40>)
   dbf7a:	f002 fd41 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   dbf7e:	f104 032b 	add.w	r3, r4, #43	; 0x2b
   dbf82:	6828      	ldr	r0, [r5, #0]
   dbf84:	fa1f fb83 	uxth.w	fp, r3
   dbf88:	f005 fc18 	bl	e17bc <__aeabi_i2d>
   dbf8c:	2200      	movs	r2, #0
   dbf8e:	4b37      	ldr	r3, [pc, #220]	; (dc06c <_Z5canimiib+0xe3c>)
   dbf90:	f005 fc7a 	bl	e1888 <__aeabi_dmul>
   dbf94:	f005 ff3a 	bl	e1e0c <__aeabi_d2uiz>
   dbf98:	fa5f fa80 	uxtb.w	sl, r0
   dbf9c:	6838      	ldr	r0, [r7, #0]
   dbf9e:	f005 fc0d 	bl	e17bc <__aeabi_i2d>
   dbfa2:	2200      	movs	r2, #0
   dbfa4:	4b31      	ldr	r3, [pc, #196]	; (dc06c <_Z5canimiib+0xe3c>)
   dbfa6:	f005 fc6f 	bl	e1888 <__aeabi_dmul>
   dbfaa:	f005 ff2f 	bl	e1e0c <__aeabi_d2uiz>
   dbfae:	b2c7      	uxtb	r7, r0
   dbfb0:	6830      	ldr	r0, [r6, #0]
   dbfb2:	f005 fc03 	bl	e17bc <__aeabi_i2d>
   dbfb6:	a328      	add	r3, pc, #160	; (adr r3, dc058 <_Z5canimiib+0xe28>)
   dbfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dbfbc:	f005 fc64 	bl	e1888 <__aeabi_dmul>
   dbfc0:	f005 ff24 	bl	e1e0c <__aeabi_d2uiz>
   dbfc4:	b2c0      	uxtb	r0, r0
        strip.setPixelColor(inpix+12,0,0,0);
   dbfc6:	2600      	movs	r6, #0
        }
        strip.setPixelColor(inpix+11,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+19,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+26,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+38,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+43,rclock*1.5,gclock*1.5,bclock*1.8);
   dbfc8:	463a      	mov	r2, r7
   dbfca:	9000      	str	r0, [sp, #0]
   dbfcc:	4653      	mov	r3, sl
   dbfce:	4659      	mov	r1, fp
   dbfd0:	4827      	ldr	r0, [pc, #156]	; (dc070 <_Z5canimiib+0xe40>)
   dbfd2:	f002 fd15 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+12,0,0,0);
   dbfd6:	4633      	mov	r3, r6
   dbfd8:	4632      	mov	r2, r6
   dbfda:	9600      	str	r6, [sp, #0]
   dbfdc:	4641      	mov	r1, r8
   dbfde:	4824      	ldr	r0, [pc, #144]	; (dc070 <_Z5canimiib+0xe40>)
   dbfe0:	f002 fd0e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+22,0,0,0);
   dbfe4:	4633      	mov	r3, r6
   dbfe6:	4632      	mov	r2, r6
   dbfe8:	9600      	str	r6, [sp, #0]
   dbfea:	4649      	mov	r1, r9
   dbfec:	4820      	ldr	r0, [pc, #128]	; (dc070 <_Z5canimiib+0xe40>)
   dbfee:	f002 fd07 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+27,0,0,0);
   dbff2:	4633      	mov	r3, r6
   dbff4:	4632      	mov	r2, r6
   dbff6:	9600      	str	r6, [sp, #0]
   dbff8:	9903      	ldr	r1, [sp, #12]
   dbffa:	481d      	ldr	r0, [pc, #116]	; (dc070 <_Z5canimiib+0xe40>)
   dbffc:	f002 fd00 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+37,0,0,0);
   dc000:	4633      	mov	r3, r6
   dc002:	4632      	mov	r2, r6
   dc004:	9600      	str	r6, [sp, #0]
   dc006:	9904      	ldr	r1, [sp, #16]
   dc008:	4819      	ldr	r0, [pc, #100]	; (dc070 <_Z5canimiib+0xe40>)
   dc00a:	f002 fcf9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+44,0,0,0);
   dc00e:	4633      	mov	r3, r6
   dc010:	4632      	mov	r2, r6
   dc012:	9600      	str	r6, [sp, #0]
   dc014:	9905      	ldr	r1, [sp, #20]
   dc016:	4816      	ldr	r0, [pc, #88]	; (dc070 <_Z5canimiib+0xe40>)
   dc018:	f002 fcf2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc01c:	4814      	ldr	r0, [pc, #80]	; (dc070 <_Z5canimiib+0xe40>)
   dc01e:	f002 fb4d 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc022:	4b14      	ldr	r3, [pc, #80]	; (dc074 <_Z5canimiib+0xe44>)
   dc024:	601e      	str	r6, [r3, #0]
   dc026:	461f      	mov	r7, r3
   dc028:	461e      	mov	r6, r3
   dc02a:	6833      	ldr	r3, [r6, #0]
   dc02c:	f8df a044 	ldr.w	sl, [pc, #68]	; dc074 <_Z5canimiib+0xe44>
   dc030:	2b31      	cmp	r3, #49	; 0x31
   dc032:	dc21      	bgt.n	dc078 <_Z5canimiib+0xe48>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc034:	2000      	movs	r0, #0
   dc036:	f005 f885 	bl	e1144 <digitalRead>
   dc03a:	b948      	cbnz	r0, dc050 <_Z5canimiib+0xe20>
   dc03c:	2001      	movs	r0, #1
   dc03e:	f005 f881 	bl	e1144 <digitalRead>
   dc042:	b928      	cbnz	r0, dc050 <_Z5canimiib+0xe20>
   dc044:	2002      	movs	r0, #2
   dc046:	f005 f87d 	bl	e1144 <digitalRead>
   dc04a:	2800      	cmp	r0, #0
   dc04c:	f000 82ba 	beq.w	dc5c4 <_Z5canimiib+0x1394>
        strip.setPixelColor(inpix+22,0,0,0);
        strip.setPixelColor(inpix+27,0,0,0);
        strip.setPixelColor(inpix+37,0,0,0);
        strip.setPixelColor(inpix+44,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc050:	683b      	ldr	r3, [r7, #0]
   dc052:	3301      	adds	r3, #1
   dc054:	603b      	str	r3, [r7, #0]
   dc056:	e7e8      	b.n	dc02a <_Z5canimiib+0xdfa>
   dc058:	cccccccd 	.word	0xcccccccd
   dc05c:	3ffccccc 	.word	0x3ffccccc
   dc060:	2003e314 	.word	0x2003e314
   dc064:	2003e354 	.word	0x2003e354
   dc068:	2003e35c 	.word	0x2003e35c
   dc06c:	3ff80000 	.word	0x3ff80000
   dc070:	2003e31c 	.word	0x2003e31c
   dc074:	2003e33c 	.word	0x2003e33c
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
   dc078:	f104 030a 	add.w	r3, r4, #10
   dc07c:	6828      	ldr	r0, [r5, #0]
   dc07e:	4f90      	ldr	r7, [pc, #576]	; (dc2c0 <_Z5canimiib+0x1090>)
   dc080:	4e90      	ldr	r6, [pc, #576]	; (dc2c4 <_Z5canimiib+0x1094>)
   dc082:	b29b      	uxth	r3, r3
   dc084:	9303      	str	r3, [sp, #12]
   dc086:	f005 fb99 	bl	e17bc <__aeabi_i2d>
   dc08a:	2200      	movs	r2, #0
   dc08c:	4b8e      	ldr	r3, [pc, #568]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc08e:	f005 fbfb 	bl	e1888 <__aeabi_dmul>
   dc092:	f005 febb 	bl	e1e0c <__aeabi_d2uiz>
   dc096:	fa5f f980 	uxtb.w	r9, r0
   dc09a:	6838      	ldr	r0, [r7, #0]
   dc09c:	f005 fb8e 	bl	e17bc <__aeabi_i2d>
   dc0a0:	2200      	movs	r2, #0
   dc0a2:	4b89      	ldr	r3, [pc, #548]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc0a4:	f005 fbf0 	bl	e1888 <__aeabi_dmul>
   dc0a8:	f005 feb0 	bl	e1e0c <__aeabi_d2uiz>
   dc0ac:	fa5f f880 	uxtb.w	r8, r0
   dc0b0:	6830      	ldr	r0, [r6, #0]
   dc0b2:	f005 fb83 	bl	e17bc <__aeabi_i2d>
   dc0b6:	a380      	add	r3, pc, #512	; (adr r3, dc2b8 <_Z5canimiib+0x1088>)
   dc0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc0bc:	f005 fbe4 	bl	e1888 <__aeabi_dmul>
   dc0c0:	f005 fea4 	bl	e1e0c <__aeabi_d2uiz>
   dc0c4:	b2c0      	uxtb	r0, r0
   dc0c6:	4642      	mov	r2, r8
   dc0c8:	464b      	mov	r3, r9
   dc0ca:	9000      	str	r0, [sp, #0]
   dc0cc:	9903      	ldr	r1, [sp, #12]
   dc0ce:	487f      	ldr	r0, [pc, #508]	; (dc2cc <_Z5canimiib+0x109c>)
   dc0d0:	f002 fc96 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
   dc0d4:	f104 0314 	add.w	r3, r4, #20
   dc0d8:	6828      	ldr	r0, [r5, #0]
   dc0da:	b29b      	uxth	r3, r3
   dc0dc:	9304      	str	r3, [sp, #16]
   dc0de:	f005 fb6d 	bl	e17bc <__aeabi_i2d>
   dc0e2:	2200      	movs	r2, #0
   dc0e4:	4b78      	ldr	r3, [pc, #480]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc0e6:	f005 fbcf 	bl	e1888 <__aeabi_dmul>
   dc0ea:	f005 fe8f 	bl	e1e0c <__aeabi_d2uiz>
   dc0ee:	fa5f f980 	uxtb.w	r9, r0
   dc0f2:	6838      	ldr	r0, [r7, #0]
   dc0f4:	f005 fb62 	bl	e17bc <__aeabi_i2d>
   dc0f8:	2200      	movs	r2, #0
   dc0fa:	4b73      	ldr	r3, [pc, #460]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc0fc:	f005 fbc4 	bl	e1888 <__aeabi_dmul>
   dc100:	f005 fe84 	bl	e1e0c <__aeabi_d2uiz>
   dc104:	fa5f f880 	uxtb.w	r8, r0
   dc108:	6830      	ldr	r0, [r6, #0]
   dc10a:	f005 fb57 	bl	e17bc <__aeabi_i2d>
   dc10e:	a36a      	add	r3, pc, #424	; (adr r3, dc2b8 <_Z5canimiib+0x1088>)
   dc110:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc114:	f005 fbb8 	bl	e1888 <__aeabi_dmul>
   dc118:	f005 fe78 	bl	e1e0c <__aeabi_d2uiz>
   dc11c:	b2c0      	uxtb	r0, r0
   dc11e:	4642      	mov	r2, r8
   dc120:	464b      	mov	r3, r9
   dc122:	9000      	str	r0, [sp, #0]
   dc124:	9904      	ldr	r1, [sp, #16]
   dc126:	4869      	ldr	r0, [pc, #420]	; (dc2cc <_Z5canimiib+0x109c>)
   dc128:	f002 fc6a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
   dc12c:	f104 0319 	add.w	r3, r4, #25
   dc130:	6828      	ldr	r0, [r5, #0]
   dc132:	b29b      	uxth	r3, r3
   dc134:	9305      	str	r3, [sp, #20]
   dc136:	f005 fb41 	bl	e17bc <__aeabi_i2d>
   dc13a:	2200      	movs	r2, #0
   dc13c:	4b62      	ldr	r3, [pc, #392]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc13e:	f005 fba3 	bl	e1888 <__aeabi_dmul>
   dc142:	f005 fe63 	bl	e1e0c <__aeabi_d2uiz>
   dc146:	fa5f f980 	uxtb.w	r9, r0
   dc14a:	6838      	ldr	r0, [r7, #0]
   dc14c:	f005 fb36 	bl	e17bc <__aeabi_i2d>
   dc150:	2200      	movs	r2, #0
   dc152:	4b5d      	ldr	r3, [pc, #372]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc154:	f005 fb98 	bl	e1888 <__aeabi_dmul>
   dc158:	f005 fe58 	bl	e1e0c <__aeabi_d2uiz>
   dc15c:	fa5f f880 	uxtb.w	r8, r0
   dc160:	6830      	ldr	r0, [r6, #0]
   dc162:	f005 fb2b 	bl	e17bc <__aeabi_i2d>
   dc166:	a354      	add	r3, pc, #336	; (adr r3, dc2b8 <_Z5canimiib+0x1088>)
   dc168:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc16c:	f005 fb8c 	bl	e1888 <__aeabi_dmul>
   dc170:	f005 fe4c 	bl	e1e0c <__aeabi_d2uiz>
   dc174:	b2c0      	uxtb	r0, r0
   dc176:	464b      	mov	r3, r9
   dc178:	4642      	mov	r2, r8
   dc17a:	9000      	str	r0, [sp, #0]
   dc17c:	9905      	ldr	r1, [sp, #20]
   dc17e:	4853      	ldr	r0, [pc, #332]	; (dc2cc <_Z5canimiib+0x109c>)
   dc180:	f002 fc3e 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
   dc184:	6828      	ldr	r0, [r5, #0]
   dc186:	f005 fb19 	bl	e17bc <__aeabi_i2d>
   dc18a:	2200      	movs	r2, #0
   dc18c:	4b4e      	ldr	r3, [pc, #312]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc18e:	f005 fb7b 	bl	e1888 <__aeabi_dmul>
   dc192:	f005 fe3b 	bl	e1e0c <__aeabi_d2uiz>
   dc196:	b2c3      	uxtb	r3, r0
   dc198:	6838      	ldr	r0, [r7, #0]
   dc19a:	930f      	str	r3, [sp, #60]	; 0x3c
   dc19c:	f005 fb0e 	bl	e17bc <__aeabi_i2d>
   dc1a0:	2200      	movs	r2, #0
   dc1a2:	4b49      	ldr	r3, [pc, #292]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc1a4:	f005 fb70 	bl	e1888 <__aeabi_dmul>
   dc1a8:	f005 fe30 	bl	e1e0c <__aeabi_d2uiz>
   dc1ac:	fa5f f980 	uxtb.w	r9, r0
   dc1b0:	6830      	ldr	r0, [r6, #0]
   dc1b2:	f005 fb03 	bl	e17bc <__aeabi_i2d>
   dc1b6:	a340      	add	r3, pc, #256	; (adr r3, dc2b8 <_Z5canimiib+0x1088>)
   dc1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc1bc:	f005 fb64 	bl	e1888 <__aeabi_dmul>
   dc1c0:	f005 fe24 	bl	e1e0c <__aeabi_d2uiz>
   dc1c4:	f104 0823 	add.w	r8, r4, #35	; 0x23
   dc1c8:	b2c0      	uxtb	r0, r0
   dc1ca:	fa1f f888 	uxth.w	r8, r8
   dc1ce:	464a      	mov	r2, r9
   dc1d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   dc1d2:	9000      	str	r0, [sp, #0]
   dc1d4:	4641      	mov	r1, r8
   dc1d6:	483d      	ldr	r0, [pc, #244]	; (dc2cc <_Z5canimiib+0x109c>)
   dc1d8:	f002 fc12 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   dc1dc:	6828      	ldr	r0, [r5, #0]
   dc1de:	f005 faed 	bl	e17bc <__aeabi_i2d>
   dc1e2:	2200      	movs	r2, #0
   dc1e4:	4b38      	ldr	r3, [pc, #224]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc1e6:	f005 fb4f 	bl	e1888 <__aeabi_dmul>
   dc1ea:	f005 fe0f 	bl	e1e0c <__aeabi_d2uiz>
   dc1ee:	342a      	adds	r4, #42	; 0x2a
   dc1f0:	fa1f f984 	uxth.w	r9, r4
   dc1f4:	b2c4      	uxtb	r4, r0
   dc1f6:	6838      	ldr	r0, [r7, #0]
   dc1f8:	f005 fae0 	bl	e17bc <__aeabi_i2d>
   dc1fc:	2200      	movs	r2, #0
   dc1fe:	4b32      	ldr	r3, [pc, #200]	; (dc2c8 <_Z5canimiib+0x1098>)
   dc200:	f005 fb42 	bl	e1888 <__aeabi_dmul>
   dc204:	f005 fe02 	bl	e1e0c <__aeabi_d2uiz>
   dc208:	b2c5      	uxtb	r5, r0
   dc20a:	6830      	ldr	r0, [r6, #0]
   dc20c:	f005 fad6 	bl	e17bc <__aeabi_i2d>
   dc210:	a329      	add	r3, pc, #164	; (adr r3, dc2b8 <_Z5canimiib+0x1088>)
   dc212:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc216:	f005 fb37 	bl	e1888 <__aeabi_dmul>
   dc21a:	f005 fdf7 	bl	e1e0c <__aeabi_d2uiz>
   dc21e:	b2c0      	uxtb	r0, r0
   dc220:	4623      	mov	r3, r4
   dc222:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+11,0,0,0);
   dc224:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+10,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+20,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+25,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+35,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+42,rclock*1.5,gclock*1.5,bclock*1.8);
   dc226:	462a      	mov	r2, r5
   dc228:	4649      	mov	r1, r9
   dc22a:	4828      	ldr	r0, [pc, #160]	; (dc2cc <_Z5canimiib+0x109c>)
   dc22c:	f002 fbe8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+11,0,0,0);
   dc230:	4623      	mov	r3, r4
   dc232:	4622      	mov	r2, r4
   dc234:	9400      	str	r4, [sp, #0]
   dc236:	990b      	ldr	r1, [sp, #44]	; 0x2c
   dc238:	4824      	ldr	r0, [pc, #144]	; (dc2cc <_Z5canimiib+0x109c>)
   dc23a:	f002 fbe1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+19,0,0,0);
   dc23e:	4623      	mov	r3, r4
   dc240:	4622      	mov	r2, r4
   dc242:	9400      	str	r4, [sp, #0]
   dc244:	990c      	ldr	r1, [sp, #48]	; 0x30
   dc246:	4821      	ldr	r0, [pc, #132]	; (dc2cc <_Z5canimiib+0x109c>)
   dc248:	f002 fbda 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+26,0,0,0);
   dc24c:	4623      	mov	r3, r4
   dc24e:	4622      	mov	r2, r4
   dc250:	9400      	str	r4, [sp, #0]
   dc252:	990d      	ldr	r1, [sp, #52]	; 0x34
   dc254:	481d      	ldr	r0, [pc, #116]	; (dc2cc <_Z5canimiib+0x109c>)
   dc256:	f002 fbd3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+38,0,0,0);
   dc25a:	4623      	mov	r3, r4
   dc25c:	4622      	mov	r2, r4
   dc25e:	9400      	str	r4, [sp, #0]
   dc260:	990e      	ldr	r1, [sp, #56]	; 0x38
   dc262:	481a      	ldr	r0, [pc, #104]	; (dc2cc <_Z5canimiib+0x109c>)
   dc264:	f002 fbcc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+43,0,0,0);
   dc268:	4623      	mov	r3, r4
   dc26a:	4622      	mov	r2, r4
   dc26c:	4659      	mov	r1, fp
   dc26e:	9400      	str	r4, [sp, #0]
   dc270:	4816      	ldr	r0, [pc, #88]	; (dc2cc <_Z5canimiib+0x109c>)
   dc272:	f002 fbc5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc276:	4815      	ldr	r0, [pc, #84]	; (dc2cc <_Z5canimiib+0x109c>)
   dc278:	f002 fa20 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc27c:	46d3      	mov	fp, sl
   dc27e:	f8ca 4000 	str.w	r4, [sl]
   dc282:	4654      	mov	r4, sl
   dc284:	f8db 3000 	ldr.w	r3, [fp]
   dc288:	4d11      	ldr	r5, [pc, #68]	; (dc2d0 <_Z5canimiib+0x10a0>)
   dc28a:	2b31      	cmp	r3, #49	; 0x31
   dc28c:	dc22      	bgt.n	dc2d4 <_Z5canimiib+0x10a4>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc28e:	2000      	movs	r0, #0
   dc290:	f004 ff58 	bl	e1144 <digitalRead>
   dc294:	b948      	cbnz	r0, dc2aa <_Z5canimiib+0x107a>
   dc296:	2001      	movs	r0, #1
   dc298:	f004 ff54 	bl	e1144 <digitalRead>
   dc29c:	b928      	cbnz	r0, dc2aa <_Z5canimiib+0x107a>
   dc29e:	2002      	movs	r0, #2
   dc2a0:	f004 ff50 	bl	e1144 <digitalRead>
   dc2a4:	2800      	cmp	r0, #0
   dc2a6:	f000 8191 	beq.w	dc5cc <_Z5canimiib+0x139c>
        strip.setPixelColor(inpix+19,0,0,0);
        strip.setPixelColor(inpix+26,0,0,0);
        strip.setPixelColor(inpix+38,0,0,0);
        strip.setPixelColor(inpix+43,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc2aa:	6823      	ldr	r3, [r4, #0]
   dc2ac:	3301      	adds	r3, #1
   dc2ae:	6023      	str	r3, [r4, #0]
   dc2b0:	e7e8      	b.n	dc284 <_Z5canimiib+0x1054>
   dc2b2:	bf00      	nop
   dc2b4:	f3af 8000 	nop.w
   dc2b8:	cccccccd 	.word	0xcccccccd
   dc2bc:	3ffccccc 	.word	0x3ffccccc
   dc2c0:	2003e354 	.word	0x2003e354
   dc2c4:	2003e35c 	.word	0x2003e35c
   dc2c8:	3ff80000 	.word	0x3ff80000
   dc2cc:	2003e31c 	.word	0x2003e31c
   dc2d0:	2003e33c 	.word	0x2003e33c
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
            }
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
   dc2d4:	4cc2      	ldr	r4, [pc, #776]	; (dc5e0 <_Z5canimiib+0x13b0>)
   dc2d6:	4fc3      	ldr	r7, [pc, #780]	; (dc5e4 <_Z5canimiib+0x13b4>)
   dc2d8:	6820      	ldr	r0, [r4, #0]
   dc2da:	4ec3      	ldr	r6, [pc, #780]	; (dc5e8 <_Z5canimiib+0x13b8>)
   dc2dc:	f005 fa6e 	bl	e17bc <__aeabi_i2d>
   dc2e0:	2200      	movs	r2, #0
   dc2e2:	4bc2      	ldr	r3, [pc, #776]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc2e4:	f005 fad0 	bl	e1888 <__aeabi_dmul>
   dc2e8:	f005 fd90 	bl	e1e0c <__aeabi_d2uiz>
   dc2ec:	fa5f fb80 	uxtb.w	fp, r0
   dc2f0:	6838      	ldr	r0, [r7, #0]
   dc2f2:	f005 fa63 	bl	e17bc <__aeabi_i2d>
   dc2f6:	2200      	movs	r2, #0
   dc2f8:	4bbc      	ldr	r3, [pc, #752]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc2fa:	f005 fac5 	bl	e1888 <__aeabi_dmul>
   dc2fe:	f005 fd85 	bl	e1e0c <__aeabi_d2uiz>
   dc302:	fa5f fa80 	uxtb.w	sl, r0
   dc306:	6830      	ldr	r0, [r6, #0]
   dc308:	f005 fa58 	bl	e17bc <__aeabi_i2d>
   dc30c:	a3b2      	add	r3, pc, #712	; (adr r3, dc5d8 <_Z5canimiib+0x13a8>)
   dc30e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc312:	f005 fab9 	bl	e1888 <__aeabi_dmul>
   dc316:	f005 fd79 	bl	e1e0c <__aeabi_d2uiz>
   dc31a:	b2c0      	uxtb	r0, r0
   dc31c:	465b      	mov	r3, fp
   dc31e:	4652      	mov	r2, sl
   dc320:	9000      	str	r0, [sp, #0]
   dc322:	9906      	ldr	r1, [sp, #24]
   dc324:	48b2      	ldr	r0, [pc, #712]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc326:	f002 fb6b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
   dc32a:	6820      	ldr	r0, [r4, #0]
   dc32c:	f005 fa46 	bl	e17bc <__aeabi_i2d>
   dc330:	2200      	movs	r2, #0
   dc332:	4bae      	ldr	r3, [pc, #696]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc334:	f005 faa8 	bl	e1888 <__aeabi_dmul>
   dc338:	f005 fd68 	bl	e1e0c <__aeabi_d2uiz>
   dc33c:	fa5f fb80 	uxtb.w	fp, r0
   dc340:	6838      	ldr	r0, [r7, #0]
   dc342:	f005 fa3b 	bl	e17bc <__aeabi_i2d>
   dc346:	2200      	movs	r2, #0
   dc348:	4ba8      	ldr	r3, [pc, #672]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc34a:	f005 fa9d 	bl	e1888 <__aeabi_dmul>
   dc34e:	f005 fd5d 	bl	e1e0c <__aeabi_d2uiz>
   dc352:	fa5f fa80 	uxtb.w	sl, r0
   dc356:	6830      	ldr	r0, [r6, #0]
   dc358:	f005 fa30 	bl	e17bc <__aeabi_i2d>
   dc35c:	a39e      	add	r3, pc, #632	; (adr r3, dc5d8 <_Z5canimiib+0x13a8>)
   dc35e:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc362:	f005 fa91 	bl	e1888 <__aeabi_dmul>
   dc366:	f005 fd51 	bl	e1e0c <__aeabi_d2uiz>
   dc36a:	b2c0      	uxtb	r0, r0
   dc36c:	465b      	mov	r3, fp
   dc36e:	4652      	mov	r2, sl
   dc370:	9000      	str	r0, [sp, #0]
   dc372:	9907      	ldr	r1, [sp, #28]
   dc374:	489e      	ldr	r0, [pc, #632]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc376:	f002 fb43 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
   dc37a:	6820      	ldr	r0, [r4, #0]
   dc37c:	f005 fa1e 	bl	e17bc <__aeabi_i2d>
   dc380:	2200      	movs	r2, #0
   dc382:	4b9a      	ldr	r3, [pc, #616]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc384:	f005 fa80 	bl	e1888 <__aeabi_dmul>
   dc388:	f005 fd40 	bl	e1e0c <__aeabi_d2uiz>
   dc38c:	fa5f fb80 	uxtb.w	fp, r0
   dc390:	6838      	ldr	r0, [r7, #0]
   dc392:	f005 fa13 	bl	e17bc <__aeabi_i2d>
   dc396:	2200      	movs	r2, #0
   dc398:	4b94      	ldr	r3, [pc, #592]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc39a:	f005 fa75 	bl	e1888 <__aeabi_dmul>
   dc39e:	f005 fd35 	bl	e1e0c <__aeabi_d2uiz>
   dc3a2:	fa5f fa80 	uxtb.w	sl, r0
   dc3a6:	6830      	ldr	r0, [r6, #0]
   dc3a8:	f005 fa08 	bl	e17bc <__aeabi_i2d>
   dc3ac:	a38a      	add	r3, pc, #552	; (adr r3, dc5d8 <_Z5canimiib+0x13a8>)
   dc3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc3b2:	f005 fa69 	bl	e1888 <__aeabi_dmul>
   dc3b6:	f005 fd29 	bl	e1e0c <__aeabi_d2uiz>
   dc3ba:	b2c0      	uxtb	r0, r0
   dc3bc:	465b      	mov	r3, fp
   dc3be:	4652      	mov	r2, sl
   dc3c0:	9000      	str	r0, [sp, #0]
   dc3c2:	9908      	ldr	r1, [sp, #32]
   dc3c4:	488a      	ldr	r0, [pc, #552]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc3c6:	f002 fb1b 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
   dc3ca:	6820      	ldr	r0, [r4, #0]
   dc3cc:	f005 f9f6 	bl	e17bc <__aeabi_i2d>
   dc3d0:	2200      	movs	r2, #0
   dc3d2:	4b86      	ldr	r3, [pc, #536]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc3d4:	f005 fa58 	bl	e1888 <__aeabi_dmul>
   dc3d8:	f005 fd18 	bl	e1e0c <__aeabi_d2uiz>
   dc3dc:	fa5f fb80 	uxtb.w	fp, r0
   dc3e0:	6838      	ldr	r0, [r7, #0]
   dc3e2:	f005 f9eb 	bl	e17bc <__aeabi_i2d>
   dc3e6:	2200      	movs	r2, #0
   dc3e8:	4b80      	ldr	r3, [pc, #512]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc3ea:	f005 fa4d 	bl	e1888 <__aeabi_dmul>
   dc3ee:	f005 fd0d 	bl	e1e0c <__aeabi_d2uiz>
   dc3f2:	fa5f fa80 	uxtb.w	sl, r0
   dc3f6:	6830      	ldr	r0, [r6, #0]
   dc3f8:	f005 f9e0 	bl	e17bc <__aeabi_i2d>
   dc3fc:	a376      	add	r3, pc, #472	; (adr r3, dc5d8 <_Z5canimiib+0x13a8>)
   dc3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc402:	f005 fa41 	bl	e1888 <__aeabi_dmul>
   dc406:	f005 fd01 	bl	e1e0c <__aeabi_d2uiz>
   dc40a:	b2c0      	uxtb	r0, r0
   dc40c:	465b      	mov	r3, fp
   dc40e:	4652      	mov	r2, sl
   dc410:	9000      	str	r0, [sp, #0]
   dc412:	9909      	ldr	r1, [sp, #36]	; 0x24
   dc414:	4876      	ldr	r0, [pc, #472]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc416:	f002 faf3 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dc41a:	6820      	ldr	r0, [r4, #0]
   dc41c:	f005 f9ce 	bl	e17bc <__aeabi_i2d>
   dc420:	2200      	movs	r2, #0
   dc422:	4b72      	ldr	r3, [pc, #456]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc424:	f005 fa30 	bl	e1888 <__aeabi_dmul>
   dc428:	f005 fcf0 	bl	e1e0c <__aeabi_d2uiz>
   dc42c:	b2c4      	uxtb	r4, r0
   dc42e:	6838      	ldr	r0, [r7, #0]
   dc430:	f005 f9c4 	bl	e17bc <__aeabi_i2d>
   dc434:	2200      	movs	r2, #0
   dc436:	4b6d      	ldr	r3, [pc, #436]	; (dc5ec <_Z5canimiib+0x13bc>)
   dc438:	f005 fa26 	bl	e1888 <__aeabi_dmul>
   dc43c:	f005 fce6 	bl	e1e0c <__aeabi_d2uiz>
   dc440:	b2c7      	uxtb	r7, r0
   dc442:	6830      	ldr	r0, [r6, #0]
   dc444:	f005 f9ba 	bl	e17bc <__aeabi_i2d>
   dc448:	a363      	add	r3, pc, #396	; (adr r3, dc5d8 <_Z5canimiib+0x13a8>)
   dc44a:	e9d3 2300 	ldrd	r2, r3, [r3]
   dc44e:	f005 fa1b 	bl	e1888 <__aeabi_dmul>
   dc452:	f005 fcdb 	bl	e1e0c <__aeabi_d2uiz>
   dc456:	b2c0      	uxtb	r0, r0
   dc458:	4623      	mov	r3, r4
   dc45a:	9000      	str	r0, [sp, #0]
        strip.setPixelColor(inpix+10,0,0,0);
   dc45c:	2400      	movs	r4, #0
        }
        strip.setPixelColor(inpix+9,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+21,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+28,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+36,rclock*1.5,gclock*1.5,bclock*1.8);
        strip.setPixelColor(inpix+41,rclock*1.5,gclock*1.5,bclock*1.8);
   dc45e:	463a      	mov	r2, r7
   dc460:	990a      	ldr	r1, [sp, #40]	; 0x28
   dc462:	4863      	ldr	r0, [pc, #396]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc464:	f002 facc 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+10,0,0,0);
   dc468:	4623      	mov	r3, r4
   dc46a:	4622      	mov	r2, r4
   dc46c:	9400      	str	r4, [sp, #0]
   dc46e:	9903      	ldr	r1, [sp, #12]
   dc470:	485f      	ldr	r0, [pc, #380]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc472:	f002 fac5 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+20,0,0,0);
   dc476:	4623      	mov	r3, r4
   dc478:	4622      	mov	r2, r4
   dc47a:	9400      	str	r4, [sp, #0]
   dc47c:	9904      	ldr	r1, [sp, #16]
   dc47e:	485c      	ldr	r0, [pc, #368]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc480:	f002 fabe 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+25,0,0,0);
   dc484:	4623      	mov	r3, r4
   dc486:	4622      	mov	r2, r4
   dc488:	9400      	str	r4, [sp, #0]
   dc48a:	9905      	ldr	r1, [sp, #20]
   dc48c:	4858      	ldr	r0, [pc, #352]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc48e:	f002 fab7 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+35,0,0,0);
   dc492:	4623      	mov	r3, r4
   dc494:	4622      	mov	r2, r4
   dc496:	9400      	str	r4, [sp, #0]
   dc498:	4641      	mov	r1, r8
   dc49a:	4855      	ldr	r0, [pc, #340]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc49c:	f002 fab0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.setPixelColor(inpix+42,0,0,0);
   dc4a0:	4623      	mov	r3, r4
   dc4a2:	4622      	mov	r2, r4
   dc4a4:	9400      	str	r4, [sp, #0]
   dc4a6:	4649      	mov	r1, r9
   dc4a8:	4851      	ldr	r0, [pc, #324]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc4aa:	f002 faa9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   dc4ae:	4850      	ldr	r0, [pc, #320]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc4b0:	f002 f904 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        for(i=0; i<50; i++)
   dc4b4:	602c      	str	r4, [r5, #0]
   dc4b6:	462c      	mov	r4, r5
   dc4b8:	682b      	ldr	r3, [r5, #0]
   dc4ba:	2b31      	cmp	r3, #49	; 0x31
   dc4bc:	f300 80a8 	bgt.w	dc610 <_Z5canimiib+0x13e0>
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc4c0:	2000      	movs	r0, #0
   dc4c2:	f004 fe3f 	bl	e1144 <digitalRead>
   dc4c6:	b948      	cbnz	r0, dc4dc <_Z5canimiib+0x12ac>
   dc4c8:	2001      	movs	r0, #1
   dc4ca:	f004 fe3b 	bl	e1144 <digitalRead>
   dc4ce:	b928      	cbnz	r0, dc4dc <_Z5canimiib+0x12ac>
   dc4d0:	2002      	movs	r0, #2
   dc4d2:	f004 fe37 	bl	e1144 <digitalRead>
   dc4d6:	2800      	cmp	r0, #0
   dc4d8:	f000 808e 	beq.w	dc5f8 <_Z5canimiib+0x13c8>
        strip.setPixelColor(inpix+20,0,0,0);
        strip.setPixelColor(inpix+25,0,0,0);
        strip.setPixelColor(inpix+35,0,0,0);
        strip.setPixelColor(inpix+42,0,0,0);
        strip.show();
        for(i=0; i<50; i++)
   dc4dc:	6823      	ldr	r3, [r4, #0]
   dc4de:	3301      	adds	r3, #1
   dc4e0:	6023      	str	r3, [r4, #0]
   dc4e2:	e7e9      	b.n	dc4b8 <_Z5canimiib+0x1288>
            }
        }
    }
    else
    {
        if(tmr)
   dc4e4:	2a00      	cmp	r2, #0
   dc4e6:	f000 8093 	beq.w	dc610 <_Z5canimiib+0x13e0>
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            for(i=0; i<100; i++)
   dc4ea:	4c42      	ldr	r4, [pc, #264]	; (dc5f4 <_Z5canimiib+0x13c4>)
   dc4ec:	2300      	movs	r3, #0
   dc4ee:	6023      	str	r3, [r4, #0]
   dc4f0:	6823      	ldr	r3, [r4, #0]
   dc4f2:	2b63      	cmp	r3, #99	; 0x63
   dc4f4:	dc10      	bgt.n	dc518 <_Z5canimiib+0x12e8>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc4f6:	2000      	movs	r0, #0
   dc4f8:	f004 fe24 	bl	e1144 <digitalRead>
   dc4fc:	b940      	cbnz	r0, dc510 <_Z5canimiib+0x12e0>
   dc4fe:	2001      	movs	r0, #1
   dc500:	f004 fe20 	bl	e1144 <digitalRead>
   dc504:	b920      	cbnz	r0, dc510 <_Z5canimiib+0x12e0>
   dc506:	2002      	movs	r0, #2
   dc508:	f004 fe1c 	bl	e1144 <digitalRead>
   dc50c:	2800      	cmp	r0, #0
   dc50e:	d077      	beq.n	dc600 <_Z5canimiib+0x13d0>
    {
        if(tmr)
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            for(i=0; i<100; i++)
   dc510:	6823      	ldr	r3, [r4, #0]
   dc512:	3301      	adds	r3, #1
   dc514:	6023      	str	r3, [r4, #0]
   dc516:	e7eb      	b.n	dc4f0 <_Z5canimiib+0x12c0>
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc518:	4835      	ldr	r0, [pc, #212]	; (dc5f0 <_Z5canimiib+0x13c0>)
   dc51a:	f002 f8cf 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            for(i=0; i<100; i++)
   dc51e:	4b35      	ldr	r3, [pc, #212]	; (dc5f4 <_Z5canimiib+0x13c4>)
   dc520:	2200      	movs	r2, #0
   dc522:	601a      	str	r2, [r3, #0]
   dc524:	6823      	ldr	r3, [r4, #0]
   dc526:	2b63      	cmp	r3, #99	; 0x63
   dc528:	dc10      	bgt.n	dc54c <_Z5canimiib+0x131c>
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
   dc52a:	2000      	movs	r0, #0
   dc52c:	f004 fe0a 	bl	e1144 <digitalRead>
   dc530:	b940      	cbnz	r0, dc544 <_Z5canimiib+0x1314>
   dc532:	2001      	movs	r0, #1
   dc534:	f004 fe06 	bl	e1144 <digitalRead>
   dc538:	b920      	cbnz	r0, dc544 <_Z5canimiib+0x1314>
   dc53a:	2002      	movs	r0, #2
   dc53c:	f004 fe02 	bl	e1144 <digitalRead>
   dc540:	2800      	cmp	r0, #0
   dc542:	d061      	beq.n	dc608 <_Z5canimiib+0x13d8>
                }
            }
            strip.show();
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            for(i=0; i<100; i++)
   dc544:	6823      	ldr	r3, [r4, #0]
   dc546:	3301      	adds	r3, #1
   dc548:	6023      	str	r3, [r4, #0]
   dc54a:	e7eb      	b.n	dc524 <_Z5canimiib+0x12f4>
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc54c:	4828      	ldr	r0, [pc, #160]	; (dc5f0 <_Z5canimiib+0x13c0>)
        }
    }
}                                  
   dc54e:	b011      	add	sp, #68	; 0x44
   dc550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dc554:	f002 b8b2 	b.w	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.show();
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc558:	2005      	movs	r0, #5
   dc55a:	f003 fb3d 	bl	dfbd8 <delay>
   dc55e:	f7fe beb5 	b.w	db2cc <_Z5canimiib+0x9c>
            strip.show();
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc562:	2005      	movs	r0, #5
   dc564:	f003 fb38 	bl	dfbd8 <delay>
   dc568:	f7fe bf3e 	b.w	db3e8 <_Z5canimiib+0x1b8>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc56c:	2005      	movs	r0, #5
   dc56e:	f003 fb33 	bl	dfbd8 <delay>
   dc572:	f7fe bfa4 	b.w	db4be <_Z5canimiib+0x28e>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc576:	2005      	movs	r0, #5
   dc578:	f003 fb2e 	bl	dfbd8 <delay>
   dc57c:	f7ff b804 	b.w	db588 <_Z5canimiib+0x358>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc580:	2005      	movs	r0, #5
   dc582:	f003 fb29 	bl	dfbd8 <delay>
   dc586:	f7ff b856 	b.w	db636 <_Z5canimiib+0x406>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc58a:	2005      	movs	r0, #5
   dc58c:	f003 fb24 	bl	dfbd8 <delay>
   dc590:	f7ff b89c 	b.w	db6cc <_Z5canimiib+0x49c>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc594:	2005      	movs	r0, #5
   dc596:	f003 fb1f 	bl	dfbd8 <delay>
   dc59a:	f7ff b945 	b.w	db828 <_Z5canimiib+0x5f8>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc59e:	2005      	movs	r0, #5
   dc5a0:	f003 fb1a 	bl	dfbd8 <delay>
   dc5a4:	f7ff b9d0 	b.w	db948 <_Z5canimiib+0x718>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5a8:	2005      	movs	r0, #5
   dc5aa:	f003 fb15 	bl	dfbd8 <delay>
   dc5ae:	f7ff ba5f 	b.w	dba70 <_Z5canimiib+0x840>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5b2:	2005      	movs	r0, #5
   dc5b4:	f003 fb10 	bl	dfbd8 <delay>
   dc5b8:	f7ff badb 	b.w	dbb72 <_Z5canimiib+0x942>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5bc:	2005      	movs	r0, #5
   dc5be:	f003 fb0b 	bl	dfbd8 <delay>
   dc5c2:	e414      	b.n	dbdee <_Z5canimiib+0xbbe>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5c4:	2005      	movs	r0, #5
   dc5c6:	f003 fb07 	bl	dfbd8 <delay>
   dc5ca:	e541      	b.n	dc050 <_Z5canimiib+0xe20>
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5cc:	2005      	movs	r0, #5
   dc5ce:	f003 fb03 	bl	dfbd8 <delay>
   dc5d2:	e66a      	b.n	dc2aa <_Z5canimiib+0x107a>
   dc5d4:	f3af 8000 	nop.w
   dc5d8:	cccccccd 	.word	0xcccccccd
   dc5dc:	3ffccccc 	.word	0x3ffccccc
   dc5e0:	2003e314 	.word	0x2003e314
   dc5e4:	2003e354 	.word	0x2003e354
   dc5e8:	2003e35c 	.word	0x2003e35c
   dc5ec:	3ff80000 	.word	0x3ff80000
   dc5f0:	2003e31c 	.word	0x2003e31c
   dc5f4:	2003e33c 	.word	0x2003e33c
        strip.show();
        for(i=0; i<50; i++)
        {
            if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
            {
                delay(5);
   dc5f8:	2005      	movs	r0, #5
   dc5fa:	f003 faed 	bl	dfbd8 <delay>
   dc5fe:	e76d      	b.n	dc4dc <_Z5canimiib+0x12ac>
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc600:	2005      	movs	r0, #5
   dc602:	f003 fae9 	bl	dfbd8 <delay>
   dc606:	e783      	b.n	dc510 <_Z5canimiib+0x12e0>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            for(i=0; i<100; i++)
            {
                if(digitalRead(D0)==LOW && digitalRead(D1)==LOW && digitalRead(D2)==LOW)
                {
                    delay(5);
   dc608:	2005      	movs	r0, #5
   dc60a:	f003 fae5 	bl	dfbd8 <delay>
   dc60e:	e799      	b.n	dc544 <_Z5canimiib+0x1314>
                }
            }
            strip.show();
        }
    }
}                                  
   dc610:	b011      	add	sp, #68	; 0x44
   dc612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   dc616:	bf00      	nop

000dc618 <_Z8settingsv>:
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dc618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    strip.clear();
   dc61c:	48b0      	ldr	r0, [pc, #704]	; (dc8e0 <_Z8settingsv+0x2c8>)
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dc61e:	4cb1      	ldr	r4, [pc, #708]	; (dc8e4 <_Z8settingsv+0x2cc>)
   dc620:	4db1      	ldr	r5, [pc, #708]	; (dc8e8 <_Z8settingsv+0x2d0>)
            }
            strip.show();
        }
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
   dc622:	b091      	sub	sp, #68	; 0x44
    strip.clear();
   dc624:	f002 fa1b 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
   dc628:	4bb0      	ldr	r3, [pc, #704]	; (dc8ec <_Z8settingsv+0x2d4>)
   dc62a:	682a      	ldr	r2, [r5, #0]
   dc62c:	681b      	ldr	r3, [r3, #0]
   dc62e:	9300      	str	r3, [sp, #0]
   dc630:	2100      	movs	r1, #0
   dc632:	6823      	ldr	r3, [r4, #0]
   dc634:	48ae      	ldr	r0, [pc, #696]	; (dc8f0 <_Z8settingsv+0x2d8>)
   dc636:	f7fc fe23 	bl	d9280 <_Z7strdispPKciiii>
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dc63a:	2000      	movs	r0, #0
   dc63c:	f004 fd82 	bl	e1144 <digitalRead>
   dc640:	2801      	cmp	r0, #1
   dc642:	d004      	beq.n	dc64e <_Z8settingsv+0x36>
   dc644:	2002      	movs	r0, #2
   dc646:	f004 fd7d 	bl	e1144 <digitalRead>
   dc64a:	2801      	cmp	r0, #1
   dc64c:	d103      	bne.n	dc656 <_Z8settingsv+0x3e>
        delay(5);
   dc64e:	2005      	movs	r0, #5
   dc650:	f003 fac2 	bl	dfbd8 <delay>
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
   dc654:	e7f1      	b.n	dc63a <_Z8settingsv+0x22>
        delay(5);
    }
    strip.clear();
   dc656:	48a2      	ldr	r0, [pc, #648]	; (dc8e0 <_Z8settingsv+0x2c8>)
        }
        else if(smode == 8){
            strdisp("Drk clr", 0, rclock, gclock, bclock);
        }
        else if(smode == 9){
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dc658:	4ea4      	ldr	r6, [pc, #656]	; (dc8ec <_Z8settingsv+0x2d4>)
    int dispm = 1;
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
   dc65a:	f002 fa00 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
    int dispm = 1;
   dc65e:	2701      	movs	r7, #1
    }
}                                  
void settings(){                                        //Code block for a settings menu, once initiated, it waits for the user to press the up (D0) and down (D2) to exit                                                              
    strip.clear();
    bool sett = true;
    int smode = 1;
   dc660:	46b8      	mov	r8, r7
        delay(5);
    }
    strip.clear();
    while(sett == true)
    {
        if(smode == 1){
   dc662:	f1b8 0f01 	cmp.w	r8, #1
   dc666:	d108      	bne.n	dc67a <_Z8settingsv+0x62>
            strdisp("WiFi", 0, rclock, gclock, bclock);
   dc668:	6833      	ldr	r3, [r6, #0]
   dc66a:	9300      	str	r3, [sp, #0]
   dc66c:	682a      	ldr	r2, [r5, #0]
   dc66e:	6823      	ldr	r3, [r4, #0]
   dc670:	48a0      	ldr	r0, [pc, #640]	; (dc8f4 <_Z8settingsv+0x2dc>)
   dc672:	2100      	movs	r1, #0
   dc674:	f7fc fe04 	bl	d9280 <_Z7strdispPKciiii>
   dc678:	e05e      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 2){
   dc67a:	f1b8 0f02 	cmp.w	r8, #2
   dc67e:	d108      	bne.n	dc692 <_Z8settingsv+0x7a>
            strdisp("Sig Strgth", 0, rclock, gclock, bclock);
   dc680:	6833      	ldr	r3, [r6, #0]
   dc682:	9300      	str	r3, [sp, #0]
   dc684:	682a      	ldr	r2, [r5, #0]
   dc686:	6823      	ldr	r3, [r4, #0]
   dc688:	489b      	ldr	r0, [pc, #620]	; (dc8f8 <_Z8settingsv+0x2e0>)
   dc68a:	2100      	movs	r1, #0
   dc68c:	f7fc fdf8 	bl	d9280 <_Z7strdispPKciiii>
   dc690:	e052      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 3){
   dc692:	f1b8 0f03 	cmp.w	r8, #3
   dc696:	d108      	bne.n	dc6aa <_Z8settingsv+0x92>
            strdisp("Time zone", 0, rclock, gclock, bclock);
   dc698:	6833      	ldr	r3, [r6, #0]
   dc69a:	9300      	str	r3, [sp, #0]
   dc69c:	682a      	ldr	r2, [r5, #0]
   dc69e:	6823      	ldr	r3, [r4, #0]
   dc6a0:	4896      	ldr	r0, [pc, #600]	; (dc8fc <_Z8settingsv+0x2e4>)
   dc6a2:	2100      	movs	r1, #0
   dc6a4:	f7fc fdec 	bl	d9280 <_Z7strdispPKciiii>
   dc6a8:	e046      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 4){
   dc6aa:	f1b8 0f04 	cmp.w	r8, #4
   dc6ae:	d108      	bne.n	dc6c2 <_Z8settingsv+0xaa>
            strdisp("Sys vrsn", 0, rclock, gclock, bclock);
   dc6b0:	6833      	ldr	r3, [r6, #0]
   dc6b2:	9300      	str	r3, [sp, #0]
   dc6b4:	682a      	ldr	r2, [r5, #0]
   dc6b6:	6823      	ldr	r3, [r4, #0]
   dc6b8:	4891      	ldr	r0, [pc, #580]	; (dc900 <_Z8settingsv+0x2e8>)
   dc6ba:	2100      	movs	r1, #0
   dc6bc:	f7fc fde0 	bl	d9280 <_Z7strdispPKciiii>
   dc6c0:	e03a      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 5){
   dc6c2:	f1b8 0f05 	cmp.w	r8, #5
   dc6c6:	d108      	bne.n	dc6da <_Z8settingsv+0xc2>
            strdisp("Dsp wthr", 0, rclock, gclock, bclock);
   dc6c8:	6833      	ldr	r3, [r6, #0]
   dc6ca:	9300      	str	r3, [sp, #0]
   dc6cc:	682a      	ldr	r2, [r5, #0]
   dc6ce:	6823      	ldr	r3, [r4, #0]
   dc6d0:	488c      	ldr	r0, [pc, #560]	; (dc904 <_Z8settingsv+0x2ec>)
   dc6d2:	2100      	movs	r1, #0
   dc6d4:	f7fc fdd4 	bl	d9280 <_Z7strdispPKciiii>
   dc6d8:	e02e      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 6){
   dc6da:	f1b8 0f06 	cmp.w	r8, #6
   dc6de:	d108      	bne.n	dc6f2 <_Z8settingsv+0xda>
            strdisp("Get CO2", 0, rclock, gclock, bclock);
   dc6e0:	6833      	ldr	r3, [r6, #0]
   dc6e2:	9300      	str	r3, [sp, #0]
   dc6e4:	682a      	ldr	r2, [r5, #0]
   dc6e6:	6823      	ldr	r3, [r4, #0]
   dc6e8:	4887      	ldr	r0, [pc, #540]	; (dc908 <_Z8settingsv+0x2f0>)
   dc6ea:	2100      	movs	r1, #0
   dc6ec:	f7fc fdc8 	bl	d9280 <_Z7strdispPKciiii>
   dc6f0:	e022      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 7){
   dc6f2:	f1b8 0f07 	cmp.w	r8, #7
   dc6f6:	d108      	bne.n	dc70a <_Z8settingsv+0xf2>
            strdisp("Get tmp", 0, rclock, gclock, bclock);
   dc6f8:	6833      	ldr	r3, [r6, #0]
   dc6fa:	9300      	str	r3, [sp, #0]
   dc6fc:	682a      	ldr	r2, [r5, #0]
   dc6fe:	6823      	ldr	r3, [r4, #0]
   dc700:	4882      	ldr	r0, [pc, #520]	; (dc90c <_Z8settingsv+0x2f4>)
   dc702:	2100      	movs	r1, #0
   dc704:	f7fc fdbc 	bl	d9280 <_Z7strdispPKciiii>
   dc708:	e016      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 8){
   dc70a:	f1b8 0f08 	cmp.w	r8, #8
   dc70e:	d108      	bne.n	dc722 <_Z8settingsv+0x10a>
            strdisp("Drk clr", 0, rclock, gclock, bclock);
   dc710:	6833      	ldr	r3, [r6, #0]
   dc712:	9300      	str	r3, [sp, #0]
   dc714:	682a      	ldr	r2, [r5, #0]
   dc716:	6823      	ldr	r3, [r4, #0]
   dc718:	487d      	ldr	r0, [pc, #500]	; (dc910 <_Z8settingsv+0x2f8>)
   dc71a:	2100      	movs	r1, #0
   dc71c:	f7fc fdb0 	bl	d9280 <_Z7strdispPKciiii>
   dc720:	e00a      	b.n	dc738 <_Z8settingsv+0x120>
        }
        else if(smode == 9){
   dc722:	f1b8 0f09 	cmp.w	r8, #9
   dc726:	d107      	bne.n	dc738 <_Z8settingsv+0x120>
            strdisp("Mini clk", 0, rclock, gclock, bclock);
   dc728:	6833      	ldr	r3, [r6, #0]
   dc72a:	9300      	str	r3, [sp, #0]
   dc72c:	682a      	ldr	r2, [r5, #0]
   dc72e:	6823      	ldr	r3, [r4, #0]
   dc730:	4878      	ldr	r0, [pc, #480]	; (dc914 <_Z8settingsv+0x2fc>)
   dc732:	2100      	movs	r1, #0
   dc734:	f7fc fda4 	bl	d9280 <_Z7strdispPKciiii>
        }
        if(digitalRead(D1) == HIGH){
   dc738:	2001      	movs	r0, #1
   dc73a:	f004 fd03 	bl	e1144 <digitalRead>
   dc73e:	2801      	cmp	r0, #1
   dc740:	4681      	mov	r9, r0
   dc742:	f040 837a 	bne.w	dce3a <_Z8settingsv+0x822>
            if(dispm == 1){
   dc746:	2f01      	cmp	r7, #1
   dc748:	d133      	bne.n	dc7b2 <_Z8settingsv+0x19a>
                strip.clear();
   dc74a:	4865      	ldr	r0, [pc, #404]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc74c:	f002 f987 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    WLanConfig* wifi_config() {
        return (WLanConfig*)network_config(*this, 0, NULL);
   dc750:	4b71      	ldr	r3, [pc, #452]	; (dc918 <_Z8settingsv+0x300>)
   dc752:	2200      	movs	r2, #0
   dc754:	4611      	mov	r1, r2
   dc756:	6858      	ldr	r0, [r3, #4]
   dc758:	f002 fc46 	bl	defe8 <network_config>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
   dc75c:	2102      	movs	r1, #2
   dc75e:	682a      	ldr	r2, [r5, #0]
   dc760:	6833      	ldr	r3, [r6, #0]
   dc762:	fb92 f2f1 	sdiv	r2, r2, r1
   dc766:	fb93 f3f1 	sdiv	r3, r3, r1
   dc76a:	305d      	adds	r0, #93	; 0x5d
   dc76c:	9300      	str	r3, [sp, #0]
   dc76e:	2100      	movs	r1, #0
   dc770:	6823      	ldr	r3, [r4, #0]
   dc772:	f7fc fd85 	bl	d9280 <_Z7strdispPKciiii>
                while(digitalRead(D1) == HIGH)
   dc776:	2001      	movs	r0, #1
   dc778:	f004 fce4 	bl	e1144 <digitalRead>
   dc77c:	2801      	cmp	r0, #1
   dc77e:	d103      	bne.n	dc788 <_Z8settingsv+0x170>
                {
                    delay(50);
   dc780:	2032      	movs	r0, #50	; 0x32
   dc782:	f003 fa29 	bl	dfbd8 <delay>
        }
        if(digitalRead(D1) == HIGH){
            if(dispm == 1){
                strip.clear();
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
   dc786:	e7f6      	b.n	dc776 <_Z8settingsv+0x15e>
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dc788:	2001      	movs	r0, #1
   dc78a:	f004 fcdb 	bl	e1144 <digitalRead>
   dc78e:	b918      	cbnz	r0, dc798 <_Z8settingsv+0x180>
                {
                    delay(50);
   dc790:	2032      	movs	r0, #50	; 0x32
   dc792:	f003 fa21 	bl	dfbd8 <delay>
                strdisp(WiFi.SSID(), 0, rclock/2, gclock, bclock/2);
                while(digitalRead(D1) == HIGH)
                {
                    delay(50);
                }
                while(digitalRead(D1) == LOW)
   dc796:	e7f7      	b.n	dc788 <_Z8settingsv+0x170>
                {
                    delay(50);
                }
                strip.clear();
   dc798:	4851      	ldr	r0, [pc, #324]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc79a:	f002 f960 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc79e:	2001      	movs	r0, #1
   dc7a0:	f004 fcd0 	bl	e1144 <digitalRead>
   dc7a4:	2801      	cmp	r0, #1
   dc7a6:	f040 8348 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dc7aa:	2005      	movs	r0, #5
   dc7ac:	f003 fa14 	bl	dfbd8 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(50);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc7b0:	e7f5      	b.n	dc79e <_Z8settingsv+0x186>
                {
                    delay(5);
                }
            }
            else if(dispm == 2){
   dc7b2:	2f02      	cmp	r7, #2
   dc7b4:	d150      	bne.n	dc858 <_Z8settingsv+0x240>
                WiFiSignal sig = WiFi.RSSI();
   dc7b6:	4958      	ldr	r1, [pc, #352]	; (dc918 <_Z8settingsv+0x300>)
   dc7b8:	a807      	add	r0, sp, #28
   dc7ba:	f004 fb83 	bl	e0ec4 <_ZN5spark9WiFiClass4RSSIEv>
                int strength = int(sig.getStrength());
   dc7be:	a807      	add	r0, sp, #28
   dc7c0:	f004 fb46 	bl	e0e50 <_ZNK10WiFiSignal11getStrengthEv>
   dc7c4:	eefd 7ac0 	vcvt.s32.f32	s15, s0
                strip.clear();
   dc7c8:	4845      	ldr	r0, [pc, #276]	; (dc8e0 <_Z8settingsv+0x2c8>)
                    delay(5);
                }
            }
            else if(dispm == 2){
                WiFiSignal sig = WiFi.RSSI();
                int strength = int(sig.getStrength());
   dc7ca:	ee17 ba90 	vmov	fp, s15
                strip.clear();
   dc7ce:	f002 f946 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                snum(strength/100,0,rclock,gclock,bclock);
   dc7d2:	6833      	ldr	r3, [r6, #0]
   dc7d4:	9300      	str	r3, [sp, #0]
   dc7d6:	682a      	ldr	r2, [r5, #0]
   dc7d8:	6823      	ldr	r3, [r4, #0]
   dc7da:	2100      	movs	r1, #0
   dc7dc:	2064      	movs	r0, #100	; 0x64
   dc7de:	fb9b f0f0 	sdiv	r0, fp, r0
   dc7e2:	f7f9 fe33 	bl	d644c <_Z4snumiiiii>
                snum((strength/10)%10,32,rclock,gclock,bclock);
   dc7e6:	f04f 090a 	mov.w	r9, #10
   dc7ea:	6833      	ldr	r3, [r6, #0]
   dc7ec:	fb9b faf9 	sdiv	sl, fp, r9
   dc7f0:	9300      	str	r3, [sp, #0]
   dc7f2:	682a      	ldr	r2, [r5, #0]
   dc7f4:	6823      	ldr	r3, [r4, #0]
   dc7f6:	fb9a f0f9 	sdiv	r0, sl, r9
   dc7fa:	2120      	movs	r1, #32
   dc7fc:	fb09 a010 	mls	r0, r9, r0, sl
   dc800:	f7f9 fe24 	bl	d644c <_Z4snumiiiii>
                snum(strength%10,64,rclock,gclock,bclock);
   dc804:	6833      	ldr	r3, [r6, #0]
   dc806:	9300      	str	r3, [sp, #0]
   dc808:	fb09 b01a 	mls	r0, r9, sl, fp
   dc80c:	6823      	ldr	r3, [r4, #0]
   dc80e:	682a      	ldr	r2, [r5, #0]
   dc810:	2140      	movs	r1, #64	; 0x40
   dc812:	f7f9 fe1b 	bl	d644c <_Z4snumiiiii>
                strip.show();
   dc816:	4832      	ldr	r0, [pc, #200]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc818:	f001 ff50 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dc81c:	2001      	movs	r0, #1
   dc81e:	f004 fc91 	bl	e1144 <digitalRead>
   dc822:	2801      	cmp	r0, #1
   dc824:	d103      	bne.n	dc82e <_Z8settingsv+0x216>
                {
                    delay(5);
   dc826:	2005      	movs	r0, #5
   dc828:	f003 f9d6 	bl	dfbd8 <delay>
                strip.clear();
                snum(strength/100,0,rclock,gclock,bclock);
                snum((strength/10)%10,32,rclock,gclock,bclock);
                snum(strength%10,64,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dc82c:	e7f6      	b.n	dc81c <_Z8settingsv+0x204>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc82e:	2001      	movs	r0, #1
   dc830:	f004 fc88 	bl	e1144 <digitalRead>
   dc834:	b918      	cbnz	r0, dc83e <_Z8settingsv+0x226>
                {
                    delay(5);
   dc836:	2005      	movs	r0, #5
   dc838:	f003 f9ce 	bl	dfbd8 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc83c:	e7f7      	b.n	dc82e <_Z8settingsv+0x216>
                {
                    delay(5);
                }
                strip.clear();
   dc83e:	4828      	ldr	r0, [pc, #160]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc840:	f002 f90d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dc844:	2001      	movs	r0, #1
   dc846:	f004 fc7d 	bl	e1144 <digitalRead>
   dc84a:	2801      	cmp	r0, #1
   dc84c:	f040 82f5 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dc850:	2005      	movs	r0, #5
   dc852:	f003 f9c1 	bl	dfbd8 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dc856:	e7f5      	b.n	dc844 <_Z8settingsv+0x22c>
                {
                    delay(5);
                }
            }
            else if(dispm == 3){
   dc858:	2f03      	cmp	r7, #3
   dc85a:	f040 80e7 	bne.w	dca2c <_Z8settingsv+0x414>
                strip.clear();
   dc85e:	4820      	ldr	r0, [pc, #128]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc860:	f002 f8fd 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                int tzoff = 12-EEPROM.read(1);
   dc864:	f004 fc98 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dc868:	4648      	mov	r0, r9
   dc86a:	f7f7 fce5 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dc86e:	6833      	ldr	r3, [r6, #0]
   dc870:	682a      	ldr	r2, [r5, #0]
   dc872:	9300      	str	r3, [sp, #0]
                }
            }
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
   dc874:	f1d0 090c 	rsbs	r9, r0, #12
                {
                    letter('-', 0, rclock, gclock, bclock);
   dc878:	bf4c      	ite	mi
   dc87a:	202d      	movmi	r0, #45	; 0x2d
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dc87c:	202b      	movpl	r0, #43	; 0x2b
            else if(dispm == 3){
                strip.clear();
                int tzoff = 12-EEPROM.read(1);
                if(tzoff < 0)
                {
                    letter('-', 0, rclock, gclock, bclock);
   dc87e:	6823      	ldr	r3, [r4, #0]
   dc880:	2100      	movs	r1, #0
                    strip.show();
                }
                else
                {
                    letter('+', 0, rclock, gclock, bclock);
   dc882:	f7fb f985 	bl	d7b90 <_Z6letterciiii>
                    strip.show();
   dc886:	4816      	ldr	r0, [pc, #88]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc888:	f001 ff18 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dc88c:	6833      	ldr	r3, [r6, #0]
   dc88e:	9300      	str	r3, [sp, #0]
   dc890:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dc894:	f04f 0a0a 	mov.w	sl, #10
   dc898:	6823      	ldr	r3, [r4, #0]
   dc89a:	682a      	ldr	r2, [r5, #0]
   dc89c:	212f      	movs	r1, #47	; 0x2f
   dc89e:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dc8a2:	fb90 f0fa 	sdiv	r0, r0, sl
   dc8a6:	f7f9 fdd1 	bl	d644c <_Z4snumiiiii>
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dc8aa:	fb99 f0fa 	sdiv	r0, r9, sl
   dc8ae:	fb0a 9010 	mls	r0, sl, r0, r9
   dc8b2:	6833      	ldr	r3, [r6, #0]
   dc8b4:	9300      	str	r3, [sp, #0]
   dc8b6:	2800      	cmp	r0, #0
   dc8b8:	bfb8      	it	lt
   dc8ba:	4240      	neglt	r0, r0
   dc8bc:	6823      	ldr	r3, [r4, #0]
   dc8be:	682a      	ldr	r2, [r5, #0]
   dc8c0:	214f      	movs	r1, #79	; 0x4f
   dc8c2:	f7f9 fdc3 	bl	d644c <_Z4snumiiiii>
                strip.show();
   dc8c6:	4806      	ldr	r0, [pc, #24]	; (dc8e0 <_Z8settingsv+0x2c8>)
   dc8c8:	f001 fef8 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                while(digitalRead(D1) == HIGH)
   dc8cc:	2001      	movs	r0, #1
   dc8ce:	f004 fc39 	bl	e1144 <digitalRead>
   dc8d2:	2801      	cmp	r0, #1
   dc8d4:	d168      	bne.n	dc9a8 <_Z8settingsv+0x390>
                {
                    delay(5);
   dc8d6:	2005      	movs	r0, #5
   dc8d8:	f003 f97e 	bl	dfbd8 <delay>
                    strip.show();
                }
                snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                snum(abs(tzoff%10),79,rclock,gclock,bclock);
                strip.show();
                while(digitalRead(D1) == HIGH)
   dc8dc:	e7f6      	b.n	dc8cc <_Z8settingsv+0x2b4>
   dc8de:	bf00      	nop
   dc8e0:	2003e31c 	.word	0x2003e31c
   dc8e4:	2003e314 	.word	0x2003e314
   dc8e8:	2003e354 	.word	0x2003e354
   dc8ec:	2003e35c 	.word	0x2003e35c
   dc8f0:	000e441c 	.word	0x000e441c
   dc8f4:	000e4425 	.word	0x000e4425
   dc8f8:	000e442a 	.word	0x000e442a
   dc8fc:	000e4435 	.word	0x000e4435
   dc900:	000e443f 	.word	0x000e443f
   dc904:	000e4448 	.word	0x000e4448
   dc908:	000e4451 	.word	0x000e4451
   dc90c:	000e4459 	.word	0x000e4459
   dc910:	000e4461 	.word	0x000e4461
   dc914:	000e4469 	.word	0x000e4469
   dc918:	2003e6e4 	.word	0x2003e6e4
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dc91c:	2002      	movs	r0, #2
   dc91e:	f004 fc11 	bl	e1144 <digitalRead>
   dc922:	2801      	cmp	r0, #1
   dc924:	d046      	beq.n	dc9b4 <_Z8settingsv+0x39c>
                        while(digitalRead(D2) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
   dc926:	2000      	movs	r0, #0
   dc928:	f004 fc0c 	bl	e1144 <digitalRead>
   dc92c:	2801      	cmp	r0, #1
   dc92e:	d146      	bne.n	dc9be <_Z8settingsv+0x3a6>
   dc930:	f119 0f0b 	cmn.w	r9, #11
   dc934:	f280 82e5 	bge.w	dcf02 <_Z8settingsv+0x8ea>
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
                    {
                        letter('+', 0, 0, 0, 0);
   dc938:	f04f 0a00 	mov.w	sl, #0
   dc93c:	4653      	mov	r3, sl
   dc93e:	4652      	mov	r2, sl
   dc940:	4651      	mov	r1, sl
   dc942:	202b      	movs	r0, #43	; 0x2b
   dc944:	f8cd a000 	str.w	sl, [sp]
   dc948:	f7fb f922 	bl	d7b90 <_Z6letterciiii>
                        letter('-', 0, rclock, gclock, bclock);
   dc94c:	6833      	ldr	r3, [r6, #0]
   dc94e:	9300      	str	r3, [sp, #0]
   dc950:	202d      	movs	r0, #45	; 0x2d
   dc952:	6823      	ldr	r3, [r4, #0]
   dc954:	682a      	ldr	r2, [r5, #0]
   dc956:	4651      	mov	r1, sl
   dc958:	f7fb f91a 	bl	d7b90 <_Z6letterciiii>
                        strip.show();
   dc95c:	48bc      	ldr	r0, [pc, #752]	; (dcc50 <_Z8settingsv+0x638>)
   dc95e:	f001 fead 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
   dc962:	6833      	ldr	r3, [r6, #0]
   dc964:	9300      	str	r3, [sp, #0]
   dc966:	ea89 70e9 	eor.w	r0, r9, r9, asr #31
   dc96a:	f04f 0a0a 	mov.w	sl, #10
   dc96e:	6823      	ldr	r3, [r4, #0]
   dc970:	682a      	ldr	r2, [r5, #0]
   dc972:	212f      	movs	r1, #47	; 0x2f
   dc974:	eba0 70e9 	sub.w	r0, r0, r9, asr #31
   dc978:	fb90 f0fa 	sdiv	r0, r0, sl
   dc97c:	f7f9 fd66 	bl	d644c <_Z4snumiiiii>
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
   dc980:	fb99 f0fa 	sdiv	r0, r9, sl
   dc984:	fb0a 9010 	mls	r0, sl, r0, r9
   dc988:	2800      	cmp	r0, #0
   dc98a:	6833      	ldr	r3, [r6, #0]
   dc98c:	9300      	str	r3, [sp, #0]
   dc98e:	bfb8      	it	lt
   dc990:	4240      	neglt	r0, r0
   dc992:	6823      	ldr	r3, [r4, #0]
   dc994:	682a      	ldr	r2, [r5, #0]
   dc996:	214f      	movs	r1, #79	; 0x4f
   dc998:	f7f9 fd58 	bl	d644c <_Z4snumiiiii>
                    strip.show();
   dc99c:	48ac      	ldr	r0, [pc, #688]	; (dcc50 <_Z8settingsv+0x638>)
   dc99e:	f001 fe8d 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                    delay(5);
   dc9a2:	2005      	movs	r0, #5
   dc9a4:	f003 f918 	bl	dfbd8 <delay>
                strip.show();
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dc9a8:	2001      	movs	r0, #1
   dc9aa:	f004 fbcb 	bl	e1144 <digitalRead>
   dc9ae:	2800      	cmp	r0, #0
   dc9b0:	d0b4      	beq.n	dc91c <_Z8settingsv+0x304>
   dc9b2:	e013      	b.n	dc9dc <_Z8settingsv+0x3c4>
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
   dc9b4:	f1b9 0f0c 	cmp.w	r9, #12
   dc9b8:	f040 8297 	bne.w	dceea <_Z8settingsv+0x8d2>
   dc9bc:	e7b3      	b.n	dc926 <_Z8settingsv+0x30e>
                        while(digitalRead(D0) == HIGH)
                        {
                            delay(5);
                        }
                    }
                    if(tzoff < 0)
   dc9be:	f1b9 0f00 	cmp.w	r9, #0
   dc9c2:	dbb9      	blt.n	dc938 <_Z8settingsv+0x320>
                        letter('-', 0, rclock, gclock, bclock);
                        strip.show();
                    }
                    else
                    {
                        letter('+', 0, rclock, gclock, bclock);
   dc9c4:	6833      	ldr	r3, [r6, #0]
   dc9c6:	9300      	str	r3, [sp, #0]
   dc9c8:	682a      	ldr	r2, [r5, #0]
   dc9ca:	6823      	ldr	r3, [r4, #0]
   dc9cc:	2100      	movs	r1, #0
   dc9ce:	202b      	movs	r0, #43	; 0x2b
   dc9d0:	f7fb f8de 	bl	d7b90 <_Z6letterciiii>
                        strip.show();
   dc9d4:	489e      	ldr	r0, [pc, #632]	; (dcc50 <_Z8settingsv+0x638>)
   dc9d6:	f001 fe71 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   dc9da:	e7c2      	b.n	dc962 <_Z8settingsv+0x34a>
                    snum(abs(tzoff)/10,47,rclock,gclock,bclock);
                    snum(abs(tzoff%10),79,rclock,gclock,bclock);
                    strip.show();
                    delay(5);
                }
                strip.clear();
   dc9dc:	489c      	ldr	r0, [pc, #624]	; (dcc50 <_Z8settingsv+0x638>)
   dc9de:	f002 f83e 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                EEPROM.write(1, 12-tzoff);
   dc9e2:	f004 fbd9 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dc9e6:	f1c9 010c 	rsb	r1, r9, #12
   dc9ea:	b2c9      	uxtb	r1, r1
   dc9ec:	2001      	movs	r0, #1
   dc9ee:	f7f7 fcdd 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                Time.zone(12-EEPROM.read(1));
   dc9f2:	f004 fbd1 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dc9f6:	2001      	movs	r0, #1
   dc9f8:	f7f7 fc1e 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dc9fc:	f1c0 000c 	rsb	r0, r0, #12
   dca00:	ee07 0a90 	vmov	s15, r0
   dca04:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   dca08:	f003 f886 	bl	dfb18 <_ZN9TimeClass4zoneEf>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dca0c:	f002 fb54 	bl	df0b8 <spark_cloud_flag_connected>
        spark_unsubscribe(NULL);
    }

    bool syncTime(void)
    {
        if (!connected()) {
   dca10:	b110      	cbz	r0, dca18 <_Z8settingsv+0x400>
            return false;
        }
        return spark_sync_time(NULL);
   dca12:	2000      	movs	r0, #0
   dca14:	f002 fb68 	bl	df0e8 <spark_sync_time>
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dca18:	2001      	movs	r0, #1
   dca1a:	f004 fb93 	bl	e1144 <digitalRead>
   dca1e:	2801      	cmp	r0, #1
   dca20:	f040 820b 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dca24:	2005      	movs	r0, #5
   dca26:	f003 f8d7 	bl	dfbd8 <delay>
                }
                strip.clear();
                EEPROM.write(1, 12-tzoff);
                Time.zone(12-EEPROM.read(1));
                Particle.syncTime();
                while(digitalRead(D1) == HIGH)
   dca2a:	e7f5      	b.n	dca18 <_Z8settingsv+0x400>
                {
                    delay(5);
                }
            }
            else if(dispm == 4){
   dca2c:	2f04      	cmp	r7, #4
   dca2e:	d136      	bne.n	dca9e <_Z8settingsv+0x486>
                strip.clear();
   dca30:	4887      	ldr	r0, [pc, #540]	; (dcc50 <_Z8settingsv+0x638>)
   dca32:	f002 f814 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
#define SYSTEM_VERSION_150
#define SYSTEM_VERSION_151RC1
#define SYSTEM_VERSION_151
#define SYSTEM_VERSION_152

typedef struct __attribute__((packed)) SystemVersionInfo
   dca36:	a810      	add	r0, sp, #64	; 0x40
   dca38:	231c      	movs	r3, #28
   dca3a:	f820 3d24 	strh.w	r3, [r0, #-36]!
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
   dca3e:	2100      	movs	r1, #0
   dca40:	f002 fa94 	bl	def6c <system_version_info>
        return String(info.versionString);
   dca44:	a909      	add	r1, sp, #36	; 0x24
   dca46:	a803      	add	r0, sp, #12
   dca48:	f002 ff8d 	bl	df966 <_ZN6StringC1EPK19__FlashStringHelper>
                strdisp(System.version(),0,rclock,gclock,bclock);
   dca4c:	6833      	ldr	r3, [r6, #0]
   dca4e:	9300      	str	r3, [sp, #0]
   dca50:	9803      	ldr	r0, [sp, #12]
   dca52:	6823      	ldr	r3, [r4, #0]
   dca54:	682a      	ldr	r2, [r5, #0]
   dca56:	2100      	movs	r1, #0
   dca58:	f7fc fc12 	bl	d9280 <_Z7strdispPKciiii>
   dca5c:	a803      	add	r0, sp, #12
   dca5e:	f002 ff3b 	bl	df8d8 <_ZN6StringD1Ev>
                while(digitalRead(D1) == HIGH)
   dca62:	2001      	movs	r0, #1
   dca64:	f004 fb6e 	bl	e1144 <digitalRead>
   dca68:	2801      	cmp	r0, #1
   dca6a:	d103      	bne.n	dca74 <_Z8settingsv+0x45c>
                {
                    delay(5);
   dca6c:	2005      	movs	r0, #5
   dca6e:	f003 f8b3 	bl	dfbd8 <delay>
                }
            }
            else if(dispm == 4){
                strip.clear();
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
   dca72:	e7f6      	b.n	dca62 <_Z8settingsv+0x44a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dca74:	2001      	movs	r0, #1
   dca76:	f004 fb65 	bl	e1144 <digitalRead>
   dca7a:	b918      	cbnz	r0, dca84 <_Z8settingsv+0x46c>
                {
                    delay(5);
   dca7c:	2005      	movs	r0, #5
   dca7e:	f003 f8ab 	bl	dfbd8 <delay>
                strdisp(System.version(),0,rclock,gclock,bclock);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dca82:	e7f7      	b.n	dca74 <_Z8settingsv+0x45c>
                {
                    delay(5);
                }
                strip.clear();
   dca84:	4872      	ldr	r0, [pc, #456]	; (dcc50 <_Z8settingsv+0x638>)
   dca86:	f001 ffea 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dca8a:	2001      	movs	r0, #1
   dca8c:	f004 fb5a 	bl	e1144 <digitalRead>
   dca90:	2801      	cmp	r0, #1
   dca92:	f040 81d2 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dca96:	2005      	movs	r0, #5
   dca98:	f003 f89e 	bl	dfbd8 <delay>
                while(digitalRead(D1) == LOW)
                {
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dca9c:	e7f5      	b.n	dca8a <_Z8settingsv+0x472>
                {
                    delay(5);
                }
            }
            else if(dispm == 5){
   dca9e:	2f05      	cmp	r7, #5
   dcaa0:	d15c      	bne.n	dcb5c <_Z8settingsv+0x544>
                strip.clear();
   dcaa2:	486b      	ldr	r0, [pc, #428]	; (dcc50 <_Z8settingsv+0x638>)
   dcaa4:	f001 ffdb 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcaa8:	2200      	movs	r2, #0
   dcaaa:	4611      	mov	r1, r2
   dcaac:	9200      	str	r2, [sp, #0]
   dcaae:	6823      	ldr	r3, [r4, #0]
   dcab0:	4868      	ldr	r0, [pc, #416]	; (dcc54 <_Z8settingsv+0x63c>)
   dcab2:	f7fc fbe5 	bl	d9280 <_Z7strdispPKciiii>
                EEPROM.write(2,1);
   dcab6:	f004 fb6f 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcaba:	4649      	mov	r1, r9
   dcabc:	2002      	movs	r0, #2
   dcabe:	f7f7 fc75 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dcac2:	2001      	movs	r0, #1
   dcac4:	f004 fb3e 	bl	e1144 <digitalRead>
   dcac8:	2801      	cmp	r0, #1
   dcaca:	d11c      	bne.n	dcb06 <_Z8settingsv+0x4ee>
                {
                    delay(5);
   dcacc:	2005      	movs	r0, #5
   dcace:	f003 f883 	bl	dfbd8 <delay>
            }
            else if(dispm == 5){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
   dcad2:	e7f6      	b.n	dcac2 <_Z8settingsv+0x4aa>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcad4:	f004 fb36 	bl	e1144 <digitalRead>
   dcad8:	2801      	cmp	r0, #1
   dcada:	4682      	mov	sl, r0
   dcadc:	d11a      	bne.n	dcb14 <_Z8settingsv+0x4fc>
                        strip.clear();
   dcade:	485c      	ldr	r0, [pc, #368]	; (dcc50 <_Z8settingsv+0x638>)
   dcae0:	f001 ffbd 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcae4:	4649      	mov	r1, r9
   dcae6:	6823      	ldr	r3, [r4, #0]
   dcae8:	485a      	ldr	r0, [pc, #360]	; (dcc54 <_Z8settingsv+0x63c>)
   dcaea:	f8cd 9000 	str.w	r9, [sp]
   dcaee:	464a      	mov	r2, r9
   dcaf0:	f7fc fbc6 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(2,1);
   dcaf4:	f004 fb50 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcaf8:	4651      	mov	r1, sl
   dcafa:	2002      	movs	r0, #2
   dcafc:	f7f7 fc56 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(2,0);
                    }
                    delay(5);
   dcb00:	2005      	movs	r0, #5
   dcb02:	f003 f869 	bl	dfbd8 <delay>
                EEPROM.write(2,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcb06:	2001      	movs	r0, #1
   dcb08:	f004 fb1c 	bl	e1144 <digitalRead>
   dcb0c:	4681      	mov	r9, r0
   dcb0e:	2800      	cmp	r0, #0
   dcb10:	d0e0      	beq.n	dcad4 <_Z8settingsv+0x4bc>
   dcb12:	e016      	b.n	dcb42 <_Z8settingsv+0x52a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(2,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcb14:	2002      	movs	r0, #2
   dcb16:	f004 fb15 	bl	e1144 <digitalRead>
   dcb1a:	2801      	cmp	r0, #1
   dcb1c:	d1f0      	bne.n	dcb00 <_Z8settingsv+0x4e8>
                        strip.clear();
   dcb1e:	484c      	ldr	r0, [pc, #304]	; (dcc50 <_Z8settingsv+0x638>)
   dcb20:	f001 ff9d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dcb24:	4649      	mov	r1, r9
   dcb26:	464b      	mov	r3, r9
   dcb28:	682a      	ldr	r2, [r5, #0]
   dcb2a:	f8cd 9000 	str.w	r9, [sp]
   dcb2e:	484a      	ldr	r0, [pc, #296]	; (dcc58 <_Z8settingsv+0x640>)
   dcb30:	f7fc fba6 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(2,0);
   dcb34:	f004 fb30 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcb38:	4649      	mov	r1, r9
   dcb3a:	2002      	movs	r0, #2
   dcb3c:	f7f7 fc36 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dcb40:	e7de      	b.n	dcb00 <_Z8settingsv+0x4e8>
                    }
                    delay(5);
                }
                strip.clear();
   dcb42:	4843      	ldr	r0, [pc, #268]	; (dcc50 <_Z8settingsv+0x638>)
   dcb44:	f001 ff8b 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcb48:	2001      	movs	r0, #1
   dcb4a:	f004 fafb 	bl	e1144 <digitalRead>
   dcb4e:	2801      	cmp	r0, #1
   dcb50:	f040 8173 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dcb54:	2005      	movs	r0, #5
   dcb56:	f003 f83f 	bl	dfbd8 <delay>
                        EEPROM.write(2,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcb5a:	e7f5      	b.n	dcb48 <_Z8settingsv+0x530>
                {
                    delay(5);
                }
            }
            else if(dispm == 6){
   dcb5c:	2f06      	cmp	r7, #6
   dcb5e:	d15c      	bne.n	dcc1a <_Z8settingsv+0x602>
                strip.clear();
   dcb60:	483b      	ldr	r0, [pc, #236]	; (dcc50 <_Z8settingsv+0x638>)
   dcb62:	f001 ff7c 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcb66:	2200      	movs	r2, #0
   dcb68:	4611      	mov	r1, r2
   dcb6a:	9200      	str	r2, [sp, #0]
   dcb6c:	6823      	ldr	r3, [r4, #0]
   dcb6e:	4839      	ldr	r0, [pc, #228]	; (dcc54 <_Z8settingsv+0x63c>)
   dcb70:	f7fc fb86 	bl	d9280 <_Z7strdispPKciiii>
                EEPROM.write(3,1);
   dcb74:	f004 fb10 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcb78:	4649      	mov	r1, r9
   dcb7a:	2003      	movs	r0, #3
   dcb7c:	f7f7 fc16 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dcb80:	2001      	movs	r0, #1
   dcb82:	f004 fadf 	bl	e1144 <digitalRead>
   dcb86:	2801      	cmp	r0, #1
   dcb88:	d11c      	bne.n	dcbc4 <_Z8settingsv+0x5ac>
                {
                    delay(5);
   dcb8a:	2005      	movs	r0, #5
   dcb8c:	f003 f824 	bl	dfbd8 <delay>
            }
            else if(dispm == 6){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
   dcb90:	e7f6      	b.n	dcb80 <_Z8settingsv+0x568>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcb92:	f004 fad7 	bl	e1144 <digitalRead>
   dcb96:	2801      	cmp	r0, #1
   dcb98:	4682      	mov	sl, r0
   dcb9a:	d11a      	bne.n	dcbd2 <_Z8settingsv+0x5ba>
                        strip.clear();
   dcb9c:	482c      	ldr	r0, [pc, #176]	; (dcc50 <_Z8settingsv+0x638>)
   dcb9e:	f001 ff5e 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcba2:	4649      	mov	r1, r9
   dcba4:	6823      	ldr	r3, [r4, #0]
   dcba6:	482b      	ldr	r0, [pc, #172]	; (dcc54 <_Z8settingsv+0x63c>)
   dcba8:	f8cd 9000 	str.w	r9, [sp]
   dcbac:	464a      	mov	r2, r9
   dcbae:	f7fc fb67 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(3,1);
   dcbb2:	f004 faf1 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcbb6:	4651      	mov	r1, sl
   dcbb8:	2003      	movs	r0, #3
   dcbba:	f7f7 fbf7 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(3,0);
                    }
                    delay(5);
   dcbbe:	2005      	movs	r0, #5
   dcbc0:	f003 f80a 	bl	dfbd8 <delay>
                EEPROM.write(3,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcbc4:	2001      	movs	r0, #1
   dcbc6:	f004 fabd 	bl	e1144 <digitalRead>
   dcbca:	4681      	mov	r9, r0
   dcbcc:	2800      	cmp	r0, #0
   dcbce:	d0e0      	beq.n	dcb92 <_Z8settingsv+0x57a>
   dcbd0:	e016      	b.n	dcc00 <_Z8settingsv+0x5e8>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(3,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcbd2:	2002      	movs	r0, #2
   dcbd4:	f004 fab6 	bl	e1144 <digitalRead>
   dcbd8:	2801      	cmp	r0, #1
   dcbda:	d1f0      	bne.n	dcbbe <_Z8settingsv+0x5a6>
                        strip.clear();
   dcbdc:	481c      	ldr	r0, [pc, #112]	; (dcc50 <_Z8settingsv+0x638>)
   dcbde:	f001 ff3e 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dcbe2:	4649      	mov	r1, r9
   dcbe4:	464b      	mov	r3, r9
   dcbe6:	682a      	ldr	r2, [r5, #0]
   dcbe8:	f8cd 9000 	str.w	r9, [sp]
   dcbec:	481a      	ldr	r0, [pc, #104]	; (dcc58 <_Z8settingsv+0x640>)
   dcbee:	f7fc fb47 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(3,0);
   dcbf2:	f004 fad1 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcbf6:	4649      	mov	r1, r9
   dcbf8:	2003      	movs	r0, #3
   dcbfa:	f7f7 fbd7 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dcbfe:	e7de      	b.n	dcbbe <_Z8settingsv+0x5a6>
                    }
                    delay(5);
                }
                strip.clear();
   dcc00:	4813      	ldr	r0, [pc, #76]	; (dcc50 <_Z8settingsv+0x638>)
   dcc02:	f001 ff2c 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcc06:	2001      	movs	r0, #1
   dcc08:	f004 fa9c 	bl	e1144 <digitalRead>
   dcc0c:	2801      	cmp	r0, #1
   dcc0e:	f040 8114 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dcc12:	2005      	movs	r0, #5
   dcc14:	f002 ffe0 	bl	dfbd8 <delay>
                        EEPROM.write(3,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcc18:	e7f5      	b.n	dcc06 <_Z8settingsv+0x5ee>
                {
                    delay(5);
                }
            }
            else if(dispm == 7){
   dcc1a:	2f07      	cmp	r7, #7
   dcc1c:	d162      	bne.n	dcce4 <_Z8settingsv+0x6cc>
                strip.clear();
   dcc1e:	480c      	ldr	r0, [pc, #48]	; (dcc50 <_Z8settingsv+0x638>)
   dcc20:	f001 ff1d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcc24:	2200      	movs	r2, #0
   dcc26:	4611      	mov	r1, r2
   dcc28:	9200      	str	r2, [sp, #0]
   dcc2a:	6823      	ldr	r3, [r4, #0]
   dcc2c:	4809      	ldr	r0, [pc, #36]	; (dcc54 <_Z8settingsv+0x63c>)
   dcc2e:	f7fc fb27 	bl	d9280 <_Z7strdispPKciiii>
                EEPROM.write(4,1);
   dcc32:	f004 fab1 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcc36:	4649      	mov	r1, r9
   dcc38:	2004      	movs	r0, #4
   dcc3a:	f7f7 fbb7 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dcc3e:	2001      	movs	r0, #1
   dcc40:	f004 fa80 	bl	e1144 <digitalRead>
   dcc44:	2801      	cmp	r0, #1
   dcc46:	d122      	bne.n	dcc8e <_Z8settingsv+0x676>
                {
                    delay(5);
   dcc48:	2005      	movs	r0, #5
   dcc4a:	f002 ffc5 	bl	dfbd8 <delay>
            }
            else if(dispm == 7){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
   dcc4e:	e7f6      	b.n	dcc3e <_Z8settingsv+0x626>
   dcc50:	2003e31c 	.word	0x2003e31c
   dcc54:	000e4472 	.word	0x000e4472
   dcc58:	000e4476 	.word	0x000e4476
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcc5c:	f004 fa72 	bl	e1144 <digitalRead>
   dcc60:	2801      	cmp	r0, #1
   dcc62:	4682      	mov	sl, r0
   dcc64:	d11a      	bne.n	dcc9c <_Z8settingsv+0x684>
                        strip.clear();
   dcc66:	48d0      	ldr	r0, [pc, #832]	; (dcfa8 <_Z8settingsv+0x990>)
   dcc68:	f001 fef9 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcc6c:	4649      	mov	r1, r9
   dcc6e:	6823      	ldr	r3, [r4, #0]
   dcc70:	48ce      	ldr	r0, [pc, #824]	; (dcfac <_Z8settingsv+0x994>)
   dcc72:	f8cd 9000 	str.w	r9, [sp]
   dcc76:	464a      	mov	r2, r9
   dcc78:	f7fc fb02 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(4,1);
   dcc7c:	f004 fa8c 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcc80:	4651      	mov	r1, sl
   dcc82:	2004      	movs	r0, #4
   dcc84:	f7f7 fb92 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(4,0);
                    }
                    delay(5);
   dcc88:	2005      	movs	r0, #5
   dcc8a:	f002 ffa5 	bl	dfbd8 <delay>
                EEPROM.write(4,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcc8e:	2001      	movs	r0, #1
   dcc90:	f004 fa58 	bl	e1144 <digitalRead>
   dcc94:	4681      	mov	r9, r0
   dcc96:	2800      	cmp	r0, #0
   dcc98:	d0e0      	beq.n	dcc5c <_Z8settingsv+0x644>
   dcc9a:	e016      	b.n	dccca <_Z8settingsv+0x6b2>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(4,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcc9c:	2002      	movs	r0, #2
   dcc9e:	f004 fa51 	bl	e1144 <digitalRead>
   dcca2:	2801      	cmp	r0, #1
   dcca4:	d1f0      	bne.n	dcc88 <_Z8settingsv+0x670>
                        strip.clear();
   dcca6:	48c0      	ldr	r0, [pc, #768]	; (dcfa8 <_Z8settingsv+0x990>)
   dcca8:	f001 fed9 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dccac:	4649      	mov	r1, r9
   dccae:	464b      	mov	r3, r9
   dccb0:	682a      	ldr	r2, [r5, #0]
   dccb2:	f8cd 9000 	str.w	r9, [sp]
   dccb6:	48be      	ldr	r0, [pc, #760]	; (dcfb0 <_Z8settingsv+0x998>)
   dccb8:	f7fc fae2 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(4,0);
   dccbc:	f004 fa6c 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dccc0:	4649      	mov	r1, r9
   dccc2:	2004      	movs	r0, #4
   dccc4:	f7f7 fb72 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dccc8:	e7de      	b.n	dcc88 <_Z8settingsv+0x670>
                    }
                    delay(5);
                }
                strip.clear();
   dccca:	48b7      	ldr	r0, [pc, #732]	; (dcfa8 <_Z8settingsv+0x990>)
   dcccc:	f001 fec7 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dccd0:	2001      	movs	r0, #1
   dccd2:	f004 fa37 	bl	e1144 <digitalRead>
   dccd6:	2801      	cmp	r0, #1
   dccd8:	f040 80af 	bne.w	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dccdc:	2005      	movs	r0, #5
   dccde:	f002 ff7b 	bl	dfbd8 <delay>
                        EEPROM.write(4,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcce2:	e7f5      	b.n	dccd0 <_Z8settingsv+0x6b8>
                {
                    delay(5);
                }
            }
            else if(dispm == 8){
   dcce4:	2f08      	cmp	r7, #8
   dcce6:	d14a      	bne.n	dcd7e <_Z8settingsv+0x766>
                strip.clear();
   dcce8:	48af      	ldr	r0, [pc, #700]	; (dcfa8 <_Z8settingsv+0x990>)
   dccea:	f001 feb8 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
   dccee:	2300      	movs	r3, #0
   dccf0:	4619      	mov	r1, r3
   dccf2:	9300      	str	r3, [sp, #0]
   dccf4:	682a      	ldr	r2, [r5, #0]
   dccf6:	48af      	ldr	r0, [pc, #700]	; (dcfb4 <_Z8settingsv+0x99c>)
   dccf8:	f7fc fac2 	bl	d9280 <_Z7strdispPKciiii>
                EEPROM.write(5,1);
   dccfc:	f004 fa4c 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcd00:	4649      	mov	r1, r9
   dcd02:	2005      	movs	r0, #5
   dcd04:	f7f7 fb52 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dcd08:	2001      	movs	r0, #1
   dcd0a:	f004 fa1b 	bl	e1144 <digitalRead>
   dcd0e:	2801      	cmp	r0, #1
   dcd10:	d124      	bne.n	dcd5c <_Z8settingsv+0x744>
                {
                    delay(5);
   dcd12:	2005      	movs	r0, #5
   dcd14:	f002 ff60 	bl	dfbd8 <delay>
                strip.clear();
                int color;
                color = 1;
                strdisp("RED",0,rclock,0,0);
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
   dcd18:	e7f6      	b.n	dcd08 <_Z8settingsv+0x6f0>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
   dcd1a:	f004 fa13 	bl	e1144 <digitalRead>
   dcd1e:	2801      	cmp	r0, #1
   dcd20:	4682      	mov	sl, r0
   dcd22:	f040 80fa 	bne.w	dcf1a <_Z8settingsv+0x902>
   dcd26:	2002      	movs	r0, #2
   dcd28:	f004 fa0c 	bl	e1144 <digitalRead>
   dcd2c:	4681      	mov	r9, r0
   dcd2e:	2800      	cmp	r0, #0
   dcd30:	f040 80f3 	bne.w	dcf1a <_Z8settingsv+0x902>
                        strip.clear();
   dcd34:	489c      	ldr	r0, [pc, #624]	; (dcfa8 <_Z8settingsv+0x990>)
   dcd36:	f001 fe92 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("RED",0,rclock,0,0);
   dcd3a:	4649      	mov	r1, r9
   dcd3c:	464b      	mov	r3, r9
   dcd3e:	682a      	ldr	r2, [r5, #0]
   dcd40:	489c      	ldr	r0, [pc, #624]	; (dcfb4 <_Z8settingsv+0x99c>)
   dcd42:	f8cd 9000 	str.w	r9, [sp]
   dcd46:	f7fc fa9b 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(5,1);
   dcd4a:	f004 fa25 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcd4e:	4651      	mov	r1, sl
   dcd50:	2005      	movs	r0, #5
   dcd52:	f7f7 fb2b 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                    {
                        strip.clear();
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
   dcd56:	2005      	movs	r0, #5
   dcd58:	f002 ff3e 	bl	dfbd8 <delay>
                EEPROM.write(5,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcd5c:	2001      	movs	r0, #1
   dcd5e:	f004 f9f1 	bl	e1144 <digitalRead>
   dcd62:	2800      	cmp	r0, #0
   dcd64:	d0d9      	beq.n	dcd1a <_Z8settingsv+0x702>
                        strdisp("BLUE",0,0,0,bclock);
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
   dcd66:	4890      	ldr	r0, [pc, #576]	; (dcfa8 <_Z8settingsv+0x990>)
   dcd68:	f001 fe79 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dcd6c:	2001      	movs	r0, #1
   dcd6e:	f004 f9e9 	bl	e1144 <digitalRead>
   dcd72:	2801      	cmp	r0, #1
   dcd74:	d161      	bne.n	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dcd76:	2005      	movs	r0, #5
   dcd78:	f002 ff2e 	bl	dfbd8 <delay>
                        EEPROM.write(5,3);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dcd7c:	e7f6      	b.n	dcd6c <_Z8settingsv+0x754>
                {
                    delay(5);
                }
            }
            else if(dispm == 9){
   dcd7e:	2f09      	cmp	r7, #9
   dcd80:	d15b      	bne.n	dce3a <_Z8settingsv+0x822>
                strip.clear();
   dcd82:	4889      	ldr	r0, [pc, #548]	; (dcfa8 <_Z8settingsv+0x990>)
   dcd84:	f001 fe6b 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                strdisp("YES",0,0,gclock,0);
   dcd88:	2200      	movs	r2, #0
   dcd8a:	4611      	mov	r1, r2
   dcd8c:	9200      	str	r2, [sp, #0]
   dcd8e:	6823      	ldr	r3, [r4, #0]
   dcd90:	4886      	ldr	r0, [pc, #536]	; (dcfac <_Z8settingsv+0x994>)
   dcd92:	f7fc fa75 	bl	d9280 <_Z7strdispPKciiii>
                EEPROM.write(6,1);
   dcd96:	f004 f9ff 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcd9a:	2101      	movs	r1, #1
   dcd9c:	2006      	movs	r0, #6
   dcd9e:	f7f7 fb05 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                while(digitalRead(D1) == HIGH)
   dcda2:	2001      	movs	r0, #1
   dcda4:	f004 f9ce 	bl	e1144 <digitalRead>
   dcda8:	2801      	cmp	r0, #1
   dcdaa:	d11c      	bne.n	dcde6 <_Z8settingsv+0x7ce>
                {
                    delay(5);
   dcdac:	2005      	movs	r0, #5
   dcdae:	f002 ff13 	bl	dfbd8 <delay>
            }
            else if(dispm == 9){
                strip.clear();
                strdisp("YES",0,0,gclock,0);
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
   dcdb2:	e7f6      	b.n	dcda2 <_Z8settingsv+0x78a>
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D0) == HIGH){
   dcdb4:	f004 f9c6 	bl	e1144 <digitalRead>
   dcdb8:	2801      	cmp	r0, #1
   dcdba:	4682      	mov	sl, r0
   dcdbc:	d11a      	bne.n	dcdf4 <_Z8settingsv+0x7dc>
                        strip.clear();
   dcdbe:	487a      	ldr	r0, [pc, #488]	; (dcfa8 <_Z8settingsv+0x990>)
   dcdc0:	f001 fe4d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("YES",0,0,gclock,0);
   dcdc4:	4649      	mov	r1, r9
   dcdc6:	6823      	ldr	r3, [r4, #0]
   dcdc8:	4878      	ldr	r0, [pc, #480]	; (dcfac <_Z8settingsv+0x994>)
   dcdca:	f8cd 9000 	str.w	r9, [sp]
   dcdce:	464a      	mov	r2, r9
   dcdd0:	f7fc fa56 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(6,1);
   dcdd4:	f004 f9e0 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcdd8:	4651      	mov	r1, sl
   dcdda:	2006      	movs	r0, #6
   dcddc:	f7f7 fae6 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
                    else if(digitalRead(D2) == HIGH){
                        strip.clear();
                        strdisp("NO",0,rclock,0,0);
                        EEPROM.write(6,0);
                    }
                    delay(5);
   dcde0:	2005      	movs	r0, #5
   dcde2:	f002 fef9 	bl	dfbd8 <delay>
                EEPROM.write(6,1);
                while(digitalRead(D1) == HIGH)
                {
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
   dcde6:	2001      	movs	r0, #1
   dcde8:	f004 f9ac 	bl	e1144 <digitalRead>
   dcdec:	4681      	mov	r9, r0
   dcdee:	2800      	cmp	r0, #0
   dcdf0:	d0e0      	beq.n	dcdb4 <_Z8settingsv+0x79c>
   dcdf2:	e016      	b.n	dce22 <_Z8settingsv+0x80a>
                    if(digitalRead(D0) == HIGH){
                        strip.clear();
                        strdisp("YES",0,0,gclock,0);
                        EEPROM.write(6,1);
                    }
                    else if(digitalRead(D2) == HIGH){
   dcdf4:	2002      	movs	r0, #2
   dcdf6:	f004 f9a5 	bl	e1144 <digitalRead>
   dcdfa:	2801      	cmp	r0, #1
   dcdfc:	d1f0      	bne.n	dcde0 <_Z8settingsv+0x7c8>
                        strip.clear();
   dcdfe:	486a      	ldr	r0, [pc, #424]	; (dcfa8 <_Z8settingsv+0x990>)
   dce00:	f001 fe2d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("NO",0,rclock,0,0);
   dce04:	4649      	mov	r1, r9
   dce06:	464b      	mov	r3, r9
   dce08:	682a      	ldr	r2, [r5, #0]
   dce0a:	f8cd 9000 	str.w	r9, [sp]
   dce0e:	4868      	ldr	r0, [pc, #416]	; (dcfb0 <_Z8settingsv+0x998>)
   dce10:	f7fc fa36 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(6,0);
   dce14:	f004 f9c0 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dce18:	4649      	mov	r1, r9
   dce1a:	2006      	movs	r0, #6
   dce1c:	f7f7 fac6 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dce20:	e7de      	b.n	dcde0 <_Z8settingsv+0x7c8>
                    }
                    delay(5);
                }
                strip.clear();
   dce22:	4861      	ldr	r0, [pc, #388]	; (dcfa8 <_Z8settingsv+0x990>)
   dce24:	f001 fe1b 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                while(digitalRead(D1) == HIGH)
   dce28:	2001      	movs	r0, #1
   dce2a:	f004 f98b 	bl	e1144 <digitalRead>
   dce2e:	2801      	cmp	r0, #1
   dce30:	d103      	bne.n	dce3a <_Z8settingsv+0x822>
                {
                    delay(5);
   dce32:	2005      	movs	r0, #5
   dce34:	f002 fed0 	bl	dfbd8 <delay>
                        EEPROM.write(6,0);
                    }
                    delay(5);
                }
                strip.clear();
                while(digitalRead(D1) == HIGH)
   dce38:	e7f6      	b.n	dce28 <_Z8settingsv+0x810>
                {
                    delay(5);
                }
            }
        }
        if(digitalRead(D0) == LOW && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dce3a:	2000      	movs	r0, #0
   dce3c:	f004 f982 	bl	e1144 <digitalRead>
   dce40:	b9c0      	cbnz	r0, dce74 <_Z8settingsv+0x85c>
   dce42:	2001      	movs	r0, #1
   dce44:	f004 f97e 	bl	e1144 <digitalRead>
   dce48:	b9a0      	cbnz	r0, dce74 <_Z8settingsv+0x85c>
   dce4a:	2002      	movs	r0, #2
   dce4c:	f004 f97a 	bl	e1144 <digitalRead>
   dce50:	2801      	cmp	r0, #1
   dce52:	d10f      	bne.n	dce74 <_Z8settingsv+0x85c>
        {
            if(smode < 9){
   dce54:	f1b8 0f08 	cmp.w	r8, #8
   dce58:	f300 80a3 	bgt.w	dcfa2 <_Z8settingsv+0x98a>
                smode++;
   dce5c:	f108 0801 	add.w	r8, r8, #1
                dispm++;
   dce60:	3701      	adds	r7, #1
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dce62:	2002      	movs	r0, #2
   dce64:	f004 f96e 	bl	e1144 <digitalRead>
   dce68:	2801      	cmp	r0, #1
   dce6a:	f000 8090 	beq.w	dcf8e <_Z8settingsv+0x976>
            {
                delay(5);
            }
            strip.clear();
   dce6e:	484e      	ldr	r0, [pc, #312]	; (dcfa8 <_Z8settingsv+0x990>)
   dce70:	f001 fdf5 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == LOW)
   dce74:	2000      	movs	r0, #0
   dce76:	f004 f965 	bl	e1144 <digitalRead>
   dce7a:	2801      	cmp	r0, #1
   dce7c:	d116      	bne.n	dceac <_Z8settingsv+0x894>
   dce7e:	f004 f961 	bl	e1144 <digitalRead>
   dce82:	b998      	cbnz	r0, dceac <_Z8settingsv+0x894>
   dce84:	2002      	movs	r0, #2
   dce86:	f004 f95d 	bl	e1144 <digitalRead>
   dce8a:	b978      	cbnz	r0, dceac <_Z8settingsv+0x894>
        {
            if(smode > 1){
   dce8c:	f1b8 0f01 	cmp.w	r8, #1
   dce90:	f000 80a0 	beq.w	dcfd4 <_Z8settingsv+0x9bc>
                smode--;
   dce94:	f108 38ff 	add.w	r8, r8, #4294967295
                dispm--;
   dce98:	3f01      	subs	r7, #1
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dce9a:	2000      	movs	r0, #0
   dce9c:	f004 f952 	bl	e1144 <digitalRead>
   dcea0:	2801      	cmp	r0, #1
   dcea2:	f000 808d 	beq.w	dcfc0 <_Z8settingsv+0x9a8>
            {
                delay(5);
            }
            strip.clear();
   dcea6:	4840      	ldr	r0, [pc, #256]	; (dcfa8 <_Z8settingsv+0x990>)
   dcea8:	f001 fdd9 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
        }
        if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH)
   dceac:	2000      	movs	r0, #0
   dceae:	f004 f949 	bl	e1144 <digitalRead>
   dceb2:	2801      	cmp	r0, #1
   dceb4:	f040 8091 	bne.w	dcfda <_Z8settingsv+0x9c2>
   dceb8:	f004 f944 	bl	e1144 <digitalRead>
   dcebc:	4681      	mov	r9, r0
   dcebe:	2800      	cmp	r0, #0
   dcec0:	f040 808b 	bne.w	dcfda <_Z8settingsv+0x9c2>
   dcec4:	2002      	movs	r0, #2
   dcec6:	f004 f93d 	bl	e1144 <digitalRead>
   dceca:	2801      	cmp	r0, #1
   dcecc:	f040 8085 	bne.w	dcfda <_Z8settingsv+0x9c2>
        {
            strip.clear();
   dced0:	4835      	ldr	r0, [pc, #212]	; (dcfa8 <_Z8settingsv+0x990>)
   dced2:	f001 fdc4 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
            sett = false;
        }
        delay(50);
   dced6:	2032      	movs	r0, #50	; 0x32
   dced8:	f002 fe7e 	bl	dfbd8 <delay>
    strdisp("Settings",0,rclock,gclock,bclock);
    while(digitalRead(D0) == HIGH || digitalRead(D2) == HIGH){
        delay(5);
    }
    strip.clear();
    while(sett == true)
   dcedc:	f1b9 0f00 	cmp.w	r9, #0
   dcee0:	f47f abbf 	bne.w	dc662 <_Z8settingsv+0x4a>
            strip.clear();
            sett = false;
        }
        delay(50);
    }
}                                                           
   dcee4:	b011      	add	sp, #68	; 0x44
   dcee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    delay(5);
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
   dceea:	f109 0901 	add.w	r9, r9, #1
                        while(digitalRead(D2) == HIGH)
   dceee:	2002      	movs	r0, #2
   dcef0:	f004 f928 	bl	e1144 <digitalRead>
   dcef4:	2801      	cmp	r0, #1
   dcef6:	f47f ad16 	bne.w	dc926 <_Z8settingsv+0x30e>
                        {
                            delay(5);
   dcefa:	2005      	movs	r0, #5
   dcefc:	f002 fe6c 	bl	dfbd8 <delay>
                }
                while(digitalRead(D1) == LOW)
                {
                    if(digitalRead(D2) == HIGH && tzoff < 12){
                        tzoff = tzoff+1;
                        while(digitalRead(D2) == HIGH)
   dcf00:	e7f5      	b.n	dceee <_Z8settingsv+0x8d6>
                        {
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
   dcf02:	f109 39ff 	add.w	r9, r9, #4294967295
                        while(digitalRead(D0) == HIGH)
   dcf06:	2000      	movs	r0, #0
   dcf08:	f004 f91c 	bl	e1144 <digitalRead>
   dcf0c:	2801      	cmp	r0, #1
   dcf0e:	f47f ad56 	bne.w	dc9be <_Z8settingsv+0x3a6>
                        {
                            delay(5);
   dcf12:	2005      	movs	r0, #5
   dcf14:	f002 fe60 	bl	dfbd8 <delay>
                            delay(5);
                        }
                    }
                    if(digitalRead(D0) == HIGH && tzoff > -12){
                        tzoff = tzoff-1;
                        while(digitalRead(D0) == HIGH)
   dcf18:	e7f5      	b.n	dcf06 <_Z8settingsv+0x8ee>
                    if(digitalRead(D0) == HIGH && digitalRead(D2) == LOW){
                        strip.clear();
                        strdisp("RED",0,rclock,0,0);
                        EEPROM.write(5,1);
                    }
                    else if(digitalRead(D2) == HIGH && digitalRead(D0) == LOW){
   dcf1a:	2002      	movs	r0, #2
   dcf1c:	f004 f912 	bl	e1144 <digitalRead>
   dcf20:	2801      	cmp	r0, #1
   dcf22:	d116      	bne.n	dcf52 <_Z8settingsv+0x93a>
   dcf24:	2000      	movs	r0, #0
   dcf26:	f004 f90d 	bl	e1144 <digitalRead>
   dcf2a:	4681      	mov	r9, r0
   dcf2c:	b988      	cbnz	r0, dcf52 <_Z8settingsv+0x93a>
                        strip.clear();
   dcf2e:	481e      	ldr	r0, [pc, #120]	; (dcfa8 <_Z8settingsv+0x990>)
   dcf30:	f001 fd95 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("GREEN",0,0,gclock,0);
   dcf34:	4649      	mov	r1, r9
   dcf36:	6823      	ldr	r3, [r4, #0]
   dcf38:	f8cd 9000 	str.w	r9, [sp]
   dcf3c:	464a      	mov	r2, r9
   dcf3e:	481e      	ldr	r0, [pc, #120]	; (dcfb8 <_Z8settingsv+0x9a0>)
   dcf40:	f7fc f99e 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(5,2);
   dcf44:	f004 f928 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcf48:	2102      	movs	r1, #2
   dcf4a:	2005      	movs	r0, #5
   dcf4c:	f7f7 fa2e 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dcf50:	e701      	b.n	dcd56 <_Z8settingsv+0x73e>
                    }
                    else if(digitalRead(D0) == HIGH && digitalRead(D2) == HIGH)
   dcf52:	2000      	movs	r0, #0
   dcf54:	f004 f8f6 	bl	e1144 <digitalRead>
   dcf58:	2801      	cmp	r0, #1
   dcf5a:	f47f aefc 	bne.w	dcd56 <_Z8settingsv+0x73e>
   dcf5e:	2002      	movs	r0, #2
   dcf60:	f004 f8f0 	bl	e1144 <digitalRead>
   dcf64:	2801      	cmp	r0, #1
   dcf66:	f47f aef6 	bne.w	dcd56 <_Z8settingsv+0x73e>
                    {
                        strip.clear();
   dcf6a:	480f      	ldr	r0, [pc, #60]	; (dcfa8 <_Z8settingsv+0x990>)
   dcf6c:	f001 fd77 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                        strdisp("BLUE",0,0,0,bclock);
   dcf70:	6833      	ldr	r3, [r6, #0]
   dcf72:	9300      	str	r3, [sp, #0]
   dcf74:	2300      	movs	r3, #0
   dcf76:	4619      	mov	r1, r3
   dcf78:	461a      	mov	r2, r3
   dcf7a:	4810      	ldr	r0, [pc, #64]	; (dcfbc <_Z8settingsv+0x9a4>)
   dcf7c:	f7fc f980 	bl	d9280 <_Z7strdispPKciiii>
                        EEPROM.write(5,3);
   dcf80:	f004 f90a 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dcf84:	2103      	movs	r1, #3
   dcf86:	2005      	movs	r0, #5
   dcf88:	f7f7 fa10 	bl	d43ac <_ZN11EEPROMClass5writeEih.isra.11>
   dcf8c:	e6e3      	b.n	dcd56 <_Z8settingsv+0x73e>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dcf8e:	2000      	movs	r0, #0
   dcf90:	f004 f8d8 	bl	e1144 <digitalRead>
   dcf94:	2800      	cmp	r0, #0
   dcf96:	f47f af6a 	bne.w	dce6e <_Z8settingsv+0x856>
            {
                delay(5);
   dcf9a:	2005      	movs	r0, #5
   dcf9c:	f002 fe1c 	bl	dfbd8 <delay>
            }
            else{
                smode = 1;
                dispm = 1;
            }
            while(digitalRead(D2) == HIGH && digitalRead(D0) == LOW)
   dcfa0:	e75f      	b.n	dce62 <_Z8settingsv+0x84a>
                smode++;
                dispm++;
            }
            else{
                smode = 1;
                dispm = 1;
   dcfa2:	4607      	mov	r7, r0
            if(smode < 9){
                smode++;
                dispm++;
            }
            else{
                smode = 1;
   dcfa4:	4680      	mov	r8, r0
   dcfa6:	e75c      	b.n	dce62 <_Z8settingsv+0x84a>
   dcfa8:	2003e31c 	.word	0x2003e31c
   dcfac:	000e4472 	.word	0x000e4472
   dcfb0:	000e4476 	.word	0x000e4476
   dcfb4:	000e4479 	.word	0x000e4479
   dcfb8:	000e447d 	.word	0x000e447d
   dcfbc:	000e4483 	.word	0x000e4483
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dcfc0:	2002      	movs	r0, #2
   dcfc2:	f004 f8bf 	bl	e1144 <digitalRead>
   dcfc6:	2800      	cmp	r0, #0
   dcfc8:	f47f af6d 	bne.w	dcea6 <_Z8settingsv+0x88e>
            {
                delay(5);
   dcfcc:	2005      	movs	r0, #5
   dcfce:	f002 fe03 	bl	dfbd8 <delay>
            }
            else{
                smode = 9;
                dispm = 9;
            }
            while(digitalRead(D0) == HIGH && digitalRead(D2) == LOW)
   dcfd2:	e762      	b.n	dce9a <_Z8settingsv+0x882>
                smode--;
                dispm--;
            }
            else{
                smode = 9;
                dispm = 9;
   dcfd4:	2709      	movs	r7, #9
            if(smode > 1){
                smode--;
                dispm--;
            }
            else{
                smode = 9;
   dcfd6:	46b8      	mov	r8, r7
   dcfd8:	e75f      	b.n	dce9a <_Z8settingsv+0x882>
   dcfda:	f04f 0901 	mov.w	r9, #1
   dcfde:	e77a      	b.n	dced6 <_Z8settingsv+0x8be>

000dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dcfe0:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   dcfe2:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   dcfe4:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   dcfe6:	b17c      	cbz	r4, dd008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   dcfe8:	6863      	ldr	r3, [r4, #4]
   dcfea:	3b01      	subs	r3, #1
   dcfec:	6063      	str	r3, [r4, #4]
   dcfee:	b95b      	cbnz	r3, dd008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   dcff0:	6823      	ldr	r3, [r4, #0]
   dcff2:	4620      	mov	r0, r4
   dcff4:	689b      	ldr	r3, [r3, #8]
   dcff6:	4798      	blx	r3
          if (--_M_weak_count == 0)
   dcff8:	68a3      	ldr	r3, [r4, #8]
   dcffa:	3b01      	subs	r3, #1
   dcffc:	60a3      	str	r3, [r4, #8]
   dcffe:	b91b      	cbnz	r3, dd008 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   dd000:	6823      	ldr	r3, [r4, #0]
   dd002:	4620      	mov	r0, r4
   dd004:	68db      	ldr	r3, [r3, #12]
   dd006:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   dd008:	4628      	mov	r0, r5
   dd00a:	bd38      	pop	{r3, r4, r5, pc}

000dd00c <setup>:

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dd00c:	b530      	push	{r4, r5, lr}
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dd00e:	2102      	movs	r1, #2

void sound(int freq, int dur){
    tone(D3, freq, dur);
    delay(dur);
}
void setup() {
   dd010:	b085      	sub	sp, #20
    Mesh.selectAntenna(MeshAntennaType::EXTERNAL);
   dd012:	484f      	ldr	r0, [pc, #316]	; (dd150 <setup+0x144>)
   dd014:	4c4f      	ldr	r4, [pc, #316]	; (dd154 <setup+0x148>)
   dd016:	f003 fd9f 	bl	e0b58 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>
    Particle.subscribe("hook-response/Weather", myHandler, MY_DEVICES);             //Subscribes to Weather API event
   dd01a:	2200      	movs	r2, #0
   dd01c:	494e      	ldr	r1, [pc, #312]	; (dd158 <setup+0x14c>)
   dd01e:	484f      	ldr	r0, [pc, #316]	; (dd15c <setup+0x150>)
   dd020:	f7f7 f900 	bl	d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/co2dat", co2Handler, MY_DEVICES);             //Subscribes to CO2 data api
   dd024:	2200      	movs	r2, #0
   dd026:	494e      	ldr	r1, [pc, #312]	; (dd160 <setup+0x154>)
   dd028:	484e      	ldr	r0, [pc, #312]	; (dd164 <setup+0x158>)
   dd02a:	f7f7 f8fb 	bl	d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/itempdat", itHandler, MY_DEVICES);            //Subscribes to inside temp data api
   dd02e:	2200      	movs	r2, #0
   dd030:	494d      	ldr	r1, [pc, #308]	; (dd168 <setup+0x15c>)
   dd032:	484e      	ldr	r0, [pc, #312]	; (dd16c <setup+0x160>)
   dd034:	f7f7 f8f6 	bl	d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Particle.subscribe("hook-response/getState", mshHdlr2, MY_DEVICES);
   dd038:	2200      	movs	r2, #0
   dd03a:	494d      	ldr	r1, [pc, #308]	; (dd170 <setup+0x164>)
   dd03c:	484d      	ldr	r0, [pc, #308]	; (dd174 <setup+0x168>)
   dd03e:	f7f7 f8f1 	bl	d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
    Mesh.subscribe("toggleBtn", mshHdlr);
   dd042:	4a4d      	ldr	r2, [pc, #308]	; (dd178 <setup+0x16c>)
   dd044:	494d      	ldr	r1, [pc, #308]	; (dd17c <setup+0x170>)
   dd046:	484e      	ldr	r0, [pc, #312]	; (dd180 <setup+0x174>)
   dd048:	f003 fe38 	bl	e0cbc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd04c:	2500      	movs	r5, #0
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data, int ttl) {
    return publish(name, data, ttl, PUBLIC);
}

inline bool CloudClass::subscribe(const char* name, EventHandler handler) {
    return subscribe(name, handler, ALL_DEVICES);
   dd04e:	2201      	movs	r2, #1
   dd050:	494c      	ldr	r1, [pc, #304]	; (dd184 <setup+0x178>)
   dd052:	484d      	ldr	r0, [pc, #308]	; (dd188 <setup+0x17c>)
   dd054:	f7f7 f8e6 	bl	d4224 <_ZN10CloudClass9subscribeEPKcPFvS1_S1_E32Spark_Subscription_Scope_TypeDef.isra.7>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd058:	7823      	ldrb	r3, [r4, #0]
    Particle.subscribe("pclock999", myHandler2);                                    //Subscribes to Google Home IFTTT integration
    Particle.publish("Weather", "1", PRIVATE);                                      //Initial Publishes to get weather data
   dd05a:	4a4c      	ldr	r2, [pc, #304]	; (dd18c <setup+0x180>)
   dd05c:	494c      	ldr	r1, [pc, #304]	; (dd190 <setup+0x184>)
   dd05e:	f88d 5000 	strb.w	r5, [sp]
   dd062:	a802      	add	r0, sp, #8
   dd064:	f7f7 f9a4 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dd068:	a803      	add	r0, sp, #12
   dd06a:	f7ff ffb9 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if(EEPROM.read(3) == 1)
   dd06e:	f004 f893 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd072:	2003      	movs	r0, #3
   dd074:	f7f7 f8e0 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd078:	2801      	cmp	r0, #1
   dd07a:	d10a      	bne.n	dd092 <setup+0x86>
   dd07c:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("co2dat", "1", PRIVATE);
   dd07e:	4a43      	ldr	r2, [pc, #268]	; (dd18c <setup+0x180>)
   dd080:	f88d 5000 	strb.w	r5, [sp]
   dd084:	a802      	add	r0, sp, #8
   dd086:	4943      	ldr	r1, [pc, #268]	; (dd194 <setup+0x188>)
   dd088:	f7f7 f992 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   dd08c:	a803      	add	r0, sp, #12
   dd08e:	f7ff ffa7 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    if(EEPROM.read(4) == 1)
   dd092:	f004 f881 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd096:	2004      	movs	r0, #4
   dd098:	f7f7 f8ce 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd09c:	2801      	cmp	r0, #1
   dd09e:	d10b      	bne.n	dd0b8 <setup+0xac>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd0a0:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd0a2:	7823      	ldrb	r3, [r4, #0]
    {
        Particle.publish("itempdat", "1", PRIVATE);
   dd0a4:	493c      	ldr	r1, [pc, #240]	; (dd198 <setup+0x18c>)
   dd0a6:	f88d 2000 	strb.w	r2, [sp]
   dd0aa:	a802      	add	r0, sp, #8
   dd0ac:	4a37      	ldr	r2, [pc, #220]	; (dd18c <setup+0x180>)
   dd0ae:	f7f7 f97f 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   dd0b2:	a803      	add	r0, sp, #12
   dd0b4:	f7ff ff94 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
   dd0b8:	2103      	movs	r1, #3
   dd0ba:	2000      	movs	r0, #0
   dd0bc:	f004 f818 	bl	e10f0 <pinMode>
    pinMode(D1, INPUT_PULLDOWN);
   dd0c0:	2103      	movs	r1, #3
   dd0c2:	2001      	movs	r0, #1
   dd0c4:	f004 f814 	bl	e10f0 <pinMode>
    pinMode(D2, INPUT_PULLDOWN);
   dd0c8:	2103      	movs	r1, #3
   dd0ca:	2002      	movs	r0, #2
   dd0cc:	f004 f810 	bl	e10f0 <pinMode>
    RGB.control(true);
   dd0d0:	2001      	movs	r0, #1
   dd0d2:	f002 fd93 	bl	dfbfc <_ZN8RGBClass7controlEb>
    RGB.color(0, 0, 0);
   dd0d6:	2200      	movs	r2, #0
   dd0d8:	4611      	mov	r1, r2
   dd0da:	4610      	mov	r0, r2
   dd0dc:	f002 fd9e 	bl	dfc1c <_ZN8RGBClass5colorEiii>
    scan = 1;                                                                       //scans photoresistor for room brightness
   dd0e0:	4b2e      	ldr	r3, [pc, #184]	; (dd19c <setup+0x190>)
    photoupd = 0;
    wmode = 1;
    dmode = 1;
    fdark = 2;
    tmr = 55;
    strip.begin();
   dd0e2:	482f      	ldr	r0, [pc, #188]	; (dd1a0 <setup+0x194>)
    pinMode(D0, INPUT_PULLDOWN);                                                    //Pin Mode setter, these inputs are buttons
    pinMode(D1, INPUT_PULLDOWN);
    pinMode(D2, INPUT_PULLDOWN);
    RGB.control(true);
    RGB.color(0, 0, 0);
    scan = 1;                                                                       //scans photoresistor for room brightness
   dd0e4:	2401      	movs	r4, #1
   dd0e6:	601c      	str	r4, [r3, #0]
    photoupd = 0;
   dd0e8:	4b2e      	ldr	r3, [pc, #184]	; (dd1a4 <setup+0x198>)
   dd0ea:	2200      	movs	r2, #0
   dd0ec:	601a      	str	r2, [r3, #0]
    wmode = 1;
   dd0ee:	4b2e      	ldr	r3, [pc, #184]	; (dd1a8 <setup+0x19c>)
   dd0f0:	601c      	str	r4, [r3, #0]
    dmode = 1;
   dd0f2:	4b2e      	ldr	r3, [pc, #184]	; (dd1ac <setup+0x1a0>)
   dd0f4:	601c      	str	r4, [r3, #0]
    fdark = 2;
   dd0f6:	4b2e      	ldr	r3, [pc, #184]	; (dd1b0 <setup+0x1a4>)
   dd0f8:	2202      	movs	r2, #2
   dd0fa:	601a      	str	r2, [r3, #0]
    tmr = 55;
   dd0fc:	4b2d      	ldr	r3, [pc, #180]	; (dd1b4 <setup+0x1a8>)
   dd0fe:	2237      	movs	r2, #55	; 0x37
   dd100:	601a      	str	r2, [r3, #0]
    strip.begin();
   dd102:	f001 faa4 	bl	de64e <_ZN17Adafruit_NeoPixel5beginEv>
    strip.show();
   dd106:	4826      	ldr	r0, [pc, #152]	; (dd1a0 <setup+0x194>)
   dd108:	f001 fad8 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
    //while(digitalRead(D0) == LOW){
    //    delay(5);
    //}
    //lettest(1000,50,50,50);
    //Time.beginDST();
    strip.clear();
   dd10c:	4824      	ldr	r0, [pc, #144]	; (dd1a0 <setup+0x194>)
   dd10e:	f001 fca6 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
    Time.zone(12-EEPROM.read(1));
   dd112:	f004 f841 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd116:	4620      	mov	r0, r4
   dd118:	f7f7 f88e 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd11c:	f1c0 000c 	rsb	r0, r0, #12
   dd120:	ee07 0a90 	vmov	s15, r0
   dd124:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
   dd128:	f002 fcf6 	bl	dfb18 <_ZN9TimeClass4zoneEf>
    mprev=(Time.minute()-1);
   dd12c:	f002 fd40 	bl	dfbb0 <_ZN9TimeClass6minuteEv>
   dd130:	4b21      	ldr	r3, [pc, #132]	; (dd1b8 <setup+0x1ac>)
   dd132:	3801      	subs	r0, #1
   dd134:	6018      	str	r0, [r3, #0]
    hprev=(Time.hourFormat12()-1);
   dd136:	f002 fd33 	bl	dfba0 <_ZN9TimeClass12hourFormat12Ev>
   dd13a:	4b20      	ldr	r3, [pc, #128]	; (dd1bc <setup+0x1b0>)
   dd13c:	3801      	subs	r0, #1
   dd13e:	6018      	str	r0, [r3, #0]
    bound = dnbound;
   dd140:	4b1f      	ldr	r3, [pc, #124]	; (dd1c0 <setup+0x1b4>)
   dd142:	223c      	movs	r2, #60	; 0x3c
    delay(50);
   dd144:	2032      	movs	r0, #50	; 0x32
    //Time.beginDST();
    strip.clear();
    Time.zone(12-EEPROM.read(1));
    mprev=(Time.minute()-1);
    hprev=(Time.hourFormat12()-1);
    bound = dnbound;
   dd146:	601a      	str	r2, [r3, #0]
    delay(50);
   dd148:	f002 fd46 	bl	dfbd8 <delay>
}
   dd14c:	b005      	add	sp, #20
   dd14e:	bd30      	pop	{r4, r5, pc}
   dd150:	2003e510 	.word	0x2003e510
   dd154:	2003e334 	.word	0x2003e334
   dd158:	000db009 	.word	0x000db009
   dd15c:	000e4488 	.word	0x000e4488
   dd160:	000d423d 	.word	0x000d423d
   dd164:	000e449e 	.word	0x000e449e
   dd168:	000d4101 	.word	0x000d4101
   dd16c:	000e44b3 	.word	0x000e44b3
   dd170:	000d40bd 	.word	0x000d40bd
   dd174:	000e44ca 	.word	0x000e44ca
   dd178:	000dd1c5 	.word	0x000dd1c5
   dd17c:	000e44e1 	.word	0x000e44e1
   dd180:	2003e518 	.word	0x2003e518
   dd184:	000d41ad 	.word	0x000d41ad
   dd188:	000e44eb 	.word	0x000e44eb
   dd18c:	000e47eb 	.word	0x000e47eb
   dd190:	000e4496 	.word	0x000e4496
   dd194:	000e44ac 	.word	0x000e44ac
   dd198:	000e44c1 	.word	0x000e44c1
   dd19c:	2003e30c 	.word	0x2003e30c
   dd1a0:	2003e31c 	.word	0x2003e31c
   dd1a4:	2003e348 	.word	0x2003e348
   dd1a8:	2003e2f4 	.word	0x2003e2f4
   dd1ac:	2003e330 	.word	0x2003e330
   dd1b0:	2003e310 	.word	0x2003e310
   dd1b4:	2003e364 	.word	0x2003e364
   dd1b8:	2003e350 	.word	0x2003e350
   dd1bc:	2003e318 	.word	0x2003e318
   dd1c0:	2003e338 	.word	0x2003e338

000dd1c4 <_Z7mshHdlrPKcS0_>:
        {
            dmode = 2;
        }
    }
}
void mshHdlr(const char *event, const char *data) {
   dd1c4:	b530      	push	{r4, r5, lr}
   dd1c6:	4d0d      	ldr	r5, [pc, #52]	; (dd1fc <_Z7mshHdlrPKcS0_+0x38>)
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   dd1c8:	4a0d      	ldr	r2, [pc, #52]	; (dd200 <_Z7mshHdlrPKcS0_+0x3c>)
   dd1ca:	782b      	ldrb	r3, [r5, #0]
   dd1cc:	490d      	ldr	r1, [pc, #52]	; (dd204 <_Z7mshHdlrPKcS0_+0x40>)
   dd1ce:	b085      	sub	sp, #20
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   dd1d0:	2400      	movs	r4, #0
   dd1d2:	a802      	add	r0, sp, #8
   dd1d4:	f88d 4000 	strb.w	r4, [sp]
   dd1d8:	f7f7 f8ea 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   dd1dc:	a803      	add	r0, sp, #12
   dd1de:	f7ff feff 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   dd1e2:	782b      	ldrb	r3, [r5, #0]
   dd1e4:	4a08      	ldr	r2, [pc, #32]	; (dd208 <_Z7mshHdlrPKcS0_+0x44>)
   dd1e6:	4909      	ldr	r1, [pc, #36]	; (dd20c <_Z7mshHdlrPKcS0_+0x48>)
   dd1e8:	f88d 4000 	strb.w	r4, [sp]
   dd1ec:	a802      	add	r0, sp, #8
   dd1ee:	f7f7 f8df 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   dd1f2:	a803      	add	r0, sp, #12
   dd1f4:	f7ff fef4 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    Particle.publish("getState","1");
    Particle.publish("btnpress999","toggle");
}
   dd1f8:	b005      	add	sp, #20
   dd1fa:	bd30      	pop	{r4, r5, pc}
   dd1fc:	2003e2ec 	.word	0x2003e2ec
   dd200:	000e47eb 	.word	0x000e47eb
   dd204:	000e44d8 	.word	0x000e44d8
   dd208:	000e44f5 	.word	0x000e44f5
   dd20c:	000e44fc 	.word	0x000e44fc

000dd210 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd210:	2300      	movs	r3, #0
   dd212:	2202      	movs	r2, #2
   dd214:	f001 bf40 	b.w	df098 <spark_variable>

000dd218 <loop>:
            sett = false;
        }
        delay(50);
    }
}                                                           
void loop() {                           //General operating loop of the program
   dd218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    Particle.variable("Photo", analogRead(A4));
   dd21c:	200f      	movs	r0, #15
            sett = false;
        }
        delay(50);
    }
}                                                           
void loop() {                           //General operating loop of the program
   dd21e:	b08b      	sub	sp, #44	; 0x2c
    Particle.variable("Photo", analogRead(A4));
   dd220:	f003 ffa3 	bl	e116a <analogRead>
   dd224:	ac0a      	add	r4, sp, #40	; 0x28
   dd226:	f844 0d08 	str.w	r0, [r4, #-8]!
   dd22a:	48bf      	ldr	r0, [pc, #764]	; (dd528 <loop+0x310>)
   dd22c:	4621      	mov	r1, r4
   dd22e:	f7ff ffef 	bl	dd210 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    Particle.variable("Co2", ico2);
   dd232:	49be      	ldr	r1, [pc, #760]	; (dd52c <loop+0x314>)
   dd234:	48be      	ldr	r0, [pc, #760]	; (dd530 <loop+0x318>)
   dd236:	f7ff ffeb 	bl	dd210 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    Particle.variable("Inside Temp", itemp);
   dd23a:	49be      	ldr	r1, [pc, #760]	; (dd534 <loop+0x31c>)
   dd23c:	48be      	ldr	r0, [pc, #760]	; (dd538 <loop+0x320>)
   dd23e:	f7ff ffe7 	bl	dd210 <_ZN10CloudClass8variableIA12_cIRiEEEbRKT_DpOT0_>
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dd242:	4bbe      	ldr	r3, [pc, #760]	; (dd53c <loop+0x324>)
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd244:	48be      	ldr	r0, [pc, #760]	; (dd540 <loop+0x328>)
    static inline bool variable(const T &name, ArgsT&&... args)
    {
        static_assert(!is_string_literal<T>::value || sizeof(name) <= USER_VAR_KEY_LENGTH + 1,
            "\n\nIn Particle.variable, name must be " __XSTRING(USER_VAR_KEY_LENGTH) " characters or less\n\n");

        return _variable(name, std::forward<ArgsT>(args)...);
   dd246:	781b      	ldrb	r3, [r3, #0]
   dd248:	9308      	str	r3, [sp, #32]
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   dd24a:	4621      	mov	r1, r4
   dd24c:	2300      	movs	r3, #0
   dd24e:	2202      	movs	r2, #2
   dd250:	f001 ff22 	bl	df098 <spark_variable>
    Particle.variable("EEPROM", eevalue);
    int hr = Time.hourFormat12();
   dd254:	f002 fca4 	bl	dfba0 <_ZN9TimeClass12hourFormat12Ev>
   dd258:	4607      	mov	r7, r0
    int min = Time.minute();
   dd25a:	f002 fca9 	bl	dfbb0 <_ZN9TimeClass6minuteEv>
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dd25e:	4bb9      	ldr	r3, [pc, #740]	; (dd544 <loop+0x32c>)
    Particle.variable("Photo", analogRead(A4));
    Particle.variable("Co2", ico2);
    Particle.variable("Inside Temp", itemp);
    Particle.variable("EEPROM", eevalue);
    int hr = Time.hourFormat12();
    int min = Time.minute();
   dd260:	9002      	str	r0, [sp, #8]
    
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
   dd262:	f8d3 a000 	ldr.w	sl, [r3]
   dd266:	9303      	str	r3, [sp, #12]
   dd268:	f1ba 0f01 	cmp.w	sl, #1
   dd26c:	4cb6      	ldr	r4, [pc, #728]	; (dd548 <loop+0x330>)
   dd26e:	d173      	bne.n	dd358 <loop+0x140>
        scan=2;
   dd270:	f04f 0902 	mov.w	r9, #2
        if(analogRead(A4) < bound) {
   dd274:	200f      	movs	r0, #15
//////////////////////////////////////
///////////PHOTORESISTOR//////////////
//////////////////////////////////////    
    
    if(scan == 1){
        scan=2;
   dd276:	f8c3 9000 	str.w	r9, [r3]
        if(analogRead(A4) < bound) {
   dd27a:	f003 ff76 	bl	e116a <analogRead>
   dd27e:	4ab3      	ldr	r2, [pc, #716]	; (dd54c <loop+0x334>)
   dd280:	f8df b2e8 	ldr.w	fp, [pc, #744]	; dd56c <loop+0x354>
   dd284:	6813      	ldr	r3, [r2, #0]
   dd286:	f8df 82d4 	ldr.w	r8, [pc, #724]	; dd55c <loop+0x344>
   dd28a:	4eb1      	ldr	r6, [pc, #708]	; (dd550 <loop+0x338>)
   dd28c:	4db1      	ldr	r5, [pc, #708]	; (dd554 <loop+0x33c>)
   dd28e:	4298      	cmp	r0, r3
   dd290:	da2f      	bge.n	dd2f2 <loop+0xda>
            bound = upbound;
   dd292:	21fa      	movs	r1, #250	; 0xfa
   dd294:	6011      	str	r1, [r2, #0]
            if(fdark == 2){
   dd296:	f8db 2000 	ldr.w	r2, [fp]
   dd29a:	454a      	cmp	r2, r9
   dd29c:	d104      	bne.n	dd2a8 <loop+0x90>
                strip.clear();
   dd29e:	48ae      	ldr	r0, [pc, #696]	; (dd558 <loop+0x340>)
   dd2a0:	f001 fbdd 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 1;
   dd2a4:	f8cb a000 	str.w	sl, [fp]
            }
            rclock = 0;
   dd2a8:	2300      	movs	r3, #0
   dd2aa:	f8c8 3000 	str.w	r3, [r8]
            gclock = 0;
   dd2ae:	6033      	str	r3, [r6, #0]
            bclock = 0;
   dd2b0:	602b      	str	r3, [r5, #0]
            if(EEPROM.read(5) == 2){
   dd2b2:	f003 ff71 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd2b6:	2005      	movs	r0, #5
   dd2b8:	f7f6 ffbe 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd2bc:	2802      	cmp	r0, #2
   dd2be:	d103      	bne.n	dd2c8 <loop+0xb0>
                gclock = 1;
   dd2c0:	4ba3      	ldr	r3, [pc, #652]	; (dd550 <loop+0x338>)
   dd2c2:	2201      	movs	r2, #1
   dd2c4:	601a      	str	r2, [r3, #0]
   dd2c6:	e00a      	b.n	dd2de <loop+0xc6>
            }
            else if(EEPROM.read(5) == 3){
   dd2c8:	f003 ff66 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd2cc:	2005      	movs	r0, #5
   dd2ce:	f7f6 ffb3 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd2d2:	2803      	cmp	r0, #3
                bclock = 1;
   dd2d4:	bf0c      	ite	eq
   dd2d6:	4a9f      	ldreq	r2, [pc, #636]	; (dd554 <loop+0x33c>)
            }
            else{
                rclock = 1;
   dd2d8:	4aa0      	ldrne	r2, [pc, #640]	; (dd55c <loop+0x344>)
   dd2da:	2301      	movs	r3, #1
   dd2dc:	6013      	str	r3, [r2, #0]
            }
            dmode = 1;
   dd2de:	2001      	movs	r0, #1
   dd2e0:	6020      	str	r0, [r4, #0]
            RGB.control(true);
   dd2e2:	f002 fc8b 	bl	dfbfc <_ZN8RGBClass7controlEb>
            RGB.color(0, 0, 0);
   dd2e6:	2200      	movs	r2, #0
   dd2e8:	4611      	mov	r1, r2
   dd2ea:	4610      	mov	r0, r2
   dd2ec:	f002 fc96 	bl	dfc1c <_ZN8RGBClass5colorEiii>
   dd2f0:	e032      	b.n	dd358 <loop+0x140>
        }
        else {
            if(fdark == 1){
   dd2f2:	f8db 2000 	ldr.w	r2, [fp]
   dd2f6:	2a01      	cmp	r2, #1
   dd2f8:	d104      	bne.n	dd304 <loop+0xec>
                strip.clear();
   dd2fa:	4897      	ldr	r0, [pc, #604]	; (dd558 <loop+0x340>)
   dd2fc:	f001 fbaf 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
                fdark = 2;
   dd300:	f8cb 9000 	str.w	r9, [fp]
            }
            rclock = analogRead(A4)/18;
   dd304:	200f      	movs	r0, #15
   dd306:	f003 ff30 	bl	e116a <analogRead>
   dd30a:	f04f 0912 	mov.w	r9, #18
   dd30e:	fb90 f0f9 	sdiv	r0, r0, r9
   dd312:	f8c8 0000 	str.w	r0, [r8]
            gclock = (analogRead(A4)/18)*0.8;
   dd316:	200f      	movs	r0, #15
   dd318:	f003 ff27 	bl	e116a <analogRead>
   dd31c:	fb90 f0f9 	sdiv	r0, r0, r9
   dd320:	f004 fa4c 	bl	e17bc <__aeabi_i2d>
   dd324:	a37c      	add	r3, pc, #496	; (adr r3, dd518 <loop+0x300>)
   dd326:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd32a:	f004 faad 	bl	e1888 <__aeabi_dmul>
   dd32e:	f004 fd45 	bl	e1dbc <__aeabi_d2iz>
   dd332:	6030      	str	r0, [r6, #0]
            bclock = (analogRead(A4)/18)*0.6;
   dd334:	200f      	movs	r0, #15
   dd336:	f003 ff18 	bl	e116a <analogRead>
   dd33a:	fb90 f0f9 	sdiv	r0, r0, r9
   dd33e:	f004 fa3d 	bl	e17bc <__aeabi_i2d>
   dd342:	a377      	add	r3, pc, #476	; (adr r3, dd520 <loop+0x308>)
   dd344:	e9d3 2300 	ldrd	r2, r3, [r3]
   dd348:	f004 fa9e 	bl	e1888 <__aeabi_dmul>
   dd34c:	f004 fd36 	bl	e1dbc <__aeabi_d2iz>
            bound = dnbound;
   dd350:	4a7e      	ldr	r2, [pc, #504]	; (dd54c <loop+0x334>)
                strip.clear();
                fdark = 2;
            }
            rclock = analogRead(A4)/18;
            gclock = (analogRead(A4)/18)*0.8;
            bclock = (analogRead(A4)/18)*0.6;
   dd352:	6028      	str	r0, [r5, #0]
            bound = dnbound;
   dd354:	233c      	movs	r3, #60	; 0x3c
   dd356:	6013      	str	r3, [r2, #0]
    
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
   dd358:	2000      	movs	r0, #0
   dd35a:	f003 fef3 	bl	e1144 <digitalRead>
   dd35e:	2801      	cmp	r0, #1
   dd360:	d108      	bne.n	dd374 <loop+0x15c>
   dd362:	f003 feef 	bl	e1144 <digitalRead>
   dd366:	b928      	cbnz	r0, dd374 <loop+0x15c>
   dd368:	2002      	movs	r0, #2
   dd36a:	f003 feeb 	bl	e1144 <digitalRead>
   dd36e:	2801      	cmp	r0, #1
   dd370:	f000 8791 	beq.w	de296 <loop+0x107e>
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
   dd374:	2002      	movs	r0, #2
   dd376:	f003 fee5 	bl	e1144 <digitalRead>
   dd37a:	2801      	cmp	r0, #1
   dd37c:	f040 878f 	bne.w	de29e <loop+0x1086>
   dd380:	f003 fee0 	bl	e1144 <digitalRead>
   dd384:	2800      	cmp	r0, #0
   dd386:	f040 878a 	bne.w	de29e <loop+0x1086>
   dd38a:	f003 fedb 	bl	e1144 <digitalRead>
   dd38e:	4682      	mov	sl, r0
   dd390:	2800      	cmp	r0, #0
   dd392:	f040 8784 	bne.w	de29e <loop+0x1086>
        strip.clear();
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd396:	4e6f      	ldr	r6, [pc, #444]	; (dd554 <loop+0x33c>)
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dd398:	486f      	ldr	r0, [pc, #444]	; (dd558 <loop+0x340>)
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd39a:	f8df 91b4 	ldr.w	r9, [pc, #436]	; dd550 <loop+0x338>
   dd39e:	f8df 81bc 	ldr.w	r8, [pc, #444]	; dd55c <loop+0x344>
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
    }
    if(digitalRead(D2) == HIGH && digitalRead(D1) == LOW && digitalRead(D0) == LOW){            //Bottom Button Press
        strip.clear();
   dd3a2:	f001 fb5c 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
        strdisp("CO2:", 0, rclock/2,gclock/3, bclock*2);
   dd3a6:	6831      	ldr	r1, [r6, #0]
   dd3a8:	f8d9 3000 	ldr.w	r3, [r9]
   dd3ac:	f8d8 2000 	ldr.w	r2, [r8]
   dd3b0:	486b      	ldr	r0, [pc, #428]	; (dd560 <loop+0x348>)
   dd3b2:	0049      	lsls	r1, r1, #1
   dd3b4:	2503      	movs	r5, #3
   dd3b6:	f04f 0b02 	mov.w	fp, #2
   dd3ba:	9100      	str	r1, [sp, #0]
   dd3bc:	fb93 f3f5 	sdiv	r3, r3, r5
   dd3c0:	4651      	mov	r1, sl
   dd3c2:	fb92 f2fb 	sdiv	r2, r2, fp
   dd3c6:	f7fb ff5b 	bl	d9280 <_Z7strdispPKciiii>
        snum(ico2/1000, 143, rclock/2,gclock/3, bclock*2);
   dd3ca:	6831      	ldr	r1, [r6, #0]
   dd3cc:	f8df a15c 	ldr.w	sl, [pc, #348]	; dd52c <loop+0x314>
   dd3d0:	f8d9 3000 	ldr.w	r3, [r9]
   dd3d4:	f8d8 2000 	ldr.w	r2, [r8]
   dd3d8:	f8da 0000 	ldr.w	r0, [sl]
   dd3dc:	fb93 f3f5 	sdiv	r3, r3, r5
   dd3e0:	0049      	lsls	r1, r1, #1
   dd3e2:	9100      	str	r1, [sp, #0]
   dd3e4:	fb92 f2fb 	sdiv	r2, r2, fp
   dd3e8:	218f      	movs	r1, #143	; 0x8f
   dd3ea:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   dd3ee:	fb90 f0f4 	sdiv	r0, r0, r4
   dd3f2:	f7f9 f82b 	bl	d644c <_Z4snumiiiii>
        snum((ico2/(100))%10, 175, rclock/2,gclock/3, bclock*2);
   dd3f6:	f8da 0000 	ldr.w	r0, [sl]
   dd3fa:	f8d9 3000 	ldr.w	r3, [r9]
   dd3fe:	f8d8 2000 	ldr.w	r2, [r8]
   dd402:	fb93 f3f5 	sdiv	r3, r3, r5
   dd406:	2164      	movs	r1, #100	; 0x64
   dd408:	fb90 f0f1 	sdiv	r0, r0, r1
   dd40c:	6831      	ldr	r1, [r6, #0]
   dd40e:	fb92 f2fb 	sdiv	r2, r2, fp
   dd412:	240a      	movs	r4, #10
   dd414:	0049      	lsls	r1, r1, #1
   dd416:	fb90 fef4 	sdiv	lr, r0, r4
   dd41a:	9100      	str	r1, [sp, #0]
   dd41c:	fb04 001e 	mls	r0, r4, lr, r0
   dd420:	21af      	movs	r1, #175	; 0xaf
   dd422:	f7f9 f813 	bl	d644c <_Z4snumiiiii>
        snum((ico2/(10))%10, 207, rclock/2,gclock/3, bclock*2);
   dd426:	6831      	ldr	r1, [r6, #0]
   dd428:	f8d9 3000 	ldr.w	r3, [r9]
   dd42c:	f8d8 2000 	ldr.w	r2, [r8]
   dd430:	f8da 0000 	ldr.w	r0, [sl]
   dd434:	fb93 f3f5 	sdiv	r3, r3, r5
   dd438:	0049      	lsls	r1, r1, #1
   dd43a:	fb90 f0f4 	sdiv	r0, r0, r4
   dd43e:	9100      	str	r1, [sp, #0]
   dd440:	fb90 fef4 	sdiv	lr, r0, r4
   dd444:	fb92 f2fb 	sdiv	r2, r2, fp
   dd448:	fb04 001e 	mls	r0, r4, lr, r0
   dd44c:	21cf      	movs	r1, #207	; 0xcf
   dd44e:	f7f8 fffd 	bl	d644c <_Z4snumiiiii>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
   dd452:	6831      	ldr	r1, [r6, #0]
   dd454:	f8da 0000 	ldr.w	r0, [sl]
   dd458:	f8d9 3000 	ldr.w	r3, [r9]
   dd45c:	fb90 fef4 	sdiv	lr, r0, r4
   dd460:	0049      	lsls	r1, r1, #1
   dd462:	fb04 001e 	mls	r0, r4, lr, r0
   dd466:	f8d8 2000 	ldr.w	r2, [r8]
   dd46a:	fb93 f3f5 	sdiv	r3, r3, r5
   dd46e:	fb92 f2fb 	sdiv	r2, r2, fp
   dd472:	9100      	str	r1, [sp, #0]
   dd474:	21ef      	movs	r1, #239	; 0xef
   dd476:	f7f8 ffe9 	bl	d644c <_Z4snumiiiii>
        strip.show();
   dd47a:	4837      	ldr	r0, [pc, #220]	; (dd558 <loop+0x340>)
   dd47c:	f001 f91e 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        delay(5000);
   dd480:	f241 3088 	movw	r0, #5000	; 0x1388
   dd484:	f002 fba8 	bl	dfbd8 <delay>
        strip.clear();
   dd488:	4833      	ldr	r0, [pc, #204]	; (dd558 <loop+0x340>)
   dd48a:	f001 fae8 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
        strip.show();
        while(digitalRead(D0) == HIGH){
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
   dd48e:	2001      	movs	r0, #1
   dd490:	f003 fe58 	bl	e1144 <digitalRead>
   dd494:	2801      	cmp	r0, #1
   dd496:	4c2c      	ldr	r4, [pc, #176]	; (dd548 <loop+0x330>)
   dd498:	d112      	bne.n	dd4c0 <loop+0x2a8>
   dd49a:	2000      	movs	r0, #0
   dd49c:	f003 fe52 	bl	e1144 <digitalRead>
   dd4a0:	b970      	cbnz	r0, dd4c0 <loop+0x2a8>
   dd4a2:	2002      	movs	r0, #2
   dd4a4:	f003 fe4e 	bl	e1144 <digitalRead>
   dd4a8:	4602      	mov	r2, r0
   dd4aa:	2800      	cmp	r0, #0
   dd4ac:	f000 8724 	beq.w	de2f8 <loop+0x10e0>
   dd4b0:	e006      	b.n	dd4c0 <loop+0x2a8>
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
            delay(10);
        }
        strip.setPixelColor(7,0,0,0);
   dd4b2:	2300      	movs	r3, #0
   dd4b4:	9300      	str	r3, [sp, #0]
   dd4b6:	461a      	mov	r2, r3
   dd4b8:	2107      	movs	r1, #7
   dd4ba:	4827      	ldr	r0, [pc, #156]	; (dd558 <loop+0x340>)
   dd4bc:	f001 faa0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
    
//////////////////////////////////////
//////////////MODE 1//////////////////              Clock with cycling weather conditions
//////////////////////////////////////
    
    if(dmode == 1){                                                     //Mode 1
   dd4c0:	6823      	ldr	r3, [r4, #0]
   dd4c2:	2b01      	cmp	r3, #1
   dd4c4:	f040 838d 	bne.w	ddbe2 <loop+0x9ca>


        /////////////
        ///CLOCK CODE
        if(mprev != min || scan == 2) {                         //Execute change in display if new time is found
   dd4c8:	4b26      	ldr	r3, [pc, #152]	; (dd564 <loop+0x34c>)
   dd4ca:	9902      	ldr	r1, [sp, #8]
   dd4cc:	681a      	ldr	r2, [r3, #0]
   dd4ce:	f8df 907c 	ldr.w	r9, [pc, #124]	; dd54c <loop+0x334>
   dd4d2:	4c25      	ldr	r4, [pc, #148]	; (dd568 <loop+0x350>)
   dd4d4:	4291      	cmp	r1, r2
   dd4d6:	469a      	mov	sl, r3
   dd4d8:	d103      	bne.n	dd4e2 <loop+0x2ca>
   dd4da:	9b03      	ldr	r3, [sp, #12]
   dd4dc:	681b      	ldr	r3, [r3, #0]
   dd4de:	2b02      	cmp	r3, #2
   dd4e0:	d156      	bne.n	dd590 <loop+0x378>

            if(analogRead(A4)>bound || EEPROM.read(6) == 0){    //If the brightness is above the threshold, post large numbers by default
   dd4e2:	200f      	movs	r0, #15
   dd4e4:	f003 fe41 	bl	e116a <analogRead>
   dd4e8:	f8d9 3000 	ldr.w	r3, [r9]
   dd4ec:	4d1b      	ldr	r5, [pc, #108]	; (dd55c <loop+0x344>)
   dd4ee:	4e18      	ldr	r6, [pc, #96]	; (dd550 <loop+0x338>)
   dd4f0:	f8df 8060 	ldr.w	r8, [pc, #96]	; dd554 <loop+0x33c>
   dd4f4:	4298      	cmp	r0, r3
   dd4f6:	9b02      	ldr	r3, [sp, #8]
   dd4f8:	f103 0b09 	add.w	fp, r3, #9
   dd4fc:	f300 8770 	bgt.w	de3e0 <loop+0x11c8>
   dd500:	f003 fe4a 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd504:	2006      	movs	r0, #6
   dd506:	f7f6 fe97 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd50a:	2800      	cmp	r0, #0
   dd50c:	f000 8768 	beq.w	de3e0 <loop+0x11c8>
   dd510:	f000 bfc1 	b.w	de496 <loop+0x127e>
   dd514:	f3af 8000 	nop.w
   dd518:	9999999a 	.word	0x9999999a
   dd51c:	3fe99999 	.word	0x3fe99999
   dd520:	33333333 	.word	0x33333333
   dd524:	3fe33333 	.word	0x3fe33333
   dd528:	000e4508 	.word	0x000e4508
   dd52c:	2003e308 	.word	0x2003e308
   dd530:	000e450e 	.word	0x000e450e
   dd534:	2003e344 	.word	0x2003e344
   dd538:	000e4512 	.word	0x000e4512
   dd53c:	2003e368 	.word	0x2003e368
   dd540:	000e451e 	.word	0x000e451e
   dd544:	2003e30c 	.word	0x2003e30c
   dd548:	2003e330 	.word	0x2003e330
   dd54c:	2003e338 	.word	0x2003e338
   dd550:	2003e314 	.word	0x2003e314
   dd554:	2003e35c 	.word	0x2003e35c
   dd558:	2003e31c 	.word	0x2003e31c
   dd55c:	2003e354 	.word	0x2003e354
   dd560:	000e4525 	.word	0x000e4525
   dd564:	2003e350 	.word	0x2003e350
   dd568:	2003e33c 	.word	0x2003e33c
   dd56c:	2003e310 	.word	0x2003e310
                }
                for(i=0;i<7;i++)                                 //Display 1 if present in the hour, 7 pixels tall
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
                }
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);    //Display other digit of hour
   dd570:	4bb2      	ldr	r3, [pc, #712]	; (dd83c <loop+0x624>)
   dd572:	681b      	ldr	r3, [r3, #0]
   dd574:	9300      	str	r3, [sp, #0]
   dd576:	200a      	movs	r0, #10
   dd578:	6833      	ldr	r3, [r6, #0]
   dd57a:	fb97 fef0 	sdiv	lr, r7, r0
   dd57e:	682a      	ldr	r2, [r5, #0]
   dd580:	fb00 701e 	mls	r0, r0, lr, r7
   dd584:	2110      	movs	r1, #16
   dd586:	f7f6 ff2d 	bl	d43e4 <_Z3numiiiii>
                strip.show();
   dd58a:	48ad      	ldr	r0, [pc, #692]	; (dd840 <loop+0x628>)
   dd58c:	f001 f896 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
        }
        scan=1;
   dd590:	9a03      	ldr	r2, [sp, #12]
   dd592:	2301      	movs	r3, #1


        /////////////////
        ///OTHER ELEMENTS
        if(analogRead(A4) >= bound)///////////////////////////////////////IF SENSOR IS BRIGHT
   dd594:	200f      	movs	r0, #15
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
                strip.show();
            }
        }
        scan=1;
   dd596:	6013      	str	r3, [r2, #0]


        /////////////////
        ///OTHER ELEMENTS
        if(analogRead(A4) >= bound)///////////////////////////////////////IF SENSOR IS BRIGHT
   dd598:	f003 fde7 	bl	e116a <analogRead>
   dd59c:	f8d9 3000 	ldr.w	r3, [r9]
   dd5a0:	4298      	cmp	r0, r3
   dd5a2:	f2c0 82ae 	blt.w	ddb02 <loop+0x8ea>
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
   dd5a6:	4ea5      	ldr	r6, [pc, #660]	; (dd83c <loop+0x624>)
   dd5a8:	f8df 82ac 	ldr.w	r8, [pc, #684]	; dd858 <loop+0x640>
   dd5ac:	4da5      	ldr	r5, [pc, #660]	; (dd844 <loop+0x62c>)
   dd5ae:	6831      	ldr	r1, [r6, #0]
   dd5b0:	682b      	ldr	r3, [r5, #0]
   dd5b2:	f8d8 2000 	ldr.w	r2, [r8]
   dd5b6:	48a2      	ldr	r0, [pc, #648]	; (dd840 <loop+0x628>)
   dd5b8:	2702      	movs	r7, #2
   dd5ba:	fb91 f1f7 	sdiv	r1, r1, r7
   dd5be:	b2c9      	uxtb	r1, r1
   dd5c0:	fb93 f3f7 	sdiv	r3, r3, r7
   dd5c4:	fb92 f2f7 	sdiv	r2, r2, r7
   dd5c8:	9100      	str	r1, [sp, #0]
   dd5ca:	b2db      	uxtb	r3, r3
   dd5cc:	b2d2      	uxtb	r2, r2
   dd5ce:	213a      	movs	r1, #58	; 0x3a
   dd5d0:	f001 fa16 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
   dd5d4:	6831      	ldr	r1, [r6, #0]
   dd5d6:	682b      	ldr	r3, [r5, #0]
   dd5d8:	f8d8 2000 	ldr.w	r2, [r8]
   dd5dc:	fb93 f3f7 	sdiv	r3, r3, r7
   dd5e0:	fb92 f2f7 	sdiv	r2, r2, r7
   dd5e4:	fb91 f7f7 	sdiv	r7, r1, r7
   dd5e8:	b2ff      	uxtb	r7, r7
   dd5ea:	b2db      	uxtb	r3, r3
   dd5ec:	9700      	str	r7, [sp, #0]
   dd5ee:	b2d2      	uxtb	r2, r2
   dd5f0:	213e      	movs	r1, #62	; 0x3e
   dd5f2:	4893      	ldr	r0, [pc, #588]	; (dd840 <loop+0x628>)
   dd5f4:	f001 fa04 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            for(i=0; i<100; i++)
   dd5f8:	2300      	movs	r3, #0
   dd5fa:	6023      	str	r3, [r4, #0]
   dd5fc:	46c3      	mov	fp, r8
   dd5fe:	6823      	ldr	r3, [r4, #0]
   dd600:	2b63      	cmp	r3, #99	; 0x63
   dd602:	dc0a      	bgt.n	dd61a <loop+0x402>
            {
                if(digitalRead(D1)==LOW)
   dd604:	2001      	movs	r0, #1
   dd606:	f003 fd9d 	bl	e1144 <digitalRead>
   dd60a:	b910      	cbnz	r0, dd612 <loop+0x3fa>
                {
                    delay(5);
   dd60c:	2005      	movs	r0, #5
   dd60e:	f002 fae3 	bl	dfbd8 <delay>
        {
            /*strip.setPixelColor(58,rclock,gclock,bclock);
            strip.setPixelColor(62,rclock,gclock,bclock);*/
            strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);
            for(i=0; i<100; i++)
   dd612:	6823      	ldr	r3, [r4, #0]
   dd614:	3301      	adds	r3, #1
   dd616:	6023      	str	r3, [r4, #0]
   dd618:	e7f1      	b.n	dd5fe <loop+0x3e6>
                if(digitalRead(D1)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dd61a:	4889      	ldr	r0, [pc, #548]	; (dd840 <loop+0x628>)
   dd61c:	f001 f84e 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            for(i=0; i<100; i++)
   dd620:	4b89      	ldr	r3, [pc, #548]	; (dd848 <loop+0x630>)
   dd622:	2200      	movs	r2, #0
   dd624:	601a      	str	r2, [r3, #0]
   dd626:	6823      	ldr	r3, [r4, #0]
   dd628:	f8df 921c 	ldr.w	r9, [pc, #540]	; dd848 <loop+0x630>
   dd62c:	2b63      	cmp	r3, #99	; 0x63
   dd62e:	dc0a      	bgt.n	dd646 <loop+0x42e>
            {
                if(digitalRead(D1)==LOW)
   dd630:	2001      	movs	r0, #1
   dd632:	f003 fd87 	bl	e1144 <digitalRead>
   dd636:	b910      	cbnz	r0, dd63e <loop+0x426>
                {
                    delay(5);
   dd638:	2005      	movs	r0, #5
   dd63a:	f002 facd 	bl	dfbd8 <delay>
                }
            }
            strip.show();
            /*strip.setPixelColor(58,rclock/2,gclock/2,bclock/2);
            strip.setPixelColor(62,rclock/2,gclock/2,bclock/2);*/
            for(i=0; i<100; i++)
   dd63e:	6823      	ldr	r3, [r4, #0]
   dd640:	3301      	adds	r3, #1
   dd642:	6023      	str	r3, [r4, #0]
   dd644:	e7ef      	b.n	dd626 <loop+0x40e>
                if(digitalRead(D1)==LOW)
                {
                    delay(5);
                }
            }
            strip.show();
   dd646:	487e      	ldr	r0, [pc, #504]	; (dd840 <loop+0x628>)
   dd648:	f001 f838 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)
   dd64c:	f003 fda4 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd650:	2002      	movs	r0, #2
   dd652:	f7f6 fdf1 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd656:	2801      	cmp	r0, #1
   dd658:	f040 85a8 	bne.w	de1ac <loop+0xf94>
            {
                if(wmode == 1)                                      //Outdoor Temperature
   dd65c:	4f7b      	ldr	r7, [pc, #492]	; (dd84c <loop+0x634>)
   dd65e:	683b      	ldr	r3, [r7, #0]
   dd660:	2b01      	cmp	r3, #1
   dd662:	f040 80ce 	bne.w	dd802 <loop+0x5ea>
                {
                    for(i=160;i<256;i++)
   dd666:	23a0      	movs	r3, #160	; 0xa0
   dd668:	f8c9 3000 	str.w	r3, [r9]
   dd66c:	f04f 0a00 	mov.w	sl, #0
   dd670:	6821      	ldr	r1, [r4, #0]
   dd672:	4a75      	ldr	r2, [pc, #468]	; (dd848 <loop+0x630>)
   dd674:	29ff      	cmp	r1, #255	; 0xff
   dd676:	f04f 0300 	mov.w	r3, #0
   dd67a:	dc0c      	bgt.n	dd696 <loop+0x47e>
                    {
                        strip.setPixelColor(i,0,0,0);
   dd67c:	461a      	mov	r2, r3
   dd67e:	f8cd a000 	str.w	sl, [sp]
   dd682:	b289      	uxth	r1, r1
   dd684:	486e      	ldr	r0, [pc, #440]	; (dd840 <loop+0x628>)
   dd686:	f001 f9bb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            ///////WEATHER DISPLAY MODES//////////
            if(EEPROM.read(2) == 1)
            {
                if(wmode == 1)                                      //Outdoor Temperature
                {
                    for(i=160;i<256;i++)
   dd68a:	f8d9 3000 	ldr.w	r3, [r9]
   dd68e:	3301      	adds	r3, #1
   dd690:	f8c9 3000 	str.w	r3, [r9]
   dd694:	e7ec      	b.n	dd670 <loop+0x458>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    for(i=0; i <= 25; i++){
   dd696:	6013      	str	r3, [r2, #0]
   dd698:	4690      	mov	r8, r2
   dd69a:	6822      	ldr	r2, [r4, #0]
   dd69c:	2a19      	cmp	r2, #25
   dd69e:	dc37      	bgt.n	dd710 <loop+0x4f8>
                        num(TC1,160,0,(gclock*i)/25,0);
   dd6a0:	f04f 0900 	mov.w	r9, #0
   dd6a4:	682b      	ldr	r3, [r5, #0]
   dd6a6:	486a      	ldr	r0, [pc, #424]	; (dd850 <loop+0x638>)
   dd6a8:	f8cd 9000 	str.w	r9, [sp]
   dd6ac:	f04f 0a19 	mov.w	sl, #25
   dd6b0:	4353      	muls	r3, r2
   dd6b2:	21a0      	movs	r1, #160	; 0xa0
   dd6b4:	fb93 f3fa 	sdiv	r3, r3, sl
   dd6b8:	464a      	mov	r2, r9
   dd6ba:	6800      	ldr	r0, [r0, #0]
   dd6bc:	f7f6 fe92 	bl	d43e4 <_Z3numiiiii>
                        num(TC2,207,0,(gclock*i)/25,0);
   dd6c0:	682a      	ldr	r2, [r5, #0]
   dd6c2:	f8d8 3000 	ldr.w	r3, [r8]
   dd6c6:	4863      	ldr	r0, [pc, #396]	; (dd854 <loop+0x63c>)
   dd6c8:	f8cd 9000 	str.w	r9, [sp]
   dd6cc:	4353      	muls	r3, r2
   dd6ce:	21cf      	movs	r1, #207	; 0xcf
   dd6d0:	fb93 f3fa 	sdiv	r3, r3, sl
   dd6d4:	464a      	mov	r2, r9
   dd6d6:	6800      	ldr	r0, [r0, #0]
   dd6d8:	f7f6 fe84 	bl	d43e4 <_Z3numiiiii>
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
   dd6dc:	682a      	ldr	r2, [r5, #0]
   dd6de:	f8d8 3000 	ldr.w	r3, [r8]
   dd6e2:	4857      	ldr	r0, [pc, #348]	; (dd840 <loop+0x628>)
   dd6e4:	f8cd 9000 	str.w	r9, [sp]
   dd6e8:	21f0      	movs	r1, #240	; 0xf0
   dd6ea:	4353      	muls	r3, r2
   dd6ec:	464a      	mov	r2, r9
   dd6ee:	fb93 f3fa 	sdiv	r3, r3, sl
   dd6f2:	b2db      	uxtb	r3, r3
   dd6f4:	f001 f984 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.show();
   dd6f8:	4851      	ldr	r0, [pc, #324]	; (dd840 <loop+0x628>)
   dd6fa:	f000 ffdf 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd6fe:	2002      	movs	r0, #2
   dd700:	f002 fa6a 	bl	dfbd8 <delay>
                {
                    for(i=160;i<256;i++)
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    for(i=0; i <= 25; i++){
   dd704:	f8d8 3000 	ldr.w	r3, [r8]
   dd708:	3301      	adds	r3, #1
   dd70a:	f8c8 3000 	str.w	r3, [r8]
   dd70e:	e7c4      	b.n	dd69a <loop+0x482>
                        num(TC2,207,0,(gclock*i)/25,0);
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
                        strip.show();
                        delay(2);
                    }
                    num(TC1,160,0,gclock/1,0);
   dd710:	f04f 0800 	mov.w	r8, #0
   dd714:	484e      	ldr	r0, [pc, #312]	; (dd850 <loop+0x638>)
   dd716:	f8cd 8000 	str.w	r8, [sp]
   dd71a:	682b      	ldr	r3, [r5, #0]
   dd71c:	6800      	ldr	r0, [r0, #0]
   dd71e:	4642      	mov	r2, r8
   dd720:	21a0      	movs	r1, #160	; 0xa0
   dd722:	f7f6 fe5f 	bl	d43e4 <_Z3numiiiii>
                    num(TC2,207,0,gclock/1,0);
   dd726:	484b      	ldr	r0, [pc, #300]	; (dd854 <loop+0x63c>)
   dd728:	f8cd 8000 	str.w	r8, [sp]
   dd72c:	682b      	ldr	r3, [r5, #0]
   dd72e:	6800      	ldr	r0, [r0, #0]
   dd730:	4642      	mov	r2, r8
   dd732:	21cf      	movs	r1, #207	; 0xcf
   dd734:	f7f6 fe56 	bl	d43e4 <_Z3numiiiii>
                    strip.setPixelColor(240,0,gclock/1,0);
   dd738:	782b      	ldrb	r3, [r5, #0]
   dd73a:	4841      	ldr	r0, [pc, #260]	; (dd840 <loop+0x628>)
   dd73c:	f8cd 8000 	str.w	r8, [sp]
   dd740:	4642      	mov	r2, r8
   dd742:	21f0      	movs	r1, #240	; 0xf0
   dd744:	f001 f95c 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    for(i=0; i < 25; i++){
   dd748:	4b3f      	ldr	r3, [pc, #252]	; (dd848 <loop+0x630>)
   dd74a:	f8c3 8000 	str.w	r8, [r3]
   dd74e:	6822      	ldr	r2, [r4, #0]
   dd750:	4b3d      	ldr	r3, [pc, #244]	; (dd848 <loop+0x630>)
   dd752:	2a18      	cmp	r2, #24
   dd754:	dc0a      	bgt.n	dd76c <loop+0x554>
                        if(digitalRead(D0) == LOW){
   dd756:	2000      	movs	r0, #0
   dd758:	f003 fcf4 	bl	e1144 <digitalRead>
   dd75c:	b910      	cbnz	r0, dd764 <loop+0x54c>
                            delay(100);
   dd75e:	2064      	movs	r0, #100	; 0x64
   dd760:	f002 fa3a 	bl	dfbd8 <delay>
                        delay(2);
                    }
                    num(TC1,160,0,gclock/1,0);
                    num(TC2,207,0,gclock/1,0);
                    strip.setPixelColor(240,0,gclock/1,0);
                    for(i=0; i < 25; i++){
   dd764:	6823      	ldr	r3, [r4, #0]
   dd766:	3301      	adds	r3, #1
   dd768:	6023      	str	r3, [r4, #0]
   dd76a:	e7f0      	b.n	dd74e <loop+0x536>
                        if(digitalRead(D0) == LOW){
                            delay(100);
                        }
                    }
                    for(i=25; i >= 0; i--){
   dd76c:	2219      	movs	r2, #25
   dd76e:	601a      	str	r2, [r3, #0]
   dd770:	4698      	mov	r8, r3
   dd772:	6822      	ldr	r2, [r4, #0]
   dd774:	2a00      	cmp	r2, #0
   dd776:	db37      	blt.n	dd7e8 <loop+0x5d0>
                        num(TC1,160,0,(gclock*i)/25,0);
   dd778:	f04f 0900 	mov.w	r9, #0
   dd77c:	682b      	ldr	r3, [r5, #0]
   dd77e:	4834      	ldr	r0, [pc, #208]	; (dd850 <loop+0x638>)
   dd780:	f8cd 9000 	str.w	r9, [sp]
   dd784:	f04f 0a19 	mov.w	sl, #25
   dd788:	4353      	muls	r3, r2
   dd78a:	21a0      	movs	r1, #160	; 0xa0
   dd78c:	fb93 f3fa 	sdiv	r3, r3, sl
   dd790:	464a      	mov	r2, r9
   dd792:	6800      	ldr	r0, [r0, #0]
   dd794:	f7f6 fe26 	bl	d43e4 <_Z3numiiiii>
                        num(TC2,207,0,(gclock*i)/25,0);
   dd798:	682a      	ldr	r2, [r5, #0]
   dd79a:	f8d8 3000 	ldr.w	r3, [r8]
   dd79e:	482d      	ldr	r0, [pc, #180]	; (dd854 <loop+0x63c>)
   dd7a0:	f8cd 9000 	str.w	r9, [sp]
   dd7a4:	4353      	muls	r3, r2
   dd7a6:	21cf      	movs	r1, #207	; 0xcf
   dd7a8:	fb93 f3fa 	sdiv	r3, r3, sl
   dd7ac:	464a      	mov	r2, r9
   dd7ae:	6800      	ldr	r0, [r0, #0]
   dd7b0:	f7f6 fe18 	bl	d43e4 <_Z3numiiiii>
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
   dd7b4:	682a      	ldr	r2, [r5, #0]
   dd7b6:	f8d8 3000 	ldr.w	r3, [r8]
   dd7ba:	4821      	ldr	r0, [pc, #132]	; (dd840 <loop+0x628>)
   dd7bc:	f8cd 9000 	str.w	r9, [sp]
   dd7c0:	21f0      	movs	r1, #240	; 0xf0
   dd7c2:	4353      	muls	r3, r2
   dd7c4:	464a      	mov	r2, r9
   dd7c6:	fb93 f3fa 	sdiv	r3, r3, sl
   dd7ca:	b2db      	uxtb	r3, r3
   dd7cc:	f001 f918 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.show();
   dd7d0:	481b      	ldr	r0, [pc, #108]	; (dd840 <loop+0x628>)
   dd7d2:	f000 ff73 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd7d6:	2002      	movs	r0, #2
   dd7d8:	f002 f9fe 	bl	dfbd8 <delay>
                    for(i=0; i < 25; i++){
                        if(digitalRead(D0) == LOW){
                            delay(100);
                        }
                    }
                    for(i=25; i >= 0; i--){
   dd7dc:	f8d8 3000 	ldr.w	r3, [r8]
   dd7e0:	3b01      	subs	r3, #1
   dd7e2:	f8c8 3000 	str.w	r3, [r8]
   dd7e6:	e7c4      	b.n	dd772 <loop+0x55a>
                        num(TC2,207,0,(gclock*i)/25,0);
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
                        strip.show();
                        delay(2);
                    }
                    if(EEPROM.read(4) == 1){
   dd7e8:	f003 fcd6 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   dd7ec:	2004      	movs	r0, #4
   dd7ee:	f7f6 fd23 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   dd7f2:	2801      	cmp	r0, #1
                        wmode = 2;
   dd7f4:	bf0c      	ite	eq
   dd7f6:	2302      	moveq	r3, #2
                    }
                    else{
                        wmode = 3;
   dd7f8:	2303      	movne	r3, #3
                    }
                    strip.show();
   dd7fa:	4811      	ldr	r0, [pc, #68]	; (dd840 <loop+0x628>)
                    }
                    if(EEPROM.read(4) == 1){
                        wmode = 2;
                    }
                    else{
                        wmode = 3;
   dd7fc:	603b      	str	r3, [r7, #0]
                    }
                    strip.show();
   dd7fe:	f000 ff5d 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                }
                if(wmode == 2)                                      //Indoor Temp from Adafruit Sensor
   dd802:	683b      	ldr	r3, [r7, #0]
   dd804:	2b02      	cmp	r3, #2
   dd806:	f040 80ba 	bne.w	dd97e <loop+0x766>
                {
                    for(i=160;i<256;i++)
   dd80a:	23a0      	movs	r3, #160	; 0xa0
   dd80c:	f8df 9038 	ldr.w	r9, [pc, #56]	; dd848 <loop+0x630>
   dd810:	6023      	str	r3, [r4, #0]
   dd812:	f04f 0a00 	mov.w	sl, #0
   dd816:	6821      	ldr	r1, [r4, #0]
   dd818:	4a0b      	ldr	r2, [pc, #44]	; (dd848 <loop+0x630>)
   dd81a:	29ff      	cmp	r1, #255	; 0xff
   dd81c:	f04f 0300 	mov.w	r3, #0
   dd820:	dc1c      	bgt.n	dd85c <loop+0x644>
                    {
                        strip.setPixelColor(i,0,0,0);
   dd822:	461a      	mov	r2, r3
   dd824:	f8cd a000 	str.w	sl, [sp]
   dd828:	b289      	uxth	r1, r1
   dd82a:	4805      	ldr	r0, [pc, #20]	; (dd840 <loop+0x628>)
   dd82c:	f001 f8e8 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    }
                    strip.show();
                }
                if(wmode == 2)                                      //Indoor Temp from Adafruit Sensor
                {
                    for(i=160;i<256;i++)
   dd830:	f8d9 3000 	ldr.w	r3, [r9]
   dd834:	3301      	adds	r3, #1
   dd836:	f8c9 3000 	str.w	r3, [r9]
   dd83a:	e7ec      	b.n	dd816 <loop+0x5fe>
   dd83c:	2003e35c 	.word	0x2003e35c
   dd840:	2003e31c 	.word	0x2003e31c
   dd844:	2003e314 	.word	0x2003e314
   dd848:	2003e33c 	.word	0x2003e33c
   dd84c:	2003e2f4 	.word	0x2003e2f4
   dd850:	2003e2f8 	.word	0x2003e2f8
   dd854:	2003e34c 	.word	0x2003e34c
   dd858:	2003e354 	.word	0x2003e354
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    for(i=0; i <= 25; i++){
   dd85c:	6013      	str	r3, [r2, #0]
   dd85e:	4690      	mov	r8, r2
   dd860:	6823      	ldr	r3, [r4, #0]
   dd862:	f8df 9310 	ldr.w	r9, [pc, #784]	; ddb74 <loop+0x95c>
   dd866:	2b19      	cmp	r3, #25
   dd868:	dc37      	bgt.n	dd8da <loop+0x6c2>
                        num(TC1,160,0,(gclock*i)/25,0);
   dd86a:	f04f 0900 	mov.w	r9, #0
   dd86e:	6829      	ldr	r1, [r5, #0]
   dd870:	48bb      	ldr	r0, [pc, #748]	; (ddb60 <loop+0x948>)
   dd872:	f8cd 9000 	str.w	r9, [sp]
   dd876:	f04f 0a19 	mov.w	sl, #25
   dd87a:	434b      	muls	r3, r1
   dd87c:	464a      	mov	r2, r9
   dd87e:	fb93 f3fa 	sdiv	r3, r3, sl
   dd882:	21a0      	movs	r1, #160	; 0xa0
   dd884:	6800      	ldr	r0, [r0, #0]
   dd886:	f7f6 fdad 	bl	d43e4 <_Z3numiiiii>
                        num(TC2,207,0,(gclock*i)/25,0);
   dd88a:	682a      	ldr	r2, [r5, #0]
   dd88c:	f8d8 3000 	ldr.w	r3, [r8]
   dd890:	48b4      	ldr	r0, [pc, #720]	; (ddb64 <loop+0x94c>)
   dd892:	f8cd 9000 	str.w	r9, [sp]
   dd896:	4353      	muls	r3, r2
   dd898:	21cf      	movs	r1, #207	; 0xcf
   dd89a:	fb93 f3fa 	sdiv	r3, r3, sl
   dd89e:	464a      	mov	r2, r9
   dd8a0:	6800      	ldr	r0, [r0, #0]
   dd8a2:	f7f6 fd9f 	bl	d43e4 <_Z3numiiiii>
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
   dd8a6:	682a      	ldr	r2, [r5, #0]
   dd8a8:	f8d8 3000 	ldr.w	r3, [r8]
   dd8ac:	48ae      	ldr	r0, [pc, #696]	; (ddb68 <loop+0x950>)
   dd8ae:	f8cd 9000 	str.w	r9, [sp]
   dd8b2:	21f0      	movs	r1, #240	; 0xf0
   dd8b4:	4353      	muls	r3, r2
   dd8b6:	464a      	mov	r2, r9
   dd8b8:	fb93 f3fa 	sdiv	r3, r3, sl
   dd8bc:	b2db      	uxtb	r3, r3
   dd8be:	f001 f89f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.show();
   dd8c2:	48a9      	ldr	r0, [pc, #676]	; (ddb68 <loop+0x950>)
   dd8c4:	f000 fefa 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                        delay(2);
   dd8c8:	2002      	movs	r0, #2
   dd8ca:	f002 f985 	bl	dfbd8 <delay>
                {
                    for(i=160;i<256;i++)
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    for(i=0; i <= 25; i++){
   dd8ce:	f8d8 3000 	ldr.w	r3, [r8]
   dd8d2:	3301      	adds	r3, #1
   dd8d4:	f8c8 3000 	str.w	r3, [r8]
   dd8d8:	e7c2      	b.n	dd860 <loop+0x648>
                        num(TC2,207,0,(gclock*i)/25,0);
                        strip.setPixelColor(240,0,(gclock*i)/25,0);
                        strip.show();
                        delay(2);
                    }
                    num(itemp/10,160,(rclock*i)/50,0,(bclock*i)/25);
   dd8da:	f8db 2000 	ldr.w	r2, [fp]
   dd8de:	6831      	ldr	r1, [r6, #0]
   dd8e0:	f8df a29c 	ldr.w	sl, [pc, #668]	; ddb80 <loop+0x968>
   dd8e4:	2532      	movs	r5, #50	; 0x32
   dd8e6:	f8da 0000 	ldr.w	r0, [sl]
   dd8ea:	f04f 080a 	mov.w	r8, #10
   dd8ee:	2419      	movs	r4, #25
   dd8f0:	435a      	muls	r2, r3
   dd8f2:	4359      	muls	r1, r3
   dd8f4:	fb92 f2f5 	sdiv	r2, r2, r5
   dd8f8:	fb91 f1f4 	sdiv	r1, r1, r4
   dd8fc:	2300      	movs	r3, #0
   dd8fe:	9100      	str	r1, [sp, #0]
   dd900:	fb90 f0f8 	sdiv	r0, r0, r8
   dd904:	21a0      	movs	r1, #160	; 0xa0
   dd906:	f7f6 fd6d 	bl	d43e4 <_Z3numiiiii>
                    num(itemp%10,207,(rclock*i)/50,0,(bclock*i)/25);
   dd90a:	f8d9 1000 	ldr.w	r1, [r9]
   dd90e:	f8da 0000 	ldr.w	r0, [sl]
   dd912:	f8db 2000 	ldr.w	r2, [fp]
   dd916:	6833      	ldr	r3, [r6, #0]
   dd918:	fb90 fef8 	sdiv	lr, r0, r8
   dd91c:	434a      	muls	r2, r1
   dd91e:	fb08 001e 	mls	r0, r8, lr, r0
   dd922:	434b      	muls	r3, r1
   dd924:	fb92 f2f5 	sdiv	r2, r2, r5
   dd928:	fb93 f3f4 	sdiv	r3, r3, r4
   dd92c:	21cf      	movs	r1, #207	; 0xcf
   dd92e:	9300      	str	r3, [sp, #0]
   dd930:	2300      	movs	r3, #0
   dd932:	f7f6 fd57 	bl	d43e4 <_Z3numiiiii>
                    strip.setPixelColor(240,(rclock*i)/50,0,(bclock*i)/25);
   dd936:	f8d9 1000 	ldr.w	r1, [r9]
   dd93a:	6833      	ldr	r3, [r6, #0]
   dd93c:	f8db 2000 	ldr.w	r2, [fp]
   dd940:	4889      	ldr	r0, [pc, #548]	; (ddb68 <loop+0x950>)
   dd942:	434b      	muls	r3, r1
   dd944:	fb93 f3f4 	sdiv	r3, r3, r4
   dd948:	b2db      	uxtb	r3, r3
   dd94a:	434a      	muls	r2, r1
   dd94c:	9300      	str	r3, [sp, #0]
   dd94e:	21f0      	movs	r1, #240	; 0xf0
   dd950:	2300      	movs	r3, #0
   dd952:	fb92 f2f5 	sdiv	r2, r2, r5
   dd956:	b2d2      	uxtb	r2, r2
   dd958:	f001 f852 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    strip.show();
   dd95c:	4882      	ldr	r0, [pc, #520]	; (ddb68 <loop+0x950>)
   dd95e:	f000 fead 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                    if(tmr%7==0)
   dd962:	4b82      	ldr	r3, [pc, #520]	; (ddb6c <loop+0x954>)
   dd964:	681a      	ldr	r2, [r3, #0]
   dd966:	2307      	movs	r3, #7
   dd968:	fb92 f3f3 	sdiv	r3, r2, r3
   dd96c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   dd970:	429a      	cmp	r2, r3
   dd972:	f040 841b 	bne.w	de1ac <loop+0xf94>
                    {
                        wmode = 3;
   dd976:	2303      	movs	r3, #3
   dd978:	603b      	str	r3, [r7, #0]
   dd97a:	f000 bc17 	b.w	de1ac <loop+0xf94>
                    }
                }
                else if (wmode == 3)
   dd97e:	2b03      	cmp	r3, #3
   dd980:	f040 808d 	bne.w	dda9e <loop+0x886>
                {
                    for(i=160;i<231;i++)
   dd984:	23a0      	movs	r3, #160	; 0xa0
   dd986:	f8df 81ec 	ldr.w	r8, [pc, #492]	; ddb74 <loop+0x95c>
   dd98a:	6023      	str	r3, [r4, #0]
                    {
                        strip.setPixelColor(i,0,0,0);
   dd98c:	f04f 0900 	mov.w	r9, #0
                        wmode = 3;
                    }
                }
                else if (wmode == 3)
                {
                    for(i=160;i<231;i++)
   dd990:	6821      	ldr	r1, [r4, #0]
   dd992:	29e6      	cmp	r1, #230	; 0xe6
   dd994:	dc0d      	bgt.n	dd9b2 <loop+0x79a>
                    {
                        strip.setPixelColor(i,0,0,0);
   dd996:	2300      	movs	r3, #0
   dd998:	461a      	mov	r2, r3
   dd99a:	f8cd 9000 	str.w	r9, [sp]
   dd99e:	b289      	uxth	r1, r1
   dd9a0:	4871      	ldr	r0, [pc, #452]	; (ddb68 <loop+0x950>)
   dd9a2:	f001 f82d 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        wmode = 3;
                    }
                }
                else if (wmode == 3)
                {
                    for(i=160;i<231;i++)
   dd9a6:	f8d8 3000 	ldr.w	r3, [r8]
   dd9aa:	3301      	adds	r3, #1
   dd9ac:	f8c8 3000 	str.w	r3, [r8]
   dd9b0:	e7ee      	b.n	dd990 <loop+0x778>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    if(HC1 == 10)
   dd9b2:	f8df 81d0 	ldr.w	r8, [pc, #464]	; ddb84 <loop+0x96c>
   dd9b6:	f8d8 3000 	ldr.w	r3, [r8]
   dd9ba:	2b0a      	cmp	r3, #10
   dd9bc:	d148      	bne.n	dda50 <loop+0x838>
                    {
                        strip.setPixelColor(160,0,gclock,bclock);
   dd9be:	7832      	ldrb	r2, [r6, #0]
   dd9c0:	782b      	ldrb	r3, [r5, #0]
   dd9c2:	4869      	ldr	r0, [pc, #420]	; (ddb68 <loop+0x950>)
   dd9c4:	9200      	str	r2, [sp, #0]
   dd9c6:	21a0      	movs	r1, #160	; 0xa0
   dd9c8:	2200      	movs	r2, #0
   dd9ca:	f001 f819 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(161,0,gclock,bclock);
   dd9ce:	7832      	ldrb	r2, [r6, #0]
   dd9d0:	782b      	ldrb	r3, [r5, #0]
   dd9d2:	4865      	ldr	r0, [pc, #404]	; (ddb68 <loop+0x950>)
   dd9d4:	9200      	str	r2, [sp, #0]
   dd9d6:	21a1      	movs	r1, #161	; 0xa1
   dd9d8:	2200      	movs	r2, #0
   dd9da:	f001 f811 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(162,0,gclock,bclock);
   dd9de:	7832      	ldrb	r2, [r6, #0]
   dd9e0:	782b      	ldrb	r3, [r5, #0]
   dd9e2:	4861      	ldr	r0, [pc, #388]	; (ddb68 <loop+0x950>)
   dd9e4:	9200      	str	r2, [sp, #0]
   dd9e6:	21a2      	movs	r1, #162	; 0xa2
   dd9e8:	2200      	movs	r2, #0
   dd9ea:	f001 f809 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(163,0,gclock,bclock);
   dd9ee:	7832      	ldrb	r2, [r6, #0]
   dd9f0:	782b      	ldrb	r3, [r5, #0]
   dd9f2:	485d      	ldr	r0, [pc, #372]	; (ddb68 <loop+0x950>)
   dd9f4:	9200      	str	r2, [sp, #0]
   dd9f6:	21a3      	movs	r1, #163	; 0xa3
   dd9f8:	2200      	movs	r2, #0
   dd9fa:	f001 f801 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(164,0,gclock,bclock);
   dd9fe:	7832      	ldrb	r2, [r6, #0]
   dda00:	782b      	ldrb	r3, [r5, #0]
   dda02:	4859      	ldr	r0, [pc, #356]	; (ddb68 <loop+0x950>)
   dda04:	9200      	str	r2, [sp, #0]
   dda06:	21a4      	movs	r1, #164	; 0xa4
   dda08:	2200      	movs	r2, #0
   dda0a:	f000 fff9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(165,0,gclock,bclock);
   dda0e:	7832      	ldrb	r2, [r6, #0]
   dda10:	782b      	ldrb	r3, [r5, #0]
   dda12:	4855      	ldr	r0, [pc, #340]	; (ddb68 <loop+0x950>)
   dda14:	9200      	str	r2, [sp, #0]
   dda16:	21a5      	movs	r1, #165	; 0xa5
   dda18:	2200      	movs	r2, #0
   dda1a:	f000 fff1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        strip.setPixelColor(166,0,gclock,bclock);
   dda1e:	7832      	ldrb	r2, [r6, #0]
   dda20:	782b      	ldrb	r3, [r5, #0]
   dda22:	4851      	ldr	r0, [pc, #324]	; (ddb68 <loop+0x950>)
   dda24:	9200      	str	r2, [sp, #0]
   dda26:	21a6      	movs	r1, #166	; 0xa6
   dda28:	2200      	movs	r2, #0
   dda2a:	f000 ffe9 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        num(0,176,0,gclock,bclock);
   dda2e:	6833      	ldr	r3, [r6, #0]
   dda30:	9300      	str	r3, [sp, #0]
   dda32:	2200      	movs	r2, #0
   dda34:	682b      	ldr	r3, [r5, #0]
   dda36:	4610      	mov	r0, r2
   dda38:	21b0      	movs	r1, #176	; 0xb0
   dda3a:	f7f6 fcd3 	bl	d43e4 <_Z3numiiiii>
                        num(0,223,0,gclock,bclock);
   dda3e:	6833      	ldr	r3, [r6, #0]
   dda40:	9300      	str	r3, [sp, #0]
   dda42:	2200      	movs	r2, #0
   dda44:	682b      	ldr	r3, [r5, #0]
   dda46:	21df      	movs	r1, #223	; 0xdf
   dda48:	4610      	mov	r0, r2
   dda4a:	f7f6 fccb 	bl	d43e4 <_Z3numiiiii>
   dda4e:	e019      	b.n	dda84 <loop+0x86c>
                    }
                    else
                    {
                        strip.setPixelColor(240,0,0,0);
   dda50:	2400      	movs	r4, #0
   dda52:	4623      	mov	r3, r4
   dda54:	4622      	mov	r2, r4
   dda56:	21f0      	movs	r1, #240	; 0xf0
   dda58:	4843      	ldr	r0, [pc, #268]	; (ddb68 <loop+0x950>)
   dda5a:	9400      	str	r4, [sp, #0]
   dda5c:	f000 ffd0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                        num(HC1,160,0,gclock,bclock);
   dda60:	6833      	ldr	r3, [r6, #0]
   dda62:	9300      	str	r3, [sp, #0]
   dda64:	682b      	ldr	r3, [r5, #0]
   dda66:	f8d8 0000 	ldr.w	r0, [r8]
   dda6a:	4622      	mov	r2, r4
   dda6c:	21a0      	movs	r1, #160	; 0xa0
   dda6e:	f7f6 fcb9 	bl	d43e4 <_Z3numiiiii>
                        num(HC2,207,0,gclock,bclock);
   dda72:	6833      	ldr	r3, [r6, #0]
   dda74:	483e      	ldr	r0, [pc, #248]	; (ddb70 <loop+0x958>)
   dda76:	9300      	str	r3, [sp, #0]
   dda78:	682b      	ldr	r3, [r5, #0]
   dda7a:	6800      	ldr	r0, [r0, #0]
   dda7c:	4622      	mov	r2, r4
   dda7e:	21cf      	movs	r1, #207	; 0xcf
   dda80:	f7f6 fcb0 	bl	d43e4 <_Z3numiiiii>
                    }
                    if(tmr%5==0)
   dda84:	4b39      	ldr	r3, [pc, #228]	; (ddb6c <loop+0x954>)
   dda86:	681a      	ldr	r2, [r3, #0]
   dda88:	2305      	movs	r3, #5
   dda8a:	fb92 f3f3 	sdiv	r3, r2, r3
   dda8e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   dda92:	429a      	cmp	r2, r3
   dda94:	f040 80a1 	bne.w	ddbda <loop+0x9c2>
                    {
                        wmode = 4;
   dda98:	2304      	movs	r3, #4
   dda9a:	603b      	str	r3, [r7, #0]
   dda9c:	e09d      	b.n	ddbda <loop+0x9c2>
                    }
                    strip.show();
                }
                else if(wmode == 4)
   dda9e:	2b04      	cmp	r3, #4
   ddaa0:	f040 8384 	bne.w	de1ac <loop+0xf94>
                {
                    for(i=160;i<256;i++)
   ddaa4:	23a0      	movs	r3, #160	; 0xa0
   ddaa6:	4d33      	ldr	r5, [pc, #204]	; (ddb74 <loop+0x95c>)
   ddaa8:	6023      	str	r3, [r4, #0]
                    {
                        strip.setPixelColor(i,0,0,0);
   ddaaa:	2600      	movs	r6, #0
                    }
                    strip.show();
                }
                else if(wmode == 4)
                {
                    for(i=160;i<256;i++)
   ddaac:	6821      	ldr	r1, [r4, #0]
   ddaae:	29ff      	cmp	r1, #255	; 0xff
   ddab0:	dc0a      	bgt.n	ddac8 <loop+0x8b0>
                    {
                        strip.setPixelColor(i,0,0,0);
   ddab2:	2300      	movs	r3, #0
   ddab4:	461a      	mov	r2, r3
   ddab6:	9600      	str	r6, [sp, #0]
   ddab8:	b289      	uxth	r1, r1
   ddaba:	482b      	ldr	r0, [pc, #172]	; (ddb68 <loop+0x950>)
   ddabc:	f000 ffa0 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                    }
                    strip.show();
                }
                else if(wmode == 4)
                {
                    for(i=160;i<256;i++)
   ddac0:	682b      	ldr	r3, [r5, #0]
   ddac2:	3301      	adds	r3, #1
   ddac4:	602b      	str	r3, [r5, #0]
   ddac6:	e7f1      	b.n	ddaac <loop+0x894>
                    {
                        strip.setPixelColor(i,0,0,0);
                    }
                    condition(cid,160);
   ddac8:	4c2b      	ldr	r4, [pc, #172]	; (ddb78 <loop+0x960>)
   ddaca:	21a0      	movs	r1, #160	; 0xa0
   ddacc:	6820      	ldr	r0, [r4, #0]
   ddace:	f7fb fccb 	bl	d9468 <_Z9conditionii>
                    strip.show();
   ddad2:	4825      	ldr	r0, [pc, #148]	; (ddb68 <loop+0x950>)
   ddad4:	f000 fdf2 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
                    delay(100);
   ddad8:	2064      	movs	r0, #100	; 0x64
   ddada:	f002 f87d 	bl	dfbd8 <delay>
                    canim(cid,160,true);
   ddade:	2201      	movs	r2, #1
   ddae0:	21a0      	movs	r1, #160	; 0xa0
   ddae2:	6820      	ldr	r0, [r4, #0]
   ddae4:	f7fd fba4 	bl	db230 <_Z5canimiib>
                    canim(cid,160,true);
   ddae8:	2201      	movs	r2, #1
   ddaea:	21a0      	movs	r1, #160	; 0xa0
   ddaec:	6820      	ldr	r0, [r4, #0]
   ddaee:	f7fd fb9f 	bl	db230 <_Z5canimiib>
                    canim(cid,160,true);
   ddaf2:	2201      	movs	r2, #1
   ddaf4:	21a0      	movs	r1, #160	; 0xa0
   ddaf6:	6820      	ldr	r0, [r4, #0]
   ddaf8:	f7fd fb9a 	bl	db230 <_Z5canimiib>
                    wmode = 1;
   ddafc:	2301      	movs	r3, #1
   ddafe:	603b      	str	r3, [r7, #0]
   ddb00:	e354      	b.n	de1ac <loop+0xf94>
            }
        }
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
            if(photoupd == 1)
   ddb02:	4d1e      	ldr	r5, [pc, #120]	; (ddb7c <loop+0x964>)
                }
            }
        }
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
   ddb04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   ddb08:	f002 f866 	bl	dfbd8 <delay>
            if(photoupd == 1)
   ddb0c:	682b      	ldr	r3, [r5, #0]
   ddb0e:	2b01      	cmp	r3, #1
   ddb10:	d113      	bne.n	ddb3a <loop+0x922>
            {
                for(i=0;i<160;i++)
   ddb12:	2300      	movs	r3, #0
   ddb14:	4f17      	ldr	r7, [pc, #92]	; (ddb74 <loop+0x95c>)
   ddb16:	6023      	str	r3, [r4, #0]
   ddb18:	461e      	mov	r6, r3
   ddb1a:	6821      	ldr	r1, [r4, #0]
   ddb1c:	299f      	cmp	r1, #159	; 0x9f
   ddb1e:	f04f 0300 	mov.w	r3, #0
   ddb22:	dc09      	bgt.n	ddb38 <loop+0x920>
                {
                    strip.setPixelColor(i,0,0,0);
   ddb24:	461a      	mov	r2, r3
   ddb26:	9600      	str	r6, [sp, #0]
   ddb28:	b289      	uxth	r1, r1
   ddb2a:	480f      	ldr	r0, [pc, #60]	; (ddb68 <loop+0x950>)
   ddb2c:	f000 ff68 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        else//////////////////////////////////////////////////////////IF SENSOR IS DARK
        {
            delay(1000);
            if(photoupd == 1)
            {
                for(i=0;i<160;i++)
   ddb30:	683b      	ldr	r3, [r7, #0]
   ddb32:	3301      	adds	r3, #1
   ddb34:	603b      	str	r3, [r7, #0]
   ddb36:	e7f0      	b.n	ddb1a <loop+0x902>
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
   ddb38:	602b      	str	r3, [r5, #0]
            }
            for(i=160;i<247;i++)
   ddb3a:	23a0      	movs	r3, #160	; 0xa0
   ddb3c:	4d0d      	ldr	r5, [pc, #52]	; (ddb74 <loop+0x95c>)
   ddb3e:	6023      	str	r3, [r4, #0]
            {
                strip.setPixelColor(i,0,0,0);
   ddb40:	2600      	movs	r6, #0
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
            }
            for(i=160;i<247;i++)
   ddb42:	6821      	ldr	r1, [r4, #0]
   ddb44:	29f6      	cmp	r1, #246	; 0xf6
   ddb46:	dc1f      	bgt.n	ddb88 <loop+0x970>
            {
                strip.setPixelColor(i,0,0,0);
   ddb48:	2300      	movs	r3, #0
   ddb4a:	461a      	mov	r2, r3
   ddb4c:	9600      	str	r6, [sp, #0]
   ddb4e:	b289      	uxth	r1, r1
   ddb50:	4805      	ldr	r0, [pc, #20]	; (ddb68 <loop+0x950>)
   ddb52:	f000 ff55 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                {
                    strip.setPixelColor(i,0,0,0);
                }
                photoupd=0;
            }
            for(i=160;i<247;i++)
   ddb56:	682b      	ldr	r3, [r5, #0]
   ddb58:	3301      	adds	r3, #1
   ddb5a:	602b      	str	r3, [r5, #0]
   ddb5c:	e7f1      	b.n	ddb42 <loop+0x92a>
   ddb5e:	bf00      	nop
   ddb60:	2003e2f8 	.word	0x2003e2f8
   ddb64:	2003e34c 	.word	0x2003e34c
   ddb68:	2003e31c 	.word	0x2003e31c
   ddb6c:	2003e364 	.word	0x2003e364
   ddb70:	2003e2f0 	.word	0x2003e2f0
   ddb74:	2003e33c 	.word	0x2003e33c
   ddb78:	2003e2e4 	.word	0x2003e2e4
   ddb7c:	2003e348 	.word	0x2003e348
   ddb80:	2003e344 	.word	0x2003e344
   ddb84:	2003e2e8 	.word	0x2003e2e8
            {
                strip.setPixelColor(i,0,0,0);
            }
            if(EEPROM.read(2) == 1)
   ddb88:	f003 fb06 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   ddb8c:	2002      	movs	r0, #2
   ddb8e:	f7f6 fb53 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   ddb92:	2801      	cmp	r0, #1
   ddb94:	d108      	bne.n	ddba8 <loop+0x990>
            {
                condition(cid,160);
   ddb96:	4caf      	ldr	r4, [pc, #700]	; (dde54 <loop+0xc3c>)
   ddb98:	21a0      	movs	r1, #160	; 0xa0
   ddb9a:	6820      	ldr	r0, [r4, #0]
   ddb9c:	f7fb fc64 	bl	d9468 <_Z9conditionii>
                dimg(cid,160);
   ddba0:	21a0      	movs	r1, #160	; 0xa0
   ddba2:	6820      	ldr	r0, [r4, #0]
   ddba4:	f7fb fbc4 	bl	d9330 <_Z4dimgii>
            }
            strip.show();
            strip.setPixelColor(62,0,0,0);
   ddba8:	2400      	movs	r4, #0
            if(EEPROM.read(2) == 1)
            {
                condition(cid,160);
                dimg(cid,160);
            }
            strip.show();
   ddbaa:	48ab      	ldr	r0, [pc, #684]	; (dde58 <loop+0xc40>)
   ddbac:	f000 fd86 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            strip.setPixelColor(62,0,0,0);
   ddbb0:	4623      	mov	r3, r4
   ddbb2:	4622      	mov	r2, r4
   ddbb4:	213e      	movs	r1, #62	; 0x3e
   ddbb6:	48a8      	ldr	r0, [pc, #672]	; (dde58 <loop+0xc40>)
   ddbb8:	9400      	str	r4, [sp, #0]
   ddbba:	f000 ff21 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(58,0,0,0);
   ddbbe:	4623      	mov	r3, r4
   ddbc0:	4622      	mov	r2, r4
   ddbc2:	213a      	movs	r1, #58	; 0x3a
   ddbc4:	48a4      	ldr	r0, [pc, #656]	; (dde58 <loop+0xc40>)
   ddbc6:	9400      	str	r4, [sp, #0]
   ddbc8:	f000 ff1a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(240,0,0,0);
   ddbcc:	9400      	str	r4, [sp, #0]
   ddbce:	4623      	mov	r3, r4
   ddbd0:	4622      	mov	r2, r4
   ddbd2:	21f0      	movs	r1, #240	; 0xf0
   ddbd4:	48a0      	ldr	r0, [pc, #640]	; (dde58 <loop+0xc40>)
   ddbd6:	f000 ff13 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   ddbda:	489f      	ldr	r0, [pc, #636]	; (dde58 <loop+0xc40>)
   ddbdc:	f000 fd6e 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   ddbe0:	e2e4      	b.n	de1ac <loop+0xf94>
    
//////////////////////////////////////
//////////////MODE 2//////////////////              Show all weather condition
//////////////////////////////////////
    
    else if(dmode == 2)                                 //Mode 2
   ddbe2:	2b02      	cmp	r3, #2
   ddbe4:	f040 80c6 	bne.w	ddd74 <loop+0xb5c>
    {
        
        if(cid == cprev)
   ddbe8:	4c9a      	ldr	r4, [pc, #616]	; (dde54 <loop+0xc3c>)
   ddbea:	4e9c      	ldr	r6, [pc, #624]	; (dde5c <loop+0xc44>)
   ddbec:	6820      	ldr	r0, [r4, #0]
   ddbee:	6833      	ldr	r3, [r6, #0]
   ddbf0:	4298      	cmp	r0, r3
   ddbf2:	d106      	bne.n	ddc02 <loop+0x9ea>
        {
            condition(cid,0);
   ddbf4:	2100      	movs	r1, #0
   ddbf6:	f7fb fc37 	bl	d9468 <_Z9conditionii>
            strip.show();
   ddbfa:	4897      	ldr	r0, [pc, #604]	; (dde58 <loop+0xc40>)
   ddbfc:	f000 fd5e 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   ddc00:	e01f      	b.n	ddc42 <loop+0xa2a>
        }
        else
        {
            for(i=0;i<49;i++)
   ddc02:	4d97      	ldr	r5, [pc, #604]	; (dde60 <loop+0xc48>)
   ddc04:	2700      	movs	r7, #0
   ddc06:	602f      	str	r7, [r5, #0]
   ddc08:	46a8      	mov	r8, r5
   ddc0a:	6829      	ldr	r1, [r5, #0]
   ddc0c:	2930      	cmp	r1, #48	; 0x30
   ddc0e:	dc0c      	bgt.n	ddc2a <loop+0xa12>
            {
                strip.setPixelColor(i,0,0,0);
   ddc10:	2300      	movs	r3, #0
   ddc12:	461a      	mov	r2, r3
   ddc14:	9700      	str	r7, [sp, #0]
   ddc16:	b289      	uxth	r1, r1
   ddc18:	488f      	ldr	r0, [pc, #572]	; (dde58 <loop+0xc40>)
   ddc1a:	f000 fef1 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            condition(cid,0);
            strip.show();
        }
        else
        {
            for(i=0;i<49;i++)
   ddc1e:	f8d8 3000 	ldr.w	r3, [r8]
   ddc22:	3301      	adds	r3, #1
   ddc24:	f8c8 3000 	str.w	r3, [r8]
   ddc28:	e7ef      	b.n	ddc0a <loop+0x9f2>
            {
                strip.setPixelColor(i,0,0,0);
            }
            strip.show();
   ddc2a:	488b      	ldr	r0, [pc, #556]	; (dde58 <loop+0xc40>)
   ddc2c:	f000 fd46 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            condition(cid,0);
   ddc30:	2100      	movs	r1, #0
   ddc32:	6820      	ldr	r0, [r4, #0]
   ddc34:	f7fb fc18 	bl	d9468 <_Z9conditionii>
            strip.show();
   ddc38:	4887      	ldr	r0, [pc, #540]	; (dde58 <loop+0xc40>)
   ddc3a:	f000 fd3f 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            cprev = cid;
   ddc3e:	6823      	ldr	r3, [r4, #0]
   ddc40:	6033      	str	r3, [r6, #0]
        }
        canim(cid,0,false);
   ddc42:	2200      	movs	r2, #0
   ddc44:	4611      	mov	r1, r2
   ddc46:	6820      	ldr	r0, [r4, #0]
        canim(cid,0,false);
        canim(cid,0,false);
        if(HC1 == 10)
   ddc48:	4f86      	ldr	r7, [pc, #536]	; (dde64 <loop+0xc4c>)
   ddc4a:	4d87      	ldr	r5, [pc, #540]	; (dde68 <loop+0xc50>)
            strip.show();
            condition(cid,0);
            strip.show();
            cprev = cid;
        }
        canim(cid,0,false);
   ddc4c:	f7fd faf0 	bl	db230 <_Z5canimiib>
        canim(cid,0,false);
   ddc50:	2200      	movs	r2, #0
   ddc52:	4611      	mov	r1, r2
   ddc54:	6820      	ldr	r0, [r4, #0]
   ddc56:	f7fd faeb 	bl	db230 <_Z5canimiib>
        canim(cid,0,false);
   ddc5a:	2200      	movs	r2, #0
   ddc5c:	6820      	ldr	r0, [r4, #0]
   ddc5e:	4c83      	ldr	r4, [pc, #524]	; (dde6c <loop+0xc54>)
   ddc60:	4611      	mov	r1, r2
   ddc62:	f7fd fae5 	bl	db230 <_Z5canimiib>
        if(HC1 == 10)
   ddc66:	683b      	ldr	r3, [r7, #0]
   ddc68:	2b0a      	cmp	r3, #10
   ddc6a:	d148      	bne.n	ddcfe <loop+0xae6>
        {
            strip.setPixelColor(175,0,gclock,bclock);
   ddc6c:	782a      	ldrb	r2, [r5, #0]
   ddc6e:	7823      	ldrb	r3, [r4, #0]
   ddc70:	4879      	ldr	r0, [pc, #484]	; (dde58 <loop+0xc40>)
   ddc72:	9200      	str	r2, [sp, #0]
   ddc74:	21af      	movs	r1, #175	; 0xaf
   ddc76:	2200      	movs	r2, #0
   ddc78:	f000 fec2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(174,0,gclock,bclock);
   ddc7c:	782a      	ldrb	r2, [r5, #0]
   ddc7e:	7823      	ldrb	r3, [r4, #0]
   ddc80:	4875      	ldr	r0, [pc, #468]	; (dde58 <loop+0xc40>)
   ddc82:	9200      	str	r2, [sp, #0]
   ddc84:	21ae      	movs	r1, #174	; 0xae
   ddc86:	2200      	movs	r2, #0
   ddc88:	f000 feba 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(173,0,gclock,bclock);
   ddc8c:	782a      	ldrb	r2, [r5, #0]
   ddc8e:	7823      	ldrb	r3, [r4, #0]
   ddc90:	4871      	ldr	r0, [pc, #452]	; (dde58 <loop+0xc40>)
   ddc92:	9200      	str	r2, [sp, #0]
   ddc94:	21ad      	movs	r1, #173	; 0xad
   ddc96:	2200      	movs	r2, #0
   ddc98:	f000 feb2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(172,0,gclock,bclock);
   ddc9c:	782a      	ldrb	r2, [r5, #0]
   ddc9e:	7823      	ldrb	r3, [r4, #0]
   ddca0:	486d      	ldr	r0, [pc, #436]	; (dde58 <loop+0xc40>)
   ddca2:	9200      	str	r2, [sp, #0]
   ddca4:	21ac      	movs	r1, #172	; 0xac
   ddca6:	2200      	movs	r2, #0
   ddca8:	f000 feaa 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(171,0,gclock,bclock);
   ddcac:	782a      	ldrb	r2, [r5, #0]
   ddcae:	7823      	ldrb	r3, [r4, #0]
   ddcb0:	4869      	ldr	r0, [pc, #420]	; (dde58 <loop+0xc40>)
   ddcb2:	9200      	str	r2, [sp, #0]
   ddcb4:	21ab      	movs	r1, #171	; 0xab
   ddcb6:	2200      	movs	r2, #0
   ddcb8:	f000 fea2 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(170,0,gclock,bclock);
   ddcbc:	782a      	ldrb	r2, [r5, #0]
   ddcbe:	7823      	ldrb	r3, [r4, #0]
   ddcc0:	4865      	ldr	r0, [pc, #404]	; (dde58 <loop+0xc40>)
   ddcc2:	9200      	str	r2, [sp, #0]
   ddcc4:	21aa      	movs	r1, #170	; 0xaa
   ddcc6:	2200      	movs	r2, #0
   ddcc8:	f000 fe9a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.setPixelColor(169,0,gclock,bclock);
   ddccc:	782a      	ldrb	r2, [r5, #0]
   ddcce:	7823      	ldrb	r3, [r4, #0]
   ddcd0:	4861      	ldr	r0, [pc, #388]	; (dde58 <loop+0xc40>)
   ddcd2:	9200      	str	r2, [sp, #0]
   ddcd4:	21a9      	movs	r1, #169	; 0xa9
   ddcd6:	2200      	movs	r2, #0
   ddcd8:	f000 fe92 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(0,191,0,gclock,bclock);
   ddcdc:	682b      	ldr	r3, [r5, #0]
   ddcde:	9300      	str	r3, [sp, #0]
   ddce0:	2200      	movs	r2, #0
   ddce2:	6823      	ldr	r3, [r4, #0]
   ddce4:	4610      	mov	r0, r2
   ddce6:	21bf      	movs	r1, #191	; 0xbf
   ddce8:	f7f6 fb7c 	bl	d43e4 <_Z3numiiiii>
            num(0,224,0,gclock,bclock);
   ddcec:	682b      	ldr	r3, [r5, #0]
   ddcee:	9300      	str	r3, [sp, #0]
   ddcf0:	2200      	movs	r2, #0
   ddcf2:	6823      	ldr	r3, [r4, #0]
   ddcf4:	21e0      	movs	r1, #224	; 0xe0
   ddcf6:	4610      	mov	r0, r2
   ddcf8:	f7f6 fb74 	bl	d43e4 <_Z3numiiiii>
   ddcfc:	e018      	b.n	ddd30 <loop+0xb18>
        }
        else
        {
            strip.setPixelColor(240,0,0,0);
   ddcfe:	2600      	movs	r6, #0
   ddd00:	4633      	mov	r3, r6
   ddd02:	4632      	mov	r2, r6
   ddd04:	21f0      	movs	r1, #240	; 0xf0
   ddd06:	4854      	ldr	r0, [pc, #336]	; (dde58 <loop+0xc40>)
   ddd08:	9600      	str	r6, [sp, #0]
   ddd0a:	f000 fe79 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            num(HC1,191,0,gclock,bclock);
   ddd0e:	682b      	ldr	r3, [r5, #0]
   ddd10:	9300      	str	r3, [sp, #0]
   ddd12:	6823      	ldr	r3, [r4, #0]
   ddd14:	6838      	ldr	r0, [r7, #0]
   ddd16:	4632      	mov	r2, r6
   ddd18:	21bf      	movs	r1, #191	; 0xbf
   ddd1a:	f7f6 fb63 	bl	d43e4 <_Z3numiiiii>
            num(HC2,224,0,gclock,bclock);
   ddd1e:	682b      	ldr	r3, [r5, #0]
   ddd20:	4853      	ldr	r0, [pc, #332]	; (dde70 <loop+0xc58>)
   ddd22:	9300      	str	r3, [sp, #0]
   ddd24:	6823      	ldr	r3, [r4, #0]
   ddd26:	6800      	ldr	r0, [r0, #0]
   ddd28:	4632      	mov	r2, r6
   ddd2a:	21e0      	movs	r1, #224	; 0xe0
   ddd2c:	f7f6 fb5a 	bl	d43e4 <_Z3numiiiii>
        }
        num(TC1,79,0,gclock,0);
   ddd30:	2500      	movs	r5, #0
   ddd32:	4850      	ldr	r0, [pc, #320]	; (dde74 <loop+0xc5c>)
   ddd34:	9500      	str	r5, [sp, #0]
   ddd36:	6823      	ldr	r3, [r4, #0]
   ddd38:	6800      	ldr	r0, [r0, #0]
   ddd3a:	462a      	mov	r2, r5
   ddd3c:	214f      	movs	r1, #79	; 0x4f
   ddd3e:	f7f6 fb51 	bl	d43e4 <_Z3numiiiii>
        num(TC2,112,0,gclock,0);
   ddd42:	484d      	ldr	r0, [pc, #308]	; (dde78 <loop+0xc60>)
   ddd44:	9500      	str	r5, [sp, #0]
   ddd46:	6823      	ldr	r3, [r4, #0]
   ddd48:	6800      	ldr	r0, [r0, #0]
   ddd4a:	462a      	mov	r2, r5
   ddd4c:	2170      	movs	r1, #112	; 0x70
   ddd4e:	f7f6 fb49 	bl	d43e4 <_Z3numiiiii>
        strip.setPixelColor(159,0,gclock,0);
   ddd52:	7823      	ldrb	r3, [r4, #0]
   ddd54:	4840      	ldr	r0, [pc, #256]	; (dde58 <loop+0xc40>)
   ddd56:	9500      	str	r5, [sp, #0]
   ddd58:	462a      	mov	r2, r5
   ddd5a:	219f      	movs	r1, #159	; 0x9f
   ddd5c:	f000 fe50 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
        strip.show();
   ddd60:	483d      	ldr	r0, [pc, #244]	; (dde58 <loop+0xc40>)
   ddd62:	f000 fcab 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        scan = 1;
   ddd66:	9a03      	ldr	r2, [sp, #12]
   ddd68:	2301      	movs	r3, #1
        delay(10);
   ddd6a:	200a      	movs	r0, #10
        }
        num(TC1,79,0,gclock,0);
        num(TC2,112,0,gclock,0);
        strip.setPixelColor(159,0,gclock,0);
        strip.show();
        scan = 1;
   ddd6c:	6013      	str	r3, [r2, #0]
        delay(10);
   ddd6e:	f001 ff33 	bl	dfbd8 <delay>
   ddd72:	e21b      	b.n	de1ac <loop+0xf94>
        
//////////////////////////////////////
//////////////MODE 3//////////////////              Scrolling Clock
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
   ddd74:	2b03      	cmp	r3, #3
   ddd76:	f040 8219 	bne.w	de1ac <loop+0xf94>
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   ddd7a:	4c39      	ldr	r4, [pc, #228]	; (dde60 <loop+0xc48>)
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   ddd7c:	9902      	ldr	r1, [sp, #8]
            if(min/10 == 0) {
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   ddd7e:	9a02      	ldr	r2, [sp, #8]
   ddd80:	f8df b0fc 	ldr.w	fp, [pc, #252]	; dde80 <loop+0xc68>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   ddd84:	2300      	movs	r3, #0
   ddd86:	6023      	str	r3, [r4, #0]
            if(min/10 == 0) {
                num(0,(i*16)+79,rclock,gclock,bclock);
                num(min,(i*16)+112,rclock,gclock,bclock);
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   ddd88:	230a      	movs	r3, #10
   ddd8a:	fb92 f2f3 	sdiv	r2, r2, r3
   ddd8e:	9204      	str	r2, [sp, #16]
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   ddd90:	fb03 1212 	mls	r2, r3, r2, r1
   ddd94:	9206      	str	r2, [sp, #24]
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   ddd96:	fb97 f2f3 	sdiv	r2, r7, r3
   ddd9a:	b2d1      	uxtb	r1, r2
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   ddd9c:	fb03 7312 	mls	r3, r3, r2, r7
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   ddda0:	9103      	str	r1, [sp, #12]
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   ddda2:	9307      	str	r3, [sp, #28]
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   ddda4:	6821      	ldr	r1, [r4, #0]
   ddda6:	2921      	cmp	r1, #33	; 0x21
   ddda8:	f300 8200 	bgt.w	de1ac <loop+0xf94>
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            if(min/10 == 0) {
   dddac:	9b02      	ldr	r3, [sp, #8]
   dddae:	4d2e      	ldr	r5, [pc, #184]	; (dde68 <loop+0xc50>)
   dddb0:	4e2e      	ldr	r6, [pc, #184]	; (dde6c <loop+0xc54>)
   dddb2:	3309      	adds	r3, #9
   dddb4:	9305      	str	r3, [sp, #20]
   dddb6:	2b12      	cmp	r3, #18
                num(0,(i*16)+79,rclock,gclock,bclock);
   dddb8:	682b      	ldr	r3, [r5, #0]
   dddba:	9300      	str	r3, [sp, #0]
   dddbc:	ea4f 1101 	mov.w	r1, r1, lsl #4
   dddc0:	6833      	ldr	r3, [r6, #0]
   dddc2:	f8db 2000 	ldr.w	r2, [fp]
   dddc6:	f101 014f 	add.w	r1, r1, #79	; 0x4f
            num(HC2,399+(i*16)-145,0,gclock,bclock);
            
            condition(cid,(i*16)-96);
            dimg(cid,(i*16)-96);*/
            
            if(min/10 == 0) {
   dddca:	d80e      	bhi.n	dddea <loop+0xbd2>
                num(0,(i*16)+79,rclock,gclock,bclock);
   dddcc:	2000      	movs	r0, #0
   dddce:	f7f6 fb09 	bl	d43e4 <_Z3numiiiii>
                num(min,(i*16)+112,rclock,gclock,bclock);
   dddd2:	6821      	ldr	r1, [r4, #0]
   dddd4:	682b      	ldr	r3, [r5, #0]
   dddd6:	9300      	str	r3, [sp, #0]
   dddd8:	3107      	adds	r1, #7
   dddda:	6833      	ldr	r3, [r6, #0]
   ddddc:	f8db 2000 	ldr.w	r2, [fp]
   ddde0:	9802      	ldr	r0, [sp, #8]
   ddde2:	0109      	lsls	r1, r1, #4
   ddde4:	f7f6 fafe 	bl	d43e4 <_Z3numiiiii>
   ddde8:	e00d      	b.n	dde06 <loop+0xbee>
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
   dddea:	9804      	ldr	r0, [sp, #16]
   dddec:	f7f6 fafa 	bl	d43e4 <_Z3numiiiii>
                num((min%10),(i*16)+112,rclock,gclock,bclock);
   dddf0:	6821      	ldr	r1, [r4, #0]
   dddf2:	682b      	ldr	r3, [r5, #0]
   dddf4:	9300      	str	r3, [sp, #0]
   dddf6:	3107      	adds	r1, #7
   dddf8:	6833      	ldr	r3, [r6, #0]
   dddfa:	f8db 2000 	ldr.w	r2, [fp]
   dddfe:	9806      	ldr	r0, [sp, #24]
   dde00:	0109      	lsls	r1, r1, #4
   dde02:	f7f6 faef 	bl	d43e4 <_Z3numiiiii>
            }
            for(j=0;j<7;j++)
   dde06:	4d1d      	ldr	r5, [pc, #116]	; (dde7c <loop+0xc64>)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   dde08:	4f17      	ldr	r7, [pc, #92]	; (dde68 <loop+0xc50>)
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   dde0a:	2300      	movs	r3, #0
   dde0c:	602b      	str	r3, [r5, #0]
   dde0e:	6829      	ldr	r1, [r5, #0]
   dde10:	2906      	cmp	r1, #6
   dde12:	dc37      	bgt.n	dde84 <loop+0xc6c>
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   dde14:	6833      	ldr	r3, [r6, #0]
   dde16:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   dde1a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   dde1e:	f8bd e00c 	ldrh.w	lr, [sp, #12]
   dde22:	fb13 f302 	smulbb	r3, r3, r2
   dde26:	f8db 2000 	ldr.w	r2, [fp]
   dde2a:	fb12 f200 	smulbb	r2, r2, r0
   dde2e:	480c      	ldr	r0, [pc, #48]	; (dde60 <loop+0xc48>)
   dde30:	6800      	ldr	r0, [r0, #0]
   dde32:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   dde36:	6838      	ldr	r0, [r7, #0]
   dde38:	fb10 f00e 	smulbb	r0, r0, lr
   dde3c:	b2c0      	uxtb	r0, r0
   dde3e:	9000      	str	r0, [sp, #0]
   dde40:	b2db      	uxtb	r3, r3
   dde42:	b2d2      	uxtb	r2, r2
   dde44:	b289      	uxth	r1, r1
   dde46:	4804      	ldr	r0, [pc, #16]	; (dde58 <loop+0xc40>)
   dde48:	f000 fdda 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                num((min/10),(i*16)+79,rclock,gclock,bclock);
                num((min%10),(i*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   dde4c:	682b      	ldr	r3, [r5, #0]
   dde4e:	3301      	adds	r3, #1
   dde50:	602b      	str	r3, [r5, #0]
   dde52:	e7dc      	b.n	dde0e <loop+0xbf6>
   dde54:	2003e2e4 	.word	0x2003e2e4
   dde58:	2003e31c 	.word	0x2003e31c
   dde5c:	2003e2e0 	.word	0x2003e2e0
   dde60:	2003e33c 	.word	0x2003e33c
   dde64:	2003e2e8 	.word	0x2003e2e8
   dde68:	2003e35c 	.word	0x2003e35c
   dde6c:	2003e314 	.word	0x2003e314
   dde70:	2003e2f0 	.word	0x2003e2f0
   dde74:	2003e2f8 	.word	0x2003e2f8
   dde78:	2003e34c 	.word	0x2003e34c
   dde7c:	2003e340 	.word	0x2003e340
   dde80:	2003e354 	.word	0x2003e354
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   dde84:	4f71      	ldr	r7, [pc, #452]	; (de04c <loop+0xe34>)
   dde86:	6821      	ldr	r1, [r4, #0]
   dde88:	4e71      	ldr	r6, [pc, #452]	; (de050 <loop+0xe38>)
   dde8a:	683b      	ldr	r3, [r7, #0]
   dde8c:	9300      	str	r3, [sp, #0]
   dde8e:	3101      	adds	r1, #1
   dde90:	6833      	ldr	r3, [r6, #0]
   dde92:	f8db 2000 	ldr.w	r2, [fp]
   dde96:	9807      	ldr	r0, [sp, #28]
            
            num(TC1,160+(i*16),0,gclock/1,0);
            num(TC2,207+(i*16),0,gclock/1,0);
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   dde98:	f8df a1d4 	ldr.w	sl, [pc, #468]	; de070 <loop+0xe58>
            }
            for(j=0;j<7;j++)
            {
                strip.setPixelColor(j+(i*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+(i*16),rclock,gclock,bclock);
   dde9c:	0109      	lsls	r1, r1, #4
   dde9e:	f7f6 faa1 	bl	d43e4 <_Z3numiiiii>
            
            /*strip.setPixelColor(58+(i*16),rclock,gclock,bclock);
            strip.setPixelColor(62+(i*16),rclock,gclock,bclock);*/
            
            num(TC1,160+(i*16),0,gclock/1,0);
   ddea2:	6821      	ldr	r1, [r4, #0]
   ddea4:	486b      	ldr	r0, [pc, #428]	; (de054 <loop+0xe3c>)
   ddea6:	2500      	movs	r5, #0
   ddea8:	9500      	str	r5, [sp, #0]
   ddeaa:	310a      	adds	r1, #10
   ddeac:	6833      	ldr	r3, [r6, #0]
   ddeae:	6800      	ldr	r0, [r0, #0]
   ddeb0:	462a      	mov	r2, r5
   ddeb2:	0109      	lsls	r1, r1, #4
   ddeb4:	f7f6 fa96 	bl	d43e4 <_Z3numiiiii>
            num(TC2,207+(i*16),0,gclock/1,0);
   ddeb8:	6821      	ldr	r1, [r4, #0]
   ddeba:	4867      	ldr	r0, [pc, #412]	; (de058 <loop+0xe40>)
   ddebc:	9500      	str	r5, [sp, #0]
   ddebe:	0109      	lsls	r1, r1, #4
   ddec0:	6833      	ldr	r3, [r6, #0]
   ddec2:	6800      	ldr	r0, [r0, #0]
   ddec4:	462a      	mov	r2, r5
   ddec6:	31cf      	adds	r1, #207	; 0xcf
   ddec8:	f7f6 fa8c 	bl	d43e4 <_Z3numiiiii>
            strip.setPixelColor(240+(i*16),0,gclock/1,0);
   ddecc:	6821      	ldr	r1, [r4, #0]
   ddece:	7833      	ldrb	r3, [r6, #0]
   dded0:	4862      	ldr	r0, [pc, #392]	; (de05c <loop+0xe44>)
   dded2:	9500      	str	r5, [sp, #0]
   dded4:	310f      	adds	r1, #15
   dded6:	0109      	lsls	r1, r1, #4
   dded8:	b289      	uxth	r1, r1
   ddeda:	462a      	mov	r2, r5
   ddedc:	f000 fd90 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
   ddee0:	6821      	ldr	r1, [r4, #0]
   ddee2:	683b      	ldr	r3, [r7, #0]
   ddee4:	f8db 2000 	ldr.w	r2, [fp]
   ddee8:	f8da 0000 	ldr.w	r0, [sl]
   ddeec:	9300      	str	r3, [sp, #0]
   ddeee:	3110      	adds	r1, #16
   ddef0:	f04f 0802 	mov.w	r8, #2
   ddef4:	f04f 090a 	mov.w	r9, #10
   ddef8:	fb92 f2f8 	sdiv	r2, r2, r8
   ddefc:	fb90 f0f9 	sdiv	r0, r0, r9
   ddf00:	462b      	mov	r3, r5
   ddf02:	0109      	lsls	r1, r1, #4
   ddf04:	f7f6 fa6e 	bl	d43e4 <_Z3numiiiii>
            num(itemp%10,303+(i*16),rclock/2,0,bclock);
   ddf08:	6821      	ldr	r1, [r4, #0]
   ddf0a:	f8da 0000 	ldr.w	r0, [sl]
   ddf0e:	683b      	ldr	r3, [r7, #0]
   ddf10:	fb90 fef9 	sdiv	lr, r0, r9
   ddf14:	0109      	lsls	r1, r1, #4
   ddf16:	fb09 001e 	mls	r0, r9, lr, r0
   ddf1a:	f8db 2000 	ldr.w	r2, [fp]
   ddf1e:	9300      	str	r3, [sp, #0]
   ddf20:	fb92 f2f8 	sdiv	r2, r2, r8
   ddf24:	462b      	mov	r3, r5
   ddf26:	f201 112f 	addw	r1, r1, #303	; 0x12f
   ddf2a:	f7f6 fa5b 	bl	d43e4 <_Z3numiiiii>
            strip.setPixelColor(336+(i*16),rclock/2,0,bclock);
   ddf2e:	6821      	ldr	r1, [r4, #0]
   ddf30:	783b      	ldrb	r3, [r7, #0]
   ddf32:	f8db 2000 	ldr.w	r2, [fp]
   ddf36:	4849      	ldr	r0, [pc, #292]	; (de05c <loop+0xe44>)
   ddf38:	fb92 f2f8 	sdiv	r2, r2, r8
   ddf3c:	3115      	adds	r1, #21
   ddf3e:	0109      	lsls	r1, r1, #4
   ddf40:	b289      	uxth	r1, r1
   ddf42:	9300      	str	r3, [sp, #0]
   ddf44:	b2d2      	uxtb	r2, r2
   ddf46:	462b      	mov	r3, r5
   ddf48:	f000 fd5a 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+(i*16),0,gclock,bclock);
   ddf4c:	6821      	ldr	r1, [r4, #0]
   ddf4e:	683b      	ldr	r3, [r7, #0]
   ddf50:	4843      	ldr	r0, [pc, #268]	; (de060 <loop+0xe48>)
   ddf52:	9300      	str	r3, [sp, #0]
   ddf54:	3116      	adds	r1, #22
   ddf56:	6833      	ldr	r3, [r6, #0]
   ddf58:	6800      	ldr	r0, [r0, #0]
            num(HC2,399+(i*16),0,gclock,bclock);
            
            condition(cid,448+(i*16));
   ddf5a:	f8df 8118 	ldr.w	r8, [pc, #280]	; de074 <loop+0xe5c>
            
            num(itemp/10,256+(i*16),rclock/2,0,bclock);
            num(itemp%10,303+(i*16),rclock/2,0,bclock);
            strip.setPixelColor(336+(i*16),rclock/2,0,bclock);
            
            num(HC1,352+(i*16),0,gclock,bclock);
   ddf5e:	462a      	mov	r2, r5
   ddf60:	0109      	lsls	r1, r1, #4
   ddf62:	f7f6 fa3f 	bl	d43e4 <_Z3numiiiii>
            num(HC2,399+(i*16),0,gclock,bclock);
   ddf66:	6821      	ldr	r1, [r4, #0]
   ddf68:	683b      	ldr	r3, [r7, #0]
   ddf6a:	483e      	ldr	r0, [pc, #248]	; (de064 <loop+0xe4c>)
   ddf6c:	9300      	str	r3, [sp, #0]
   ddf6e:	0109      	lsls	r1, r1, #4
   ddf70:	6833      	ldr	r3, [r6, #0]
   ddf72:	6800      	ldr	r0, [r0, #0]
   ddf74:	462a      	mov	r2, r5
   ddf76:	f201 118f 	addw	r1, r1, #399	; 0x18f
   ddf7a:	f7f6 fa33 	bl	d43e4 <_Z3numiiiii>
            
            condition(cid,448+(i*16));
   ddf7e:	6821      	ldr	r1, [r4, #0]
   ddf80:	f8d8 0000 	ldr.w	r0, [r8]
   ddf84:	311c      	adds	r1, #28
   ddf86:	0109      	lsls	r1, r1, #4
   ddf88:	f7fb fa6e 	bl	d9468 <_Z9conditionii>
            dimg(cid,448+(i*16));
   ddf8c:	6821      	ldr	r1, [r4, #0]
   ddf8e:	f8d8 0000 	ldr.w	r0, [r8]
   ddf92:	f8df 80e4 	ldr.w	r8, [pc, #228]	; de078 <loop+0xe60>
   ddf96:	311c      	adds	r1, #28
   ddf98:	0109      	lsls	r1, r1, #4
   ddf9a:	f7fb f9c9 	bl	d9330 <_Z4dimgii>
            
            
            if(min/10 == 0) {
   ddf9e:	9b05      	ldr	r3, [sp, #20]
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   ddfa0:	6821      	ldr	r1, [r4, #0]
            
            condition(cid,448+(i*16));
            dimg(cid,448+(i*16));
            
            
            if(min/10 == 0) {
   ddfa2:	2b12      	cmp	r3, #18
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   ddfa4:	683b      	ldr	r3, [r7, #0]
   ddfa6:	9300      	str	r3, [sp, #0]
   ddfa8:	ea4f 1101 	mov.w	r1, r1, lsl #4
   ddfac:	f46f 7ee8 	mvn.w	lr, #464	; 0x1d0
   ddfb0:	46b1      	mov	r9, r6
   ddfb2:	6833      	ldr	r3, [r6, #0]
   ddfb4:	f8db 2000 	ldr.w	r2, [fp]
   ddfb8:	4471      	add	r1, lr
            
            condition(cid,448+(i*16));
            dimg(cid,448+(i*16));
            
            
            if(min/10 == 0) {
   ddfba:	d80e      	bhi.n	ddfda <loop+0xdc2>
                num(0,((i-numRows)*16)+79,rclock,gclock,bclock);
   ddfbc:	4628      	mov	r0, r5
   ddfbe:	f7f6 fa11 	bl	d43e4 <_Z3numiiiii>
                num(min,((i-numRows)*16)+112,rclock,gclock,bclock);
   ddfc2:	6821      	ldr	r1, [r4, #0]
   ddfc4:	683b      	ldr	r3, [r7, #0]
   ddfc6:	9300      	str	r3, [sp, #0]
   ddfc8:	391b      	subs	r1, #27
   ddfca:	6833      	ldr	r3, [r6, #0]
   ddfcc:	f8db 2000 	ldr.w	r2, [fp]
   ddfd0:	9802      	ldr	r0, [sp, #8]
   ddfd2:	0109      	lsls	r1, r1, #4
   ddfd4:	f7f6 fa06 	bl	d43e4 <_Z3numiiiii>
   ddfd8:	e00d      	b.n	ddff6 <loop+0xdde>
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
   ddfda:	9804      	ldr	r0, [sp, #16]
   ddfdc:	f7f6 fa02 	bl	d43e4 <_Z3numiiiii>
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
   ddfe0:	6821      	ldr	r1, [r4, #0]
   ddfe2:	683b      	ldr	r3, [r7, #0]
   ddfe4:	9300      	str	r3, [sp, #0]
   ddfe6:	391b      	subs	r1, #27
   ddfe8:	6833      	ldr	r3, [r6, #0]
   ddfea:	f8db 2000 	ldr.w	r2, [fp]
   ddfee:	9806      	ldr	r0, [sp, #24]
   ddff0:	0109      	lsls	r1, r1, #4
   ddff2:	f7f6 f9f7 	bl	d43e4 <_Z3numiiiii>
            }
            for(j=0;j<7;j++)
   ddff6:	4d1c      	ldr	r5, [pc, #112]	; (de068 <loop+0xe50>)
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   ddff8:	4f14      	ldr	r7, [pc, #80]	; (de04c <loop+0xe34>)
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   ddffa:	2300      	movs	r3, #0
   ddffc:	602b      	str	r3, [r5, #0]
   ddffe:	462e      	mov	r6, r5
   de000:	6829      	ldr	r1, [r5, #0]
   de002:	2906      	cmp	r1, #6
   de004:	dc3a      	bgt.n	de07c <loop+0xe64>
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de006:	f8d9 3000 	ldr.w	r3, [r9]
   de00a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
   de00e:	f8bd 000c 	ldrh.w	r0, [sp, #12]
   de012:	f8bd e00c 	ldrh.w	lr, [sp, #12]
   de016:	fb13 f302 	smulbb	r3, r3, r2
   de01a:	f8d8 2000 	ldr.w	r2, [r8]
   de01e:	fb12 f200 	smulbb	r2, r2, r0
   de022:	4812      	ldr	r0, [pc, #72]	; (de06c <loop+0xe54>)
   de024:	6800      	ldr	r0, [r0, #0]
   de026:	3822      	subs	r0, #34	; 0x22
   de028:	eb01 1100 	add.w	r1, r1, r0, lsl #4
   de02c:	6838      	ldr	r0, [r7, #0]
   de02e:	fb10 f00e 	smulbb	r0, r0, lr
   de032:	b2c0      	uxtb	r0, r0
   de034:	9000      	str	r0, [sp, #0]
   de036:	b2db      	uxtb	r3, r3
   de038:	b2d2      	uxtb	r2, r2
   de03a:	b289      	uxth	r1, r1
   de03c:	4807      	ldr	r0, [pc, #28]	; (de05c <loop+0xe44>)
   de03e:	f000 fcdf 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            }
            else {
                num((min/10),((i-numRows)*16)+79,rclock,gclock,bclock);
                num((min%10),((i-numRows)*16)+112,rclock,gclock,bclock);
            }
            for(j=0;j<7;j++)
   de042:	6833      	ldr	r3, [r6, #0]
   de044:	3301      	adds	r3, #1
   de046:	6033      	str	r3, [r6, #0]
   de048:	e7da      	b.n	de000 <loop+0xde8>
   de04a:	bf00      	nop
   de04c:	2003e35c 	.word	0x2003e35c
   de050:	2003e314 	.word	0x2003e314
   de054:	2003e2f8 	.word	0x2003e2f8
   de058:	2003e34c 	.word	0x2003e34c
   de05c:	2003e31c 	.word	0x2003e31c
   de060:	2003e2e8 	.word	0x2003e2e8
   de064:	2003e2f0 	.word	0x2003e2f0
   de068:	2003e340 	.word	0x2003e340
   de06c:	2003e33c 	.word	0x2003e33c
   de070:	2003e344 	.word	0x2003e344
   de074:	2003e2e4 	.word	0x2003e2e4
   de078:	2003e354 	.word	0x2003e354
            {
                strip.setPixelColor(j+((i-numRows)*16),rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
            }
            num(hr-(10*(hr/10)),16+((i-numRows)*16),rclock,gclock,bclock);
   de07c:	4fb1      	ldr	r7, [pc, #708]	; (de344 <loop+0x112c>)
   de07e:	6821      	ldr	r1, [r4, #0]
   de080:	4eb1      	ldr	r6, [pc, #708]	; (de348 <loop+0x1130>)
   de082:	683b      	ldr	r3, [r7, #0]
   de084:	9300      	str	r3, [sp, #0]
   de086:	3921      	subs	r1, #33	; 0x21
   de088:	6833      	ldr	r3, [r6, #0]
   de08a:	f8d8 2000 	ldr.w	r2, [r8]
   de08e:	9807      	ldr	r0, [sp, #28]
   de090:	0109      	lsls	r1, r1, #4
   de092:	f7f6 f9a7 	bl	d43e4 <_Z3numiiiii>
            
            /*strip.setPixelColor(58+((i-numRows)*16),rclock,gclock,bclock);
            strip.setPixelColor(62+((i-numRows)*16),rclock,gclock,bclock);*/
            
            num(TC1,160+((i-numRows)*16),0,gclock/1,0);
   de096:	6821      	ldr	r1, [r4, #0]
   de098:	48ac      	ldr	r0, [pc, #688]	; (de34c <loop+0x1134>)
   de09a:	2500      	movs	r5, #0
   de09c:	9500      	str	r5, [sp, #0]
   de09e:	3918      	subs	r1, #24
   de0a0:	6833      	ldr	r3, [r6, #0]
   de0a2:	6800      	ldr	r0, [r0, #0]
   de0a4:	462a      	mov	r2, r5
   de0a6:	0109      	lsls	r1, r1, #4
   de0a8:	f7f6 f99c 	bl	d43e4 <_Z3numiiiii>
            num(TC2,207+((i-numRows)*16),0,gclock/1,0);
   de0ac:	6821      	ldr	r1, [r4, #0]
   de0ae:	9500      	str	r5, [sp, #0]
   de0b0:	f46f 70a8 	mvn.w	r0, #336	; 0x150
   de0b4:	0109      	lsls	r1, r1, #4
   de0b6:	4401      	add	r1, r0
   de0b8:	48a5      	ldr	r0, [pc, #660]	; (de350 <loop+0x1138>)
   de0ba:	6833      	ldr	r3, [r6, #0]
   de0bc:	6800      	ldr	r0, [r0, #0]
   de0be:	462a      	mov	r2, r5
   de0c0:	f7f6 f990 	bl	d43e4 <_Z3numiiiii>
            strip.setPixelColor(240+((i-numRows)*16),0,gclock/1,0);
   de0c4:	6821      	ldr	r1, [r4, #0]
   de0c6:	7833      	ldrb	r3, [r6, #0]
   de0c8:	48a2      	ldr	r0, [pc, #648]	; (de354 <loop+0x113c>)
   de0ca:	9500      	str	r5, [sp, #0]
   de0cc:	3913      	subs	r1, #19
   de0ce:	0109      	lsls	r1, r1, #4
   de0d0:	b289      	uxth	r1, r1
   de0d2:	462a      	mov	r2, r5
   de0d4:	f000 fc94 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(itemp/10,256+((i-numRows)*16),rclock/2,0,bclock);
   de0d8:	6821      	ldr	r1, [r4, #0]
   de0da:	4b9f      	ldr	r3, [pc, #636]	; (de358 <loop+0x1140>)
   de0dc:	f8d8 2000 	ldr.w	r2, [r8]
   de0e0:	6818      	ldr	r0, [r3, #0]
   de0e2:	683b      	ldr	r3, [r7, #0]
   de0e4:	9300      	str	r3, [sp, #0]
   de0e6:	3912      	subs	r1, #18
   de0e8:	f04f 0902 	mov.w	r9, #2
   de0ec:	f04f 0a0a 	mov.w	sl, #10
   de0f0:	462b      	mov	r3, r5
   de0f2:	fb92 f2f9 	sdiv	r2, r2, r9
   de0f6:	0109      	lsls	r1, r1, #4
   de0f8:	fb90 f0fa 	sdiv	r0, r0, sl
   de0fc:	f7f6 f972 	bl	d43e4 <_Z3numiiiii>
            num(itemp%10,303+((i-numRows)*16),rclock/2,0,bclock);
   de100:	4b95      	ldr	r3, [pc, #596]	; (de358 <loop+0x1140>)
   de102:	6821      	ldr	r1, [r4, #0]
   de104:	6818      	ldr	r0, [r3, #0]
   de106:	683b      	ldr	r3, [r7, #0]
   de108:	fb90 fefa 	sdiv	lr, r0, sl
   de10c:	0109      	lsls	r1, r1, #4
   de10e:	fb0a 001e 	mls	r0, sl, lr, r0
   de112:	f8d8 2000 	ldr.w	r2, [r8]
   de116:	9300      	str	r3, [sp, #0]
   de118:	fb92 f2f9 	sdiv	r2, r2, r9
   de11c:	462b      	mov	r3, r5
   de11e:	39f1      	subs	r1, #241	; 0xf1
   de120:	f7f6 f960 	bl	d43e4 <_Z3numiiiii>
            strip.setPixelColor(336+((i-numRows)*16),rclock/2,0,bclock);
   de124:	6821      	ldr	r1, [r4, #0]
   de126:	783b      	ldrb	r3, [r7, #0]
   de128:	f8d8 2000 	ldr.w	r2, [r8]
   de12c:	4889      	ldr	r0, [pc, #548]	; (de354 <loop+0x113c>)
   de12e:	9300      	str	r3, [sp, #0]
   de130:	390d      	subs	r1, #13
   de132:	0109      	lsls	r1, r1, #4
   de134:	b289      	uxth	r1, r1
   de136:	462b      	mov	r3, r5
   de138:	fb92 f2f9 	sdiv	r2, r2, r9
   de13c:	b2d2      	uxtb	r2, r2
   de13e:	f000 fc5f 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            
            num(HC1,352+((i-numRows)*16),0,gclock,bclock);
   de142:	6821      	ldr	r1, [r4, #0]
   de144:	683b      	ldr	r3, [r7, #0]
   de146:	4885      	ldr	r0, [pc, #532]	; (de35c <loop+0x1144>)
   de148:	9300      	str	r3, [sp, #0]
   de14a:	390c      	subs	r1, #12
   de14c:	6833      	ldr	r3, [r6, #0]
   de14e:	6800      	ldr	r0, [r0, #0]
   de150:	462a      	mov	r2, r5
   de152:	0109      	lsls	r1, r1, #4
   de154:	f7f6 f946 	bl	d43e4 <_Z3numiiiii>
            num(HC2,399+((i-numRows)*16),0,gclock,bclock);
   de158:	6821      	ldr	r1, [r4, #0]
   de15a:	683b      	ldr	r3, [r7, #0]
   de15c:	4880      	ldr	r0, [pc, #512]	; (de360 <loop+0x1148>)
   de15e:	9300      	str	r3, [sp, #0]
   de160:	0109      	lsls	r1, r1, #4
   de162:	6833      	ldr	r3, [r6, #0]
   de164:	6800      	ldr	r0, [r0, #0]
            
            condition(cid,448+((i-numRows)*16));
   de166:	4e7f      	ldr	r6, [pc, #508]	; (de364 <loop+0x114c>)
            num(itemp/10,256+((i-numRows)*16),rclock/2,0,bclock);
            num(itemp%10,303+((i-numRows)*16),rclock/2,0,bclock);
            strip.setPixelColor(336+((i-numRows)*16),rclock/2,0,bclock);
            
            num(HC1,352+((i-numRows)*16),0,gclock,bclock);
            num(HC2,399+((i-numRows)*16),0,gclock,bclock);
   de168:	462a      	mov	r2, r5
   de16a:	3991      	subs	r1, #145	; 0x91
   de16c:	f7f6 f93a 	bl	d43e4 <_Z3numiiiii>
            
            condition(cid,448+((i-numRows)*16));
   de170:	6821      	ldr	r1, [r4, #0]
   de172:	6830      	ldr	r0, [r6, #0]
   de174:	3906      	subs	r1, #6
   de176:	0109      	lsls	r1, r1, #4
   de178:	f7fb f976 	bl	d9468 <_Z9conditionii>
            dimg(cid,448+((i-numRows)*16));
   de17c:	6821      	ldr	r1, [r4, #0]
   de17e:	6830      	ldr	r0, [r6, #0]
   de180:	3906      	subs	r1, #6
   de182:	0109      	lsls	r1, r1, #4
   de184:	f7fb f8d4 	bl	d9330 <_Z4dimgii>
            strip.show();
   de188:	4872      	ldr	r0, [pc, #456]	; (de354 <loop+0x113c>)
   de18a:	f000 fa97 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            //Delay - speed of scroll
            if(digitalRead(D0) == HIGH){
   de18e:	4628      	mov	r0, r5
   de190:	f002 ffd8 	bl	e1144 <digitalRead>
   de194:	2801      	cmp	r0, #1
   de196:	d009      	beq.n	de1ac <loop+0xf94>
                break;
            }
            delay(200);
   de198:	20c8      	movs	r0, #200	; 0xc8
   de19a:	f001 fd1d 	bl	dfbd8 <delay>
            
            //Erase for next shift
            strip.clear();
   de19e:	486d      	ldr	r0, [pc, #436]	; (de354 <loop+0x113c>)
   de1a0:	f000 fc5d 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
//////////////////////////////////////
    
    else if(dmode == 3)                                 //Mode 3
    {
        int numRows = 34;
        for(i = 0; i < numRows; i++){
   de1a4:	6823      	ldr	r3, [r4, #0]
   de1a6:	3301      	adds	r3, #1
   de1a8:	6023      	str	r3, [r4, #0]
   de1aa:	e5fb      	b.n	ddda4 <loop+0xb8c>
//////////////////////////////////////
///////GET WEATHER DATA///////////////
//////////////////////////////////////
    
    
    if(tmr >= 60) {
   de1ac:	4a6e      	ldr	r2, [pc, #440]	; (de368 <loop+0x1150>)
   de1ae:	6813      	ldr	r3, [r2, #0]
   de1b0:	2b3b      	cmp	r3, #59	; 0x3b
   de1b2:	4616      	mov	r6, r2
   de1b4:	dd34      	ble.n	de220 <loop+0x1008>
   de1b6:	4c6d      	ldr	r4, [pc, #436]	; (de36c <loop+0x1154>)
        Particle.publish("Weather", "1", PRIVATE);
   de1b8:	4a6d      	ldr	r2, [pc, #436]	; (de370 <loop+0x1158>)
   de1ba:	7823      	ldrb	r3, [r4, #0]
   de1bc:	496d      	ldr	r1, [pc, #436]	; (de374 <loop+0x115c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de1be:	2500      	movs	r5, #0
   de1c0:	a808      	add	r0, sp, #32
   de1c2:	f88d 5000 	strb.w	r5, [sp]
   de1c6:	f7f6 f8f3 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de1ca:	a809      	add	r0, sp, #36	; 0x24
   de1cc:	f7fe ff08 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   de1d0:	f002 ffe2 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   de1d4:	2003      	movs	r0, #3
   de1d6:	f7f6 f82f 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   de1da:	2801      	cmp	r0, #1
   de1dc:	d10a      	bne.n	de1f4 <loop+0xfdc>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de1de:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   de1e0:	4a63      	ldr	r2, [pc, #396]	; (de370 <loop+0x1158>)
   de1e2:	f88d 5000 	strb.w	r5, [sp]
   de1e6:	a808      	add	r0, sp, #32
   de1e8:	4963      	ldr	r1, [pc, #396]	; (de378 <loop+0x1160>)
   de1ea:	f7f6 f8e1 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de1ee:	a809      	add	r0, sp, #36	; 0x24
   de1f0:	f7fe fef6 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   de1f4:	f002 ffd0 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   de1f8:	2004      	movs	r0, #4
   de1fa:	f7f6 f81d 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   de1fe:	2801      	cmp	r0, #1
   de200:	d10b      	bne.n	de21a <loop+0x1002>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de202:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de204:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   de206:	495d      	ldr	r1, [pc, #372]	; (de37c <loop+0x1164>)
   de208:	f88d 2000 	strb.w	r2, [sp]
   de20c:	a808      	add	r0, sp, #32
   de20e:	4a58      	ldr	r2, [pc, #352]	; (de370 <loop+0x1158>)
   de210:	f7f6 f8ce 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de214:	a809      	add	r0, sp, #36	; 0x24
   de216:	f7fe fee3 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        tmr = 0;
   de21a:	2300      	movs	r3, #0
   de21c:	6033      	str	r3, [r6, #0]
   de21e:	e1a6      	b.n	de56e <loop+0x1356>
    }
    else if(tmr == 30){
   de220:	2b1e      	cmp	r3, #30
   de222:	d135      	bne.n	de290 <loop+0x1078>
   de224:	4c51      	ldr	r4, [pc, #324]	; (de36c <loop+0x1154>)
        tmr = tmr+1;
        Particle.publish("Weather", "1", PRIVATE);
   de226:	4953      	ldr	r1, [pc, #332]	; (de374 <loop+0x115c>)
            Particle.publish("itempdat", "1", PRIVATE);
        }
        tmr = 0;
    }
    else if(tmr == 30){
        tmr = tmr+1;
   de228:	231f      	movs	r3, #31
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de22a:	2500      	movs	r5, #0
   de22c:	6013      	str	r3, [r2, #0]
        Particle.publish("Weather", "1", PRIVATE);
   de22e:	a808      	add	r0, sp, #32
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de230:	7823      	ldrb	r3, [r4, #0]
   de232:	4a4f      	ldr	r2, [pc, #316]	; (de370 <loop+0x1158>)
   de234:	f88d 5000 	strb.w	r5, [sp]
   de238:	f7f6 f8ba 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de23c:	a809      	add	r0, sp, #36	; 0x24
   de23e:	f7fe fecf 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        if(EEPROM.read(3) == 1)
   de242:	f002 ffa9 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   de246:	2003      	movs	r0, #3
   de248:	f7f5 fff6 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   de24c:	2801      	cmp	r0, #1
   de24e:	d10a      	bne.n	de266 <loop+0x104e>
   de250:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("co2dat", "1", PRIVATE);
   de252:	4a47      	ldr	r2, [pc, #284]	; (de370 <loop+0x1158>)
   de254:	f88d 5000 	strb.w	r5, [sp]
   de258:	a808      	add	r0, sp, #32
   de25a:	4947      	ldr	r1, [pc, #284]	; (de378 <loop+0x1160>)
   de25c:	f7f6 f8a8 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de260:	a809      	add	r0, sp, #36	; 0x24
   de262:	f7fe febd 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        if(EEPROM.read(4) == 1)
   de266:	f002 ff97 	bl	e1198 <_Z21__fetch_global_EEPROMv>
   de26a:	2004      	movs	r0, #4
   de26c:	f7f5 ffe4 	bl	d4238 <_ZN11EEPROMClass4readEi.isra.10>
   de270:	2801      	cmp	r0, #1
   de272:	f040 817c 	bne.w	de56e <loop+0x1356>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   de276:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
   de278:	7823      	ldrb	r3, [r4, #0]
        {
            Particle.publish("itempdat", "1", PRIVATE);
   de27a:	4940      	ldr	r1, [pc, #256]	; (de37c <loop+0x1164>)
   de27c:	f88d 2000 	strb.w	r2, [sp]
   de280:	a808      	add	r0, sp, #32
   de282:	4a3b      	ldr	r2, [pc, #236]	; (de370 <loop+0x1158>)
   de284:	f7f6 f894 	bl	d43b0 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.14.constprop.17>
   de288:	a809      	add	r0, sp, #36	; 0x24
   de28a:	f7fe fea9 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   de28e:	e16e      	b.n	de56e <loop+0x1356>
        }
    }
    else{
        tmr = tmr+1;
   de290:	3301      	adds	r3, #1
   de292:	6013      	str	r3, [r2, #0]
    }

}
   de294:	e16b      	b.n	de56e <loop+0x1356>
//////////////////////////////////////
///////////BUTTON PRESSES/////////////
//////////////////////////////////////
    
    if(digitalRead(D0) == HIGH && digitalRead(D1) == LOW && digitalRead(D2) == HIGH){            //Top & Bottom Button Press
        settings();
   de296:	f7fe f9bf 	bl	dc618 <_Z8settingsv>
   de29a:	f7ff b86b 	b.w	dd374 <loop+0x15c>
        snum((ico2%10), 239, rclock/2,gclock/3, bclock*2);
        strip.show();
        delay(5000);
        strip.clear();
    }
    else if(digitalRead(D2) == LOW && digitalRead(D1) == LOW && digitalRead(D0) == HIGH){            //Bottom Button Press
   de29e:	2002      	movs	r0, #2
   de2a0:	f002 ff50 	bl	e1144 <digitalRead>
   de2a4:	2800      	cmp	r0, #0
   de2a6:	f47f a8f2 	bne.w	dd48e <loop+0x276>
   de2aa:	2001      	movs	r0, #1
   de2ac:	f002 ff4a 	bl	e1144 <digitalRead>
   de2b0:	2800      	cmp	r0, #0
   de2b2:	f47f a8ec 	bne.w	dd48e <loop+0x276>
   de2b6:	f002 ff45 	bl	e1144 <digitalRead>
   de2ba:	2801      	cmp	r0, #1
   de2bc:	4605      	mov	r5, r0
   de2be:	f47f a8e6 	bne.w	dd48e <loop+0x276>
        strip.clear();
   de2c2:	4824      	ldr	r0, [pc, #144]	; (de354 <loop+0x113c>)
   de2c4:	f000 fbcb 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
        if(dmode == 1){
   de2c8:	6822      	ldr	r2, [r4, #0]
   de2ca:	4b2d      	ldr	r3, [pc, #180]	; (de380 <loop+0x1168>)
   de2cc:	2a01      	cmp	r2, #1
   de2ce:	d102      	bne.n	de2d6 <loop+0x10be>
            dmode = 3;
   de2d0:	2203      	movs	r2, #3
   de2d2:	601a      	str	r2, [r3, #0]
   de2d4:	e003      	b.n	de2de <loop+0x10c6>
        }
        else{
            scan = 2;
   de2d6:	9903      	ldr	r1, [sp, #12]
            dmode = 1;
   de2d8:	601d      	str	r5, [r3, #0]
        strip.clear();
        if(dmode == 1){
            dmode = 3;
        }
        else{
            scan = 2;
   de2da:	2202      	movs	r2, #2
   de2dc:	600a      	str	r2, [r1, #0]
            dmode = 1;
        }
        strip.show();
   de2de:	481d      	ldr	r0, [pc, #116]	; (de354 <loop+0x113c>)
   de2e0:	f000 f9ec 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
        while(digitalRead(D0) == HIGH){
   de2e4:	2000      	movs	r0, #0
   de2e6:	f002 ff2d 	bl	e1144 <digitalRead>
   de2ea:	2801      	cmp	r0, #1
   de2ec:	f47f a8cf 	bne.w	dd48e <loop+0x276>
            delay(10);
   de2f0:	200a      	movs	r0, #10
   de2f2:	f001 fc71 	bl	dfbd8 <delay>
        else{
            scan = 2;
            dmode = 1;
        }
        strip.show();
        while(digitalRead(D0) == HIGH){
   de2f6:	e7f5      	b.n	de2e4 <loop+0x10cc>
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
   de2f8:	6823      	ldr	r3, [r4, #0]
   de2fa:	4813      	ldr	r0, [pc, #76]	; (de348 <loop+0x1130>)
   de2fc:	4d11      	ldr	r5, [pc, #68]	; (de344 <loop+0x112c>)
   de2fe:	2b01      	cmp	r3, #1
   de300:	d142      	bne.n	de388 <loop+0x1170>
            dmode = 2;
            photoupd = 1;
   de302:	4920      	ldr	r1, [pc, #128]	; (de384 <loop+0x116c>)
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
            dmode = 2;
   de304:	2602      	movs	r6, #2
            photoupd = 1;
   de306:	600b      	str	r3, [r1, #0]
            strip.setPixelColor(7,0,gclock,bclock/2);
   de308:	6829      	ldr	r1, [r5, #0]
   de30a:	fb91 f1f6 	sdiv	r1, r1, r6
   de30e:	b2c9      	uxtb	r1, r1
   de310:	7803      	ldrb	r3, [r0, #0]
            delay(10);
        }
    }
    if(digitalRead(D1) == HIGH && digitalRead(D0) == LOW && digitalRead(D2) == LOW){            //Middle Button Press
        if(dmode == 1){
            dmode = 2;
   de312:	6026      	str	r6, [r4, #0]
            photoupd = 1;
            strip.setPixelColor(7,0,gclock,bclock/2);
   de314:	480f      	ldr	r0, [pc, #60]	; (de354 <loop+0x113c>)
   de316:	9100      	str	r1, [sp, #0]
   de318:	2107      	movs	r1, #7
   de31a:	f000 fb71 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   de31e:	480d      	ldr	r0, [pc, #52]	; (de354 <loop+0x113c>)
   de320:	f000 f9cc 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   de324:	2001      	movs	r0, #1
   de326:	f002 ff0d 	bl	e1144 <digitalRead>
   de32a:	2801      	cmp	r0, #1
   de32c:	d103      	bne.n	de336 <loop+0x111e>
                delay(5);
   de32e:	2005      	movs	r0, #5
   de330:	f001 fc52 	bl	dfbd8 <delay>
        if(dmode == 1){
            dmode = 2;
            photoupd = 1;
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   de334:	e7f6      	b.n	de324 <loop+0x110c>
                delay(5);
            }
            strip.clear();
   de336:	4807      	ldr	r0, [pc, #28]	; (de354 <loop+0x113c>)
   de338:	f000 fb91 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   de33c:	4805      	ldr	r0, [pc, #20]	; (de354 <loop+0x113c>)
   de33e:	f000 f9bd 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   de342:	e043      	b.n	de3cc <loop+0x11b4>
   de344:	2003e35c 	.word	0x2003e35c
   de348:	2003e314 	.word	0x2003e314
   de34c:	2003e2f8 	.word	0x2003e2f8
   de350:	2003e34c 	.word	0x2003e34c
   de354:	2003e31c 	.word	0x2003e31c
   de358:	2003e344 	.word	0x2003e344
   de35c:	2003e2e8 	.word	0x2003e2e8
   de360:	2003e2f0 	.word	0x2003e2f0
   de364:	2003e2e4 	.word	0x2003e2e4
   de368:	2003e364 	.word	0x2003e364
   de36c:	2003e334 	.word	0x2003e334
   de370:	000e47eb 	.word	0x000e47eb
   de374:	000e4496 	.word	0x000e4496
   de378:	000e44ac 	.word	0x000e44ac
   de37c:	000e44c1 	.word	0x000e44c1
   de380:	2003e330 	.word	0x2003e330
   de384:	2003e348 	.word	0x2003e348
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
   de388:	7803      	ldrb	r3, [r0, #0]
   de38a:	6829      	ldr	r1, [r5, #0]
   de38c:	2002      	movs	r0, #2
   de38e:	fb91 f1f0 	sdiv	r1, r1, r0
   de392:	b2c9      	uxtb	r1, r1
   de394:	9100      	str	r1, [sp, #0]
   de396:	4877      	ldr	r0, [pc, #476]	; (de574 <loop+0x135c>)
   de398:	2107      	movs	r1, #7
   de39a:	f000 fb31 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
            strip.show();
   de39e:	4875      	ldr	r0, [pc, #468]	; (de574 <loop+0x135c>)
   de3a0:	f000 f98c 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            while(digitalRead(D1) == HIGH){
   de3a4:	2001      	movs	r0, #1
   de3a6:	f002 fecd 	bl	e1144 <digitalRead>
   de3aa:	2801      	cmp	r0, #1
   de3ac:	d103      	bne.n	de3b6 <loop+0x119e>
                delay(5);
   de3ae:	2005      	movs	r0, #5
   de3b0:	f001 fc12 	bl	dfbd8 <delay>
            strip.show();
        }
        else{
            strip.setPixelColor(7,0,gclock,bclock/2);
            strip.show();
            while(digitalRead(D1) == HIGH){
   de3b4:	e7f6      	b.n	de3a4 <loop+0x118c>
                delay(5);
            }
            strip.clear();
   de3b6:	486f      	ldr	r0, [pc, #444]	; (de574 <loop+0x135c>)
   de3b8:	f000 fb51 	bl	dea5e <_ZN17Adafruit_NeoPixel5clearEv>
            strip.show();
   de3bc:	486d      	ldr	r0, [pc, #436]	; (de574 <loop+0x135c>)
   de3be:	f000 f97d 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
            scan = 2;
   de3c2:	9a03      	ldr	r2, [sp, #12]
   de3c4:	2302      	movs	r3, #2
   de3c6:	6013      	str	r3, [r2, #0]
            dmode = 1;
   de3c8:	2301      	movs	r3, #1
   de3ca:	6023      	str	r3, [r4, #0]
        }
        while(digitalRead(D1) == HIGH){
   de3cc:	2001      	movs	r0, #1
   de3ce:	f002 feb9 	bl	e1144 <digitalRead>
   de3d2:	2801      	cmp	r0, #1
   de3d4:	f47f a86d 	bne.w	dd4b2 <loop+0x29a>
            delay(10);
   de3d8:	200a      	movs	r0, #10
   de3da:	f001 fbfd 	bl	dfbd8 <delay>
            strip.clear();
            strip.show();
            scan = 2;
            dmode = 1;
        }
        while(digitalRead(D1) == HIGH){
   de3de:	e7f5      	b.n	de3cc <loop+0x11b4>
        /////////////
        ///CLOCK CODE
        if(mprev != min || scan == 2) {                         //Execute change in display if new time is found

            if(analogRead(A4)>bound || EEPROM.read(6) == 0){    //If the brightness is above the threshold, post large numbers by default
                mprev = Time.minute();
   de3e0:	f001 fbe6 	bl	dfbb0 <_ZN9TimeClass6minuteEv>
                if(min/10 == 0) {
   de3e4:	f1bb 0f12 	cmp.w	fp, #18
        /////////////
        ///CLOCK CODE
        if(mprev != min || scan == 2) {                         //Execute change in display if new time is found

            if(analogRead(A4)>bound || EEPROM.read(6) == 0){    //If the brightness is above the threshold, post large numbers by default
                mprev = Time.minute();
   de3e8:	f8ca 0000 	str.w	r0, [sl]
                if(min/10 == 0) {
   de3ec:	d812      	bhi.n	de414 <loop+0x11fc>
                    num(0,79,rclock,gclock,bclock);
   de3ee:	f8d8 3000 	ldr.w	r3, [r8]
   de3f2:	9300      	str	r3, [sp, #0]
   de3f4:	6833      	ldr	r3, [r6, #0]
   de3f6:	682a      	ldr	r2, [r5, #0]
   de3f8:	214f      	movs	r1, #79	; 0x4f
   de3fa:	2000      	movs	r0, #0
   de3fc:	f7f5 fff2 	bl	d43e4 <_Z3numiiiii>
                    num(min,112,rclock,gclock,bclock);
   de400:	f8d8 3000 	ldr.w	r3, [r8]
   de404:	9300      	str	r3, [sp, #0]
   de406:	6833      	ldr	r3, [r6, #0]
   de408:	682a      	ldr	r2, [r5, #0]
   de40a:	9802      	ldr	r0, [sp, #8]
   de40c:	2170      	movs	r1, #112	; 0x70
   de40e:	f7f5 ffe9 	bl	d43e4 <_Z3numiiiii>
   de412:	e018      	b.n	de446 <loop+0x122e>
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
   de414:	9b02      	ldr	r3, [sp, #8]
   de416:	f04f 0b0a 	mov.w	fp, #10
   de41a:	fb93 fafb 	sdiv	sl, r3, fp
   de41e:	f8d8 3000 	ldr.w	r3, [r8]
   de422:	9300      	str	r3, [sp, #0]
   de424:	6833      	ldr	r3, [r6, #0]
   de426:	682a      	ldr	r2, [r5, #0]
   de428:	214f      	movs	r1, #79	; 0x4f
   de42a:	4650      	mov	r0, sl
   de42c:	f7f5 ffda 	bl	d43e4 <_Z3numiiiii>
                    num((min%10),112,rclock,gclock,bclock);
   de430:	f8d8 3000 	ldr.w	r3, [r8]
   de434:	9802      	ldr	r0, [sp, #8]
   de436:	9300      	str	r3, [sp, #0]
   de438:	6833      	ldr	r3, [r6, #0]
   de43a:	682a      	ldr	r2, [r5, #0]
   de43c:	2170      	movs	r1, #112	; 0x70
   de43e:	fb0b 001a 	mls	r0, fp, sl, r0
   de442:	f7f5 ffcf 	bl	d43e4 <_Z3numiiiii>
                }
                for(i=0;i<7;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   de446:	2300      	movs	r3, #0
   de448:	f8df a130 	ldr.w	sl, [pc, #304]	; de57c <loop+0x1364>
   de44c:	f8df b128 	ldr.w	fp, [pc, #296]	; de578 <loop+0x1360>
   de450:	6023      	str	r3, [r4, #0]
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de452:	f04f 080a 	mov.w	r8, #10
   de456:	fb97 f8f8 	sdiv	r8, r7, r8
   de45a:	fa5f f888 	uxtb.w	r8, r8
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
                    num((min%10),112,rclock,gclock,bclock);
                }
                for(i=0;i<7;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   de45e:	6821      	ldr	r1, [r4, #0]
   de460:	2906      	cmp	r1, #6
   de462:	f73f a885 	bgt.w	dd570 <loop+0x358>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de466:	f8db 0000 	ldr.w	r0, [fp]
   de46a:	6833      	ldr	r3, [r6, #0]
   de46c:	682a      	ldr	r2, [r5, #0]
   de46e:	fb10 f008 	smulbb	r0, r0, r8
   de472:	b2c0      	uxtb	r0, r0
   de474:	fb13 f308 	smulbb	r3, r3, r8
   de478:	fb12 f208 	smulbb	r2, r2, r8
   de47c:	9000      	str	r0, [sp, #0]
   de47e:	b2db      	uxtb	r3, r3
   de480:	b2d2      	uxtb	r2, r2
   de482:	b289      	uxth	r1, r1
   de484:	483b      	ldr	r0, [pc, #236]	; (de574 <loop+0x135c>)
   de486:	f000 fabb 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                }
                else {
                    num((min/10),79,rclock,gclock,bclock);
                    num((min%10),112,rclock,gclock,bclock);
                }
                for(i=0;i<7;i++)                                 //Display 1 if present in the hour, 7 pixels tall
   de48a:	f8da 3000 	ldr.w	r3, [sl]
   de48e:	3301      	adds	r3, #1
   de490:	f8ca 3000 	str.w	r3, [sl]
   de494:	e7e3      	b.n	de45e <loop+0x1246>
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);    //Display other digit of hour
                strip.show();
            }

            else{                                               //Display small clock if set in EEPROM
                mprev = Time.minute();
   de496:	f001 fb8b 	bl	dfbb0 <_ZN9TimeClass6minuteEv>
                if(min/10 == 0) {
   de49a:	f1bb 0f12 	cmp.w	fp, #18
                num(hr-(10*(hr/10)),16,rclock,gclock,bclock);    //Display other digit of hour
                strip.show();
            }

            else{                                               //Display small clock if set in EEPROM
                mprev = Time.minute();
   de49e:	f8ca 0000 	str.w	r0, [sl]
                if(min/10 == 0) {
   de4a2:	d812      	bhi.n	de4ca <loop+0x12b2>
                    snum(0,63,rclock,gclock,bclock);
   de4a4:	f8d8 3000 	ldr.w	r3, [r8]
   de4a8:	9300      	str	r3, [sp, #0]
   de4aa:	6833      	ldr	r3, [r6, #0]
   de4ac:	682a      	ldr	r2, [r5, #0]
   de4ae:	213f      	movs	r1, #63	; 0x3f
   de4b0:	2000      	movs	r0, #0
   de4b2:	f7f7 ffcb 	bl	d644c <_Z4snumiiiii>
                    snum(min,95,rclock,gclock,bclock);
   de4b6:	f8d8 3000 	ldr.w	r3, [r8]
   de4ba:	9300      	str	r3, [sp, #0]
   de4bc:	6833      	ldr	r3, [r6, #0]
   de4be:	682a      	ldr	r2, [r5, #0]
   de4c0:	9802      	ldr	r0, [sp, #8]
   de4c2:	215f      	movs	r1, #95	; 0x5f
   de4c4:	f7f7 ffc2 	bl	d644c <_Z4snumiiiii>
   de4c8:	e018      	b.n	de4fc <loop+0x12e4>
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
   de4ca:	9b02      	ldr	r3, [sp, #8]
   de4cc:	f04f 0b0a 	mov.w	fp, #10
   de4d0:	fb93 fafb 	sdiv	sl, r3, fp
   de4d4:	f8d8 3000 	ldr.w	r3, [r8]
   de4d8:	9300      	str	r3, [sp, #0]
   de4da:	6833      	ldr	r3, [r6, #0]
   de4dc:	682a      	ldr	r2, [r5, #0]
   de4de:	213f      	movs	r1, #63	; 0x3f
   de4e0:	4650      	mov	r0, sl
   de4e2:	f7f7 ffb3 	bl	d644c <_Z4snumiiiii>
                    snum((min%10),95,rclock,gclock,bclock);
   de4e6:	f8d8 3000 	ldr.w	r3, [r8]
   de4ea:	9802      	ldr	r0, [sp, #8]
   de4ec:	9300      	str	r3, [sp, #0]
   de4ee:	6833      	ldr	r3, [r6, #0]
   de4f0:	682a      	ldr	r2, [r5, #0]
   de4f2:	215f      	movs	r1, #95	; 0x5f
   de4f4:	fb0b 001a 	mls	r0, fp, sl, r0
   de4f8:	f7f7 ffa8 	bl	d644c <_Z4snumiiiii>
                }
                for(i=0;i<5;i++)
   de4fc:	2300      	movs	r3, #0
   de4fe:	f8df a07c 	ldr.w	sl, [pc, #124]	; de57c <loop+0x1364>
   de502:	f8df b074 	ldr.w	fp, [pc, #116]	; de578 <loop+0x1360>
   de506:	6023      	str	r3, [r4, #0]
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de508:	f04f 080a 	mov.w	r8, #10
   de50c:	fb97 f8f8 	sdiv	r8, r7, r8
   de510:	fa5f f888 	uxtb.w	r8, r8
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
                    snum((min%10),95,rclock,gclock,bclock);
                }
                for(i=0;i<5;i++)
   de514:	6821      	ldr	r1, [r4, #0]
   de516:	2904      	cmp	r1, #4
   de518:	dc17      	bgt.n	de54a <loop+0x1332>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
   de51a:	f8db 0000 	ldr.w	r0, [fp]
   de51e:	6833      	ldr	r3, [r6, #0]
   de520:	682a      	ldr	r2, [r5, #0]
   de522:	fb10 f008 	smulbb	r0, r0, r8
   de526:	b2c0      	uxtb	r0, r0
   de528:	fb13 f308 	smulbb	r3, r3, r8
   de52c:	fb12 f208 	smulbb	r2, r2, r8
   de530:	9000      	str	r0, [sp, #0]
   de532:	b2db      	uxtb	r3, r3
   de534:	b2d2      	uxtb	r2, r2
   de536:	b289      	uxth	r1, r1
   de538:	480e      	ldr	r0, [pc, #56]	; (de574 <loop+0x135c>)
   de53a:	f000 fa61 	bl	dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>
                }
                else {
                    snum((min/10),63,rclock,gclock,bclock);
                    snum((min%10),95,rclock,gclock,bclock);
                }
                for(i=0;i<5;i++)
   de53e:	f8da 3000 	ldr.w	r3, [sl]
   de542:	3301      	adds	r3, #1
   de544:	f8ca 3000 	str.w	r3, [sl]
   de548:	e7e4      	b.n	de514 <loop+0x12fc>
                {
                    strip.setPixelColor(i,rclock*(hr/10),gclock*(hr/10),bclock*(hr/10));
                }
                snum(hr-(10*(hr/10)),16,rclock,gclock,bclock);
   de54a:	4b0b      	ldr	r3, [pc, #44]	; (de578 <loop+0x1360>)
   de54c:	681b      	ldr	r3, [r3, #0]
   de54e:	9300      	str	r3, [sp, #0]
   de550:	200a      	movs	r0, #10
   de552:	6833      	ldr	r3, [r6, #0]
   de554:	fb97 fef0 	sdiv	lr, r7, r0
   de558:	682a      	ldr	r2, [r5, #0]
   de55a:	fb00 701e 	mls	r0, r0, lr, r7
   de55e:	2110      	movs	r1, #16
   de560:	f7f7 ff74 	bl	d644c <_Z4snumiiiii>
                strip.show();
   de564:	4803      	ldr	r0, [pc, #12]	; (de574 <loop+0x135c>)
   de566:	f000 f8a9 	bl	de6bc <_ZN17Adafruit_NeoPixel4showEv>
   de56a:	f7ff b811 	b.w	dd590 <loop+0x378>
    }
    else{
        tmr = tmr+1;
    }

}
   de56e:	b00b      	add	sp, #44	; 0x2c
   de570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   de574:	2003e31c 	.word	0x2003e31c
   de578:	2003e35c 	.word	0x2003e35c
   de57c:	2003e33c 	.word	0x2003e33c

000de580 <_GLOBAL__sub_I_strip>:
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   de580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   de582:	4b14      	ldr	r3, [pc, #80]	; (de5d4 <_GLOBAL__sub_I_strip+0x54>)

#define PIXEL_PIN A3            //Define Hardware pin used for data

#define PIXEL_TYPE WS2812       //Define LED Type

Adafruit_NeoPixel strip = Adafruit_NeoPixel(PIXEL_COUNT, PIXEL_PIN, PIXEL_TYPE);    //Initialize neopixel function
   de584:	4c14      	ldr	r4, [pc, #80]	; (de5d8 <_GLOBAL__sub_I_strip+0x58>)
   de586:	4e15      	ldr	r6, [pc, #84]	; (de5dc <_GLOBAL__sub_I_strip+0x5c>)
   de588:	2500      	movs	r5, #0
   de58a:	701d      	strb	r5, [r3, #0]
   de58c:	4b14      	ldr	r3, [pc, #80]	; (de5e0 <_GLOBAL__sub_I_strip+0x60>)
   de58e:	2701      	movs	r7, #1
   de590:	701f      	strb	r7, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   de592:	f000 fa83 	bl	dea9c <HAL_Pin_Map>
   de596:	2302      	movs	r3, #2
   de598:	2210      	movs	r2, #16
   de59a:	f44f 7180 	mov.w	r1, #256	; 0x100
   de59e:	4620      	mov	r0, r4
   de5a0:	f000 f87a 	bl	de698 <_ZN17Adafruit_NeoPixelC1Ethh>
   de5a4:	4632      	mov	r2, r6
   de5a6:	490f      	ldr	r1, [pc, #60]	; (de5e4 <_GLOBAL__sub_I_strip+0x64>)
   de5a8:	4620      	mov	r0, r4

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   de5aa:	4c0f      	ldr	r4, [pc, #60]	; (de5e8 <_GLOBAL__sub_I_strip+0x68>)
   de5ac:	f002 fe48 	bl	e1240 <__aeabi_atexit>
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   de5b0:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   de5b4:	4638      	mov	r0, r7

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   de5b6:	6025      	str	r5, [r4, #0]
   de5b8:	80a5      	strh	r5, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   de5ba:	71a5      	strb	r5, [r4, #6]
   de5bc:	8125      	strh	r5, [r4, #8]
   de5be:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   de5c0:	f000 fcc4 	bl	def4c <set_system_mode>

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
   de5c4:	4632      	mov	r2, r6
   de5c6:	4620      	mov	r0, r4
   de5c8:	4908      	ldr	r1, [pc, #32]	; (de5ec <_GLOBAL__sub_I_strip+0x6c>)
        }
        tempC = atof(tempdat)-2;                //Temperature offset for accuracy of thermometer
        tempF = (tempC*1.8)+32;
        itemp = (int)tempF;
    }
}
   de5ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}

////////////////////////////////////
//// HARDWARE CONFIGURATION ////////
////////////////////////////////////

SYSTEM_MODE(AUTOMATIC);         //Tells device to use WiFi by default
   de5ce:	f002 be37 	b.w	e1240 <__aeabi_atexit>
   de5d2:	bf00      	nop
   de5d4:	2003e2ec 	.word	0x2003e2ec
   de5d8:	2003e31c 	.word	0x2003e31c
   de5dc:	2003e2dc 	.word	0x2003e2dc
   de5e0:	2003e334 	.word	0x2003e334
   de5e4:	000de5f9 	.word	0x000de5f9
   de5e8:	2003e2fc 	.word	0x2003e2fc
   de5ec:	000d4215 	.word	0x000d4215

000de5f0 <micros>:
#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
   de5f0:	f000 badc 	b.w	debac <HAL_Timer_Get_Micro_Seconds>

000de5f4 <delayMicroseconds>:
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   de5f4:	f000 bad2 	b.w	deb9c <HAL_Delay_Microseconds>

000de5f8 <_ZN17Adafruit_NeoPixelD1Ev>:
{
  updateLength(n);
  setPin(p);
}

Adafruit_NeoPixel::~Adafruit_NeoPixel() {
   de5f8:	b510      	push	{r4, lr}
   de5fa:	4604      	mov	r4, r0
  if (pixels) free(pixels);
   de5fc:	68c0      	ldr	r0, [r0, #12]
   de5fe:	b108      	cbz	r0, de604 <_ZN17Adafruit_NeoPixelD1Ev+0xc>
   de600:	f000 fd92 	bl	df128 <free>
  if (begun) pinMode(pin, INPUT);
   de604:	7823      	ldrb	r3, [r4, #0]
   de606:	b11b      	cbz	r3, de610 <_ZN17Adafruit_NeoPixelD1Ev+0x18>
   de608:	2100      	movs	r1, #0
   de60a:	79e0      	ldrb	r0, [r4, #7]
   de60c:	f002 fd70 	bl	e10f0 <pinMode>
}
   de610:	4620      	mov	r0, r4
   de612:	bd10      	pop	{r4, pc}

000de614 <_ZN17Adafruit_NeoPixel12updateLengthEt>:

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   de614:	b538      	push	{r3, r4, r5, lr}
   de616:	4604      	mov	r4, r0
  if (pixels) free(pixels); // Free existing data (if any)
   de618:	68c0      	ldr	r0, [r0, #12]
Adafruit_NeoPixel::~Adafruit_NeoPixel() {
  if (pixels) free(pixels);
  if (begun) pinMode(pin, INPUT);
}

void Adafruit_NeoPixel::updateLength(uint16_t n) {
   de61a:	460d      	mov	r5, r1
  if (pixels) free(pixels); // Free existing data (if any)
   de61c:	b108      	cbz	r0, de622 <_ZN17Adafruit_NeoPixel12updateLengthEt+0xe>
   de61e:	f000 fd83 	bl	df128 <free>

  // Allocate new data -- note: ALL PIXELS ARE CLEARED
  numBytes = n * ((type == SK6812RGBW) ? 4 : 3);
   de622:	79a3      	ldrb	r3, [r4, #6]
   de624:	2b06      	cmp	r3, #6
   de626:	bf0c      	ite	eq
   de628:	2004      	moveq	r0, #4
   de62a:	2003      	movne	r0, #3
   de62c:	fb10 f005 	smulbb	r0, r0, r5
   de630:	b280      	uxth	r0, r0
   de632:	80a0      	strh	r0, [r4, #4]
  if ((pixels = (uint8_t *)malloc(numBytes))) {
   de634:	f000 fd70 	bl	df118 <malloc>
   de638:	60e0      	str	r0, [r4, #12]
   de63a:	b128      	cbz	r0, de648 <_ZN17Adafruit_NeoPixel12updateLengthEt+0x34>
    memset(pixels, 0, numBytes);
   de63c:	88a2      	ldrh	r2, [r4, #4]
   de63e:	2100      	movs	r1, #0
   de640:	f003 fd7c 	bl	e213c <memset>
    numLEDs = n;
   de644:	8065      	strh	r5, [r4, #2]
   de646:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    numLEDs = numBytes = 0;
   de648:	80a0      	strh	r0, [r4, #4]
   de64a:	8060      	strh	r0, [r4, #2]
   de64c:	bd38      	pop	{r3, r4, r5, pc}

000de64e <_ZN17Adafruit_NeoPixel5beginEv>:
  }
}

void Adafruit_NeoPixel::begin(void) {
   de64e:	b510      	push	{r4, lr}
   de650:	4604      	mov	r4, r0
  pinMode(pin, OUTPUT);
   de652:	2101      	movs	r1, #1
   de654:	79c0      	ldrb	r0, [r0, #7]
   de656:	f002 fd4b 	bl	e10f0 <pinMode>
  digitalWrite(pin, LOW);
   de65a:	2100      	movs	r1, #0
   de65c:	79e0      	ldrb	r0, [r4, #7]
   de65e:	f002 fd58 	bl	e1112 <digitalWrite>
  begun = true;
   de662:	2301      	movs	r3, #1
   de664:	7023      	strb	r3, [r4, #0]
   de666:	bd10      	pop	{r4, pc}

000de668 <_ZN17Adafruit_NeoPixel6setPinEh>:
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   de668:	b538      	push	{r3, r4, r5, lr}
    if (begun) {
   de66a:	7803      	ldrb	r3, [r0, #0]
  digitalWrite(pin, LOW);
  begun = true;
}

// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
   de66c:	4605      	mov	r5, r0
   de66e:	460c      	mov	r4, r1
    if (begun) {
   de670:	b11b      	cbz	r3, de67a <_ZN17Adafruit_NeoPixel6setPinEh+0x12>
        pinMode(pin, INPUT);
   de672:	2100      	movs	r1, #0
   de674:	79c0      	ldrb	r0, [r0, #7]
   de676:	f002 fd3b 	bl	e10f0 <pinMode>
    }
    pin = p;
    if (begun) {
   de67a:	782b      	ldrb	r3, [r5, #0]
// Set the output pin number
void Adafruit_NeoPixel::setPin(uint8_t p) {
    if (begun) {
        pinMode(pin, INPUT);
    }
    pin = p;
   de67c:	71ec      	strb	r4, [r5, #7]
    if (begun) {
   de67e:	b153      	cbz	r3, de696 <_ZN17Adafruit_NeoPixel6setPinEh+0x2e>
        pinMode(p, OUTPUT);
   de680:	b2a4      	uxth	r4, r4
   de682:	4620      	mov	r0, r4
   de684:	2101      	movs	r1, #1
   de686:	f002 fd33 	bl	e10f0 <pinMode>
        digitalWrite(p, LOW);
   de68a:	4620      	mov	r0, r4
   de68c:	2100      	movs	r1, #0
    }
}
   de68e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        pinMode(pin, INPUT);
    }
    pin = p;
    if (begun) {
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
   de692:	f002 bd3e 	b.w	e1112 <digitalWrite>
   de696:	bd38      	pop	{r3, r4, r5, pc}

000de698 <_ZN17Adafruit_NeoPixelC1Ethh>:
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   de698:	b570      	push	{r4, r5, r6, lr}
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   de69a:	2500      	movs	r5, #0
  #error "*** PLATFORM_ID not supported by this library. PLATFORM should be Particle Core, Photon, Electron, Argon, Boron, Xenon and RedBear Duo ***"
#endif
// fast pin access
#define pinSet(_pin, _hilo) (_hilo ? pinHI(_pin) : pinLO(_pin))

Adafruit_NeoPixel::Adafruit_NeoPixel(uint16_t n, uint8_t p, uint8_t t) :
   de69c:	4604      	mov	r4, r0
   de69e:	4616      	mov	r6, r2
  begun(false), type(t), brightness(0), pixels(NULL), endTime(0)
   de6a0:	7183      	strb	r3, [r0, #6]
   de6a2:	7005      	strb	r5, [r0, #0]
   de6a4:	7205      	strb	r5, [r0, #8]
   de6a6:	60c5      	str	r5, [r0, #12]
   de6a8:	6105      	str	r5, [r0, #16]
{
  updateLength(n);
   de6aa:	f7ff ffb3 	bl	de614 <_ZN17Adafruit_NeoPixel12updateLengthEt>
  setPin(p);
   de6ae:	4620      	mov	r0, r4
   de6b0:	4631      	mov	r1, r6
   de6b2:	f7ff ffd9 	bl	de668 <_ZN17Adafruit_NeoPixel6setPinEh>
}
   de6b6:	4620      	mov	r0, r4
   de6b8:	bd70      	pop	{r4, r5, r6, pc}
	...

000de6bc <_ZN17Adafruit_NeoPixel4showEv>:
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
  if(!pixels) return;
   de6bc:	68c3      	ldr	r3, [r0, #12]
   de6be:	2b00      	cmp	r3, #0
   de6c0:	f000 818b 	beq.w	de9da <_ZN17Adafruit_NeoPixel4showEv+0x31e>
        pinMode(p, OUTPUT);
        digitalWrite(p, LOW);
    }
}

void Adafruit_NeoPixel::show(void) {
   de6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   de6c8:	7983      	ldrb	r3, [r0, #6]
   de6ca:	3b02      	subs	r3, #2
   de6cc:	b2db      	uxtb	r3, r3
   de6ce:	2b04      	cmp	r3, #4
   de6d0:	bf9c      	itt	ls
   de6d2:	4ac4      	ldrls	r2, [pc, #784]	; (de9e4 <_ZN17Adafruit_NeoPixel4showEv+0x328>)
   de6d4:	f852 4023 	ldrls.w	r4, [r2, r3, lsl #2]
   de6d8:	b087      	sub	sp, #28
   de6da:	4605      	mov	r5, r0
  // the function will simply hold off (if needed) on issuing the
  // subsequent round of data until the latch time has elapsed.  This
  // allows the mainline code to start generating the next frame of data
  // rather than stalling for the latch.
  uint32_t wait_time; // wait time in microseconds.
  switch(type) {
   de6dc:	bf88      	it	hi
   de6de:	2432      	movhi	r4, #50	; 0x32
    case WS2812B2_FAST:
    default: {   // default = 50us reset pulse
        wait_time = 50L;
      } break;
  }
  while((micros() - endTime) < wait_time);
   de6e0:	f7ff ff86 	bl	de5f0 <micros>
   de6e4:	692b      	ldr	r3, [r5, #16]
   de6e6:	1ac0      	subs	r0, r0, r3
   de6e8:	42a0      	cmp	r0, r4
   de6ea:	d3f9      	bcc.n	de6e0 <_ZN17Adafruit_NeoPixel4showEv+0x24>

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   de6ec:	4abe      	ldr	r2, [pc, #760]	; (de9e8 <_ZN17Adafruit_NeoPixel4showEv+0x32c>)
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de6ee:	88ab      	ldrh	r3, [r5, #4]

  NRF_PWM_Type* pwm = NULL;

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
   de6f0:	ca07      	ldmia	r2, {r0, r1, r2}
   de6f2:	ac06      	add	r4, sp, #24
   de6f4:	e904 0007 	stmdb	r4, {r0, r1, r2}
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de6f8:	9c03      	ldr	r4, [sp, #12]
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de6fa:	011b      	lsls	r3, r3, #4

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de6fc:	f8d4 2500 	ldr.w	r2, [r4, #1280]	; 0x500
  // The two additional bytes at the end are needed to reset the
  // sequence.
  //
  // If there is not enough memory, we will fall back to cycle counter
  // using DWT
  uint32_t  pattern_size   = numBytes*8*sizeof(uint16_t)+2*sizeof(uint16_t);
   de700:	3304      	adds	r3, #4
   de702:	9301      	str	r3, [sp, #4]
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de704:	b922      	cbnz	r2, de710 <_ZN17Adafruit_NeoPixel4showEv+0x54>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de706:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de70a:	2b00      	cmp	r3, #0
   de70c:	f2c0 8155 	blt.w	de9ba <_ZN17Adafruit_NeoPixel4showEv+0x2fe>
   de710:	9c04      	ldr	r4, [sp, #16]
   de712:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de716:	b923      	cbnz	r3, de722 <_ZN17Adafruit_NeoPixel4showEv+0x66>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de718:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de71c:	2b00      	cmp	r3, #0
   de71e:	f2c0 813c 	blt.w	de99a <_ZN17Adafruit_NeoPixel4showEv+0x2de>
   de722:	9c05      	ldr	r4, [sp, #20]
   de724:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de728:	b91b      	cbnz	r3, de732 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de72a:	f8d4 3560 	ldr.w	r3, [r4, #1376]	; 0x560

  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
   de72e:	2b00      	cmp	r3, #0
   de730:	db6e      	blt.n	de810 <_ZN17Adafruit_NeoPixel4showEv+0x154>
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de732:	4bae      	ldr	r3, [pc, #696]	; (de9ec <_ZN17Adafruit_NeoPixel4showEv+0x330>)
   de734:	79ea      	ldrb	r2, [r5, #7]
   de736:	681e      	ldr	r6, [r3, #0]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de738:	4cad      	ldr	r4, [pc, #692]	; (de9f0 <_ZN17Adafruit_NeoPixel4showEv+0x334>)
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de73a:	49ae      	ldr	r1, [pc, #696]	; (de9f4 <_ZN17Adafruit_NeoPixel4showEv+0x338>)
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de73c:	68e0      	ldr	r0, [r4, #12]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de73e:	0112      	lsls	r2, r2, #4
   de740:	18b3      	adds	r3, r6, r2
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de742:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de746:	785b      	ldrb	r3, [r3, #1]
   de748:	5cb7      	ldrb	r7, [r6, r2]
      CYCLES_X00_T0H = CYCLES_400_T0H;
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   de74a:	60e0      	str	r0, [r4, #12]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de74c:	680a      	ldr	r2, [r1, #0]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de74e:	f003 031f 	and.w	r3, r3, #31
   de752:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   de756:	2701      	movs	r7, #1
    }
#endif

    // Enable DWT in debug core
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   de758:	433a      	orrs	r2, r7
   de75a:	600a      	str	r2, [r1, #0]

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
   de75c:	460c      	mov	r4, r1
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de75e:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   de760:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   de764:	f8d4 a004 	ldr.w	sl, [r4, #4]
      // Disable the interrupts only in cases where you need high performance for
      // the LEDs and if you are not using the EasyDMA feature.
      __disable_irq();
    #endif

    uint32_t pinMask = 1UL << NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de768:	409f      	lsls	r7, r3

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   de76a:	4688      	mov	r8, r1
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de76c:	2800      	cmp	r0, #0
   de76e:	d044      	beq.n	de7fa <_ZN17Adafruit_NeoPixel4showEv+0x13e>
   de770:	46cc      	mov	ip, r9
   de772:	2200      	movs	r2, #0

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   de774:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;
   de778:	f81c eb01 	ldrb.w	lr, [ip], #1
   de77c:	2008      	movs	r0, #8

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de77e:	2680      	movs	r6, #128	; 0x80
          while(DWT->CYCCNT - cyc < CYCLES_X00);
   de780:	6863      	ldr	r3, [r4, #4]
   de782:	1a9b      	subs	r3, r3, r2
   de784:	2b46      	cmp	r3, #70	; 0x46
   de786:	d9fb      	bls.n	de780 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
          cyc  = DWT->CYCCNT;
   de788:	f8d8 2004 	ldr.w	r2, [r8, #4]

          NRF_GPIO->OUTSET |= pinMask;
   de78c:	f8d1 3508 	ldr.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   de790:	ea1e 0f06 	tst.w	lr, r6

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
          while(DWT->CYCCNT - cyc < CYCLES_X00);
          cyc  = DWT->CYCCNT;

          NRF_GPIO->OUTSET |= pinMask;
   de794:	ea43 0307 	orr.w	r3, r3, r7
   de798:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508

          if(pix & mask) {
   de79c:	d02f      	beq.n	de7fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
   de79e:	6863      	ldr	r3, [r4, #4]
   de7a0:	1a9b      	subs	r3, r3, r2
   de7a2:	2b28      	cmp	r3, #40	; 0x28
   de7a4:	d9fb      	bls.n	de79e <_ZN17Adafruit_NeoPixel4showEv+0xe2>
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de7a6:	f8d1 350c 	ldr.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de7aa:	3801      	subs	r0, #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de7ac:	ea43 0307 	orr.w	r3, r3, r7
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de7b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
          }

          NRF_GPIO->OUTCLR |= pinMask;
   de7b4:	f8c1 350c 	str.w	r3, [r1, #1292]	; 0x50c
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
        uint8_t pix = *p++;

        for(uint8_t mask = 0x80; mask; mask >>= 1) {
   de7b8:	d1e2      	bne.n	de780 <_ZN17Adafruit_NeoPixel4showEv+0xc4>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de7ba:	ebc9 030c 	rsb	r3, r9, ip
   de7be:	88a8      	ldrh	r0, [r5, #4]
   de7c0:	b29b      	uxth	r3, r3
   de7c2:	4298      	cmp	r0, r3
   de7c4:	d8d8      	bhi.n	de778 <_ZN17Adafruit_NeoPixel4showEv+0xbc>
   de7c6:	f44f 7330 	mov.w	r3, #704	; 0x2c0
   de7ca:	fb03 f000 	mul.w	r0, r3, r0
          }

          NRF_GPIO->OUTCLR |= pinMask;
        }
      }
      while(DWT->CYCCNT - cyc < CYCLES_X00);
   de7ce:	6863      	ldr	r3, [r4, #4]
   de7d0:	1a9b      	subs	r3, r3, r2
   de7d2:	2b46      	cmp	r3, #70	; 0x46
   de7d4:	d9fb      	bls.n	de7ce <_ZN17Adafruit_NeoPixel4showEv+0x112>


      // If total time longer than 25%, resend the whole data.
      // Since we are likely to be interrupted by SoftDevice
      if ( (DWT->CYCCNT - cycStart) < ( 8*numBytes*((CYCLES_X00*5)/4) ) ) {
   de7d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   de7da:	ebca 0a03 	rsb	sl, sl, r3
   de7de:	4582      	cmp	sl, r0
   de7e0:	f0c0 80d5 	bcc.w	de98e <_ZN17Adafruit_NeoPixel4showEv+0x2d2>
        break;
      }

      // re-send need 300us delay
      delayMicroseconds(300);
   de7e4:	f44f 7096 	mov.w	r0, #300	; 0x12c
   de7e8:	f7ff ff04 	bl	de5f4 <delayMicroseconds>
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de7ec:	88a8      	ldrh	r0, [r5, #4]
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;

    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;
   de7ee:	f8d5 900c 	ldr.w	r9, [r5, #12]

      uint32_t cycStart = DWT->CYCCNT;
   de7f2:	f8d4 a004 	ldr.w	sl, [r4, #4]
      uint32_t cyc = 0;

      for(uint16_t n=0; n<numBytes; n++) {
   de7f6:	2800      	cmp	r0, #0
   de7f8:	d1ba      	bne.n	de770 <_ZN17Adafruit_NeoPixel4showEv+0xb4>
    // Tries to re-send the frame if is interrupted by the SoftDevice.
    while(1) {
      uint8_t *p = pixels;

      uint32_t cycStart = DWT->CYCCNT;
      uint32_t cyc = 0;
   de7fa:	4602      	mov	r2, r0
   de7fc:	e7e7      	b.n	de7ce <_ZN17Adafruit_NeoPixel4showEv+0x112>
          NRF_GPIO->OUTSET |= pinMask;

          if(pix & mask) {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T1H);
          } else {
            while(DWT->CYCCNT - cyc < CYCLES_X00_T0H);
   de7fe:	6863      	ldr	r3, [r4, #4]
   de800:	1a9b      	subs	r3, r3, r2
   de802:	2b11      	cmp	r3, #17
   de804:	d8cf      	bhi.n	de7a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
   de806:	6863      	ldr	r3, [r4, #4]
   de808:	1a9b      	subs	r3, r3, r2
   de80a:	2b11      	cmp	r3, #17
   de80c:	d9f7      	bls.n	de7fe <_ZN17Adafruit_NeoPixel4showEv+0x142>
   de80e:	e7ca      	b.n	de7a6 <_ZN17Adafruit_NeoPixel4showEv+0xea>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de810:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de814:	2b00      	cmp	r3, #0
   de816:	da8c      	bge.n	de732 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de818:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de81c:	2b00      	cmp	r3, #0
   de81e:	da88      	bge.n	de732 <_ZN17Adafruit_NeoPixel4showEv+0x76>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de820:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de824:	2b00      	cmp	r3, #0
   de826:	da84      	bge.n	de732 <_ZN17Adafruit_NeoPixel4showEv+0x76>
  // only malloc if there is PWM device available
  if ( pwm != NULL ) {
    #ifdef ARDUINO_FEATHER52 // use thread-safe malloc
      pixels_pattern = (uint16_t *) rtos_malloc(pattern_size);
    #else
      pixels_pattern = (uint16_t *) malloc(pattern_size);
   de828:	9801      	ldr	r0, [sp, #4]
   de82a:	f000 fc75 	bl	df118 <malloc>
    #endif
  }

  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
   de82e:	2800      	cmp	r0, #0
   de830:	f43f af7f 	beq.w	de732 <_ZN17Adafruit_NeoPixel4showEv+0x76>
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de834:	88ab      	ldrh	r3, [r5, #4]
   de836:	2b00      	cmp	r3, #0
   de838:	f000 80d0 	beq.w	de9dc <_ZN17Adafruit_NeoPixel4showEv+0x320>
   de83c:	2700      	movs	r7, #0
   de83e:	463b      	mov	r3, r7
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   de840:	4e6d      	ldr	r6, [pc, #436]	; (de9f8 <_ZN17Adafruit_NeoPixel4showEv+0x33c>)
   de842:	496e      	ldr	r1, [pc, #440]	; (de9fc <_ZN17Adafruit_NeoPixel4showEv+0x340>)
   de844:	e000      	b.n	de848 <_ZN17Adafruit_NeoPixel4showEv+0x18c>
        }

        pos++;
   de846:	4613      	mov	r3, r2
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
      uint8_t pix = pixels[n];
   de848:	68ea      	ldr	r2, [r5, #12]
   de84a:	5dd2      	ldrb	r2, [r2, r7]
        if( !is800KHz ) {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H_400KHz : MAGIC_T0H_400KHz;
        }else
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
   de84c:	f103 0e01 	add.w	lr, r3, #1
   de850:	f012 0f80 	tst.w	r2, #128	; 0x80
   de854:	bf14      	ite	ne
   de856:	46b0      	movne	r8, r6
   de858:	4688      	moveq	r8, r1
   de85a:	fa1f fe8e 	uxth.w	lr, lr
   de85e:	f012 0f40 	tst.w	r2, #64	; 0x40
   de862:	bf14      	ite	ne
   de864:	46b1      	movne	r9, r6
   de866:	4689      	moveq	r9, r1
   de868:	f012 0f20 	tst.w	r2, #32
   de86c:	f820 8013 	strh.w	r8, [r0, r3, lsl #1]
   de870:	bf18      	it	ne
   de872:	46b2      	movne	sl, r6
   de874:	f820 901e 	strh.w	r9, [r0, lr, lsl #1]
   de878:	bf08      	it	eq
   de87a:	468a      	moveq	sl, r1
   de87c:	f103 0802 	add.w	r8, r3, #2
   de880:	f012 0f10 	tst.w	r2, #16
   de884:	f103 0e03 	add.w	lr, r3, #3
   de888:	bf14      	ite	ne
   de88a:	46b4      	movne	ip, r6
   de88c:	468c      	moveq	ip, r1
   de88e:	fa1f f888 	uxth.w	r8, r8
   de892:	f012 0f08 	tst.w	r2, #8
   de896:	fa1f fe8e 	uxth.w	lr, lr
   de89a:	f103 0904 	add.w	r9, r3, #4
   de89e:	fa1f f989 	uxth.w	r9, r9
   de8a2:	bf14      	ite	ne
   de8a4:	46b3      	movne	fp, r6
   de8a6:	468b      	moveq	fp, r1
   de8a8:	f012 0f04 	tst.w	r2, #4
   de8ac:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   de8b0:	f820 c01e 	strh.w	ip, [r0, lr, lsl #1]
   de8b4:	bf14      	ite	ne
   de8b6:	46b2      	movne	sl, r6
   de8b8:	468a      	moveq	sl, r1
   de8ba:	f103 0805 	add.w	r8, r3, #5
   de8be:	f012 0f02 	tst.w	r2, #2
   de8c2:	f103 0c06 	add.w	ip, r3, #6
   de8c6:	f103 0e07 	add.w	lr, r3, #7
   de8ca:	f820 b019 	strh.w	fp, [r0, r9, lsl #1]
   de8ce:	fa1f fe8e 	uxth.w	lr, lr
   de8d2:	bf14      	ite	ne
   de8d4:	46b1      	movne	r9, r6
   de8d6:	4689      	moveq	r9, r1
   de8d8:	fa1f f888 	uxth.w	r8, r8
   de8dc:	f012 0f01 	tst.w	r2, #1
   de8e0:	fa1f fc8c 	uxth.w	ip, ip
   de8e4:	bf14      	ite	ne
   de8e6:	4632      	movne	r2, r6
   de8e8:	460a      	moveq	r2, r1
   de8ea:	f820 a018 	strh.w	sl, [r0, r8, lsl #1]
   de8ee:	f820 901c 	strh.w	r9, [r0, ip, lsl #1]
   de8f2:	f820 201e 	strh.w	r2, [r0, lr, lsl #1]
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de8f6:	3701      	adds	r7, #1
   de8f8:	f8b5 e004 	ldrh.w	lr, [r5, #4]
   de8fc:	b2bf      	uxth	r7, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   de8fe:	f103 0208 	add.w	r2, r3, #8
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de902:	45be      	cmp	lr, r7
        #endif
        {
          pixels_pattern[pos] = (pix & mask) ? MAGIC_T1H : MAGIC_T0H;
        }

        pos++;
   de904:	b292      	uxth	r2, r2
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de906:	d89e      	bhi.n	de846 <_ZN17Adafruit_NeoPixel4showEv+0x18a>
   de908:	f103 0209 	add.w	r2, r3, #9
   de90c:	330a      	adds	r3, #10
   de90e:	b292      	uxth	r2, r2
   de910:	b29b      	uxth	r3, r3
   de912:	0052      	lsls	r2, r2, #1
   de914:	005b      	lsls	r3, r3, #1

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   de916:	9901      	ldr	r1, [sp, #4]
        pos++;
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   de918:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   de91c:	5286      	strh	r6, [r0, r2]

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   de91e:	0849      	lsrs	r1, r1, #1
      }
    }

    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
   de920:	52c6      	strh	r6, [r0, r3]

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   de922:	2200      	movs	r2, #0
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   de924:	2314      	movs	r3, #20
    // Zero padding to indicate the end of que sequence
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end
    pixels_pattern[++pos] = 0 | (0x8000); // Seq end

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);
   de926:	f8c4 2504 	str.w	r2, [r4, #1284]	; 0x504
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de92a:	4e30      	ldr	r6, [pc, #192]	; (de9ec <_ZN17Adafruit_NeoPixel4showEv+0x330>)

    // Set the wave mode to count UP
    pwm->MODE = (PWM_MODE_UPDOWN_Up << PWM_MODE_UPDOWN_Pos);

    // Set the PWM to use the 16MHz clock
    pwm->PRESCALER = (PWM_PRESCALER_PRESCALER_DIV_1 << PWM_PRESCALER_PRESCALER_Pos);
   de92c:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    if( !is800KHz ) {
      pwm->COUNTERTOP = (CTOPVAL_400KHz << PWM_COUNTERTOP_COUNTERTOP_Pos);
    }else
#endif
    {
      pwm->COUNTERTOP = (CTOPVAL << PWM_COUNTERTOP_COUNTERTOP_Pos);
   de930:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    }

    // Disable loops, we want the sequence to repeat only once
    pwm->LOOP = (PWM_LOOP_CNT_Disabled << PWM_LOOP_CNT_Pos);
   de934:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514

    // On the "Common" setting the PWM uses the same pattern for the
    // for supported sequences. The pattern is stored on half-word
    // of 16bits
    pwm->DECODER = (PWM_DECODER_LOAD_Common << PWM_DECODER_LOAD_Pos) |
                   (PWM_DECODER_MODE_RefreshCount << PWM_DECODER_MODE_Pos);
   de938:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510

    // Pointer to the memory storing the patter
    pwm->SEQ[0].PTR = (uint32_t)(pixels_pattern) << PWM_SEQ_PTR_PTR_Pos;
   de93c:	f8c4 0520 	str.w	r0, [r4, #1312]	; 0x520

    // Calculation of the number of steps loaded from memory.
    pwm->SEQ[0].CNT = (pattern_size/sizeof(uint16_t)) << PWM_SEQ_CNT_CNT_Pos;
   de940:	f8c4 1524 	str.w	r1, [r4, #1316]	; 0x524

    // The following settings are ignored with the current config.
    pwm->SEQ[0].REFRESH  = 0;
   de944:	f8c4 2528 	str.w	r2, [r4, #1320]	; 0x528
    pwm->SEQ[0].ENDDELAY = 0;
   de948:	f8c4 252c 	str.w	r2, [r4, #1324]	; 0x52c
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de94c:	79eb      	ldrb	r3, [r5, #7]
   de94e:	6831      	ldr	r1, [r6, #0]
   de950:	011b      	lsls	r3, r3, #4
   de952:	18ce      	adds	r6, r1, r3
   de954:	5cc9      	ldrb	r1, [r1, r3]
   de956:	7873      	ldrb	r3, [r6, #1]
   de958:	f003 031f 	and.w	r3, r3, #31
   de95c:	ea43 1341 	orr.w	r3, r3, r1, lsl #5

    // Enable the PWM
    pwm->ENABLE = 1;
   de960:	2101      	movs	r1, #1
    // and block the execution thread until the event flag is set by
    // the peripheral.
//    pwm->INTEN |= (PWM_INTEN_SEQEND0_Enabled<<PWM_INTEN_SEQEND0_Pos);

    // PSEL must be configured before enabling PWM
    pwm->PSEL.OUT[0] = NRF_GPIO_PIN_MAP(PIN_MAP2[pin].gpio_port, PIN_MAP2[pin].gpio_pin);
   de962:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560

    // Enable the PWM
    pwm->ENABLE = 1;
   de966:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500

    // After all of this and many hours of reading the documentation
    // we are ready to start the sequence...
    pwm->EVENTS_SEQEND[0]  = 0;
   de96a:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
    pwm->TASKS_SEQSTART[0] = 1;
   de96e:	60a1      	str	r1, [r4, #8]

    // But we have to wait for the flag to be set.
    while(!pwm->EVENTS_SEQEND[0])
   de970:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   de974:	2b00      	cmp	r3, #0
   de976:	d0fb      	beq.n	de970 <_ZN17Adafruit_NeoPixel4showEv+0x2b4>
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   de978:	2300      	movs	r3, #0
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   de97a:	f04f 32ff 	mov.w	r2, #4294967295
      yield();
      #endif
    }

    // Before leave we clear the flag for the event.
    pwm->EVENTS_SEQEND[0] = 0;
   de97e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110

    // We need to disable the device and disconnect
    // all the outputs before leave or the device will not
    // be selected on the next call.
    // TODO: Check if disabling the device causes performance issues.
    pwm->ENABLE = 0;
   de982:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500

    pwm->PSEL.OUT[0] = 0xFFFFFFFFUL;
   de986:	f8c4 2560 	str.w	r2, [r4, #1376]	; 0x560

    #ifdef ARDUINO_FEATHER52  // use thread-safe free
      rtos_free(pixels_pattern);
    #else
      free(pixels_pattern);
   de98a:	f000 fbcd 	bl	df128 <free>
  }
// END of NRF52 implementation


#endif
  endTime = micros(); // Save EOD time for latch on next call
   de98e:	f7ff fe2f 	bl	de5f0 <micros>
   de992:	6128      	str	r0, [r5, #16]
}
   de994:	b007      	add	sp, #28
   de996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de99a:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de99e:	2b00      	cmp	r3, #0
   de9a0:	f6bf aebf 	bge.w	de722 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9a4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9a8:	2b00      	cmp	r3, #0
   de9aa:	f6bf aeba 	bge.w	de722 <_ZN17Adafruit_NeoPixel4showEv+0x66>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de9ae:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9b2:	2b00      	cmp	r3, #0
   de9b4:	f6bf aeb5 	bge.w	de722 <_ZN17Adafruit_NeoPixel4showEv+0x66>
   de9b8:	e736      	b.n	de828 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9ba:	f8d4 3564 	ldr.w	r3, [r4, #1380]	; 0x564
  // Try to find a free PWM device, which is not enabled
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9be:	2b00      	cmp	r3, #0
   de9c0:	f6bf aea6 	bge.w	de710 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9c4:	f8d4 3568 	ldr.w	r3, [r4, #1384]	; 0x568
  // and has no connected pins
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9c8:	2b00      	cmp	r3, #0
   de9ca:	f6bf aea1 	bge.w	de710 <_ZN17Adafruit_NeoPixel4showEv+0x54>
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[3] & PWM_PSEL_OUT_CONNECT_Msk)
   de9ce:	f8d4 356c 	ldr.w	r3, [r4, #1388]	; 0x56c
  NRF_PWM_Type* PWM[3] = {NRF_PWM0, NRF_PWM1, NRF_PWM2};
  for(int device = 0; device<3; device++) {
    if( (PWM[device]->ENABLE == 0)                            &&
        (PWM[device]->PSEL.OUT[0] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[1] & PWM_PSEL_OUT_CONNECT_Msk) &&
        (PWM[device]->PSEL.OUT[2] & PWM_PSEL_OUT_CONNECT_Msk) &&
   de9d2:	2b00      	cmp	r3, #0
   de9d4:	f6bf ae9c 	bge.w	de710 <_ZN17Adafruit_NeoPixel4showEv+0x54>
   de9d8:	e726      	b.n	de828 <_ZN17Adafruit_NeoPixel4showEv+0x16c>
   de9da:	4770      	bx	lr
  // Use the identified device to choose the implementation
  // If a PWM device is available use DMA
  if( (pixels_pattern != NULL) && (pwm != NULL) ) {
    uint16_t pos = 0; // bit position

    for(uint16_t n=0; n<numBytes; n++) {
   de9dc:	2304      	movs	r3, #4
   de9de:	2202      	movs	r2, #2
   de9e0:	e799      	b.n	de916 <_ZN17Adafruit_NeoPixel4showEv+0x25a>
   de9e2:	bf00      	nop
   de9e4:	000e4538 	.word	0x000e4538
   de9e8:	000e452c 	.word	0x000e452c
   de9ec:	2003e36c 	.word	0x2003e36c
   de9f0:	e000edf0 	.word	0xe000edf0
   de9f4:	e0001000 	.word	0xe0001000
   de9f8:	ffff800d 	.word	0xffff800d
   de9fc:	ffff8006 	.word	0xffff8006

000dea00 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh>:
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   dea00:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(n < numLEDs) {
   dea02:	8844      	ldrh	r4, [r0, #2]
  endTime = micros(); // Save EOD time for latch on next call
}

// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
   dea04:	f89d 5014 	ldrb.w	r5, [sp, #20]
  if(n < numLEDs) {
   dea08:	428c      	cmp	r4, r1
   dea0a:	d927      	bls.n	dea5c <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x5c>
    if(brightness) { // See notes in setBrightness()
   dea0c:	7a04      	ldrb	r4, [r0, #8]
   dea0e:	b144      	cbz	r4, dea22 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x22>
      r = (r * brightness) >> 8;
   dea10:	fb12 f204 	smulbb	r2, r2, r4
      g = (g * brightness) >> 8;
   dea14:	fb14 f303 	smulbb	r3, r4, r3
      b = (b * brightness) >> 8;
   dea18:	fb14 f405 	smulbb	r4, r4, r5
// Set pixel color from separate R,G,B components:
void Adafruit_NeoPixel::setPixelColor(
  uint16_t n, uint8_t r, uint8_t g, uint8_t b) {
  if(n < numLEDs) {
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
   dea1c:	0a12      	lsrs	r2, r2, #8
      g = (g * brightness) >> 8;
   dea1e:	0a1b      	lsrs	r3, r3, #8
      b = (b * brightness) >> 8;
   dea20:	0a25      	lsrs	r5, r4, #8
    }
    uint8_t *p = &pixels[n * 3];
    switch(type) {
   dea22:	7987      	ldrb	r7, [r0, #6]
    if(brightness) { // See notes in setBrightness()
      r = (r * brightness) >> 8;
      g = (g * brightness) >> 8;
      b = (b * brightness) >> 8;
    }
    uint8_t *p = &pixels[n * 3];
   dea24:	68c6      	ldr	r6, [r0, #12]
   dea26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   dea2a:	2f08      	cmp	r7, #8
   dea2c:	eb06 0401 	add.w	r4, r6, r1
   dea30:	d811      	bhi.n	dea56 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
   dea32:	2001      	movs	r0, #1
   dea34:	40b8      	lsls	r0, r7
   dea36:	f410 7fd2 	tst.w	r0, #420	; 0x1a4
   dea3a:	d108      	bne.n	dea4e <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x4e>
   dea3c:	06c0      	lsls	r0, r0, #27
   dea3e:	d50a      	bpl.n	dea56 <_ZN17Adafruit_NeoPixel13setPixelColorEthhh+0x56>
          *p++ = g;
          *p++ = r;
          *p = b;
        } break;
      case TM1829: { // TM1829 is special RBG order
          if(r == 255) r = 254; // 255 on RED channel causes display to be in a special mode.
   dea40:	2aff      	cmp	r2, #255	; 0xff
   dea42:	bf08      	it	eq
   dea44:	22fe      	moveq	r2, #254	; 0xfe
          *p++ = r;
   dea46:	5472      	strb	r2, [r6, r1]
          *p++ = b;
   dea48:	7065      	strb	r5, [r4, #1]
          *p = g;
   dea4a:	70a3      	strb	r3, [r4, #2]
   dea4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch(type) {
      case WS2812B: // WS2812, WS2812B & WS2813 is GRB order.
      case WS2812B_FAST:
      case WS2812B2:
      case WS2812B2_FAST: {
          *p++ = g;
   dea4e:	5473      	strb	r3, [r6, r1]
          *p++ = r;
   dea50:	7062      	strb	r2, [r4, #1]
          *p = b;
   dea52:	70a5      	strb	r5, [r4, #2]
   dea54:	bdf0      	pop	{r4, r5, r6, r7, pc}
          *p = g;
        } break;
      case WS2811: // WS2811 is RGB order
      case TM1803: // TM1803 is RGB order
      default: {   // default is RGB order
          *p++ = r;
   dea56:	5472      	strb	r2, [r6, r1]
          *p++ = g;
   dea58:	7063      	strb	r3, [r4, #1]
          *p = b;
   dea5a:	70a5      	strb	r5, [r4, #2]
   dea5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000dea5e <_ZN17Adafruit_NeoPixel5clearEv>:
uint8_t Adafruit_NeoPixel::getBrightness(void) const {
  return brightness - 1;
}

void Adafruit_NeoPixel::clear(void) {
  memset(pixels, 0, numBytes);
   dea5e:	8882      	ldrh	r2, [r0, #4]
   dea60:	68c0      	ldr	r0, [r0, #12]
   dea62:	2100      	movs	r1, #0
   dea64:	f003 bb6a 	b.w	e213c <memset>

000dea68 <_GLOBAL__sub_I_PIN_MAP2>:
}
   dea68:	b508      	push	{r3, lr}
   dea6a:	f000 f817 	bl	dea9c <HAL_Pin_Map>
  #define pinHI(_pin) (PIN_MAP2[_pin].gpio_peripheral->BSRRL = PIN_MAP2[_pin].gpio_pin)
#elif (PLATFORM_ID == 12) || (PLATFORM_ID == 13) || (PLATFORM_ID == 14) // Argon (12), Boron (13), Xenon (14)
  #include "nrf.h"
  #include "nrf_gpio.h"
  #include "pinmap_impl.h"
  NRF5x_Pin_Info* PIN_MAP2 = HAL_Pin_Map();
   dea6e:	f000 f815 	bl	dea9c <HAL_Pin_Map>
   dea72:	4b01      	ldr	r3, [pc, #4]	; (dea78 <_GLOBAL__sub_I_PIN_MAP2+0x10>)
   dea74:	6018      	str	r0, [r3, #0]
   dea76:	bd08      	pop	{r3, pc}
   dea78:	2003e36c 	.word	0x2003e36c

000dea7c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   dea7c:	b508      	push	{r3, lr}
   dea7e:	4b02      	ldr	r3, [pc, #8]	; (dea88 <netdb_freeaddrinfo+0xc>)
   dea80:	681b      	ldr	r3, [r3, #0]
   dea82:	689b      	ldr	r3, [r3, #8]
   dea84:	9301      	str	r3, [sp, #4]
   dea86:	bd08      	pop	{r3, pc}
   dea88:	00030268 	.word	0x00030268

000dea8c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   dea8c:	b508      	push	{r3, lr}
   dea8e:	4b02      	ldr	r3, [pc, #8]	; (dea98 <netdb_getaddrinfo+0xc>)
   dea90:	681b      	ldr	r3, [r3, #0]
   dea92:	68db      	ldr	r3, [r3, #12]
   dea94:	9301      	str	r3, [sp, #4]
   dea96:	bd08      	pop	{r3, pc}
   dea98:	00030268 	.word	0x00030268

000dea9c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   dea9c:	b508      	push	{r3, lr}
   dea9e:	4b02      	ldr	r3, [pc, #8]	; (deaa8 <HAL_Pin_Map+0xc>)
   deaa0:	681b      	ldr	r3, [r3, #0]
   deaa2:	681b      	ldr	r3, [r3, #0]
   deaa4:	9301      	str	r3, [sp, #4]
   deaa6:	bd08      	pop	{r3, pc}
   deaa8:	0003022c 	.word	0x0003022c

000deaac <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   deaac:	b508      	push	{r3, lr}
   deaae:	4b02      	ldr	r3, [pc, #8]	; (deab8 <HAL_Validate_Pin_Function+0xc>)
   deab0:	681b      	ldr	r3, [r3, #0]
   deab2:	685b      	ldr	r3, [r3, #4]
   deab4:	9301      	str	r3, [sp, #4]
   deab6:	bd08      	pop	{r3, pc}
   deab8:	0003022c 	.word	0x0003022c

000deabc <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   deabc:	b508      	push	{r3, lr}
   deabe:	4b02      	ldr	r3, [pc, #8]	; (deac8 <HAL_Pin_Mode+0xc>)
   deac0:	681b      	ldr	r3, [r3, #0]
   deac2:	689b      	ldr	r3, [r3, #8]
   deac4:	9301      	str	r3, [sp, #4]
   deac6:	bd08      	pop	{r3, pc}
   deac8:	0003022c 	.word	0x0003022c

000deacc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   deacc:	b508      	push	{r3, lr}
   deace:	4b02      	ldr	r3, [pc, #8]	; (dead8 <HAL_Get_Pin_Mode+0xc>)
   dead0:	681b      	ldr	r3, [r3, #0]
   dead2:	68db      	ldr	r3, [r3, #12]
   dead4:	9301      	str	r3, [sp, #4]
   dead6:	bd08      	pop	{r3, pc}
   dead8:	0003022c 	.word	0x0003022c

000deadc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   deadc:	b508      	push	{r3, lr}
   deade:	4b02      	ldr	r3, [pc, #8]	; (deae8 <HAL_GPIO_Write+0xc>)
   deae0:	681b      	ldr	r3, [r3, #0]
   deae2:	691b      	ldr	r3, [r3, #16]
   deae4:	9301      	str	r3, [sp, #4]
   deae6:	bd08      	pop	{r3, pc}
   deae8:	0003022c 	.word	0x0003022c

000deaec <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   deaec:	b508      	push	{r3, lr}
   deaee:	4b02      	ldr	r3, [pc, #8]	; (deaf8 <HAL_GPIO_Read+0xc>)
   deaf0:	681b      	ldr	r3, [r3, #0]
   deaf2:	695b      	ldr	r3, [r3, #20]
   deaf4:	9301      	str	r3, [sp, #4]
   deaf6:	bd08      	pop	{r3, pc}
   deaf8:	0003022c 	.word	0x0003022c

000deafc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   deafc:	b508      	push	{r3, lr}
   deafe:	4b02      	ldr	r3, [pc, #8]	; (deb08 <HAL_ADC_Read+0xc>)
   deb00:	681b      	ldr	r3, [r3, #0]
   deb02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   deb04:	9301      	str	r3, [sp, #4]
   deb06:	bd08      	pop	{r3, pc}
   deb08:	0003022c 	.word	0x0003022c

000deb0c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   deb0c:	b508      	push	{r3, lr}
   deb0e:	4b02      	ldr	r3, [pc, #8]	; (deb18 <HAL_SPI_Init+0xc>)
   deb10:	681b      	ldr	r3, [r3, #0]
   deb12:	69db      	ldr	r3, [r3, #28]
   deb14:	9301      	str	r3, [sp, #4]
   deb16:	bd08      	pop	{r3, pc}
   deb18:	00030230 	.word	0x00030230

000deb1c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   deb1c:	b508      	push	{r3, lr}
   deb1e:	4b02      	ldr	r3, [pc, #8]	; (deb28 <HAL_SPI_Is_Enabled+0xc>)
   deb20:	681b      	ldr	r3, [r3, #0]
   deb22:	6a1b      	ldr	r3, [r3, #32]
   deb24:	9301      	str	r3, [sp, #4]
   deb26:	bd08      	pop	{r3, pc}
   deb28:	00030230 	.word	0x00030230

000deb2c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   deb2c:	b508      	push	{r3, lr}
   deb2e:	4b02      	ldr	r3, [pc, #8]	; (deb38 <if_name_to_index+0xc>)
   deb30:	681b      	ldr	r3, [r3, #0]
   deb32:	691b      	ldr	r3, [r3, #16]
   deb34:	9301      	str	r3, [sp, #4]
   deb36:	bd08      	pop	{r3, pc}
   deb38:	0003026c 	.word	0x0003026c

000deb3c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   deb3c:	b508      	push	{r3, lr}
   deb3e:	4b02      	ldr	r3, [pc, #8]	; (deb48 <if_index_to_name+0xc>)
   deb40:	681b      	ldr	r3, [r3, #0]
   deb42:	695b      	ldr	r3, [r3, #20]
   deb44:	9301      	str	r3, [sp, #4]
   deb46:	bd08      	pop	{r3, pc}
   deb48:	0003026c 	.word	0x0003026c

000deb4c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   deb4c:	b508      	push	{r3, lr}
   deb4e:	4b02      	ldr	r3, [pc, #8]	; (deb58 <if_get_by_index+0xc>)
   deb50:	681b      	ldr	r3, [r3, #0]
   deb52:	699b      	ldr	r3, [r3, #24]
   deb54:	9301      	str	r3, [sp, #4]
   deb56:	bd08      	pop	{r3, pc}
   deb58:	0003026c 	.word	0x0003026c

000deb5c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   deb5c:	b508      	push	{r3, lr}
   deb5e:	4b02      	ldr	r3, [pc, #8]	; (deb68 <if_get_addrs+0xc>)
   deb60:	681b      	ldr	r3, [r3, #0]
   deb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   deb64:	9301      	str	r3, [sp, #4]
   deb66:	bd08      	pop	{r3, pc}
   deb68:	0003026c 	.word	0x0003026c

000deb6c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   deb6c:	b508      	push	{r3, lr}
   deb6e:	4b02      	ldr	r3, [pc, #8]	; (deb78 <if_free_if_addrs+0xc>)
   deb70:	681b      	ldr	r3, [r3, #0]
   deb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   deb74:	9301      	str	r3, [sp, #4]
   deb76:	bd08      	pop	{r3, pc}
   deb78:	0003026c 	.word	0x0003026c

000deb7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   deb7c:	b508      	push	{r3, lr}
   deb7e:	4b02      	ldr	r3, [pc, #8]	; (deb88 <HAL_RNG_GetRandomNumber+0xc>)
   deb80:	681b      	ldr	r3, [r3, #0]
   deb82:	685b      	ldr	r3, [r3, #4]
   deb84:	9301      	str	r3, [sp, #4]
   deb86:	bd08      	pop	{r3, pc}
   deb88:	00030218 	.word	0x00030218

000deb8c <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   deb8c:	b508      	push	{r3, lr}
   deb8e:	4b02      	ldr	r3, [pc, #8]	; (deb98 <HAL_Delay_Milliseconds+0xc>)
   deb90:	681b      	ldr	r3, [r3, #0]
   deb92:	689b      	ldr	r3, [r3, #8]
   deb94:	9301      	str	r3, [sp, #4]
   deb96:	bd08      	pop	{r3, pc}
   deb98:	00030218 	.word	0x00030218

000deb9c <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   deb9c:	b508      	push	{r3, lr}
   deb9e:	4b02      	ldr	r3, [pc, #8]	; (deba8 <HAL_Delay_Microseconds+0xc>)
   deba0:	681b      	ldr	r3, [r3, #0]
   deba2:	68db      	ldr	r3, [r3, #12]
   deba4:	9301      	str	r3, [sp, #4]
   deba6:	bd08      	pop	{r3, pc}
   deba8:	00030218 	.word	0x00030218

000debac <HAL_Timer_Get_Micro_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
   debac:	b508      	push	{r3, lr}
   debae:	4b02      	ldr	r3, [pc, #8]	; (debb8 <HAL_Timer_Get_Micro_Seconds+0xc>)
   debb0:	681b      	ldr	r3, [r3, #0]
   debb2:	691b      	ldr	r3, [r3, #16]
   debb4:	9301      	str	r3, [sp, #4]
   debb6:	bd08      	pop	{r3, pc}
   debb8:	00030218 	.word	0x00030218

000debbc <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   debbc:	b508      	push	{r3, lr}
   debbe:	4b02      	ldr	r3, [pc, #8]	; (debc8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   debc0:	681b      	ldr	r3, [r3, #0]
   debc2:	695b      	ldr	r3, [r3, #20]
   debc4:	9301      	str	r3, [sp, #4]
   debc6:	bd08      	pop	{r3, pc}
   debc8:	00030218 	.word	0x00030218

000debcc <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   debcc:	b508      	push	{r3, lr}
   debce:	4b02      	ldr	r3, [pc, #8]	; (debd8 <HAL_RTC_Get_UnixTime+0xc>)
   debd0:	681b      	ldr	r3, [r3, #0]
   debd2:	69db      	ldr	r3, [r3, #28]
   debd4:	9301      	str	r3, [sp, #4]
   debd6:	bd08      	pop	{r3, pc}
   debd8:	00030218 	.word	0x00030218

000debdc <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   debdc:	b508      	push	{r3, lr}
   debde:	4b02      	ldr	r3, [pc, #8]	; (debe8 <HAL_EEPROM_Init+0xc>)
   debe0:	681b      	ldr	r3, [r3, #0]
   debe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   debe4:	9301      	str	r3, [sp, #4]
   debe6:	bd08      	pop	{r3, pc}
   debe8:	00030218 	.word	0x00030218

000debec <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
   debec:	b508      	push	{r3, lr}
   debee:	4b02      	ldr	r3, [pc, #8]	; (debf8 <HAL_EEPROM_Read+0xc>)
   debf0:	681b      	ldr	r3, [r3, #0]
   debf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   debf4:	9301      	str	r3, [sp, #4]
   debf6:	bd08      	pop	{r3, pc}
   debf8:	00030218 	.word	0x00030218

000debfc <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   debfc:	b508      	push	{r3, lr}
   debfe:	4b02      	ldr	r3, [pc, #8]	; (dec08 <HAL_EEPROM_Write+0xc>)
   dec00:	681b      	ldr	r3, [r3, #0]
   dec02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dec04:	9301      	str	r3, [sp, #4]
   dec06:	bd08      	pop	{r3, pc}
   dec08:	00030218 	.word	0x00030218

000dec0c <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   dec0c:	b508      	push	{r3, lr}
   dec0e:	4b02      	ldr	r3, [pc, #8]	; (dec18 <HAL_RTC_Time_Is_Valid+0xc>)
   dec10:	681b      	ldr	r3, [r3, #0]
   dec12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   dec14:	9301      	str	r3, [sp, #4]
   dec16:	bd08      	pop	{r3, pc}
   dec18:	00030218 	.word	0x00030218

000dec1c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   dec1c:	b508      	push	{r3, lr}
   dec1e:	4b02      	ldr	r3, [pc, #8]	; (dec28 <os_thread_create+0xc>)
   dec20:	681b      	ldr	r3, [r3, #0]
   dec22:	685b      	ldr	r3, [r3, #4]
   dec24:	9301      	str	r3, [sp, #4]
   dec26:	bd08      	pop	{r3, pc}
   dec28:	00030248 	.word	0x00030248

000dec2c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   dec2c:	b508      	push	{r3, lr}
   dec2e:	4b02      	ldr	r3, [pc, #8]	; (dec38 <os_thread_is_current+0xc>)
   dec30:	681b      	ldr	r3, [r3, #0]
   dec32:	689b      	ldr	r3, [r3, #8]
   dec34:	9301      	str	r3, [sp, #4]
   dec36:	bd08      	pop	{r3, pc}
   dec38:	00030248 	.word	0x00030248

000dec3c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   dec3c:	b508      	push	{r3, lr}
   dec3e:	4b02      	ldr	r3, [pc, #8]	; (dec48 <os_thread_join+0xc>)
   dec40:	681b      	ldr	r3, [r3, #0]
   dec42:	691b      	ldr	r3, [r3, #16]
   dec44:	9301      	str	r3, [sp, #4]
   dec46:	bd08      	pop	{r3, pc}
   dec48:	00030248 	.word	0x00030248

000dec4c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   dec4c:	b508      	push	{r3, lr}
   dec4e:	4b02      	ldr	r3, [pc, #8]	; (dec58 <os_thread_cleanup+0xc>)
   dec50:	681b      	ldr	r3, [r3, #0]
   dec52:	695b      	ldr	r3, [r3, #20]
   dec54:	9301      	str	r3, [sp, #4]
   dec56:	bd08      	pop	{r3, pc}
   dec58:	00030248 	.word	0x00030248

000dec5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   dec5c:	b508      	push	{r3, lr}
   dec5e:	4b02      	ldr	r3, [pc, #8]	; (dec68 <os_mutex_recursive_create+0xc>)
   dec60:	681b      	ldr	r3, [r3, #0]
   dec62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   dec64:	9301      	str	r3, [sp, #4]
   dec66:	bd08      	pop	{r3, pc}
   dec68:	00030248 	.word	0x00030248

000dec6c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   dec6c:	b508      	push	{r3, lr}
   dec6e:	4b02      	ldr	r3, [pc, #8]	; (dec78 <os_mutex_recursive_destroy+0xc>)
   dec70:	681b      	ldr	r3, [r3, #0]
   dec72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   dec74:	9301      	str	r3, [sp, #4]
   dec76:	bd08      	pop	{r3, pc}
   dec78:	00030248 	.word	0x00030248

000dec7c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   dec7c:	b508      	push	{r3, lr}
   dec7e:	4b02      	ldr	r3, [pc, #8]	; (dec88 <os_mutex_recursive_lock+0xc>)
   dec80:	681b      	ldr	r3, [r3, #0]
   dec82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   dec84:	9301      	str	r3, [sp, #4]
   dec86:	bd08      	pop	{r3, pc}
   dec88:	00030248 	.word	0x00030248

000dec8c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   dec8c:	b508      	push	{r3, lr}
   dec8e:	4b02      	ldr	r3, [pc, #8]	; (dec98 <os_mutex_recursive_unlock+0xc>)
   dec90:	681b      	ldr	r3, [r3, #0]
   dec92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   dec94:	9301      	str	r3, [sp, #4]
   dec96:	bd08      	pop	{r3, pc}
   dec98:	00030248 	.word	0x00030248

000dec9c <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   dec9c:	b508      	push	{r3, lr}
   dec9e:	4b02      	ldr	r3, [pc, #8]	; (deca8 <os_thread_exit+0xc>)
   deca0:	681b      	ldr	r3, [r3, #0]
   deca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   deca4:	9301      	str	r3, [sp, #4]
   deca6:	bd08      	pop	{r3, pc}
   deca8:	00030248 	.word	0x00030248

000decac <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   decac:	b508      	push	{r3, lr}
   decae:	4b02      	ldr	r3, [pc, #8]	; (decb8 <inet_inet_ntop+0xc>)
   decb0:	681b      	ldr	r3, [r3, #0]
   decb2:	695b      	ldr	r3, [r3, #20]
   decb4:	9301      	str	r3, [sp, #4]
   decb6:	bd08      	pop	{r3, pc}
   decb8:	00030264 	.word	0x00030264

000decbc <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   decbc:	b508      	push	{r3, lr}
   decbe:	4b02      	ldr	r3, [pc, #8]	; (decc8 <inet_inet_pton+0xc>)
   decc0:	681b      	ldr	r3, [r3, #0]
   decc2:	699b      	ldr	r3, [r3, #24]
   decc4:	9301      	str	r3, [sp, #4]
   decc6:	bd08      	pop	{r3, pc}
   decc8:	00030264 	.word	0x00030264

000deccc <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   deccc:	b508      	push	{r3, lr}
   decce:	4b02      	ldr	r3, [pc, #8]	; (decd8 <inet_htonl+0xc>)
   decd0:	681b      	ldr	r3, [r3, #0]
   decd2:	6a1b      	ldr	r3, [r3, #32]
   decd4:	9301      	str	r3, [sp, #4]
   decd6:	bd08      	pop	{r3, pc}
   decd8:	00030264 	.word	0x00030264

000decdc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   decdc:	b508      	push	{r3, lr}
   decde:	4b02      	ldr	r3, [pc, #8]	; (dece8 <inet_ntohs+0xc>)
   dece0:	681b      	ldr	r3, [r3, #0]
   dece2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   dece4:	9301      	str	r3, [sp, #4]
   dece6:	bd08      	pop	{r3, pc}
   dece8:	00030264 	.word	0x00030264

000decec <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   decec:	b508      	push	{r3, lr}
   decee:	4b02      	ldr	r3, [pc, #8]	; (decf8 <inet_htons+0xc>)
   decf0:	681b      	ldr	r3, [r3, #0]
   decf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   decf4:	9301      	str	r3, [sp, #4]
   decf6:	bd08      	pop	{r3, pc}
   decf8:	00030264 	.word	0x00030264

000decfc <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   decfc:	b508      	push	{r3, lr}
   decfe:	4b02      	ldr	r3, [pc, #8]	; (ded08 <HAL_USART_Init+0xc>)
   ded00:	681b      	ldr	r3, [r3, #0]
   ded02:	681b      	ldr	r3, [r3, #0]
   ded04:	9301      	str	r3, [sp, #4]
   ded06:	bd08      	pop	{r3, pc}
   ded08:	0003023c 	.word	0x0003023c

000ded0c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   ded0c:	b508      	push	{r3, lr}
   ded0e:	4b02      	ldr	r3, [pc, #8]	; (ded18 <HAL_USART_Write_Data+0xc>)
   ded10:	681b      	ldr	r3, [r3, #0]
   ded12:	68db      	ldr	r3, [r3, #12]
   ded14:	9301      	str	r3, [sp, #4]
   ded16:	bd08      	pop	{r3, pc}
   ded18:	0003023c 	.word	0x0003023c

000ded1c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   ded1c:	b508      	push	{r3, lr}
   ded1e:	4b02      	ldr	r3, [pc, #8]	; (ded28 <HAL_USART_Available_Data+0xc>)
   ded20:	681b      	ldr	r3, [r3, #0]
   ded22:	691b      	ldr	r3, [r3, #16]
   ded24:	9301      	str	r3, [sp, #4]
   ded26:	bd08      	pop	{r3, pc}
   ded28:	0003023c 	.word	0x0003023c

000ded2c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   ded2c:	b508      	push	{r3, lr}
   ded2e:	4b02      	ldr	r3, [pc, #8]	; (ded38 <HAL_USART_Read_Data+0xc>)
   ded30:	681b      	ldr	r3, [r3, #0]
   ded32:	695b      	ldr	r3, [r3, #20]
   ded34:	9301      	str	r3, [sp, #4]
   ded36:	bd08      	pop	{r3, pc}
   ded38:	0003023c 	.word	0x0003023c

000ded3c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   ded3c:	b508      	push	{r3, lr}
   ded3e:	4b02      	ldr	r3, [pc, #8]	; (ded48 <HAL_USART_Peek_Data+0xc>)
   ded40:	681b      	ldr	r3, [r3, #0]
   ded42:	699b      	ldr	r3, [r3, #24]
   ded44:	9301      	str	r3, [sp, #4]
   ded46:	bd08      	pop	{r3, pc}
   ded48:	0003023c 	.word	0x0003023c

000ded4c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   ded4c:	b508      	push	{r3, lr}
   ded4e:	4b02      	ldr	r3, [pc, #8]	; (ded58 <HAL_USART_Flush_Data+0xc>)
   ded50:	681b      	ldr	r3, [r3, #0]
   ded52:	69db      	ldr	r3, [r3, #28]
   ded54:	9301      	str	r3, [sp, #4]
   ded56:	bd08      	pop	{r3, pc}
   ded58:	0003023c 	.word	0x0003023c

000ded5c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   ded5c:	b508      	push	{r3, lr}
   ded5e:	4b02      	ldr	r3, [pc, #8]	; (ded68 <HAL_USART_Is_Enabled+0xc>)
   ded60:	681b      	ldr	r3, [r3, #0]
   ded62:	6a1b      	ldr	r3, [r3, #32]
   ded64:	9301      	str	r3, [sp, #4]
   ded66:	bd08      	pop	{r3, pc}
   ded68:	0003023c 	.word	0x0003023c

000ded6c <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   ded6c:	b508      	push	{r3, lr}
   ded6e:	4b02      	ldr	r3, [pc, #8]	; (ded78 <HAL_USART_Available_Data_For_Write+0xc>)
   ded70:	681b      	ldr	r3, [r3, #0]
   ded72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   ded74:	9301      	str	r3, [sp, #4]
   ded76:	bd08      	pop	{r3, pc}
   ded78:	0003023c 	.word	0x0003023c

000ded7c <mesh_select_antenna>:
#include "mesh_hal.h"
#endif

DYNALIB_BEGIN(hal_mesh)

DYNALIB_FN(0, hal_mesh, mesh_select_antenna, int(int, void*))
   ded7c:	b508      	push	{r3, lr}
   ded7e:	4b02      	ldr	r3, [pc, #8]	; (ded88 <mesh_select_antenna+0xc>)
   ded80:	681b      	ldr	r3, [r3, #0]
   ded82:	681b      	ldr	r3, [r3, #0]
   ded84:	9301      	str	r3, [sp, #4]
   ded86:	bd08      	pop	{r3, pc}
   ded88:	00030280 	.word	0x00030280

000ded8c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   ded8c:	b508      	push	{r3, lr}
   ded8e:	4b02      	ldr	r3, [pc, #8]	; (ded98 <HAL_I2C_Write_Data+0xc>)
   ded90:	681b      	ldr	r3, [r3, #0]
   ded92:	6a1b      	ldr	r3, [r3, #32]
   ded94:	9301      	str	r3, [sp, #4]
   ded96:	bd08      	pop	{r3, pc}
   ded98:	00030228 	.word	0x00030228

000ded9c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   ded9c:	b508      	push	{r3, lr}
   ded9e:	4b02      	ldr	r3, [pc, #8]	; (deda8 <HAL_I2C_Available_Data+0xc>)
   deda0:	681b      	ldr	r3, [r3, #0]
   deda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   deda4:	9301      	str	r3, [sp, #4]
   deda6:	bd08      	pop	{r3, pc}
   deda8:	00030228 	.word	0x00030228

000dedac <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   dedac:	b508      	push	{r3, lr}
   dedae:	4b02      	ldr	r3, [pc, #8]	; (dedb8 <HAL_I2C_Read_Data+0xc>)
   dedb0:	681b      	ldr	r3, [r3, #0]
   dedb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   dedb4:	9301      	str	r3, [sp, #4]
   dedb6:	bd08      	pop	{r3, pc}
   dedb8:	00030228 	.word	0x00030228

000dedbc <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   dedbc:	b508      	push	{r3, lr}
   dedbe:	4b02      	ldr	r3, [pc, #8]	; (dedc8 <HAL_I2C_Peek_Data+0xc>)
   dedc0:	681b      	ldr	r3, [r3, #0]
   dedc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dedc4:	9301      	str	r3, [sp, #4]
   dedc6:	bd08      	pop	{r3, pc}
   dedc8:	00030228 	.word	0x00030228

000dedcc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   dedcc:	b508      	push	{r3, lr}
   dedce:	4b02      	ldr	r3, [pc, #8]	; (dedd8 <HAL_I2C_Flush_Data+0xc>)
   dedd0:	681b      	ldr	r3, [r3, #0]
   dedd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   dedd4:	9301      	str	r3, [sp, #4]
   dedd6:	bd08      	pop	{r3, pc}
   dedd8:	00030228 	.word	0x00030228

000deddc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   deddc:	b508      	push	{r3, lr}
   dedde:	4b02      	ldr	r3, [pc, #8]	; (dede8 <HAL_I2C_Is_Enabled+0xc>)
   dede0:	681b      	ldr	r3, [r3, #0]
   dede2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dede4:	9301      	str	r3, [sp, #4]
   dede6:	bd08      	pop	{r3, pc}
   dede8:	00030228 	.word	0x00030228

000dedec <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   dedec:	b508      	push	{r3, lr}
   dedee:	4b02      	ldr	r3, [pc, #8]	; (dedf8 <HAL_I2C_Init+0xc>)
   dedf0:	681b      	ldr	r3, [r3, #0]
   dedf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   dedf4:	9301      	str	r3, [sp, #4]
   dedf6:	bd08      	pop	{r3, pc}
   dedf8:	00030228 	.word	0x00030228

000dedfc <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   dedfc:	b508      	push	{r3, lr}
   dedfe:	4b02      	ldr	r3, [pc, #8]	; (dee08 <sock_bind+0xc>)
   dee00:	681b      	ldr	r3, [r3, #0]
   dee02:	685b      	ldr	r3, [r3, #4]
   dee04:	9301      	str	r3, [sp, #4]
   dee06:	bd08      	pop	{r3, pc}
   dee08:	00030238 	.word	0x00030238

000dee0c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   dee0c:	b508      	push	{r3, lr}
   dee0e:	4b02      	ldr	r3, [pc, #8]	; (dee18 <sock_setsockopt+0xc>)
   dee10:	681b      	ldr	r3, [r3, #0]
   dee12:	699b      	ldr	r3, [r3, #24]
   dee14:	9301      	str	r3, [sp, #4]
   dee16:	bd08      	pop	{r3, pc}
   dee18:	00030238 	.word	0x00030238

000dee1c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   dee1c:	b508      	push	{r3, lr}
   dee1e:	4b02      	ldr	r3, [pc, #8]	; (dee28 <sock_close+0xc>)
   dee20:	681b      	ldr	r3, [r3, #0]
   dee22:	69db      	ldr	r3, [r3, #28]
   dee24:	9301      	str	r3, [sp, #4]
   dee26:	bd08      	pop	{r3, pc}
   dee28:	00030238 	.word	0x00030238

000dee2c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   dee2c:	b508      	push	{r3, lr}
   dee2e:	4b02      	ldr	r3, [pc, #8]	; (dee38 <sock_recvfrom+0xc>)
   dee30:	681b      	ldr	r3, [r3, #0]
   dee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   dee34:	9301      	str	r3, [sp, #4]
   dee36:	bd08      	pop	{r3, pc}
   dee38:	00030238 	.word	0x00030238

000dee3c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   dee3c:	b508      	push	{r3, lr}
   dee3e:	4b02      	ldr	r3, [pc, #8]	; (dee48 <sock_sendto+0xc>)
   dee40:	681b      	ldr	r3, [r3, #0]
   dee42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   dee44:	9301      	str	r3, [sp, #4]
   dee46:	bd08      	pop	{r3, pc}
   dee48:	00030238 	.word	0x00030238

000dee4c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   dee4c:	b508      	push	{r3, lr}
   dee4e:	4b02      	ldr	r3, [pc, #8]	; (dee58 <sock_socket+0xc>)
   dee50:	681b      	ldr	r3, [r3, #0]
   dee52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   dee54:	9301      	str	r3, [sp, #4]
   dee56:	bd08      	pop	{r3, pc}
   dee58:	00030238 	.word	0x00030238

000dee5c <HAL_Tone_Start>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_peripherals)

DYNALIB_FN(0, hal_peripherals, HAL_Tone_Start, void(uint8_t, uint32_t, uint32_t))
   dee5c:	b508      	push	{r3, lr}
   dee5e:	4b02      	ldr	r3, [pc, #8]	; (dee68 <HAL_Tone_Start+0xc>)
   dee60:	681b      	ldr	r3, [r3, #0]
   dee62:	681b      	ldr	r3, [r3, #0]
   dee64:	9301      	str	r3, [sp, #4]
   dee66:	bd08      	pop	{r3, pc}
   dee68:	00030224 	.word	0x00030224

000dee6c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   dee6c:	b508      	push	{r3, lr}
   dee6e:	4b02      	ldr	r3, [pc, #8]	; (dee78 <HAL_USB_USART_Init+0xc>)
   dee70:	681b      	ldr	r3, [r3, #0]
   dee72:	681b      	ldr	r3, [r3, #0]
   dee74:	9301      	str	r3, [sp, #4]
   dee76:	bd08      	pop	{r3, pc}
   dee78:	0003024c 	.word	0x0003024c

000dee7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   dee7c:	b508      	push	{r3, lr}
   dee7e:	4b02      	ldr	r3, [pc, #8]	; (dee88 <HAL_USB_USART_Available_Data+0xc>)
   dee80:	681b      	ldr	r3, [r3, #0]
   dee82:	691b      	ldr	r3, [r3, #16]
   dee84:	9301      	str	r3, [sp, #4]
   dee86:	bd08      	pop	{r3, pc}
   dee88:	0003024c 	.word	0x0003024c

000dee8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   dee8c:	b508      	push	{r3, lr}
   dee8e:	4b02      	ldr	r3, [pc, #8]	; (dee98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   dee90:	681b      	ldr	r3, [r3, #0]
   dee92:	695b      	ldr	r3, [r3, #20]
   dee94:	9301      	str	r3, [sp, #4]
   dee96:	bd08      	pop	{r3, pc}
   dee98:	0003024c 	.word	0x0003024c

000dee9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   dee9c:	b508      	push	{r3, lr}
   dee9e:	4b02      	ldr	r3, [pc, #8]	; (deea8 <HAL_USB_USART_Receive_Data+0xc>)
   deea0:	681b      	ldr	r3, [r3, #0]
   deea2:	699b      	ldr	r3, [r3, #24]
   deea4:	9301      	str	r3, [sp, #4]
   deea6:	bd08      	pop	{r3, pc}
   deea8:	0003024c 	.word	0x0003024c

000deeac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   deeac:	b508      	push	{r3, lr}
   deeae:	4b02      	ldr	r3, [pc, #8]	; (deeb8 <HAL_USB_USART_Send_Data+0xc>)
   deeb0:	681b      	ldr	r3, [r3, #0]
   deeb2:	69db      	ldr	r3, [r3, #28]
   deeb4:	9301      	str	r3, [sp, #4]
   deeb6:	bd08      	pop	{r3, pc}
   deeb8:	0003024c 	.word	0x0003024c

000deebc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   deebc:	b508      	push	{r3, lr}
   deebe:	4b02      	ldr	r3, [pc, #8]	; (deec8 <HAL_USB_USART_Flush_Data+0xc>)
   deec0:	681b      	ldr	r3, [r3, #0]
   deec2:	6a1b      	ldr	r3, [r3, #32]
   deec4:	9301      	str	r3, [sp, #4]
   deec6:	bd08      	pop	{r3, pc}
   deec8:	0003024c 	.word	0x0003024c

000deecc <wlan_connected_info>:
DYNALIB_FN(24, hal_wlan, wlan_get_credentials, int(wlan_scan_result_t, void*))
DYNALIB_FN(25, hal_wlan, softap_set_application_page_handler, int(PageProvider* provider, void* reserved))
DYNALIB_FN(26, hal_wlan, wlan_restart, int(void*))
DYNALIB_FN(27, hal_wlan, wlan_set_hostname, int(const char*, void*))
DYNALIB_FN(28, hal_wlan, wlan_get_hostname, int(char*, size_t, void*))
DYNALIB_FN(29, hal_wlan, wlan_connected_info, int(void*, wlan_connected_info_t*, void*))
   deecc:	b508      	push	{r3, lr}
   deece:	4b02      	ldr	r3, [pc, #8]	; (deed8 <wlan_connected_info+0xc>)
   deed0:	681b      	ldr	r3, [r3, #0]
   deed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   deed4:	9301      	str	r3, [sp, #4]
   deed6:	bd08      	pop	{r3, pc}
   deed8:	00030274 	.word	0x00030274

000deedc <LED_SetSignalingColor>:
#endif // defined(DYNALIB_EXPORT)

DYNALIB_BEGIN(services)

DYNALIB_FN(0, services, LED_SetRGBColor, void(uint32_t))
DYNALIB_FN(1, services, LED_SetSignalingColor, void(uint32_t))
   deedc:	b508      	push	{r3, lr}
   deede:	4b02      	ldr	r3, [pc, #8]	; (deee8 <LED_SetSignalingColor+0xc>)
   deee0:	681b      	ldr	r3, [r3, #0]
   deee2:	685b      	ldr	r3, [r3, #4]
   deee4:	9301      	str	r3, [sp, #4]
   deee6:	bd08      	pop	{r3, pc}
   deee8:	00030260 	.word	0x00030260

000deeec <LED_Signaling_Start>:
DYNALIB_FN(2, services, LED_Signaling_Start, void(void))
   deeec:	b508      	push	{r3, lr}
   deeee:	4b02      	ldr	r3, [pc, #8]	; (deef8 <LED_Signaling_Start+0xc>)
   deef0:	681b      	ldr	r3, [r3, #0]
   deef2:	689b      	ldr	r3, [r3, #8]
   deef4:	9301      	str	r3, [sp, #4]
   deef6:	bd08      	pop	{r3, pc}
   deef8:	00030260 	.word	0x00030260

000deefc <LED_Signaling_Stop>:
DYNALIB_FN(3, services, LED_Signaling_Stop, void(void))
   deefc:	b508      	push	{r3, lr}
   deefe:	4b02      	ldr	r3, [pc, #8]	; (def08 <LED_Signaling_Stop+0xc>)
   def00:	681b      	ldr	r3, [r3, #0]
   def02:	68db      	ldr	r3, [r3, #12]
   def04:	9301      	str	r3, [sp, #4]
   def06:	bd08      	pop	{r3, pc}
   def08:	00030260 	.word	0x00030260

000def0c <LED_RGB_IsOverRidden>:
DYNALIB_FN(4, services, LED_SetBrightness, void(uint8_t))
DYNALIB_FN(5, services, LED_RGB_Get, void(uint8_t*))
DYNALIB_FN(6, services, LED_RGB_IsOverRidden, bool(void))
   def0c:	b508      	push	{r3, lr}
   def0e:	4b02      	ldr	r3, [pc, #8]	; (def18 <LED_RGB_IsOverRidden+0xc>)
   def10:	681b      	ldr	r3, [r3, #0]
   def12:	699b      	ldr	r3, [r3, #24]
   def14:	9301      	str	r3, [sp, #4]
   def16:	bd08      	pop	{r3, pc}
   def18:	00030260 	.word	0x00030260

000def1c <LED_On>:
DYNALIB_FN(7, services, LED_On, void(Led_TypeDef))
   def1c:	b508      	push	{r3, lr}
   def1e:	4b02      	ldr	r3, [pc, #8]	; (def28 <LED_On+0xc>)
   def20:	681b      	ldr	r3, [r3, #0]
   def22:	69db      	ldr	r3, [r3, #28]
   def24:	9301      	str	r3, [sp, #4]
   def26:	bd08      	pop	{r3, pc}
   def28:	00030260 	.word	0x00030260

000def2c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   def2c:	b508      	push	{r3, lr}
   def2e:	4b02      	ldr	r3, [pc, #8]	; (def38 <log_message+0xc>)
   def30:	681b      	ldr	r3, [r3, #0]
   def32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   def34:	9301      	str	r3, [sp, #4]
   def36:	bd08      	pop	{r3, pc}
   def38:	00030260 	.word	0x00030260

000def3c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   def3c:	b508      	push	{r3, lr}
   def3e:	4b02      	ldr	r3, [pc, #8]	; (def48 <system_mode+0xc>)
   def40:	681b      	ldr	r3, [r3, #0]
   def42:	681b      	ldr	r3, [r3, #0]
   def44:	9301      	str	r3, [sp, #4]
   def46:	bd08      	pop	{r3, pc}
   def48:	00030220 	.word	0x00030220

000def4c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   def4c:	b508      	push	{r3, lr}
   def4e:	4b02      	ldr	r3, [pc, #8]	; (def58 <set_system_mode+0xc>)
   def50:	681b      	ldr	r3, [r3, #0]
   def52:	685b      	ldr	r3, [r3, #4]
   def54:	9301      	str	r3, [sp, #4]
   def56:	bd08      	pop	{r3, pc}
   def58:	00030220 	.word	0x00030220

000def5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   def5c:	b508      	push	{r3, lr}
   def5e:	4b02      	ldr	r3, [pc, #8]	; (def68 <system_delay_ms+0xc>)
   def60:	681b      	ldr	r3, [r3, #0]
   def62:	695b      	ldr	r3, [r3, #20]
   def64:	9301      	str	r3, [sp, #4]
   def66:	bd08      	pop	{r3, pc}
   def68:	00030220 	.word	0x00030220

000def6c <system_version_info>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
   def6c:	b508      	push	{r3, lr}
   def6e:	4b02      	ldr	r3, [pc, #8]	; (def78 <system_version_info+0xc>)
   def70:	681b      	ldr	r3, [r3, #0]
   def72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   def74:	9301      	str	r3, [sp, #4]
   def76:	bd08      	pop	{r3, pc}
   def78:	00030220 	.word	0x00030220

000def7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   def7c:	b508      	push	{r3, lr}
   def7e:	4b02      	ldr	r3, [pc, #8]	; (def88 <application_thread_current+0xc>)
   def80:	681b      	ldr	r3, [r3, #0]
   def82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   def84:	9301      	str	r3, [sp, #4]
   def86:	bd08      	pop	{r3, pc}
   def88:	00030220 	.word	0x00030220

000def8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   def8c:	b508      	push	{r3, lr}
   def8e:	4b02      	ldr	r3, [pc, #8]	; (def98 <application_thread_invoke+0xc>)
   def90:	681b      	ldr	r3, [r3, #0]
   def92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   def94:	9301      	str	r3, [sp, #4]
   def96:	bd08      	pop	{r3, pc}
   def98:	00030220 	.word	0x00030220

000def9c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   def9c:	b508      	push	{r3, lr}
   def9e:	4b02      	ldr	r3, [pc, #8]	; (defa8 <system_thread_get_state+0xc>)
   defa0:	681b      	ldr	r3, [r3, #0]
   defa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   defa4:	9301      	str	r3, [sp, #4]
   defa6:	bd08      	pop	{r3, pc}
   defa8:	00030220 	.word	0x00030220

000defac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   defac:	b508      	push	{r3, lr}
   defae:	4b03      	ldr	r3, [pc, #12]	; (defbc <system_ctrl_set_app_request_handler+0x10>)
   defb0:	681b      	ldr	r3, [r3, #0]
   defb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   defb6:	9301      	str	r3, [sp, #4]
   defb8:	bd08      	pop	{r3, pc}
   defba:	0000      	.short	0x0000
   defbc:	00030220 	.word	0x00030220

000defc0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   defc0:	b508      	push	{r3, lr}
   defc2:	4b03      	ldr	r3, [pc, #12]	; (defd0 <system_ctrl_set_result+0x10>)
   defc4:	681b      	ldr	r3, [r3, #0]
   defc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   defca:	9301      	str	r3, [sp, #4]
   defcc:	bd08      	pop	{r3, pc}
   defce:	0000      	.short	0x0000
   defd0:	00030220 	.word	0x00030220

000defd4 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   defd4:	b508      	push	{r3, lr}
   defd6:	4b03      	ldr	r3, [pc, #12]	; (defe4 <system_invoke_event_handler+0x10>)
   defd8:	681b      	ldr	r3, [r3, #0]
   defda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   defde:	9301      	str	r3, [sp, #4]
   defe0:	bd08      	pop	{r3, pc}
   defe2:	0000      	.short	0x0000
   defe4:	00030220 	.word	0x00030220

000defe8 <network_config>:
#include "system_network.h"
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
   defe8:	b508      	push	{r3, lr}
   defea:	4b02      	ldr	r3, [pc, #8]	; (deff4 <network_config+0xc>)
   defec:	681b      	ldr	r3, [r3, #0]
   defee:	681b      	ldr	r3, [r3, #0]
   deff0:	9301      	str	r3, [sp, #4]
   deff2:	bd08      	pop	{r3, pc}
   deff4:	00030240 	.word	0x00030240

000deff8 <network_connect>:
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   deff8:	b508      	push	{r3, lr}
   deffa:	4b02      	ldr	r3, [pc, #8]	; (df004 <network_connect+0xc>)
   deffc:	681b      	ldr	r3, [r3, #0]
   deffe:	685b      	ldr	r3, [r3, #4]
   df000:	9301      	str	r3, [sp, #4]
   df002:	bd08      	pop	{r3, pc}
   df004:	00030240 	.word	0x00030240

000df008 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   df008:	b508      	push	{r3, lr}
   df00a:	4b02      	ldr	r3, [pc, #8]	; (df014 <network_connecting+0xc>)
   df00c:	681b      	ldr	r3, [r3, #0]
   df00e:	689b      	ldr	r3, [r3, #8]
   df010:	9301      	str	r3, [sp, #4]
   df012:	bd08      	pop	{r3, pc}
   df014:	00030240 	.word	0x00030240

000df018 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   df018:	b508      	push	{r3, lr}
   df01a:	4b02      	ldr	r3, [pc, #8]	; (df024 <network_disconnect+0xc>)
   df01c:	681b      	ldr	r3, [r3, #0]
   df01e:	68db      	ldr	r3, [r3, #12]
   df020:	9301      	str	r3, [sp, #4]
   df022:	bd08      	pop	{r3, pc}
   df024:	00030240 	.word	0x00030240

000df028 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   df028:	b508      	push	{r3, lr}
   df02a:	4b02      	ldr	r3, [pc, #8]	; (df034 <network_ready+0xc>)
   df02c:	681b      	ldr	r3, [r3, #0]
   df02e:	691b      	ldr	r3, [r3, #16]
   df030:	9301      	str	r3, [sp, #4]
   df032:	bd08      	pop	{r3, pc}
   df034:	00030240 	.word	0x00030240

000df038 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   df038:	b508      	push	{r3, lr}
   df03a:	4b02      	ldr	r3, [pc, #8]	; (df044 <network_on+0xc>)
   df03c:	681b      	ldr	r3, [r3, #0]
   df03e:	695b      	ldr	r3, [r3, #20]
   df040:	9301      	str	r3, [sp, #4]
   df042:	bd08      	pop	{r3, pc}
   df044:	00030240 	.word	0x00030240

000df048 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   df048:	b508      	push	{r3, lr}
   df04a:	4b02      	ldr	r3, [pc, #8]	; (df054 <network_off+0xc>)
   df04c:	681b      	ldr	r3, [r3, #0]
   df04e:	699b      	ldr	r3, [r3, #24]
   df050:	9301      	str	r3, [sp, #4]
   df052:	bd08      	pop	{r3, pc}
   df054:	00030240 	.word	0x00030240

000df058 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   df058:	b508      	push	{r3, lr}
   df05a:	4b02      	ldr	r3, [pc, #8]	; (df064 <network_listen+0xc>)
   df05c:	681b      	ldr	r3, [r3, #0]
   df05e:	69db      	ldr	r3, [r3, #28]
   df060:	9301      	str	r3, [sp, #4]
   df062:	bd08      	pop	{r3, pc}
   df064:	00030240 	.word	0x00030240

000df068 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   df068:	b508      	push	{r3, lr}
   df06a:	4b02      	ldr	r3, [pc, #8]	; (df074 <network_listening+0xc>)
   df06c:	681b      	ldr	r3, [r3, #0]
   df06e:	6a1b      	ldr	r3, [r3, #32]
   df070:	9301      	str	r3, [sp, #4]
   df072:	bd08      	pop	{r3, pc}
   df074:	00030240 	.word	0x00030240

000df078 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   df078:	b508      	push	{r3, lr}
   df07a:	4b02      	ldr	r3, [pc, #8]	; (df084 <network_set_listen_timeout+0xc>)
   df07c:	681b      	ldr	r3, [r3, #0]
   df07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df080:	9301      	str	r3, [sp, #4]
   df082:	bd08      	pop	{r3, pc}
   df084:	00030240 	.word	0x00030240

000df088 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   df088:	b508      	push	{r3, lr}
   df08a:	4b02      	ldr	r3, [pc, #8]	; (df094 <network_get_listen_timeout+0xc>)
   df08c:	681b      	ldr	r3, [r3, #0]
   df08e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   df090:	9301      	str	r3, [sp, #4]
   df092:	bd08      	pop	{r3, pc}
   df094:	00030240 	.word	0x00030240

000df098 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   df098:	b508      	push	{r3, lr}
   df09a:	4b02      	ldr	r3, [pc, #8]	; (df0a4 <spark_variable+0xc>)
   df09c:	681b      	ldr	r3, [r3, #0]
   df09e:	681b      	ldr	r3, [r3, #0]
   df0a0:	9301      	str	r3, [sp, #4]
   df0a2:	bd08      	pop	{r3, pc}
   df0a4:	00030244 	.word	0x00030244

000df0a8 <spark_process>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   df0a8:	b508      	push	{r3, lr}
   df0aa:	4b02      	ldr	r3, [pc, #8]	; (df0b4 <spark_process+0xc>)
   df0ac:	681b      	ldr	r3, [r3, #0]
   df0ae:	689b      	ldr	r3, [r3, #8]
   df0b0:	9301      	str	r3, [sp, #4]
   df0b2:	bd08      	pop	{r3, pc}
   df0b4:	00030244 	.word	0x00030244

000df0b8 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   df0b8:	b508      	push	{r3, lr}
   df0ba:	4b02      	ldr	r3, [pc, #8]	; (df0c4 <spark_cloud_flag_connected+0xc>)
   df0bc:	681b      	ldr	r3, [r3, #0]
   df0be:	695b      	ldr	r3, [r3, #20]
   df0c0:	9301      	str	r3, [sp, #4]
   df0c2:	bd08      	pop	{r3, pc}
   df0c4:	00030244 	.word	0x00030244

000df0c8 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   df0c8:	b508      	push	{r3, lr}
   df0ca:	4b02      	ldr	r3, [pc, #8]	; (df0d4 <spark_send_event+0xc>)
   df0cc:	681b      	ldr	r3, [r3, #0]
   df0ce:	6a1b      	ldr	r3, [r3, #32]
   df0d0:	9301      	str	r3, [sp, #4]
   df0d2:	bd08      	pop	{r3, pc}
   df0d4:	00030244 	.word	0x00030244

000df0d8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   df0d8:	b508      	push	{r3, lr}
   df0da:	4b02      	ldr	r3, [pc, #8]	; (df0e4 <spark_subscribe+0xc>)
   df0dc:	681b      	ldr	r3, [r3, #0]
   df0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   df0e0:	9301      	str	r3, [sp, #4]
   df0e2:	bd08      	pop	{r3, pc}
   df0e4:	00030244 	.word	0x00030244

000df0e8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   df0e8:	b508      	push	{r3, lr}
   df0ea:	4b02      	ldr	r3, [pc, #8]	; (df0f4 <spark_sync_time+0xc>)
   df0ec:	681b      	ldr	r3, [r3, #0]
   df0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   df0f0:	9301      	str	r3, [sp, #4]
   df0f2:	bd08      	pop	{r3, pc}
   df0f4:	00030244 	.word	0x00030244

000df0f8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   df0f8:	b508      	push	{r3, lr}
   df0fa:	4b02      	ldr	r3, [pc, #8]	; (df104 <spark_sync_time_pending+0xc>)
   df0fc:	681b      	ldr	r3, [r3, #0]
   df0fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df100:	9301      	str	r3, [sp, #4]
   df102:	bd08      	pop	{r3, pc}
   df104:	00030244 	.word	0x00030244

000df108 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   df108:	b508      	push	{r3, lr}
   df10a:	4b02      	ldr	r3, [pc, #8]	; (df114 <spark_set_random_seed_from_cloud_handler+0xc>)
   df10c:	681b      	ldr	r3, [r3, #0]
   df10e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   df110:	9301      	str	r3, [sp, #4]
   df112:	bd08      	pop	{r3, pc}
   df114:	00030244 	.word	0x00030244

000df118 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   df118:	b508      	push	{r3, lr}
   df11a:	4b02      	ldr	r3, [pc, #8]	; (df124 <malloc+0xc>)
   df11c:	681b      	ldr	r3, [r3, #0]
   df11e:	681b      	ldr	r3, [r3, #0]
   df120:	9301      	str	r3, [sp, #4]
   df122:	bd08      	pop	{r3, pc}
   df124:	0003021c 	.word	0x0003021c

000df128 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   df128:	b508      	push	{r3, lr}
   df12a:	4b02      	ldr	r3, [pc, #8]	; (df134 <free+0xc>)
   df12c:	681b      	ldr	r3, [r3, #0]
   df12e:	685b      	ldr	r3, [r3, #4]
   df130:	9301      	str	r3, [sp, #4]
   df132:	bd08      	pop	{r3, pc}
   df134:	0003021c 	.word	0x0003021c

000df138 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   df138:	b508      	push	{r3, lr}
   df13a:	4b02      	ldr	r3, [pc, #8]	; (df144 <realloc+0xc>)
   df13c:	681b      	ldr	r3, [r3, #0]
   df13e:	689b      	ldr	r3, [r3, #8]
   df140:	9301      	str	r3, [sp, #4]
   df142:	bd08      	pop	{r3, pc}
   df144:	0003021c 	.word	0x0003021c

000df148 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   df148:	b508      	push	{r3, lr}
   df14a:	4b02      	ldr	r3, [pc, #8]	; (df154 <siscanf+0xc>)
   df14c:	681b      	ldr	r3, [r3, #0]
   df14e:	699b      	ldr	r3, [r3, #24]
   df150:	9301      	str	r3, [sp, #4]
   df152:	bd08      	pop	{r3, pc}
   df154:	0003021c 	.word	0x0003021c

000df158 <abort>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   df158:	b508      	push	{r3, lr}
   df15a:	4b02      	ldr	r3, [pc, #8]	; (df164 <abort+0xc>)
   df15c:	681b      	ldr	r3, [r3, #0]
   df15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   df160:	9301      	str	r3, [sp, #4]
   df162:	bd08      	pop	{r3, pc}
   df164:	0003021c 	.word	0x0003021c

000df168 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   df168:	b508      	push	{r3, lr}
   df16a:	4b02      	ldr	r3, [pc, #8]	; (df174 <_malloc_r+0xc>)
   df16c:	681b      	ldr	r3, [r3, #0]
   df16e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   df170:	9301      	str	r3, [sp, #4]
   df172:	bd08      	pop	{r3, pc}
   df174:	0003021c 	.word	0x0003021c

000df178 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   df178:	2200      	movs	r2, #0
   df17a:	4611      	mov	r1, r2
   df17c:	6840      	ldr	r0, [r0, #4]
   df17e:	f7ff bf73 	b.w	df068 <network_listening>

000df182 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   df182:	2200      	movs	r2, #0
   df184:	4611      	mov	r1, r2
   df186:	6840      	ldr	r0, [r0, #4]
   df188:	f7ff bf7e 	b.w	df088 <network_get_listen_timeout>

000df18c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   df18c:	2200      	movs	r2, #0
   df18e:	6840      	ldr	r0, [r0, #4]
   df190:	f7ff bf72 	b.w	df078 <network_set_listen_timeout>

000df194 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   df194:	2200      	movs	r2, #0
   df196:	f081 0101 	eor.w	r1, r1, #1
   df19a:	6840      	ldr	r0, [r0, #4]
   df19c:	f7ff bf5c 	b.w	df058 <network_listen>

000df1a0 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   df1a0:	2300      	movs	r3, #0
   df1a2:	461a      	mov	r2, r3
   df1a4:	4619      	mov	r1, r3
   df1a6:	6840      	ldr	r0, [r0, #4]
   df1a8:	f7ff bf4e 	b.w	df048 <network_off>

000df1ac <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   df1ac:	2300      	movs	r3, #0
   df1ae:	461a      	mov	r2, r3
   df1b0:	4619      	mov	r1, r3
   df1b2:	6840      	ldr	r0, [r0, #4]
   df1b4:	f7ff bf40 	b.w	df038 <network_on>

000df1b8 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   df1b8:	2200      	movs	r2, #0
   df1ba:	4611      	mov	r1, r2
   df1bc:	6840      	ldr	r0, [r0, #4]
   df1be:	f7ff bf33 	b.w	df028 <network_ready>

000df1c2 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   df1c2:	2200      	movs	r2, #0
   df1c4:	4611      	mov	r1, r2
   df1c6:	6840      	ldr	r0, [r0, #4]
   df1c8:	f7ff bf1e 	b.w	df008 <network_connecting>

000df1cc <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   df1cc:	2200      	movs	r2, #0
   df1ce:	2102      	movs	r1, #2
   df1d0:	6840      	ldr	r0, [r0, #4]
   df1d2:	f7ff bf21 	b.w	df018 <network_disconnect>

000df1d6 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   df1d6:	2300      	movs	r3, #0
   df1d8:	461a      	mov	r2, r3
   df1da:	6840      	ldr	r0, [r0, #4]
   df1dc:	f7ff bf0c 	b.w	deff8 <network_connect>

000df1e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   df1e0:	4b02      	ldr	r3, [pc, #8]	; (df1ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   df1e2:	2203      	movs	r2, #3
   df1e4:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   df1e6:	4a02      	ldr	r2, [pc, #8]	; (df1f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   df1e8:	601a      	str	r2, [r3, #0]
   df1ea:	4770      	bx	lr
   df1ec:	2003e370 	.word	0x2003e370
   df1f0:	000e4554 	.word	0x000e4554

000df1f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   df1f4:	b510      	push	{r4, lr}
   df1f6:	4604      	mov	r4, r0
{
    _spi = spi;
   df1f8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   df1fa:	4608      	mov	r0, r1
   df1fc:	f7ff fc86 	bl	deb0c <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   df200:	2300      	movs	r3, #0
   df202:	6063      	str	r3, [r4, #4]
}
   df204:	4620      	mov	r0, r4
   df206:	bd10      	pop	{r4, pc}

000df208 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   df208:	7800      	ldrb	r0, [r0, #0]
   df20a:	f7ff bc87 	b.w	deb1c <HAL_SPI_Is_Enabled>
	...

000df210 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   df210:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   df212:	4c09      	ldr	r4, [pc, #36]	; (df238 <_GLOBAL__sub_I_System+0x28>)
   df214:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   df216:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   df21a:	6020      	str	r0, [r4, #0]
   df21c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   df21e:	71a0      	strb	r0, [r4, #6]
   df220:	8120      	strh	r0, [r4, #8]
   df222:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   df224:	f7ff fe92 	bl	def4c <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   df228:	4620      	mov	r0, r4
   df22a:	4a04      	ldr	r2, [pc, #16]	; (df23c <_GLOBAL__sub_I_System+0x2c>)
   df22c:	4904      	ldr	r1, [pc, #16]	; (df240 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   df22e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   df232:	f002 b805 	b.w	e1240 <__aeabi_atexit>
   df236:	bf00      	nop
   df238:	2003e378 	.word	0x2003e378
   df23c:	2003e2dc 	.word	0x2003e2dc
   df240:	000d4215 	.word	0x000d4215

000df244 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   df244:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   df246:	6804      	ldr	r4, [r0, #0]
   df248:	6b24      	ldr	r4, [r4, #48]	; 0x30
   df24a:	46a4      	mov	ip, r4
    }
   df24c:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   df250:	4760      	bx	ip

000df252 <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   df252:	6803      	ldr	r3, [r0, #0]
   df254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   df256:	4718      	bx	r3

000df258 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   df258:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   df25a:	4770      	bx	lr

000df25c <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   df25c:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   df25e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   df260:	1a10      	subs	r0, r2, r0
   df262:	4770      	bx	lr

000df264 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   df264:	b513      	push	{r0, r1, r4, lr}
   df266:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   df268:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   df26a:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   df26e:	68d4      	ldr	r4, [r2, #12]
   df270:	4619      	mov	r1, r3
   df272:	2201      	movs	r2, #1
   df274:	47a0      	blx	r4
}
   df276:	b002      	add	sp, #8
   df278:	bd10      	pop	{r4, pc}

000df27a <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   df27a:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   df27c:	6803      	ldr	r3, [r0, #0]
   df27e:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   df280:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   df282:	4798      	blx	r3
   df284:	b128      	cbz	r0, df292 <_ZN3UDP4readEv+0x18>
   df286:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df288:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   df28a:	1c59      	adds	r1, r3, #1
   df28c:	86e1      	strh	r1, [r4, #54]	; 0x36
   df28e:	5cd0      	ldrb	r0, [r2, r3]
   df290:	bd10      	pop	{r4, pc}
   df292:	f04f 30ff 	mov.w	r0, #4294967295
}
   df296:	bd10      	pop	{r4, pc}

000df298 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   df298:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   df29a:	6803      	ldr	r3, [r0, #0]
   df29c:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   df29e:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   df2a0:	4798      	blx	r3
   df2a2:	b118      	cbz	r0, df2ac <_ZN3UDP4peekEv+0x14>
   df2a4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df2a6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   df2a8:	5cd0      	ldrb	r0, [r2, r3]
   df2aa:	bd10      	pop	{r4, pc}
   df2ac:	f04f 30ff 	mov.w	r0, #4294967295
}
   df2b0:	bd10      	pop	{r4, pc}

000df2b2 <_ZN3UDP5flushEv>:

void UDP::flush() {
   df2b2:	4770      	bx	lr

000df2b4 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   df2b4:	b410      	push	{r4}
   df2b6:	4603      	mov	r3, r0
   df2b8:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   df2ba:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   df2bc:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   df2be:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   df2c0:	6803      	ldr	r3, [r0, #0]
   df2c2:	1a52      	subs	r2, r2, r1
   df2c4:	68db      	ldr	r3, [r3, #12]
   df2c6:	4421      	add	r1, r4
}
   df2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   df2cc:	4718      	bx	r3

000df2ce <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   df2ce:	f1a0 0010 	sub.w	r0, r0, #16
   df2d2:	f7ff bfef 	b.w	df2b4 <_ZNK3UDP7printToER5Print>

000df2d6 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df2d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   df2d8:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df2da:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df2dc:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   df2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   df2e0:	4604      	mov	r4, r0
   df2e2:	460f      	mov	r7, r1
   df2e4:	4615      	mov	r5, r2
    stop();
   df2e6:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   df2e8:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df2ea:	4632      	mov	r2, r6
   df2ec:	2100      	movs	r1, #0
   df2ee:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   df2f0:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   df2f2:	f002 ff23 	bl	e213c <memset>
    saddr.sin6_len = sizeof(saddr);
   df2f6:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   df2fa:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   df2fc:	260a      	movs	r6, #10
   df2fe:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   df302:	f7ff fcf3 	bl	decec <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df306:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   df308:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df30c:	2102      	movs	r1, #2
   df30e:	4630      	mov	r0, r6
   df310:	f7ff fd9c 	bl	dee4c <sock_socket>

    if (_sock < 0) {
   df314:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   df316:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   df318:	db24      	blt.n	df364 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   df31a:	2204      	movs	r2, #4
   df31c:	9200      	str	r2, [sp, #0]
   df31e:	ab02      	add	r3, sp, #8
   df320:	f640 71ff 	movw	r1, #4095	; 0xfff
   df324:	f7ff fd72 	bl	dee0c <sock_setsockopt>
   df328:	b9e0      	cbnz	r0, df364 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   df32a:	b195      	cbz	r5, df352 <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   df32c:	9003      	str	r0, [sp, #12]
   df32e:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   df332:	a903      	add	r1, sp, #12
   df334:	b2e8      	uxtb	r0, r5
   df336:	f7ff fc01 	bl	deb3c <if_index_to_name>
   df33a:	b998      	cbnz	r0, df364 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   df33c:	2306      	movs	r3, #6
   df33e:	9300      	str	r3, [sp, #0]
   df340:	f241 020b 	movw	r2, #4107	; 0x100b
   df344:	ab03      	add	r3, sp, #12
   df346:	f640 71ff 	movw	r1, #4095	; 0xfff
   df34a:	6960      	ldr	r0, [r4, #20]
   df34c:	f7ff fd5e 	bl	dee0c <sock_setsockopt>
   df350:	b940      	cbnz	r0, df364 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   df352:	221c      	movs	r2, #28
   df354:	a905      	add	r1, sp, #20
   df356:	6960      	ldr	r0, [r4, #20]
   df358:	f7ff fd50 	bl	dedfc <sock_bind>
   df35c:	b910      	cbnz	r0, df364 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   df35e:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   df360:	2001      	movs	r0, #1
   df362:	e004      	b.n	df36e <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   df364:	6823      	ldr	r3, [r4, #0]
   df366:	4620      	mov	r0, r4
   df368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   df36a:	4798      	blx	r3
   df36c:	2000      	movs	r0, #0
    }
    return bound;
}
   df36e:	b00d      	add	sp, #52	; 0x34
   df370:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df372 <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   df372:	b510      	push	{r4, lr}
   df374:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   df376:	6940      	ldr	r0, [r0, #20]
   df378:	2800      	cmp	r0, #0
   df37a:	db01      	blt.n	df380 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   df37c:	f7ff fd4e 	bl	dee1c <sock_close>
    }

    _sock = -1;
   df380:	f04f 33ff 	mov.w	r3, #4294967295
   df384:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df386:	2300      	movs	r3, #0
   df388:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   df38a:	8723      	strh	r3, [r4, #56]	; 0x38
   df38c:	bd10      	pop	{r4, pc}

000df38e <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   df38e:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   df390:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   df392:	4605      	mov	r5, r0
   df394:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   df396:	b113      	cbz	r3, df39e <_ZN3UDP5writeEPKhj+0x10>
   df398:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   df39a:	1a24      	subs	r4, r4, r0
   df39c:	e000      	b.n	df3a0 <_ZN3UDP5writeEPKhj+0x12>
   df39e:	461c      	mov	r4, r3
   df3a0:	4294      	cmp	r4, r2
   df3a2:	bf28      	it	cs
   df3a4:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   df3a6:	4622      	mov	r2, r4
   df3a8:	4418      	add	r0, r3
   df3aa:	f002 febc 	bl	e2126 <memcpy>
    _offset += size;
   df3ae:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   df3b0:	4423      	add	r3, r4
   df3b2:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   df3b4:	4620      	mov	r0, r4
   df3b6:	bd38      	pop	{r3, r4, r5, pc}

000df3b8 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   df3b8:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   df3ba:	6803      	ldr	r3, [r0, #0]
   df3bc:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   df3be:	4604      	mov	r4, r0
   df3c0:	460e      	mov	r6, r1
   df3c2:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   df3c4:	4798      	blx	r3
   df3c6:	b188      	cbz	r0, df3ec <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   df3c8:	6823      	ldr	r3, [r4, #0]
   df3ca:	4620      	mov	r0, r4
   df3cc:	691b      	ldr	r3, [r3, #16]
   df3ce:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   df3d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df3d2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   df3d4:	4285      	cmp	r5, r0
   df3d6:	bfa8      	it	ge
   df3d8:	4605      	movge	r5, r0
   df3da:	4419      	add	r1, r3
   df3dc:	462a      	mov	r2, r5
   df3de:	4630      	mov	r0, r6
   df3e0:	f002 fea1 	bl	e2126 <memcpy>
        _offset += read;
   df3e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   df3e6:	442b      	add	r3, r5
   df3e8:	86e3      	strh	r3, [r4, #54]	; 0x36
   df3ea:	e001      	b.n	df3f0 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   df3ec:	f04f 35ff 	mov.w	r5, #4294967295
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   df3f0:	4628      	mov	r0, r5
   df3f2:	bd70      	pop	{r4, r5, r6, pc}

000df3f4 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   df3f4:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   df3f6:	4604      	mov	r4, r0
   df3f8:	4b05      	ldr	r3, [pc, #20]	; (df410 <_ZN3UDP8remoteIPEv+0x1c>)
   df3fa:	f844 3b04 	str.w	r3, [r4], #4
   df3fe:	f101 0520 	add.w	r5, r1, #32
   df402:	4606      	mov	r6, r0
   df404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df408:	682b      	ldr	r3, [r5, #0]
   df40a:	7023      	strb	r3, [r4, #0]
   df40c:	4630      	mov	r0, r6
   df40e:	bd70      	pop	{r4, r5, r6, pc}
   df410:	000e4718 	.word	0x000e4718

000df414 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df414:	b5f0      	push	{r4, r5, r6, r7, lr}
   df416:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df418:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df41a:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df41c:	6a97      	ldr	r7, [r2, #40]	; 0x28
   df41e:	4a0a      	ldr	r2, [pc, #40]	; (df448 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   df420:	9202      	str	r2, [sp, #8]
   df422:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   df424:	468e      	mov	lr, r1
   df426:	4606      	mov	r6, r0
   df428:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df42a:	ac03      	add	r4, sp, #12
   df42c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df42e:	682b      	ldr	r3, [r5, #0]
   df430:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   df432:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   df436:	9300      	str	r3, [sp, #0]
   df438:	4662      	mov	r2, ip
   df43a:	ab02      	add	r3, sp, #8
   df43c:	4671      	mov	r1, lr
   df43e:	4630      	mov	r0, r6
   df440:	47b8      	blx	r7
    }
   df442:	b009      	add	sp, #36	; 0x24
   df444:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df446:	bf00      	nop
   df448:	000e4718 	.word	0x000e4718

000df44c <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   df44c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df44e:	6803      	ldr	r3, [r0, #0]
   df450:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   df454:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   df456:	4b0d      	ldr	r3, [pc, #52]	; (df48c <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   df458:	b089      	sub	sp, #36	; 0x24
   df45a:	f100 0620 	add.w	r6, r0, #32
   df45e:	4604      	mov	r4, r0
   df460:	9302      	str	r3, [sp, #8]
   df462:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   df464:	ad03      	add	r5, sp, #12
   df466:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   df468:	6833      	ldr	r3, [r6, #0]
   df46a:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df46c:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   df46e:	9300      	str	r3, [sp, #0]
   df470:	4672      	mov	r2, lr
   df472:	ab02      	add	r3, sp, #8
   df474:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   df476:	4620      	mov	r0, r4
   df478:	47b8      	blx	r7
    flush(); // wait for send to complete
   df47a:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   df47c:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   df47e:	69db      	ldr	r3, [r3, #28]
   df480:	4620      	mov	r0, r4
   df482:	4798      	blx	r3
    return result;
}
   df484:	4628      	mov	r0, r5
   df486:	b009      	add	sp, #36	; 0x24
   df488:	bdf0      	pop	{r4, r5, r6, r7, pc}
   df48a:	bf00      	nop
   df48c:	000e4718 	.word	0x000e4718

000df490 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   df490:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   df492:	7843      	ldrb	r3, [r0, #1]
   df494:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   df496:	b08d      	sub	sp, #52	; 0x34
   df498:	4605      	mov	r5, r0
   df49a:	460c      	mov	r4, r1
   df49c:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   df49e:	d101      	bne.n	df4a4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   df4a0:	1d01      	adds	r1, r0, #4
   df4a2:	e033      	b.n	df50c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   df4a4:	2b0a      	cmp	r3, #10
   df4a6:	d135      	bne.n	df514 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   df4a8:	2211      	movs	r2, #17
   df4aa:	2100      	movs	r1, #0
   df4ac:	a801      	add	r0, sp, #4
   df4ae:	f002 fe45 	bl	e213c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   df4b2:	68ab      	ldr	r3, [r5, #8]
   df4b4:	b943      	cbnz	r3, df4c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   df4b6:	68eb      	ldr	r3, [r5, #12]
   df4b8:	b933      	cbnz	r3, df4c8 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   df4ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
   df4be:	692e      	ldr	r6, [r5, #16]
   df4c0:	f7ff fc04 	bl	deccc <inet_htonl>
   df4c4:	4286      	cmp	r6, r0
   df4c6:	d01f      	beq.n	df508 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   df4c8:	f105 0308 	add.w	r3, r5, #8
   df4cc:	ae01      	add	r6, sp, #4
   df4ce:	f105 0e18 	add.w	lr, r5, #24
   df4d2:	6818      	ldr	r0, [r3, #0]
   df4d4:	6859      	ldr	r1, [r3, #4]
   df4d6:	4632      	mov	r2, r6
   df4d8:	c203      	stmia	r2!, {r0, r1}
   df4da:	3308      	adds	r3, #8
   df4dc:	4573      	cmp	r3, lr
   df4de:	4616      	mov	r6, r2
   df4e0:	d1f7      	bne.n	df4d2 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   df4e2:	2306      	movs	r3, #6
            addr = IPAddress(a);
   df4e4:	a901      	add	r1, sp, #4
   df4e6:	a806      	add	r0, sp, #24
   df4e8:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   df4ea:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   df4ee:	f000 ff5b 	bl	e03a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   df4f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   df4f4:	3404      	adds	r4, #4
   df4f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df4f8:	6833      	ldr	r3, [r6, #0]
   df4fa:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   df4fc:	b157      	cbz	r7, df514 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   df4fe:	8868      	ldrh	r0, [r5, #2]
   df500:	f7ff fbec 	bl	decdc <inet_ntohs>
   df504:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   df506:	e005      	b.n	df514 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   df508:	f105 0114 	add.w	r1, r5, #20
   df50c:	4620      	mov	r0, r4
   df50e:	f000 ff80 	bl	e0412 <_ZN9IPAddressaSEPKh>
   df512:	e7f3      	b.n	df4fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   df514:	b00d      	add	sp, #52	; 0x34
   df516:	bdf0      	pop	{r4, r5, r6, r7, pc}

000df518 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   df518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   df51c:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   df51e:	ab0e      	add	r3, sp, #56	; 0x38
   df520:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   df522:	4606      	mov	r6, r0
   df524:	4617      	mov	r7, r2
   df526:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   df528:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   df52c:	462a      	mov	r2, r5
   df52e:	4629      	mov	r1, r5
   df530:	f7ff faac 	bl	dea8c <netdb_getaddrinfo>
   df534:	2800      	cmp	r0, #0
   df536:	db1f      	blt.n	df578 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   df538:	9b01      	ldr	r3, [sp, #4]
   df53a:	b1fb      	cbz	r3, df57c <_ZN3UDP11beginPacketEPKct+0x64>
   df53c:	695b      	ldr	r3, [r3, #20]
   df53e:	b1eb      	cbz	r3, df57c <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   df540:	a802      	add	r0, sp, #8
   df542:	f000 ff23 	bl	e038c <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   df546:	9b01      	ldr	r3, [sp, #4]
   df548:	462a      	mov	r2, r5
   df54a:	6958      	ldr	r0, [r3, #20]
   df54c:	a902      	add	r1, sp, #8
   df54e:	f7ff ff9f 	bl	df490 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   df552:	a802      	add	r0, sp, #8
   df554:	f000 ff3a 	bl	e03cc <_ZNK9IPAddresscvbEv>
        if (addr) {
   df558:	b180      	cbz	r0, df57c <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   df55a:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   df55c:	ad03      	add	r5, sp, #12
   df55e:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   df562:	4b0b      	ldr	r3, [pc, #44]	; (df590 <_ZN3UDP11beginPacketEPKct+0x78>)
   df564:	9308      	str	r3, [sp, #32]
   df566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   df568:	ac09      	add	r4, sp, #36	; 0x24
   df56a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   df56c:	682b      	ldr	r3, [r5, #0]
   df56e:	7023      	strb	r3, [r4, #0]
   df570:	463a      	mov	r2, r7
   df572:	a908      	add	r1, sp, #32
   df574:	4630      	mov	r0, r6
   df576:	47c0      	blx	r8
   df578:	4604      	mov	r4, r0
   df57a:	e001      	b.n	df580 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   df57c:	f04f 34ff 	mov.w	r4, #4294967295
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   df580:	9801      	ldr	r0, [sp, #4]
   df582:	f7ff fa7b 	bl	dea7c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   df586:	4620      	mov	r0, r4
   df588:	b00e      	add	sp, #56	; 0x38
   df58a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   df58e:	bf00      	nop
   df590:	000e4718 	.word	0x000e4718

000df594 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   df594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   df598:	f8d0 8014 	ldr.w	r8, [r0, #20]
   df59c:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   df5a0:	b08c      	sub	sp, #48	; 0x30
   df5a2:	4605      	mov	r5, r0
   df5a4:	460c      	mov	r4, r1
   df5a6:	4617      	mov	r7, r2
   df5a8:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   df5aa:	db00      	blt.n	df5ae <_ZN3UDP13receivePacketEPhjm+0x1a>
   df5ac:	b911      	cbnz	r1, df5b4 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   df5ae:	f04f 30ff 	mov.w	r0, #4294967295
   df5b2:	e035      	b.n	df620 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   df5b4:	f04f 0a1c 	mov.w	sl, #28
   df5b8:	ae05      	add	r6, sp, #20
   df5ba:	4652      	mov	r2, sl
   df5bc:	2100      	movs	r1, #0
   df5be:	4630      	mov	r0, r6
   df5c0:	f002 fdbc 	bl	e213c <memset>
        socklen_t slen = sizeof(saddr);
   df5c4:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   df5c8:	f1b9 0f00 	cmp.w	r9, #0
   df5cc:	d014      	beq.n	df5f8 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   df5ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   df5d2:	fbb9 f1f2 	udiv	r1, r9, r2
   df5d6:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   df5d8:	fb02 9111 	mls	r1, r2, r1, r9
   df5dc:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   df5de:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   df5e0:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   df5e2:	9300      	str	r3, [sp, #0]
   df5e4:	f241 0206 	movw	r2, #4102	; 0x1006
   df5e8:	ab03      	add	r3, sp, #12
   df5ea:	f640 71ff 	movw	r1, #4095	; 0xfff
   df5ee:	4640      	mov	r0, r8
   df5f0:	f7ff fc0c 	bl	dee0c <sock_setsockopt>
            if (ret) {
   df5f4:	b108      	cbz	r0, df5fa <_ZN3UDP13receivePacketEPhjm+0x66>
   df5f6:	e013      	b.n	df620 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   df5f8:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   df5fa:	ab02      	add	r3, sp, #8
   df5fc:	9301      	str	r3, [sp, #4]
   df5fe:	4621      	mov	r1, r4
   df600:	4603      	mov	r3, r0
   df602:	9600      	str	r6, [sp, #0]
   df604:	463a      	mov	r2, r7
   df606:	6968      	ldr	r0, [r5, #20]
   df608:	f7ff fc10 	bl	dee2c <sock_recvfrom>
        if (ret >= 0) {
   df60c:	1e04      	subs	r4, r0, #0
   df60e:	db06      	blt.n	df61e <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   df610:	f105 0234 	add.w	r2, r5, #52	; 0x34
   df614:	f105 011c 	add.w	r1, r5, #28
   df618:	4630      	mov	r0, r6
   df61a:	f7ff ff39 	bl	df490 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   df61e:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   df620:	b00c      	add	sp, #48	; 0x30
   df622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000df626 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   df626:	b538      	push	{r3, r4, r5, lr}
   df628:	4605      	mov	r5, r0
   df62a:	4614      	mov	r4, r2
   df62c:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   df62e:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   df630:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   df632:	d111      	bne.n	df658 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   df634:	231c      	movs	r3, #28
   df636:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   df638:	230a      	movs	r3, #10
   df63a:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   df63c:	f7ff fb56 	bl	decec <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   df640:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   df642:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   df646:	1d2b      	adds	r3, r5, #4
   df648:	3514      	adds	r5, #20
   df64a:	f853 2b04 	ldr.w	r2, [r3], #4
   df64e:	f844 2b04 	str.w	r2, [r4], #4
   df652:	42ab      	cmp	r3, r5
   df654:	d1f9      	bne.n	df64a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   df656:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   df658:	2b04      	cmp	r3, #4
   df65a:	d10a      	bne.n	df672 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   df65c:	2310      	movs	r3, #16
   df65e:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   df660:	2302      	movs	r3, #2
   df662:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   df664:	f7ff fb42 	bl	decec <inet_htons>
   df668:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   df66a:	6868      	ldr	r0, [r5, #4]
   df66c:	f7ff fb2e 	bl	deccc <inet_htonl>
   df670:	6060      	str	r0, [r4, #4]
   df672:	bd38      	pop	{r3, r4, r5, pc}

000df674 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   df674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   df678:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   df67a:	ac03      	add	r4, sp, #12
   df67c:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   df67e:	4699      	mov	r9, r3
   df680:	4606      	mov	r6, r0
   df682:	460f      	mov	r7, r1
   df684:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   df686:	2100      	movs	r1, #0
   df688:	462a      	mov	r2, r5
   df68a:	4620      	mov	r0, r4
   df68c:	f002 fd56 	bl	e213c <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   df690:	4622      	mov	r2, r4
   df692:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   df696:	4648      	mov	r0, r9
   df698:	f7ff ffc5 	bl	df626 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   df69c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   df6a0:	b143      	cbz	r3, df6b4 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   df6a2:	e88d 0030 	stmia.w	sp, {r4, r5}
   df6a6:	2300      	movs	r3, #0
   df6a8:	4642      	mov	r2, r8
   df6aa:	4639      	mov	r1, r7
   df6ac:	6970      	ldr	r0, [r6, #20]
   df6ae:	f7ff fbc5 	bl	dee3c <sock_sendto>
   df6b2:	e001      	b.n	df6b8 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   df6b4:	f04f 30ff 	mov.w	r0, #4294967295
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   df6b8:	b00b      	add	sp, #44	; 0x2c
   df6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000df6be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df6be:	b5f0      	push	{r4, r5, r6, r7, lr}
   df6c0:	b091      	sub	sp, #68	; 0x44
   df6c2:	460c      	mov	r4, r1
   df6c4:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   df6c6:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df6c8:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   df6ca:	a809      	add	r0, sp, #36	; 0x24
   df6cc:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   df6ce:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   df6d0:	f002 fd34 	bl	e213c <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   df6d4:	aa09      	add	r2, sp, #36	; 0x24
   df6d6:	2100      	movs	r1, #0
   df6d8:	4620      	mov	r0, r4
   df6da:	f7ff ffa4 	bl	df626 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   df6de:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   df6e2:	2b02      	cmp	r3, #2
   df6e4:	d12e      	bne.n	df744 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   df6e6:	2300      	movs	r3, #0
   df6e8:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   df6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   df6ec:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   df6ee:	b1dd      	cbz	r5, df728 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   df6f0:	a902      	add	r1, sp, #8
   df6f2:	4628      	mov	r0, r5
   df6f4:	f7ff fa2a 	bl	deb4c <if_get_by_index>
   df6f8:	b9b0      	cbnz	r0, df728 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   df6fa:	a910      	add	r1, sp, #64	; 0x40
   df6fc:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   df700:	9802      	ldr	r0, [sp, #8]
   df702:	f7ff fa2b 	bl	deb5c <if_get_addrs>
   df706:	b960      	cbnz	r0, df722 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   df708:	9b03      	ldr	r3, [sp, #12]
   df70a:	b153      	cbz	r3, df722 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   df70c:	68da      	ldr	r2, [r3, #12]
   df70e:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   df710:	7851      	ldrb	r1, [r2, #1]
   df712:	2902      	cmp	r1, #2
   df714:	d103      	bne.n	df71e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   df716:	6852      	ldr	r2, [r2, #4]
   df718:	b10a      	cbz	r2, df71e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   df71a:	9205      	str	r2, [sp, #20]
   df71c:	e001      	b.n	df722 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   df71e:	681b      	ldr	r3, [r3, #0]
   df720:	e7f3      	b.n	df70a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   df722:	9803      	ldr	r0, [sp, #12]
   df724:	f7ff fa22 	bl	deb6c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   df728:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   df72a:	f04f 0308 	mov.w	r3, #8
   df72e:	9300      	str	r3, [sp, #0]
   df730:	bf18      	it	ne
   df732:	2203      	movne	r2, #3
   df734:	ab04      	add	r3, sp, #16
   df736:	bf08      	it	eq
   df738:	2204      	moveq	r2, #4
   df73a:	2100      	movs	r1, #0
   df73c:	4630      	mov	r0, r6
   df73e:	f7ff fb65 	bl	dee0c <sock_setsockopt>
   df742:	e01e      	b.n	df782 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   df744:	2b0a      	cmp	r3, #10
   df746:	d11a      	bne.n	df77e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   df748:	ac04      	add	r4, sp, #16
   df74a:	2214      	movs	r2, #20
   df74c:	2100      	movs	r1, #0
   df74e:	4620      	mov	r0, r4
   df750:	f002 fcf4 	bl	e213c <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   df754:	ab0b      	add	r3, sp, #44	; 0x2c
   df756:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df758:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   df75a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df75e:	f04f 0314 	mov.w	r3, #20
   df762:	9300      	str	r3, [sp, #0]
   df764:	bf18      	it	ne
   df766:	220c      	movne	r2, #12
   df768:	4623      	mov	r3, r4
   df76a:	bf08      	it	eq
   df76c:	220d      	moveq	r2, #13
   df76e:	2129      	movs	r1, #41	; 0x29
   df770:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   df772:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   df774:	f7ff fb4a 	bl	dee0c <sock_setsockopt>
   df778:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   df77c:	e001      	b.n	df782 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   df77e:	f04f 30ff 	mov.w	r0, #4294967295
}
   df782:	b011      	add	sp, #68	; 0x44
   df784:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000df788 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   df788:	b538      	push	{r3, r4, r5, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   df78a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   df78e:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   df790:	4b0b      	ldr	r3, [pc, #44]	; (df7c0 <_ZN3UDPC1Ev+0x38>)
   df792:	f103 0208 	add.w	r2, r3, #8
   df796:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   df798:	2500      	movs	r5, #0
   df79a:	6103      	str	r3, [r0, #16]
   df79c:	f04f 33ff 	mov.w	r3, #4294967295
    return -1;
}

} // anonymous

UDP::UDP()
   df7a0:	4604      	mov	r4, r0
   df7a2:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   df7a4:	6002      	str	r2, [r0, #0]
   df7a6:	6143      	str	r3, [r0, #20]
   df7a8:	301c      	adds	r0, #28
   df7aa:	f000 fdef 	bl	e038c <_ZN9IPAddressC1Ev>
   df7ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   df7b2:	86e5      	strh	r5, [r4, #54]	; 0x36
   df7b4:	8725      	strh	r5, [r4, #56]	; 0x38
   df7b6:	63e5      	str	r5, [r4, #60]	; 0x3c
   df7b8:	6423      	str	r3, [r4, #64]	; 0x40
   df7ba:	6465      	str	r5, [r4, #68]	; 0x44
}
   df7bc:	4620      	mov	r0, r4
   df7be:	bd38      	pop	{r3, r4, r5, pc}
   df7c0:	000e4580 	.word	0x000e4580

000df7c4 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   df7c4:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   df7c6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   df7ca:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   df7cc:	b123      	cbz	r3, df7d8 <_ZN3UDP13releaseBufferEv+0x14>
   df7ce:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   df7d0:	b110      	cbz	r0, df7d8 <_ZN3UDP13releaseBufferEv+0x14>
        delete _buffer;
   df7d2:	2101      	movs	r1, #1
   df7d4:	f001 fd42 	bl	e125c <_ZdlPvj>
    }
    _buffer = NULL;
   df7d8:	2300      	movs	r3, #0
   df7da:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   df7dc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   df7e0:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df7e2:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   df7e4:	8723      	strh	r3, [r4, #56]	; 0x38
   df7e6:	bd10      	pop	{r4, pc}

000df7e8 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   df7e8:	b570      	push	{r4, r5, r6, lr}
   df7ea:	4604      	mov	r4, r0
   df7ec:	4616      	mov	r6, r2
   df7ee:	460d      	mov	r5, r1
    releaseBuffer();
   df7f0:	f7ff ffe8 	bl	df7c4 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   df7f4:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   df7f6:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   df7f8:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   df7fa:	b93e      	cbnz	r6, df80c <_ZN3UDP9setBufferEjPh+0x24>
   df7fc:	b135      	cbz	r5, df80c <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   df7fe:	4628      	mov	r0, r5
   df800:	f7f4 fc4d 	bl	d409e <_Znaj>
        _buffer_allocated = true;
   df804:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   df806:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   df808:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   df80c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   df80e:	b103      	cbz	r3, df812 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   df810:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   df812:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   df814:	3000      	adds	r0, #0
   df816:	bf18      	it	ne
   df818:	2001      	movne	r0, #1
   df81a:	bd70      	pop	{r4, r5, r6, pc}

000df81c <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   df81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df81e:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   df820:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   df822:	4605      	mov	r5, r0
   df824:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   df826:	b91a      	cbnz	r2, df830 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   df828:	6c01      	ldr	r1, [r0, #64]	; 0x40
   df82a:	b109      	cbz	r1, df830 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   df82c:	f7ff ffdc 	bl	df7e8 <_ZN3UDP9setBufferEjPh>
   df830:	3404      	adds	r4, #4
   df832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   df834:	f105 0620 	add.w	r6, r5, #32
   df838:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   df83a:	6823      	ldr	r3, [r4, #0]
   df83c:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df83e:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   df840:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df842:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   df844:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   df846:	6c28      	ldr	r0, [r5, #64]	; 0x40
   df848:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000df84a <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   df84a:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   df84c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   df84e:	4604      	mov	r4, r0
   df850:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   df852:	b91a      	cbnz	r2, df85c <_ZN3UDP11parsePacketEm+0x12>
   df854:	6c01      	ldr	r1, [r0, #64]	; 0x40
   df856:	b109      	cbz	r1, df85c <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   df858:	f7ff ffc6 	bl	df7e8 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   df85c:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   df85e:	2200      	movs	r2, #0
   df860:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   df862:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   df864:	b149      	cbz	r1, df87a <_ZN3UDP11parsePacketEm+0x30>
   df866:	6c22      	ldr	r2, [r4, #64]	; 0x40
   df868:	b13a      	cbz	r2, df87a <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   df86a:	6823      	ldr	r3, [r4, #0]
   df86c:	4620      	mov	r0, r4
   df86e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   df870:	4633      	mov	r3, r6
   df872:	47a8      	blx	r5
        if (result > 0) {
   df874:	2800      	cmp	r0, #0
            _total = result;
   df876:	bfc8      	it	gt
   df878:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   df87a:	6823      	ldr	r3, [r4, #0]
   df87c:	4620      	mov	r0, r4
   df87e:	691b      	ldr	r3, [r3, #16]
}
   df880:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   df884:	4718      	bx	r3
	...

000df888 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   df888:	b510      	push	{r4, lr}
   df88a:	4b07      	ldr	r3, [pc, #28]	; (df8a8 <_ZN3UDPD1Ev+0x20>)
   df88c:	f103 0208 	add.w	r2, r3, #8
   df890:	336c      	adds	r3, #108	; 0x6c
   df892:	4604      	mov	r4, r0
   df894:	6002      	str	r2, [r0, #0]
   df896:	6103      	str	r3, [r0, #16]
   df898:	f7ff fd6b 	bl	df372 <_ZN3UDP4stopEv>
   df89c:	4620      	mov	r0, r4
   df89e:	f7ff ff91 	bl	df7c4 <_ZN3UDP13releaseBufferEv>
   df8a2:	4620      	mov	r0, r4
   df8a4:	bd10      	pop	{r4, pc}
   df8a6:	bf00      	nop
   df8a8:	000e4580 	.word	0x000e4580

000df8ac <_ZN3UDPD0Ev>:
   df8ac:	b510      	push	{r4, lr}
   df8ae:	4604      	mov	r4, r0
   df8b0:	f7ff ffea 	bl	df888 <_ZN3UDPD1Ev>
   df8b4:	4620      	mov	r0, r4
   df8b6:	214c      	movs	r1, #76	; 0x4c
   df8b8:	f001 fcd0 	bl	e125c <_ZdlPvj>
   df8bc:	4620      	mov	r0, r4
   df8be:	bd10      	pop	{r4, pc}

000df8c0 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   df8c0:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   df8c2:	6940      	ldr	r0, [r0, #20]
   df8c4:	2800      	cmp	r0, #0
   df8c6:	db04      	blt.n	df8d2 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   df8c8:	2301      	movs	r3, #1
   df8ca:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   df8ce:	f7ff bef6 	b.w	df6be <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   df8d2:	f04f 30ff 	mov.w	r0, #4294967295
   df8d6:	4770      	bx	lr

000df8d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   df8d8:	b510      	push	{r4, lr}
   df8da:	4604      	mov	r4, r0
{
	free(buffer);
   df8dc:	6800      	ldr	r0, [r0, #0]
   df8de:	f7ff fc23 	bl	df128 <free>
}
   df8e2:	4620      	mov	r0, r4
   df8e4:	bd10      	pop	{r4, pc}

000df8e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   df8e6:	b510      	push	{r4, lr}
   df8e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   df8ea:	6800      	ldr	r0, [r0, #0]
   df8ec:	b108      	cbz	r0, df8f2 <_ZN6String10invalidateEv+0xc>
   df8ee:	f7ff fc1b 	bl	df128 <free>
	buffer = NULL;
   df8f2:	2300      	movs	r3, #0
   df8f4:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   df8f6:	60a3      	str	r3, [r4, #8]
   df8f8:	6063      	str	r3, [r4, #4]
   df8fa:	bd10      	pop	{r4, pc}

000df8fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   df8fc:	b538      	push	{r3, r4, r5, lr}
   df8fe:	4604      	mov	r4, r0
   df900:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   df902:	6800      	ldr	r0, [r0, #0]
   df904:	3101      	adds	r1, #1
   df906:	f7ff fc17 	bl	df138 <realloc>
	if (newbuffer) {
   df90a:	b110      	cbz	r0, df912 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   df90c:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   df910:	2001      	movs	r0, #1
	}
	return 0;
}
   df912:	bd38      	pop	{r3, r4, r5, pc}

000df914 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   df914:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   df916:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   df918:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   df91a:	b113      	cbz	r3, df922 <_ZN6String7reserveEj+0xe>
   df91c:	6843      	ldr	r3, [r0, #4]
   df91e:	428b      	cmp	r3, r1
   df920:	d207      	bcs.n	df932 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   df922:	4620      	mov	r0, r4
   df924:	f7ff ffea 	bl	df8fc <_ZN6String12changeBufferEj>
   df928:	b120      	cbz	r0, df934 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   df92a:	68a3      	ldr	r3, [r4, #8]
   df92c:	b90b      	cbnz	r3, df932 <_ZN6String7reserveEj+0x1e>
   df92e:	6822      	ldr	r2, [r4, #0]
   df930:	7013      	strb	r3, [r2, #0]
   df932:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   df934:	bd10      	pop	{r4, pc}

000df936 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   df936:	b570      	push	{r4, r5, r6, lr}
   df938:	460e      	mov	r6, r1
	if (!reserve(length)) {
   df93a:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   df93c:	4604      	mov	r4, r0
   df93e:	4615      	mov	r5, r2
	if (!reserve(length)) {
   df940:	f7ff ffe8 	bl	df914 <_ZN6String7reserveEj>
   df944:	b918      	cbnz	r0, df94e <_ZN6String4copyEPKcj+0x18>
		invalidate();
   df946:	4620      	mov	r0, r4
   df948:	f7ff ffcd 	bl	df8e6 <_ZN6String10invalidateEv>
		return *this;
   df94c:	e009      	b.n	df962 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   df94e:	462a      	mov	r2, r5
   df950:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   df952:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   df954:	6820      	ldr	r0, [r4, #0]
   df956:	f002 fbe6 	bl	e2126 <memcpy>
	buffer[len] = 0;
   df95a:	6822      	ldr	r2, [r4, #0]
   df95c:	68a3      	ldr	r3, [r4, #8]
   df95e:	2100      	movs	r1, #0
   df960:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   df962:	4620      	mov	r0, r4
   df964:	bd70      	pop	{r4, r5, r6, pc}

000df966 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   df966:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   df968:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   df96a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   df96c:	6003      	str	r3, [r0, #0]
	capacity = 0;
   df96e:	6043      	str	r3, [r0, #4]
	len = 0;
   df970:	6083      	str	r3, [r0, #8]
	flags = 0;
   df972:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   df974:	460d      	mov	r5, r1
   df976:	b139      	cbz	r1, df988 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   df978:	4608      	mov	r0, r1
   df97a:	f002 fc3c 	bl	e21f6 <strlen>
   df97e:	4629      	mov	r1, r5
   df980:	4602      	mov	r2, r0
   df982:	4620      	mov	r0, r4
   df984:	f7ff ffd7 	bl	df936 <_ZN6String4copyEPKcj>
}
   df988:	4620      	mov	r0, r4
   df98a:	bd38      	pop	{r3, r4, r5, pc}

000df98c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   df98c:	b510      	push	{r4, lr}
   df98e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   df990:	6800      	ldr	r0, [r0, #0]
   df992:	b108      	cbz	r0, df998 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   df994:	f7ff f96a 	bl	dec6c <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   df998:	4620      	mov	r0, r4
   df99a:	bd10      	pop	{r4, pc}

000df99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   df99c:	680b      	ldr	r3, [r1, #0]
   df99e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   df9a0:	b113      	cbz	r3, df9a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   df9a2:	685a      	ldr	r2, [r3, #4]
   df9a4:	3201      	adds	r2, #1
   df9a6:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   df9a8:	4770      	bx	lr
	...

000df9ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   df9ac:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   df9ae:	4c06      	ldr	r4, [pc, #24]	; (df9c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   df9b0:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   df9b2:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   df9b4:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   df9b6:	f7ff f951 	bl	dec5c <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   df9ba:	4620      	mov	r0, r4
   df9bc:	4a03      	ldr	r2, [pc, #12]	; (df9cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   df9be:	4904      	ldr	r1, [pc, #16]	; (df9d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   df9c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   df9c4:	f001 bc3c 	b.w	e1240 <__aeabi_atexit>
   df9c8:	2003e384 	.word	0x2003e384
   df9cc:	2003e2dc 	.word	0x2003e2dc
   df9d0:	000df98d 	.word	0x000df98d

000df9d4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   df9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   df9d6:	4606      	mov	r6, r0
   df9d8:	460d      	mov	r5, r1
   df9da:	188f      	adds	r7, r1, r2
  size_t n = 0;
   df9dc:	2400      	movs	r4, #0
  while (size--) {
   df9de:	42bd      	cmp	r5, r7
   df9e0:	d00c      	beq.n	df9fc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   df9e2:	6833      	ldr	r3, [r6, #0]
   df9e4:	f815 1b01 	ldrb.w	r1, [r5], #1
   df9e8:	689b      	ldr	r3, [r3, #8]
   df9ea:	4630      	mov	r0, r6
   df9ec:	4798      	blx	r3
     if (chunk>=0)
   df9ee:	2800      	cmp	r0, #0
   df9f0:	db01      	blt.n	df9f6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   df9f2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   df9f4:	e7f3      	b.n	df9de <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   df9f6:	2c00      	cmp	r4, #0
   df9f8:	bf08      	it	eq
   df9fa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   df9fc:	4620      	mov	r0, r4
   df9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000dfa00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   dfa00:	b570      	push	{r4, r5, r6, lr}
   dfa02:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   dfa04:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   dfa06:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   dfa08:	b149      	cbz	r1, dfa1e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   dfa0a:	f002 fbf4 	bl	e21f6 <strlen>
   dfa0e:	682b      	ldr	r3, [r5, #0]
   dfa10:	4602      	mov	r2, r0
   dfa12:	4621      	mov	r1, r4
   dfa14:	4628      	mov	r0, r5
   dfa16:	68db      	ldr	r3, [r3, #12]
    }
   dfa18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   dfa1c:	4718      	bx	r3
    }
   dfa1e:	bd70      	pop	{r4, r5, r6, pc}

000dfa20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   dfa20:	6803      	ldr	r3, [r0, #0]
   dfa22:	689b      	ldr	r3, [r3, #8]
   dfa24:	4718      	bx	r3

000dfa26 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   dfa26:	b530      	push	{r4, r5, lr}
   dfa28:	b08b      	sub	sp, #44	; 0x2c
   dfa2a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   dfa2c:	2100      	movs	r1, #0
   dfa2e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   dfa32:	2a01      	cmp	r2, #1
   dfa34:	bf98      	it	ls
   dfa36:	220a      	movls	r2, #10
   dfa38:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   dfa3c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   dfa40:	fb05 3312 	mls	r3, r5, r2, r3
   dfa44:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   dfa48:	2b09      	cmp	r3, #9
   dfa4a:	bf94      	ite	ls
   dfa4c:	3330      	addls	r3, #48	; 0x30
   dfa4e:	3337      	addhi	r3, #55	; 0x37
   dfa50:	b2db      	uxtb	r3, r3
   dfa52:	4621      	mov	r1, r4
   dfa54:	f804 3901 	strb.w	r3, [r4], #-1
   dfa58:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   dfa5a:	2d00      	cmp	r5, #0
   dfa5c:	d1ee      	bne.n	dfa3c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   dfa5e:	f7ff ffcf 	bl	dfa00 <_ZN5Print5writeEPKc>
}
   dfa62:	b00b      	add	sp, #44	; 0x2c
   dfa64:	bd30      	pop	{r4, r5, pc}

000dfa66 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   dfa66:	6800      	ldr	r0, [r0, #0]
   dfa68:	f7ff b908 	b.w	dec7c <os_mutex_recursive_lock>

000dfa6c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   dfa6c:	4b01      	ldr	r3, [pc, #4]	; (dfa74 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   dfa6e:	4a02      	ldr	r2, [pc, #8]	; (dfa78 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   dfa70:	601a      	str	r2, [r3, #0]
   dfa72:	4770      	bx	lr
   dfa74:	2003e388 	.word	0x2003e388
   dfa78:	000e4663 	.word	0x000e4663

000dfa7c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dfa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   dfa7e:	4b14      	ldr	r3, [pc, #80]	; (dfad0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dfa80:	4f14      	ldr	r7, [pc, #80]	; (dfad4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dfa82:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   dfa84:	4b14      	ldr	r3, [pc, #80]	; (dfad8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   dfa86:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   dfa88:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   dfa8a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   dfa8c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   dfa8e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   dfa90:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   dfa92:	d01b      	beq.n	dfacc <_ZL22Refresh_UnixTime_Cachel+0x50>
   dfa94:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   dfa96:	ad01      	add	r5, sp, #4
   dfa98:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   dfa9c:	f002 fa38 	bl	e1f10 <localtime>
	calendar_time->tm_year += 1900;
   dfaa0:	6943      	ldr	r3, [r0, #20]
   dfaa2:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   dfaa6:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   dfaa8:	4604      	mov	r4, r0
   dfaaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dfaac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dfaae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   dfab0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   dfab2:	f8d4 e000 	ldr.w	lr, [r4]
   dfab6:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dfaba:	ad01      	add	r5, sp, #4
   dfabc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dfabe:	4c07      	ldr	r4, [pc, #28]	; (dfadc <_ZL22Refresh_UnixTime_Cachel+0x60>)
   dfac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   dfac2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   dfac4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   dfac6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   dfac8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   dfacc:	b00b      	add	sp, #44	; 0x2c
   dface:	bdf0      	pop	{r4, r5, r6, r7, pc}
   dfad0:	2003e3bc 	.word	0x2003e3bc
   dfad4:	2003e3b8 	.word	0x2003e3b8
   dfad8:	2003e3b4 	.word	0x2003e3b4
   dfadc:	2003e38c 	.word	0x2003e38c

000dfae0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   dfae0:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfae2:	2000      	movs	r0, #0
   dfae4:	f7ff fb08 	bl	df0f8 <spark_sync_time_pending>
   dfae8:	b128      	cbz	r0, dfaf6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   dfaea:	f7ff fae5 	bl	df0b8 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   dfaee:	f080 0001 	eor.w	r0, r0, #1
   dfaf2:	b2c0      	uxtb	r0, r0
   dfaf4:	bd08      	pop	{r3, pc}
   dfaf6:	2001      	movs	r0, #1
    }
   dfaf8:	bd08      	pop	{r3, pc}
	...

000dfafc <_ZN9TimeClass12hourFormat12El>:
	return hourFormat12(now());
}

/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
   dfafc:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
   dfafe:	f7ff ffbd 	bl	dfa7c <_ZL22Refresh_UnixTime_Cachel>
	if(calendar_time_cache.tm_hour == 0)
   dfb02:	4b04      	ldr	r3, [pc, #16]	; (dfb14 <_ZN9TimeClass12hourFormat12El+0x18>)
   dfb04:	6898      	ldr	r0, [r3, #8]
   dfb06:	b118      	cbz	r0, dfb10 <_ZN9TimeClass12hourFormat12El+0x14>
		return 12;	//midnight
	else if( calendar_time_cache.tm_hour > 12)
   dfb08:	280c      	cmp	r0, #12
   dfb0a:	dd02      	ble.n	dfb12 <_ZN9TimeClass12hourFormat12El+0x16>
		return calendar_time_cache.tm_hour - 12 ;
   dfb0c:	380c      	subs	r0, #12
   dfb0e:	bd08      	pop	{r3, pc}
/* the hour for the given time in 12 hour format */
int TimeClass::hourFormat12(time_t t)
{
	Refresh_UnixTime_Cache(t);
	if(calendar_time_cache.tm_hour == 0)
		return 12;	//midnight
   dfb10:	200c      	movs	r0, #12
	else if( calendar_time_cache.tm_hour > 12)
		return calendar_time_cache.tm_hour - 12 ;
	else
		return calendar_time_cache.tm_hour ;
}
   dfb12:	bd08      	pop	{r3, pc}
   dfb14:	2003e38c 	.word	0x2003e38c

000dfb18 <_ZN9TimeClass4zoneEf>:
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
	if(GMT_Offset < -12 || GMT_Offset > 14)
   dfb18:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
   dfb1c:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dfb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dfb24:	d40f      	bmi.n	dfb46 <_ZN9TimeClass4zoneEf+0x2e>
   dfb26:	eef2 7a0c 	vmov.f32	s15, #44	; 0x41600000  14.0
   dfb2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
   dfb2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   dfb32:	dc08      	bgt.n	dfb46 <_ZN9TimeClass4zoneEf+0x2e>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
   dfb34:	eddf 7a04 	vldr	s15, [pc, #16]	; dfb48 <_ZN9TimeClass4zoneEf+0x30>
   dfb38:	4b04      	ldr	r3, [pc, #16]	; (dfb4c <_ZN9TimeClass4zoneEf+0x34>)
   dfb3a:	ee20 0a27 	vmul.f32	s0, s0, s15
   dfb3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
   dfb42:	ed83 0a00 	vstr	s0, [r3]
   dfb46:	4770      	bx	lr
   dfb48:	45610000 	.word	0x45610000
   dfb4c:	2003e3bc 	.word	0x2003e3bc

000dfb50 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   dfb50:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   dfb52:	2000      	movs	r0, #0
   dfb54:	f7ff f85a 	bl	dec0c <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   dfb58:	4604      	mov	r4, r0
   dfb5a:	b968      	cbnz	r0, dfb78 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   dfb5c:	f7ff f9ee 	bl	def3c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   dfb60:	2801      	cmp	r0, #1
   dfb62:	d10b      	bne.n	dfb7c <_ZN9TimeClass7isValidEv+0x2c>
   dfb64:	4620      	mov	r0, r4
   dfb66:	f7ff fa19 	bl	def9c <system_thread_get_state>
   dfb6a:	b938      	cbnz	r0, dfb7c <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   dfb6c:	f7ff ffb8 	bl	dfae0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   dfb70:	b930      	cbnz	r0, dfb80 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   dfb72:	f7ff fa99 	bl	df0a8 <spark_process>
   dfb76:	e7f9      	b.n	dfb6c <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   dfb78:	2001      	movs	r0, #1
   dfb7a:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   dfb7c:	2000      	movs	r0, #0
   dfb7e:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   dfb80:	f7ff ffae 	bl	dfae0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   dfb84:	2000      	movs	r0, #0
   dfb86:	f7ff f841 	bl	dec0c <HAL_RTC_Time_Is_Valid>
   dfb8a:	3000      	adds	r0, #0
   dfb8c:	bf18      	it	ne
   dfb8e:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   dfb90:	bd10      	pop	{r4, pc}

000dfb92 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   dfb92:	b508      	push	{r3, lr}
    (void)isValid();
   dfb94:	f7ff ffdc 	bl	dfb50 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   dfb98:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   dfb9c:	f7ff b816 	b.w	debcc <HAL_RTC_Get_UnixTime>

000dfba0 <_ZN9TimeClass12hourFormat12Ev>:
	return calendar_time_cache.tm_hour;
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
   dfba0:	b508      	push	{r3, lr}
	return hourFormat12(now());
   dfba2:	f7ff fff6 	bl	dfb92 <_ZN9TimeClass3nowEv>
}
   dfba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current hour in 12 hour format */
int TimeClass::hourFormat12()
{
	return hourFormat12(now());
   dfbaa:	f7ff bfa7 	b.w	dfafc <_ZN9TimeClass12hourFormat12El>
	...

000dfbb0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
   dfbb0:	b508      	push	{r3, lr}
	return minute(now());
   dfbb2:	f7ff ffee 	bl	dfb92 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
   dfbb6:	f7ff ff61 	bl	dfa7c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
   dfbba:	4b01      	ldr	r3, [pc, #4]	; (dfbc0 <_ZN9TimeClass6minuteEv+0x10>)
   dfbbc:	6858      	ldr	r0, [r3, #4]
   dfbbe:	bd08      	pop	{r3, pc}
   dfbc0:	2003e38c 	.word	0x2003e38c

000dfbc4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   dfbc4:	4b02      	ldr	r3, [pc, #8]	; (dfbd0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   dfbc6:	681a      	ldr	r2, [r3, #0]
   dfbc8:	4b02      	ldr	r3, [pc, #8]	; (dfbd4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   dfbca:	601a      	str	r2, [r3, #0]
   dfbcc:	4770      	bx	lr
   dfbce:	bf00      	nop
   dfbd0:	2003e1ec 	.word	0x2003e1ec
   dfbd4:	2003e3b0 	.word	0x2003e3b0

000dfbd8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   dfbd8:	2100      	movs	r1, #0
   dfbda:	f7ff b9bf 	b.w	def5c <system_delay_ms>

000dfbde <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dfbde:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   dfbe0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   dfbe2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   dfbe4:	b113      	cbz	r3, dfbec <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   dfbe6:	2203      	movs	r2, #3
   dfbe8:	4601      	mov	r1, r0
   dfbea:	4798      	blx	r3
    }
   dfbec:	4620      	mov	r0, r4
   dfbee:	bd10      	pop	{r4, pc}

000dfbf0 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   dfbf0:	b510      	push	{r4, lr}
   dfbf2:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dfbf4:	f7ff fff3 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
   dfbf8:	4620      	mov	r0, r4
   dfbfa:	bd10      	pop	{r4, pc}

000dfbfc <_ZN8RGBClass7controlEb>:
{
    return LED_RGB_IsOverRidden();
}

void RGBClass::control(bool override)
{
   dfbfc:	b510      	push	{r4, lr}
   dfbfe:	4604      	mov	r4, r0

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dfc00:	f7ff f984 	bl	def0c <LED_RGB_IsOverRidden>
}

void RGBClass::control(bool override)
{
    if (override == controlled()) {
   dfc04:	4284      	cmp	r4, r0
   dfc06:	d008      	beq.n	dfc1a <_ZN8RGBClass7controlEb+0x1e>
        return;
    } else if (override) {
   dfc08:	b11c      	cbz	r4, dfc12 <_ZN8RGBClass7controlEb+0x16>
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
    }
}
   dfc0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void RGBClass::control(bool override)
{
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
   dfc0e:	f7ff b96d 	b.w	deeec <LED_Signaling_Start>
    } else {
        LED_Signaling_Stop();
    }
}
   dfc12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (override == controlled()) {
        return;
    } else if (override) {
        LED_Signaling_Start();
    } else {
        LED_Signaling_Stop();
   dfc16:	f7ff b971 	b.w	deefc <LED_Signaling_Stop>
   dfc1a:	bd10      	pop	{r4, pc}

000dfc1c <_ZN8RGBClass5colorEiii>:
void RGBClass::color(uint32_t rgb) {
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
   dfc1c:	b570      	push	{r4, r5, r6, lr}
   dfc1e:	4605      	mov	r5, r0
   dfc20:	460e      	mov	r6, r1
   dfc22:	4614      	mov	r4, r2

RGBClass RGB;

bool RGBClass::controlled(void)
{
    return LED_RGB_IsOverRidden();
   dfc24:	f7ff f972 	bl	def0c <LED_RGB_IsOverRidden>
    color((rgb>>16)&0xFF, (rgb>>8)&0xFF, (rgb)&0xFF);
}

void RGBClass::color(int red, int green, int blue)
{
    if (!controlled()) {
   dfc28:	b150      	cbz	r0, dfc40 <_ZN8RGBClass5colorEiii+0x24>
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
   dfc2a:	ea44 2006 	orr.w	r0, r4, r6, lsl #8
   dfc2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
   dfc32:	f7ff f953 	bl	deedc <LED_SetSignalingColor>
    LED_On(LED_RGB);
   dfc36:	20e7      	movs	r0, #231	; 0xe7
}
   dfc38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
{
    if (!controlled()) {
        return;
    }
    LED_SetSignalingColor(red << 16 | green << 8 | blue);
    LED_On(LED_RGB);
   dfc3c:	f7ff b96e 	b.w	def1c <LED_On>
   dfc40:	bd70      	pop	{r4, r5, r6, pc}

000dfc42 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   dfc42:	b513      	push	{r0, r1, r4, lr}
   dfc44:	460b      	mov	r3, r1
   dfc46:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dfc48:	c803      	ldmia	r0, {r0, r1}
   dfc4a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   dfc4e:	e893 0003 	ldmia.w	r3, {r0, r1}
   dfc52:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   dfc56:	e89d 0003 	ldmia.w	sp, {r0, r1}
   dfc5a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   dfc5e:	b002      	add	sp, #8
   dfc60:	bd10      	pop	{r4, pc}
	...

000dfc64 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dfc64:	4803      	ldr	r0, [pc, #12]	; (dfc74 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   dfc66:	4a04      	ldr	r2, [pc, #16]	; (dfc78 <_GLOBAL__sub_I_RGB+0x14>)
   dfc68:	4904      	ldr	r1, [pc, #16]	; (dfc7c <_GLOBAL__sub_I_RGB+0x18>)
   dfc6a:	2300      	movs	r3, #0
   dfc6c:	6083      	str	r3, [r0, #8]
   dfc6e:	f001 bae7 	b.w	e1240 <__aeabi_atexit>
   dfc72:	bf00      	nop
   dfc74:	2003e3c0 	.word	0x2003e3c0
   dfc78:	2003e2dc 	.word	0x2003e2dc
   dfc7c:	000dfbf1 	.word	0x000dfbf1

000dfc80 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   dfc80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   dfc82:	4b0c      	ldr	r3, [pc, #48]	; (dfcb4 <serialEventRun+0x34>)
   dfc84:	b133      	cbz	r3, dfc94 <serialEventRun+0x14>
   dfc86:	f000 fc2d 	bl	e04e4 <_Z16_fetch_usbserialv>
   dfc8a:	6803      	ldr	r3, [r0, #0]
   dfc8c:	691b      	ldr	r3, [r3, #16]
   dfc8e:	4798      	blx	r3
   dfc90:	2800      	cmp	r0, #0
   dfc92:	dc09      	bgt.n	dfca8 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   dfc94:	4b08      	ldr	r3, [pc, #32]	; (dfcb8 <serialEventRun+0x38>)
   dfc96:	b163      	cbz	r3, dfcb2 <serialEventRun+0x32>
   dfc98:	f000 fcbc 	bl	e0614 <_Z22__fetch_global_Serial1v>
   dfc9c:	6803      	ldr	r3, [r0, #0]
   dfc9e:	691b      	ldr	r3, [r3, #16]
   dfca0:	4798      	blx	r3
   dfca2:	2800      	cmp	r0, #0
   dfca4:	dc03      	bgt.n	dfcae <serialEventRun+0x2e>
   dfca6:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   dfca8:	f3af 8000 	nop.w
   dfcac:	e7f2      	b.n	dfc94 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   dfcae:	f3af 8000 	nop.w
   dfcb2:	bd08      	pop	{r3, pc}
	...

000dfcbc <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   dfcbc:	b508      	push	{r3, lr}
	serialEventRun();
   dfcbe:	f7ff ffdf 	bl	dfc80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   dfcc2:	f7fe ff7b 	bl	debbc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   dfcc6:	4b01      	ldr	r3, [pc, #4]	; (dfccc <_post_loop+0x10>)
   dfcc8:	6018      	str	r0, [r3, #0]
   dfcca:	bd08      	pop	{r3, pc}
   dfccc:	2003e700 	.word	0x2003e700

000dfcd0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   dfcd0:	4802      	ldr	r0, [pc, #8]	; (dfcdc <_Z33system_initialize_user_backup_ramv+0xc>)
   dfcd2:	4a03      	ldr	r2, [pc, #12]	; (dfce0 <_Z33system_initialize_user_backup_ramv+0x10>)
   dfcd4:	4903      	ldr	r1, [pc, #12]	; (dfce4 <_Z33system_initialize_user_backup_ramv+0x14>)
   dfcd6:	1a12      	subs	r2, r2, r0
   dfcd8:	f002 ba25 	b.w	e2126 <memcpy>
   dfcdc:	2003f400 	.word	0x2003f400
   dfce0:	2003f404 	.word	0x2003f404
   dfce4:	000e4c40 	.word	0x000e4c40

000dfce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   dfce8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dfcea:	2300      	movs	r3, #0
   dfcec:	9300      	str	r3, [sp, #0]
   dfcee:	461a      	mov	r2, r3
   dfcf0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dfcf4:	f7ff f964 	bl	defc0 <system_ctrl_set_result>
}
   dfcf8:	b003      	add	sp, #12
   dfcfa:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000dfd00 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   dfd00:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   dfd02:	8843      	ldrh	r3, [r0, #2]
   dfd04:	2b0a      	cmp	r3, #10
   dfd06:	d008      	beq.n	dfd1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   dfd08:	2b50      	cmp	r3, #80	; 0x50
   dfd0a:	d109      	bne.n	dfd20 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   dfd0c:	4b09      	ldr	r3, [pc, #36]	; (dfd34 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   dfd0e:	681b      	ldr	r3, [r3, #0]
   dfd10:	b13b      	cbz	r3, dfd22 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   dfd12:	b003      	add	sp, #12
   dfd14:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   dfd18:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   dfd1a:	f7ff ffe5 	bl	dfce8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   dfd1e:	e006      	b.n	dfd2e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   dfd20:	2300      	movs	r3, #0
   dfd22:	9300      	str	r3, [sp, #0]
   dfd24:	461a      	mov	r2, r3
   dfd26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   dfd2a:	f7ff f949 	bl	defc0 <system_ctrl_set_result>
        break;
    }
}
   dfd2e:	b003      	add	sp, #12
   dfd30:	f85d fb04 	ldr.w	pc, [sp], #4
   dfd34:	2003e3d0 	.word	0x2003e3d0

000dfd38 <module_user_init_hook>:

void module_user_init_hook()
{
   dfd38:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   dfd3a:	4c10      	ldr	r4, [pc, #64]	; (dfd7c <module_user_init_hook+0x44>)
   dfd3c:	4d10      	ldr	r5, [pc, #64]	; (dfd80 <module_user_init_hook+0x48>)
   dfd3e:	6823      	ldr	r3, [r4, #0]
   dfd40:	42ab      	cmp	r3, r5
   dfd42:	4b10      	ldr	r3, [pc, #64]	; (dfd84 <module_user_init_hook+0x4c>)
   dfd44:	bf0c      	ite	eq
   dfd46:	2201      	moveq	r2, #1
   dfd48:	2200      	movne	r2, #0
   dfd4a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   dfd4c:	d002      	beq.n	dfd54 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   dfd4e:	f7ff ffbf 	bl	dfcd0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   dfd52:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   dfd54:	f7fe ff12 	bl	deb7c <HAL_RNG_GetRandomNumber>
   dfd58:	4604      	mov	r4, r0
    srand(seed);
   dfd5a:	f002 f9f7 	bl	e214c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   dfd5e:	4b0a      	ldr	r3, [pc, #40]	; (dfd88 <module_user_init_hook+0x50>)
   dfd60:	b113      	cbz	r3, dfd68 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   dfd62:	4620      	mov	r0, r4
   dfd64:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   dfd68:	2100      	movs	r1, #0
   dfd6a:	4807      	ldr	r0, [pc, #28]	; (dfd88 <module_user_init_hook+0x50>)
   dfd6c:	f7ff f9cc 	bl	df108 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dfd70:	2100      	movs	r1, #0
   dfd72:	4806      	ldr	r0, [pc, #24]	; (dfd8c <module_user_init_hook+0x54>)
}
   dfd74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   dfd78:	f7ff b918 	b.w	defac <system_ctrl_set_app_request_handler>
   dfd7c:	2003f400 	.word	0x2003f400
   dfd80:	9a271c1e 	.word	0x9a271c1e
   dfd84:	2003e3d4 	.word	0x2003e3d4
   dfd88:	00000000 	.word	0x00000000
   dfd8c:	000dfd01 	.word	0x000dfd01

000dfd90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dfd90:	4770      	bx	lr

000dfd92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   dfd92:	2000      	movs	r0, #0
   dfd94:	4770      	bx	lr

000dfd96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   dfd96:	b510      	push	{r4, lr}
   dfd98:	2110      	movs	r1, #16
   dfd9a:	4604      	mov	r4, r0
   dfd9c:	f001 fa5e 	bl	e125c <_ZdlPvj>
   dfda0:	4620      	mov	r0, r4
   dfda2:	bd10      	pop	{r4, pc}

000dfda4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   dfda4:	b508      	push	{r3, lr}
      { delete this; }
   dfda6:	b108      	cbz	r0, dfdac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   dfda8:	f7ff fff5 	bl	dfd96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   dfdac:	bd08      	pop	{r3, pc}

000dfdae <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dfdae:	2200      	movs	r2, #0
   dfdb0:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   dfdb2:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   dfdb4:	f64f 729c 	movw	r2, #65436	; 0xff9c
   dfdb8:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dfdba:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   dfdbe:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   dfdc0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dfdc2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   dfdc4:	680c      	ldr	r4, [r1, #0]
   dfdc6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   dfdc8:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   dfdca:	bd10      	pop	{r4, pc}

000dfdcc <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   dfdcc:	b510      	push	{r4, lr}
   dfdce:	4604      	mov	r4, r0
    free((void*)msg_);
   dfdd0:	6800      	ldr	r0, [r0, #0]
   dfdd2:	f7ff f9a9 	bl	df128 <free>
}
   dfdd6:	4620      	mov	r0, r4
   dfdd8:	bd10      	pop	{r4, pc}

000dfdda <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   dfdda:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   dfddc:	68c4      	ldr	r4, [r0, #12]
   dfdde:	b1f4      	cbz	r4, dfe1e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   dfde0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   dfde2:	2b02      	cmp	r3, #2
   dfde4:	d103      	bne.n	dfdee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   dfde6:	f104 000c 	add.w	r0, r4, #12
   dfdea:	f7ff ffef 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   dfdee:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   dfdf0:	b135      	cbz	r5, dfe00 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dfdf2:	4628      	mov	r0, r5
   dfdf4:	f7ff fef3 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
   dfdf8:	2110      	movs	r1, #16
   dfdfa:	4628      	mov	r0, r5
   dfdfc:	f001 fa2e 	bl	e125c <_ZdlPvj>
   dfe00:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   dfe02:	b135      	cbz	r5, dfe12 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   dfe04:	4628      	mov	r0, r5
   dfe06:	f7ff feea 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
   dfe0a:	2110      	movs	r1, #16
   dfe0c:	4628      	mov	r0, r5
   dfe0e:	f001 fa25 	bl	e125c <_ZdlPvj>
   dfe12:	4620      	mov	r0, r4
   dfe14:	2114      	movs	r1, #20
   dfe16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   dfe1a:	f001 ba1f 	b.w	e125c <_ZdlPvj>
   dfe1e:	bd38      	pop	{r3, r4, r5, pc}

000dfe20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   dfe20:	b513      	push	{r0, r1, r4, lr}
   dfe22:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   dfe24:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   dfe28:	2300      	movs	r3, #0
   dfe2a:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dfe2c:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   dfe2e:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   dfe30:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dfe32:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   dfe34:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   dfe36:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dfe38:	f7fd f8d2 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dfe3c:	4620      	mov	r0, r4
   dfe3e:	b002      	add	sp, #8
   dfe40:	bd10      	pop	{r4, pc}

000dfe42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   dfe42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   dfe44:	460c      	mov	r4, r1
   dfe46:	ad02      	add	r5, sp, #8
   dfe48:	f854 3b04 	ldr.w	r3, [r4], #4
   dfe4c:	f845 3d08 	str.w	r3, [r5, #-8]!
   dfe50:	4606      	mov	r6, r0
   dfe52:	460f      	mov	r7, r1
   dfe54:	a801      	add	r0, sp, #4
   dfe56:	4621      	mov	r1, r4
   dfe58:	f7ff fda0 	bl	df99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   dfe5c:	4629      	mov	r1, r5
   dfe5e:	4630      	mov	r0, r6
   dfe60:	f7ff ffde 	bl	dfe20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   dfe64:	a801      	add	r0, sp, #4
   dfe66:	f7fd f8bb 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   dfe6a:	4620      	mov	r0, r4
   dfe6c:	f7fd f8b8 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   dfe70:	4638      	mov	r0, r7
   dfe72:	2108      	movs	r1, #8
   dfe74:	f001 f9f2 	bl	e125c <_ZdlPvj>
        return p;
    }
   dfe78:	4630      	mov	r0, r6
   dfe7a:	b003      	add	sp, #12
   dfe7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000dfe80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dfe80:	b538      	push	{r3, r4, r5, lr}
   dfe82:	2300      	movs	r3, #0
   dfe84:	4604      	mov	r4, r0
   dfe86:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dfe88:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   dfe8a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dfe8c:	f7f4 f905 	bl	d409a <_Znwj>
   dfe90:	b128      	cbz	r0, dfe9e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   dfe92:	2301      	movs	r3, #1
   dfe94:	6043      	str	r3, [r0, #4]
   dfe96:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   dfe98:	4b02      	ldr	r3, [pc, #8]	; (dfea4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   dfe9a:	6003      	str	r3, [r0, #0]
   dfe9c:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   dfe9e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   dfea0:	4620      	mov	r0, r4
   dfea2:	bd38      	pop	{r3, r4, r5, pc}
   dfea4:	000e46fc 	.word	0x000e46fc

000dfea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfea8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dfeaa:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfeac:	b90a      	cbnz	r2, dfeb2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   dfeae:	f001 f9e8 	bl	e1282 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfeb2:	68c3      	ldr	r3, [r0, #12]
    }
   dfeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfeb8:	4718      	bx	r3

000dfeba <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dfeba:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dfebc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dfebe:	f100 0110 	add.w	r1, r0, #16
   dfec2:	f7ff fff1 	bl	dfea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dfec6:	bd08      	pop	{r3, pc}

000dfec8 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfec8:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   dfeca:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   dfecc:	b90a      	cbnz	r2, dfed2 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   dfece:	f001 f9d8 	bl	e1282 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfed2:	68c3      	ldr	r3, [r0, #12]
    }
   dfed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   dfed8:	4718      	bx	r3

000dfeda <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   dfeda:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   dfedc:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   dfede:	f100 0110 	add.w	r1, r0, #16
   dfee2:	f7ff fff1 	bl	dfec8 <_ZNKSt8functionIFvRKbEEclES1_>
   dfee6:	bd08      	pop	{r3, pc}

000dfee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dfee8:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dfeea:	2300      	movs	r3, #0
   dfeec:	6083      	str	r3, [r0, #8]
   dfeee:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   dfef0:	4604      	mov	r4, r0
   dfef2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   dfef4:	b12b      	cbz	r3, dff02 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   dfef6:	2202      	movs	r2, #2
   dfef8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   dfefa:	68eb      	ldr	r3, [r5, #12]
   dfefc:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   dfefe:	68ab      	ldr	r3, [r5, #8]
   dff00:	60a3      	str	r3, [r4, #8]
	}
    }
   dff02:	4620      	mov	r0, r4
   dff04:	bd38      	pop	{r3, r4, r5, pc}
	...

000dff08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   dff08:	b5f0      	push	{r4, r5, r6, r7, lr}
   dff0a:	b089      	sub	sp, #36	; 0x24
   dff0c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   dff0e:	4668      	mov	r0, sp
   dff10:	f7ff ff4d 	bl	dfdae <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   dff14:	2300      	movs	r3, #0
   dff16:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   dff1a:	f04f 0202 	mov.w	r2, #2
   dff1e:	e8d4 3f4f 	ldrexb	r3, [r4]
   dff22:	2b00      	cmp	r3, #0
   dff24:	d103      	bne.n	dff2e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   dff26:	e8c4 2f41 	strexb	r1, r2, [r4]
   dff2a:	2900      	cmp	r1, #0
   dff2c:	d1f7      	bne.n	dff1e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   dff2e:	d002      	beq.n	dff36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   dff30:	f88d 3008 	strb.w	r3, [sp, #8]
   dff34:	e063      	b.n	dfffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   dff36:	f114 050c 	adds.w	r5, r4, #12
   dff3a:	d003      	beq.n	dff44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   dff3c:	4669      	mov	r1, sp
   dff3e:	4628      	mov	r0, r5
   dff40:	f7ff ff35 	bl	dfdae <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   dff44:	f3bf 8f5f 	dmb	sy
   dff48:	2301      	movs	r3, #1
   dff4a:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   dff4c:	2000      	movs	r0, #0
   dff4e:	f104 0308 	add.w	r3, r4, #8
   dff52:	f3bf 8f5f 	dmb	sy
   dff56:	e853 6f00 	ldrex	r6, [r3]
   dff5a:	e843 0200 	strex	r2, r0, [r3]
   dff5e:	2a00      	cmp	r2, #0
   dff60:	d1f9      	bne.n	dff56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   dff62:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   dff66:	2e00      	cmp	r6, #0
   dff68:	d049      	beq.n	dfffe <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   dff6a:	f7ff f807 	bl	def7c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   dff6e:	b120      	cbz	r0, dff7a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   dff70:	4629      	mov	r1, r5
   dff72:	4630      	mov	r0, r6
   dff74:	f7ff ff98 	bl	dfea8 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   dff78:	e03a      	b.n	dfff0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   dff7a:	4631      	mov	r1, r6
   dff7c:	a802      	add	r0, sp, #8
   dff7e:	f7ff ffb3 	bl	dfee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   dff82:	68e0      	ldr	r0, [r4, #12]
   dff84:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   dff88:	b108      	cbz	r0, dff8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   dff8a:	f002 f919 	bl	e21c0 <strdup>
   dff8e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   dff90:	2010      	movs	r0, #16
   dff92:	f8ad 501c 	strh.w	r5, [sp, #28]
   dff96:	f7f4 f880 	bl	d409a <_Znwj>
   dff9a:	4605      	mov	r5, r0
   dff9c:	b1e8      	cbz	r0, dffda <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dff9e:	2700      	movs	r7, #0
   dffa0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dffa2:	2018      	movs	r0, #24
   dffa4:	f7f4 f879 	bl	d409a <_Znwj>
   dffa8:	4604      	mov	r4, r0
   dffaa:	b188      	cbz	r0, dffd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dffac:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   dffae:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   dffb0:	a802      	add	r0, sp, #8
   dffb2:	f7ff fe46 	bl	dfc42 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dffb6:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   dffb8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   dffba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   dffbc:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   dffbe:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   dffc0:	a906      	add	r1, sp, #24
   dffc2:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   dffc4:	60e3      	str	r3, [r4, #12]
   dffc6:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   dffca:	9205      	str	r2, [sp, #20]
   dffcc:	f7ff feef 	bl	dfdae <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   dffd0:	4b0d      	ldr	r3, [pc, #52]	; (e0008 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   dffd2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   dffd4:	4b0d      	ldr	r3, [pc, #52]	; (e000c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   dffd6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   dffd8:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   dffda:	a806      	add	r0, sp, #24
   dffdc:	f7ff fef6 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   dffe0:	a802      	add	r0, sp, #8
   dffe2:	f7ff fdfc 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   dffe6:	2200      	movs	r2, #0
   dffe8:	4629      	mov	r1, r5
   dffea:	4809      	ldr	r0, [pc, #36]	; (e0010 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   dffec:	f7fe ffce 	bl	def8c <application_thread_invoke>
   dfff0:	4630      	mov	r0, r6
   dfff2:	f7ff fdf4 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   dfff6:	2110      	movs	r1, #16
   dfff8:	4630      	mov	r0, r6
   dfffa:	f001 f92f 	bl	e125c <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   dfffe:	4668      	mov	r0, sp
   e0000:	f7ff fee4 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
    }
   e0004:	b009      	add	sp, #36	; 0x24
   e0006:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0008:	000dfebb 	.word	0x000dfebb
   e000c:	000e0131 	.word	0x000e0131
   e0010:	000e0661 	.word	0x000e0661

000e0014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   e0014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0018:	b08b      	sub	sp, #44	; 0x2c
   e001a:	4606      	mov	r6, r0
   e001c:	460f      	mov	r7, r1
   e001e:	4690      	mov	r8, r2
   e0020:	4699      	mov	r9, r3
   e0022:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   e0026:	f7ff f847 	bl	df0b8 <spark_cloud_flag_connected>
   e002a:	ad07      	add	r5, sp, #28
    if (!connected()) {
   e002c:	4683      	mov	fp, r0
   e002e:	bb30      	cbnz	r0, e007e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   e0030:	f64f 732e 	movw	r3, #65326	; 0xff2e
   e0034:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e0036:	a905      	add	r1, sp, #20
   e0038:	4628      	mov	r0, r5
   e003a:	f8ad 3018 	strh.w	r3, [sp, #24]
   e003e:	f7ff feb6 	bl	dfdae <_ZN8particle5ErrorC1EOS0_>
   e0042:	2014      	movs	r0, #20
   e0044:	f7f4 f829 	bl	d409a <_Znwj>
   e0048:	4604      	mov	r4, r0
   e004a:	b158      	cbz	r0, e0064 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   e004c:	2302      	movs	r3, #2
   e004e:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e0050:	2301      	movs	r3, #1
   e0052:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e0054:	f8c0 b004 	str.w	fp, [r0, #4]
   e0058:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   e005c:	4629      	mov	r1, r5
   e005e:	300c      	adds	r0, #12
   e0060:	f7ff fea5 	bl	dfdae <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   e0064:	4630      	mov	r0, r6
   e0066:	4621      	mov	r1, r4
   e0068:	f840 4b04 	str.w	r4, [r0], #4
   e006c:	f7ff ff08 	bl	dfe80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   e0070:	4628      	mov	r0, r5
   e0072:	f7ff feab 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   e0076:	a805      	add	r0, sp, #20
   e0078:	f7ff fea8 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
   e007c:	e052      	b.n	e0124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   e007e:	2400      	movs	r4, #0
   e0080:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   e0082:	2014      	movs	r0, #20
   e0084:	606c      	str	r4, [r5, #4]
   e0086:	60ac      	str	r4, [r5, #8]
   e0088:	9307      	str	r3, [sp, #28]
   e008a:	f7f4 f806 	bl	d409a <_Znwj>
   e008e:	4601      	mov	r1, r0
   e0090:	b118      	cbz	r0, e009a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   e0092:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e0094:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   e0096:	6044      	str	r4, [r0, #4]
   e0098:	6084      	str	r4, [r0, #8]
   e009a:	a804      	add	r0, sp, #16
   e009c:	9103      	str	r1, [sp, #12]
   e009e:	f7ff feef 	bl	dfe80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   e00a2:	4b22      	ldr	r3, [pc, #136]	; (e012c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   e00a4:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   e00a6:	2008      	movs	r0, #8
   e00a8:	f7f3 fff7 	bl	d409a <_Znwj>
   e00ac:	4604      	mov	r4, r0
   e00ae:	b128      	cbz	r0, e00bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   e00b0:	9b03      	ldr	r3, [sp, #12]
   e00b2:	f840 3b04 	str.w	r3, [r0], #4
   e00b6:	a904      	add	r1, sp, #16
   e00b8:	f7ff fc70 	bl	df99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e00bc:	9500      	str	r5, [sp, #0]
   e00be:	fa5f f38a 	uxtb.w	r3, sl
   e00c2:	464a      	mov	r2, r9
   e00c4:	4641      	mov	r1, r8
   e00c6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   e00c8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   e00ca:	f7fe fffd 	bl	df0c8 <spark_send_event>
   e00ce:	b920      	cbnz	r0, e00da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e00d0:	9b03      	ldr	r3, [sp, #12]
   e00d2:	785b      	ldrb	r3, [r3, #1]
   e00d4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   e00d8:	b183      	cbz	r3, e00fc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   e00da:	9b03      	ldr	r3, [sp, #12]
   e00dc:	9305      	str	r3, [sp, #20]
   e00de:	a904      	add	r1, sp, #16
   e00e0:	a806      	add	r0, sp, #24
   e00e2:	f7ff fc5b 	bl	df99c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   e00e6:	a905      	add	r1, sp, #20
   e00e8:	4630      	mov	r0, r6
   e00ea:	f7ff fe99 	bl	dfe20 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   e00ee:	a806      	add	r0, sp, #24
   e00f0:	f7fc ff76 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e00f4:	a804      	add	r0, sp, #16
   e00f6:	f7fc ff73 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e00fa:	e013      	b.n	e0124 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   e00fc:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   e0100:	a905      	add	r1, sp, #20
   e0102:	a803      	add	r0, sp, #12
   e0104:	9205      	str	r2, [sp, #20]
   e0106:	f8ad 3018 	strh.w	r3, [sp, #24]
   e010a:	f7ff fefd 	bl	dff08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e010e:	a805      	add	r0, sp, #20
   e0110:	f7ff fe5c 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   e0114:	a805      	add	r0, sp, #20
   e0116:	9909      	ldr	r1, [sp, #36]	; 0x24
   e0118:	f7ff fe93 	bl	dfe42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   e011c:	a806      	add	r0, sp, #24
   e011e:	f7fc ff5f 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   e0122:	e7da      	b.n	e00da <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   e0124:	4630      	mov	r0, r6
   e0126:	b00b      	add	sp, #44	; 0x2c
   e0128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e012c:	000e02a1 	.word	0x000e02a1

000e0130 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e0130:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e0132:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0134:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e0136:	d006      	beq.n	e0146 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   e0138:	2a03      	cmp	r2, #3
   e013a:	d017      	beq.n	e016c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   e013c:	2a01      	cmp	r2, #1
   e013e:	d122      	bne.n	e0186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e0140:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e0142:	6003      	str	r3, [r0, #0]
	      break;
   e0144:	e01f      	b.n	e0186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e0146:	2018      	movs	r0, #24
   e0148:	680e      	ldr	r6, [r1, #0]
   e014a:	f7f3 ffa6 	bl	d409a <_Znwj>
   e014e:	4605      	mov	r5, r0
   e0150:	b150      	cbz	r0, e0168 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e0152:	4631      	mov	r1, r6
   e0154:	f7ff fec8 	bl	dfee8 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   e0158:	6930      	ldr	r0, [r6, #16]
   e015a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   e015e:	b108      	cbz	r0, e0164 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   e0160:	f002 f82e 	bl	e21c0 <strdup>
   e0164:	6128      	str	r0, [r5, #16]
   e0166:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e0168:	6025      	str	r5, [r4, #0]
   e016a:	e00c      	b.n	e0186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e016c:	6804      	ldr	r4, [r0, #0]
   e016e:	b154      	cbz	r4, e0186 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   e0170:	f104 0010 	add.w	r0, r4, #16
   e0174:	f7ff fe2a 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e0178:	4620      	mov	r0, r4
   e017a:	f7ff fd30 	bl	dfbde <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e017e:	2118      	movs	r1, #24
   e0180:	4620      	mov	r0, r4
   e0182:	f001 f86b 	bl	e125c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e0186:	2000      	movs	r0, #0
   e0188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e018a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e018a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e018c:	2300      	movs	r3, #0
   e018e:	6083      	str	r3, [r0, #8]
   e0190:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   e0192:	4604      	mov	r4, r0
   e0194:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   e0196:	b12b      	cbz	r3, e01a4 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   e0198:	2202      	movs	r2, #2
   e019a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   e019c:	68eb      	ldr	r3, [r5, #12]
   e019e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   e01a0:	68ab      	ldr	r3, [r5, #8]
   e01a2:	60a3      	str	r3, [r4, #8]
	}
    }
   e01a4:	4620      	mov	r0, r4
   e01a6:	bd38      	pop	{r3, r4, r5, pc}

000e01a8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   e01a8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   e01aa:	b570      	push	{r4, r5, r6, lr}
   e01ac:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   e01ae:	d006      	beq.n	e01be <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   e01b0:	2a03      	cmp	r2, #3
   e01b2:	d011      	beq.n	e01d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   e01b4:	2a01      	cmp	r2, #1
   e01b6:	d118      	bne.n	e01ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   e01b8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   e01ba:	6003      	str	r3, [r0, #0]
	      break;
   e01bc:	e015      	b.n	e01ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e01be:	2014      	movs	r0, #20
   e01c0:	680e      	ldr	r6, [r1, #0]
   e01c2:	f7f3 ff6a 	bl	d409a <_Znwj>
   e01c6:	4605      	mov	r5, r0
   e01c8:	b120      	cbz	r0, e01d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   e01ca:	4631      	mov	r1, r6
   e01cc:	f7ff ffdd 	bl	e018a <_ZNSt8functionIFvRKbEEC1ERKS3_>
   e01d0:	7c33      	ldrb	r3, [r6, #16]
   e01d2:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   e01d4:	6025      	str	r5, [r4, #0]
   e01d6:	e008      	b.n	e01ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e01d8:	6804      	ldr	r4, [r0, #0]
   e01da:	b134      	cbz	r4, e01ea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e01dc:	4620      	mov	r0, r4
   e01de:	f7ff fcfe 	bl	dfbde <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   e01e2:	2114      	movs	r1, #20
   e01e4:	4620      	mov	r0, r4
   e01e6:	f001 f839 	bl	e125c <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   e01ea:	2000      	movs	r0, #0
   e01ec:	bd70      	pop	{r4, r5, r6, pc}
	...

000e01f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   e01f0:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   e01f2:	2300      	movs	r3, #0
   e01f4:	b087      	sub	sp, #28
   e01f6:	460c      	mov	r4, r1
   e01f8:	f3bf 8f5f 	dmb	sy
   e01fc:	e850 6f00 	ldrex	r6, [r0]
   e0200:	e840 3200 	strex	r2, r3, [r0]
   e0204:	2a00      	cmp	r2, #0
   e0206:	d1f9      	bne.n	e01fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   e0208:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   e020c:	2e00      	cmp	r6, #0
   e020e:	d03f      	beq.n	e0290 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   e0210:	4618      	mov	r0, r3
   e0212:	f7fe feb3 	bl	def7c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   e0216:	4607      	mov	r7, r0
   e0218:	b120      	cbz	r0, e0224 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   e021a:	4621      	mov	r1, r4
   e021c:	4630      	mov	r0, r6
   e021e:	f7ff fe53 	bl	dfec8 <_ZNKSt8functionIFvRKbEEclES1_>
   e0222:	e02e      	b.n	e0282 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   e0224:	4631      	mov	r1, r6
   e0226:	a801      	add	r0, sp, #4
   e0228:	f7ff ffaf 	bl	e018a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e022c:	7823      	ldrb	r3, [r4, #0]
   e022e:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   e0232:	2010      	movs	r0, #16
   e0234:	f7f3 ff31 	bl	d409a <_Znwj>
   e0238:	4605      	mov	r5, r0
   e023a:	b1d0      	cbz	r0, e0272 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e023c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e023e:	2014      	movs	r0, #20
   e0240:	f7f3 ff2b 	bl	d409a <_Znwj>
   e0244:	4604      	mov	r4, r0
   e0246:	b178      	cbz	r0, e0268 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   e0248:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   e024a:	4601      	mov	r1, r0
   e024c:	a801      	add	r0, sp, #4
   e024e:	f7ff fcf8 	bl	dfc42 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0252:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   e0254:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   e0256:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0258:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   e025a:	9203      	str	r2, [sp, #12]
   e025c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   e025e:	60e3      	str	r3, [r4, #12]
   e0260:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   e0264:	9204      	str	r2, [sp, #16]
   e0266:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   e0268:	4b0a      	ldr	r3, [pc, #40]	; (e0294 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   e026a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   e026c:	4b0a      	ldr	r3, [pc, #40]	; (e0298 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   e026e:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   e0270:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   e0272:	a801      	add	r0, sp, #4
   e0274:	f7ff fcb3 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   e0278:	2200      	movs	r2, #0
   e027a:	4629      	mov	r1, r5
   e027c:	4807      	ldr	r0, [pc, #28]	; (e029c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   e027e:	f7fe fe85 	bl	def8c <application_thread_invoke>
   e0282:	4630      	mov	r0, r6
   e0284:	f7ff fcab 	bl	dfbde <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   e0288:	2110      	movs	r1, #16
   e028a:	4630      	mov	r0, r6
   e028c:	f000 ffe6 	bl	e125c <_ZdlPvj>
        }
    }
   e0290:	b007      	add	sp, #28
   e0292:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e0294:	000dfedb 	.word	0x000dfedb
   e0298:	000e01a9 	.word	0x000e01a9
   e029c:	000e0661 	.word	0x000e0661

000e02a0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   e02a0:	b530      	push	{r4, r5, lr}
   e02a2:	b085      	sub	sp, #20
   e02a4:	4604      	mov	r4, r0
   e02a6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   e02a8:	4668      	mov	r0, sp
   e02aa:	4611      	mov	r1, r2
   e02ac:	f7ff fdc9 	bl	dfe42 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   e02b0:	b17c      	cbz	r4, e02d2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   e02b2:	b224      	sxth	r4, r4
   e02b4:	4628      	mov	r0, r5
   e02b6:	b10d      	cbz	r5, e02bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   e02b8:	f001 ff82 	bl	e21c0 <strdup>
   e02bc:	9002      	str	r0, [sp, #8]
   e02be:	a902      	add	r1, sp, #8
   e02c0:	4668      	mov	r0, sp
   e02c2:	f8ad 400c 	strh.w	r4, [sp, #12]
   e02c6:	f7ff fe1f 	bl	dff08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   e02ca:	a802      	add	r0, sp, #8
   e02cc:	f7ff fd7e 	bl	dfdcc <_ZN8particle5ErrorD1Ev>
   e02d0:	e01d      	b.n	e030e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   e02d2:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   e02d4:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   e02d8:	f04f 0201 	mov.w	r2, #1
   e02dc:	e8d0 3f4f 	ldrexb	r3, [r0]
   e02e0:	42a3      	cmp	r3, r4
   e02e2:	d103      	bne.n	e02ec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   e02e4:	e8c0 2f41 	strexb	r1, r2, [r0]
   e02e8:	2900      	cmp	r1, #0
   e02ea:	d1f7      	bne.n	e02dc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   e02ec:	d002      	beq.n	e02f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   e02ee:	f88d 3008 	strb.w	r3, [sp, #8]
   e02f2:	e00c      	b.n	e030e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   e02f4:	f110 010c 	adds.w	r1, r0, #12
   e02f8:	f04f 0301 	mov.w	r3, #1
   e02fc:	bf18      	it	ne
   e02fe:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e0300:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   e0304:	3004      	adds	r0, #4
   e0306:	f800 3c03 	strb.w	r3, [r0, #-3]
   e030a:	f7ff ff71 	bl	e01f0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   e030e:	a801      	add	r0, sp, #4
   e0310:	f7fc fe66 	bl	dcfe0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   e0314:	b005      	add	sp, #20
   e0316:	bd30      	pop	{r4, r5, pc}

000e0318 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   e0318:	4770      	bx	lr

000e031a <_ZN9IPAddressD0Ev>:
   e031a:	b510      	push	{r4, lr}
   e031c:	2118      	movs	r1, #24
   e031e:	4604      	mov	r4, r0
   e0320:	f000 ff9c 	bl	e125c <_ZdlPvj>
   e0324:	4620      	mov	r0, r4
   e0326:	bd10      	pop	{r4, pc}

000e0328 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e0328:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e032a:	7d03      	ldrb	r3, [r0, #20]
   e032c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   e032e:	b08d      	sub	sp, #52	; 0x34
   e0330:	460e      	mov	r6, r1
   e0332:	f100 0704 	add.w	r7, r0, #4
   e0336:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   e033a:	d002      	beq.n	e0342 <_ZNK9IPAddress7printToER5Print+0x1a>
   e033c:	f100 0508 	add.w	r5, r0, #8
   e0340:	e018      	b.n	e0374 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e0342:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e0344:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   e0346:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   e034a:	232f      	movs	r3, #47	; 0x2f
   e034c:	462a      	mov	r2, r5
   e034e:	200a      	movs	r0, #10
   e0350:	f7fe fcac 	bl	decac <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   e0354:	4628      	mov	r0, r5
   e0356:	f001 ff4e 	bl	e21f6 <strlen>
   e035a:	6833      	ldr	r3, [r6, #0]
   e035c:	4602      	mov	r2, r0
   e035e:	68db      	ldr	r3, [r3, #12]
   e0360:	4629      	mov	r1, r5
   e0362:	4630      	mov	r0, r6
   e0364:	4798      	blx	r3
   e0366:	e00f      	b.n	e0388 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   e0368:	b124      	cbz	r4, e0374 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   e036a:	212e      	movs	r1, #46	; 0x2e
   e036c:	4630      	mov	r0, r6
   e036e:	f7ff fb57 	bl	dfa20 <_ZN5Print5printEc>
   e0372:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   e0374:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   e0378:	220a      	movs	r2, #10
   e037a:	4630      	mov	r0, r6
   e037c:	f7ff fb53 	bl	dfa26 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e0380:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e0382:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   e0384:	d1f0      	bne.n	e0368 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   e0386:	4620      	mov	r0, r4
    }
    return n;
}
   e0388:	b00d      	add	sp, #52	; 0x34
   e038a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e038c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   e038c:	b510      	push	{r4, lr}
   e038e:	4b05      	ldr	r3, [pc, #20]	; (e03a4 <_ZN9IPAddressC1Ev+0x18>)
   e0390:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   e0392:	2211      	movs	r2, #17
   e0394:	f840 3b04 	str.w	r3, [r0], #4
   e0398:	2100      	movs	r1, #0
   e039a:	f001 fecf 	bl	e213c <memset>
{
    clear();
}
   e039e:	4620      	mov	r0, r4
   e03a0:	bd10      	pop	{r4, pc}
   e03a2:	bf00      	nop
   e03a4:	000e4718 	.word	0x000e4718

000e03a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   e03a8:	4603      	mov	r3, r0
   e03aa:	4a07      	ldr	r2, [pc, #28]	; (e03c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   e03ac:	b510      	push	{r4, lr}
   e03ae:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   e03b2:	f101 0210 	add.w	r2, r1, #16
   e03b6:	f851 4b04 	ldr.w	r4, [r1], #4
   e03ba:	f843 4b04 	str.w	r4, [r3], #4
   e03be:	4291      	cmp	r1, r2
   e03c0:	d1f9      	bne.n	e03b6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   e03c2:	780a      	ldrb	r2, [r1, #0]
   e03c4:	701a      	strb	r2, [r3, #0]
}
   e03c6:	bd10      	pop	{r4, pc}
   e03c8:	000e4718 	.word	0x000e4718

000e03cc <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   e03cc:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   e03ce:	2b04      	cmp	r3, #4
   e03d0:	d101      	bne.n	e03d6 <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   e03d2:	6840      	ldr	r0, [r0, #4]
   e03d4:	e008      	b.n	e03e8 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   e03d6:	2b06      	cmp	r3, #6
   e03d8:	d10a      	bne.n	e03f0 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e03da:	6843      	ldr	r3, [r0, #4]
   e03dc:	b953      	cbnz	r3, e03f4 <_ZNK9IPAddresscvbEv+0x28>
   e03de:	6883      	ldr	r3, [r0, #8]
   e03e0:	b943      	cbnz	r3, e03f4 <_ZNK9IPAddresscvbEv+0x28>
   e03e2:	68c3      	ldr	r3, [r0, #12]
   e03e4:	b933      	cbnz	r3, e03f4 <_ZNK9IPAddresscvbEv+0x28>
   e03e6:	6900      	ldr	r0, [r0, #16]
   e03e8:	3000      	adds	r0, #0
   e03ea:	bf18      	it	ne
   e03ec:	2001      	movne	r0, #1
   e03ee:	4770      	bx	lr
    } else {
        return false;
   e03f0:	2000      	movs	r0, #0
   e03f2:	4770      	bx	lr
{
#if Wiring_IPv6
    if (version() == 4) {
        return address.ipv4 != 0;
    } else if (version() == 6) {
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   e03f4:	2001      	movs	r0, #1
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   e03f6:	4770      	bx	lr

000e03f8 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   e03f8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   e03fa:	f89d 4008 	ldrb.w	r4, [sp, #8]
   e03fe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   e0402:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   e0406:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   e040a:	2304      	movs	r3, #4
   e040c:	6041      	str	r1, [r0, #4]
   e040e:	7503      	strb	r3, [r0, #20]
   e0410:	bd10      	pop	{r4, pc}

000e0412 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   e0412:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   e0414:	780d      	ldrb	r5, [r1, #0]
   e0416:	788b      	ldrb	r3, [r1, #2]
   e0418:	784a      	ldrb	r2, [r1, #1]
   e041a:	78c9      	ldrb	r1, [r1, #3]
   e041c:	9100      	str	r1, [sp, #0]
   e041e:	4629      	mov	r1, r5
   e0420:	f7ff ffea 	bl	e03f8 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   e0424:	b003      	add	sp, #12
   e0426:	bd30      	pop	{r4, r5, pc}

000e0428 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e0428:	7441      	strb	r1, [r0, #17]
   e042a:	4770      	bx	lr

000e042c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   e042c:	4770      	bx	lr

000e042e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   e042e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   e0430:	2100      	movs	r1, #0
   e0432:	7c00      	ldrb	r0, [r0, #16]
   e0434:	f7fe fd32 	bl	dee9c <HAL_USB_USART_Receive_Data>
}
   e0438:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e043c:	bf28      	it	cs
   e043e:	f04f 30ff 	movcs.w	r0, #4294967295
   e0442:	bd08      	pop	{r3, pc}

000e0444 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   e0444:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   e0446:	2101      	movs	r1, #1
   e0448:	7c00      	ldrb	r0, [r0, #16]
   e044a:	f7fe fd27 	bl	dee9c <HAL_USB_USART_Receive_Data>
}
   e044e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e0452:	bf28      	it	cs
   e0454:	f04f 30ff 	movcs.w	r0, #4294967295
   e0458:	bd08      	pop	{r3, pc}

000e045a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   e045a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   e045c:	7c00      	ldrb	r0, [r0, #16]
   e045e:	f7fe fd15 	bl	dee8c <HAL_USB_USART_Available_Data_For_Write>
}
   e0462:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e0466:	bd08      	pop	{r3, pc}

000e0468 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   e0468:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   e046a:	7c00      	ldrb	r0, [r0, #16]
   e046c:	f7fe fd06 	bl	dee7c <HAL_USB_USART_Available_Data>
}
   e0470:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e0474:	bd08      	pop	{r3, pc}

000e0476 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   e0476:	7c00      	ldrb	r0, [r0, #16]
   e0478:	f7fe bd20 	b.w	deebc <HAL_USB_USART_Flush_Data>

000e047c <_ZN9USBSerialD0Ev>:
   e047c:	b510      	push	{r4, lr}
   e047e:	2114      	movs	r1, #20
   e0480:	4604      	mov	r4, r0
   e0482:	f000 feeb 	bl	e125c <_ZdlPvj>
   e0486:	4620      	mov	r0, r4
   e0488:	bd10      	pop	{r4, pc}

000e048a <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e048a:	b538      	push	{r3, r4, r5, lr}
   e048c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e048e:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   e0490:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   e0492:	f7fe fcfb 	bl	dee8c <HAL_USB_USART_Available_Data_For_Write>
   e0496:	2800      	cmp	r0, #0
   e0498:	dc01      	bgt.n	e049e <_ZN9USBSerial5writeEh+0x14>
   e049a:	7c60      	ldrb	r0, [r4, #17]
   e049c:	b128      	cbz	r0, e04aa <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   e049e:	4629      	mov	r1, r5
   e04a0:	7c20      	ldrb	r0, [r4, #16]
   e04a2:	f7fe fd03 	bl	deeac <HAL_USB_USART_Send_Data>
   e04a6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   e04aa:	bd38      	pop	{r3, r4, r5, pc}

000e04ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e04ac:	b510      	push	{r4, lr}
   e04ae:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   e04b0:	2300      	movs	r3, #0
   e04b2:	6063      	str	r3, [r4, #4]
   e04b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e04b8:	60a3      	str	r3, [r4, #8]
   e04ba:	4b05      	ldr	r3, [pc, #20]	; (e04d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   e04bc:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   e04be:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   e04c0:	4608      	mov	r0, r1
{
  _serial = serial;
   e04c2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   e04c4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   e04c6:	4611      	mov	r1, r2
   e04c8:	f7fe fcd0 	bl	dee6c <HAL_USB_USART_Init>
}
   e04cc:	4620      	mov	r0, r4
   e04ce:	bd10      	pop	{r4, pc}
   e04d0:	000e472c 	.word	0x000e472c

000e04d4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e04d4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   e04d6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   e04d8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   e04da:	2100      	movs	r1, #0
   e04dc:	f001 fe2e 	bl	e213c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   e04e0:	4620      	mov	r0, r4
   e04e2:	bd10      	pop	{r4, pc}

000e04e4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   e04e4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e04e6:	4d0e      	ldr	r5, [pc, #56]	; (e0520 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   e04e8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   e04ea:	a801      	add	r0, sp, #4
   e04ec:	f7ff fff2 	bl	e04d4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   e04f0:	6829      	ldr	r1, [r5, #0]
   e04f2:	f011 0401 	ands.w	r4, r1, #1
   e04f6:	d110      	bne.n	e051a <_Z16_fetch_usbserialv+0x36>
   e04f8:	4628      	mov	r0, r5
   e04fa:	f7f3 fdd6 	bl	d40aa <__cxa_guard_acquire>
   e04fe:	b160      	cbz	r0, e051a <_Z16_fetch_usbserialv+0x36>
   e0500:	aa01      	add	r2, sp, #4
   e0502:	4621      	mov	r1, r4
   e0504:	4807      	ldr	r0, [pc, #28]	; (e0524 <_Z16_fetch_usbserialv+0x40>)
   e0506:	f7ff ffd1 	bl	e04ac <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   e050a:	4628      	mov	r0, r5
   e050c:	f7f3 fdd2 	bl	d40b4 <__cxa_guard_release>
   e0510:	4a05      	ldr	r2, [pc, #20]	; (e0528 <_Z16_fetch_usbserialv+0x44>)
   e0512:	4906      	ldr	r1, [pc, #24]	; (e052c <_Z16_fetch_usbserialv+0x48>)
   e0514:	4803      	ldr	r0, [pc, #12]	; (e0524 <_Z16_fetch_usbserialv+0x40>)
   e0516:	f000 fe93 	bl	e1240 <__aeabi_atexit>
	return _usbserial;
}
   e051a:	4802      	ldr	r0, [pc, #8]	; (e0524 <_Z16_fetch_usbserialv+0x40>)
   e051c:	b007      	add	sp, #28
   e051e:	bd30      	pop	{r4, r5, pc}
   e0520:	2003e3d8 	.word	0x2003e3d8
   e0524:	2003e3dc 	.word	0x2003e3dc
   e0528:	2003e2dc 	.word	0x2003e2dc
   e052c:	000e042d 	.word	0x000e042d

000e0530 <tone>:

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e0530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e0532:	b285      	uxth	r5, r0

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e0534:	4604      	mov	r4, r0
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e0536:	4628      	mov	r0, r5

#include "spark_wiring_tone.h"
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
   e0538:	460e      	mov	r6, r1
   e053a:	4617      	mov	r7, r2
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
   e053c:	f000 fda2 	bl	e1084 <pinAvailable>
   e0540:	b160      	cbz	r0, e055c <tone+0x2c>
   e0542:	2102      	movs	r1, #2
   e0544:	4628      	mov	r0, r5
   e0546:	f7fe fab1 	bl	deaac <HAL_Validate_Pin_Function>
   e054a:	2802      	cmp	r0, #2
   e054c:	d106      	bne.n	e055c <tone+0x2c>
        HAL_Tone_Start(pin, frequency, duration);
   e054e:	463a      	mov	r2, r7
   e0550:	4631      	mov	r1, r6
   e0552:	4620      	mov	r0, r4
    }
}
   e0554:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
#include "tone_hal.h"

void tone(uint8_t pin, unsigned int frequency, unsigned long duration)
{
    if (pinAvailable(pin) && HAL_Validate_Pin_Function(pin, PF_TIMER)==PF_TIMER) {
        HAL_Tone_Start(pin, frequency, duration);
   e0558:	f7fe bc80 	b.w	dee5c <HAL_Tone_Start>
   e055c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e055e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   e055e:	4770      	bx	lr

000e0560 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   e0560:	7441      	strb	r1, [r0, #17]
   e0562:	4770      	bx	lr

000e0564 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   e0564:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   e0566:	7c00      	ldrb	r0, [r0, #16]
   e0568:	f7fe fc00 	bl	ded6c <HAL_USART_Available_Data_For_Write>
}
   e056c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e0570:	bd08      	pop	{r3, pc}

000e0572 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   e0572:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   e0574:	7c00      	ldrb	r0, [r0, #16]
   e0576:	f7fe fbd1 	bl	ded1c <HAL_USART_Available_Data>
}
   e057a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   e057e:	bd08      	pop	{r3, pc}

000e0580 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   e0580:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   e0582:	7c00      	ldrb	r0, [r0, #16]
   e0584:	f7fe fbda 	bl	ded3c <HAL_USART_Peek_Data>
}
   e0588:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e058c:	bf28      	it	cs
   e058e:	f04f 30ff 	movcs.w	r0, #4294967295
   e0592:	bd08      	pop	{r3, pc}

000e0594 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   e0594:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   e0596:	7c00      	ldrb	r0, [r0, #16]
   e0598:	f7fe fbc8 	bl	ded2c <HAL_USART_Read_Data>
}
   e059c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   e05a0:	bf28      	it	cs
   e05a2:	f04f 30ff 	movcs.w	r0, #4294967295
   e05a6:	bd08      	pop	{r3, pc}

000e05a8 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   e05a8:	7c00      	ldrb	r0, [r0, #16]
   e05aa:	f7fe bbcf 	b.w	ded4c <HAL_USART_Flush_Data>

000e05ae <_ZN11USARTSerialD0Ev>:
   e05ae:	b510      	push	{r4, lr}
   e05b0:	2114      	movs	r1, #20
   e05b2:	4604      	mov	r4, r0
   e05b4:	f000 fe52 	bl	e125c <_ZdlPvj>
   e05b8:	4620      	mov	r0, r4
   e05ba:	bd10      	pop	{r4, pc}

000e05bc <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   e05bc:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e05be:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   e05c0:	4604      	mov	r4, r0
   e05c2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   e05c4:	b925      	cbnz	r5, e05d0 <_ZN11USARTSerial5writeEh+0x14>
   e05c6:	7c00      	ldrb	r0, [r0, #16]
   e05c8:	f7fe fbd0 	bl	ded6c <HAL_USART_Available_Data_For_Write>
   e05cc:	2800      	cmp	r0, #0
   e05ce:	dd05      	ble.n	e05dc <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e05d0:	4631      	mov	r1, r6
   e05d2:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   e05d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   e05d8:	f7fe bb98 	b.w	ded0c <HAL_USART_Write_Data>
  }
  return 0;
}
   e05dc:	4628      	mov	r0, r5
   e05de:	bd70      	pop	{r4, r5, r6, pc}

000e05e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   e05e0:	b510      	push	{r4, lr}
   e05e2:	4604      	mov	r4, r0
   e05e4:	4608      	mov	r0, r1
   e05e6:	4611      	mov	r1, r2
   e05e8:	2200      	movs	r2, #0
   e05ea:	6062      	str	r2, [r4, #4]
   e05ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   e05f0:	60a2      	str	r2, [r4, #8]
   e05f2:	4a05      	ldr	r2, [pc, #20]	; (e0608 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   e05f4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   e05f6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   e05f8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   e05fa:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   e05fc:	461a      	mov	r2, r3
   e05fe:	f7fe fb7d 	bl	decfc <HAL_USART_Init>
}
   e0602:	4620      	mov	r0, r4
   e0604:	bd10      	pop	{r4, pc}
   e0606:	bf00      	nop
   e0608:	000e475c 	.word	0x000e475c

000e060c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   e060c:	7c00      	ldrb	r0, [r0, #16]
   e060e:	f7fe bba5 	b.w	ded5c <HAL_USART_Is_Enabled>
	...

000e0614 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   e0614:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   e0616:	4d0c      	ldr	r5, [pc, #48]	; (e0648 <_Z22__fetch_global_Serial1v+0x34>)
   e0618:	6829      	ldr	r1, [r5, #0]
   e061a:	f011 0401 	ands.w	r4, r1, #1
   e061e:	d111      	bne.n	e0644 <_Z22__fetch_global_Serial1v+0x30>
   e0620:	4628      	mov	r0, r5
   e0622:	f7f3 fd42 	bl	d40aa <__cxa_guard_acquire>
   e0626:	b168      	cbz	r0, e0644 <_Z22__fetch_global_Serial1v+0x30>
   e0628:	4a08      	ldr	r2, [pc, #32]	; (e064c <_Z22__fetch_global_Serial1v+0x38>)
   e062a:	4b09      	ldr	r3, [pc, #36]	; (e0650 <_Z22__fetch_global_Serial1v+0x3c>)
   e062c:	4809      	ldr	r0, [pc, #36]	; (e0654 <_Z22__fetch_global_Serial1v+0x40>)
   e062e:	4621      	mov	r1, r4
   e0630:	f7ff ffd6 	bl	e05e0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   e0634:	4628      	mov	r0, r5
   e0636:	f7f3 fd3d 	bl	d40b4 <__cxa_guard_release>
   e063a:	4a07      	ldr	r2, [pc, #28]	; (e0658 <_Z22__fetch_global_Serial1v+0x44>)
   e063c:	4907      	ldr	r1, [pc, #28]	; (e065c <_Z22__fetch_global_Serial1v+0x48>)
   e063e:	4805      	ldr	r0, [pc, #20]	; (e0654 <_Z22__fetch_global_Serial1v+0x40>)
   e0640:	f000 fdfe 	bl	e1240 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   e0644:	4803      	ldr	r0, [pc, #12]	; (e0654 <_Z22__fetch_global_Serial1v+0x40>)
   e0646:	bd38      	pop	{r3, r4, r5, pc}
   e0648:	2003e488 	.word	0x2003e488
   e064c:	2003e48c 	.word	0x2003e48c
   e0650:	2003e404 	.word	0x2003e404
   e0654:	2003e3f0 	.word	0x2003e3f0
   e0658:	2003e2dc 	.word	0x2003e2dc
   e065c:	000e055f 	.word	0x000e055f

000e0660 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   e0660:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e0662:	6883      	ldr	r3, [r0, #8]
   e0664:	4604      	mov	r4, r0
   e0666:	b90b      	cbnz	r3, e066c <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   e0668:	f000 fe0b 	bl	e1282 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e066c:	68c3      	ldr	r3, [r0, #12]
   e066e:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e0670:	68a3      	ldr	r3, [r4, #8]
   e0672:	b11b      	cbz	r3, e067c <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e0674:	2203      	movs	r2, #3
   e0676:	4621      	mov	r1, r4
   e0678:	4620      	mov	r0, r4
   e067a:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e067c:	4620      	mov	r0, r4
   e067e:	2110      	movs	r1, #16
}
   e0680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   e0684:	f000 bdea 	b.w	e125c <_ZdlPvj>

000e0688 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   e0688:	4770      	bx	lr

000e068a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   e068a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e068c:	4606      	mov	r6, r0
   e068e:	4615      	mov	r5, r2
   e0690:	460c      	mov	r4, r1
   e0692:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e0694:	42bc      	cmp	r4, r7
   e0696:	d006      	beq.n	e06a6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   e0698:	6833      	ldr	r3, [r6, #0]
   e069a:	f814 1b01 	ldrb.w	r1, [r4], #1
   e069e:	689b      	ldr	r3, [r3, #8]
   e06a0:	4630      	mov	r0, r6
   e06a2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   e06a4:	e7f6      	b.n	e0694 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   e06a6:	4628      	mov	r0, r5
   e06a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e06aa <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   e06aa:	2200      	movs	r2, #0
   e06ac:	7c00      	ldrb	r0, [r0, #16]
   e06ae:	f7fe bb6d 	b.w	ded8c <HAL_I2C_Write_Data>

000e06b2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   e06b2:	2100      	movs	r1, #0
   e06b4:	7c00      	ldrb	r0, [r0, #16]
   e06b6:	f7fe bb71 	b.w	ded9c <HAL_I2C_Available_Data>

000e06ba <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   e06ba:	2100      	movs	r1, #0
   e06bc:	7c00      	ldrb	r0, [r0, #16]
   e06be:	f7fe bb75 	b.w	dedac <HAL_I2C_Read_Data>

000e06c2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   e06c2:	2100      	movs	r1, #0
   e06c4:	7c00      	ldrb	r0, [r0, #16]
   e06c6:	f7fe bb79 	b.w	dedbc <HAL_I2C_Peek_Data>

000e06ca <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   e06ca:	2100      	movs	r1, #0
   e06cc:	7c00      	ldrb	r0, [r0, #16]
   e06ce:	f7fe bb7d 	b.w	dedcc <HAL_I2C_Flush_Data>

000e06d2 <_ZN7TwoWireD0Ev>:
   e06d2:	b510      	push	{r4, lr}
   e06d4:	2114      	movs	r1, #20
   e06d6:	4604      	mov	r4, r0
   e06d8:	f000 fdc0 	bl	e125c <_ZdlPvj>
   e06dc:	4620      	mov	r0, r4
   e06de:	bd10      	pop	{r4, pc}

000e06e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e06e0:	b510      	push	{r4, lr}
   e06e2:	4604      	mov	r4, r0
   e06e4:	2300      	movs	r3, #0
   e06e6:	6063      	str	r3, [r4, #4]
   e06e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e06ec:	60a3      	str	r3, [r4, #8]
   e06ee:	4b04      	ldr	r3, [pc, #16]	; (e0700 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   e06f0:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   e06f2:	4608      	mov	r0, r1
   e06f4:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   e06f6:	4611      	mov	r1, r2
   e06f8:	f7fe fb78 	bl	dedec <HAL_I2C_Init>
}
   e06fc:	4620      	mov	r0, r4
   e06fe:	bd10      	pop	{r4, pc}
   e0700:	000e478c 	.word	0x000e478c

000e0704 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   e0704:	2100      	movs	r1, #0
   e0706:	7c00      	ldrb	r0, [r0, #16]
   e0708:	f7fe bb68 	b.w	deddc <HAL_I2C_Is_Enabled>

000e070c <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   e070c:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   e070e:	2301      	movs	r3, #1
   e0710:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   e0712:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   e0714:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   e0716:	b10b      	cbz	r3, e071c <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   e0718:	68c0      	ldr	r0, [r0, #12]
   e071a:	e006      	b.n	e072a <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e071c:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   e071e:	b128      	cbz	r0, e072c <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   e0720:	6883      	ldr	r3, [r0, #8]
   e0722:	b90b      	cbnz	r3, e0728 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   e0724:	f000 fdad 	bl	e1282 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   e0728:	68c3      	ldr	r3, [r0, #12]
   e072a:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   e072c:	2301      	movs	r3, #1
   e072e:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   e0730:	2000      	movs	r0, #0
    }
   e0732:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   e0736:	f7fe bab1 	b.w	dec9c <os_thread_exit>

000e073a <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e073a:	2200      	movs	r2, #0
   e073c:	4611      	mov	r1, r2
   e073e:	6840      	ldr	r0, [r0, #4]
   e0740:	f7fe bc92 	b.w	df068 <network_listening>

000e0744 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e0744:	2200      	movs	r2, #0
   e0746:	4611      	mov	r1, r2
   e0748:	6840      	ldr	r0, [r0, #4]
   e074a:	f7fe bc9d 	b.w	df088 <network_get_listen_timeout>

000e074e <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e074e:	2200      	movs	r2, #0
   e0750:	6840      	ldr	r0, [r0, #4]
   e0752:	f7fe bc91 	b.w	df078 <network_set_listen_timeout>

000e0756 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e0756:	2200      	movs	r2, #0
   e0758:	f081 0101 	eor.w	r1, r1, #1
   e075c:	6840      	ldr	r0, [r0, #4]
   e075e:	f7fe bc7b 	b.w	df058 <network_listen>

000e0762 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   e0762:	2300      	movs	r3, #0
   e0764:	461a      	mov	r2, r3
   e0766:	2101      	movs	r1, #1
   e0768:	6840      	ldr	r0, [r0, #4]
   e076a:	f7fe bc6d 	b.w	df048 <network_off>

000e076e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   e076e:	2300      	movs	r3, #0
   e0770:	461a      	mov	r2, r3
   e0772:	4619      	mov	r1, r3
   e0774:	6840      	ldr	r0, [r0, #4]
   e0776:	f7fe bc5f 	b.w	df038 <network_on>

000e077a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   e077a:	2200      	movs	r2, #0
   e077c:	4611      	mov	r1, r2
   e077e:	6840      	ldr	r0, [r0, #4]
   e0780:	f7fe bc52 	b.w	df028 <network_ready>

000e0784 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e0784:	2200      	movs	r2, #0
   e0786:	4611      	mov	r1, r2
   e0788:	6840      	ldr	r0, [r0, #4]
   e078a:	f7fe bc3d 	b.w	df008 <network_connecting>

000e078e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e078e:	2200      	movs	r2, #0
   e0790:	2102      	movs	r1, #2
   e0792:	6840      	ldr	r0, [r0, #4]
   e0794:	f7fe bc40 	b.w	df018 <network_disconnect>

000e0798 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e0798:	2300      	movs	r3, #0
   e079a:	461a      	mov	r2, r3
   e079c:	6840      	ldr	r0, [r0, #4]
   e079e:	f7fe bc2b 	b.w	deff8 <network_connect>

000e07a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   e07a2:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e07a4:	4605      	mov	r5, r0
   e07a6:	b188      	cbz	r0, e07cc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e07a8:	6804      	ldr	r4, [r0, #0]
   e07aa:	b14c      	cbz	r4, e07c0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   e07ac:	68a3      	ldr	r3, [r4, #8]
   e07ae:	b11b      	cbz	r3, e07b8 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   e07b0:	2203      	movs	r2, #3
   e07b2:	4621      	mov	r1, r4
   e07b4:	4620      	mov	r0, r4
   e07b6:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e07b8:	2110      	movs	r1, #16
   e07ba:	4620      	mov	r0, r4
   e07bc:	f000 fd4e 	bl	e125c <_ZdlPvj>
   e07c0:	4628      	mov	r0, r5
   e07c2:	2114      	movs	r1, #20
      }
   e07c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e07c8:	f000 bd48 	b.w	e125c <_ZdlPvj>
   e07cc:	bd38      	pop	{r3, r4, r5, pc}

000e07ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   e07ce:	b110      	cbz	r0, e07d6 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   e07d0:	6803      	ldr	r3, [r0, #0]
   e07d2:	685b      	ldr	r3, [r3, #4]
   e07d4:	4718      	bx	r3
   e07d6:	4770      	bx	lr

000e07d8 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   e07d8:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e07da:	6803      	ldr	r3, [r0, #0]
   e07dc:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   e07de:	b1bb      	cbz	r3, e0810 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   e07e0:	6858      	ldr	r0, [r3, #4]
   e07e2:	f7fe fa23 	bl	dec2c <os_thread_is_current>
   e07e6:	b978      	cbnz	r0, e0808 <_ZN6ThreadD1Ev+0x30>
   e07e8:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   e07ea:	7c5a      	ldrb	r2, [r3, #17]
   e07ec:	b912      	cbnz	r2, e07f4 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   e07ee:	6858      	ldr	r0, [r3, #4]
   e07f0:	f7fe fa24 	bl	dec3c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   e07f4:	6823      	ldr	r3, [r4, #0]
   e07f6:	6858      	ldr	r0, [r3, #4]
   e07f8:	f7fe fa28 	bl	dec4c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e07fc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   e07fe:	2300      	movs	r3, #0
   e0800:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0802:	b128      	cbz	r0, e0810 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   e0804:	f7ff ffcd 	bl	e07a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0808:	6820      	ldr	r0, [r4, #0]
   e080a:	b108      	cbz	r0, e0810 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   e080c:	f7ff ffc9 	bl	e07a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   e0810:	4620      	mov	r0, r4
   e0812:	bd10      	pop	{r4, pc}

000e0814 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   e0814:	b538      	push	{r3, r4, r5, lr}
   e0816:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0818:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   e081c:	b108      	cbz	r0, e0822 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e081e:	f7f3 fc42 	bl	d40a6 <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   e0822:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   e0826:	b108      	cbz	r0, e082c <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   e0828:	f7fe fa20 	bl	dec6c <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e082c:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   e0830:	b135      	cbz	r5, e0840 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e0832:	4628      	mov	r0, r5
   e0834:	f7ff ffd0 	bl	e07d8 <_ZN6ThreadD1Ev>
   e0838:	2104      	movs	r1, #4
   e083a:	4628      	mov	r0, r5
   e083c:	f000 fd0e 	bl	e125c <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0840:	6820      	ldr	r0, [r4, #0]
   e0842:	b108      	cbz	r0, e0848 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   e0844:	f7ff ffc3 	bl	e07ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0848:	4620      	mov	r0, r4
   e084a:	bd38      	pop	{r3, r4, r5, pc}

000e084c <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   e084c:	b510      	push	{r4, lr}
   e084e:	4b04      	ldr	r3, [pc, #16]	; (e0860 <_ZN5spark9MeshClassD1Ev+0x14>)
   e0850:	4604      	mov	r4, r0
   e0852:	f840 3b08 	str.w	r3, [r0], #8
   e0856:	f7ff ffdd 	bl	e0814 <_ZN5spark11MeshPublishD1Ev>
   e085a:	4620      	mov	r0, r4
   e085c:	bd10      	pop	{r4, pc}
   e085e:	bf00      	nop
   e0860:	000e47b4 	.word	0x000e47b4

000e0864 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

namespace spark {

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e0864:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e0868:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   e086a:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   e086e:	4606      	mov	r6, r0
   e0870:	4688      	mov	r8, r1
   e0872:	4691      	mov	r9, r2
   e0874:	469a      	mov	sl, r3
   e0876:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e0878:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   e087a:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e087c:	454b      	cmp	r3, r9
   e087e:	d129      	bne.n	e08d4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   e0880:	6c63      	ldr	r3, [r4, #68]	; 0x44
   e0882:	4553      	cmp	r3, sl
   e0884:	d126      	bne.n	e08d4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   e0886:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   e088a:	455b      	cmp	r3, fp
   e088c:	d122      	bne.n	e08d4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e088e:	2140      	movs	r1, #64	; 0x40
   e0890:	4640      	mov	r0, r8
   e0892:	f001 fccd 	bl	e2230 <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   e0896:	4641      	mov	r1, r8
   e0898:	4602      	mov	r2, r0
   e089a:	4620      	mov	r0, r4
   e089c:	f001 fcb3 	bl	e2206 <strncmp>
   e08a0:	b9c0      	cbnz	r0, e08d4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   e08a2:	b16f      	cbz	r7, e08c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   e08a4:	210c      	movs	r1, #12
   e08a6:	4638      	mov	r0, r7
   e08a8:	f001 fcc2 	bl	e2230 <strnlen>
                if (id_len)
   e08ac:	4602      	mov	r2, r0
   e08ae:	b138      	cbz	r0, e08c0 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   e08b0:	2358      	movs	r3, #88	; 0x58
   e08b2:	fb03 6005 	mla	r0, r3, r5, r6
   e08b6:	4639      	mov	r1, r7
   e08b8:	3049      	adds	r0, #73	; 0x49
   e08ba:	f001 fca4 	bl	e2206 <strncmp>
   e08be:	e004      	b.n	e08ca <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   e08c0:	2058      	movs	r0, #88	; 0x58
   e08c2:	fb00 6505 	mla	r5, r0, r5, r6
   e08c6:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   e08ca:	fab0 f080 	clz	r0, r0
   e08ce:	0940      	lsrs	r0, r0, #5
   e08d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e08d4:	3501      	adds	r5, #1
   e08d6:	2d05      	cmp	r5, #5
   e08d8:	f104 0458 	add.w	r4, r4, #88	; 0x58
   e08dc:	d1cd      	bne.n	e087a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   e08de:	2000      	movs	r0, #0
}
   e08e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e08e4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e08e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e08e8:	b085      	sub	sp, #20
   e08ea:	4607      	mov	r7, r0
   e08ec:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   e08f0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   e08f2:	9601      	str	r6, [sp, #4]
   e08f4:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   e08f8:	4689      	mov	r9, r1
   e08fa:	9202      	str	r2, [sp, #8]
   e08fc:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   e08fe:	f7ff ffb1 	bl	e0864 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   e0902:	2800      	cmp	r0, #0
   e0904:	d13c      	bne.n	e0980 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   e0906:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   e0908:	2358      	movs	r3, #88	; 0x58
   e090a:	fb03 7504 	mla	r5, r3, r4, r7
   e090e:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   e0912:	f1b8 0f00 	cmp.w	r8, #0
   e0916:	d12e      	bne.n	e0976 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e0918:	2140      	movs	r1, #64	; 0x40
   e091a:	4648      	mov	r0, r9
   e091c:	f001 fc88 	bl	e2230 <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   e0920:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   e0922:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   e0924:	4602      	mov	r2, r0
   e0926:	4628      	mov	r0, r5
   e0928:	f001 fbfd 	bl	e2126 <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   e092c:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   e0930:	4641      	mov	r1, r8
   e0932:	eb05 000b 	add.w	r0, r5, fp
   e0936:	f001 fc01 	bl	e213c <memset>
            event_handlers[i].handler = handler;
   e093a:	9b02      	ldr	r3, [sp, #8]
   e093c:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   e093e:	9b03      	ldr	r3, [sp, #12]
   e0940:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   e0942:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   e0946:	b12e      	cbz	r6, e0954 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   e0948:	210c      	movs	r1, #12
   e094a:	4630      	mov	r0, r6
   e094c:	f001 fc70 	bl	e2230 <strnlen>
   e0950:	4605      	mov	r5, r0
   e0952:	e000      	b.n	e0956 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   e0954:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   e0956:	2058      	movs	r0, #88	; 0x58
   e0958:	4344      	muls	r4, r0
   e095a:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   e095c:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   e095e:	462a      	mov	r2, r5
   e0960:	4631      	mov	r1, r6
   e0962:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   e0964:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   e0966:	f001 fbde 	bl	e2126 <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   e096a:	2000      	movs	r0, #0
   e096c:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   e0970:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   e0974:	e005      	b.n	e0982 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e0976:	3401      	adds	r4, #1
   e0978:	2c05      	cmp	r4, #5
   e097a:	d1c6      	bne.n	e090a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   e097c:	4802      	ldr	r0, [pc, #8]	; (e0988 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   e097e:	e000      	b.n	e0982 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   e0980:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   e0982:	b005      	add	sp, #20
   e0984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e0988:	fffffefc 	.word	0xfffffefc

000e098c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   e098c:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   e098e:	2300      	movs	r3, #0
   e0990:	9301      	str	r3, [sp, #4]
   e0992:	9300      	str	r3, [sp, #0]
   e0994:	f7ff ffa6 	bl	e08e4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   e0998:	b003      	add	sp, #12
   e099a:	f85d fb04 	ldr.w	pc, [sp], #4

000e099e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   e099e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   e09a2:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   e09a4:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   e09a6:	460d      	mov	r5, r1
   e09a8:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   e09aa:	f001 fc24 	bl	e21f6 <strlen>
   e09ae:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   e09b2:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   e09b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   e09b6:	b1ab      	cbz	r3, e09e4 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   e09b8:	2140      	movs	r1, #64	; 0x40
   e09ba:	4620      	mov	r0, r4
   e09bc:	f001 fc38 	bl	e2230 <strnlen>

        if (event_name_length < filter_length)
   e09c0:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   e09c2:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   e09c4:	d30b      	bcc.n	e09de <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   e09c6:	4629      	mov	r1, r5
   e09c8:	4620      	mov	r0, r4
   e09ca:	f001 fb9d 	bl	e2108 <memcmp>
        if (0 == cmp)
   e09ce:	b930      	cbnz	r0, e09de <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   e09d0:	9000      	str	r0, [sp, #0]
   e09d2:	4643      	mov	r3, r8
   e09d4:	462a      	mov	r2, r5
   e09d6:	4621      	mov	r1, r4
   e09d8:	2058      	movs	r0, #88	; 0x58
   e09da:	f7fe fafb 	bl	defd4 <system_invoke_event_handler>
   e09de:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   e09e0:	42b4      	cmp	r4, r6
   e09e2:	d1e7      	bne.n	e09b4 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   e09e4:	b002      	add	sp, #8
   e09e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000e09ec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   e09ec:	b530      	push	{r4, r5, lr}
   e09ee:	b08d      	sub	sp, #52	; 0x34
   e09f0:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   e09f2:	2211      	movs	r2, #17
   e09f4:	2100      	movs	r1, #0
   e09f6:	a801      	add	r0, sp, #4
   e09f8:	f001 fba0 	bl	e213c <memset>
    addr.v = 6;
   e09fc:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e09fe:	aa01      	add	r2, sp, #4
   e0a00:	4909      	ldr	r1, [pc, #36]	; (e0a28 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   e0a02:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   e0a06:	200a      	movs	r0, #10
   e0a08:	f7fe f958 	bl	decbc <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   e0a0c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   e0a0e:	a901      	add	r1, sp, #4
   e0a10:	a806      	add	r0, sp, #24
   e0a12:	f7ff fcc9 	bl	e03a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e0a16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0a18:	3404      	adds	r4, #4
   e0a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0a1c:	682b      	ldr	r3, [r5, #0]
   e0a1e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   e0a20:	2000      	movs	r0, #0
   e0a22:	b00d      	add	sp, #52	; 0x34
   e0a24:	bd30      	pop	{r4, r5, pc}
   e0a26:	bf00      	nop
   e0a28:	000e47e0 	.word	0x000e47e0

000e0a2c <_ZN5spark11MeshPublish4pollEv>:
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0a30:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   e0a32:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   e0a36:	b08a      	sub	sp, #40	; 0x28
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   e0a38:	4630      	mov	r0, r6
   e0a3a:	f7ff f814 	bl	dfa66 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0a3e:	682c      	ldr	r4, [r5, #0]
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e0a40:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0a44:	f7fe f922 	bl	dec8c <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
   e0a48:	2c00      	cmp	r4, #0
   e0a4a:	d063      	beq.n	e0b14 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   e0a4c:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e0a50:	b163      	cbz	r3, e0a6c <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   e0a52:	6823      	ldr	r3, [r4, #0]
   e0a54:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   e0a58:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   e0a5a:	4620      	mov	r0, r4
   e0a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   e0a60:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   e0a64:	47b8      	blx	r7
        if (len > 0) {
   e0a66:	1e04      	subs	r4, r0, #0
   e0a68:	dc13      	bgt.n	e0a92 <_ZN5spark11MeshPublish4pollEv+0x66>
   e0a6a:	e056      	b.n	e0b1a <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp_.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   e0a6c:	492d      	ldr	r1, [pc, #180]	; (e0b24 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   e0a6e:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   e0a72:	f000 fbf5 	bl	e1260 <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0a76:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   e0a7a:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   e0a7e:	b113      	cbz	r3, e0a86 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   e0a80:	4618      	mov	r0, r3
   e0a82:	f7f3 fb10 	bl	d40a6 <_ZdaPv>
            if (!buffer_) {
   e0a86:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   e0a8a:	2b00      	cmp	r3, #0
   e0a8c:	d1e1      	bne.n	e0a52 <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   e0a8e:	4826      	ldr	r0, [pc, #152]	; (e0b28 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   e0a90:	e044      	b.n	e0b1c <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   e0a92:	2320      	movs	r3, #32
   e0a94:	4a25      	ldr	r2, [pc, #148]	; (e0b2c <_ZN5spark11MeshPublish4pollEv+0x100>)
   e0a96:	9302      	str	r3, [sp, #8]
   e0a98:	9200      	str	r2, [sp, #0]
   e0a9a:	2300      	movs	r3, #0
   e0a9c:	9401      	str	r4, [sp, #4]
   e0a9e:	aa02      	add	r2, sp, #8
   e0aa0:	4923      	ldr	r1, [pc, #140]	; (e0b30 <_ZN5spark11MeshPublish4pollEv+0x104>)
   e0aa2:	9303      	str	r3, [sp, #12]
   e0aa4:	2001      	movs	r0, #1
   e0aa6:	f7fe fa41 	bl	def2c <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0aaa:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   e0aae:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   e0ab0:	781b      	ldrb	r3, [r3, #0]
   e0ab2:	bb6b      	cbnz	r3, e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   e0ab4:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   e0ab6:	4621      	mov	r1, r4
   e0ab8:	4638      	mov	r0, r7
   e0aba:	f001 fbb9 	bl	e2230 <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   e0abe:	b338      	cbz	r0, e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   e0ac0:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0ac2:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   e0ac4:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0ac8:	dd22      	ble.n	e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e0aca:	5c3b      	ldrb	r3, [r7, r0]
   e0acc:	bb03      	cbnz	r3, e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   e0ace:	3c01      	subs	r4, #1
   e0ad0:	d00e      	beq.n	e0af0 <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   e0ad2:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   e0ad6:	4621      	mov	r1, r4
   e0ad8:	4640      	mov	r0, r8
   e0ada:	f001 fba9 	bl	e2230 <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   e0ade:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   e0ae0:	2c00      	cmp	r4, #0
   e0ae2:	dd15      	ble.n	e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   e0ae4:	f818 3000 	ldrb.w	r3, [r8, r0]
   e0ae8:	b993      	cbnz	r3, e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   e0aea:	2c01      	cmp	r4, #1
   e0aec:	d002      	beq.n	e0af4 <_ZN5spark11MeshPublish4pollEv+0xc8>
   e0aee:	e00f      	b.n	e0b10 <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   e0af0:	f8df 8044 	ldr.w	r8, [pc, #68]	; e0b38 <_ZN5spark11MeshPublish4pollEv+0x10c>
   e0af4:	4630      	mov	r0, r6
   e0af6:	f7fe ffb6 	bl	dfa66 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions_.send(topic, data);
   e0afa:	4642      	mov	r2, r8
   e0afc:	4639      	mov	r1, r7
   e0afe:	1d28      	adds	r0, r5, #4
   e0b00:	f7ff ff4d 	bl	e099e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   e0b04:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0b08:	f7fe f8c0 	bl	dec8c <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0b0c:	2000      	movs	r0, #0
   e0b0e:	e005      	b.n	e0b1c <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   e0b10:	4808      	ldr	r0, [pc, #32]	; (e0b34 <_ZN5spark11MeshPublish4pollEv+0x108>)
   e0b12:	e003      	b.n	e0b1c <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions_.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   e0b14:	2064      	movs	r0, #100	; 0x64
   e0b16:	f7fe f839 	bl	deb8c <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   e0b1a:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   e0b1c:	b00a      	add	sp, #40	; 0x28
   e0b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0b22:	bf00      	nop
   e0b24:	000e489c 	.word	0x000e489c
   e0b28:	fffffefc 	.word	0xfffffefc
   e0b2c:	000e47f4 	.word	0x000e47f4
   e0b30:	000e47ed 	.word	0x000e47ed
   e0b34:	fffffee8 	.word	0xfffffee8
   e0b38:	000e4694 	.word	0x000e4694

000e0b3c <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_>:
    CHECK(fetchMulticastAddress(mcastAddr));
    CHECK(udp->joinMulticast(mcastAddr));

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0b3c:	b510      	push	{r4, lr}
   e0b3e:	4604      	mov	r4, r0
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   e0b40:	f3bf 8f5f 	dmb	sy
   e0b44:	f894 31c8 	ldrb.w	r3, [r4, #456]	; 0x1c8
   e0b48:	f3bf 8f5f 	dmb	sy
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
   e0b4c:	b91b      	cbnz	r3, e0b56 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x1a>
            self->poll();
   e0b4e:	4620      	mov	r0, r4
   e0b50:	f7ff ff6c 	bl	e0a2c <_ZN5spark11MeshPublish4pollEv>
   e0b54:	e7f4      	b.n	e0b40 <_ZZN5spark11MeshPublish13initializeUdpEvENUlPvE_4_FUNES1_+0x4>
   e0b56:	bd10      	pop	{r4, pc}

000e0b58 <_ZN5spark9MeshClass13selectAntennaENS_15MeshAntennaTypeE>:
        HAL_Delay_Milliseconds(100);
    }
    return result;
}

int MeshClass::selectAntenna(MeshAntennaType antenna) {
   e0b58:	b508      	push	{r3, lr}
   e0b5a:	4608      	mov	r0, r1
    CHECK(mesh_select_antenna((int)antenna, nullptr));
   e0b5c:	2100      	movs	r1, #0
   e0b5e:	f7fe f90d 	bl	ded7c <mesh_select_antenna>
    return 0;
}
   e0b62:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   e0b66:	bd08      	pop	{r3, pc}

000e0b68 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>:
       * @param __p  The new pointer to store.
       *
       * The deleter will be invoked if a pointer is already owned.
       */
      void
      reset(pointer __p = pointer()) noexcept
   e0b68:	b510      	push	{r4, lr}
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0b6a:	6804      	ldr	r4, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0b6c:	6001      	str	r1, [r0, #0]
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0b6e:	b144      	cbz	r4, e0b82 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_+0x1a>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e0b70:	4620      	mov	r0, r4
   e0b72:	f7ff fe31 	bl	e07d8 <_ZN6ThreadD1Ev>
   e0b76:	4620      	mov	r0, r4
   e0b78:	2104      	movs	r1, #4
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
	  get_deleter()(__p);
      }
   e0b7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   e0b7e:	f000 bb6d 	b.w	e125c <_ZdlPvj>
   e0b82:	bd10      	pop	{r4, pc}

000e0b84 <_ZN5spark11MeshPublish13initializeUdpEv>:
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
    mcastAddr = addr;
    return 0;
}

int MeshPublish::initializeUdp() {
   e0b84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e0b88:	4605      	mov	r5, r0
   e0b8a:	b08a      	sub	sp, #40	; 0x28
   e0b8c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e0b90:	f7fe ff69 	bl	dfa66 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
   e0b94:	682c      	ldr	r4, [r5, #0]
   e0b96:	2c00      	cmp	r4, #0
   e0b98:	d17b      	bne.n	e0c92 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
   e0b9a:	204c      	movs	r0, #76	; 0x4c
   e0b9c:	f7f3 fa7d 	bl	d409a <_Znwj>
   e0ba0:	4606      	mov	r6, r0
   e0ba2:	2800      	cmp	r0, #0
   e0ba4:	d073      	beq.n	e0c8e <_ZN5spark11MeshPublish13initializeUdpEv+0x10a>
   e0ba6:	f7fe fdef 	bl	df788 <_ZN3UDPC1Ev>
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   e0baa:	4622      	mov	r2, r4
   e0bac:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   e0bb0:	4630      	mov	r0, r6
   e0bb2:	f7fe fe19 	bl	df7e8 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e0bb6:	a90a      	add	r1, sp, #40	; 0x28
    if_name_to_index("th1", &idx);
   e0bb8:	483a      	ldr	r0, [pc, #232]	; (e0ca4 <_ZN5spark11MeshPublish13initializeUdpEv+0x120>)
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
    // Get OpenThread interface index (interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   e0bba:	f801 4d19 	strb.w	r4, [r1, #-25]!
    if_name_to_index("th1", &idx);
   e0bbe:	f7fd ffb5 	bl	deb2c <if_name_to_index>
    // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   e0bc2:	6833      	ldr	r3, [r6, #0]
   e0bc4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   e0bc8:	6a1b      	ldr	r3, [r3, #32]
   e0bca:	f249 0169 	movw	r1, #36969	; 0x9069
   e0bce:	4630      	mov	r0, r6
   e0bd0:	4798      	blx	r3

    // subscribe to multicast
    IPAddress mcastAddr;
   e0bd2:	a804      	add	r0, sp, #16
   e0bd4:	f7ff fbda 	bl	e038c <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   e0bd8:	a804      	add	r0, sp, #16
   e0bda:	f7ff ff07 	bl	e09ec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   e0bde:	2800      	cmp	r0, #0
   e0be0:	db4a      	blt.n	e0c78 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
    CHECK(udp->joinMulticast(mcastAddr));
   e0be2:	a904      	add	r1, sp, #16
   e0be4:	4630      	mov	r0, r6
   e0be6:	f7fe fe6b 	bl	df8c0 <_ZN3UDP13joinMulticastERK9IPAddress>
   e0bea:	2800      	cmp	r0, #0
   e0bec:	db44      	blt.n	e0c78 <_ZN5spark11MeshPublish13initializeUdpEv+0xf4>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   e0bee:	f3bf 8f5f 	dmb	sy
   e0bf2:	f885 41c8 	strb.w	r4, [r5, #456]	; 0x1c8
   e0bf6:	f3bf 8f5f 	dmb	sy

    // Start polling thread
    exit_ = false;
    thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   e0bfa:	492b      	ldr	r1, [pc, #172]	; (e0ca8 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0bfc:	2004      	movs	r0, #4
   e0bfe:	f000 fb31 	bl	e1264 <_ZnwjRKSt9nothrow_t>
   e0c02:	f505 78de 	add.w	r8, r5, #444	; 0x1bc
   e0c06:	4607      	mov	r7, r0
   e0c08:	b348      	cbz	r0, e0c5e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   e0c0a:	4927      	ldr	r1, [pc, #156]	; (e0ca8 <_ZN5spark11MeshPublish13initializeUdpEv+0x124>)
   e0c0c:	2014      	movs	r0, #20
   e0c0e:	f000 fb29 	bl	e1264 <_ZnwjRKSt9nothrow_t>
   e0c12:	b128      	cbz	r0, e0c20 <_ZN5spark11MeshPublish13initializeUdpEv+0x9c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   e0c14:	7404      	strb	r4, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0c16:	6004      	str	r4, [r0, #0]
   e0c18:	6044      	str	r4, [r0, #4]
   e0c1a:	6084      	str	r4, [r0, #8]
   e0c1c:	60c4      	str	r4, [r0, #12]
   e0c1e:	7444      	strb	r4, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   e0c20:	6038      	str	r0, [r7, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   e0c22:	b1b0      	cbz	r0, e0c52 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
            goto error;
        }
        d_->func = function;
   e0c24:	4b21      	ldr	r3, [pc, #132]	; (e0cac <_ZN5spark11MeshPublish13initializeUdpEv+0x128>)
   e0c26:	6083      	str	r3, [r0, #8]
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   e0c28:	683b      	ldr	r3, [r7, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e0c2a:	4921      	ldr	r1, [pc, #132]	; (e0cb0 <_ZN5spark11MeshPublish13initializeUdpEv+0x12c>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   e0c2c:	60dd      	str	r5, [r3, #12]
   e0c2e:	6838      	ldr	r0, [r7, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   e0c30:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   e0c34:	e88d 0009 	stmia.w	sp, {r0, r3}
   e0c38:	2203      	movs	r2, #3
   e0c3a:	4b1e      	ldr	r3, [pc, #120]	; (e0cb4 <_ZN5spark11MeshPublish13initializeUdpEv+0x130>)
   e0c3c:	3004      	adds	r0, #4
   e0c3e:	f7fd ffed 	bl	dec1c <os_thread_create>
   e0c42:	b930      	cbnz	r0, e0c52 <_ZN5spark11MeshPublish13initializeUdpEv+0xce>
   e0c44:	683b      	ldr	r3, [r7, #0]
            goto error;
        }
        while (!d_->started) {
   e0c46:	7c1b      	ldrb	r3, [r3, #16]
   e0c48:	b94b      	cbnz	r3, e0c5e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
            // FIXME: This used to be os_thread_yield() but for some unknown reasons sometimes
            // it doesn't let the new thread to run.
            HAL_Delay_Milliseconds(1);
   e0c4a:	2001      	movs	r0, #1
   e0c4c:	f7fd ff9e 	bl	deb8c <HAL_Delay_Milliseconds>
   e0c50:	e7f8      	b.n	e0c44 <_ZN5spark11MeshPublish13initializeUdpEv+0xc0>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0c52:	6838      	ldr	r0, [r7, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0c54:	2300      	movs	r3, #0
   e0c56:	603b      	str	r3, [r7, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0c58:	b108      	cbz	r0, e0c5e <_ZN5spark11MeshPublish13initializeUdpEv+0xda>
	  get_deleter()(__p);
   e0c5a:	f7ff fda2 	bl	e07a2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
        auto self = (MeshPublish*)ptr;
        while (!self->exit_) {
            self->poll();
        }
    }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
   e0c5e:	4639      	mov	r1, r7
   e0c60:	4640      	mov	r0, r8
   e0c62:	f7ff ff81 	bl	e0b68 <_ZNSt10unique_ptrI6ThreadSt14default_deleteIS0_EE5resetEPS0_>

    if (!thread_) {
   e0c66:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   e0c6a:	b13b      	cbz	r3, e0c7c <_ZN5spark11MeshPublish13initializeUdpEv+0xf8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   e0c6c:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   e0c6e:	602e      	str	r6, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   e0c70:	b130      	cbz	r0, e0c80 <_ZN5spark11MeshPublish13initializeUdpEv+0xfc>
	  get_deleter()(__p);
   e0c72:	f7ff fdac 	bl	e07ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0c76:	e00c      	b.n	e0c92 <_ZN5spark11MeshPublish13initializeUdpEv+0x10e>
   e0c78:	4604      	mov	r4, r0
   e0c7a:	e003      	b.n	e0c84 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
        return SYSTEM_ERROR_NO_MEMORY;
   e0c7c:	4c0e      	ldr	r4, [pc, #56]	; (e0cb8 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e0c7e:	e001      	b.n	e0c84 <_ZN5spark11MeshPublish13initializeUdpEv+0x100>
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
   e0c80:	4604      	mov	r4, r0
   e0c82:	e007      	b.n	e0c94 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   e0c84:	b136      	cbz	r6, e0c94 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
	  get_deleter()(__ptr);
   e0c86:	4630      	mov	r0, r6
   e0c88:	f7ff fda1 	bl	e07ce <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   e0c8c:	e002      	b.n	e0c94 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
    if (udp_) {
        return SYSTEM_ERROR_NONE;
    }
    std::unique_ptr<UDP> udp(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   e0c8e:	4c0a      	ldr	r4, [pc, #40]	; (e0cb8 <_ZN5spark11MeshPublish13initializeUdpEv+0x134>)
   e0c90:	e000      	b.n	e0c94 <_ZN5spark11MeshPublish13initializeUdpEv+0x110>
}

int MeshPublish::initializeUdp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp_) {
        return SYSTEM_ERROR_NONE;
   e0c92:	2400      	movs	r4, #0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   e0c94:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0c98:	f7fd fff8 	bl	dec8c <os_mutex_recursive_unlock>
        return SYSTEM_ERROR_NO_MEMORY;
    }

    udp_ = std::move(udp);
    return SYSTEM_ERROR_NONE;
}
   e0c9c:	4620      	mov	r0, r4
   e0c9e:	b00a      	add	sp, #40	; 0x28
   e0ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0ca4:	000e4804 	.word	0x000e4804
   e0ca8:	000e489c 	.word	0x000e489c
   e0cac:	000e0b3d 	.word	0x000e0b3d
   e0cb0:	000e4808 	.word	0x000e4808
   e0cb4:	000e070d 	.word	0x000e070d
   e0cb8:	fffffefc 	.word	0xfffffefc

000e0cbc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp_->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   e0cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e0cbe:	4605      	mov	r5, r0
   e0cc0:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   e0cc4:	460e      	mov	r6, r1
   e0cc6:	4617      	mov	r7, r2
   e0cc8:	f7fe fecd 	bl	dfa66 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initializeUdp());
   e0ccc:	4628      	mov	r0, r5
   e0cce:	f7ff ff59 	bl	e0b84 <_ZN5spark11MeshPublish13initializeUdpEv>
   e0cd2:	2800      	cmp	r0, #0
   e0cd4:	db07      	blt.n	e0ce6 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2a>
    CHECK(subscriptions_.add(prefix, handler));
   e0cd6:	463a      	mov	r2, r7
   e0cd8:	4631      	mov	r1, r6
   e0cda:	1d28      	adds	r0, r5, #4
   e0cdc:	f7ff fe56 	bl	e098c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   e0ce0:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   e0ce4:	e000      	b.n	e0ce8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x2c>
   e0ce6:	4604      	mov	r4, r0
   e0ce8:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   e0cec:	f7fd ffce 	bl	dec8c <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   e0cf0:	4620      	mov	r0, r4
   e0cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e0cf4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   e0cf4:	b538      	push	{r3, r4, r5, lr}
   e0cf6:	4c0e      	ldr	r4, [pc, #56]	; (e0d30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   e0cf8:	4b0e      	ldr	r3, [pc, #56]	; (e0d34 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   e0cfa:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   e0cfc:	2500      	movs	r5, #0
   e0cfe:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   e0d00:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   e0d04:	6063      	str	r3, [r4, #4]
   e0d06:	60a5      	str	r5, [r4, #8]
   e0d08:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   e0d0c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   e0d10:	f7fd ffa4 	bl	dec5c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   e0d14:	4b08      	ldr	r3, [pc, #32]	; (e0d38 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   e0d16:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   e0d1a:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   e0d1e:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   e0d20:	4620      	mov	r0, r4
   e0d22:	4a06      	ldr	r2, [pc, #24]	; (e0d3c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   e0d24:	4906      	ldr	r1, [pc, #24]	; (e0d40 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   e0d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   e0d2a:	f000 ba89 	b.w	e1240 <__aeabi_atexit>
   e0d2e:	bf00      	nop
   e0d30:	2003e510 	.word	0x2003e510
   e0d34:	000e4870 	.word	0x000e4870
   e0d38:	000e47b4 	.word	0x000e47b4
   e0d3c:	2003e2dc 	.word	0x2003e2dc
   e0d40:	000e084d 	.word	0x000e084d

000e0d44 <_ZN10WiFiSignalD1Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e0d44:	4770      	bx	lr

000e0d46 <_ZNK10WiFiSignal19getAccessTechnologyEv>:
    return true;
}

hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}
   e0d46:	2001      	movs	r0, #1
   e0d48:	4770      	bx	lr
	...

000e0d4c <_ZNK10WiFiSignal16getStrengthValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
   e0d4c:	8983      	ldrh	r3, [r0, #12]
   e0d4e:	b11b      	cbz	r3, e0d58 <_ZNK10WiFiSignal16getStrengthValueEv+0xc>
   e0d50:	6903      	ldr	r3, [r0, #16]
   e0d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0d56:	d102      	bne.n	e0d5e <_ZNK10WiFiSignal16getStrengthValueEv+0x12>
        return inf_.rssi / 100.0f;
    }
    return 0.0f;
   e0d58:	ed9f 0a05 	vldr	s0, [pc, #20]	; e0d70 <_ZNK10WiFiSignal16getStrengthValueEv+0x24>
   e0d5c:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getStrengthValue() const {
    if (inf_.size != 0 && inf_.rssi != std::numeric_limits<int32_t>::min()) {
        return inf_.rssi / 100.0f;
   e0d5e:	ee07 3a90 	vmov	s15, r3
   e0d62:	ed9f 7a04 	vldr	s14, [pc, #16]	; e0d74 <_ZNK10WiFiSignal16getStrengthValueEv+0x28>
   e0d66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0d6a:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e0d6e:	4770      	bx	lr
   e0d70:	00000000 	.word	0x00000000
   e0d74:	42c80000 	.word	0x42c80000

000e0d78 <_ZNK10WiFiSignal15getQualityValueEv>:
    }
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
   e0d78:	8983      	ldrh	r3, [r0, #12]
   e0d7a:	b11b      	cbz	r3, e0d84 <_ZNK10WiFiSignal15getQualityValueEv+0xc>
   e0d7c:	6983      	ldr	r3, [r0, #24]
   e0d7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0d82:	d102      	bne.n	e0d8a <_ZNK10WiFiSignal15getQualityValueEv+0x12>
        return inf_.snr / 100.0f;
    }
    return 0.0f;
   e0d84:	ed9f 0a05 	vldr	s0, [pc, #20]	; e0d9c <_ZNK10WiFiSignal15getQualityValueEv+0x24>
   e0d88:	4770      	bx	lr
    return -1.0f;
}

float WiFiSignal::getQualityValue() const {
    if (inf_.size != 0 && inf_.snr != std::numeric_limits<int32_t>::min()) {
        return inf_.snr / 100.0f;
   e0d8a:	ee07 3a90 	vmov	s15, r3
   e0d8e:	ed9f 7a04 	vldr	s14, [pc, #16]	; e0da0 <_ZNK10WiFiSignal15getQualityValueEv+0x28>
   e0d92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   e0d96:	ee87 0a87 	vdiv.f32	s0, s15, s14
    }
    return 0.0f;
}
   e0d9a:	4770      	bx	lr
   e0d9c:	00000000 	.word	0x00000000
   e0da0:	42c80000 	.word	0x42c80000

000e0da4 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   e0da4:	2200      	movs	r2, #0
   e0da6:	4611      	mov	r1, r2
   e0da8:	6840      	ldr	r0, [r0, #4]
   e0daa:	f7fe b93d 	b.w	df028 <network_ready>

000e0dae <_ZN10WiFiSignalD0Ev>:
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
    WiFiSignal(const wlan_connected_info_t& inf);
    virtual ~WiFiSignal() {};
   e0dae:	b510      	push	{r4, lr}
   e0db0:	2124      	movs	r1, #36	; 0x24
   e0db2:	4604      	mov	r4, r0
   e0db4:	f000 fa52 	bl	e125c <_ZdlPvj>
   e0db8:	4620      	mov	r0, r4
   e0dba:	bd10      	pop	{r4, pc}

000e0dbc <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   e0dbc:	2200      	movs	r2, #0
   e0dbe:	4611      	mov	r1, r2
   e0dc0:	6840      	ldr	r0, [r0, #4]
   e0dc2:	f7fe b951 	b.w	df068 <network_listening>

000e0dc6 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   e0dc6:	2200      	movs	r2, #0
   e0dc8:	4611      	mov	r1, r2
   e0dca:	6840      	ldr	r0, [r0, #4]
   e0dcc:	f7fe b95c 	b.w	df088 <network_get_listen_timeout>

000e0dd0 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   e0dd0:	2200      	movs	r2, #0
   e0dd2:	6840      	ldr	r0, [r0, #4]
   e0dd4:	f7fe b950 	b.w	df078 <network_set_listen_timeout>

000e0dd8 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   e0dd8:	2200      	movs	r2, #0
   e0dda:	f081 0101 	eor.w	r1, r1, #1
   e0dde:	6840      	ldr	r0, [r0, #4]
   e0de0:	f7fe b93a 	b.w	df058 <network_listen>

000e0de4 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   e0de4:	2300      	movs	r3, #0
   e0de6:	461a      	mov	r2, r3
   e0de8:	4619      	mov	r1, r3
   e0dea:	6840      	ldr	r0, [r0, #4]
   e0dec:	f7fe b92c 	b.w	df048 <network_off>

000e0df0 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   e0df0:	2300      	movs	r3, #0
   e0df2:	461a      	mov	r2, r3
   e0df4:	4619      	mov	r1, r3
   e0df6:	6840      	ldr	r0, [r0, #4]
   e0df8:	f7fe b91e 	b.w	df038 <network_on>

000e0dfc <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   e0dfc:	2200      	movs	r2, #0
   e0dfe:	4611      	mov	r1, r2
   e0e00:	6840      	ldr	r0, [r0, #4]
   e0e02:	f7fe b901 	b.w	df008 <network_connecting>

000e0e06 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   e0e06:	2200      	movs	r2, #0
   e0e08:	2102      	movs	r1, #2
   e0e0a:	6840      	ldr	r0, [r0, #4]
   e0e0c:	f7fe b904 	b.w	df018 <network_disconnect>

000e0e10 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   e0e10:	2300      	movs	r3, #0
   e0e12:	461a      	mov	r2, r3
   e0e14:	6840      	ldr	r0, [r0, #4]
   e0e16:	f7fe b8ef 	b.w	deff8 <network_connect>
	...

000e0e1c <_ZNK10WiFiSignal10getQualityEv>:
    }
    return 0.0f;
}

float WiFiSignal::getQuality() const {
    if (inf_.size != 0 && inf_.quality >= 0) {
   e0e1c:	8983      	ldrh	r3, [r0, #12]
   e0e1e:	b17b      	cbz	r3, e0e40 <_ZNK10WiFiSignal10getQualityEv+0x24>
   e0e20:	6a03      	ldr	r3, [r0, #32]
   e0e22:	2b00      	cmp	r3, #0
   e0e24:	db0c      	blt.n	e0e40 <_ZNK10WiFiSignal10getQualityEv+0x24>
        return inf_.quality / 65535.0f * 100.0f;
   e0e26:	ee07 3a90 	vmov	s15, r3
   e0e2a:	eddf 6a07 	vldr	s13, [pc, #28]	; e0e48 <_ZNK10WiFiSignal10getQualityEv+0x2c>
   e0e2e:	ed9f 0a07 	vldr	s0, [pc, #28]	; e0e4c <_ZNK10WiFiSignal10getQualityEv+0x30>
   e0e32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0e36:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e0e3a:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0e3e:	4770      	bx	lr
    }
    return -1.0f;
   e0e40:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0e44:	4770      	bx	lr
   e0e46:	bf00      	nop
   e0e48:	477fff00 	.word	0x477fff00
   e0e4c:	42c80000 	.word	0x42c80000

000e0e50 <_ZNK10WiFiSignal11getStrengthEv>:
hal_net_access_tech_t WiFiSignal::getAccessTechnology() const {
    return NET_ACCESS_TECHNOLOGY_WIFI;
}

float WiFiSignal::getStrength() const {
    if (inf_.size != 0 && inf_.strength >= 0) {
   e0e50:	8983      	ldrh	r3, [r0, #12]
   e0e52:	b17b      	cbz	r3, e0e74 <_ZNK10WiFiSignal11getStrengthEv+0x24>
   e0e54:	6943      	ldr	r3, [r0, #20]
   e0e56:	2b00      	cmp	r3, #0
   e0e58:	db0c      	blt.n	e0e74 <_ZNK10WiFiSignal11getStrengthEv+0x24>
        return inf_.strength / 65535.0f * 100.0f;
   e0e5a:	ee07 3a90 	vmov	s15, r3
   e0e5e:	eddf 6a07 	vldr	s13, [pc, #28]	; e0e7c <_ZNK10WiFiSignal11getStrengthEv+0x2c>
   e0e62:	ed9f 0a07 	vldr	s0, [pc, #28]	; e0e80 <_ZNK10WiFiSignal11getStrengthEv+0x30>
   e0e66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
   e0e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
   e0e6e:	ee27 0a80 	vmul.f32	s0, s15, s0
   e0e72:	4770      	bx	lr
    }
    return -1.0f;
   e0e74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
}
   e0e78:	4770      	bx	lr
   e0e7a:	bf00      	nop
   e0e7c:	477fff00 	.word	0x477fff00
   e0e80:	42c80000 	.word	0x42c80000

000e0e84 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>:

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e0e84:	b570      	push	{r4, r5, r6, lr}
    inf_ = inf;
   e0e86:	460d      	mov	r5, r1

WiFiSignal::operator int8_t() const {
    return this->rssi;
}

bool WiFiSignal::fromConnectedInfo(const wlan_connected_info_t& inf) {
   e0e88:	4606      	mov	r6, r0
    inf_ = inf;
   e0e8a:	f100 040c 	add.w	r4, r0, #12
   e0e8e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e0e90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e0e92:	e895 0003 	ldmia.w	r5, {r0, r1}
   e0e96:	e884 0003 	stmia.w	r4, {r0, r1}
    this->rssi = inf_.rssi != std::numeric_limits<int32_t>::min() ? inf_.rssi / 100 : 2;
   e0e9a:	6933      	ldr	r3, [r6, #16]
   e0e9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0ea0:	bf0e      	itee	eq
   e0ea2:	2302      	moveq	r3, #2
   e0ea4:	2264      	movne	r2, #100	; 0x64
   e0ea6:	fb93 f3f2 	sdivne	r3, r3, r2
   e0eaa:	6073      	str	r3, [r6, #4]
    this->qual = inf_.snr != std::numeric_limits<int32_t>::min() ? inf_.snr / 100 : 0;
   e0eac:	69b3      	ldr	r3, [r6, #24]
   e0eae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   e0eb2:	bf0e      	itee	eq
   e0eb4:	2300      	moveq	r3, #0
   e0eb6:	2264      	movne	r2, #100	; 0x64
   e0eb8:	fb93 f3f2 	sdivne	r3, r3, r2
   e0ebc:	60b3      	str	r3, [r6, #8]
    return true;
}
   e0ebe:	2001      	movs	r0, #1
   e0ec0:	bd70      	pop	{r4, r5, r6, pc}
	...

000e0ec4 <_ZN5spark9WiFiClass4RSSIEv>:
    int WiFiClass::getCredentials(WiFiAccessPoint* results, size_t result_count) {
        APList apList(results, result_count);
        return apList.start();
    }

    WiFiSignal WiFiClass::RSSI() {
   e0ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
public:
    // In order to be compatible with CellularSignal
    int rssi = 2;
    int qual = 0;

    WiFiSignal() {}
   e0ec8:	4b16      	ldr	r3, [pc, #88]	; (e0f24 <_ZN5spark9WiFiClass4RSSIEv+0x60>)
   e0eca:	6003      	str	r3, [r0, #0]
   e0ecc:	2500      	movs	r5, #0
   e0ece:	4688      	mov	r8, r1
   e0ed0:	2702      	movs	r7, #2
   e0ed2:	2618      	movs	r6, #24
   e0ed4:	b086      	sub	sp, #24
   e0ed6:	6047      	str	r7, [r0, #4]
   e0ed8:	6085      	str	r5, [r0, #8]
   e0eda:	4632      	mov	r2, r6
   e0edc:	4629      	mov	r1, r5
   e0ede:	4604      	mov	r4, r0
   e0ee0:	300c      	adds	r0, #12
   e0ee2:	f001 f92b 	bl	e213c <memset>
        WiFiSignal sig;
        if (!network_ready(*this, 0, NULL)) {
   e0ee6:	462a      	mov	r2, r5
   e0ee8:	4629      	mov	r1, r5
   e0eea:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e0eee:	f7fe f89b 	bl	df028 <network_ready>
   e0ef2:	b190      	cbz	r0, e0f1a <_ZN5spark9WiFiClass4RSSIEv+0x56>
            return sig;
        }

        wlan_connected_info_t info = {0};
   e0ef4:	4632      	mov	r2, r6
   e0ef6:	4629      	mov	r1, r5
   e0ef8:	4668      	mov	r0, sp
   e0efa:	f001 f91f 	bl	e213c <memset>
        info.size = sizeof(info);
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e0efe:	462a      	mov	r2, r5
   e0f00:	4669      	mov	r1, sp
   e0f02:	4628      	mov	r0, r5
        if (!network_ready(*this, 0, NULL)) {
            return sig;
        }

        wlan_connected_info_t info = {0};
        info.size = sizeof(info);
   e0f04:	f8ad 6000 	strh.w	r6, [sp]
        int r = wlan_connected_info(nullptr, &info, nullptr);
   e0f08:	f7fd ffe0 	bl	deecc <wlan_connected_info>
        if (r == 0) {
   e0f0c:	b920      	cbnz	r0, e0f18 <_ZN5spark9WiFiClass4RSSIEv+0x54>
            sig.fromConnectedInfo(info);
   e0f0e:	4669      	mov	r1, sp
   e0f10:	4620      	mov	r0, r4
   e0f12:	f7ff ffb7 	bl	e0e84 <_ZN10WiFiSignal17fromConnectedInfoERK21wlan_connected_info_t>
            return sig;
   e0f16:	e000      	b.n	e0f1a <_ZN5spark9WiFiClass4RSSIEv+0x56>
        }

        sig.rssi = 2;
   e0f18:	6067      	str	r7, [r4, #4]
        return sig;
    }
   e0f1a:	4620      	mov	r0, r4
   e0f1c:	b006      	add	sp, #24
   e0f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e0f22:	bf00      	nop
   e0f24:	000e484c 	.word	0x000e484c

000e0f28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   e0f28:	4b02      	ldr	r3, [pc, #8]	; (e0f34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   e0f2a:	2204      	movs	r2, #4
   e0f2c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   e0f2e:	4a02      	ldr	r2, [pc, #8]	; (e0f38 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   e0f30:	601a      	str	r2, [r3, #0]
   e0f32:	4770      	bx	lr
   e0f34:	2003e6e4 	.word	0x2003e6e4
   e0f38:	000e4818 	.word	0x000e4818

000e0f3c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   e0f3c:	2300      	movs	r3, #0
   e0f3e:	461a      	mov	r2, r3
   e0f40:	6840      	ldr	r0, [r0, #4]
   e0f42:	f7fe b859 	b.w	deff8 <network_connect>

000e0f46 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   e0f46:	2200      	movs	r2, #0
   e0f48:	2102      	movs	r1, #2
   e0f4a:	6840      	ldr	r0, [r0, #4]
   e0f4c:	f7fe b864 	b.w	df018 <network_disconnect>

000e0f50 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   e0f50:	2200      	movs	r2, #0
   e0f52:	4611      	mov	r1, r2
   e0f54:	6840      	ldr	r0, [r0, #4]
   e0f56:	f7fe b857 	b.w	df008 <network_connecting>

000e0f5a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   e0f5a:	2200      	movs	r2, #0
   e0f5c:	4611      	mov	r1, r2
   e0f5e:	6840      	ldr	r0, [r0, #4]
   e0f60:	f7fe b862 	b.w	df028 <network_ready>

000e0f64 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   e0f64:	2300      	movs	r3, #0
   e0f66:	461a      	mov	r2, r3
   e0f68:	4619      	mov	r1, r3
   e0f6a:	6840      	ldr	r0, [r0, #4]
   e0f6c:	f7fe b864 	b.w	df038 <network_on>

000e0f70 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   e0f70:	2300      	movs	r3, #0
   e0f72:	461a      	mov	r2, r3
   e0f74:	4619      	mov	r1, r3
   e0f76:	6840      	ldr	r0, [r0, #4]
   e0f78:	f7fe b866 	b.w	df048 <network_off>

000e0f7c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   e0f7c:	2200      	movs	r2, #0
   e0f7e:	f081 0101 	eor.w	r1, r1, #1
   e0f82:	6840      	ldr	r0, [r0, #4]
   e0f84:	f7fe b868 	b.w	df058 <network_listen>

000e0f88 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   e0f88:	2200      	movs	r2, #0
   e0f8a:	6840      	ldr	r0, [r0, #4]
   e0f8c:	f7fe b874 	b.w	df078 <network_set_listen_timeout>

000e0f90 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   e0f90:	2200      	movs	r2, #0
   e0f92:	4611      	mov	r1, r2
   e0f94:	6840      	ldr	r0, [r0, #4]
   e0f96:	f7fe b877 	b.w	df088 <network_get_listen_timeout>

000e0f9a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   e0f9a:	2200      	movs	r2, #0
   e0f9c:	4611      	mov	r1, r2
   e0f9e:	6840      	ldr	r0, [r0, #4]
   e0fa0:	f7fe b862 	b.w	df068 <network_listening>

000e0fa4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   e0fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e0fa8:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   e0faa:	b095      	sub	sp, #84	; 0x54
   e0fac:	4616      	mov	r6, r2
   e0fae:	460d      	mov	r5, r1
   e0fb0:	4607      	mov	r7, r0
    IPAddress addr;
   e0fb2:	f7ff f9eb 	bl	e038c <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   e0fb6:	4621      	mov	r1, r4
   e0fb8:	2220      	movs	r2, #32
   e0fba:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   e0fbc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   e0fbe:	f001 f8bd 	bl	e213c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   e0fc2:	2340      	movs	r3, #64	; 0x40
   e0fc4:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   e0fc6:	4621      	mov	r1, r4
   e0fc8:	466b      	mov	r3, sp
   e0fca:	aa0c      	add	r2, sp, #48	; 0x30
   e0fcc:	4630      	mov	r0, r6
   e0fce:	f7fd fd5d 	bl	dea8c <netdb_getaddrinfo>
    if (!r) {
   e0fd2:	4604      	mov	r4, r0
   e0fd4:	2800      	cmp	r0, #0
   e0fd6:	d144      	bne.n	e1062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e0fd8:	4602      	mov	r2, r0
   e0fda:	2101      	movs	r1, #1
   e0fdc:	6868      	ldr	r0, [r5, #4]
   e0fde:	f7fe f823 	bl	df028 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e0fe2:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   e0fe4:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e0fe6:	4622      	mov	r2, r4
   e0fe8:	6868      	ldr	r0, [r5, #4]
   e0fea:	f7fe f81d 	bl	df028 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e0fee:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   e0ff0:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   e0ff2:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e0ff4:	2e00      	cmp	r6, #0
   e0ff6:	d034      	beq.n	e1062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   e0ff8:	2900      	cmp	r1, #0
   e0ffa:	d132      	bne.n	e1062 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   e0ffc:	6873      	ldr	r3, [r6, #4]
   e0ffe:	2b02      	cmp	r3, #2
   e1000:	d002      	beq.n	e1008 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   e1002:	2b0a      	cmp	r3, #10
   e1004:	d009      	beq.n	e101a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   e1006:	e02a      	b.n	e105e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   e1008:	f1b8 0f00 	cmp.w	r8, #0
   e100c:	d027      	beq.n	e105e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   e100e:	6971      	ldr	r1, [r6, #20]
   e1010:	4638      	mov	r0, r7
   e1012:	3104      	adds	r1, #4
   e1014:	f7ff f9fd 	bl	e0412 <_ZN9IPAddressaSEPKh>
   e1018:	e020      	b.n	e105c <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   e101a:	f1b9 0f00 	cmp.w	r9, #0
   e101e:	d01e      	beq.n	e105e <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   e1020:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   e1022:	2211      	movs	r2, #17
   e1024:	a801      	add	r0, sp, #4
   e1026:	f001 f889 	bl	e213c <memset>
                    a.v = 6;
   e102a:	2306      	movs	r3, #6
   e102c:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   e1030:	ad01      	add	r5, sp, #4
   e1032:	f104 0308 	add.w	r3, r4, #8
   e1036:	3418      	adds	r4, #24
   e1038:	6818      	ldr	r0, [r3, #0]
   e103a:	6859      	ldr	r1, [r3, #4]
   e103c:	462a      	mov	r2, r5
   e103e:	c203      	stmia	r2!, {r0, r1}
   e1040:	3308      	adds	r3, #8
   e1042:	42a3      	cmp	r3, r4
   e1044:	4615      	mov	r5, r2
   e1046:	d1f7      	bne.n	e1038 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   e1048:	a901      	add	r1, sp, #4
   e104a:	a806      	add	r0, sp, #24
   e104c:	ad07      	add	r5, sp, #28
   e104e:	f7ff f9ab 	bl	e03a8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   e1052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   e1054:	1d3c      	adds	r4, r7, #4
   e1056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   e1058:	682b      	ldr	r3, [r5, #0]
   e105a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   e105c:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   e105e:	69f6      	ldr	r6, [r6, #28]
   e1060:	e7c8      	b.n	e0ff4 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   e1062:	9800      	ldr	r0, [sp, #0]
   e1064:	f7fd fd0a 	bl	dea7c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   e1068:	4638      	mov	r0, r7
   e106a:	b015      	add	sp, #84	; 0x54
   e106c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e1070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   e1070:	4b02      	ldr	r3, [pc, #8]	; (e107c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   e1072:	4a03      	ldr	r2, [pc, #12]	; (e1080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   e1074:	601a      	str	r2, [r3, #0]
   e1076:	2200      	movs	r2, #0
   e1078:	605a      	str	r2, [r3, #4]
   e107a:	4770      	bx	lr
   e107c:	2003e6ec 	.word	0x2003e6ec
   e1080:	000e4870 	.word	0x000e4870

000e1084 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   e1084:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   e1086:	4e18      	ldr	r6, [pc, #96]	; (e10e8 <pinAvailable+0x64>)
   e1088:	6831      	ldr	r1, [r6, #0]
   e108a:	f011 0501 	ands.w	r5, r1, #1
   e108e:	4604      	mov	r4, r0
   e1090:	d10a      	bne.n	e10a8 <pinAvailable+0x24>
   e1092:	4630      	mov	r0, r6
   e1094:	f7f3 f809 	bl	d40aa <__cxa_guard_acquire>
   e1098:	b130      	cbz	r0, e10a8 <pinAvailable+0x24>
   e109a:	4629      	mov	r1, r5
   e109c:	4813      	ldr	r0, [pc, #76]	; (e10ec <pinAvailable+0x68>)
   e109e:	f7fe f8a9 	bl	df1f4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   e10a2:	4630      	mov	r0, r6
   e10a4:	f7f3 f806 	bl	d40b4 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   e10a8:	4810      	ldr	r0, [pc, #64]	; (e10ec <pinAvailable+0x68>)
   e10aa:	f7fe f8ad 	bl	df208 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   e10ae:	b128      	cbz	r0, e10bc <pinAvailable+0x38>
   e10b0:	f1a4 030b 	sub.w	r3, r4, #11
   e10b4:	2b02      	cmp	r3, #2
   e10b6:	d801      	bhi.n	e10bc <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   e10b8:	2000      	movs	r0, #0
   e10ba:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   e10bc:	f000 f89a 	bl	e11f4 <_Z19__fetch_global_Wirev>
   e10c0:	f7ff fb20 	bl	e0704 <_ZN7TwoWire9isEnabledEv>
   e10c4:	b108      	cbz	r0, e10ca <pinAvailable+0x46>
   e10c6:	2c01      	cmp	r4, #1
   e10c8:	d9f6      	bls.n	e10b8 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   e10ca:	f7ff faa3 	bl	e0614 <_Z22__fetch_global_Serial1v>
   e10ce:	f7ff fa9d 	bl	e060c <_ZN11USARTSerial9isEnabledEv>
   e10d2:	b118      	cbz	r0, e10dc <pinAvailable+0x58>
   e10d4:	f1a4 0309 	sub.w	r3, r4, #9
   e10d8:	2b01      	cmp	r3, #1
   e10da:	d9ed      	bls.n	e10b8 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   e10dc:	2c23      	cmp	r4, #35	; 0x23
   e10de:	bf8c      	ite	hi
   e10e0:	2000      	movhi	r0, #0
   e10e2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   e10e4:	bd70      	pop	{r4, r5, r6, pc}
   e10e6:	bf00      	nop
   e10e8:	2003e6f4 	.word	0x2003e6f4
   e10ec:	2003e6f8 	.word	0x2003e6f8

000e10f0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e10f0:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   e10f2:	b538      	push	{r3, r4, r5, lr}
   e10f4:	4604      	mov	r4, r0
   e10f6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   e10f8:	d80a      	bhi.n	e1110 <pinMode+0x20>
   e10fa:	29ff      	cmp	r1, #255	; 0xff
   e10fc:	d008      	beq.n	e1110 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e10fe:	f7ff ffc1 	bl	e1084 <pinAvailable>
   e1102:	b128      	cbz	r0, e1110 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e1104:	4629      	mov	r1, r5
   e1106:	4620      	mov	r0, r4
}
   e1108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   e110c:	f7fd bcd6 	b.w	deabc <HAL_Pin_Mode>
   e1110:	bd38      	pop	{r3, r4, r5, pc}

000e1112 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   e1112:	b538      	push	{r3, r4, r5, lr}
   e1114:	4604      	mov	r4, r0
   e1116:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e1118:	f7fd fcd8 	bl	deacc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   e111c:	28ff      	cmp	r0, #255	; 0xff
   e111e:	d010      	beq.n	e1142 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   e1120:	2806      	cmp	r0, #6
   e1122:	d804      	bhi.n	e112e <digitalWrite+0x1c>
   e1124:	234d      	movs	r3, #77	; 0x4d
   e1126:	fa23 f000 	lsr.w	r0, r3, r0
   e112a:	07c3      	lsls	r3, r0, #31
   e112c:	d409      	bmi.n	e1142 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   e112e:	4620      	mov	r0, r4
   e1130:	f7ff ffa8 	bl	e1084 <pinAvailable>
   e1134:	b128      	cbz	r0, e1142 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   e1136:	4629      	mov	r1, r5
   e1138:	4620      	mov	r0, r4
}
   e113a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   e113e:	f7fd bccd 	b.w	deadc <HAL_GPIO_Write>
   e1142:	bd38      	pop	{r3, r4, r5, pc}

000e1144 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   e1144:	b510      	push	{r4, lr}
   e1146:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   e1148:	f7fd fcc0 	bl	deacc <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   e114c:	3804      	subs	r0, #4
   e114e:	b2c0      	uxtb	r0, r0
   e1150:	2801      	cmp	r0, #1
   e1152:	d908      	bls.n	e1166 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   e1154:	4620      	mov	r0, r4
   e1156:	f7ff ff95 	bl	e1084 <pinAvailable>
   e115a:	b120      	cbz	r0, e1166 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e115c:	4620      	mov	r0, r4
}
   e115e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   e1162:	f7fd bcc3 	b.w	deaec <HAL_GPIO_Read>
}
   e1166:	2000      	movs	r0, #0
   e1168:	bd10      	pop	{r4, pc}

000e116a <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   e116a:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   e116c:	b510      	push	{r4, lr}
   e116e:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   e1170:	bf9c      	itt	ls
   e1172:	340e      	addls	r4, #14
   e1174:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   e1176:	4620      	mov	r0, r4
   e1178:	f7ff ff84 	bl	e1084 <pinAvailable>
   e117c:	b150      	cbz	r0, e1194 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   e117e:	2103      	movs	r1, #3
   e1180:	4620      	mov	r0, r4
   e1182:	f7fd fc93 	bl	deaac <HAL_Validate_Pin_Function>
   e1186:	2803      	cmp	r0, #3
   e1188:	d104      	bne.n	e1194 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e118a:	4620      	mov	r0, r4
}
   e118c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   e1190:	f7fd bcb4 	b.w	deafc <HAL_ADC_Read>
}
   e1194:	2000      	movs	r0, #0
   e1196:	bd10      	pop	{r4, pc}

000e1198 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   e1198:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   e119a:	4c07      	ldr	r4, [pc, #28]	; (e11b8 <_Z21__fetch_global_EEPROMv+0x20>)
   e119c:	6823      	ldr	r3, [r4, #0]
   e119e:	07db      	lsls	r3, r3, #31
   e11a0:	d408      	bmi.n	e11b4 <_Z21__fetch_global_EEPROMv+0x1c>
   e11a2:	4620      	mov	r0, r4
   e11a4:	f7f2 ff81 	bl	d40aa <__cxa_guard_acquire>
   e11a8:	b120      	cbz	r0, e11b4 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   e11aa:	f7fd fd17 	bl	debdc <HAL_EEPROM_Init>
   e11ae:	4620      	mov	r0, r4
   e11b0:	f7f2 ff80 	bl	d40b4 <__cxa_guard_release>
	return eeprom;
}
   e11b4:	4801      	ldr	r0, [pc, #4]	; (e11bc <_Z21__fetch_global_EEPROMv+0x24>)
   e11b6:	bd10      	pop	{r4, pc}
   e11b8:	2003e704 	.word	0x2003e704
   e11bc:	2003e708 	.word	0x2003e708

000e11c0 <_Z17acquireWireBufferv>:
   e11c0:	b570      	push	{r4, r5, r6, lr}
   e11c2:	4604      	mov	r4, r0
   e11c4:	2514      	movs	r5, #20
   e11c6:	462a      	mov	r2, r5
   e11c8:	4e09      	ldr	r6, [pc, #36]	; (e11f0 <_Z17acquireWireBufferv+0x30>)
   e11ca:	2100      	movs	r1, #0
   e11cc:	f000 ffb6 	bl	e213c <memset>
   e11d0:	8025      	strh	r5, [r4, #0]
   e11d2:	2520      	movs	r5, #32
   e11d4:	4631      	mov	r1, r6
   e11d6:	60a5      	str	r5, [r4, #8]
   e11d8:	6125      	str	r5, [r4, #16]
   e11da:	4628      	mov	r0, r5
   e11dc:	f000 f840 	bl	e1260 <_ZnajRKSt9nothrow_t>
   e11e0:	4631      	mov	r1, r6
   e11e2:	6060      	str	r0, [r4, #4]
   e11e4:	4628      	mov	r0, r5
   e11e6:	f000 f83b 	bl	e1260 <_ZnajRKSt9nothrow_t>
   e11ea:	60e0      	str	r0, [r4, #12]
   e11ec:	4620      	mov	r0, r4
   e11ee:	bd70      	pop	{r4, r5, r6, pc}
   e11f0:	000e489c 	.word	0x000e489c

000e11f4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e11f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e11f6:	4d0e      	ldr	r5, [pc, #56]	; (e1230 <_Z19__fetch_global_Wirev+0x3c>)
   e11f8:	6829      	ldr	r1, [r5, #0]
   e11fa:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   e11fe:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   e1200:	d113      	bne.n	e122a <_Z19__fetch_global_Wirev+0x36>
   e1202:	4628      	mov	r0, r5
   e1204:	f7f2 ff51 	bl	d40aa <__cxa_guard_acquire>
   e1208:	b178      	cbz	r0, e122a <_Z19__fetch_global_Wirev+0x36>
   e120a:	a801      	add	r0, sp, #4
   e120c:	f7ff ffd8 	bl	e11c0 <_Z17acquireWireBufferv>
   e1210:	aa01      	add	r2, sp, #4
   e1212:	4621      	mov	r1, r4
   e1214:	4807      	ldr	r0, [pc, #28]	; (e1234 <_Z19__fetch_global_Wirev+0x40>)
   e1216:	f7ff fa63 	bl	e06e0 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   e121a:	4628      	mov	r0, r5
   e121c:	f7f2 ff4a 	bl	d40b4 <__cxa_guard_release>
   e1220:	4a05      	ldr	r2, [pc, #20]	; (e1238 <_Z19__fetch_global_Wirev+0x44>)
   e1222:	4906      	ldr	r1, [pc, #24]	; (e123c <_Z19__fetch_global_Wirev+0x48>)
   e1224:	4803      	ldr	r0, [pc, #12]	; (e1234 <_Z19__fetch_global_Wirev+0x40>)
   e1226:	f000 f80b 	bl	e1240 <__aeabi_atexit>
	return wire;
}
   e122a:	4802      	ldr	r0, [pc, #8]	; (e1234 <_Z19__fetch_global_Wirev+0x40>)
   e122c:	b007      	add	sp, #28
   e122e:	bd30      	pop	{r4, r5, pc}
   e1230:	2003e70c 	.word	0x2003e70c
   e1234:	2003e710 	.word	0x2003e710
   e1238:	2003e2dc 	.word	0x2003e2dc
   e123c:	000e0689 	.word	0x000e0689

000e1240 <__aeabi_atexit>:
   e1240:	460b      	mov	r3, r1
   e1242:	4601      	mov	r1, r0
   e1244:	4618      	mov	r0, r3
   e1246:	f000 be55 	b.w	e1ef4 <__cxa_atexit>
	...

000e124c <_ZSt15get_new_handlerv>:
   e124c:	4b02      	ldr	r3, [pc, #8]	; (e1258 <_ZSt15get_new_handlerv+0xc>)
   e124e:	6818      	ldr	r0, [r3, #0]
   e1250:	f3bf 8f5f 	dmb	sy
   e1254:	4770      	bx	lr
   e1256:	bf00      	nop
   e1258:	2003e724 	.word	0x2003e724

000e125c <_ZdlPvj>:
   e125c:	f7f2 bf21 	b.w	d40a2 <_ZdlPv>

000e1260 <_ZnajRKSt9nothrow_t>:
   e1260:	f000 b800 	b.w	e1264 <_ZnwjRKSt9nothrow_t>

000e1264 <_ZnwjRKSt9nothrow_t>:
   e1264:	b510      	push	{r4, lr}
   e1266:	2800      	cmp	r0, #0
   e1268:	bf14      	ite	ne
   e126a:	4604      	movne	r4, r0
   e126c:	2401      	moveq	r4, #1
   e126e:	4620      	mov	r0, r4
   e1270:	f7fd ff52 	bl	df118 <malloc>
   e1274:	b920      	cbnz	r0, e1280 <_ZnwjRKSt9nothrow_t+0x1c>
   e1276:	f7ff ffe9 	bl	e124c <_ZSt15get_new_handlerv>
   e127a:	b108      	cbz	r0, e1280 <_ZnwjRKSt9nothrow_t+0x1c>
   e127c:	4780      	blx	r0
   e127e:	e7f6      	b.n	e126e <_ZnwjRKSt9nothrow_t+0xa>
   e1280:	bd10      	pop	{r4, pc}

000e1282 <_ZSt25__throw_bad_function_callv>:
   e1282:	b508      	push	{r3, lr}
   e1284:	f7fd ff68 	bl	df158 <abort>

000e1288 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e1288:	4b18      	ldr	r3, [pc, #96]	; (e12ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e128a:	681a      	ldr	r2, [r3, #0]
   e128c:	07d1      	lsls	r1, r2, #31
   e128e:	bf5c      	itt	pl
   e1290:	2201      	movpl	r2, #1
   e1292:	601a      	strpl	r2, [r3, #0]
   e1294:	4b16      	ldr	r3, [pc, #88]	; (e12f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e1296:	681a      	ldr	r2, [r3, #0]
   e1298:	07d2      	lsls	r2, r2, #31
   e129a:	bf5c      	itt	pl
   e129c:	2201      	movpl	r2, #1
   e129e:	601a      	strpl	r2, [r3, #0]
   e12a0:	4b14      	ldr	r3, [pc, #80]	; (e12f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e12a2:	681a      	ldr	r2, [r3, #0]
   e12a4:	07d0      	lsls	r0, r2, #31
   e12a6:	bf5c      	itt	pl
   e12a8:	2201      	movpl	r2, #1
   e12aa:	601a      	strpl	r2, [r3, #0]
   e12ac:	4b12      	ldr	r3, [pc, #72]	; (e12f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e12ae:	681a      	ldr	r2, [r3, #0]
   e12b0:	07d1      	lsls	r1, r2, #31
   e12b2:	bf5c      	itt	pl
   e12b4:	2201      	movpl	r2, #1
   e12b6:	601a      	strpl	r2, [r3, #0]
   e12b8:	4b10      	ldr	r3, [pc, #64]	; (e12fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e12ba:	681a      	ldr	r2, [r3, #0]
   e12bc:	07d2      	lsls	r2, r2, #31
   e12be:	bf5c      	itt	pl
   e12c0:	2201      	movpl	r2, #1
   e12c2:	601a      	strpl	r2, [r3, #0]
   e12c4:	4b0e      	ldr	r3, [pc, #56]	; (e1300 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e12c6:	681a      	ldr	r2, [r3, #0]
   e12c8:	07d0      	lsls	r0, r2, #31
   e12ca:	bf5c      	itt	pl
   e12cc:	2201      	movpl	r2, #1
   e12ce:	601a      	strpl	r2, [r3, #0]
   e12d0:	4b0c      	ldr	r3, [pc, #48]	; (e1304 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e12d2:	681a      	ldr	r2, [r3, #0]
   e12d4:	07d1      	lsls	r1, r2, #31
   e12d6:	bf5c      	itt	pl
   e12d8:	2201      	movpl	r2, #1
   e12da:	601a      	strpl	r2, [r3, #0]
   e12dc:	4b0a      	ldr	r3, [pc, #40]	; (e1308 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e12de:	681a      	ldr	r2, [r3, #0]
   e12e0:	07d2      	lsls	r2, r2, #31
   e12e2:	bf5c      	itt	pl
   e12e4:	2201      	movpl	r2, #1
   e12e6:	601a      	strpl	r2, [r3, #0]
   e12e8:	4770      	bx	lr
   e12ea:	bf00      	nop
   e12ec:	2003e744 	.word	0x2003e744
   e12f0:	2003e740 	.word	0x2003e740
   e12f4:	2003e73c 	.word	0x2003e73c
   e12f8:	2003e738 	.word	0x2003e738
   e12fc:	2003e734 	.word	0x2003e734
   e1300:	2003e730 	.word	0x2003e730
   e1304:	2003e72c 	.word	0x2003e72c
   e1308:	2003e728 	.word	0x2003e728

000e130c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   e130c:	4b24      	ldr	r3, [pc, #144]	; (e13a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   e130e:	681a      	ldr	r2, [r3, #0]
   e1310:	07d0      	lsls	r0, r2, #31
   e1312:	bf5c      	itt	pl
   e1314:	2201      	movpl	r2, #1
   e1316:	601a      	strpl	r2, [r3, #0]
   e1318:	4b22      	ldr	r3, [pc, #136]	; (e13a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   e131a:	681a      	ldr	r2, [r3, #0]
   e131c:	07d1      	lsls	r1, r2, #31
   e131e:	bf5c      	itt	pl
   e1320:	2201      	movpl	r2, #1
   e1322:	601a      	strpl	r2, [r3, #0]
   e1324:	4b20      	ldr	r3, [pc, #128]	; (e13a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   e1326:	681a      	ldr	r2, [r3, #0]
   e1328:	07d2      	lsls	r2, r2, #31
   e132a:	bf5c      	itt	pl
   e132c:	2201      	movpl	r2, #1
   e132e:	601a      	strpl	r2, [r3, #0]
   e1330:	4b1e      	ldr	r3, [pc, #120]	; (e13ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   e1332:	681a      	ldr	r2, [r3, #0]
   e1334:	07d0      	lsls	r0, r2, #31
   e1336:	bf5c      	itt	pl
   e1338:	2201      	movpl	r2, #1
   e133a:	601a      	strpl	r2, [r3, #0]
   e133c:	4b1c      	ldr	r3, [pc, #112]	; (e13b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   e133e:	681a      	ldr	r2, [r3, #0]
   e1340:	07d1      	lsls	r1, r2, #31
   e1342:	bf5c      	itt	pl
   e1344:	2201      	movpl	r2, #1
   e1346:	601a      	strpl	r2, [r3, #0]
   e1348:	4b1a      	ldr	r3, [pc, #104]	; (e13b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   e134a:	681a      	ldr	r2, [r3, #0]
   e134c:	07d2      	lsls	r2, r2, #31
   e134e:	bf5c      	itt	pl
   e1350:	2201      	movpl	r2, #1
   e1352:	601a      	strpl	r2, [r3, #0]
   e1354:	4b18      	ldr	r3, [pc, #96]	; (e13b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   e1356:	681a      	ldr	r2, [r3, #0]
   e1358:	07d0      	lsls	r0, r2, #31
   e135a:	bf5c      	itt	pl
   e135c:	2201      	movpl	r2, #1
   e135e:	601a      	strpl	r2, [r3, #0]
   e1360:	4b16      	ldr	r3, [pc, #88]	; (e13bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   e1362:	681a      	ldr	r2, [r3, #0]
   e1364:	07d1      	lsls	r1, r2, #31
   e1366:	bf5c      	itt	pl
   e1368:	2201      	movpl	r2, #1
   e136a:	601a      	strpl	r2, [r3, #0]
   e136c:	4b14      	ldr	r3, [pc, #80]	; (e13c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   e136e:	681a      	ldr	r2, [r3, #0]
   e1370:	07d2      	lsls	r2, r2, #31
   e1372:	bf5c      	itt	pl
   e1374:	2201      	movpl	r2, #1
   e1376:	601a      	strpl	r2, [r3, #0]
   e1378:	4b12      	ldr	r3, [pc, #72]	; (e13c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   e137a:	681a      	ldr	r2, [r3, #0]
   e137c:	07d0      	lsls	r0, r2, #31
   e137e:	bf5c      	itt	pl
   e1380:	2201      	movpl	r2, #1
   e1382:	601a      	strpl	r2, [r3, #0]
   e1384:	4b10      	ldr	r3, [pc, #64]	; (e13c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   e1386:	681a      	ldr	r2, [r3, #0]
   e1388:	07d1      	lsls	r1, r2, #31
   e138a:	bf5c      	itt	pl
   e138c:	2201      	movpl	r2, #1
   e138e:	601a      	strpl	r2, [r3, #0]
   e1390:	4b0e      	ldr	r3, [pc, #56]	; (e13cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   e1392:	681a      	ldr	r2, [r3, #0]
   e1394:	07d2      	lsls	r2, r2, #31
   e1396:	bf5c      	itt	pl
   e1398:	2201      	movpl	r2, #1
   e139a:	601a      	strpl	r2, [r3, #0]
   e139c:	4770      	bx	lr
   e139e:	bf00      	nop
   e13a0:	2003e774 	.word	0x2003e774
   e13a4:	2003e770 	.word	0x2003e770
   e13a8:	2003e76c 	.word	0x2003e76c
   e13ac:	2003e768 	.word	0x2003e768
   e13b0:	2003e764 	.word	0x2003e764
   e13b4:	2003e760 	.word	0x2003e760
   e13b8:	2003e75c 	.word	0x2003e75c
   e13bc:	2003e758 	.word	0x2003e758
   e13c0:	2003e754 	.word	0x2003e754
   e13c4:	2003e750 	.word	0x2003e750
   e13c8:	2003e74c 	.word	0x2003e74c
   e13cc:	2003e748 	.word	0x2003e748

000e13d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   e13d0:	4b24      	ldr	r3, [pc, #144]	; (e1464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   e13d2:	681a      	ldr	r2, [r3, #0]
   e13d4:	07d0      	lsls	r0, r2, #31
   e13d6:	bf5c      	itt	pl
   e13d8:	2201      	movpl	r2, #1
   e13da:	601a      	strpl	r2, [r3, #0]
   e13dc:	4b22      	ldr	r3, [pc, #136]	; (e1468 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   e13de:	681a      	ldr	r2, [r3, #0]
   e13e0:	07d1      	lsls	r1, r2, #31
   e13e2:	bf5c      	itt	pl
   e13e4:	2201      	movpl	r2, #1
   e13e6:	601a      	strpl	r2, [r3, #0]
   e13e8:	4b20      	ldr	r3, [pc, #128]	; (e146c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   e13ea:	681a      	ldr	r2, [r3, #0]
   e13ec:	07d2      	lsls	r2, r2, #31
   e13ee:	bf5c      	itt	pl
   e13f0:	2201      	movpl	r2, #1
   e13f2:	601a      	strpl	r2, [r3, #0]
   e13f4:	4b1e      	ldr	r3, [pc, #120]	; (e1470 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   e13f6:	681a      	ldr	r2, [r3, #0]
   e13f8:	07d0      	lsls	r0, r2, #31
   e13fa:	bf5c      	itt	pl
   e13fc:	2201      	movpl	r2, #1
   e13fe:	601a      	strpl	r2, [r3, #0]
   e1400:	4b1c      	ldr	r3, [pc, #112]	; (e1474 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   e1402:	681a      	ldr	r2, [r3, #0]
   e1404:	07d1      	lsls	r1, r2, #31
   e1406:	bf5c      	itt	pl
   e1408:	2201      	movpl	r2, #1
   e140a:	601a      	strpl	r2, [r3, #0]
   e140c:	4b1a      	ldr	r3, [pc, #104]	; (e1478 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   e140e:	681a      	ldr	r2, [r3, #0]
   e1410:	07d2      	lsls	r2, r2, #31
   e1412:	bf5c      	itt	pl
   e1414:	2201      	movpl	r2, #1
   e1416:	601a      	strpl	r2, [r3, #0]
   e1418:	4b18      	ldr	r3, [pc, #96]	; (e147c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   e141a:	681a      	ldr	r2, [r3, #0]
   e141c:	07d0      	lsls	r0, r2, #31
   e141e:	bf5c      	itt	pl
   e1420:	2201      	movpl	r2, #1
   e1422:	601a      	strpl	r2, [r3, #0]
   e1424:	4b16      	ldr	r3, [pc, #88]	; (e1480 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   e1426:	681a      	ldr	r2, [r3, #0]
   e1428:	07d1      	lsls	r1, r2, #31
   e142a:	bf5c      	itt	pl
   e142c:	2201      	movpl	r2, #1
   e142e:	601a      	strpl	r2, [r3, #0]
   e1430:	4b14      	ldr	r3, [pc, #80]	; (e1484 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   e1432:	681a      	ldr	r2, [r3, #0]
   e1434:	07d2      	lsls	r2, r2, #31
   e1436:	bf5c      	itt	pl
   e1438:	2201      	movpl	r2, #1
   e143a:	601a      	strpl	r2, [r3, #0]
   e143c:	4b12      	ldr	r3, [pc, #72]	; (e1488 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   e143e:	681a      	ldr	r2, [r3, #0]
   e1440:	07d0      	lsls	r0, r2, #31
   e1442:	bf5c      	itt	pl
   e1444:	2201      	movpl	r2, #1
   e1446:	601a      	strpl	r2, [r3, #0]
   e1448:	4b10      	ldr	r3, [pc, #64]	; (e148c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   e144a:	681a      	ldr	r2, [r3, #0]
   e144c:	07d1      	lsls	r1, r2, #31
   e144e:	bf5c      	itt	pl
   e1450:	2201      	movpl	r2, #1
   e1452:	601a      	strpl	r2, [r3, #0]
   e1454:	4b0e      	ldr	r3, [pc, #56]	; (e1490 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   e1456:	681a      	ldr	r2, [r3, #0]
   e1458:	07d2      	lsls	r2, r2, #31
   e145a:	bf5c      	itt	pl
   e145c:	2201      	movpl	r2, #1
   e145e:	601a      	strpl	r2, [r3, #0]
   e1460:	4770      	bx	lr
   e1462:	bf00      	nop
   e1464:	2003e7a4 	.word	0x2003e7a4
   e1468:	2003e7a0 	.word	0x2003e7a0
   e146c:	2003e79c 	.word	0x2003e79c
   e1470:	2003e798 	.word	0x2003e798
   e1474:	2003e794 	.word	0x2003e794
   e1478:	2003e790 	.word	0x2003e790
   e147c:	2003e78c 	.word	0x2003e78c
   e1480:	2003e788 	.word	0x2003e788
   e1484:	2003e784 	.word	0x2003e784
   e1488:	2003e780 	.word	0x2003e780
   e148c:	2003e77c 	.word	0x2003e77c
   e1490:	2003e778 	.word	0x2003e778

000e1494 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   e1494:	4b18      	ldr	r3, [pc, #96]	; (e14f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   e1496:	681a      	ldr	r2, [r3, #0]
   e1498:	07d1      	lsls	r1, r2, #31
   e149a:	bf5c      	itt	pl
   e149c:	2201      	movpl	r2, #1
   e149e:	601a      	strpl	r2, [r3, #0]
   e14a0:	4b16      	ldr	r3, [pc, #88]	; (e14fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   e14a2:	681a      	ldr	r2, [r3, #0]
   e14a4:	07d2      	lsls	r2, r2, #31
   e14a6:	bf5c      	itt	pl
   e14a8:	2201      	movpl	r2, #1
   e14aa:	601a      	strpl	r2, [r3, #0]
   e14ac:	4b14      	ldr	r3, [pc, #80]	; (e1500 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   e14ae:	681a      	ldr	r2, [r3, #0]
   e14b0:	07d0      	lsls	r0, r2, #31
   e14b2:	bf5c      	itt	pl
   e14b4:	2201      	movpl	r2, #1
   e14b6:	601a      	strpl	r2, [r3, #0]
   e14b8:	4b12      	ldr	r3, [pc, #72]	; (e1504 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   e14ba:	681a      	ldr	r2, [r3, #0]
   e14bc:	07d1      	lsls	r1, r2, #31
   e14be:	bf5c      	itt	pl
   e14c0:	2201      	movpl	r2, #1
   e14c2:	601a      	strpl	r2, [r3, #0]
   e14c4:	4b10      	ldr	r3, [pc, #64]	; (e1508 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   e14c6:	681a      	ldr	r2, [r3, #0]
   e14c8:	07d2      	lsls	r2, r2, #31
   e14ca:	bf5c      	itt	pl
   e14cc:	2201      	movpl	r2, #1
   e14ce:	601a      	strpl	r2, [r3, #0]
   e14d0:	4b0e      	ldr	r3, [pc, #56]	; (e150c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   e14d2:	681a      	ldr	r2, [r3, #0]
   e14d4:	07d0      	lsls	r0, r2, #31
   e14d6:	bf5c      	itt	pl
   e14d8:	2201      	movpl	r2, #1
   e14da:	601a      	strpl	r2, [r3, #0]
   e14dc:	4b0c      	ldr	r3, [pc, #48]	; (e1510 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   e14de:	681a      	ldr	r2, [r3, #0]
   e14e0:	07d1      	lsls	r1, r2, #31
   e14e2:	bf5c      	itt	pl
   e14e4:	2201      	movpl	r2, #1
   e14e6:	601a      	strpl	r2, [r3, #0]
   e14e8:	4b0a      	ldr	r3, [pc, #40]	; (e1514 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   e14ea:	681a      	ldr	r2, [r3, #0]
   e14ec:	07d2      	lsls	r2, r2, #31
   e14ee:	bf5c      	itt	pl
   e14f0:	2201      	movpl	r2, #1
   e14f2:	601a      	strpl	r2, [r3, #0]
   e14f4:	4770      	bx	lr
   e14f6:	bf00      	nop
   e14f8:	2003e7c4 	.word	0x2003e7c4
   e14fc:	2003e7c0 	.word	0x2003e7c0
   e1500:	2003e7bc 	.word	0x2003e7bc
   e1504:	2003e7b8 	.word	0x2003e7b8
   e1508:	2003e7b4 	.word	0x2003e7b4
   e150c:	2003e7b0 	.word	0x2003e7b0
   e1510:	2003e7ac 	.word	0x2003e7ac
   e1514:	2003e7a8 	.word	0x2003e7a8

000e1518 <__aeabi_drsub>:
   e1518:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   e151c:	e002      	b.n	e1524 <__adddf3>
   e151e:	bf00      	nop

000e1520 <__aeabi_dsub>:
   e1520:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000e1524 <__adddf3>:
   e1524:	b530      	push	{r4, r5, lr}
   e1526:	ea4f 0441 	mov.w	r4, r1, lsl #1
   e152a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   e152e:	ea94 0f05 	teq	r4, r5
   e1532:	bf08      	it	eq
   e1534:	ea90 0f02 	teqeq	r0, r2
   e1538:	bf1f      	itttt	ne
   e153a:	ea54 0c00 	orrsne.w	ip, r4, r0
   e153e:	ea55 0c02 	orrsne.w	ip, r5, r2
   e1542:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   e1546:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e154a:	f000 80e2 	beq.w	e1712 <__adddf3+0x1ee>
   e154e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   e1552:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   e1556:	bfb8      	it	lt
   e1558:	426d      	neglt	r5, r5
   e155a:	dd0c      	ble.n	e1576 <__adddf3+0x52>
   e155c:	442c      	add	r4, r5
   e155e:	ea80 0202 	eor.w	r2, r0, r2
   e1562:	ea81 0303 	eor.w	r3, r1, r3
   e1566:	ea82 0000 	eor.w	r0, r2, r0
   e156a:	ea83 0101 	eor.w	r1, r3, r1
   e156e:	ea80 0202 	eor.w	r2, r0, r2
   e1572:	ea81 0303 	eor.w	r3, r1, r3
   e1576:	2d36      	cmp	r5, #54	; 0x36
   e1578:	bf88      	it	hi
   e157a:	bd30      	pophi	{r4, r5, pc}
   e157c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e1580:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1584:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   e1588:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   e158c:	d002      	beq.n	e1594 <__adddf3+0x70>
   e158e:	4240      	negs	r0, r0
   e1590:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e1594:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   e1598:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e159c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   e15a0:	d002      	beq.n	e15a8 <__adddf3+0x84>
   e15a2:	4252      	negs	r2, r2
   e15a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   e15a8:	ea94 0f05 	teq	r4, r5
   e15ac:	f000 80a7 	beq.w	e16fe <__adddf3+0x1da>
   e15b0:	f1a4 0401 	sub.w	r4, r4, #1
   e15b4:	f1d5 0e20 	rsbs	lr, r5, #32
   e15b8:	db0d      	blt.n	e15d6 <__adddf3+0xb2>
   e15ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   e15be:	fa22 f205 	lsr.w	r2, r2, r5
   e15c2:	1880      	adds	r0, r0, r2
   e15c4:	f141 0100 	adc.w	r1, r1, #0
   e15c8:	fa03 f20e 	lsl.w	r2, r3, lr
   e15cc:	1880      	adds	r0, r0, r2
   e15ce:	fa43 f305 	asr.w	r3, r3, r5
   e15d2:	4159      	adcs	r1, r3
   e15d4:	e00e      	b.n	e15f4 <__adddf3+0xd0>
   e15d6:	f1a5 0520 	sub.w	r5, r5, #32
   e15da:	f10e 0e20 	add.w	lr, lr, #32
   e15de:	2a01      	cmp	r2, #1
   e15e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   e15e4:	bf28      	it	cs
   e15e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   e15ea:	fa43 f305 	asr.w	r3, r3, r5
   e15ee:	18c0      	adds	r0, r0, r3
   e15f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   e15f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e15f8:	d507      	bpl.n	e160a <__adddf3+0xe6>
   e15fa:	f04f 0e00 	mov.w	lr, #0
   e15fe:	f1dc 0c00 	rsbs	ip, ip, #0
   e1602:	eb7e 0000 	sbcs.w	r0, lr, r0
   e1606:	eb6e 0101 	sbc.w	r1, lr, r1
   e160a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   e160e:	d31b      	bcc.n	e1648 <__adddf3+0x124>
   e1610:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   e1614:	d30c      	bcc.n	e1630 <__adddf3+0x10c>
   e1616:	0849      	lsrs	r1, r1, #1
   e1618:	ea5f 0030 	movs.w	r0, r0, rrx
   e161c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   e1620:	f104 0401 	add.w	r4, r4, #1
   e1624:	ea4f 5244 	mov.w	r2, r4, lsl #21
   e1628:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   e162c:	f080 809a 	bcs.w	e1764 <__adddf3+0x240>
   e1630:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   e1634:	bf08      	it	eq
   e1636:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e163a:	f150 0000 	adcs.w	r0, r0, #0
   e163e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1642:	ea41 0105 	orr.w	r1, r1, r5
   e1646:	bd30      	pop	{r4, r5, pc}
   e1648:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   e164c:	4140      	adcs	r0, r0
   e164e:	eb41 0101 	adc.w	r1, r1, r1
   e1652:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1656:	f1a4 0401 	sub.w	r4, r4, #1
   e165a:	d1e9      	bne.n	e1630 <__adddf3+0x10c>
   e165c:	f091 0f00 	teq	r1, #0
   e1660:	bf04      	itt	eq
   e1662:	4601      	moveq	r1, r0
   e1664:	2000      	moveq	r0, #0
   e1666:	fab1 f381 	clz	r3, r1
   e166a:	bf08      	it	eq
   e166c:	3320      	addeq	r3, #32
   e166e:	f1a3 030b 	sub.w	r3, r3, #11
   e1672:	f1b3 0220 	subs.w	r2, r3, #32
   e1676:	da0c      	bge.n	e1692 <__adddf3+0x16e>
   e1678:	320c      	adds	r2, #12
   e167a:	dd08      	ble.n	e168e <__adddf3+0x16a>
   e167c:	f102 0c14 	add.w	ip, r2, #20
   e1680:	f1c2 020c 	rsb	r2, r2, #12
   e1684:	fa01 f00c 	lsl.w	r0, r1, ip
   e1688:	fa21 f102 	lsr.w	r1, r1, r2
   e168c:	e00c      	b.n	e16a8 <__adddf3+0x184>
   e168e:	f102 0214 	add.w	r2, r2, #20
   e1692:	bfd8      	it	le
   e1694:	f1c2 0c20 	rsble	ip, r2, #32
   e1698:	fa01 f102 	lsl.w	r1, r1, r2
   e169c:	fa20 fc0c 	lsr.w	ip, r0, ip
   e16a0:	bfdc      	itt	le
   e16a2:	ea41 010c 	orrle.w	r1, r1, ip
   e16a6:	4090      	lslle	r0, r2
   e16a8:	1ae4      	subs	r4, r4, r3
   e16aa:	bfa2      	ittt	ge
   e16ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   e16b0:	4329      	orrge	r1, r5
   e16b2:	bd30      	popge	{r4, r5, pc}
   e16b4:	ea6f 0404 	mvn.w	r4, r4
   e16b8:	3c1f      	subs	r4, #31
   e16ba:	da1c      	bge.n	e16f6 <__adddf3+0x1d2>
   e16bc:	340c      	adds	r4, #12
   e16be:	dc0e      	bgt.n	e16de <__adddf3+0x1ba>
   e16c0:	f104 0414 	add.w	r4, r4, #20
   e16c4:	f1c4 0220 	rsb	r2, r4, #32
   e16c8:	fa20 f004 	lsr.w	r0, r0, r4
   e16cc:	fa01 f302 	lsl.w	r3, r1, r2
   e16d0:	ea40 0003 	orr.w	r0, r0, r3
   e16d4:	fa21 f304 	lsr.w	r3, r1, r4
   e16d8:	ea45 0103 	orr.w	r1, r5, r3
   e16dc:	bd30      	pop	{r4, r5, pc}
   e16de:	f1c4 040c 	rsb	r4, r4, #12
   e16e2:	f1c4 0220 	rsb	r2, r4, #32
   e16e6:	fa20 f002 	lsr.w	r0, r0, r2
   e16ea:	fa01 f304 	lsl.w	r3, r1, r4
   e16ee:	ea40 0003 	orr.w	r0, r0, r3
   e16f2:	4629      	mov	r1, r5
   e16f4:	bd30      	pop	{r4, r5, pc}
   e16f6:	fa21 f004 	lsr.w	r0, r1, r4
   e16fa:	4629      	mov	r1, r5
   e16fc:	bd30      	pop	{r4, r5, pc}
   e16fe:	f094 0f00 	teq	r4, #0
   e1702:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   e1706:	bf06      	itte	eq
   e1708:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   e170c:	3401      	addeq	r4, #1
   e170e:	3d01      	subne	r5, #1
   e1710:	e74e      	b.n	e15b0 <__adddf3+0x8c>
   e1712:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1716:	bf18      	it	ne
   e1718:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   e171c:	d029      	beq.n	e1772 <__adddf3+0x24e>
   e171e:	ea94 0f05 	teq	r4, r5
   e1722:	bf08      	it	eq
   e1724:	ea90 0f02 	teqeq	r0, r2
   e1728:	d005      	beq.n	e1736 <__adddf3+0x212>
   e172a:	ea54 0c00 	orrs.w	ip, r4, r0
   e172e:	bf04      	itt	eq
   e1730:	4619      	moveq	r1, r3
   e1732:	4610      	moveq	r0, r2
   e1734:	bd30      	pop	{r4, r5, pc}
   e1736:	ea91 0f03 	teq	r1, r3
   e173a:	bf1e      	ittt	ne
   e173c:	2100      	movne	r1, #0
   e173e:	2000      	movne	r0, #0
   e1740:	bd30      	popne	{r4, r5, pc}
   e1742:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   e1746:	d105      	bne.n	e1754 <__adddf3+0x230>
   e1748:	0040      	lsls	r0, r0, #1
   e174a:	4149      	adcs	r1, r1
   e174c:	bf28      	it	cs
   e174e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   e1752:	bd30      	pop	{r4, r5, pc}
   e1754:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   e1758:	bf3c      	itt	cc
   e175a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   e175e:	bd30      	popcc	{r4, r5, pc}
   e1760:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1764:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   e1768:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e176c:	f04f 0000 	mov.w	r0, #0
   e1770:	bd30      	pop	{r4, r5, pc}
   e1772:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   e1776:	bf1a      	itte	ne
   e1778:	4619      	movne	r1, r3
   e177a:	4610      	movne	r0, r2
   e177c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   e1780:	bf1c      	itt	ne
   e1782:	460b      	movne	r3, r1
   e1784:	4602      	movne	r2, r0
   e1786:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e178a:	bf06      	itte	eq
   e178c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   e1790:	ea91 0f03 	teqeq	r1, r3
   e1794:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   e1798:	bd30      	pop	{r4, r5, pc}
   e179a:	bf00      	nop

000e179c <__aeabi_ui2d>:
   e179c:	f090 0f00 	teq	r0, #0
   e17a0:	bf04      	itt	eq
   e17a2:	2100      	moveq	r1, #0
   e17a4:	4770      	bxeq	lr
   e17a6:	b530      	push	{r4, r5, lr}
   e17a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e17ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e17b0:	f04f 0500 	mov.w	r5, #0
   e17b4:	f04f 0100 	mov.w	r1, #0
   e17b8:	e750      	b.n	e165c <__adddf3+0x138>
   e17ba:	bf00      	nop

000e17bc <__aeabi_i2d>:
   e17bc:	f090 0f00 	teq	r0, #0
   e17c0:	bf04      	itt	eq
   e17c2:	2100      	moveq	r1, #0
   e17c4:	4770      	bxeq	lr
   e17c6:	b530      	push	{r4, r5, lr}
   e17c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e17cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e17d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   e17d4:	bf48      	it	mi
   e17d6:	4240      	negmi	r0, r0
   e17d8:	f04f 0100 	mov.w	r1, #0
   e17dc:	e73e      	b.n	e165c <__adddf3+0x138>
   e17de:	bf00      	nop

000e17e0 <__aeabi_f2d>:
   e17e0:	0042      	lsls	r2, r0, #1
   e17e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   e17e6:	ea4f 0131 	mov.w	r1, r1, rrx
   e17ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   e17ee:	bf1f      	itttt	ne
   e17f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   e17f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e17f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   e17fc:	4770      	bxne	lr
   e17fe:	f092 0f00 	teq	r2, #0
   e1802:	bf14      	ite	ne
   e1804:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   e1808:	4770      	bxeq	lr
   e180a:	b530      	push	{r4, r5, lr}
   e180c:	f44f 7460 	mov.w	r4, #896	; 0x380
   e1810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   e1814:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e1818:	e720      	b.n	e165c <__adddf3+0x138>
   e181a:	bf00      	nop

000e181c <__aeabi_ul2d>:
   e181c:	ea50 0201 	orrs.w	r2, r0, r1
   e1820:	bf08      	it	eq
   e1822:	4770      	bxeq	lr
   e1824:	b530      	push	{r4, r5, lr}
   e1826:	f04f 0500 	mov.w	r5, #0
   e182a:	e00a      	b.n	e1842 <__aeabi_l2d+0x16>

000e182c <__aeabi_l2d>:
   e182c:	ea50 0201 	orrs.w	r2, r0, r1
   e1830:	bf08      	it	eq
   e1832:	4770      	bxeq	lr
   e1834:	b530      	push	{r4, r5, lr}
   e1836:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   e183a:	d502      	bpl.n	e1842 <__aeabi_l2d+0x16>
   e183c:	4240      	negs	r0, r0
   e183e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   e1842:	f44f 6480 	mov.w	r4, #1024	; 0x400
   e1846:	f104 0432 	add.w	r4, r4, #50	; 0x32
   e184a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   e184e:	f43f aedc 	beq.w	e160a <__adddf3+0xe6>
   e1852:	f04f 0203 	mov.w	r2, #3
   e1856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e185a:	bf18      	it	ne
   e185c:	3203      	addne	r2, #3
   e185e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   e1862:	bf18      	it	ne
   e1864:	3203      	addne	r2, #3
   e1866:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   e186a:	f1c2 0320 	rsb	r3, r2, #32
   e186e:	fa00 fc03 	lsl.w	ip, r0, r3
   e1872:	fa20 f002 	lsr.w	r0, r0, r2
   e1876:	fa01 fe03 	lsl.w	lr, r1, r3
   e187a:	ea40 000e 	orr.w	r0, r0, lr
   e187e:	fa21 f102 	lsr.w	r1, r1, r2
   e1882:	4414      	add	r4, r2
   e1884:	e6c1      	b.n	e160a <__adddf3+0xe6>
   e1886:	bf00      	nop

000e1888 <__aeabi_dmul>:
   e1888:	b570      	push	{r4, r5, r6, lr}
   e188a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e188e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1896:	bf1d      	ittte	ne
   e1898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e189c:	ea94 0f0c 	teqne	r4, ip
   e18a0:	ea95 0f0c 	teqne	r5, ip
   e18a4:	f000 f8de 	bleq	e1a64 <__aeabi_dmul+0x1dc>
   e18a8:	442c      	add	r4, r5
   e18aa:	ea81 0603 	eor.w	r6, r1, r3
   e18ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   e18b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   e18b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   e18ba:	bf18      	it	ne
   e18bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   e18c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e18c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e18c8:	d038      	beq.n	e193c <__aeabi_dmul+0xb4>
   e18ca:	fba0 ce02 	umull	ip, lr, r0, r2
   e18ce:	f04f 0500 	mov.w	r5, #0
   e18d2:	fbe1 e502 	umlal	lr, r5, r1, r2
   e18d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   e18da:	fbe0 e503 	umlal	lr, r5, r0, r3
   e18de:	f04f 0600 	mov.w	r6, #0
   e18e2:	fbe1 5603 	umlal	r5, r6, r1, r3
   e18e6:	f09c 0f00 	teq	ip, #0
   e18ea:	bf18      	it	ne
   e18ec:	f04e 0e01 	orrne.w	lr, lr, #1
   e18f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   e18f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   e18f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   e18fc:	d204      	bcs.n	e1908 <__aeabi_dmul+0x80>
   e18fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   e1902:	416d      	adcs	r5, r5
   e1904:	eb46 0606 	adc.w	r6, r6, r6
   e1908:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   e190c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   e1910:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   e1914:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   e1918:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   e191c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1920:	bf88      	it	hi
   e1922:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1926:	d81e      	bhi.n	e1966 <__aeabi_dmul+0xde>
   e1928:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   e192c:	bf08      	it	eq
   e192e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   e1932:	f150 0000 	adcs.w	r0, r0, #0
   e1936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e193a:	bd70      	pop	{r4, r5, r6, pc}
   e193c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   e1940:	ea46 0101 	orr.w	r1, r6, r1
   e1944:	ea40 0002 	orr.w	r0, r0, r2
   e1948:	ea81 0103 	eor.w	r1, r1, r3
   e194c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   e1950:	bfc2      	ittt	gt
   e1952:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e195a:	bd70      	popgt	{r4, r5, r6, pc}
   e195c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1960:	f04f 0e00 	mov.w	lr, #0
   e1964:	3c01      	subs	r4, #1
   e1966:	f300 80ab 	bgt.w	e1ac0 <__aeabi_dmul+0x238>
   e196a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   e196e:	bfde      	ittt	le
   e1970:	2000      	movle	r0, #0
   e1972:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   e1976:	bd70      	pople	{r4, r5, r6, pc}
   e1978:	f1c4 0400 	rsb	r4, r4, #0
   e197c:	3c20      	subs	r4, #32
   e197e:	da35      	bge.n	e19ec <__aeabi_dmul+0x164>
   e1980:	340c      	adds	r4, #12
   e1982:	dc1b      	bgt.n	e19bc <__aeabi_dmul+0x134>
   e1984:	f104 0414 	add.w	r4, r4, #20
   e1988:	f1c4 0520 	rsb	r5, r4, #32
   e198c:	fa00 f305 	lsl.w	r3, r0, r5
   e1990:	fa20 f004 	lsr.w	r0, r0, r4
   e1994:	fa01 f205 	lsl.w	r2, r1, r5
   e1998:	ea40 0002 	orr.w	r0, r0, r2
   e199c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   e19a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   e19a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e19a8:	fa21 f604 	lsr.w	r6, r1, r4
   e19ac:	eb42 0106 	adc.w	r1, r2, r6
   e19b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e19b4:	bf08      	it	eq
   e19b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e19ba:	bd70      	pop	{r4, r5, r6, pc}
   e19bc:	f1c4 040c 	rsb	r4, r4, #12
   e19c0:	f1c4 0520 	rsb	r5, r4, #32
   e19c4:	fa00 f304 	lsl.w	r3, r0, r4
   e19c8:	fa20 f005 	lsr.w	r0, r0, r5
   e19cc:	fa01 f204 	lsl.w	r2, r1, r4
   e19d0:	ea40 0002 	orr.w	r0, r0, r2
   e19d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e19d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   e19dc:	f141 0100 	adc.w	r1, r1, #0
   e19e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e19e4:	bf08      	it	eq
   e19e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e19ea:	bd70      	pop	{r4, r5, r6, pc}
   e19ec:	f1c4 0520 	rsb	r5, r4, #32
   e19f0:	fa00 f205 	lsl.w	r2, r0, r5
   e19f4:	ea4e 0e02 	orr.w	lr, lr, r2
   e19f8:	fa20 f304 	lsr.w	r3, r0, r4
   e19fc:	fa01 f205 	lsl.w	r2, r1, r5
   e1a00:	ea43 0302 	orr.w	r3, r3, r2
   e1a04:	fa21 f004 	lsr.w	r0, r1, r4
   e1a08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1a0c:	fa21 f204 	lsr.w	r2, r1, r4
   e1a10:	ea20 0002 	bic.w	r0, r0, r2
   e1a14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   e1a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   e1a1c:	bf08      	it	eq
   e1a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   e1a22:	bd70      	pop	{r4, r5, r6, pc}
   e1a24:	f094 0f00 	teq	r4, #0
   e1a28:	d10f      	bne.n	e1a4a <__aeabi_dmul+0x1c2>
   e1a2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   e1a2e:	0040      	lsls	r0, r0, #1
   e1a30:	eb41 0101 	adc.w	r1, r1, r1
   e1a34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1a38:	bf08      	it	eq
   e1a3a:	3c01      	subeq	r4, #1
   e1a3c:	d0f7      	beq.n	e1a2e <__aeabi_dmul+0x1a6>
   e1a3e:	ea41 0106 	orr.w	r1, r1, r6
   e1a42:	f095 0f00 	teq	r5, #0
   e1a46:	bf18      	it	ne
   e1a48:	4770      	bxne	lr
   e1a4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   e1a4e:	0052      	lsls	r2, r2, #1
   e1a50:	eb43 0303 	adc.w	r3, r3, r3
   e1a54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   e1a58:	bf08      	it	eq
   e1a5a:	3d01      	subeq	r5, #1
   e1a5c:	d0f7      	beq.n	e1a4e <__aeabi_dmul+0x1c6>
   e1a5e:	ea43 0306 	orr.w	r3, r3, r6
   e1a62:	4770      	bx	lr
   e1a64:	ea94 0f0c 	teq	r4, ip
   e1a68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1a6c:	bf18      	it	ne
   e1a6e:	ea95 0f0c 	teqne	r5, ip
   e1a72:	d00c      	beq.n	e1a8e <__aeabi_dmul+0x206>
   e1a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1a78:	bf18      	it	ne
   e1a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1a7e:	d1d1      	bne.n	e1a24 <__aeabi_dmul+0x19c>
   e1a80:	ea81 0103 	eor.w	r1, r1, r3
   e1a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1a88:	f04f 0000 	mov.w	r0, #0
   e1a8c:	bd70      	pop	{r4, r5, r6, pc}
   e1a8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1a92:	bf06      	itte	eq
   e1a94:	4610      	moveq	r0, r2
   e1a96:	4619      	moveq	r1, r3
   e1a98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1a9c:	d019      	beq.n	e1ad2 <__aeabi_dmul+0x24a>
   e1a9e:	ea94 0f0c 	teq	r4, ip
   e1aa2:	d102      	bne.n	e1aaa <__aeabi_dmul+0x222>
   e1aa4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   e1aa8:	d113      	bne.n	e1ad2 <__aeabi_dmul+0x24a>
   e1aaa:	ea95 0f0c 	teq	r5, ip
   e1aae:	d105      	bne.n	e1abc <__aeabi_dmul+0x234>
   e1ab0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   e1ab4:	bf1c      	itt	ne
   e1ab6:	4610      	movne	r0, r2
   e1ab8:	4619      	movne	r1, r3
   e1aba:	d10a      	bne.n	e1ad2 <__aeabi_dmul+0x24a>
   e1abc:	ea81 0103 	eor.w	r1, r1, r3
   e1ac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   e1ac4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1ac8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   e1acc:	f04f 0000 	mov.w	r0, #0
   e1ad0:	bd70      	pop	{r4, r5, r6, pc}
   e1ad2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   e1ad6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   e1ada:	bd70      	pop	{r4, r5, r6, pc}

000e1adc <__aeabi_ddiv>:
   e1adc:	b570      	push	{r4, r5, r6, lr}
   e1ade:	f04f 0cff 	mov.w	ip, #255	; 0xff
   e1ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   e1ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   e1aea:	bf1d      	ittte	ne
   e1aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   e1af0:	ea94 0f0c 	teqne	r4, ip
   e1af4:	ea95 0f0c 	teqne	r5, ip
   e1af8:	f000 f8a7 	bleq	e1c4a <__aeabi_ddiv+0x16e>
   e1afc:	eba4 0405 	sub.w	r4, r4, r5
   e1b00:	ea81 0e03 	eor.w	lr, r1, r3
   e1b04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
   e1b0c:	f000 8088 	beq.w	e1c20 <__aeabi_ddiv+0x144>
   e1b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
   e1b14:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   e1b18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   e1b1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   e1b20:	ea4f 2202 	mov.w	r2, r2, lsl #8
   e1b24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   e1b28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   e1b2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   e1b30:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   e1b34:	429d      	cmp	r5, r3
   e1b36:	bf08      	it	eq
   e1b38:	4296      	cmpeq	r6, r2
   e1b3a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   e1b3e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   e1b42:	d202      	bcs.n	e1b4a <__aeabi_ddiv+0x6e>
   e1b44:	085b      	lsrs	r3, r3, #1
   e1b46:	ea4f 0232 	mov.w	r2, r2, rrx
   e1b4a:	1ab6      	subs	r6, r6, r2
   e1b4c:	eb65 0503 	sbc.w	r5, r5, r3
   e1b50:	085b      	lsrs	r3, r3, #1
   e1b52:	ea4f 0232 	mov.w	r2, r2, rrx
   e1b56:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   e1b5a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   e1b5e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1b62:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1b66:	bf22      	ittt	cs
   e1b68:	1ab6      	subcs	r6, r6, r2
   e1b6a:	4675      	movcs	r5, lr
   e1b6c:	ea40 000c 	orrcs.w	r0, r0, ip
   e1b70:	085b      	lsrs	r3, r3, #1
   e1b72:	ea4f 0232 	mov.w	r2, r2, rrx
   e1b76:	ebb6 0e02 	subs.w	lr, r6, r2
   e1b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1b7e:	bf22      	ittt	cs
   e1b80:	1ab6      	subcs	r6, r6, r2
   e1b82:	4675      	movcs	r5, lr
   e1b84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   e1b88:	085b      	lsrs	r3, r3, #1
   e1b8a:	ea4f 0232 	mov.w	r2, r2, rrx
   e1b8e:	ebb6 0e02 	subs.w	lr, r6, r2
   e1b92:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1b96:	bf22      	ittt	cs
   e1b98:	1ab6      	subcs	r6, r6, r2
   e1b9a:	4675      	movcs	r5, lr
   e1b9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   e1ba0:	085b      	lsrs	r3, r3, #1
   e1ba2:	ea4f 0232 	mov.w	r2, r2, rrx
   e1ba6:	ebb6 0e02 	subs.w	lr, r6, r2
   e1baa:	eb75 0e03 	sbcs.w	lr, r5, r3
   e1bae:	bf22      	ittt	cs
   e1bb0:	1ab6      	subcs	r6, r6, r2
   e1bb2:	4675      	movcs	r5, lr
   e1bb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   e1bb8:	ea55 0e06 	orrs.w	lr, r5, r6
   e1bbc:	d018      	beq.n	e1bf0 <__aeabi_ddiv+0x114>
   e1bbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
   e1bc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   e1bc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   e1bca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   e1bce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   e1bd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   e1bd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   e1bda:	d1c0      	bne.n	e1b5e <__aeabi_ddiv+0x82>
   e1bdc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1be0:	d10b      	bne.n	e1bfa <__aeabi_ddiv+0x11e>
   e1be2:	ea41 0100 	orr.w	r1, r1, r0
   e1be6:	f04f 0000 	mov.w	r0, #0
   e1bea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   e1bee:	e7b6      	b.n	e1b5e <__aeabi_ddiv+0x82>
   e1bf0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   e1bf4:	bf04      	itt	eq
   e1bf6:	4301      	orreq	r1, r0
   e1bf8:	2000      	moveq	r0, #0
   e1bfa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   e1bfe:	bf88      	it	hi
   e1c00:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   e1c04:	f63f aeaf 	bhi.w	e1966 <__aeabi_dmul+0xde>
   e1c08:	ebb5 0c03 	subs.w	ip, r5, r3
   e1c0c:	bf04      	itt	eq
   e1c0e:	ebb6 0c02 	subseq.w	ip, r6, r2
   e1c12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   e1c16:	f150 0000 	adcs.w	r0, r0, #0
   e1c1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   e1c1e:	bd70      	pop	{r4, r5, r6, pc}
   e1c20:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   e1c24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   e1c28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   e1c2c:	bfc2      	ittt	gt
   e1c2e:	ebd4 050c 	rsbsgt	r5, r4, ip
   e1c32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   e1c36:	bd70      	popgt	{r4, r5, r6, pc}
   e1c38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1c3c:	f04f 0e00 	mov.w	lr, #0
   e1c40:	3c01      	subs	r4, #1
   e1c42:	e690      	b.n	e1966 <__aeabi_dmul+0xde>
   e1c44:	ea45 0e06 	orr.w	lr, r5, r6
   e1c48:	e68d      	b.n	e1966 <__aeabi_dmul+0xde>
   e1c4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   e1c4e:	ea94 0f0c 	teq	r4, ip
   e1c52:	bf08      	it	eq
   e1c54:	ea95 0f0c 	teqeq	r5, ip
   e1c58:	f43f af3b 	beq.w	e1ad2 <__aeabi_dmul+0x24a>
   e1c5c:	ea94 0f0c 	teq	r4, ip
   e1c60:	d10a      	bne.n	e1c78 <__aeabi_ddiv+0x19c>
   e1c62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   e1c66:	f47f af34 	bne.w	e1ad2 <__aeabi_dmul+0x24a>
   e1c6a:	ea95 0f0c 	teq	r5, ip
   e1c6e:	f47f af25 	bne.w	e1abc <__aeabi_dmul+0x234>
   e1c72:	4610      	mov	r0, r2
   e1c74:	4619      	mov	r1, r3
   e1c76:	e72c      	b.n	e1ad2 <__aeabi_dmul+0x24a>
   e1c78:	ea95 0f0c 	teq	r5, ip
   e1c7c:	d106      	bne.n	e1c8c <__aeabi_ddiv+0x1b0>
   e1c7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   e1c82:	f43f aefd 	beq.w	e1a80 <__aeabi_dmul+0x1f8>
   e1c86:	4610      	mov	r0, r2
   e1c88:	4619      	mov	r1, r3
   e1c8a:	e722      	b.n	e1ad2 <__aeabi_dmul+0x24a>
   e1c8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   e1c90:	bf18      	it	ne
   e1c92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   e1c96:	f47f aec5 	bne.w	e1a24 <__aeabi_dmul+0x19c>
   e1c9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   e1c9e:	f47f af0d 	bne.w	e1abc <__aeabi_dmul+0x234>
   e1ca2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   e1ca6:	f47f aeeb 	bne.w	e1a80 <__aeabi_dmul+0x1f8>
   e1caa:	e712      	b.n	e1ad2 <__aeabi_dmul+0x24a>

000e1cac <__gedf2>:
   e1cac:	f04f 3cff 	mov.w	ip, #4294967295
   e1cb0:	e006      	b.n	e1cc0 <__cmpdf2+0x4>
   e1cb2:	bf00      	nop

000e1cb4 <__ledf2>:
   e1cb4:	f04f 0c01 	mov.w	ip, #1
   e1cb8:	e002      	b.n	e1cc0 <__cmpdf2+0x4>
   e1cba:	bf00      	nop

000e1cbc <__cmpdf2>:
   e1cbc:	f04f 0c01 	mov.w	ip, #1
   e1cc0:	f84d cd04 	str.w	ip, [sp, #-4]!
   e1cc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1cc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1cd0:	bf18      	it	ne
   e1cd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   e1cd6:	d01b      	beq.n	e1d10 <__cmpdf2+0x54>
   e1cd8:	b001      	add	sp, #4
   e1cda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   e1cde:	bf0c      	ite	eq
   e1ce0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   e1ce4:	ea91 0f03 	teqne	r1, r3
   e1ce8:	bf02      	ittt	eq
   e1cea:	ea90 0f02 	teqeq	r0, r2
   e1cee:	2000      	moveq	r0, #0
   e1cf0:	4770      	bxeq	lr
   e1cf2:	f110 0f00 	cmn.w	r0, #0
   e1cf6:	ea91 0f03 	teq	r1, r3
   e1cfa:	bf58      	it	pl
   e1cfc:	4299      	cmppl	r1, r3
   e1cfe:	bf08      	it	eq
   e1d00:	4290      	cmpeq	r0, r2
   e1d02:	bf2c      	ite	cs
   e1d04:	17d8      	asrcs	r0, r3, #31
   e1d06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   e1d0a:	f040 0001 	orr.w	r0, r0, #1
   e1d0e:	4770      	bx	lr
   e1d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   e1d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1d18:	d102      	bne.n	e1d20 <__cmpdf2+0x64>
   e1d1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   e1d1e:	d107      	bne.n	e1d30 <__cmpdf2+0x74>
   e1d20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   e1d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   e1d28:	d1d6      	bne.n	e1cd8 <__cmpdf2+0x1c>
   e1d2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   e1d2e:	d0d3      	beq.n	e1cd8 <__cmpdf2+0x1c>
   e1d30:	f85d 0b04 	ldr.w	r0, [sp], #4
   e1d34:	4770      	bx	lr
   e1d36:	bf00      	nop

000e1d38 <__aeabi_cdrcmple>:
   e1d38:	4684      	mov	ip, r0
   e1d3a:	4610      	mov	r0, r2
   e1d3c:	4662      	mov	r2, ip
   e1d3e:	468c      	mov	ip, r1
   e1d40:	4619      	mov	r1, r3
   e1d42:	4663      	mov	r3, ip
   e1d44:	e000      	b.n	e1d48 <__aeabi_cdcmpeq>
   e1d46:	bf00      	nop

000e1d48 <__aeabi_cdcmpeq>:
   e1d48:	b501      	push	{r0, lr}
   e1d4a:	f7ff ffb7 	bl	e1cbc <__cmpdf2>
   e1d4e:	2800      	cmp	r0, #0
   e1d50:	bf48      	it	mi
   e1d52:	f110 0f00 	cmnmi.w	r0, #0
   e1d56:	bd01      	pop	{r0, pc}

000e1d58 <__aeabi_dcmpeq>:
   e1d58:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1d5c:	f7ff fff4 	bl	e1d48 <__aeabi_cdcmpeq>
   e1d60:	bf0c      	ite	eq
   e1d62:	2001      	moveq	r0, #1
   e1d64:	2000      	movne	r0, #0
   e1d66:	f85d fb08 	ldr.w	pc, [sp], #8
   e1d6a:	bf00      	nop

000e1d6c <__aeabi_dcmplt>:
   e1d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1d70:	f7ff ffea 	bl	e1d48 <__aeabi_cdcmpeq>
   e1d74:	bf34      	ite	cc
   e1d76:	2001      	movcc	r0, #1
   e1d78:	2000      	movcs	r0, #0
   e1d7a:	f85d fb08 	ldr.w	pc, [sp], #8
   e1d7e:	bf00      	nop

000e1d80 <__aeabi_dcmple>:
   e1d80:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1d84:	f7ff ffe0 	bl	e1d48 <__aeabi_cdcmpeq>
   e1d88:	bf94      	ite	ls
   e1d8a:	2001      	movls	r0, #1
   e1d8c:	2000      	movhi	r0, #0
   e1d8e:	f85d fb08 	ldr.w	pc, [sp], #8
   e1d92:	bf00      	nop

000e1d94 <__aeabi_dcmpge>:
   e1d94:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1d98:	f7ff ffce 	bl	e1d38 <__aeabi_cdrcmple>
   e1d9c:	bf94      	ite	ls
   e1d9e:	2001      	movls	r0, #1
   e1da0:	2000      	movhi	r0, #0
   e1da2:	f85d fb08 	ldr.w	pc, [sp], #8
   e1da6:	bf00      	nop

000e1da8 <__aeabi_dcmpgt>:
   e1da8:	f84d ed08 	str.w	lr, [sp, #-8]!
   e1dac:	f7ff ffc4 	bl	e1d38 <__aeabi_cdrcmple>
   e1db0:	bf34      	ite	cc
   e1db2:	2001      	movcc	r0, #1
   e1db4:	2000      	movcs	r0, #0
   e1db6:	f85d fb08 	ldr.w	pc, [sp], #8
   e1dba:	bf00      	nop

000e1dbc <__aeabi_d2iz>:
   e1dbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1dc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1dc4:	d215      	bcs.n	e1df2 <__aeabi_d2iz+0x36>
   e1dc6:	d511      	bpl.n	e1dec <__aeabi_d2iz+0x30>
   e1dc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1dcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1dd0:	d912      	bls.n	e1df8 <__aeabi_d2iz+0x3c>
   e1dd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e1dda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e1dde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   e1de2:	fa23 f002 	lsr.w	r0, r3, r2
   e1de6:	bf18      	it	ne
   e1de8:	4240      	negne	r0, r0
   e1dea:	4770      	bx	lr
   e1dec:	f04f 0000 	mov.w	r0, #0
   e1df0:	4770      	bx	lr
   e1df2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1df6:	d105      	bne.n	e1e04 <__aeabi_d2iz+0x48>
   e1df8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   e1dfc:	bf08      	it	eq
   e1dfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   e1e02:	4770      	bx	lr
   e1e04:	f04f 0000 	mov.w	r0, #0
   e1e08:	4770      	bx	lr
   e1e0a:	bf00      	nop

000e1e0c <__aeabi_d2uiz>:
   e1e0c:	004a      	lsls	r2, r1, #1
   e1e0e:	d211      	bcs.n	e1e34 <__aeabi_d2uiz+0x28>
   e1e10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   e1e14:	d211      	bcs.n	e1e3a <__aeabi_d2uiz+0x2e>
   e1e16:	d50d      	bpl.n	e1e34 <__aeabi_d2uiz+0x28>
   e1e18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   e1e1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   e1e20:	d40e      	bmi.n	e1e40 <__aeabi_d2uiz+0x34>
   e1e22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1e26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   e1e2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   e1e2e:	fa23 f002 	lsr.w	r0, r3, r2
   e1e32:	4770      	bx	lr
   e1e34:	f04f 0000 	mov.w	r0, #0
   e1e38:	4770      	bx	lr
   e1e3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   e1e3e:	d102      	bne.n	e1e46 <__aeabi_d2uiz+0x3a>
   e1e40:	f04f 30ff 	mov.w	r0, #4294967295
   e1e44:	4770      	bx	lr
   e1e46:	f04f 0000 	mov.w	r0, #0
   e1e4a:	4770      	bx	lr

000e1e4c <__aeabi_d2f>:
   e1e4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   e1e50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   e1e54:	bf24      	itt	cs
   e1e56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   e1e5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   e1e5e:	d90d      	bls.n	e1e7c <__aeabi_d2f+0x30>
   e1e60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   e1e64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   e1e68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   e1e6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   e1e70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   e1e74:	bf08      	it	eq
   e1e76:	f020 0001 	biceq.w	r0, r0, #1
   e1e7a:	4770      	bx	lr
   e1e7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   e1e80:	d121      	bne.n	e1ec6 <__aeabi_d2f+0x7a>
   e1e82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   e1e86:	bfbc      	itt	lt
   e1e88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   e1e8c:	4770      	bxlt	lr
   e1e8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   e1e92:	ea4f 5252 	mov.w	r2, r2, lsr #21
   e1e96:	f1c2 0218 	rsb	r2, r2, #24
   e1e9a:	f1c2 0c20 	rsb	ip, r2, #32
   e1e9e:	fa10 f30c 	lsls.w	r3, r0, ip
   e1ea2:	fa20 f002 	lsr.w	r0, r0, r2
   e1ea6:	bf18      	it	ne
   e1ea8:	f040 0001 	orrne.w	r0, r0, #1
   e1eac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   e1eb0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   e1eb4:	fa03 fc0c 	lsl.w	ip, r3, ip
   e1eb8:	ea40 000c 	orr.w	r0, r0, ip
   e1ebc:	fa23 f302 	lsr.w	r3, r3, r2
   e1ec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
   e1ec4:	e7cc      	b.n	e1e60 <__aeabi_d2f+0x14>
   e1ec6:	ea7f 5362 	mvns.w	r3, r2, asr #21
   e1eca:	d107      	bne.n	e1edc <__aeabi_d2f+0x90>
   e1ecc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   e1ed0:	bf1e      	ittt	ne
   e1ed2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   e1ed6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   e1eda:	4770      	bxne	lr
   e1edc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   e1ee0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   e1ee4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   e1ee8:	4770      	bx	lr
   e1eea:	bf00      	nop

000e1eec <atof>:
   e1eec:	2100      	movs	r1, #0
   e1eee:	f000 bfc7 	b.w	e2e80 <strtod>
	...

000e1ef4 <__cxa_atexit>:
   e1ef4:	b510      	push	{r4, lr}
   e1ef6:	4c05      	ldr	r4, [pc, #20]	; (e1f0c <__cxa_atexit+0x18>)
   e1ef8:	4613      	mov	r3, r2
   e1efa:	b12c      	cbz	r4, e1f08 <__cxa_atexit+0x14>
   e1efc:	460a      	mov	r2, r1
   e1efe:	4601      	mov	r1, r0
   e1f00:	2002      	movs	r0, #2
   e1f02:	f3af 8000 	nop.w
   e1f06:	bd10      	pop	{r4, pc}
   e1f08:	4620      	mov	r0, r4
   e1f0a:	bd10      	pop	{r4, pc}
   e1f0c:	00000000 	.word	0x00000000

000e1f10 <localtime>:
   e1f10:	b538      	push	{r3, r4, r5, lr}
   e1f12:	4b07      	ldr	r3, [pc, #28]	; (e1f30 <localtime+0x20>)
   e1f14:	681c      	ldr	r4, [r3, #0]
   e1f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e1f18:	4605      	mov	r5, r0
   e1f1a:	b91b      	cbnz	r3, e1f24 <localtime+0x14>
   e1f1c:	2024      	movs	r0, #36	; 0x24
   e1f1e:	f7fd f8fb 	bl	df118 <malloc>
   e1f22:	63e0      	str	r0, [r4, #60]	; 0x3c
   e1f24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   e1f26:	4628      	mov	r0, r5
   e1f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   e1f2c:	f000 b802 	b.w	e1f34 <localtime_r>
   e1f30:	2003e254 	.word	0x2003e254

000e1f34 <localtime_r>:
   e1f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e1f38:	460c      	mov	r4, r1
   e1f3a:	4680      	mov	r8, r0
   e1f3c:	f001 fdc2 	bl	e3ac4 <__gettzinfo>
   e1f40:	4621      	mov	r1, r4
   e1f42:	4607      	mov	r7, r0
   e1f44:	4640      	mov	r0, r8
   e1f46:	f001 fdc1 	bl	e3acc <gmtime_r>
   e1f4a:	6946      	ldr	r6, [r0, #20]
   e1f4c:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   e1f50:	07b3      	lsls	r3, r6, #30
   e1f52:	4604      	mov	r4, r0
   e1f54:	d105      	bne.n	e1f62 <localtime_r+0x2e>
   e1f56:	2264      	movs	r2, #100	; 0x64
   e1f58:	fb96 f3f2 	sdiv	r3, r6, r2
   e1f5c:	fb02 6313 	mls	r3, r2, r3, r6
   e1f60:	b94b      	cbnz	r3, e1f76 <localtime_r+0x42>
   e1f62:	f44f 75c8 	mov.w	r5, #400	; 0x190
   e1f66:	fb96 f3f5 	sdiv	r3, r6, r5
   e1f6a:	fb05 6513 	mls	r5, r5, r3, r6
   e1f6e:	fab5 f385 	clz	r3, r5
   e1f72:	095b      	lsrs	r3, r3, #5
   e1f74:	e000      	b.n	e1f78 <localtime_r+0x44>
   e1f76:	2301      	movs	r3, #1
   e1f78:	4a5f      	ldr	r2, [pc, #380]	; (e20f8 <localtime_r+0x1c4>)
   e1f7a:	2530      	movs	r5, #48	; 0x30
   e1f7c:	fb05 2503 	mla	r5, r5, r3, r2
   e1f80:	f001 f8b6 	bl	e30f0 <__tz_lock>
   e1f84:	f001 f8b6 	bl	e30f4 <_tzset_unlocked>
   e1f88:	4b5c      	ldr	r3, [pc, #368]	; (e20fc <localtime_r+0x1c8>)
   e1f8a:	681b      	ldr	r3, [r3, #0]
   e1f8c:	b1f3      	cbz	r3, e1fcc <localtime_r+0x98>
   e1f8e:	687b      	ldr	r3, [r7, #4]
   e1f90:	429e      	cmp	r6, r3
   e1f92:	d105      	bne.n	e1fa0 <localtime_r+0x6c>
   e1f94:	6839      	ldr	r1, [r7, #0]
   e1f96:	f8d8 3000 	ldr.w	r3, [r8]
   e1f9a:	69fa      	ldr	r2, [r7, #28]
   e1f9c:	b941      	cbnz	r1, e1fb0 <localtime_r+0x7c>
   e1f9e:	e00a      	b.n	e1fb6 <localtime_r+0x82>
   e1fa0:	4630      	mov	r0, r6
   e1fa2:	f000 fffd 	bl	e2fa0 <__tzcalc_limits>
   e1fa6:	2800      	cmp	r0, #0
   e1fa8:	d1f4      	bne.n	e1f94 <localtime_r+0x60>
   e1faa:	f04f 33ff 	mov.w	r3, #4294967295
   e1fae:	e00d      	b.n	e1fcc <localtime_r+0x98>
   e1fb0:	4293      	cmp	r3, r2
   e1fb2:	db08      	blt.n	e1fc6 <localtime_r+0x92>
   e1fb4:	e001      	b.n	e1fba <localtime_r+0x86>
   e1fb6:	4293      	cmp	r3, r2
   e1fb8:	da07      	bge.n	e1fca <localtime_r+0x96>
   e1fba:	6bba      	ldr	r2, [r7, #56]	; 0x38
   e1fbc:	4293      	cmp	r3, r2
   e1fbe:	bfac      	ite	ge
   e1fc0:	2300      	movge	r3, #0
   e1fc2:	2301      	movlt	r3, #1
   e1fc4:	e002      	b.n	e1fcc <localtime_r+0x98>
   e1fc6:	2300      	movs	r3, #0
   e1fc8:	e000      	b.n	e1fcc <localtime_r+0x98>
   e1fca:	2301      	movs	r3, #1
   e1fcc:	6223      	str	r3, [r4, #32]
   e1fce:	6a23      	ldr	r3, [r4, #32]
   e1fd0:	2b01      	cmp	r3, #1
   e1fd2:	bf0c      	ite	eq
   e1fd4:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   e1fd6:	6a39      	ldrne	r1, [r7, #32]
   e1fd8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   e1fdc:	203c      	movs	r0, #60	; 0x3c
   e1fde:	fb91 f6f3 	sdiv	r6, r1, r3
   e1fe2:	fb03 1316 	mls	r3, r3, r6, r1
   e1fe6:	6861      	ldr	r1, [r4, #4]
   e1fe8:	fb93 f2f0 	sdiv	r2, r3, r0
   e1fec:	fb00 3012 	mls	r0, r0, r2, r3
   e1ff0:	6823      	ldr	r3, [r4, #0]
   e1ff2:	1a89      	subs	r1, r1, r2
   e1ff4:	68a2      	ldr	r2, [r4, #8]
   e1ff6:	6061      	str	r1, [r4, #4]
   e1ff8:	1a1b      	subs	r3, r3, r0
   e1ffa:	1b92      	subs	r2, r2, r6
   e1ffc:	2b3b      	cmp	r3, #59	; 0x3b
   e1ffe:	6023      	str	r3, [r4, #0]
   e2000:	60a2      	str	r2, [r4, #8]
   e2002:	dd03      	ble.n	e200c <localtime_r+0xd8>
   e2004:	3101      	adds	r1, #1
   e2006:	6061      	str	r1, [r4, #4]
   e2008:	3b3c      	subs	r3, #60	; 0x3c
   e200a:	e004      	b.n	e2016 <localtime_r+0xe2>
   e200c:	2b00      	cmp	r3, #0
   e200e:	da03      	bge.n	e2018 <localtime_r+0xe4>
   e2010:	3901      	subs	r1, #1
   e2012:	6061      	str	r1, [r4, #4]
   e2014:	333c      	adds	r3, #60	; 0x3c
   e2016:	6023      	str	r3, [r4, #0]
   e2018:	6863      	ldr	r3, [r4, #4]
   e201a:	2b3b      	cmp	r3, #59	; 0x3b
   e201c:	dd03      	ble.n	e2026 <localtime_r+0xf2>
   e201e:	3201      	adds	r2, #1
   e2020:	60a2      	str	r2, [r4, #8]
   e2022:	3b3c      	subs	r3, #60	; 0x3c
   e2024:	e004      	b.n	e2030 <localtime_r+0xfc>
   e2026:	2b00      	cmp	r3, #0
   e2028:	da03      	bge.n	e2032 <localtime_r+0xfe>
   e202a:	3a01      	subs	r2, #1
   e202c:	60a2      	str	r2, [r4, #8]
   e202e:	333c      	adds	r3, #60	; 0x3c
   e2030:	6063      	str	r3, [r4, #4]
   e2032:	68a3      	ldr	r3, [r4, #8]
   e2034:	2b17      	cmp	r3, #23
   e2036:	dd22      	ble.n	e207e <localtime_r+0x14a>
   e2038:	69e2      	ldr	r2, [r4, #28]
   e203a:	3201      	adds	r2, #1
   e203c:	61e2      	str	r2, [r4, #28]
   e203e:	69a2      	ldr	r2, [r4, #24]
   e2040:	3201      	adds	r2, #1
   e2042:	2a06      	cmp	r2, #6
   e2044:	bfc8      	it	gt
   e2046:	2200      	movgt	r2, #0
   e2048:	61a2      	str	r2, [r4, #24]
   e204a:	68e2      	ldr	r2, [r4, #12]
   e204c:	3b18      	subs	r3, #24
   e204e:	3201      	adds	r2, #1
   e2050:	60a3      	str	r3, [r4, #8]
   e2052:	6923      	ldr	r3, [r4, #16]
   e2054:	60e2      	str	r2, [r4, #12]
   e2056:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   e205a:	428a      	cmp	r2, r1
   e205c:	dd46      	ble.n	e20ec <localtime_r+0x1b8>
   e205e:	3301      	adds	r3, #1
   e2060:	2b0c      	cmp	r3, #12
   e2062:	bf0c      	ite	eq
   e2064:	6963      	ldreq	r3, [r4, #20]
   e2066:	6123      	strne	r3, [r4, #16]
   e2068:	eba2 0201 	sub.w	r2, r2, r1
   e206c:	60e2      	str	r2, [r4, #12]
   e206e:	bf01      	itttt	eq
   e2070:	3301      	addeq	r3, #1
   e2072:	2200      	moveq	r2, #0
   e2074:	6122      	streq	r2, [r4, #16]
   e2076:	6163      	streq	r3, [r4, #20]
   e2078:	bf08      	it	eq
   e207a:	61e2      	streq	r2, [r4, #28]
   e207c:	e036      	b.n	e20ec <localtime_r+0x1b8>
   e207e:	2b00      	cmp	r3, #0
   e2080:	da34      	bge.n	e20ec <localtime_r+0x1b8>
   e2082:	69e2      	ldr	r2, [r4, #28]
   e2084:	3a01      	subs	r2, #1
   e2086:	61e2      	str	r2, [r4, #28]
   e2088:	69a2      	ldr	r2, [r4, #24]
   e208a:	3a01      	subs	r2, #1
   e208c:	bf48      	it	mi
   e208e:	2206      	movmi	r2, #6
   e2090:	61a2      	str	r2, [r4, #24]
   e2092:	68e2      	ldr	r2, [r4, #12]
   e2094:	3318      	adds	r3, #24
   e2096:	3a01      	subs	r2, #1
   e2098:	60e2      	str	r2, [r4, #12]
   e209a:	60a3      	str	r3, [r4, #8]
   e209c:	bb32      	cbnz	r2, e20ec <localtime_r+0x1b8>
   e209e:	6923      	ldr	r3, [r4, #16]
   e20a0:	3b01      	subs	r3, #1
   e20a2:	d401      	bmi.n	e20a8 <localtime_r+0x174>
   e20a4:	6123      	str	r3, [r4, #16]
   e20a6:	e01d      	b.n	e20e4 <localtime_r+0x1b0>
   e20a8:	230b      	movs	r3, #11
   e20aa:	6123      	str	r3, [r4, #16]
   e20ac:	6963      	ldr	r3, [r4, #20]
   e20ae:	1e5a      	subs	r2, r3, #1
   e20b0:	f012 0f03 	tst.w	r2, #3
   e20b4:	6162      	str	r2, [r4, #20]
   e20b6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   e20ba:	d105      	bne.n	e20c8 <localtime_r+0x194>
   e20bc:	2164      	movs	r1, #100	; 0x64
   e20be:	fb93 f2f1 	sdiv	r2, r3, r1
   e20c2:	fb01 3212 	mls	r2, r1, r2, r3
   e20c6:	b94a      	cbnz	r2, e20dc <localtime_r+0x1a8>
   e20c8:	f44f 71c8 	mov.w	r1, #400	; 0x190
   e20cc:	fb93 f2f1 	sdiv	r2, r3, r1
   e20d0:	fb01 3312 	mls	r3, r1, r2, r3
   e20d4:	fab3 f383 	clz	r3, r3
   e20d8:	095b      	lsrs	r3, r3, #5
   e20da:	e000      	b.n	e20de <localtime_r+0x1aa>
   e20dc:	2301      	movs	r3, #1
   e20de:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   e20e2:	61e3      	str	r3, [r4, #28]
   e20e4:	6923      	ldr	r3, [r4, #16]
   e20e6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   e20ea:	60e3      	str	r3, [r4, #12]
   e20ec:	f001 f801 	bl	e30f2 <__tz_unlock>
   e20f0:	4620      	mov	r0, r4
   e20f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   e20f6:	bf00      	nop
   e20f8:	000e4a0c 	.word	0x000e4a0c
   e20fc:	2003e7e4 	.word	0x2003e7e4

000e2100 <_localeconv_r>:
   e2100:	4800      	ldr	r0, [pc, #0]	; (e2104 <_localeconv_r+0x4>)
   e2102:	4770      	bx	lr
   e2104:	2003e258 	.word	0x2003e258

000e2108 <memcmp>:
   e2108:	b510      	push	{r4, lr}
   e210a:	3901      	subs	r1, #1
   e210c:	4402      	add	r2, r0
   e210e:	4290      	cmp	r0, r2
   e2110:	d007      	beq.n	e2122 <memcmp+0x1a>
   e2112:	f810 3b01 	ldrb.w	r3, [r0], #1
   e2116:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e211a:	42a3      	cmp	r3, r4
   e211c:	d0f7      	beq.n	e210e <memcmp+0x6>
   e211e:	1b18      	subs	r0, r3, r4
   e2120:	bd10      	pop	{r4, pc}
   e2122:	2000      	movs	r0, #0
   e2124:	bd10      	pop	{r4, pc}

000e2126 <memcpy>:
   e2126:	b510      	push	{r4, lr}
   e2128:	1e43      	subs	r3, r0, #1
   e212a:	440a      	add	r2, r1
   e212c:	4291      	cmp	r1, r2
   e212e:	d004      	beq.n	e213a <memcpy+0x14>
   e2130:	f811 4b01 	ldrb.w	r4, [r1], #1
   e2134:	f803 4f01 	strb.w	r4, [r3, #1]!
   e2138:	e7f8      	b.n	e212c <memcpy+0x6>
   e213a:	bd10      	pop	{r4, pc}

000e213c <memset>:
   e213c:	4402      	add	r2, r0
   e213e:	4603      	mov	r3, r0
   e2140:	4293      	cmp	r3, r2
   e2142:	d002      	beq.n	e214a <memset+0xe>
   e2144:	f803 1b01 	strb.w	r1, [r3], #1
   e2148:	e7fa      	b.n	e2140 <memset+0x4>
   e214a:	4770      	bx	lr

000e214c <srand>:
   e214c:	b538      	push	{r3, r4, r5, lr}
   e214e:	4b12      	ldr	r3, [pc, #72]	; (e2198 <srand+0x4c>)
   e2150:	681c      	ldr	r4, [r3, #0]
   e2152:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2154:	4605      	mov	r5, r0
   e2156:	b9d3      	cbnz	r3, e218e <srand+0x42>
   e2158:	2018      	movs	r0, #24
   e215a:	f7fc ffdd 	bl	df118 <malloc>
   e215e:	f243 330e 	movw	r3, #13070	; 0x330e
   e2162:	63a0      	str	r0, [r4, #56]	; 0x38
   e2164:	8003      	strh	r3, [r0, #0]
   e2166:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   e216a:	8043      	strh	r3, [r0, #2]
   e216c:	f241 2334 	movw	r3, #4660	; 0x1234
   e2170:	8083      	strh	r3, [r0, #4]
   e2172:	f24e 636d 	movw	r3, #58989	; 0xe66d
   e2176:	80c3      	strh	r3, [r0, #6]
   e2178:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   e217c:	8103      	strh	r3, [r0, #8]
   e217e:	2305      	movs	r3, #5
   e2180:	8143      	strh	r3, [r0, #10]
   e2182:	230b      	movs	r3, #11
   e2184:	8183      	strh	r3, [r0, #12]
   e2186:	2201      	movs	r2, #1
   e2188:	2300      	movs	r3, #0
   e218a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   e218e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   e2190:	2200      	movs	r2, #0
   e2192:	611d      	str	r5, [r3, #16]
   e2194:	615a      	str	r2, [r3, #20]
   e2196:	bd38      	pop	{r3, r4, r5, pc}
   e2198:	2003e254 	.word	0x2003e254

000e219c <strcmp>:
   e219c:	f810 2b01 	ldrb.w	r2, [r0], #1
   e21a0:	f811 3b01 	ldrb.w	r3, [r1], #1
   e21a4:	2a01      	cmp	r2, #1
   e21a6:	bf28      	it	cs
   e21a8:	429a      	cmpcs	r2, r3
   e21aa:	d0f7      	beq.n	e219c <strcmp>
   e21ac:	1ad0      	subs	r0, r2, r3
   e21ae:	4770      	bx	lr

000e21b0 <strcpy>:
   e21b0:	4603      	mov	r3, r0
   e21b2:	f811 2b01 	ldrb.w	r2, [r1], #1
   e21b6:	f803 2b01 	strb.w	r2, [r3], #1
   e21ba:	2a00      	cmp	r2, #0
   e21bc:	d1f9      	bne.n	e21b2 <strcpy+0x2>
   e21be:	4770      	bx	lr

000e21c0 <strdup>:
   e21c0:	4b02      	ldr	r3, [pc, #8]	; (e21cc <strdup+0xc>)
   e21c2:	4601      	mov	r1, r0
   e21c4:	6818      	ldr	r0, [r3, #0]
   e21c6:	f000 b803 	b.w	e21d0 <_strdup_r>
   e21ca:	bf00      	nop
   e21cc:	2003e254 	.word	0x2003e254

000e21d0 <_strdup_r>:
   e21d0:	b570      	push	{r4, r5, r6, lr}
   e21d2:	4606      	mov	r6, r0
   e21d4:	4608      	mov	r0, r1
   e21d6:	460c      	mov	r4, r1
   e21d8:	f000 f80d 	bl	e21f6 <strlen>
   e21dc:	1c45      	adds	r5, r0, #1
   e21de:	4629      	mov	r1, r5
   e21e0:	4630      	mov	r0, r6
   e21e2:	f7fc ffc1 	bl	df168 <_malloc_r>
   e21e6:	4606      	mov	r6, r0
   e21e8:	b118      	cbz	r0, e21f2 <_strdup_r+0x22>
   e21ea:	462a      	mov	r2, r5
   e21ec:	4621      	mov	r1, r4
   e21ee:	f7ff ff9a 	bl	e2126 <memcpy>
   e21f2:	4630      	mov	r0, r6
   e21f4:	bd70      	pop	{r4, r5, r6, pc}

000e21f6 <strlen>:
   e21f6:	4603      	mov	r3, r0
   e21f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   e21fc:	2a00      	cmp	r2, #0
   e21fe:	d1fb      	bne.n	e21f8 <strlen+0x2>
   e2200:	1a18      	subs	r0, r3, r0
   e2202:	3801      	subs	r0, #1
   e2204:	4770      	bx	lr

000e2206 <strncmp>:
   e2206:	b530      	push	{r4, r5, lr}
   e2208:	b182      	cbz	r2, e222c <strncmp+0x26>
   e220a:	1e45      	subs	r5, r0, #1
   e220c:	3901      	subs	r1, #1
   e220e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   e2212:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   e2216:	42a3      	cmp	r3, r4
   e2218:	d106      	bne.n	e2228 <strncmp+0x22>
   e221a:	43ec      	mvns	r4, r5
   e221c:	4414      	add	r4, r2
   e221e:	42e0      	cmn	r0, r4
   e2220:	d001      	beq.n	e2226 <strncmp+0x20>
   e2222:	2b00      	cmp	r3, #0
   e2224:	d1f3      	bne.n	e220e <strncmp+0x8>
   e2226:	461c      	mov	r4, r3
   e2228:	1b18      	subs	r0, r3, r4
   e222a:	bd30      	pop	{r4, r5, pc}
   e222c:	4610      	mov	r0, r2
   e222e:	bd30      	pop	{r4, r5, pc}

000e2230 <strnlen>:
   e2230:	b510      	push	{r4, lr}
   e2232:	4603      	mov	r3, r0
   e2234:	4401      	add	r1, r0
   e2236:	428b      	cmp	r3, r1
   e2238:	d004      	beq.n	e2244 <strnlen+0x14>
   e223a:	781a      	ldrb	r2, [r3, #0]
   e223c:	1c5c      	adds	r4, r3, #1
   e223e:	b10a      	cbz	r2, e2244 <strnlen+0x14>
   e2240:	4623      	mov	r3, r4
   e2242:	e7f8      	b.n	e2236 <strnlen+0x6>
   e2244:	1a18      	subs	r0, r3, r0
   e2246:	bd10      	pop	{r4, pc}

000e2248 <sulp>:
   e2248:	b570      	push	{r4, r5, r6, lr}
   e224a:	4604      	mov	r4, r0
   e224c:	460d      	mov	r5, r1
   e224e:	ec45 4b10 	vmov	d0, r4, r5
   e2252:	4616      	mov	r6, r2
   e2254:	f001 ff98 	bl	e4188 <__ulp>
   e2258:	ec51 0b10 	vmov	r0, r1, d0
   e225c:	b17e      	cbz	r6, e227e <sulp+0x36>
   e225e:	f3c5 530a 	ubfx	r3, r5, #20, #11
   e2262:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2266:	2b00      	cmp	r3, #0
   e2268:	dd09      	ble.n	e227e <sulp+0x36>
   e226a:	051b      	lsls	r3, r3, #20
   e226c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   e2270:	2400      	movs	r4, #0
   e2272:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   e2276:	4622      	mov	r2, r4
   e2278:	462b      	mov	r3, r5
   e227a:	f7ff fb05 	bl	e1888 <__aeabi_dmul>
   e227e:	bd70      	pop	{r4, r5, r6, pc}

000e2280 <_strtod_r>:
   e2280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2284:	b09d      	sub	sp, #116	; 0x74
   e2286:	2300      	movs	r3, #0
   e2288:	9002      	str	r0, [sp, #8]
   e228a:	460c      	mov	r4, r1
   e228c:	9213      	str	r2, [sp, #76]	; 0x4c
   e228e:	9318      	str	r3, [sp, #96]	; 0x60
   e2290:	f04f 0a00 	mov.w	sl, #0
   e2294:	f04f 0b00 	mov.w	fp, #0
   e2298:	9117      	str	r1, [sp, #92]	; 0x5c
   e229a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e229c:	781a      	ldrb	r2, [r3, #0]
   e229e:	2a0d      	cmp	r2, #13
   e22a0:	d805      	bhi.n	e22ae <_strtod_r+0x2e>
   e22a2:	2a09      	cmp	r2, #9
   e22a4:	d213      	bcs.n	e22ce <_strtod_r+0x4e>
   e22a6:	2a00      	cmp	r2, #0
   e22a8:	f000 81ac 	beq.w	e2604 <_strtod_r+0x384>
   e22ac:	e012      	b.n	e22d4 <_strtod_r+0x54>
   e22ae:	2a2b      	cmp	r2, #43	; 0x2b
   e22b0:	d004      	beq.n	e22bc <_strtod_r+0x3c>
   e22b2:	2a2d      	cmp	r2, #45	; 0x2d
   e22b4:	d004      	beq.n	e22c0 <_strtod_r+0x40>
   e22b6:	2a20      	cmp	r2, #32
   e22b8:	d10c      	bne.n	e22d4 <_strtod_r+0x54>
   e22ba:	e008      	b.n	e22ce <_strtod_r+0x4e>
   e22bc:	2200      	movs	r2, #0
   e22be:	e000      	b.n	e22c2 <_strtod_r+0x42>
   e22c0:	2201      	movs	r2, #1
   e22c2:	920c      	str	r2, [sp, #48]	; 0x30
   e22c4:	1c5a      	adds	r2, r3, #1
   e22c6:	9217      	str	r2, [sp, #92]	; 0x5c
   e22c8:	785b      	ldrb	r3, [r3, #1]
   e22ca:	b92b      	cbnz	r3, e22d8 <_strtod_r+0x58>
   e22cc:	e19a      	b.n	e2604 <_strtod_r+0x384>
   e22ce:	3301      	adds	r3, #1
   e22d0:	9317      	str	r3, [sp, #92]	; 0x5c
   e22d2:	e7e2      	b.n	e229a <_strtod_r+0x1a>
   e22d4:	2300      	movs	r3, #0
   e22d6:	930c      	str	r3, [sp, #48]	; 0x30
   e22d8:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e22da:	782b      	ldrb	r3, [r5, #0]
   e22dc:	2b30      	cmp	r3, #48	; 0x30
   e22de:	d15c      	bne.n	e239a <_strtod_r+0x11a>
   e22e0:	786b      	ldrb	r3, [r5, #1]
   e22e2:	2b58      	cmp	r3, #88	; 0x58
   e22e4:	d001      	beq.n	e22ea <_strtod_r+0x6a>
   e22e6:	2b78      	cmp	r3, #120	; 0x78
   e22e8:	d14c      	bne.n	e2384 <_strtod_r+0x104>
   e22ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e22ec:	9301      	str	r3, [sp, #4]
   e22ee:	ab18      	add	r3, sp, #96	; 0x60
   e22f0:	9300      	str	r3, [sp, #0]
   e22f2:	4aa9      	ldr	r2, [pc, #676]	; (e2598 <_strtod_r+0x318>)
   e22f4:	9802      	ldr	r0, [sp, #8]
   e22f6:	ab19      	add	r3, sp, #100	; 0x64
   e22f8:	a917      	add	r1, sp, #92	; 0x5c
   e22fa:	f001 f8cc 	bl	e3496 <__gethex>
   e22fe:	f010 0607 	ands.w	r6, r0, #7
   e2302:	4604      	mov	r4, r0
   e2304:	f000 8587 	beq.w	e2e16 <_strtod_r+0xb96>
   e2308:	2e06      	cmp	r6, #6
   e230a:	d105      	bne.n	e2318 <_strtod_r+0x98>
   e230c:	3501      	adds	r5, #1
   e230e:	2300      	movs	r3, #0
   e2310:	9517      	str	r5, [sp, #92]	; 0x5c
   e2312:	930c      	str	r3, [sp, #48]	; 0x30
   e2314:	f000 bd7f 	b.w	e2e16 <_strtod_r+0xb96>
   e2318:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e231a:	b13a      	cbz	r2, e232c <_strtod_r+0xac>
   e231c:	2135      	movs	r1, #53	; 0x35
   e231e:	a81a      	add	r0, sp, #104	; 0x68
   e2320:	f002 f81f 	bl	e4362 <__copybits>
   e2324:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2326:	9802      	ldr	r0, [sp, #8]
   e2328:	f001 fc9d 	bl	e3c66 <_Bfree>
   e232c:	2e06      	cmp	r6, #6
   e232e:	d822      	bhi.n	e2376 <_strtod_r+0xf6>
   e2330:	e8df f006 	tbb	[pc, r6]
   e2334:	18080d04 	.word	0x18080d04
   e2338:	0d1d      	.short	0x0d1d
   e233a:	04          	.byte	0x04
   e233b:	00          	.byte	0x00
   e233c:	f04f 0b00 	mov.w	fp, #0
   e2340:	46da      	mov	sl, fp
   e2342:	e018      	b.n	e2376 <_strtod_r+0xf6>
   e2344:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e2348:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
   e234c:	e013      	b.n	e2376 <_strtod_r+0xf6>
   e234e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e2350:	9a19      	ldr	r2, [sp, #100]	; 0x64
   e2352:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e2356:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   e235a:	f202 4233 	addw	r2, r2, #1075	; 0x433
   e235e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   e2362:	e008      	b.n	e2376 <_strtod_r+0xf6>
   e2364:	f8df b234 	ldr.w	fp, [pc, #564]	; e259c <_strtod_r+0x31c>
   e2368:	f04f 0a00 	mov.w	sl, #0
   e236c:	e003      	b.n	e2376 <_strtod_r+0xf6>
   e236e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   e2372:	f04f 3aff 	mov.w	sl, #4294967295
   e2376:	0721      	lsls	r1, r4, #28
   e2378:	f140 854d 	bpl.w	e2e16 <_strtod_r+0xb96>
   e237c:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   e2380:	f000 bd49 	b.w	e2e16 <_strtod_r+0xb96>
   e2384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2386:	1c5a      	adds	r2, r3, #1
   e2388:	9217      	str	r2, [sp, #92]	; 0x5c
   e238a:	785b      	ldrb	r3, [r3, #1]
   e238c:	2b30      	cmp	r3, #48	; 0x30
   e238e:	d0f9      	beq.n	e2384 <_strtod_r+0x104>
   e2390:	2b00      	cmp	r3, #0
   e2392:	f000 8540 	beq.w	e2e16 <_strtod_r+0xb96>
   e2396:	2301      	movs	r3, #1
   e2398:	e000      	b.n	e239c <_strtod_r+0x11c>
   e239a:	2300      	movs	r3, #0
   e239c:	f04f 0800 	mov.w	r8, #0
   e23a0:	9306      	str	r3, [sp, #24]
   e23a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e23a4:	9307      	str	r3, [sp, #28]
   e23a6:	f8cd 8014 	str.w	r8, [sp, #20]
   e23aa:	f8cd 8010 	str.w	r8, [sp, #16]
   e23ae:	220a      	movs	r2, #10
   e23b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   e23b2:	782e      	ldrb	r6, [r5, #0]
   e23b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   e23b8:	b2d9      	uxtb	r1, r3
   e23ba:	2909      	cmp	r1, #9
   e23bc:	d80e      	bhi.n	e23dc <_strtod_r+0x15c>
   e23be:	9904      	ldr	r1, [sp, #16]
   e23c0:	2908      	cmp	r1, #8
   e23c2:	bfdd      	ittte	le
   e23c4:	9905      	ldrle	r1, [sp, #20]
   e23c6:	fb02 3301 	mlale	r3, r2, r1, r3
   e23ca:	9305      	strle	r3, [sp, #20]
   e23cc:	fb02 3808 	mlagt	r8, r2, r8, r3
   e23d0:	9b04      	ldr	r3, [sp, #16]
   e23d2:	3501      	adds	r5, #1
   e23d4:	3301      	adds	r3, #1
   e23d6:	9304      	str	r3, [sp, #16]
   e23d8:	9517      	str	r5, [sp, #92]	; 0x5c
   e23da:	e7e9      	b.n	e23b0 <_strtod_r+0x130>
   e23dc:	9802      	ldr	r0, [sp, #8]
   e23de:	f7ff fe8f 	bl	e2100 <_localeconv_r>
   e23e2:	6807      	ldr	r7, [r0, #0]
   e23e4:	9802      	ldr	r0, [sp, #8]
   e23e6:	f7ff fe8b 	bl	e2100 <_localeconv_r>
   e23ea:	6800      	ldr	r0, [r0, #0]
   e23ec:	f7ff ff03 	bl	e21f6 <strlen>
   e23f0:	4639      	mov	r1, r7
   e23f2:	4602      	mov	r2, r0
   e23f4:	4628      	mov	r0, r5
   e23f6:	f7ff ff06 	bl	e2206 <strncmp>
   e23fa:	4607      	mov	r7, r0
   e23fc:	b128      	cbz	r0, e240a <_strtod_r+0x18a>
   e23fe:	2000      	movs	r0, #0
   e2400:	4633      	mov	r3, r6
   e2402:	9d04      	ldr	r5, [sp, #16]
   e2404:	4602      	mov	r2, r0
   e2406:	4601      	mov	r1, r0
   e2408:	e057      	b.n	e24ba <_strtod_r+0x23a>
   e240a:	9802      	ldr	r0, [sp, #8]
   e240c:	f7ff fe78 	bl	e2100 <_localeconv_r>
   e2410:	6800      	ldr	r0, [r0, #0]
   e2412:	f7ff fef0 	bl	e21f6 <strlen>
   e2416:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2418:	181a      	adds	r2, r3, r0
   e241a:	9217      	str	r2, [sp, #92]	; 0x5c
   e241c:	9a04      	ldr	r2, [sp, #16]
   e241e:	5c1b      	ldrb	r3, [r3, r0]
   e2420:	2a00      	cmp	r2, #0
   e2422:	d142      	bne.n	e24aa <_strtod_r+0x22a>
   e2424:	4610      	mov	r0, r2
   e2426:	2b30      	cmp	r3, #48	; 0x30
   e2428:	d105      	bne.n	e2436 <_strtod_r+0x1b6>
   e242a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e242c:	1c5a      	adds	r2, r3, #1
   e242e:	9217      	str	r2, [sp, #92]	; 0x5c
   e2430:	3001      	adds	r0, #1
   e2432:	785b      	ldrb	r3, [r3, #1]
   e2434:	e7f7      	b.n	e2426 <_strtod_r+0x1a6>
   e2436:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   e243a:	2a08      	cmp	r2, #8
   e243c:	d843      	bhi.n	e24c6 <_strtod_r+0x246>
   e243e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   e2440:	9207      	str	r2, [sp, #28]
   e2442:	4602      	mov	r2, r0
   e2444:	2000      	movs	r0, #0
   e2446:	4605      	mov	r5, r0
   e2448:	3b30      	subs	r3, #48	; 0x30
   e244a:	f100 0101 	add.w	r1, r0, #1
   e244e:	d026      	beq.n	e249e <_strtod_r+0x21e>
   e2450:	440a      	add	r2, r1
   e2452:	eb05 0c00 	add.w	ip, r5, r0
   e2456:	4629      	mov	r1, r5
   e2458:	260a      	movs	r6, #10
   e245a:	4561      	cmp	r1, ip
   e245c:	d00e      	beq.n	e247c <_strtod_r+0x1fc>
   e245e:	3101      	adds	r1, #1
   e2460:	f101 3eff 	add.w	lr, r1, #4294967295
   e2464:	f1be 0f08 	cmp.w	lr, #8
   e2468:	dc03      	bgt.n	e2472 <_strtod_r+0x1f2>
   e246a:	9f05      	ldr	r7, [sp, #20]
   e246c:	4377      	muls	r7, r6
   e246e:	9705      	str	r7, [sp, #20]
   e2470:	e7f3      	b.n	e245a <_strtod_r+0x1da>
   e2472:	2910      	cmp	r1, #16
   e2474:	bfd8      	it	le
   e2476:	fb06 f808 	mulle.w	r8, r6, r8
   e247a:	e7ee      	b.n	e245a <_strtod_r+0x1da>
   e247c:	4428      	add	r0, r5
   e247e:	2808      	cmp	r0, #8
   e2480:	f100 0501 	add.w	r5, r0, #1
   e2484:	dc05      	bgt.n	e2492 <_strtod_r+0x212>
   e2486:	9805      	ldr	r0, [sp, #20]
   e2488:	210a      	movs	r1, #10
   e248a:	fb01 3300 	mla	r3, r1, r0, r3
   e248e:	9305      	str	r3, [sp, #20]
   e2490:	e004      	b.n	e249c <_strtod_r+0x21c>
   e2492:	2d10      	cmp	r5, #16
   e2494:	bfdc      	itt	le
   e2496:	210a      	movle	r1, #10
   e2498:	fb01 3808 	mlale	r8, r1, r8, r3
   e249c:	2100      	movs	r1, #0
   e249e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e24a0:	1c58      	adds	r0, r3, #1
   e24a2:	9017      	str	r0, [sp, #92]	; 0x5c
   e24a4:	785b      	ldrb	r3, [r3, #1]
   e24a6:	4608      	mov	r0, r1
   e24a8:	e002      	b.n	e24b0 <_strtod_r+0x230>
   e24aa:	9d04      	ldr	r5, [sp, #16]
   e24ac:	4638      	mov	r0, r7
   e24ae:	463a      	mov	r2, r7
   e24b0:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   e24b4:	2909      	cmp	r1, #9
   e24b6:	d9c7      	bls.n	e2448 <_strtod_r+0x1c8>
   e24b8:	2101      	movs	r1, #1
   e24ba:	2b65      	cmp	r3, #101	; 0x65
   e24bc:	d001      	beq.n	e24c2 <_strtod_r+0x242>
   e24be:	2b45      	cmp	r3, #69	; 0x45
   e24c0:	d151      	bne.n	e2566 <_strtod_r+0x2e6>
   e24c2:	b96d      	cbnz	r5, e24e0 <_strtod_r+0x260>
   e24c4:	e004      	b.n	e24d0 <_strtod_r+0x250>
   e24c6:	2b65      	cmp	r3, #101	; 0x65
   e24c8:	f040 84b3 	bne.w	e2e32 <_strtod_r+0xbb2>
   e24cc:	2200      	movs	r2, #0
   e24ce:	2101      	movs	r1, #1
   e24d0:	b928      	cbnz	r0, e24de <_strtod_r+0x25e>
   e24d2:	9b06      	ldr	r3, [sp, #24]
   e24d4:	2b00      	cmp	r3, #0
   e24d6:	f000 8095 	beq.w	e2604 <_strtod_r+0x384>
   e24da:	4605      	mov	r5, r0
   e24dc:	e000      	b.n	e24e0 <_strtod_r+0x260>
   e24de:	2500      	movs	r5, #0
   e24e0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   e24e2:	1c63      	adds	r3, r4, #1
   e24e4:	9317      	str	r3, [sp, #92]	; 0x5c
   e24e6:	7863      	ldrb	r3, [r4, #1]
   e24e8:	2b2b      	cmp	r3, #43	; 0x2b
   e24ea:	d006      	beq.n	e24fa <_strtod_r+0x27a>
   e24ec:	2b2d      	cmp	r3, #45	; 0x2d
   e24ee:	d002      	beq.n	e24f6 <_strtod_r+0x276>
   e24f0:	2600      	movs	r6, #0
   e24f2:	9603      	str	r6, [sp, #12]
   e24f4:	e006      	b.n	e2504 <_strtod_r+0x284>
   e24f6:	2301      	movs	r3, #1
   e24f8:	e000      	b.n	e24fc <_strtod_r+0x27c>
   e24fa:	2300      	movs	r3, #0
   e24fc:	9303      	str	r3, [sp, #12]
   e24fe:	1ca3      	adds	r3, r4, #2
   e2500:	9317      	str	r3, [sp, #92]	; 0x5c
   e2502:	78a3      	ldrb	r3, [r4, #2]
   e2504:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   e2508:	2e09      	cmp	r6, #9
   e250a:	d82b      	bhi.n	e2564 <_strtod_r+0x2e4>
   e250c:	2b30      	cmp	r3, #48	; 0x30
   e250e:	d104      	bne.n	e251a <_strtod_r+0x29a>
   e2510:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2512:	1c5e      	adds	r6, r3, #1
   e2514:	9617      	str	r6, [sp, #92]	; 0x5c
   e2516:	785b      	ldrb	r3, [r3, #1]
   e2518:	e7f8      	b.n	e250c <_strtod_r+0x28c>
   e251a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
   e251e:	2e08      	cmp	r6, #8
   e2520:	d821      	bhi.n	e2566 <_strtod_r+0x2e6>
   e2522:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   e2526:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2528:	f04f 0c0a 	mov.w	ip, #10
   e252c:	461f      	mov	r7, r3
   e252e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2530:	1c5e      	adds	r6, r3, #1
   e2532:	9617      	str	r6, [sp, #92]	; 0x5c
   e2534:	785b      	ldrb	r3, [r3, #1]
   e2536:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
   e253a:	f1b9 0f09 	cmp.w	r9, #9
   e253e:	d804      	bhi.n	e254a <_strtod_r+0x2ca>
   e2540:	fb0c 3e0e 	mla	lr, ip, lr, r3
   e2544:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   e2548:	e7f1      	b.n	e252e <_strtod_r+0x2ae>
   e254a:	1bf6      	subs	r6, r6, r7
   e254c:	2e08      	cmp	r6, #8
   e254e:	f644 691f 	movw	r9, #19999	; 0x4e1f
   e2552:	dc02      	bgt.n	e255a <_strtod_r+0x2da>
   e2554:	45f1      	cmp	r9, lr
   e2556:	bfa8      	it	ge
   e2558:	46f1      	movge	r9, lr
   e255a:	9e03      	ldr	r6, [sp, #12]
   e255c:	b12e      	cbz	r6, e256a <_strtod_r+0x2ea>
   e255e:	f1c9 0900 	rsb	r9, r9, #0
   e2562:	e002      	b.n	e256a <_strtod_r+0x2ea>
   e2564:	9417      	str	r4, [sp, #92]	; 0x5c
   e2566:	f04f 0900 	mov.w	r9, #0
   e256a:	2d00      	cmp	r5, #0
   e256c:	d153      	bne.n	e2616 <_strtod_r+0x396>
   e256e:	2800      	cmp	r0, #0
   e2570:	f040 8451 	bne.w	e2e16 <_strtod_r+0xb96>
   e2574:	9a06      	ldr	r2, [sp, #24]
   e2576:	2a00      	cmp	r2, #0
   e2578:	f040 844d 	bne.w	e2e16 <_strtod_r+0xb96>
   e257c:	2900      	cmp	r1, #0
   e257e:	d141      	bne.n	e2604 <_strtod_r+0x384>
   e2580:	2b4e      	cmp	r3, #78	; 0x4e
   e2582:	d020      	beq.n	e25c6 <_strtod_r+0x346>
   e2584:	dc02      	bgt.n	e258c <_strtod_r+0x30c>
   e2586:	2b49      	cmp	r3, #73	; 0x49
   e2588:	d00a      	beq.n	e25a0 <_strtod_r+0x320>
   e258a:	e03b      	b.n	e2604 <_strtod_r+0x384>
   e258c:	2b69      	cmp	r3, #105	; 0x69
   e258e:	d007      	beq.n	e25a0 <_strtod_r+0x320>
   e2590:	2b6e      	cmp	r3, #110	; 0x6e
   e2592:	d018      	beq.n	e25c6 <_strtod_r+0x346>
   e2594:	e036      	b.n	e2604 <_strtod_r+0x384>
   e2596:	bf00      	nop
   e2598:	000e4a6c 	.word	0x000e4a6c
   e259c:	7ff00000 	.word	0x7ff00000
   e25a0:	49a8      	ldr	r1, [pc, #672]	; (e2844 <_strtod_r+0x5c4>)
   e25a2:	a817      	add	r0, sp, #92	; 0x5c
   e25a4:	f001 f9a8 	bl	e38f8 <__match>
   e25a8:	b360      	cbz	r0, e2604 <_strtod_r+0x384>
   e25aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e25ac:	49a6      	ldr	r1, [pc, #664]	; (e2848 <_strtod_r+0x5c8>)
   e25ae:	3b01      	subs	r3, #1
   e25b0:	a817      	add	r0, sp, #92	; 0x5c
   e25b2:	9317      	str	r3, [sp, #92]	; 0x5c
   e25b4:	f001 f9a0 	bl	e38f8 <__match>
   e25b8:	b910      	cbnz	r0, e25c0 <_strtod_r+0x340>
   e25ba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e25bc:	3301      	adds	r3, #1
   e25be:	9317      	str	r3, [sp, #92]	; 0x5c
   e25c0:	f8df b2a0 	ldr.w	fp, [pc, #672]	; e2864 <_strtod_r+0x5e4>
   e25c4:	e01a      	b.n	e25fc <_strtod_r+0x37c>
   e25c6:	49a1      	ldr	r1, [pc, #644]	; (e284c <_strtod_r+0x5cc>)
   e25c8:	a817      	add	r0, sp, #92	; 0x5c
   e25ca:	f001 f995 	bl	e38f8 <__match>
   e25ce:	b1c8      	cbz	r0, e2604 <_strtod_r+0x384>
   e25d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e25d2:	781b      	ldrb	r3, [r3, #0]
   e25d4:	2b28      	cmp	r3, #40	; 0x28
   e25d6:	d10f      	bne.n	e25f8 <_strtod_r+0x378>
   e25d8:	aa1a      	add	r2, sp, #104	; 0x68
   e25da:	499d      	ldr	r1, [pc, #628]	; (e2850 <_strtod_r+0x5d0>)
   e25dc:	a817      	add	r0, sp, #92	; 0x5c
   e25de:	f001 f99e 	bl	e391e <__hexnan>
   e25e2:	2805      	cmp	r0, #5
   e25e4:	d108      	bne.n	e25f8 <_strtod_r+0x378>
   e25e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   e25e8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
   e25ec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   e25f0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   e25f4:	f000 bc0f 	b.w	e2e16 <_strtod_r+0xb96>
   e25f8:	f8df b26c 	ldr.w	fp, [pc, #620]	; e2868 <_strtod_r+0x5e8>
   e25fc:	f04f 0a00 	mov.w	sl, #0
   e2600:	f000 bc09 	b.w	e2e16 <_strtod_r+0xb96>
   e2604:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2606:	9417      	str	r4, [sp, #92]	; 0x5c
   e2608:	2b00      	cmp	r3, #0
   e260a:	f000 840f 	beq.w	e2e2c <_strtod_r+0xbac>
   e260e:	2300      	movs	r3, #0
   e2610:	930c      	str	r3, [sp, #48]	; 0x30
   e2612:	f000 bc02 	b.w	e2e1a <_strtod_r+0xb9a>
   e2616:	9b04      	ldr	r3, [sp, #16]
   e2618:	9805      	ldr	r0, [sp, #20]
   e261a:	2b00      	cmp	r3, #0
   e261c:	bf08      	it	eq
   e261e:	462b      	moveq	r3, r5
   e2620:	2d10      	cmp	r5, #16
   e2622:	462c      	mov	r4, r5
   e2624:	ebc2 0909 	rsb	r9, r2, r9
   e2628:	bfa8      	it	ge
   e262a:	2410      	movge	r4, #16
   e262c:	9304      	str	r3, [sp, #16]
   e262e:	f7ff f8b5 	bl	e179c <__aeabi_ui2d>
   e2632:	2c09      	cmp	r4, #9
   e2634:	4682      	mov	sl, r0
   e2636:	468b      	mov	fp, r1
   e2638:	dd13      	ble.n	e2662 <_strtod_r+0x3e2>
   e263a:	4b86      	ldr	r3, [pc, #536]	; (e2854 <_strtod_r+0x5d4>)
   e263c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   e2640:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   e2644:	f7ff f920 	bl	e1888 <__aeabi_dmul>
   e2648:	4606      	mov	r6, r0
   e264a:	4640      	mov	r0, r8
   e264c:	460f      	mov	r7, r1
   e264e:	f7ff f8a5 	bl	e179c <__aeabi_ui2d>
   e2652:	4602      	mov	r2, r0
   e2654:	460b      	mov	r3, r1
   e2656:	4630      	mov	r0, r6
   e2658:	4639      	mov	r1, r7
   e265a:	f7fe ff63 	bl	e1524 <__adddf3>
   e265e:	4682      	mov	sl, r0
   e2660:	468b      	mov	fp, r1
   e2662:	2d0f      	cmp	r5, #15
   e2664:	dc36      	bgt.n	e26d4 <_strtod_r+0x454>
   e2666:	f1b9 0f00 	cmp.w	r9, #0
   e266a:	f000 83d4 	beq.w	e2e16 <_strtod_r+0xb96>
   e266e:	dd24      	ble.n	e26ba <_strtod_r+0x43a>
   e2670:	f1b9 0f16 	cmp.w	r9, #22
   e2674:	dc07      	bgt.n	e2686 <_strtod_r+0x406>
   e2676:	4d77      	ldr	r5, [pc, #476]	; (e2854 <_strtod_r+0x5d4>)
   e2678:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
   e267c:	4652      	mov	r2, sl
   e267e:	465b      	mov	r3, fp
   e2680:	e9d9 0100 	ldrd	r0, r1, [r9]
   e2684:	e014      	b.n	e26b0 <_strtod_r+0x430>
   e2686:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   e268a:	4599      	cmp	r9, r3
   e268c:	dc22      	bgt.n	e26d4 <_strtod_r+0x454>
   e268e:	4c71      	ldr	r4, [pc, #452]	; (e2854 <_strtod_r+0x5d4>)
   e2690:	f1c5 050f 	rsb	r5, r5, #15
   e2694:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   e2698:	ebc5 0509 	rsb	r5, r5, r9
   e269c:	4652      	mov	r2, sl
   e269e:	465b      	mov	r3, fp
   e26a0:	e9d1 0100 	ldrd	r0, r1, [r1]
   e26a4:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   e26a8:	f7ff f8ee 	bl	e1888 <__aeabi_dmul>
   e26ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   e26b0:	f7ff f8ea 	bl	e1888 <__aeabi_dmul>
   e26b4:	4682      	mov	sl, r0
   e26b6:	468b      	mov	fp, r1
   e26b8:	e3ad      	b.n	e2e16 <_strtod_r+0xb96>
   e26ba:	f119 0f16 	cmn.w	r9, #22
   e26be:	db09      	blt.n	e26d4 <_strtod_r+0x454>
   e26c0:	4d64      	ldr	r5, [pc, #400]	; (e2854 <_strtod_r+0x5d4>)
   e26c2:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
   e26c6:	e9d9 2300 	ldrd	r2, r3, [r9]
   e26ca:	4650      	mov	r0, sl
   e26cc:	4659      	mov	r1, fp
   e26ce:	f7ff fa05 	bl	e1adc <__aeabi_ddiv>
   e26d2:	e7ef      	b.n	e26b4 <_strtod_r+0x434>
   e26d4:	1b2c      	subs	r4, r5, r4
   e26d6:	444c      	add	r4, r9
   e26d8:	2c00      	cmp	r4, #0
   e26da:	dd57      	ble.n	e278c <_strtod_r+0x50c>
   e26dc:	f014 010f 	ands.w	r1, r4, #15
   e26e0:	d00a      	beq.n	e26f8 <_strtod_r+0x478>
   e26e2:	4b5c      	ldr	r3, [pc, #368]	; (e2854 <_strtod_r+0x5d4>)
   e26e4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   e26e8:	4652      	mov	r2, sl
   e26ea:	465b      	mov	r3, fp
   e26ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   e26f0:	f7ff f8ca 	bl	e1888 <__aeabi_dmul>
   e26f4:	4682      	mov	sl, r0
   e26f6:	468b      	mov	fp, r1
   e26f8:	f034 040f 	bics.w	r4, r4, #15
   e26fc:	f000 80b8 	beq.w	e2870 <_strtod_r+0x5f0>
   e2700:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
   e2704:	dd0b      	ble.n	e271e <_strtod_r+0x49e>
   e2706:	2400      	movs	r4, #0
   e2708:	4625      	mov	r5, r4
   e270a:	9405      	str	r4, [sp, #20]
   e270c:	9404      	str	r4, [sp, #16]
   e270e:	9a02      	ldr	r2, [sp, #8]
   e2710:	f8df b150 	ldr.w	fp, [pc, #336]	; e2864 <_strtod_r+0x5e4>
   e2714:	2322      	movs	r3, #34	; 0x22
   e2716:	6013      	str	r3, [r2, #0]
   e2718:	f04f 0a00 	mov.w	sl, #0
   e271c:	e187      	b.n	e2a2e <_strtod_r+0x7ae>
   e271e:	4e4e      	ldr	r6, [pc, #312]	; (e2858 <_strtod_r+0x5d8>)
   e2720:	2300      	movs	r3, #0
   e2722:	1124      	asrs	r4, r4, #4
   e2724:	4650      	mov	r0, sl
   e2726:	4659      	mov	r1, fp
   e2728:	4698      	mov	r8, r3
   e272a:	4637      	mov	r7, r6
   e272c:	2c01      	cmp	r4, #1
   e272e:	dd0b      	ble.n	e2748 <_strtod_r+0x4c8>
   e2730:	07e2      	lsls	r2, r4, #31
   e2732:	d504      	bpl.n	e273e <_strtod_r+0x4be>
   e2734:	e9d6 2300 	ldrd	r2, r3, [r6]
   e2738:	f7ff f8a6 	bl	e1888 <__aeabi_dmul>
   e273c:	2301      	movs	r3, #1
   e273e:	f108 0801 	add.w	r8, r8, #1
   e2742:	1064      	asrs	r4, r4, #1
   e2744:	3608      	adds	r6, #8
   e2746:	e7f1      	b.n	e272c <_strtod_r+0x4ac>
   e2748:	b10b      	cbz	r3, e274e <_strtod_r+0x4ce>
   e274a:	4682      	mov	sl, r0
   e274c:	468b      	mov	fp, r1
   e274e:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2752:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
   e2756:	4652      	mov	r2, sl
   e2758:	465b      	mov	r3, fp
   e275a:	e9d7 0100 	ldrd	r0, r1, [r7]
   e275e:	f7ff f893 	bl	e1888 <__aeabi_dmul>
   e2762:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2766:	468b      	mov	fp, r1
   e2768:	460a      	mov	r2, r1
   e276a:	0d1b      	lsrs	r3, r3, #20
   e276c:	493b      	ldr	r1, [pc, #236]	; (e285c <_strtod_r+0x5dc>)
   e276e:	051b      	lsls	r3, r3, #20
   e2770:	428b      	cmp	r3, r1
   e2772:	4682      	mov	sl, r0
   e2774:	d8c7      	bhi.n	e2706 <_strtod_r+0x486>
   e2776:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   e277a:	428b      	cmp	r3, r1
   e277c:	bf86      	itte	hi
   e277e:	f8df b0ec 	ldrhi.w	fp, [pc, #236]	; e286c <_strtod_r+0x5ec>
   e2782:	f04f 3aff 	movhi.w	sl, #4294967295
   e2786:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   e278a:	e071      	b.n	e2870 <_strtod_r+0x5f0>
   e278c:	d070      	beq.n	e2870 <_strtod_r+0x5f0>
   e278e:	4264      	negs	r4, r4
   e2790:	f014 020f 	ands.w	r2, r4, #15
   e2794:	d00a      	beq.n	e27ac <_strtod_r+0x52c>
   e2796:	4b2f      	ldr	r3, [pc, #188]	; (e2854 <_strtod_r+0x5d4>)
   e2798:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   e279c:	4650      	mov	r0, sl
   e279e:	4659      	mov	r1, fp
   e27a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   e27a4:	f7ff f99a 	bl	e1adc <__aeabi_ddiv>
   e27a8:	4682      	mov	sl, r0
   e27aa:	468b      	mov	fp, r1
   e27ac:	1124      	asrs	r4, r4, #4
   e27ae:	d05f      	beq.n	e2870 <_strtod_r+0x5f0>
   e27b0:	2c1f      	cmp	r4, #31
   e27b2:	dd04      	ble.n	e27be <_strtod_r+0x53e>
   e27b4:	2400      	movs	r4, #0
   e27b6:	4625      	mov	r5, r4
   e27b8:	9405      	str	r4, [sp, #20]
   e27ba:	9404      	str	r4, [sp, #16]
   e27bc:	e130      	b.n	e2a20 <_strtod_r+0x7a0>
   e27be:	f014 0f10 	tst.w	r4, #16
   e27c2:	bf0c      	ite	eq
   e27c4:	2300      	moveq	r3, #0
   e27c6:	236a      	movne	r3, #106	; 0x6a
   e27c8:	4e25      	ldr	r6, [pc, #148]	; (e2860 <_strtod_r+0x5e0>)
   e27ca:	9303      	str	r3, [sp, #12]
   e27cc:	4650      	mov	r0, sl
   e27ce:	4659      	mov	r1, fp
   e27d0:	2300      	movs	r3, #0
   e27d2:	2c00      	cmp	r4, #0
   e27d4:	dd09      	ble.n	e27ea <_strtod_r+0x56a>
   e27d6:	07e2      	lsls	r2, r4, #31
   e27d8:	d504      	bpl.n	e27e4 <_strtod_r+0x564>
   e27da:	e9d6 2300 	ldrd	r2, r3, [r6]
   e27de:	f7ff f853 	bl	e1888 <__aeabi_dmul>
   e27e2:	2301      	movs	r3, #1
   e27e4:	1064      	asrs	r4, r4, #1
   e27e6:	3608      	adds	r6, #8
   e27e8:	e7f3      	b.n	e27d2 <_strtod_r+0x552>
   e27ea:	b10b      	cbz	r3, e27f0 <_strtod_r+0x570>
   e27ec:	4682      	mov	sl, r0
   e27ee:	468b      	mov	fp, r1
   e27f0:	9b03      	ldr	r3, [sp, #12]
   e27f2:	b1eb      	cbz	r3, e2830 <_strtod_r+0x5b0>
   e27f4:	f3cb 530a 	ubfx	r3, fp, #20, #11
   e27f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e27fc:	2b00      	cmp	r3, #0
   e27fe:	4659      	mov	r1, fp
   e2800:	dd16      	ble.n	e2830 <_strtod_r+0x5b0>
   e2802:	2b1f      	cmp	r3, #31
   e2804:	dd0e      	ble.n	e2824 <_strtod_r+0x5a4>
   e2806:	2b34      	cmp	r3, #52	; 0x34
   e2808:	bfde      	ittt	le
   e280a:	3b20      	suble	r3, #32
   e280c:	f04f 32ff 	movle.w	r2, #4294967295
   e2810:	fa02 f303 	lslle.w	r3, r2, r3
   e2814:	f04f 0a00 	mov.w	sl, #0
   e2818:	bfcc      	ite	gt
   e281a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   e281e:	ea03 0b01 	andle.w	fp, r3, r1
   e2822:	e005      	b.n	e2830 <_strtod_r+0x5b0>
   e2824:	f04f 32ff 	mov.w	r2, #4294967295
   e2828:	fa02 f303 	lsl.w	r3, r2, r3
   e282c:	ea03 0a0a 	and.w	sl, r3, sl
   e2830:	2200      	movs	r2, #0
   e2832:	2300      	movs	r3, #0
   e2834:	4650      	mov	r0, sl
   e2836:	4659      	mov	r1, fp
   e2838:	f7ff fa8e 	bl	e1d58 <__aeabi_dcmpeq>
   e283c:	2800      	cmp	r0, #0
   e283e:	d1b9      	bne.n	e27b4 <_strtod_r+0x534>
   e2840:	e018      	b.n	e2874 <_strtod_r+0x5f4>
   e2842:	bf00      	nop
   e2844:	000e4a94 	.word	0x000e4a94
   e2848:	000e4a97 	.word	0x000e4a97
   e284c:	000e4a9d 	.word	0x000e4a9d
   e2850:	000e4a80 	.word	0x000e4a80
   e2854:	000e4b08 	.word	0x000e4b08
   e2858:	000e4bd0 	.word	0x000e4bd0
   e285c:	7ca00000 	.word	0x7ca00000
   e2860:	000e4aa0 	.word	0x000e4aa0
   e2864:	7ff00000 	.word	0x7ff00000
   e2868:	fff80000 	.word	0xfff80000
   e286c:	7fefffff 	.word	0x7fefffff
   e2870:	2300      	movs	r3, #0
   e2872:	9303      	str	r3, [sp, #12]
   e2874:	9b05      	ldr	r3, [sp, #20]
   e2876:	9300      	str	r3, [sp, #0]
   e2878:	9a04      	ldr	r2, [sp, #16]
   e287a:	9907      	ldr	r1, [sp, #28]
   e287c:	9802      	ldr	r0, [sp, #8]
   e287e:	462b      	mov	r3, r5
   e2880:	f001 fa43 	bl	e3d0a <__s2b>
   e2884:	9005      	str	r0, [sp, #20]
   e2886:	2800      	cmp	r0, #0
   e2888:	f43f af3d 	beq.w	e2706 <_strtod_r+0x486>
   e288c:	f1b9 0f00 	cmp.w	r9, #0
   e2890:	f1c9 0300 	rsb	r3, r9, #0
   e2894:	bfa8      	it	ge
   e2896:	2300      	movge	r3, #0
   e2898:	930d      	str	r3, [sp, #52]	; 0x34
   e289a:	2400      	movs	r4, #0
   e289c:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
   e28a0:	9312      	str	r3, [sp, #72]	; 0x48
   e28a2:	4625      	mov	r5, r4
   e28a4:	9b05      	ldr	r3, [sp, #20]
   e28a6:	9802      	ldr	r0, [sp, #8]
   e28a8:	6859      	ldr	r1, [r3, #4]
   e28aa:	f001 f9a7 	bl	e3bfc <_Balloc>
   e28ae:	9004      	str	r0, [sp, #16]
   e28b0:	2800      	cmp	r0, #0
   e28b2:	f43f af2c 	beq.w	e270e <_strtod_r+0x48e>
   e28b6:	9b05      	ldr	r3, [sp, #20]
   e28b8:	691a      	ldr	r2, [r3, #16]
   e28ba:	3202      	adds	r2, #2
   e28bc:	f103 010c 	add.w	r1, r3, #12
   e28c0:	0092      	lsls	r2, r2, #2
   e28c2:	300c      	adds	r0, #12
   e28c4:	f7ff fc2f 	bl	e2126 <memcpy>
   e28c8:	aa1a      	add	r2, sp, #104	; 0x68
   e28ca:	a919      	add	r1, sp, #100	; 0x64
   e28cc:	ec4b ab10 	vmov	d0, sl, fp
   e28d0:	9802      	ldr	r0, [sp, #8]
   e28d2:	e9cd ab08 	strd	sl, fp, [sp, #32]
   e28d6:	f001 fccc 	bl	e4272 <__d2b>
   e28da:	9018      	str	r0, [sp, #96]	; 0x60
   e28dc:	2800      	cmp	r0, #0
   e28de:	f43f af16 	beq.w	e270e <_strtod_r+0x48e>
   e28e2:	2101      	movs	r1, #1
   e28e4:	9802      	ldr	r0, [sp, #8]
   e28e6:	f001 fa9b 	bl	e3e20 <__i2b>
   e28ea:	4605      	mov	r5, r0
   e28ec:	2800      	cmp	r0, #0
   e28ee:	f43f af0e 	beq.w	e270e <_strtod_r+0x48e>
   e28f2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   e28f4:	9903      	ldr	r1, [sp, #12]
   e28f6:	9e1a      	ldr	r6, [sp, #104]	; 0x68
   e28f8:	2b00      	cmp	r3, #0
   e28fa:	bfad      	iteet	ge
   e28fc:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
   e28fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
   e2900:	f8dd 8034 	ldrlt.w	r8, [sp, #52]	; 0x34
   e2904:	eb02 0803 	addge.w	r8, r2, r3
   e2908:	bfb8      	it	lt
   e290a:	1ad2      	sublt	r2, r2, r3
   e290c:	eba3 0301 	sub.w	r3, r3, r1
   e2910:	4433      	add	r3, r6
   e2912:	49b5      	ldr	r1, [pc, #724]	; (e2be8 <_strtod_r+0x968>)
   e2914:	bfa8      	it	ge
   e2916:	9a12      	ldrge	r2, [sp, #72]	; 0x48
   e2918:	3b01      	subs	r3, #1
   e291a:	428b      	cmp	r3, r1
   e291c:	f1c6 0636 	rsb	r6, r6, #54	; 0x36
   e2920:	f280 808a 	bge.w	e2a38 <_strtod_r+0x7b8>
   e2924:	1ac9      	subs	r1, r1, r3
   e2926:	291f      	cmp	r1, #31
   e2928:	bfc8      	it	gt
   e292a:	4fb0      	ldrgt	r7, [pc, #704]	; (e2bec <_strtod_r+0x96c>)
   e292c:	f04f 0901 	mov.w	r9, #1
   e2930:	bfd4      	ite	le
   e2932:	fa09 f301 	lslle.w	r3, r9, r1
   e2936:	1aff      	subgt	r7, r7, r3
   e2938:	eba6 0601 	sub.w	r6, r6, r1
   e293c:	bfd9      	ittee	le
   e293e:	9306      	strle	r3, [sp, #24]
   e2940:	2700      	movle	r7, #0
   e2942:	fa09 f707 	lslgt.w	r7, r9, r7
   e2946:	f8cd 9018 	strgt.w	r9, [sp, #24]
   e294a:	eb08 0906 	add.w	r9, r8, r6
   e294e:	9b03      	ldr	r3, [sp, #12]
   e2950:	45c8      	cmp	r8, r9
   e2952:	4416      	add	r6, r2
   e2954:	441e      	add	r6, r3
   e2956:	4643      	mov	r3, r8
   e2958:	bfa8      	it	ge
   e295a:	464b      	movge	r3, r9
   e295c:	42b3      	cmp	r3, r6
   e295e:	bfa8      	it	ge
   e2960:	4633      	movge	r3, r6
   e2962:	2b00      	cmp	r3, #0
   e2964:	bfc2      	ittt	gt
   e2966:	ebc3 0909 	rsbgt	r9, r3, r9
   e296a:	1af6      	subgt	r6, r6, r3
   e296c:	ebc3 0808 	rsbgt	r8, r3, r8
   e2970:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   e2972:	2b00      	cmp	r3, #0
   e2974:	d164      	bne.n	e2a40 <_strtod_r+0x7c0>
   e2976:	f1b9 0f00 	cmp.w	r9, #0
   e297a:	dc7a      	bgt.n	e2a72 <_strtod_r+0x7f2>
   e297c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   e297e:	2b00      	cmp	r3, #0
   e2980:	f040 8081 	bne.w	e2a86 <_strtod_r+0x806>
   e2984:	2e00      	cmp	r6, #0
   e2986:	f300 8088 	bgt.w	e2a9a <_strtod_r+0x81a>
   e298a:	f1b8 0f00 	cmp.w	r8, #0
   e298e:	f300 808e 	bgt.w	e2aae <_strtod_r+0x82e>
   e2992:	9a04      	ldr	r2, [sp, #16]
   e2994:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2996:	9802      	ldr	r0, [sp, #8]
   e2998:	f001 fb97 	bl	e40ca <__mdiff>
   e299c:	4604      	mov	r4, r0
   e299e:	2800      	cmp	r0, #0
   e29a0:	f43f aeb5 	beq.w	e270e <_strtod_r+0x48e>
   e29a4:	68c3      	ldr	r3, [r0, #12]
   e29a6:	9307      	str	r3, [sp, #28]
   e29a8:	2300      	movs	r3, #0
   e29aa:	60c3      	str	r3, [r0, #12]
   e29ac:	4629      	mov	r1, r5
   e29ae:	f001 fb70 	bl	e4092 <__mcmp>
   e29b2:	2800      	cmp	r0, #0
   e29b4:	f280 8089 	bge.w	e2aca <_strtod_r+0x84a>
   e29b8:	9b07      	ldr	r3, [sp, #28]
   e29ba:	2b00      	cmp	r3, #0
   e29bc:	f040 8204 	bne.w	e2dc8 <_strtod_r+0xb48>
   e29c0:	f1ba 0f00 	cmp.w	sl, #0
   e29c4:	f040 8200 	bne.w	e2dc8 <_strtod_r+0xb48>
   e29c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e29cc:	2b00      	cmp	r3, #0
   e29ce:	f040 81fb 	bne.w	e2dc8 <_strtod_r+0xb48>
   e29d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e29d6:	0d1b      	lsrs	r3, r3, #20
   e29d8:	051b      	lsls	r3, r3, #20
   e29da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e29de:	f240 81f3 	bls.w	e2dc8 <_strtod_r+0xb48>
   e29e2:	6963      	ldr	r3, [r4, #20]
   e29e4:	2b00      	cmp	r3, #0
   e29e6:	d06c      	beq.n	e2ac2 <_strtod_r+0x842>
   e29e8:	4621      	mov	r1, r4
   e29ea:	2201      	movs	r2, #1
   e29ec:	9802      	ldr	r0, [sp, #8]
   e29ee:	f001 faff 	bl	e3ff0 <__lshift>
   e29f2:	4629      	mov	r1, r5
   e29f4:	4604      	mov	r4, r0
   e29f6:	f001 fb4c 	bl	e4092 <__mcmp>
   e29fa:	2800      	cmp	r0, #0
   e29fc:	f340 81e4 	ble.w	e2dc8 <_strtod_r+0xb48>
   e2a00:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2a04:	9a03      	ldr	r2, [sp, #12]
   e2a06:	0d1b      	lsrs	r3, r3, #20
   e2a08:	051b      	lsls	r3, r3, #20
   e2a0a:	2a00      	cmp	r2, #0
   e2a0c:	f000 808c 	beq.w	e2b28 <_strtod_r+0x8a8>
   e2a10:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   e2a14:	f300 8088 	bgt.w	e2b28 <_strtod_r+0x8a8>
   e2a18:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
   e2a1c:	f300 81d6 	bgt.w	e2dcc <_strtod_r+0xb4c>
   e2a20:	9a02      	ldr	r2, [sp, #8]
   e2a22:	2322      	movs	r3, #34	; 0x22
   e2a24:	f04f 0a00 	mov.w	sl, #0
   e2a28:	f04f 0b00 	mov.w	fp, #0
   e2a2c:	6013      	str	r3, [r2, #0]
   e2a2e:	9b05      	ldr	r3, [sp, #20]
   e2a30:	2b00      	cmp	r3, #0
   e2a32:	f040 81dc 	bne.w	e2dee <_strtod_r+0xb6e>
   e2a36:	e1ee      	b.n	e2e16 <_strtod_r+0xb96>
   e2a38:	2301      	movs	r3, #1
   e2a3a:	2700      	movs	r7, #0
   e2a3c:	9306      	str	r3, [sp, #24]
   e2a3e:	e784      	b.n	e294a <_strtod_r+0x6ca>
   e2a40:	4629      	mov	r1, r5
   e2a42:	461a      	mov	r2, r3
   e2a44:	9802      	ldr	r0, [sp, #8]
   e2a46:	f001 fa85 	bl	e3f54 <__pow5mult>
   e2a4a:	4605      	mov	r5, r0
   e2a4c:	2800      	cmp	r0, #0
   e2a4e:	f43f ae5e 	beq.w	e270e <_strtod_r+0x48e>
   e2a52:	4601      	mov	r1, r0
   e2a54:	9a18      	ldr	r2, [sp, #96]	; 0x60
   e2a56:	9802      	ldr	r0, [sp, #8]
   e2a58:	f001 f9eb 	bl	e3e32 <__multiply>
   e2a5c:	9007      	str	r0, [sp, #28]
   e2a5e:	2800      	cmp	r0, #0
   e2a60:	f43f ae55 	beq.w	e270e <_strtod_r+0x48e>
   e2a64:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2a66:	9802      	ldr	r0, [sp, #8]
   e2a68:	f001 f8fd 	bl	e3c66 <_Bfree>
   e2a6c:	9b07      	ldr	r3, [sp, #28]
   e2a6e:	9318      	str	r3, [sp, #96]	; 0x60
   e2a70:	e781      	b.n	e2976 <_strtod_r+0x6f6>
   e2a72:	464a      	mov	r2, r9
   e2a74:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2a76:	9802      	ldr	r0, [sp, #8]
   e2a78:	f001 faba 	bl	e3ff0 <__lshift>
   e2a7c:	9018      	str	r0, [sp, #96]	; 0x60
   e2a7e:	2800      	cmp	r0, #0
   e2a80:	f47f af7c 	bne.w	e297c <_strtod_r+0x6fc>
   e2a84:	e643      	b.n	e270e <_strtod_r+0x48e>
   e2a86:	9a12      	ldr	r2, [sp, #72]	; 0x48
   e2a88:	9904      	ldr	r1, [sp, #16]
   e2a8a:	9802      	ldr	r0, [sp, #8]
   e2a8c:	f001 fa62 	bl	e3f54 <__pow5mult>
   e2a90:	9004      	str	r0, [sp, #16]
   e2a92:	2800      	cmp	r0, #0
   e2a94:	f47f af76 	bne.w	e2984 <_strtod_r+0x704>
   e2a98:	e639      	b.n	e270e <_strtod_r+0x48e>
   e2a9a:	4632      	mov	r2, r6
   e2a9c:	9904      	ldr	r1, [sp, #16]
   e2a9e:	9802      	ldr	r0, [sp, #8]
   e2aa0:	f001 faa6 	bl	e3ff0 <__lshift>
   e2aa4:	9004      	str	r0, [sp, #16]
   e2aa6:	2800      	cmp	r0, #0
   e2aa8:	f47f af6f 	bne.w	e298a <_strtod_r+0x70a>
   e2aac:	e62f      	b.n	e270e <_strtod_r+0x48e>
   e2aae:	4629      	mov	r1, r5
   e2ab0:	4642      	mov	r2, r8
   e2ab2:	9802      	ldr	r0, [sp, #8]
   e2ab4:	f001 fa9c 	bl	e3ff0 <__lshift>
   e2ab8:	4605      	mov	r5, r0
   e2aba:	2800      	cmp	r0, #0
   e2abc:	f47f af69 	bne.w	e2992 <_strtod_r+0x712>
   e2ac0:	e625      	b.n	e270e <_strtod_r+0x48e>
   e2ac2:	6923      	ldr	r3, [r4, #16]
   e2ac4:	2b01      	cmp	r3, #1
   e2ac6:	dc8f      	bgt.n	e29e8 <_strtod_r+0x768>
   e2ac8:	e17e      	b.n	e2dc8 <_strtod_r+0xb48>
   e2aca:	d161      	bne.n	e2b90 <_strtod_r+0x910>
   e2acc:	9a07      	ldr	r2, [sp, #28]
   e2ace:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2ad2:	b322      	cbz	r2, e2b1e <_strtod_r+0x89e>
   e2ad4:	4946      	ldr	r1, [pc, #280]	; (e2bf0 <_strtod_r+0x970>)
   e2ad6:	428b      	cmp	r3, r1
   e2ad8:	465a      	mov	r2, fp
   e2ada:	d12e      	bne.n	e2b3a <_strtod_r+0x8ba>
   e2adc:	9b03      	ldr	r3, [sp, #12]
   e2ade:	4651      	mov	r1, sl
   e2ae0:	b163      	cbz	r3, e2afc <_strtod_r+0x87c>
   e2ae2:	4b44      	ldr	r3, [pc, #272]	; (e2bf4 <_strtod_r+0x974>)
   e2ae4:	4013      	ands	r3, r2
   e2ae6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e2aea:	d807      	bhi.n	e2afc <_strtod_r+0x87c>
   e2aec:	0d1b      	lsrs	r3, r3, #20
   e2aee:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   e2af2:	f04f 30ff 	mov.w	r0, #4294967295
   e2af6:	fa00 f303 	lsl.w	r3, r0, r3
   e2afa:	e001      	b.n	e2b00 <_strtod_r+0x880>
   e2afc:	f04f 33ff 	mov.w	r3, #4294967295
   e2b00:	428b      	cmp	r3, r1
   e2b02:	d11a      	bne.n	e2b3a <_strtod_r+0x8ba>
   e2b04:	493c      	ldr	r1, [pc, #240]	; (e2bf8 <_strtod_r+0x978>)
   e2b06:	428a      	cmp	r2, r1
   e2b08:	d102      	bne.n	e2b10 <_strtod_r+0x890>
   e2b0a:	3301      	adds	r3, #1
   e2b0c:	f43f adff 	beq.w	e270e <_strtod_r+0x48e>
   e2b10:	4b38      	ldr	r3, [pc, #224]	; (e2bf4 <_strtod_r+0x974>)
   e2b12:	4013      	ands	r3, r2
   e2b14:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   e2b18:	f04f 0a00 	mov.w	sl, #0
   e2b1c:	e154      	b.n	e2dc8 <_strtod_r+0xb48>
   e2b1e:	b963      	cbnz	r3, e2b3a <_strtod_r+0x8ba>
   e2b20:	f1ba 0f00 	cmp.w	sl, #0
   e2b24:	d109      	bne.n	e2b3a <_strtod_r+0x8ba>
   e2b26:	e76b      	b.n	e2a00 <_strtod_r+0x780>
   e2b28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   e2b2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   e2b30:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   e2b34:	f04f 3aff 	mov.w	sl, #4294967295
   e2b38:	e146      	b.n	e2dc8 <_strtod_r+0xb48>
   e2b3a:	b117      	cbz	r7, e2b42 <_strtod_r+0x8c2>
   e2b3c:	ea17 0f0b 	tst.w	r7, fp
   e2b40:	e002      	b.n	e2b48 <_strtod_r+0x8c8>
   e2b42:	9b06      	ldr	r3, [sp, #24]
   e2b44:	ea13 0f0a 	tst.w	r3, sl
   e2b48:	f000 813e 	beq.w	e2dc8 <_strtod_r+0xb48>
   e2b4c:	9b07      	ldr	r3, [sp, #28]
   e2b4e:	9a03      	ldr	r2, [sp, #12]
   e2b50:	4650      	mov	r0, sl
   e2b52:	4659      	mov	r1, fp
   e2b54:	b153      	cbz	r3, e2b6c <_strtod_r+0x8ec>
   e2b56:	f7ff fb77 	bl	e2248 <sulp>
   e2b5a:	4602      	mov	r2, r0
   e2b5c:	460b      	mov	r3, r1
   e2b5e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2b62:	f7fe fcdf 	bl	e1524 <__adddf3>
   e2b66:	4682      	mov	sl, r0
   e2b68:	468b      	mov	fp, r1
   e2b6a:	e12d      	b.n	e2dc8 <_strtod_r+0xb48>
   e2b6c:	f7ff fb6c 	bl	e2248 <sulp>
   e2b70:	4602      	mov	r2, r0
   e2b72:	460b      	mov	r3, r1
   e2b74:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   e2b78:	f7fe fcd2 	bl	e1520 <__aeabi_dsub>
   e2b7c:	2200      	movs	r2, #0
   e2b7e:	2300      	movs	r3, #0
   e2b80:	4682      	mov	sl, r0
   e2b82:	468b      	mov	fp, r1
   e2b84:	f7ff f8e8 	bl	e1d58 <__aeabi_dcmpeq>
   e2b88:	2800      	cmp	r0, #0
   e2b8a:	f47f af49 	bne.w	e2a20 <_strtod_r+0x7a0>
   e2b8e:	e11b      	b.n	e2dc8 <_strtod_r+0xb48>
   e2b90:	4629      	mov	r1, r5
   e2b92:	4620      	mov	r0, r4
   e2b94:	f001 fbbb 	bl	e430e <__ratio>
   e2b98:	ec57 6b10 	vmov	r6, r7, d0
   e2b9c:	2200      	movs	r2, #0
   e2b9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   e2ba2:	ee10 0a10 	vmov	r0, s0
   e2ba6:	4639      	mov	r1, r7
   e2ba8:	f7ff f8ea 	bl	e1d80 <__aeabi_dcmple>
   e2bac:	2800      	cmp	r0, #0
   e2bae:	d042      	beq.n	e2c36 <_strtod_r+0x9b6>
   e2bb0:	9b07      	ldr	r3, [sp, #28]
   e2bb2:	b123      	cbz	r3, e2bbe <_strtod_r+0x93e>
   e2bb4:	f04f 0800 	mov.w	r8, #0
   e2bb8:	f8df 9040 	ldr.w	r9, [pc, #64]	; e2bfc <_strtod_r+0x97c>
   e2bbc:	e011      	b.n	e2be2 <_strtod_r+0x962>
   e2bbe:	f1ba 0f00 	cmp.w	sl, #0
   e2bc2:	d103      	bne.n	e2bcc <_strtod_r+0x94c>
   e2bc4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2bc8:	b93b      	cbnz	r3, e2bda <_strtod_r+0x95a>
   e2bca:	e01b      	b.n	e2c04 <_strtod_r+0x984>
   e2bcc:	f1ba 0f01 	cmp.w	sl, #1
   e2bd0:	d103      	bne.n	e2bda <_strtod_r+0x95a>
   e2bd2:	f1bb 0f00 	cmp.w	fp, #0
   e2bd6:	f43f af23 	beq.w	e2a20 <_strtod_r+0x7a0>
   e2bda:	f8df 9024 	ldr.w	r9, [pc, #36]	; e2c00 <_strtod_r+0x980>
   e2bde:	f04f 0800 	mov.w	r8, #0
   e2be2:	2600      	movs	r6, #0
   e2be4:	4f05      	ldr	r7, [pc, #20]	; (e2bfc <_strtod_r+0x97c>)
   e2be6:	e039      	b.n	e2c5c <_strtod_r+0x9dc>
   e2be8:	fffffc02 	.word	0xfffffc02
   e2bec:	fffffbe2 	.word	0xfffffbe2
   e2bf0:	000fffff 	.word	0x000fffff
   e2bf4:	7ff00000 	.word	0x7ff00000
   e2bf8:	7fefffff 	.word	0x7fefffff
   e2bfc:	3ff00000 	.word	0x3ff00000
   e2c00:	bff00000 	.word	0xbff00000
   e2c04:	2200      	movs	r2, #0
   e2c06:	4b98      	ldr	r3, [pc, #608]	; (e2e68 <_strtod_r+0xbe8>)
   e2c08:	4630      	mov	r0, r6
   e2c0a:	4639      	mov	r1, r7
   e2c0c:	f7ff f8ae 	bl	e1d6c <__aeabi_dcmplt>
   e2c10:	b940      	cbnz	r0, e2c24 <_strtod_r+0x9a4>
   e2c12:	4630      	mov	r0, r6
   e2c14:	4639      	mov	r1, r7
   e2c16:	2200      	movs	r2, #0
   e2c18:	4b94      	ldr	r3, [pc, #592]	; (e2e6c <_strtod_r+0xbec>)
   e2c1a:	f7fe fe35 	bl	e1888 <__aeabi_dmul>
   e2c1e:	4606      	mov	r6, r0
   e2c20:	460f      	mov	r7, r1
   e2c22:	e001      	b.n	e2c28 <_strtod_r+0x9a8>
   e2c24:	4f91      	ldr	r7, [pc, #580]	; (e2e6c <_strtod_r+0xbec>)
   e2c26:	2600      	movs	r6, #0
   e2c28:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   e2c2c:	9614      	str	r6, [sp, #80]	; 0x50
   e2c2e:	9315      	str	r3, [sp, #84]	; 0x54
   e2c30:	e9dd 8914 	ldrd	r8, r9, [sp, #80]	; 0x50
   e2c34:	e012      	b.n	e2c5c <_strtod_r+0x9dc>
   e2c36:	4b8d      	ldr	r3, [pc, #564]	; (e2e6c <_strtod_r+0xbec>)
   e2c38:	4630      	mov	r0, r6
   e2c3a:	4639      	mov	r1, r7
   e2c3c:	2200      	movs	r2, #0
   e2c3e:	f7fe fe23 	bl	e1888 <__aeabi_dmul>
   e2c42:	9b07      	ldr	r3, [sp, #28]
   e2c44:	4606      	mov	r6, r0
   e2c46:	460f      	mov	r7, r1
   e2c48:	b923      	cbnz	r3, e2c54 <_strtod_r+0x9d4>
   e2c4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2c4e:	900e      	str	r0, [sp, #56]	; 0x38
   e2c50:	930f      	str	r3, [sp, #60]	; 0x3c
   e2c52:	e001      	b.n	e2c58 <_strtod_r+0x9d8>
   e2c54:	e9cd 670e 	strd	r6, r7, [sp, #56]	; 0x38
   e2c58:	e9dd 890e 	ldrd	r8, r9, [sp, #56]	; 0x38
   e2c5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2c60:	0d1b      	lsrs	r3, r3, #20
   e2c62:	051b      	lsls	r3, r3, #20
   e2c64:	9306      	str	r3, [sp, #24]
   e2c66:	9a06      	ldr	r2, [sp, #24]
   e2c68:	4b81      	ldr	r3, [pc, #516]	; (e2e70 <_strtod_r+0xbf0>)
   e2c6a:	429a      	cmp	r2, r3
   e2c6c:	d12b      	bne.n	e2cc6 <_strtod_r+0xa46>
   e2c6e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2c72:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   e2c76:	ec4b ab10 	vmov	d0, sl, fp
   e2c7a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
   e2c7e:	f001 fa83 	bl	e4188 <__ulp>
   e2c82:	4640      	mov	r0, r8
   e2c84:	ec53 2b10 	vmov	r2, r3, d0
   e2c88:	4649      	mov	r1, r9
   e2c8a:	f7fe fdfd 	bl	e1888 <__aeabi_dmul>
   e2c8e:	4652      	mov	r2, sl
   e2c90:	465b      	mov	r3, fp
   e2c92:	f7fe fc47 	bl	e1524 <__adddf3>
   e2c96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   e2c9a:	0d1b      	lsrs	r3, r3, #20
   e2c9c:	4a75      	ldr	r2, [pc, #468]	; (e2e74 <_strtod_r+0xbf4>)
   e2c9e:	051b      	lsls	r3, r3, #20
   e2ca0:	4293      	cmp	r3, r2
   e2ca2:	4682      	mov	sl, r0
   e2ca4:	d90c      	bls.n	e2cc0 <_strtod_r+0xa40>
   e2ca6:	4b74      	ldr	r3, [pc, #464]	; (e2e78 <_strtod_r+0xbf8>)
   e2ca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   e2caa:	429a      	cmp	r2, r3
   e2cac:	d103      	bne.n	e2cb6 <_strtod_r+0xa36>
   e2cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e2cb0:	3301      	adds	r3, #1
   e2cb2:	f43f ad2c 	beq.w	e270e <_strtod_r+0x48e>
   e2cb6:	f8df b1c0 	ldr.w	fp, [pc, #448]	; e2e78 <_strtod_r+0xbf8>
   e2cba:	f04f 3aff 	mov.w	sl, #4294967295
   e2cbe:	e072      	b.n	e2da6 <_strtod_r+0xb26>
   e2cc0:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
   e2cc4:	e038      	b.n	e2d38 <_strtod_r+0xab8>
   e2cc6:	9b03      	ldr	r3, [sp, #12]
   e2cc8:	b333      	cbz	r3, e2d18 <_strtod_r+0xa98>
   e2cca:	9b06      	ldr	r3, [sp, #24]
   e2ccc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   e2cd0:	d822      	bhi.n	e2d18 <_strtod_r+0xa98>
   e2cd2:	a35d      	add	r3, pc, #372	; (adr r3, e2e48 <_strtod_r+0xbc8>)
   e2cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2cd8:	4630      	mov	r0, r6
   e2cda:	4639      	mov	r1, r7
   e2cdc:	f7ff f850 	bl	e1d80 <__aeabi_dcmple>
   e2ce0:	b1a8      	cbz	r0, e2d0e <_strtod_r+0xa8e>
   e2ce2:	4639      	mov	r1, r7
   e2ce4:	4630      	mov	r0, r6
   e2ce6:	f7ff f891 	bl	e1e0c <__aeabi_d2uiz>
   e2cea:	2800      	cmp	r0, #0
   e2cec:	bf08      	it	eq
   e2cee:	2001      	moveq	r0, #1
   e2cf0:	f7fe fd54 	bl	e179c <__aeabi_ui2d>
   e2cf4:	9b07      	ldr	r3, [sp, #28]
   e2cf6:	4606      	mov	r6, r0
   e2cf8:	460f      	mov	r7, r1
   e2cfa:	b923      	cbnz	r3, e2d06 <_strtod_r+0xa86>
   e2cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   e2d00:	9010      	str	r0, [sp, #64]	; 0x40
   e2d02:	9311      	str	r3, [sp, #68]	; 0x44
   e2d04:	e001      	b.n	e2d0a <_strtod_r+0xa8a>
   e2d06:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
   e2d0a:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   e2d0e:	9a06      	ldr	r2, [sp, #24]
   e2d10:	f109 63d6 	add.w	r3, r9, #112197632	; 0x6b00000
   e2d14:	ebc2 0903 	rsb	r9, r2, r3
   e2d18:	ed9d 0b08 	vldr	d0, [sp, #32]
   e2d1c:	f001 fa34 	bl	e4188 <__ulp>
   e2d20:	4640      	mov	r0, r8
   e2d22:	ec53 2b10 	vmov	r2, r3, d0
   e2d26:	4649      	mov	r1, r9
   e2d28:	f7fe fdae 	bl	e1888 <__aeabi_dmul>
   e2d2c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   e2d30:	f7fe fbf8 	bl	e1524 <__adddf3>
   e2d34:	4682      	mov	sl, r0
   e2d36:	468b      	mov	fp, r1
   e2d38:	9b03      	ldr	r3, [sp, #12]
   e2d3a:	bba3      	cbnz	r3, e2da6 <_strtod_r+0xb26>
   e2d3c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   e2d40:	0d1b      	lsrs	r3, r3, #20
   e2d42:	9a06      	ldr	r2, [sp, #24]
   e2d44:	051b      	lsls	r3, r3, #20
   e2d46:	429a      	cmp	r2, r3
   e2d48:	46d8      	mov	r8, fp
   e2d4a:	d12c      	bne.n	e2da6 <_strtod_r+0xb26>
   e2d4c:	4639      	mov	r1, r7
   e2d4e:	4630      	mov	r0, r6
   e2d50:	f7ff f834 	bl	e1dbc <__aeabi_d2iz>
   e2d54:	f7fe fd32 	bl	e17bc <__aeabi_i2d>
   e2d58:	460b      	mov	r3, r1
   e2d5a:	4602      	mov	r2, r0
   e2d5c:	4639      	mov	r1, r7
   e2d5e:	4630      	mov	r0, r6
   e2d60:	f7fe fbde 	bl	e1520 <__aeabi_dsub>
   e2d64:	9b07      	ldr	r3, [sp, #28]
   e2d66:	4606      	mov	r6, r0
   e2d68:	460f      	mov	r7, r1
   e2d6a:	b92b      	cbnz	r3, e2d78 <_strtod_r+0xaf8>
   e2d6c:	f1ba 0f00 	cmp.w	sl, #0
   e2d70:	d102      	bne.n	e2d78 <_strtod_r+0xaf8>
   e2d72:	f3cb 0313 	ubfx	r3, fp, #0, #20
   e2d76:	b183      	cbz	r3, e2d9a <_strtod_r+0xb1a>
   e2d78:	a335      	add	r3, pc, #212	; (adr r3, e2e50 <_strtod_r+0xbd0>)
   e2d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2d7e:	4630      	mov	r0, r6
   e2d80:	4639      	mov	r1, r7
   e2d82:	f7fe fff3 	bl	e1d6c <__aeabi_dcmplt>
   e2d86:	2800      	cmp	r0, #0
   e2d88:	d131      	bne.n	e2dee <_strtod_r+0xb6e>
   e2d8a:	a333      	add	r3, pc, #204	; (adr r3, e2e58 <_strtod_r+0xbd8>)
   e2d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2d90:	4630      	mov	r0, r6
   e2d92:	4639      	mov	r1, r7
   e2d94:	f7ff f808 	bl	e1da8 <__aeabi_dcmpgt>
   e2d98:	e004      	b.n	e2da4 <_strtod_r+0xb24>
   e2d9a:	a331      	add	r3, pc, #196	; (adr r3, e2e60 <_strtod_r+0xbe0>)
   e2d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   e2da0:	f7fe ffe4 	bl	e1d6c <__aeabi_dcmplt>
   e2da4:	bb18      	cbnz	r0, e2dee <_strtod_r+0xb6e>
   e2da6:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2da8:	9802      	ldr	r0, [sp, #8]
   e2daa:	f000 ff5c 	bl	e3c66 <_Bfree>
   e2dae:	9904      	ldr	r1, [sp, #16]
   e2db0:	9802      	ldr	r0, [sp, #8]
   e2db2:	f000 ff58 	bl	e3c66 <_Bfree>
   e2db6:	4629      	mov	r1, r5
   e2db8:	9802      	ldr	r0, [sp, #8]
   e2dba:	f000 ff54 	bl	e3c66 <_Bfree>
   e2dbe:	4621      	mov	r1, r4
   e2dc0:	9802      	ldr	r0, [sp, #8]
   e2dc2:	f000 ff50 	bl	e3c66 <_Bfree>
   e2dc6:	e56d      	b.n	e28a4 <_strtod_r+0x624>
   e2dc8:	9b03      	ldr	r3, [sp, #12]
   e2dca:	b183      	cbz	r3, e2dee <_strtod_r+0xb6e>
   e2dcc:	4b2b      	ldr	r3, [pc, #172]	; (e2e7c <_strtod_r+0xbfc>)
   e2dce:	930b      	str	r3, [sp, #44]	; 0x2c
   e2dd0:	2300      	movs	r3, #0
   e2dd2:	930a      	str	r3, [sp, #40]	; 0x28
   e2dd4:	4650      	mov	r0, sl
   e2dd6:	4659      	mov	r1, fp
   e2dd8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   e2ddc:	f7fe fd54 	bl	e1888 <__aeabi_dmul>
   e2de0:	4682      	mov	sl, r0
   e2de2:	468b      	mov	fp, r1
   e2de4:	b919      	cbnz	r1, e2dee <_strtod_r+0xb6e>
   e2de6:	b910      	cbnz	r0, e2dee <_strtod_r+0xb6e>
   e2de8:	9a02      	ldr	r2, [sp, #8]
   e2dea:	2322      	movs	r3, #34	; 0x22
   e2dec:	6013      	str	r3, [r2, #0]
   e2dee:	9918      	ldr	r1, [sp, #96]	; 0x60
   e2df0:	9802      	ldr	r0, [sp, #8]
   e2df2:	f000 ff38 	bl	e3c66 <_Bfree>
   e2df6:	9904      	ldr	r1, [sp, #16]
   e2df8:	9802      	ldr	r0, [sp, #8]
   e2dfa:	f000 ff34 	bl	e3c66 <_Bfree>
   e2dfe:	4629      	mov	r1, r5
   e2e00:	9802      	ldr	r0, [sp, #8]
   e2e02:	f000 ff30 	bl	e3c66 <_Bfree>
   e2e06:	9905      	ldr	r1, [sp, #20]
   e2e08:	9802      	ldr	r0, [sp, #8]
   e2e0a:	f000 ff2c 	bl	e3c66 <_Bfree>
   e2e0e:	4621      	mov	r1, r4
   e2e10:	9802      	ldr	r0, [sp, #8]
   e2e12:	f000 ff28 	bl	e3c66 <_Bfree>
   e2e16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   e2e18:	b113      	cbz	r3, e2e20 <_strtod_r+0xba0>
   e2e1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   e2e1c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   e2e1e:	6013      	str	r3, [r2, #0]
   e2e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   e2e22:	b11b      	cbz	r3, e2e2c <_strtod_r+0xbac>
   e2e24:	4652      	mov	r2, sl
   e2e26:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   e2e2a:	e007      	b.n	e2e3c <_strtod_r+0xbbc>
   e2e2c:	4652      	mov	r2, sl
   e2e2e:	465b      	mov	r3, fp
   e2e30:	e004      	b.n	e2e3c <_strtod_r+0xbbc>
   e2e32:	2500      	movs	r5, #0
   e2e34:	462a      	mov	r2, r5
   e2e36:	2101      	movs	r1, #1
   e2e38:	f7ff bb41 	b.w	e24be <_strtod_r+0x23e>
   e2e3c:	ec43 2b10 	vmov	d0, r2, r3
   e2e40:	b01d      	add	sp, #116	; 0x74
   e2e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e2e46:	bf00      	nop
   e2e48:	ffc00000 	.word	0xffc00000
   e2e4c:	41dfffff 	.word	0x41dfffff
   e2e50:	94a03595 	.word	0x94a03595
   e2e54:	3fdfffff 	.word	0x3fdfffff
   e2e58:	35afe535 	.word	0x35afe535
   e2e5c:	3fe00000 	.word	0x3fe00000
   e2e60:	94a03595 	.word	0x94a03595
   e2e64:	3fcfffff 	.word	0x3fcfffff
   e2e68:	3ff00000 	.word	0x3ff00000
   e2e6c:	3fe00000 	.word	0x3fe00000
   e2e70:	7fe00000 	.word	0x7fe00000
   e2e74:	7c9fffff 	.word	0x7c9fffff
   e2e78:	7fefffff 	.word	0x7fefffff
   e2e7c:	39500000 	.word	0x39500000

000e2e80 <strtod>:
   e2e80:	4b02      	ldr	r3, [pc, #8]	; (e2e8c <strtod+0xc>)
   e2e82:	460a      	mov	r2, r1
   e2e84:	4601      	mov	r1, r0
   e2e86:	6818      	ldr	r0, [r3, #0]
   e2e88:	f7ff b9fa 	b.w	e2280 <_strtod_r>
   e2e8c:	2003e254 	.word	0x2003e254

000e2e90 <_strtoul_r>:
   e2e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e2e94:	4680      	mov	r8, r0
   e2e96:	483c      	ldr	r0, [pc, #240]	; (e2f88 <_strtoul_r+0xf8>)
   e2e98:	f8d0 9000 	ldr.w	r9, [r0]
   e2e9c:	460e      	mov	r6, r1
   e2e9e:	4635      	mov	r5, r6
   e2ea0:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2ea4:	eb09 0004 	add.w	r0, r9, r4
   e2ea8:	7840      	ldrb	r0, [r0, #1]
   e2eaa:	f000 0008 	and.w	r0, r0, #8
   e2eae:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   e2eb2:	b108      	cbz	r0, e2eb8 <_strtoul_r+0x28>
   e2eb4:	462e      	mov	r6, r5
   e2eb6:	e7f2      	b.n	e2e9e <_strtoul_r+0xe>
   e2eb8:	2c2d      	cmp	r4, #45	; 0x2d
   e2eba:	d103      	bne.n	e2ec4 <_strtoul_r+0x34>
   e2ebc:	1cb5      	adds	r5, r6, #2
   e2ebe:	7874      	ldrb	r4, [r6, #1]
   e2ec0:	2701      	movs	r7, #1
   e2ec2:	e003      	b.n	e2ecc <_strtoul_r+0x3c>
   e2ec4:	2c2b      	cmp	r4, #43	; 0x2b
   e2ec6:	bf04      	itt	eq
   e2ec8:	7874      	ldrbeq	r4, [r6, #1]
   e2eca:	1cb5      	addeq	r5, r6, #2
   e2ecc:	b113      	cbz	r3, e2ed4 <_strtoul_r+0x44>
   e2ece:	2b10      	cmp	r3, #16
   e2ed0:	d10a      	bne.n	e2ee8 <_strtoul_r+0x58>
   e2ed2:	e053      	b.n	e2f7c <_strtoul_r+0xec>
   e2ed4:	2c30      	cmp	r4, #48	; 0x30
   e2ed6:	d14f      	bne.n	e2f78 <_strtoul_r+0xe8>
   e2ed8:	7828      	ldrb	r0, [r5, #0]
   e2eda:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   e2ede:	2858      	cmp	r0, #88	; 0x58
   e2ee0:	d145      	bne.n	e2f6e <_strtoul_r+0xde>
   e2ee2:	786c      	ldrb	r4, [r5, #1]
   e2ee4:	2310      	movs	r3, #16
   e2ee6:	3502      	adds	r5, #2
   e2ee8:	f04f 3cff 	mov.w	ip, #4294967295
   e2eec:	2600      	movs	r6, #0
   e2eee:	fbbc fcf3 	udiv	ip, ip, r3
   e2ef2:	fb03 fa0c 	mul.w	sl, r3, ip
   e2ef6:	ea6f 0a0a 	mvn.w	sl, sl
   e2efa:	4630      	mov	r0, r6
   e2efc:	eb09 0e04 	add.w	lr, r9, r4
   e2f00:	f89e e001 	ldrb.w	lr, [lr, #1]
   e2f04:	f01e 0f04 	tst.w	lr, #4
   e2f08:	d001      	beq.n	e2f0e <_strtoul_r+0x7e>
   e2f0a:	3c30      	subs	r4, #48	; 0x30
   e2f0c:	e00b      	b.n	e2f26 <_strtoul_r+0x96>
   e2f0e:	f01e 0e03 	ands.w	lr, lr, #3
   e2f12:	d01a      	beq.n	e2f4a <_strtoul_r+0xba>
   e2f14:	f1be 0f01 	cmp.w	lr, #1
   e2f18:	bf0c      	ite	eq
   e2f1a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   e2f1e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   e2f22:	ebce 0404 	rsb	r4, lr, r4
   e2f26:	42a3      	cmp	r3, r4
   e2f28:	dd0f      	ble.n	e2f4a <_strtoul_r+0xba>
   e2f2a:	2e00      	cmp	r6, #0
   e2f2c:	db08      	blt.n	e2f40 <_strtoul_r+0xb0>
   e2f2e:	4560      	cmp	r0, ip
   e2f30:	d806      	bhi.n	e2f40 <_strtoul_r+0xb0>
   e2f32:	d101      	bne.n	e2f38 <_strtoul_r+0xa8>
   e2f34:	4554      	cmp	r4, sl
   e2f36:	dc03      	bgt.n	e2f40 <_strtoul_r+0xb0>
   e2f38:	fb03 4000 	mla	r0, r3, r0, r4
   e2f3c:	2601      	movs	r6, #1
   e2f3e:	e001      	b.n	e2f44 <_strtoul_r+0xb4>
   e2f40:	f04f 36ff 	mov.w	r6, #4294967295
   e2f44:	f815 4b01 	ldrb.w	r4, [r5], #1
   e2f48:	e7d8      	b.n	e2efc <_strtoul_r+0x6c>
   e2f4a:	2e00      	cmp	r6, #0
   e2f4c:	da07      	bge.n	e2f5e <_strtoul_r+0xce>
   e2f4e:	2322      	movs	r3, #34	; 0x22
   e2f50:	f8c8 3000 	str.w	r3, [r8]
   e2f54:	f04f 30ff 	mov.w	r0, #4294967295
   e2f58:	b92a      	cbnz	r2, e2f66 <_strtoul_r+0xd6>
   e2f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2f5e:	b107      	cbz	r7, e2f62 <_strtoul_r+0xd2>
   e2f60:	4240      	negs	r0, r0
   e2f62:	b172      	cbz	r2, e2f82 <_strtoul_r+0xf2>
   e2f64:	b106      	cbz	r6, e2f68 <_strtoul_r+0xd8>
   e2f66:	1e69      	subs	r1, r5, #1
   e2f68:	6011      	str	r1, [r2, #0]
   e2f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2f6e:	2430      	movs	r4, #48	; 0x30
   e2f70:	2b00      	cmp	r3, #0
   e2f72:	d1b9      	bne.n	e2ee8 <_strtoul_r+0x58>
   e2f74:	2308      	movs	r3, #8
   e2f76:	e7b7      	b.n	e2ee8 <_strtoul_r+0x58>
   e2f78:	230a      	movs	r3, #10
   e2f7a:	e7b5      	b.n	e2ee8 <_strtoul_r+0x58>
   e2f7c:	2c30      	cmp	r4, #48	; 0x30
   e2f7e:	d0ab      	beq.n	e2ed8 <_strtoul_r+0x48>
   e2f80:	e7b2      	b.n	e2ee8 <_strtoul_r+0x58>
   e2f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   e2f86:	bf00      	nop
   e2f88:	2003e1f0 	.word	0x2003e1f0

000e2f8c <strtoul>:
   e2f8c:	4613      	mov	r3, r2
   e2f8e:	460a      	mov	r2, r1
   e2f90:	4601      	mov	r1, r0
   e2f92:	4802      	ldr	r0, [pc, #8]	; (e2f9c <strtoul+0x10>)
   e2f94:	6800      	ldr	r0, [r0, #0]
   e2f96:	f7ff bf7b 	b.w	e2e90 <_strtoul_r>
   e2f9a:	bf00      	nop
   e2f9c:	2003e254 	.word	0x2003e254

000e2fa0 <__tzcalc_limits>:
   e2fa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e2fa4:	4604      	mov	r4, r0
   e2fa6:	f000 fd8d 	bl	e3ac4 <__gettzinfo>
   e2faa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   e2fae:	429c      	cmp	r4, r3
   e2fb0:	f340 8096 	ble.w	e30e0 <__tzcalc_limits+0x140>
   e2fb4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   e2fb8:	18e3      	adds	r3, r4, r3
   e2fba:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   e2fbe:	109b      	asrs	r3, r3, #2
   e2fc0:	f240 156d 	movw	r5, #365	; 0x16d
   e2fc4:	fb05 3502 	mla	r5, r5, r2, r3
   e2fc8:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   e2fcc:	f06f 0363 	mvn.w	r3, #99	; 0x63
   e2fd0:	fb92 f3f3 	sdiv	r3, r2, r3
   e2fd4:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   e2fd8:	442b      	add	r3, r5
   e2fda:	18a5      	adds	r5, r4, r2
   e2fdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e2fe0:	fb95 f5f2 	sdiv	r5, r5, r2
   e2fe4:	441d      	add	r5, r3
   e2fe6:	2364      	movs	r3, #100	; 0x64
   e2fe8:	fb94 f7f2 	sdiv	r7, r4, r2
   e2fec:	fb94 f6f3 	sdiv	r6, r4, r3
   e2ff0:	fb02 4717 	mls	r7, r2, r7, r4
   e2ff4:	fb03 4616 	mls	r6, r3, r6, r4
   e2ff8:	f100 0338 	add.w	r3, r0, #56	; 0x38
   e2ffc:	fab7 fe87 	clz	lr, r7
   e3000:	9301      	str	r3, [sp, #4]
   e3002:	f004 0303 	and.w	r3, r4, #3
   e3006:	6044      	str	r4, [r0, #4]
   e3008:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   e300c:	4601      	mov	r1, r0
   e300e:	9300      	str	r3, [sp, #0]
   e3010:	f04f 0c07 	mov.w	ip, #7
   e3014:	7a0b      	ldrb	r3, [r1, #8]
   e3016:	2b4a      	cmp	r3, #74	; 0x4a
   e3018:	d10e      	bne.n	e3038 <__tzcalc_limits+0x98>
   e301a:	694b      	ldr	r3, [r1, #20]
   e301c:	9a00      	ldr	r2, [sp, #0]
   e301e:	18ec      	adds	r4, r5, r3
   e3020:	b902      	cbnz	r2, e3024 <__tzcalc_limits+0x84>
   e3022:	b906      	cbnz	r6, e3026 <__tzcalc_limits+0x86>
   e3024:	b927      	cbnz	r7, e3030 <__tzcalc_limits+0x90>
   e3026:	2b3b      	cmp	r3, #59	; 0x3b
   e3028:	bfd4      	ite	le
   e302a:	2300      	movle	r3, #0
   e302c:	2301      	movgt	r3, #1
   e302e:	e000      	b.n	e3032 <__tzcalc_limits+0x92>
   e3030:	2300      	movs	r3, #0
   e3032:	4423      	add	r3, r4
   e3034:	3b01      	subs	r3, #1
   e3036:	e03f      	b.n	e30b8 <__tzcalc_limits+0x118>
   e3038:	2b44      	cmp	r3, #68	; 0x44
   e303a:	d102      	bne.n	e3042 <__tzcalc_limits+0xa2>
   e303c:	694b      	ldr	r3, [r1, #20]
   e303e:	442b      	add	r3, r5
   e3040:	e03a      	b.n	e30b8 <__tzcalc_limits+0x118>
   e3042:	9b00      	ldr	r3, [sp, #0]
   e3044:	b92b      	cbnz	r3, e3052 <__tzcalc_limits+0xb2>
   e3046:	2e00      	cmp	r6, #0
   e3048:	bf0c      	ite	eq
   e304a:	46f0      	moveq	r8, lr
   e304c:	f04f 0801 	movne.w	r8, #1
   e3050:	e000      	b.n	e3054 <__tzcalc_limits+0xb4>
   e3052:	46f0      	mov	r8, lr
   e3054:	4b24      	ldr	r3, [pc, #144]	; (e30e8 <__tzcalc_limits+0x148>)
   e3056:	68cc      	ldr	r4, [r1, #12]
   e3058:	2230      	movs	r2, #48	; 0x30
   e305a:	fb02 3808 	mla	r8, r2, r8, r3
   e305e:	f1a8 0a04 	sub.w	sl, r8, #4
   e3062:	46a9      	mov	r9, r5
   e3064:	2301      	movs	r3, #1
   e3066:	42a3      	cmp	r3, r4
   e3068:	da04      	bge.n	e3074 <__tzcalc_limits+0xd4>
   e306a:	f85a bf04 	ldr.w	fp, [sl, #4]!
   e306e:	3301      	adds	r3, #1
   e3070:	44d9      	add	r9, fp
   e3072:	e7f8      	b.n	e3066 <__tzcalc_limits+0xc6>
   e3074:	f109 0304 	add.w	r3, r9, #4
   e3078:	fb93 fbfc 	sdiv	fp, r3, ip
   e307c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   e3080:	2c01      	cmp	r4, #1
   e3082:	ebca 0a03 	rsb	sl, sl, r3
   e3086:	694b      	ldr	r3, [r1, #20]
   e3088:	bfb8      	it	lt
   e308a:	2401      	movlt	r4, #1
   e308c:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   e3090:	ebb3 0a0a 	subs.w	sl, r3, sl
   e3094:	690b      	ldr	r3, [r1, #16]
   e3096:	f104 34ff 	add.w	r4, r4, #4294967295
   e309a:	f103 33ff 	add.w	r3, r3, #4294967295
   e309e:	bf48      	it	mi
   e30a0:	f10a 0a07 	addmi.w	sl, sl, #7
   e30a4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e30a8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   e30ac:	4453      	add	r3, sl
   e30ae:	42a3      	cmp	r3, r4
   e30b0:	db01      	blt.n	e30b6 <__tzcalc_limits+0x116>
   e30b2:	3b07      	subs	r3, #7
   e30b4:	e7fb      	b.n	e30ae <__tzcalc_limits+0x10e>
   e30b6:	444b      	add	r3, r9
   e30b8:	698c      	ldr	r4, [r1, #24]
   e30ba:	4a0c      	ldr	r2, [pc, #48]	; (e30ec <__tzcalc_limits+0x14c>)
   e30bc:	fb02 4303 	mla	r3, r2, r3, r4
   e30c0:	6a0c      	ldr	r4, [r1, #32]
   e30c2:	4423      	add	r3, r4
   e30c4:	f841 3f1c 	str.w	r3, [r1, #28]!
   e30c8:	9b01      	ldr	r3, [sp, #4]
   e30ca:	4299      	cmp	r1, r3
   e30cc:	d1a2      	bne.n	e3014 <__tzcalc_limits+0x74>
   e30ce:	69c3      	ldr	r3, [r0, #28]
   e30d0:	6b82      	ldr	r2, [r0, #56]	; 0x38
   e30d2:	4293      	cmp	r3, r2
   e30d4:	bfac      	ite	ge
   e30d6:	2300      	movge	r3, #0
   e30d8:	2301      	movlt	r3, #1
   e30da:	6003      	str	r3, [r0, #0]
   e30dc:	2001      	movs	r0, #1
   e30de:	e000      	b.n	e30e2 <__tzcalc_limits+0x142>
   e30e0:	2000      	movs	r0, #0
   e30e2:	b003      	add	sp, #12
   e30e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e30e8:	000e4a0c 	.word	0x000e4a0c
   e30ec:	00015180 	.word	0x00015180

000e30f0 <__tz_lock>:
   e30f0:	4770      	bx	lr

000e30f2 <__tz_unlock>:
   e30f2:	4770      	bx	lr

000e30f4 <_tzset_unlocked>:
   e30f4:	4b01      	ldr	r3, [pc, #4]	; (e30fc <_tzset_unlocked+0x8>)
   e30f6:	6818      	ldr	r0, [r3, #0]
   e30f8:	f000 b802 	b.w	e3100 <_tzset_unlocked_r>
   e30fc:	2003e254 	.word	0x2003e254

000e3100 <_tzset_unlocked_r>:
   e3100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3104:	b08d      	sub	sp, #52	; 0x34
   e3106:	4607      	mov	r7, r0
   e3108:	f000 fcdc 	bl	e3ac4 <__gettzinfo>
   e310c:	49b0      	ldr	r1, [pc, #704]	; (e33d0 <_tzset_unlocked_r+0x2d0>)
   e310e:	4eb1      	ldr	r6, [pc, #708]	; (e33d4 <_tzset_unlocked_r+0x2d4>)
   e3110:	4604      	mov	r4, r0
   e3112:	4638      	mov	r0, r7
   e3114:	f000 fcce 	bl	e3ab4 <_getenv_r>
   e3118:	4605      	mov	r5, r0
   e311a:	b960      	cbnz	r0, e3136 <_tzset_unlocked_r+0x36>
   e311c:	4bae      	ldr	r3, [pc, #696]	; (e33d8 <_tzset_unlocked_r+0x2d8>)
   e311e:	4aaf      	ldr	r2, [pc, #700]	; (e33dc <_tzset_unlocked_r+0x2dc>)
   e3120:	6018      	str	r0, [r3, #0]
   e3122:	4baf      	ldr	r3, [pc, #700]	; (e33e0 <_tzset_unlocked_r+0x2e0>)
   e3124:	6018      	str	r0, [r3, #0]
   e3126:	4baf      	ldr	r3, [pc, #700]	; (e33e4 <_tzset_unlocked_r+0x2e4>)
   e3128:	6830      	ldr	r0, [r6, #0]
   e312a:	601a      	str	r2, [r3, #0]
   e312c:	605a      	str	r2, [r3, #4]
   e312e:	f7fb fffb 	bl	df128 <free>
   e3132:	6035      	str	r5, [r6, #0]
   e3134:	e148      	b.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e3136:	6831      	ldr	r1, [r6, #0]
   e3138:	b979      	cbnz	r1, e315a <_tzset_unlocked_r+0x5a>
   e313a:	6830      	ldr	r0, [r6, #0]
   e313c:	f7fb fff4 	bl	df128 <free>
   e3140:	4628      	mov	r0, r5
   e3142:	f7ff f858 	bl	e21f6 <strlen>
   e3146:	1c41      	adds	r1, r0, #1
   e3148:	4638      	mov	r0, r7
   e314a:	f7fc f80d 	bl	df168 <_malloc_r>
   e314e:	6030      	str	r0, [r6, #0]
   e3150:	b148      	cbz	r0, e3166 <_tzset_unlocked_r+0x66>
   e3152:	4629      	mov	r1, r5
   e3154:	f7ff f82c 	bl	e21b0 <strcpy>
   e3158:	e005      	b.n	e3166 <_tzset_unlocked_r+0x66>
   e315a:	f7ff f81f 	bl	e219c <strcmp>
   e315e:	2800      	cmp	r0, #0
   e3160:	f000 8132 	beq.w	e33c8 <_tzset_unlocked_r+0x2c8>
   e3164:	e7e9      	b.n	e313a <_tzset_unlocked_r+0x3a>
   e3166:	782b      	ldrb	r3, [r5, #0]
   e3168:	4a9f      	ldr	r2, [pc, #636]	; (e33e8 <_tzset_unlocked_r+0x2e8>)
   e316a:	49a0      	ldr	r1, [pc, #640]	; (e33ec <_tzset_unlocked_r+0x2ec>)
   e316c:	2b3a      	cmp	r3, #58	; 0x3a
   e316e:	bf08      	it	eq
   e3170:	3501      	addeq	r5, #1
   e3172:	ae0a      	add	r6, sp, #40	; 0x28
   e3174:	4633      	mov	r3, r6
   e3176:	4628      	mov	r0, r5
   e3178:	f7fb ffe6 	bl	df148 <siscanf>
   e317c:	2800      	cmp	r0, #0
   e317e:	f340 8123 	ble.w	e33c8 <_tzset_unlocked_r+0x2c8>
   e3182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3184:	18ef      	adds	r7, r5, r3
   e3186:	5ceb      	ldrb	r3, [r5, r3]
   e3188:	2b2d      	cmp	r3, #45	; 0x2d
   e318a:	d103      	bne.n	e3194 <_tzset_unlocked_r+0x94>
   e318c:	3701      	adds	r7, #1
   e318e:	f04f 35ff 	mov.w	r5, #4294967295
   e3192:	e003      	b.n	e319c <_tzset_unlocked_r+0x9c>
   e3194:	2b2b      	cmp	r3, #43	; 0x2b
   e3196:	bf08      	it	eq
   e3198:	3701      	addeq	r7, #1
   e319a:	2501      	movs	r5, #1
   e319c:	f10d 0a20 	add.w	sl, sp, #32
   e31a0:	f10d 0b1e 	add.w	fp, sp, #30
   e31a4:	f04f 0800 	mov.w	r8, #0
   e31a8:	9603      	str	r6, [sp, #12]
   e31aa:	f8cd a008 	str.w	sl, [sp, #8]
   e31ae:	9601      	str	r6, [sp, #4]
   e31b0:	f8cd b000 	str.w	fp, [sp]
   e31b4:	4633      	mov	r3, r6
   e31b6:	aa07      	add	r2, sp, #28
   e31b8:	498d      	ldr	r1, [pc, #564]	; (e33f0 <_tzset_unlocked_r+0x2f0>)
   e31ba:	f8ad 801e 	strh.w	r8, [sp, #30]
   e31be:	4638      	mov	r0, r7
   e31c0:	f8ad 8020 	strh.w	r8, [sp, #32]
   e31c4:	f7fb ffc0 	bl	df148 <siscanf>
   e31c8:	4540      	cmp	r0, r8
   e31ca:	f340 80fd 	ble.w	e33c8 <_tzset_unlocked_r+0x2c8>
   e31ce:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e31d2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e31d6:	f8df 9224 	ldr.w	r9, [pc, #548]	; e33fc <_tzset_unlocked_r+0x2fc>
   e31da:	213c      	movs	r1, #60	; 0x3c
   e31dc:	fb01 3302 	mla	r3, r1, r2, r3
   e31e0:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e31e4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e31e8:	fb01 3302 	mla	r3, r1, r2, r3
   e31ec:	435d      	muls	r5, r3
   e31ee:	6225      	str	r5, [r4, #32]
   e31f0:	4d7c      	ldr	r5, [pc, #496]	; (e33e4 <_tzset_unlocked_r+0x2e4>)
   e31f2:	4b7d      	ldr	r3, [pc, #500]	; (e33e8 <_tzset_unlocked_r+0x2e8>)
   e31f4:	602b      	str	r3, [r5, #0]
   e31f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e31f8:	497c      	ldr	r1, [pc, #496]	; (e33ec <_tzset_unlocked_r+0x2ec>)
   e31fa:	441f      	add	r7, r3
   e31fc:	464a      	mov	r2, r9
   e31fe:	4633      	mov	r3, r6
   e3200:	4638      	mov	r0, r7
   e3202:	f7fb ffa1 	bl	df148 <siscanf>
   e3206:	4540      	cmp	r0, r8
   e3208:	dc08      	bgt.n	e321c <_tzset_unlocked_r+0x11c>
   e320a:	682b      	ldr	r3, [r5, #0]
   e320c:	606b      	str	r3, [r5, #4]
   e320e:	4b72      	ldr	r3, [pc, #456]	; (e33d8 <_tzset_unlocked_r+0x2d8>)
   e3210:	6a22      	ldr	r2, [r4, #32]
   e3212:	601a      	str	r2, [r3, #0]
   e3214:	4b72      	ldr	r3, [pc, #456]	; (e33e0 <_tzset_unlocked_r+0x2e0>)
   e3216:	f8c3 8000 	str.w	r8, [r3]
   e321a:	e0d5      	b.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e321c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e321e:	f8c5 9004 	str.w	r9, [r5, #4]
   e3222:	18fd      	adds	r5, r7, r3
   e3224:	5cfb      	ldrb	r3, [r7, r3]
   e3226:	2b2d      	cmp	r3, #45	; 0x2d
   e3228:	d103      	bne.n	e3232 <_tzset_unlocked_r+0x132>
   e322a:	3501      	adds	r5, #1
   e322c:	f04f 37ff 	mov.w	r7, #4294967295
   e3230:	e003      	b.n	e323a <_tzset_unlocked_r+0x13a>
   e3232:	2b2b      	cmp	r3, #43	; 0x2b
   e3234:	bf08      	it	eq
   e3236:	3501      	addeq	r5, #1
   e3238:	2701      	movs	r7, #1
   e323a:	2300      	movs	r3, #0
   e323c:	f8ad 301c 	strh.w	r3, [sp, #28]
   e3240:	f8ad 301e 	strh.w	r3, [sp, #30]
   e3244:	f8ad 3020 	strh.w	r3, [sp, #32]
   e3248:	930a      	str	r3, [sp, #40]	; 0x28
   e324a:	9603      	str	r6, [sp, #12]
   e324c:	f8cd a008 	str.w	sl, [sp, #8]
   e3250:	9601      	str	r6, [sp, #4]
   e3252:	f8cd b000 	str.w	fp, [sp]
   e3256:	4633      	mov	r3, r6
   e3258:	aa07      	add	r2, sp, #28
   e325a:	4965      	ldr	r1, [pc, #404]	; (e33f0 <_tzset_unlocked_r+0x2f0>)
   e325c:	4628      	mov	r0, r5
   e325e:	f7fb ff73 	bl	df148 <siscanf>
   e3262:	2800      	cmp	r0, #0
   e3264:	dc04      	bgt.n	e3270 <_tzset_unlocked_r+0x170>
   e3266:	6a23      	ldr	r3, [r4, #32]
   e3268:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   e326c:	63e3      	str	r3, [r4, #60]	; 0x3c
   e326e:	e00e      	b.n	e328e <_tzset_unlocked_r+0x18e>
   e3270:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3274:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3278:	213c      	movs	r1, #60	; 0x3c
   e327a:	fb01 3302 	mla	r3, r1, r2, r3
   e327e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3282:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3286:	fb01 3302 	mla	r3, r1, r2, r3
   e328a:	435f      	muls	r7, r3
   e328c:	63e7      	str	r7, [r4, #60]	; 0x3c
   e328e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e3290:	4627      	mov	r7, r4
   e3292:	441d      	add	r5, r3
   e3294:	f04f 0900 	mov.w	r9, #0
   e3298:	782b      	ldrb	r3, [r5, #0]
   e329a:	2b2c      	cmp	r3, #44	; 0x2c
   e329c:	bf08      	it	eq
   e329e:	3501      	addeq	r5, #1
   e32a0:	f895 8000 	ldrb.w	r8, [r5]
   e32a4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   e32a8:	d126      	bne.n	e32f8 <_tzset_unlocked_r+0x1f8>
   e32aa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   e32ae:	9302      	str	r3, [sp, #8]
   e32b0:	ab09      	add	r3, sp, #36	; 0x24
   e32b2:	9300      	str	r3, [sp, #0]
   e32b4:	9603      	str	r6, [sp, #12]
   e32b6:	9601      	str	r6, [sp, #4]
   e32b8:	4633      	mov	r3, r6
   e32ba:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   e32be:	494d      	ldr	r1, [pc, #308]	; (e33f4 <_tzset_unlocked_r+0x2f4>)
   e32c0:	4628      	mov	r0, r5
   e32c2:	f7fb ff41 	bl	df148 <siscanf>
   e32c6:	2803      	cmp	r0, #3
   e32c8:	d17e      	bne.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e32ca:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   e32ce:	1e4b      	subs	r3, r1, #1
   e32d0:	2b0b      	cmp	r3, #11
   e32d2:	d879      	bhi.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e32d4:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   e32d8:	1e53      	subs	r3, r2, #1
   e32da:	2b04      	cmp	r3, #4
   e32dc:	d874      	bhi.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e32de:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   e32e2:	2b06      	cmp	r3, #6
   e32e4:	d870      	bhi.n	e33c8 <_tzset_unlocked_r+0x2c8>
   e32e6:	f887 8008 	strb.w	r8, [r7, #8]
   e32ea:	60f9      	str	r1, [r7, #12]
   e32ec:	613a      	str	r2, [r7, #16]
   e32ee:	617b      	str	r3, [r7, #20]
   e32f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   e32f2:	eb05 0803 	add.w	r8, r5, r3
   e32f6:	e02a      	b.n	e334e <_tzset_unlocked_r+0x24e>
   e32f8:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   e32fc:	bf06      	itte	eq
   e32fe:	3501      	addeq	r5, #1
   e3300:	4643      	moveq	r3, r8
   e3302:	2344      	movne	r3, #68	; 0x44
   e3304:	220a      	movs	r2, #10
   e3306:	a90b      	add	r1, sp, #44	; 0x2c
   e3308:	4628      	mov	r0, r5
   e330a:	9305      	str	r3, [sp, #20]
   e330c:	f7ff fe3e 	bl	e2f8c <strtoul>
   e3310:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   e3314:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   e3318:	4545      	cmp	r5, r8
   e331a:	9b05      	ldr	r3, [sp, #20]
   e331c:	d114      	bne.n	e3348 <_tzset_unlocked_r+0x248>
   e331e:	234d      	movs	r3, #77	; 0x4d
   e3320:	f1b9 0f00 	cmp.w	r9, #0
   e3324:	d107      	bne.n	e3336 <_tzset_unlocked_r+0x236>
   e3326:	7223      	strb	r3, [r4, #8]
   e3328:	2303      	movs	r3, #3
   e332a:	60e3      	str	r3, [r4, #12]
   e332c:	2302      	movs	r3, #2
   e332e:	6123      	str	r3, [r4, #16]
   e3330:	f8c4 9014 	str.w	r9, [r4, #20]
   e3334:	e00b      	b.n	e334e <_tzset_unlocked_r+0x24e>
   e3336:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   e333a:	230b      	movs	r3, #11
   e333c:	62a3      	str	r3, [r4, #40]	; 0x28
   e333e:	2301      	movs	r3, #1
   e3340:	62e3      	str	r3, [r4, #44]	; 0x2c
   e3342:	2300      	movs	r3, #0
   e3344:	6323      	str	r3, [r4, #48]	; 0x30
   e3346:	e002      	b.n	e334e <_tzset_unlocked_r+0x24e>
   e3348:	b280      	uxth	r0, r0
   e334a:	723b      	strb	r3, [r7, #8]
   e334c:	6178      	str	r0, [r7, #20]
   e334e:	2302      	movs	r3, #2
   e3350:	f8ad 301c 	strh.w	r3, [sp, #28]
   e3354:	2300      	movs	r3, #0
   e3356:	f8ad 301e 	strh.w	r3, [sp, #30]
   e335a:	f8ad 3020 	strh.w	r3, [sp, #32]
   e335e:	930a      	str	r3, [sp, #40]	; 0x28
   e3360:	f898 3000 	ldrb.w	r3, [r8]
   e3364:	2b2f      	cmp	r3, #47	; 0x2f
   e3366:	d10b      	bne.n	e3380 <_tzset_unlocked_r+0x280>
   e3368:	9603      	str	r6, [sp, #12]
   e336a:	f8cd a008 	str.w	sl, [sp, #8]
   e336e:	9601      	str	r6, [sp, #4]
   e3370:	f8cd b000 	str.w	fp, [sp]
   e3374:	4633      	mov	r3, r6
   e3376:	aa07      	add	r2, sp, #28
   e3378:	491f      	ldr	r1, [pc, #124]	; (e33f8 <_tzset_unlocked_r+0x2f8>)
   e337a:	4640      	mov	r0, r8
   e337c:	f7fb fee4 	bl	df148 <siscanf>
   e3380:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   e3384:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   e3388:	213c      	movs	r1, #60	; 0x3c
   e338a:	fb01 3302 	mla	r3, r1, r2, r3
   e338e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   e3392:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   e3396:	fb01 3302 	mla	r3, r1, r2, r3
   e339a:	61bb      	str	r3, [r7, #24]
   e339c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   e339e:	f109 0901 	add.w	r9, r9, #1
   e33a2:	f1b9 0f02 	cmp.w	r9, #2
   e33a6:	4445      	add	r5, r8
   e33a8:	f107 071c 	add.w	r7, r7, #28
   e33ac:	f47f af74 	bne.w	e3298 <_tzset_unlocked_r+0x198>
   e33b0:	6860      	ldr	r0, [r4, #4]
   e33b2:	f7ff fdf5 	bl	e2fa0 <__tzcalc_limits>
   e33b6:	4b08      	ldr	r3, [pc, #32]	; (e33d8 <_tzset_unlocked_r+0x2d8>)
   e33b8:	6a22      	ldr	r2, [r4, #32]
   e33ba:	601a      	str	r2, [r3, #0]
   e33bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   e33be:	1a9b      	subs	r3, r3, r2
   e33c0:	4a07      	ldr	r2, [pc, #28]	; (e33e0 <_tzset_unlocked_r+0x2e0>)
   e33c2:	bf18      	it	ne
   e33c4:	2301      	movne	r3, #1
   e33c6:	6013      	str	r3, [r2, #0]
   e33c8:	b00d      	add	sp, #52	; 0x34
   e33ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e33ce:	bf00      	nop
   e33d0:	000e4ac8 	.word	0x000e4ac8
   e33d4:	2003e7e0 	.word	0x2003e7e0
   e33d8:	2003e7e8 	.word	0x2003e7e8
   e33dc:	000e4acb 	.word	0x000e4acb
   e33e0:	2003e7e4 	.word	0x2003e7e4
   e33e4:	2003e290 	.word	0x2003e290
   e33e8:	2003e7d3 	.word	0x2003e7d3
   e33ec:	000e4acf 	.word	0x000e4acf
   e33f0:	000e4af2 	.word	0x000e4af2
   e33f4:	000e4ade 	.word	0x000e4ade
   e33f8:	000e4af1 	.word	0x000e4af1
   e33fc:	2003e7c8 	.word	0x2003e7c8

000e3400 <rshift>:
   e3400:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3402:	6906      	ldr	r6, [r0, #16]
   e3404:	114b      	asrs	r3, r1, #5
   e3406:	42b3      	cmp	r3, r6
   e3408:	f100 0514 	add.w	r5, r0, #20
   e340c:	da27      	bge.n	e345e <rshift+0x5e>
   e340e:	f011 011f 	ands.w	r1, r1, #31
   e3412:	eb05 0686 	add.w	r6, r5, r6, lsl #2
   e3416:	eb05 0283 	add.w	r2, r5, r3, lsl #2
   e341a:	d101      	bne.n	e3420 <rshift+0x20>
   e341c:	4629      	mov	r1, r5
   e341e:	e016      	b.n	e344e <rshift+0x4e>
   e3420:	1d14      	adds	r4, r2, #4
   e3422:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
   e3426:	f1c1 0e20 	rsb	lr, r1, #32
   e342a:	40ca      	lsrs	r2, r1
   e342c:	462b      	mov	r3, r5
   e342e:	42b4      	cmp	r4, r6
   e3430:	d209      	bcs.n	e3446 <rshift+0x46>
   e3432:	6827      	ldr	r7, [r4, #0]
   e3434:	fa07 f70e 	lsl.w	r7, r7, lr
   e3438:	433a      	orrs	r2, r7
   e343a:	f843 2b04 	str.w	r2, [r3], #4
   e343e:	f854 2b04 	ldr.w	r2, [r4], #4
   e3442:	40ca      	lsrs	r2, r1
   e3444:	e7f3      	b.n	e342e <rshift+0x2e>
   e3446:	601a      	str	r2, [r3, #0]
   e3448:	b152      	cbz	r2, e3460 <rshift+0x60>
   e344a:	3304      	adds	r3, #4
   e344c:	e008      	b.n	e3460 <rshift+0x60>
   e344e:	42b2      	cmp	r2, r6
   e3450:	460b      	mov	r3, r1
   e3452:	d205      	bcs.n	e3460 <rshift+0x60>
   e3454:	f852 3b04 	ldr.w	r3, [r2], #4
   e3458:	f841 3b04 	str.w	r3, [r1], #4
   e345c:	e7f7      	b.n	e344e <rshift+0x4e>
   e345e:	462b      	mov	r3, r5
   e3460:	1b5b      	subs	r3, r3, r5
   e3462:	109b      	asrs	r3, r3, #2
   e3464:	6103      	str	r3, [r0, #16]
   e3466:	b903      	cbnz	r3, e346a <rshift+0x6a>
   e3468:	6143      	str	r3, [r0, #20]
   e346a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000e346c <__hexdig_fun>:
   e346c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   e3470:	2b09      	cmp	r3, #9
   e3472:	d801      	bhi.n	e3478 <__hexdig_fun+0xc>
   e3474:	3820      	subs	r0, #32
   e3476:	e00a      	b.n	e348e <__hexdig_fun+0x22>
   e3478:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   e347c:	2b05      	cmp	r3, #5
   e347e:	d801      	bhi.n	e3484 <__hexdig_fun+0x18>
   e3480:	3847      	subs	r0, #71	; 0x47
   e3482:	e004      	b.n	e348e <__hexdig_fun+0x22>
   e3484:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   e3488:	2b05      	cmp	r3, #5
   e348a:	d802      	bhi.n	e3492 <__hexdig_fun+0x26>
   e348c:	3827      	subs	r0, #39	; 0x27
   e348e:	b2c0      	uxtb	r0, r0
   e3490:	4770      	bx	lr
   e3492:	2000      	movs	r0, #0
   e3494:	4770      	bx	lr

000e3496 <__gethex>:
   e3496:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e349a:	b08b      	sub	sp, #44	; 0x2c
   e349c:	468a      	mov	sl, r1
   e349e:	4690      	mov	r8, r2
   e34a0:	9306      	str	r3, [sp, #24]
   e34a2:	9002      	str	r0, [sp, #8]
   e34a4:	f7fe fe2c 	bl	e2100 <_localeconv_r>
   e34a8:	6803      	ldr	r3, [r0, #0]
   e34aa:	9303      	str	r3, [sp, #12]
   e34ac:	4618      	mov	r0, r3
   e34ae:	f7fe fea2 	bl	e21f6 <strlen>
   e34b2:	9b03      	ldr	r3, [sp, #12]
   e34b4:	9001      	str	r0, [sp, #4]
   e34b6:	4403      	add	r3, r0
   e34b8:	f04f 0b00 	mov.w	fp, #0
   e34bc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   e34c0:	9307      	str	r3, [sp, #28]
   e34c2:	f8da 3000 	ldr.w	r3, [sl]
   e34c6:	3302      	adds	r3, #2
   e34c8:	461f      	mov	r7, r3
   e34ca:	f813 0b01 	ldrb.w	r0, [r3], #1
   e34ce:	2830      	cmp	r0, #48	; 0x30
   e34d0:	d102      	bne.n	e34d8 <__gethex+0x42>
   e34d2:	f10b 0b01 	add.w	fp, fp, #1
   e34d6:	e7f7      	b.n	e34c8 <__gethex+0x32>
   e34d8:	f7ff ffc8 	bl	e346c <__hexdig_fun>
   e34dc:	4604      	mov	r4, r0
   e34de:	b9e0      	cbnz	r0, e351a <__gethex+0x84>
   e34e0:	9a01      	ldr	r2, [sp, #4]
   e34e2:	9903      	ldr	r1, [sp, #12]
   e34e4:	4638      	mov	r0, r7
   e34e6:	f7fe fe8e 	bl	e2206 <strncmp>
   e34ea:	2800      	cmp	r0, #0
   e34ec:	d134      	bne.n	e3558 <__gethex+0xc2>
   e34ee:	9b01      	ldr	r3, [sp, #4]
   e34f0:	5cf8      	ldrb	r0, [r7, r3]
   e34f2:	18fe      	adds	r6, r7, r3
   e34f4:	f7ff ffba 	bl	e346c <__hexdig_fun>
   e34f8:	b380      	cbz	r0, e355c <__gethex+0xc6>
   e34fa:	4633      	mov	r3, r6
   e34fc:	7818      	ldrb	r0, [r3, #0]
   e34fe:	2830      	cmp	r0, #48	; 0x30
   e3500:	461f      	mov	r7, r3
   e3502:	f103 0301 	add.w	r3, r3, #1
   e3506:	d0f9      	beq.n	e34fc <__gethex+0x66>
   e3508:	f7ff ffb0 	bl	e346c <__hexdig_fun>
   e350c:	fab0 f580 	clz	r5, r0
   e3510:	096d      	lsrs	r5, r5, #5
   e3512:	4634      	mov	r4, r6
   e3514:	f04f 0b01 	mov.w	fp, #1
   e3518:	e001      	b.n	e351e <__gethex+0x88>
   e351a:	2500      	movs	r5, #0
   e351c:	462c      	mov	r4, r5
   e351e:	463a      	mov	r2, r7
   e3520:	4616      	mov	r6, r2
   e3522:	3201      	adds	r2, #1
   e3524:	7830      	ldrb	r0, [r6, #0]
   e3526:	f7ff ffa1 	bl	e346c <__hexdig_fun>
   e352a:	2800      	cmp	r0, #0
   e352c:	d1f8      	bne.n	e3520 <__gethex+0x8a>
   e352e:	9a01      	ldr	r2, [sp, #4]
   e3530:	9903      	ldr	r1, [sp, #12]
   e3532:	4630      	mov	r0, r6
   e3534:	f7fe fe67 	bl	e2206 <strncmp>
   e3538:	b950      	cbnz	r0, e3550 <__gethex+0xba>
   e353a:	b954      	cbnz	r4, e3552 <__gethex+0xbc>
   e353c:	9b01      	ldr	r3, [sp, #4]
   e353e:	18f4      	adds	r4, r6, r3
   e3540:	4622      	mov	r2, r4
   e3542:	4616      	mov	r6, r2
   e3544:	3201      	adds	r2, #1
   e3546:	7830      	ldrb	r0, [r6, #0]
   e3548:	f7ff ff90 	bl	e346c <__hexdig_fun>
   e354c:	2800      	cmp	r0, #0
   e354e:	d1f8      	bne.n	e3542 <__gethex+0xac>
   e3550:	b134      	cbz	r4, e3560 <__gethex+0xca>
   e3552:	1ba4      	subs	r4, r4, r6
   e3554:	00a4      	lsls	r4, r4, #2
   e3556:	e003      	b.n	e3560 <__gethex+0xca>
   e3558:	463e      	mov	r6, r7
   e355a:	e000      	b.n	e355e <__gethex+0xc8>
   e355c:	4604      	mov	r4, r0
   e355e:	2501      	movs	r5, #1
   e3560:	7833      	ldrb	r3, [r6, #0]
   e3562:	2b50      	cmp	r3, #80	; 0x50
   e3564:	d001      	beq.n	e356a <__gethex+0xd4>
   e3566:	2b70      	cmp	r3, #112	; 0x70
   e3568:	d12a      	bne.n	e35c0 <__gethex+0x12a>
   e356a:	7873      	ldrb	r3, [r6, #1]
   e356c:	2b2b      	cmp	r3, #43	; 0x2b
   e356e:	d008      	beq.n	e3582 <__gethex+0xec>
   e3570:	2b2d      	cmp	r3, #45	; 0x2d
   e3572:	d003      	beq.n	e357c <__gethex+0xe6>
   e3574:	1c71      	adds	r1, r6, #1
   e3576:	f04f 0900 	mov.w	r9, #0
   e357a:	e005      	b.n	e3588 <__gethex+0xf2>
   e357c:	f04f 0901 	mov.w	r9, #1
   e3580:	e001      	b.n	e3586 <__gethex+0xf0>
   e3582:	f04f 0900 	mov.w	r9, #0
   e3586:	1cb1      	adds	r1, r6, #2
   e3588:	7808      	ldrb	r0, [r1, #0]
   e358a:	f7ff ff6f 	bl	e346c <__hexdig_fun>
   e358e:	1e43      	subs	r3, r0, #1
   e3590:	b2db      	uxtb	r3, r3
   e3592:	2b18      	cmp	r3, #24
   e3594:	d814      	bhi.n	e35c0 <__gethex+0x12a>
   e3596:	f1a0 0210 	sub.w	r2, r0, #16
   e359a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   e359e:	f7ff ff65 	bl	e346c <__hexdig_fun>
   e35a2:	1e43      	subs	r3, r0, #1
   e35a4:	b2db      	uxtb	r3, r3
   e35a6:	2b18      	cmp	r3, #24
   e35a8:	d804      	bhi.n	e35b4 <__gethex+0x11e>
   e35aa:	230a      	movs	r3, #10
   e35ac:	fb03 0202 	mla	r2, r3, r2, r0
   e35b0:	3a10      	subs	r2, #16
   e35b2:	e7f2      	b.n	e359a <__gethex+0x104>
   e35b4:	f1b9 0f00 	cmp.w	r9, #0
   e35b8:	d000      	beq.n	e35bc <__gethex+0x126>
   e35ba:	4252      	negs	r2, r2
   e35bc:	4414      	add	r4, r2
   e35be:	e000      	b.n	e35c2 <__gethex+0x12c>
   e35c0:	4631      	mov	r1, r6
   e35c2:	f8ca 1000 	str.w	r1, [sl]
   e35c6:	b12d      	cbz	r5, e35d4 <__gethex+0x13e>
   e35c8:	f1bb 0f00 	cmp.w	fp, #0
   e35cc:	bf14      	ite	ne
   e35ce:	2000      	movne	r0, #0
   e35d0:	2006      	moveq	r0, #6
   e35d2:	e17c      	b.n	e38ce <__gethex+0x438>
   e35d4:	1bf3      	subs	r3, r6, r7
   e35d6:	3b01      	subs	r3, #1
   e35d8:	4629      	mov	r1, r5
   e35da:	2b07      	cmp	r3, #7
   e35dc:	dd02      	ble.n	e35e4 <__gethex+0x14e>
   e35de:	3101      	adds	r1, #1
   e35e0:	105b      	asrs	r3, r3, #1
   e35e2:	e7fa      	b.n	e35da <__gethex+0x144>
   e35e4:	9802      	ldr	r0, [sp, #8]
   e35e6:	f000 fb09 	bl	e3bfc <_Balloc>
   e35ea:	9b01      	ldr	r3, [sp, #4]
   e35ec:	f100 0a14 	add.w	sl, r0, #20
   e35f0:	f04f 0900 	mov.w	r9, #0
   e35f4:	f1c3 0301 	rsb	r3, r3, #1
   e35f8:	4605      	mov	r5, r0
   e35fa:	f8cd a010 	str.w	sl, [sp, #16]
   e35fe:	46cb      	mov	fp, r9
   e3600:	9308      	str	r3, [sp, #32]
   e3602:	42b7      	cmp	r7, r6
   e3604:	d22f      	bcs.n	e3666 <__gethex+0x1d0>
   e3606:	1e73      	subs	r3, r6, #1
   e3608:	9305      	str	r3, [sp, #20]
   e360a:	9a07      	ldr	r2, [sp, #28]
   e360c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   e3610:	4293      	cmp	r3, r2
   e3612:	d00b      	beq.n	e362c <__gethex+0x196>
   e3614:	f1bb 0f20 	cmp.w	fp, #32
   e3618:	d116      	bne.n	e3648 <__gethex+0x1b2>
   e361a:	9b04      	ldr	r3, [sp, #16]
   e361c:	f8c3 9000 	str.w	r9, [r3]
   e3620:	3304      	adds	r3, #4
   e3622:	f04f 0900 	mov.w	r9, #0
   e3626:	9304      	str	r3, [sp, #16]
   e3628:	46cb      	mov	fp, r9
   e362a:	e00d      	b.n	e3648 <__gethex+0x1b2>
   e362c:	9b05      	ldr	r3, [sp, #20]
   e362e:	9a08      	ldr	r2, [sp, #32]
   e3630:	4413      	add	r3, r2
   e3632:	429f      	cmp	r7, r3
   e3634:	d8ee      	bhi.n	e3614 <__gethex+0x17e>
   e3636:	4618      	mov	r0, r3
   e3638:	9a01      	ldr	r2, [sp, #4]
   e363a:	9903      	ldr	r1, [sp, #12]
   e363c:	9309      	str	r3, [sp, #36]	; 0x24
   e363e:	f7fe fde2 	bl	e2206 <strncmp>
   e3642:	9b09      	ldr	r3, [sp, #36]	; 0x24
   e3644:	b168      	cbz	r0, e3662 <__gethex+0x1cc>
   e3646:	e7e5      	b.n	e3614 <__gethex+0x17e>
   e3648:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   e364c:	f7ff ff0e 	bl	e346c <__hexdig_fun>
   e3650:	f000 000f 	and.w	r0, r0, #15
   e3654:	fa00 f00b 	lsl.w	r0, r0, fp
   e3658:	9b05      	ldr	r3, [sp, #20]
   e365a:	ea49 0900 	orr.w	r9, r9, r0
   e365e:	f10b 0b04 	add.w	fp, fp, #4
   e3662:	461e      	mov	r6, r3
   e3664:	e7cd      	b.n	e3602 <__gethex+0x16c>
   e3666:	9804      	ldr	r0, [sp, #16]
   e3668:	f840 9b04 	str.w	r9, [r0], #4
   e366c:	ebca 0000 	rsb	r0, sl, r0
   e3670:	1080      	asrs	r0, r0, #2
   e3672:	6128      	str	r0, [r5, #16]
   e3674:	0147      	lsls	r7, r0, #5
   e3676:	4648      	mov	r0, r9
   e3678:	f000 fb85 	bl	e3d86 <__hi0bits>
   e367c:	f8d8 6000 	ldr.w	r6, [r8]
   e3680:	1a38      	subs	r0, r7, r0
   e3682:	42b0      	cmp	r0, r6
   e3684:	dd26      	ble.n	e36d4 <__gethex+0x23e>
   e3686:	1b87      	subs	r7, r0, r6
   e3688:	4639      	mov	r1, r7
   e368a:	4628      	mov	r0, r5
   e368c:	f000 fe83 	bl	e4396 <__any_on>
   e3690:	b1c8      	cbz	r0, e36c6 <__gethex+0x230>
   e3692:	1e7b      	subs	r3, r7, #1
   e3694:	1159      	asrs	r1, r3, #5
   e3696:	f003 021f 	and.w	r2, r3, #31
   e369a:	f04f 0901 	mov.w	r9, #1
   e369e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
   e36a2:	fa09 f202 	lsl.w	r2, r9, r2
   e36a6:	420a      	tst	r2, r1
   e36a8:	d00e      	beq.n	e36c8 <__gethex+0x232>
   e36aa:	454b      	cmp	r3, r9
   e36ac:	dc02      	bgt.n	e36b4 <__gethex+0x21e>
   e36ae:	f04f 0902 	mov.w	r9, #2
   e36b2:	e009      	b.n	e36c8 <__gethex+0x232>
   e36b4:	1eb9      	subs	r1, r7, #2
   e36b6:	4628      	mov	r0, r5
   e36b8:	f000 fe6d 	bl	e4396 <__any_on>
   e36bc:	2800      	cmp	r0, #0
   e36be:	d0f6      	beq.n	e36ae <__gethex+0x218>
   e36c0:	f04f 0903 	mov.w	r9, #3
   e36c4:	e000      	b.n	e36c8 <__gethex+0x232>
   e36c6:	4681      	mov	r9, r0
   e36c8:	4639      	mov	r1, r7
   e36ca:	4628      	mov	r0, r5
   e36cc:	f7ff fe98 	bl	e3400 <rshift>
   e36d0:	443c      	add	r4, r7
   e36d2:	e00c      	b.n	e36ee <__gethex+0x258>
   e36d4:	da09      	bge.n	e36ea <__gethex+0x254>
   e36d6:	1a37      	subs	r7, r6, r0
   e36d8:	4629      	mov	r1, r5
   e36da:	463a      	mov	r2, r7
   e36dc:	9802      	ldr	r0, [sp, #8]
   e36de:	f000 fc87 	bl	e3ff0 <__lshift>
   e36e2:	1be4      	subs	r4, r4, r7
   e36e4:	4605      	mov	r5, r0
   e36e6:	f100 0a14 	add.w	sl, r0, #20
   e36ea:	f04f 0900 	mov.w	r9, #0
   e36ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e36f2:	429c      	cmp	r4, r3
   e36f4:	dd08      	ble.n	e3708 <__gethex+0x272>
   e36f6:	9802      	ldr	r0, [sp, #8]
   e36f8:	4629      	mov	r1, r5
   e36fa:	f000 fab4 	bl	e3c66 <_Bfree>
   e36fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e3700:	2300      	movs	r3, #0
   e3702:	6013      	str	r3, [r2, #0]
   e3704:	20a3      	movs	r0, #163	; 0xa3
   e3706:	e0e2      	b.n	e38ce <__gethex+0x438>
   e3708:	f8d8 0004 	ldr.w	r0, [r8, #4]
   e370c:	4284      	cmp	r4, r0
   e370e:	da53      	bge.n	e37b8 <__gethex+0x322>
   e3710:	1b04      	subs	r4, r0, r4
   e3712:	42a6      	cmp	r6, r4
   e3714:	dc2e      	bgt.n	e3774 <__gethex+0x2de>
   e3716:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e371a:	2b02      	cmp	r3, #2
   e371c:	d01a      	beq.n	e3754 <__gethex+0x2be>
   e371e:	2b03      	cmp	r3, #3
   e3720:	d01c      	beq.n	e375c <__gethex+0x2c6>
   e3722:	2b01      	cmp	r3, #1
   e3724:	d11d      	bne.n	e3762 <__gethex+0x2cc>
   e3726:	42a6      	cmp	r6, r4
   e3728:	d11b      	bne.n	e3762 <__gethex+0x2cc>
   e372a:	2e01      	cmp	r6, #1
   e372c:	dc0b      	bgt.n	e3746 <__gethex+0x2b0>
   e372e:	9a06      	ldr	r2, [sp, #24]
   e3730:	f8d8 3004 	ldr.w	r3, [r8, #4]
   e3734:	6013      	str	r3, [r2, #0]
   e3736:	2301      	movs	r3, #1
   e3738:	612b      	str	r3, [r5, #16]
   e373a:	f8ca 3000 	str.w	r3, [sl]
   e373e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e3740:	2062      	movs	r0, #98	; 0x62
   e3742:	601d      	str	r5, [r3, #0]
   e3744:	e0c3      	b.n	e38ce <__gethex+0x438>
   e3746:	1e71      	subs	r1, r6, #1
   e3748:	4628      	mov	r0, r5
   e374a:	f000 fe24 	bl	e4396 <__any_on>
   e374e:	2800      	cmp	r0, #0
   e3750:	d1ed      	bne.n	e372e <__gethex+0x298>
   e3752:	e006      	b.n	e3762 <__gethex+0x2cc>
   e3754:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e3756:	2b00      	cmp	r3, #0
   e3758:	d0e9      	beq.n	e372e <__gethex+0x298>
   e375a:	e002      	b.n	e3762 <__gethex+0x2cc>
   e375c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e375e:	2b00      	cmp	r3, #0
   e3760:	d1e5      	bne.n	e372e <__gethex+0x298>
   e3762:	9802      	ldr	r0, [sp, #8]
   e3764:	4629      	mov	r1, r5
   e3766:	f000 fa7e 	bl	e3c66 <_Bfree>
   e376a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   e376c:	2300      	movs	r3, #0
   e376e:	6013      	str	r3, [r2, #0]
   e3770:	2050      	movs	r0, #80	; 0x50
   e3772:	e0ac      	b.n	e38ce <__gethex+0x438>
   e3774:	1e67      	subs	r7, r4, #1
   e3776:	f1b9 0f00 	cmp.w	r9, #0
   e377a:	d106      	bne.n	e378a <__gethex+0x2f4>
   e377c:	b13f      	cbz	r7, e378e <__gethex+0x2f8>
   e377e:	4639      	mov	r1, r7
   e3780:	4628      	mov	r0, r5
   e3782:	f000 fe08 	bl	e4396 <__any_on>
   e3786:	4681      	mov	r9, r0
   e3788:	e001      	b.n	e378e <__gethex+0x2f8>
   e378a:	f04f 0901 	mov.w	r9, #1
   e378e:	117a      	asrs	r2, r7, #5
   e3790:	2301      	movs	r3, #1
   e3792:	f007 071f 	and.w	r7, r7, #31
   e3796:	fa03 f707 	lsl.w	r7, r3, r7
   e379a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
   e379e:	4621      	mov	r1, r4
   e37a0:	421f      	tst	r7, r3
   e37a2:	4628      	mov	r0, r5
   e37a4:	bf18      	it	ne
   e37a6:	f049 0902 	orrne.w	r9, r9, #2
   e37aa:	1b36      	subs	r6, r6, r4
   e37ac:	f7ff fe28 	bl	e3400 <rshift>
   e37b0:	2702      	movs	r7, #2
   e37b2:	f8d8 4004 	ldr.w	r4, [r8, #4]
   e37b6:	e000      	b.n	e37ba <__gethex+0x324>
   e37b8:	2701      	movs	r7, #1
   e37ba:	f1b9 0f00 	cmp.w	r9, #0
   e37be:	f000 8081 	beq.w	e38c4 <__gethex+0x42e>
   e37c2:	f8d8 300c 	ldr.w	r3, [r8, #12]
   e37c6:	2b02      	cmp	r3, #2
   e37c8:	d00e      	beq.n	e37e8 <__gethex+0x352>
   e37ca:	2b03      	cmp	r3, #3
   e37cc:	d010      	beq.n	e37f0 <__gethex+0x35a>
   e37ce:	2b01      	cmp	r3, #1
   e37d0:	d176      	bne.n	e38c0 <__gethex+0x42a>
   e37d2:	f019 0f02 	tst.w	r9, #2
   e37d6:	d073      	beq.n	e38c0 <__gethex+0x42a>
   e37d8:	f8da 0000 	ldr.w	r0, [sl]
   e37dc:	ea49 0900 	orr.w	r9, r9, r0
   e37e0:	f019 0f01 	tst.w	r9, #1
   e37e4:	d107      	bne.n	e37f6 <__gethex+0x360>
   e37e6:	e06b      	b.n	e38c0 <__gethex+0x42a>
   e37e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e37ea:	f1c3 0301 	rsb	r3, r3, #1
   e37ee:	9315      	str	r3, [sp, #84]	; 0x54
   e37f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   e37f2:	2b00      	cmp	r3, #0
   e37f4:	d064      	beq.n	e38c0 <__gethex+0x42a>
   e37f6:	f8d5 a010 	ldr.w	sl, [r5, #16]
   e37fa:	f105 0314 	add.w	r3, r5, #20
   e37fe:	ea4f 098a 	mov.w	r9, sl, lsl #2
   e3802:	eb03 0109 	add.w	r1, r3, r9
   e3806:	2000      	movs	r0, #0
   e3808:	681a      	ldr	r2, [r3, #0]
   e380a:	f1b2 3fff 	cmp.w	r2, #4294967295
   e380e:	d002      	beq.n	e3816 <__gethex+0x380>
   e3810:	3201      	adds	r2, #1
   e3812:	601a      	str	r2, [r3, #0]
   e3814:	e020      	b.n	e3858 <__gethex+0x3c2>
   e3816:	f843 0b04 	str.w	r0, [r3], #4
   e381a:	4299      	cmp	r1, r3
   e381c:	d8f4      	bhi.n	e3808 <__gethex+0x372>
   e381e:	68ab      	ldr	r3, [r5, #8]
   e3820:	459a      	cmp	sl, r3
   e3822:	db12      	blt.n	e384a <__gethex+0x3b4>
   e3824:	6869      	ldr	r1, [r5, #4]
   e3826:	9802      	ldr	r0, [sp, #8]
   e3828:	3101      	adds	r1, #1
   e382a:	f000 f9e7 	bl	e3bfc <_Balloc>
   e382e:	692a      	ldr	r2, [r5, #16]
   e3830:	3202      	adds	r2, #2
   e3832:	f105 010c 	add.w	r1, r5, #12
   e3836:	4683      	mov	fp, r0
   e3838:	0092      	lsls	r2, r2, #2
   e383a:	300c      	adds	r0, #12
   e383c:	f7fe fc73 	bl	e2126 <memcpy>
   e3840:	4629      	mov	r1, r5
   e3842:	9802      	ldr	r0, [sp, #8]
   e3844:	f000 fa0f 	bl	e3c66 <_Bfree>
   e3848:	465d      	mov	r5, fp
   e384a:	692b      	ldr	r3, [r5, #16]
   e384c:	1c5a      	adds	r2, r3, #1
   e384e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
   e3852:	612a      	str	r2, [r5, #16]
   e3854:	2201      	movs	r2, #1
   e3856:	615a      	str	r2, [r3, #20]
   e3858:	2f02      	cmp	r7, #2
   e385a:	f105 0214 	add.w	r2, r5, #20
   e385e:	d111      	bne.n	e3884 <__gethex+0x3ee>
   e3860:	f8d8 3000 	ldr.w	r3, [r8]
   e3864:	3b01      	subs	r3, #1
   e3866:	429e      	cmp	r6, r3
   e3868:	d127      	bne.n	e38ba <__gethex+0x424>
   e386a:	1171      	asrs	r1, r6, #5
   e386c:	2301      	movs	r3, #1
   e386e:	f006 061f 	and.w	r6, r6, #31
   e3872:	fa03 f606 	lsl.w	r6, r3, r6
   e3876:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
   e387a:	421e      	tst	r6, r3
   e387c:	bf0c      	ite	eq
   e387e:	2702      	moveq	r7, #2
   e3880:	2701      	movne	r7, #1
   e3882:	e01a      	b.n	e38ba <__gethex+0x424>
   e3884:	692b      	ldr	r3, [r5, #16]
   e3886:	459a      	cmp	sl, r3
   e3888:	da0a      	bge.n	e38a0 <__gethex+0x40a>
   e388a:	2101      	movs	r1, #1
   e388c:	4628      	mov	r0, r5
   e388e:	f7ff fdb7 	bl	e3400 <rshift>
   e3892:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3896:	3401      	adds	r4, #1
   e3898:	429c      	cmp	r4, r3
   e389a:	f73f af2c 	bgt.w	e36f6 <__gethex+0x260>
   e389e:	e00b      	b.n	e38b8 <__gethex+0x422>
   e38a0:	f016 061f 	ands.w	r6, r6, #31
   e38a4:	d008      	beq.n	e38b8 <__gethex+0x422>
   e38a6:	4491      	add	r9, r2
   e38a8:	f1c6 0620 	rsb	r6, r6, #32
   e38ac:	f859 0c04 	ldr.w	r0, [r9, #-4]
   e38b0:	f000 fa69 	bl	e3d86 <__hi0bits>
   e38b4:	42b0      	cmp	r0, r6
   e38b6:	dbe8      	blt.n	e388a <__gethex+0x3f4>
   e38b8:	2701      	movs	r7, #1
   e38ba:	f047 0720 	orr.w	r7, r7, #32
   e38be:	e001      	b.n	e38c4 <__gethex+0x42e>
   e38c0:	f047 0710 	orr.w	r7, r7, #16
   e38c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   e38c6:	601d      	str	r5, [r3, #0]
   e38c8:	9b06      	ldr	r3, [sp, #24]
   e38ca:	4638      	mov	r0, r7
   e38cc:	601c      	str	r4, [r3, #0]
   e38ce:	b00b      	add	sp, #44	; 0x2c
   e38d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e38d4 <L_shift>:
   e38d4:	f1c2 0208 	rsb	r2, r2, #8
   e38d8:	0092      	lsls	r2, r2, #2
   e38da:	b570      	push	{r4, r5, r6, lr}
   e38dc:	f1c2 0620 	rsb	r6, r2, #32
   e38e0:	6843      	ldr	r3, [r0, #4]
   e38e2:	6805      	ldr	r5, [r0, #0]
   e38e4:	fa03 f406 	lsl.w	r4, r3, r6
   e38e8:	432c      	orrs	r4, r5
   e38ea:	40d3      	lsrs	r3, r2
   e38ec:	6004      	str	r4, [r0, #0]
   e38ee:	f840 3f04 	str.w	r3, [r0, #4]!
   e38f2:	4288      	cmp	r0, r1
   e38f4:	d3f4      	bcc.n	e38e0 <L_shift+0xc>
   e38f6:	bd70      	pop	{r4, r5, r6, pc}

000e38f8 <__match>:
   e38f8:	b530      	push	{r4, r5, lr}
   e38fa:	6803      	ldr	r3, [r0, #0]
   e38fc:	f811 4b01 	ldrb.w	r4, [r1], #1
   e3900:	3301      	adds	r3, #1
   e3902:	b14c      	cbz	r4, e3918 <__match+0x20>
   e3904:	781a      	ldrb	r2, [r3, #0]
   e3906:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   e390a:	2d19      	cmp	r5, #25
   e390c:	bf98      	it	ls
   e390e:	3220      	addls	r2, #32
   e3910:	42a2      	cmp	r2, r4
   e3912:	d0f3      	beq.n	e38fc <__match+0x4>
   e3914:	2000      	movs	r0, #0
   e3916:	bd30      	pop	{r4, r5, pc}
   e3918:	6003      	str	r3, [r0, #0]
   e391a:	2001      	movs	r0, #1
   e391c:	bd30      	pop	{r4, r5, pc}

000e391e <__hexnan>:
   e391e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3922:	680b      	ldr	r3, [r1, #0]
   e3924:	f8d0 b000 	ldr.w	fp, [r0]
   e3928:	115e      	asrs	r6, r3, #5
   e392a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   e392e:	f013 031f 	ands.w	r3, r3, #31
   e3932:	b085      	sub	sp, #20
   e3934:	bf18      	it	ne
   e3936:	3604      	addne	r6, #4
   e3938:	1f35      	subs	r5, r6, #4
   e393a:	4617      	mov	r7, r2
   e393c:	2200      	movs	r2, #0
   e393e:	4682      	mov	sl, r0
   e3940:	9301      	str	r3, [sp, #4]
   e3942:	f846 2c04 	str.w	r2, [r6, #-4]
   e3946:	46a8      	mov	r8, r5
   e3948:	462c      	mov	r4, r5
   e394a:	9200      	str	r2, [sp, #0]
   e394c:	4691      	mov	r9, r2
   e394e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
   e3952:	2900      	cmp	r1, #0
   e3954:	d03c      	beq.n	e39d0 <__hexnan+0xb2>
   e3956:	4608      	mov	r0, r1
   e3958:	9203      	str	r2, [sp, #12]
   e395a:	9102      	str	r1, [sp, #8]
   e395c:	f7ff fd86 	bl	e346c <__hexdig_fun>
   e3960:	9a03      	ldr	r2, [sp, #12]
   e3962:	bb00      	cbnz	r0, e39a6 <__hexnan+0x88>
   e3964:	9902      	ldr	r1, [sp, #8]
   e3966:	2920      	cmp	r1, #32
   e3968:	d816      	bhi.n	e3998 <__hexnan+0x7a>
   e396a:	9b00      	ldr	r3, [sp, #0]
   e396c:	4599      	cmp	r9, r3
   e396e:	ddee      	ble.n	e394e <__hexnan+0x30>
   e3970:	4544      	cmp	r4, r8
   e3972:	d205      	bcs.n	e3980 <__hexnan+0x62>
   e3974:	2a07      	cmp	r2, #7
   e3976:	dc03      	bgt.n	e3980 <__hexnan+0x62>
   e3978:	4641      	mov	r1, r8
   e397a:	4620      	mov	r0, r4
   e397c:	f7ff ffaa 	bl	e38d4 <L_shift>
   e3980:	42bc      	cmp	r4, r7
   e3982:	d923      	bls.n	e39cc <__hexnan+0xae>
   e3984:	2300      	movs	r3, #0
   e3986:	f1a4 0804 	sub.w	r8, r4, #4
   e398a:	f844 3c04 	str.w	r3, [r4, #-4]
   e398e:	f8cd 9000 	str.w	r9, [sp]
   e3992:	4644      	mov	r4, r8
   e3994:	461a      	mov	r2, r3
   e3996:	e7da      	b.n	e394e <__hexnan+0x30>
   e3998:	2929      	cmp	r1, #41	; 0x29
   e399a:	d148      	bne.n	e3a2e <__hexnan+0x110>
   e399c:	f10b 0301 	add.w	r3, fp, #1
   e39a0:	f8ca 3000 	str.w	r3, [sl]
   e39a4:	e014      	b.n	e39d0 <__hexnan+0xb2>
   e39a6:	3201      	adds	r2, #1
   e39a8:	2a08      	cmp	r2, #8
   e39aa:	f109 0901 	add.w	r9, r9, #1
   e39ae:	dd06      	ble.n	e39be <__hexnan+0xa0>
   e39b0:	42bc      	cmp	r4, r7
   e39b2:	d9cc      	bls.n	e394e <__hexnan+0x30>
   e39b4:	2300      	movs	r3, #0
   e39b6:	f844 3c04 	str.w	r3, [r4, #-4]
   e39ba:	2201      	movs	r2, #1
   e39bc:	3c04      	subs	r4, #4
   e39be:	6821      	ldr	r1, [r4, #0]
   e39c0:	f000 000f 	and.w	r0, r0, #15
   e39c4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
   e39c8:	6020      	str	r0, [r4, #0]
   e39ca:	e7c0      	b.n	e394e <__hexnan+0x30>
   e39cc:	2208      	movs	r2, #8
   e39ce:	e7be      	b.n	e394e <__hexnan+0x30>
   e39d0:	f1b9 0f00 	cmp.w	r9, #0
   e39d4:	d02b      	beq.n	e3a2e <__hexnan+0x110>
   e39d6:	4544      	cmp	r4, r8
   e39d8:	d205      	bcs.n	e39e6 <__hexnan+0xc8>
   e39da:	2a07      	cmp	r2, #7
   e39dc:	dc03      	bgt.n	e39e6 <__hexnan+0xc8>
   e39de:	4641      	mov	r1, r8
   e39e0:	4620      	mov	r0, r4
   e39e2:	f7ff ff77 	bl	e38d4 <L_shift>
   e39e6:	42bc      	cmp	r4, r7
   e39e8:	d90c      	bls.n	e3a04 <__hexnan+0xe6>
   e39ea:	463b      	mov	r3, r7
   e39ec:	f854 2b04 	ldr.w	r2, [r4], #4
   e39f0:	f843 2b04 	str.w	r2, [r3], #4
   e39f4:	42a5      	cmp	r5, r4
   e39f6:	d2f9      	bcs.n	e39ec <__hexnan+0xce>
   e39f8:	2200      	movs	r2, #0
   e39fa:	f843 2b04 	str.w	r2, [r3], #4
   e39fe:	429d      	cmp	r5, r3
   e3a00:	d2fb      	bcs.n	e39fa <__hexnan+0xdc>
   e3a02:	e00b      	b.n	e3a1c <__hexnan+0xfe>
   e3a04:	9b01      	ldr	r3, [sp, #4]
   e3a06:	b14b      	cbz	r3, e3a1c <__hexnan+0xfe>
   e3a08:	f1c3 0220 	rsb	r2, r3, #32
   e3a0c:	f04f 33ff 	mov.w	r3, #4294967295
   e3a10:	40d3      	lsrs	r3, r2
   e3a12:	f856 2c04 	ldr.w	r2, [r6, #-4]
   e3a16:	4013      	ands	r3, r2
   e3a18:	f846 3c04 	str.w	r3, [r6, #-4]
   e3a1c:	682b      	ldr	r3, [r5, #0]
   e3a1e:	b943      	cbnz	r3, e3a32 <__hexnan+0x114>
   e3a20:	42bd      	cmp	r5, r7
   e3a22:	d102      	bne.n	e3a2a <__hexnan+0x10c>
   e3a24:	2301      	movs	r3, #1
   e3a26:	602b      	str	r3, [r5, #0]
   e3a28:	e003      	b.n	e3a32 <__hexnan+0x114>
   e3a2a:	3d04      	subs	r5, #4
   e3a2c:	e7f6      	b.n	e3a1c <__hexnan+0xfe>
   e3a2e:	2004      	movs	r0, #4
   e3a30:	e000      	b.n	e3a34 <__hexnan+0x116>
   e3a32:	2005      	movs	r0, #5
   e3a34:	b005      	add	sp, #20
   e3a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

000e3a3c <_findenv_r>:
   e3a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3a40:	4607      	mov	r7, r0
   e3a42:	468b      	mov	fp, r1
   e3a44:	4690      	mov	r8, r2
   e3a46:	f000 fcd6 	bl	e43f6 <__env_lock>
   e3a4a:	4b19      	ldr	r3, [pc, #100]	; (e3ab0 <_findenv_r+0x74>)
   e3a4c:	681d      	ldr	r5, [r3, #0]
   e3a4e:	469a      	mov	sl, r3
   e3a50:	b13d      	cbz	r5, e3a62 <_findenv_r+0x26>
   e3a52:	465c      	mov	r4, fp
   e3a54:	4623      	mov	r3, r4
   e3a56:	f813 2b01 	ldrb.w	r2, [r3], #1
   e3a5a:	b142      	cbz	r2, e3a6e <_findenv_r+0x32>
   e3a5c:	2a3d      	cmp	r2, #61	; 0x3d
   e3a5e:	461c      	mov	r4, r3
   e3a60:	d1f8      	bne.n	e3a54 <_findenv_r+0x18>
   e3a62:	4638      	mov	r0, r7
   e3a64:	f000 fcc8 	bl	e43f8 <__env_unlock>
   e3a68:	2000      	movs	r0, #0
   e3a6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3a6e:	ebcb 0404 	rsb	r4, fp, r4
   e3a72:	46a9      	mov	r9, r5
   e3a74:	f859 0b04 	ldr.w	r0, [r9], #4
   e3a78:	2800      	cmp	r0, #0
   e3a7a:	d0f2      	beq.n	e3a62 <_findenv_r+0x26>
   e3a7c:	4622      	mov	r2, r4
   e3a7e:	4659      	mov	r1, fp
   e3a80:	f7fe fbc1 	bl	e2206 <strncmp>
   e3a84:	b988      	cbnz	r0, e3aaa <_findenv_r+0x6e>
   e3a86:	f859 3c04 	ldr.w	r3, [r9, #-4]
   e3a8a:	191e      	adds	r6, r3, r4
   e3a8c:	5d1b      	ldrb	r3, [r3, r4]
   e3a8e:	2b3d      	cmp	r3, #61	; 0x3d
   e3a90:	d10b      	bne.n	e3aaa <_findenv_r+0x6e>
   e3a92:	f8da 3000 	ldr.w	r3, [sl]
   e3a96:	1aed      	subs	r5, r5, r3
   e3a98:	10ad      	asrs	r5, r5, #2
   e3a9a:	4638      	mov	r0, r7
   e3a9c:	f8c8 5000 	str.w	r5, [r8]
   e3aa0:	f000 fcaa 	bl	e43f8 <__env_unlock>
   e3aa4:	1c70      	adds	r0, r6, #1
   e3aa6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   e3aaa:	464d      	mov	r5, r9
   e3aac:	e7e1      	b.n	e3a72 <_findenv_r+0x36>
   e3aae:	bf00      	nop
   e3ab0:	2003e2d8 	.word	0x2003e2d8

000e3ab4 <_getenv_r>:
   e3ab4:	b507      	push	{r0, r1, r2, lr}
   e3ab6:	aa01      	add	r2, sp, #4
   e3ab8:	f7ff ffc0 	bl	e3a3c <_findenv_r>
   e3abc:	b003      	add	sp, #12
   e3abe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000e3ac4 <__gettzinfo>:
   e3ac4:	4800      	ldr	r0, [pc, #0]	; (e3ac8 <__gettzinfo+0x4>)
   e3ac6:	4770      	bx	lr
   e3ac8:	2003e298 	.word	0x2003e298

000e3acc <gmtime_r>:
   e3acc:	6802      	ldr	r2, [r0, #0]
   e3ace:	4b47      	ldr	r3, [pc, #284]	; (e3bec <gmtime_r+0x120>)
   e3ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
   e3ad2:	fb92 f4f3 	sdiv	r4, r2, r3
   e3ad6:	fb03 2214 	mls	r2, r3, r4, r2
   e3ada:	2a00      	cmp	r2, #0
   e3adc:	bfbc      	itt	lt
   e3ade:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   e3ae2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   e3ae6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   e3aea:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   e3aee:	fb92 f3f0 	sdiv	r3, r2, r0
   e3af2:	fb00 2213 	mls	r2, r0, r3, r2
   e3af6:	f04f 003c 	mov.w	r0, #60	; 0x3c
   e3afa:	bfac      	ite	ge
   e3afc:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   e3b00:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   e3b04:	608b      	str	r3, [r1, #8]
   e3b06:	fb92 f3f0 	sdiv	r3, r2, r0
   e3b0a:	fb00 2213 	mls	r2, r0, r3, r2
   e3b0e:	604b      	str	r3, [r1, #4]
   e3b10:	600a      	str	r2, [r1, #0]
   e3b12:	2307      	movs	r3, #7
   e3b14:	1ce2      	adds	r2, r4, #3
   e3b16:	fb92 f3f3 	sdiv	r3, r2, r3
   e3b1a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   e3b1e:	1ad3      	subs	r3, r2, r3
   e3b20:	618b      	str	r3, [r1, #24]
   e3b22:	4b33      	ldr	r3, [pc, #204]	; (e3bf0 <gmtime_r+0x124>)
   e3b24:	4d33      	ldr	r5, [pc, #204]	; (e3bf4 <gmtime_r+0x128>)
   e3b26:	fb94 f5f5 	sdiv	r5, r4, r5
   e3b2a:	fb03 4405 	mla	r4, r3, r5, r4
   e3b2e:	f648 62ac 	movw	r2, #36524	; 0x8eac
   e3b32:	fbb4 f2f2 	udiv	r2, r4, r2
   e3b36:	4422      	add	r2, r4
   e3b38:	f240 57b4 	movw	r7, #1460	; 0x5b4
   e3b3c:	fbb4 f3f7 	udiv	r3, r4, r7
   e3b40:	1ad2      	subs	r2, r2, r3
   e3b42:	482d      	ldr	r0, [pc, #180]	; (e3bf8 <gmtime_r+0x12c>)
   e3b44:	fbb4 f0f0 	udiv	r0, r4, r0
   e3b48:	f648 6694 	movw	r6, #36500	; 0x8e94
   e3b4c:	1a13      	subs	r3, r2, r0
   e3b4e:	fbb3 f6f6 	udiv	r6, r3, r6
   e3b52:	4434      	add	r4, r6
   e3b54:	f240 126d 	movw	r2, #365	; 0x16d
   e3b58:	fbb3 f0f2 	udiv	r0, r3, r2
   e3b5c:	fbb3 f3f7 	udiv	r3, r3, r7
   e3b60:	1ae3      	subs	r3, r4, r3
   e3b62:	fb02 3310 	mls	r3, r2, r0, r3
   e3b66:	2499      	movs	r4, #153	; 0x99
   e3b68:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   e3b6c:	3202      	adds	r2, #2
   e3b6e:	fbb2 f2f4 	udiv	r2, r2, r4
   e3b72:	2a0a      	cmp	r2, #10
   e3b74:	fb04 f402 	mul.w	r4, r4, r2
   e3b78:	f104 0602 	add.w	r6, r4, #2
   e3b7c:	f04f 0405 	mov.w	r4, #5
   e3b80:	fbb6 f4f4 	udiv	r4, r6, r4
   e3b84:	bf34      	ite	cc
   e3b86:	2602      	movcc	r6, #2
   e3b88:	f06f 0609 	mvncs.w	r6, #9
   e3b8c:	4416      	add	r6, r2
   e3b8e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3b92:	fb02 0505 	mla	r5, r2, r5, r0
   e3b96:	1c5f      	adds	r7, r3, #1
   e3b98:	2e01      	cmp	r6, #1
   e3b9a:	bf98      	it	ls
   e3b9c:	3501      	addls	r5, #1
   e3b9e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   e3ba2:	eba7 0704 	sub.w	r7, r7, r4
   e3ba6:	d302      	bcc.n	e3bae <gmtime_r+0xe2>
   e3ba8:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   e3bac:	e014      	b.n	e3bd8 <gmtime_r+0x10c>
   e3bae:	0782      	lsls	r2, r0, #30
   e3bb0:	d105      	bne.n	e3bbe <gmtime_r+0xf2>
   e3bb2:	2464      	movs	r4, #100	; 0x64
   e3bb4:	fbb0 f2f4 	udiv	r2, r0, r4
   e3bb8:	fb04 0212 	mls	r2, r4, r2, r0
   e3bbc:	b94a      	cbnz	r2, e3bd2 <gmtime_r+0x106>
   e3bbe:	f44f 72c8 	mov.w	r2, #400	; 0x190
   e3bc2:	fbb0 f4f2 	udiv	r4, r0, r2
   e3bc6:	fb02 0014 	mls	r0, r2, r4, r0
   e3bca:	fab0 f280 	clz	r2, r0
   e3bce:	0952      	lsrs	r2, r2, #5
   e3bd0:	e000      	b.n	e3bd4 <gmtime_r+0x108>
   e3bd2:	2201      	movs	r2, #1
   e3bd4:	333b      	adds	r3, #59	; 0x3b
   e3bd6:	441a      	add	r2, r3
   e3bd8:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   e3bdc:	2300      	movs	r3, #0
   e3bde:	61ca      	str	r2, [r1, #28]
   e3be0:	614d      	str	r5, [r1, #20]
   e3be2:	610e      	str	r6, [r1, #16]
   e3be4:	60cf      	str	r7, [r1, #12]
   e3be6:	620b      	str	r3, [r1, #32]
   e3be8:	4608      	mov	r0, r1
   e3bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
   e3bec:	00015180 	.word	0x00015180
   e3bf0:	fffdc54f 	.word	0xfffdc54f
   e3bf4:	00023ab1 	.word	0x00023ab1
   e3bf8:	00023ab0 	.word	0x00023ab0

000e3bfc <_Balloc>:
   e3bfc:	b570      	push	{r4, r5, r6, lr}
   e3bfe:	6a45      	ldr	r5, [r0, #36]	; 0x24
   e3c00:	4604      	mov	r4, r0
   e3c02:	460e      	mov	r6, r1
   e3c04:	b93d      	cbnz	r5, e3c16 <_Balloc+0x1a>
   e3c06:	2010      	movs	r0, #16
   e3c08:	f7fb fa86 	bl	df118 <malloc>
   e3c0c:	6260      	str	r0, [r4, #36]	; 0x24
   e3c0e:	6045      	str	r5, [r0, #4]
   e3c10:	6085      	str	r5, [r0, #8]
   e3c12:	6005      	str	r5, [r0, #0]
   e3c14:	60c5      	str	r5, [r0, #12]
   e3c16:	6a65      	ldr	r5, [r4, #36]	; 0x24
   e3c18:	68eb      	ldr	r3, [r5, #12]
   e3c1a:	b143      	cbz	r3, e3c2e <_Balloc+0x32>
   e3c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3c1e:	68db      	ldr	r3, [r3, #12]
   e3c20:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   e3c24:	b178      	cbz	r0, e3c46 <_Balloc+0x4a>
   e3c26:	6802      	ldr	r2, [r0, #0]
   e3c28:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
   e3c2c:	e017      	b.n	e3c5e <_Balloc+0x62>
   e3c2e:	2221      	movs	r2, #33	; 0x21
   e3c30:	2104      	movs	r1, #4
   e3c32:	4620      	mov	r0, r4
   e3c34:	f000 fbd1 	bl	e43da <_calloc_r>
   e3c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
   e3c3a:	60e8      	str	r0, [r5, #12]
   e3c3c:	68db      	ldr	r3, [r3, #12]
   e3c3e:	2b00      	cmp	r3, #0
   e3c40:	d1ec      	bne.n	e3c1c <_Balloc+0x20>
   e3c42:	2000      	movs	r0, #0
   e3c44:	bd70      	pop	{r4, r5, r6, pc}
   e3c46:	2101      	movs	r1, #1
   e3c48:	fa01 f506 	lsl.w	r5, r1, r6
   e3c4c:	1d6a      	adds	r2, r5, #5
   e3c4e:	0092      	lsls	r2, r2, #2
   e3c50:	4620      	mov	r0, r4
   e3c52:	f000 fbc2 	bl	e43da <_calloc_r>
   e3c56:	2800      	cmp	r0, #0
   e3c58:	d0f3      	beq.n	e3c42 <_Balloc+0x46>
   e3c5a:	6046      	str	r6, [r0, #4]
   e3c5c:	6085      	str	r5, [r0, #8]
   e3c5e:	2300      	movs	r3, #0
   e3c60:	6103      	str	r3, [r0, #16]
   e3c62:	60c3      	str	r3, [r0, #12]
   e3c64:	bd70      	pop	{r4, r5, r6, pc}

000e3c66 <_Bfree>:
   e3c66:	b570      	push	{r4, r5, r6, lr}
   e3c68:	6a44      	ldr	r4, [r0, #36]	; 0x24
   e3c6a:	4606      	mov	r6, r0
   e3c6c:	460d      	mov	r5, r1
   e3c6e:	b93c      	cbnz	r4, e3c80 <_Bfree+0x1a>
   e3c70:	2010      	movs	r0, #16
   e3c72:	f7fb fa51 	bl	df118 <malloc>
   e3c76:	6270      	str	r0, [r6, #36]	; 0x24
   e3c78:	6044      	str	r4, [r0, #4]
   e3c7a:	6084      	str	r4, [r0, #8]
   e3c7c:	6004      	str	r4, [r0, #0]
   e3c7e:	60c4      	str	r4, [r0, #12]
   e3c80:	b13d      	cbz	r5, e3c92 <_Bfree+0x2c>
   e3c82:	6a73      	ldr	r3, [r6, #36]	; 0x24
   e3c84:	686a      	ldr	r2, [r5, #4]
   e3c86:	68db      	ldr	r3, [r3, #12]
   e3c88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   e3c8c:	6029      	str	r1, [r5, #0]
   e3c8e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   e3c92:	bd70      	pop	{r4, r5, r6, pc}

000e3c94 <__multadd>:
   e3c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   e3c98:	690d      	ldr	r5, [r1, #16]
   e3c9a:	461f      	mov	r7, r3
   e3c9c:	4606      	mov	r6, r0
   e3c9e:	460c      	mov	r4, r1
   e3ca0:	f101 0e14 	add.w	lr, r1, #20
   e3ca4:	2300      	movs	r3, #0
   e3ca6:	f8de 0000 	ldr.w	r0, [lr]
   e3caa:	b281      	uxth	r1, r0
   e3cac:	fb02 7101 	mla	r1, r2, r1, r7
   e3cb0:	0c0f      	lsrs	r7, r1, #16
   e3cb2:	0c00      	lsrs	r0, r0, #16
   e3cb4:	fb02 7000 	mla	r0, r2, r0, r7
   e3cb8:	b289      	uxth	r1, r1
   e3cba:	3301      	adds	r3, #1
   e3cbc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
   e3cc0:	429d      	cmp	r5, r3
   e3cc2:	ea4f 4710 	mov.w	r7, r0, lsr #16
   e3cc6:	f84e 1b04 	str.w	r1, [lr], #4
   e3cca:	dcec      	bgt.n	e3ca6 <__multadd+0x12>
   e3ccc:	b1d7      	cbz	r7, e3d04 <__multadd+0x70>
   e3cce:	68a3      	ldr	r3, [r4, #8]
   e3cd0:	429d      	cmp	r5, r3
   e3cd2:	db12      	blt.n	e3cfa <__multadd+0x66>
   e3cd4:	6861      	ldr	r1, [r4, #4]
   e3cd6:	4630      	mov	r0, r6
   e3cd8:	3101      	adds	r1, #1
   e3cda:	f7ff ff8f 	bl	e3bfc <_Balloc>
   e3cde:	6922      	ldr	r2, [r4, #16]
   e3ce0:	3202      	adds	r2, #2
   e3ce2:	f104 010c 	add.w	r1, r4, #12
   e3ce6:	4680      	mov	r8, r0
   e3ce8:	0092      	lsls	r2, r2, #2
   e3cea:	300c      	adds	r0, #12
   e3cec:	f7fe fa1b 	bl	e2126 <memcpy>
   e3cf0:	4621      	mov	r1, r4
   e3cf2:	4630      	mov	r0, r6
   e3cf4:	f7ff ffb7 	bl	e3c66 <_Bfree>
   e3cf8:	4644      	mov	r4, r8
   e3cfa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
   e3cfe:	3501      	adds	r5, #1
   e3d00:	615f      	str	r7, [r3, #20]
   e3d02:	6125      	str	r5, [r4, #16]
   e3d04:	4620      	mov	r0, r4
   e3d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000e3d0a <__s2b>:
   e3d0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3d0e:	460c      	mov	r4, r1
   e3d10:	4615      	mov	r5, r2
   e3d12:	461f      	mov	r7, r3
   e3d14:	2209      	movs	r2, #9
   e3d16:	3308      	adds	r3, #8
   e3d18:	4606      	mov	r6, r0
   e3d1a:	fb93 f3f2 	sdiv	r3, r3, r2
   e3d1e:	2100      	movs	r1, #0
   e3d20:	2201      	movs	r2, #1
   e3d22:	429a      	cmp	r2, r3
   e3d24:	da02      	bge.n	e3d2c <__s2b+0x22>
   e3d26:	0052      	lsls	r2, r2, #1
   e3d28:	3101      	adds	r1, #1
   e3d2a:	e7fa      	b.n	e3d22 <__s2b+0x18>
   e3d2c:	4630      	mov	r0, r6
   e3d2e:	f7ff ff65 	bl	e3bfc <_Balloc>
   e3d32:	9b08      	ldr	r3, [sp, #32]
   e3d34:	6143      	str	r3, [r0, #20]
   e3d36:	2d09      	cmp	r5, #9
   e3d38:	f04f 0301 	mov.w	r3, #1
   e3d3c:	6103      	str	r3, [r0, #16]
   e3d3e:	dd11      	ble.n	e3d64 <__s2b+0x5a>
   e3d40:	f104 0809 	add.w	r8, r4, #9
   e3d44:	46c1      	mov	r9, r8
   e3d46:	442c      	add	r4, r5
   e3d48:	f819 3b01 	ldrb.w	r3, [r9], #1
   e3d4c:	4601      	mov	r1, r0
   e3d4e:	3b30      	subs	r3, #48	; 0x30
   e3d50:	220a      	movs	r2, #10
   e3d52:	4630      	mov	r0, r6
   e3d54:	f7ff ff9e 	bl	e3c94 <__multadd>
   e3d58:	45a1      	cmp	r9, r4
   e3d5a:	d1f5      	bne.n	e3d48 <__s2b+0x3e>
   e3d5c:	eb08 0405 	add.w	r4, r8, r5
   e3d60:	3c08      	subs	r4, #8
   e3d62:	e001      	b.n	e3d68 <__s2b+0x5e>
   e3d64:	340a      	adds	r4, #10
   e3d66:	2509      	movs	r5, #9
   e3d68:	1b2d      	subs	r5, r5, r4
   e3d6a:	1963      	adds	r3, r4, r5
   e3d6c:	429f      	cmp	r7, r3
   e3d6e:	dd08      	ble.n	e3d82 <__s2b+0x78>
   e3d70:	f814 3b01 	ldrb.w	r3, [r4], #1
   e3d74:	4601      	mov	r1, r0
   e3d76:	3b30      	subs	r3, #48	; 0x30
   e3d78:	220a      	movs	r2, #10
   e3d7a:	4630      	mov	r0, r6
   e3d7c:	f7ff ff8a 	bl	e3c94 <__multadd>
   e3d80:	e7f3      	b.n	e3d6a <__s2b+0x60>
   e3d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e3d86 <__hi0bits>:
   e3d86:	0c03      	lsrs	r3, r0, #16
   e3d88:	041b      	lsls	r3, r3, #16
   e3d8a:	b913      	cbnz	r3, e3d92 <__hi0bits+0xc>
   e3d8c:	0400      	lsls	r0, r0, #16
   e3d8e:	2310      	movs	r3, #16
   e3d90:	e000      	b.n	e3d94 <__hi0bits+0xe>
   e3d92:	2300      	movs	r3, #0
   e3d94:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   e3d98:	bf04      	itt	eq
   e3d9a:	0200      	lsleq	r0, r0, #8
   e3d9c:	3308      	addeq	r3, #8
   e3d9e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   e3da2:	bf04      	itt	eq
   e3da4:	0100      	lsleq	r0, r0, #4
   e3da6:	3304      	addeq	r3, #4
   e3da8:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   e3dac:	bf04      	itt	eq
   e3dae:	0080      	lsleq	r0, r0, #2
   e3db0:	3302      	addeq	r3, #2
   e3db2:	2800      	cmp	r0, #0
   e3db4:	db03      	blt.n	e3dbe <__hi0bits+0x38>
   e3db6:	0042      	lsls	r2, r0, #1
   e3db8:	d503      	bpl.n	e3dc2 <__hi0bits+0x3c>
   e3dba:	1c58      	adds	r0, r3, #1
   e3dbc:	4770      	bx	lr
   e3dbe:	4618      	mov	r0, r3
   e3dc0:	4770      	bx	lr
   e3dc2:	2020      	movs	r0, #32
   e3dc4:	4770      	bx	lr

000e3dc6 <__lo0bits>:
   e3dc6:	6803      	ldr	r3, [r0, #0]
   e3dc8:	f013 0207 	ands.w	r2, r3, #7
   e3dcc:	d00b      	beq.n	e3de6 <__lo0bits+0x20>
   e3dce:	07d9      	lsls	r1, r3, #31
   e3dd0:	d422      	bmi.n	e3e18 <__lo0bits+0x52>
   e3dd2:	079a      	lsls	r2, r3, #30
   e3dd4:	bf4b      	itete	mi
   e3dd6:	085b      	lsrmi	r3, r3, #1
   e3dd8:	089b      	lsrpl	r3, r3, #2
   e3dda:	6003      	strmi	r3, [r0, #0]
   e3ddc:	6003      	strpl	r3, [r0, #0]
   e3dde:	bf4c      	ite	mi
   e3de0:	2001      	movmi	r0, #1
   e3de2:	2002      	movpl	r0, #2
   e3de4:	4770      	bx	lr
   e3de6:	b299      	uxth	r1, r3
   e3de8:	b909      	cbnz	r1, e3dee <__lo0bits+0x28>
   e3dea:	0c1b      	lsrs	r3, r3, #16
   e3dec:	2210      	movs	r2, #16
   e3dee:	f013 0fff 	tst.w	r3, #255	; 0xff
   e3df2:	bf04      	itt	eq
   e3df4:	0a1b      	lsreq	r3, r3, #8
   e3df6:	3208      	addeq	r2, #8
   e3df8:	0719      	lsls	r1, r3, #28
   e3dfa:	bf04      	itt	eq
   e3dfc:	091b      	lsreq	r3, r3, #4
   e3dfe:	3204      	addeq	r2, #4
   e3e00:	0799      	lsls	r1, r3, #30
   e3e02:	bf04      	itt	eq
   e3e04:	089b      	lsreq	r3, r3, #2
   e3e06:	3202      	addeq	r2, #2
   e3e08:	07d9      	lsls	r1, r3, #31
   e3e0a:	d402      	bmi.n	e3e12 <__lo0bits+0x4c>
   e3e0c:	085b      	lsrs	r3, r3, #1
   e3e0e:	d005      	beq.n	e3e1c <__lo0bits+0x56>
   e3e10:	3201      	adds	r2, #1
   e3e12:	6003      	str	r3, [r0, #0]
   e3e14:	4610      	mov	r0, r2
   e3e16:	4770      	bx	lr
   e3e18:	2000      	movs	r0, #0
   e3e1a:	4770      	bx	lr
   e3e1c:	2020      	movs	r0, #32
   e3e1e:	4770      	bx	lr

000e3e20 <__i2b>:
   e3e20:	b510      	push	{r4, lr}
   e3e22:	460c      	mov	r4, r1
   e3e24:	2101      	movs	r1, #1
   e3e26:	f7ff fee9 	bl	e3bfc <_Balloc>
   e3e2a:	2201      	movs	r2, #1
   e3e2c:	6144      	str	r4, [r0, #20]
   e3e2e:	6102      	str	r2, [r0, #16]
   e3e30:	bd10      	pop	{r4, pc}

000e3e32 <__multiply>:
   e3e32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   e3e36:	4614      	mov	r4, r2
   e3e38:	690a      	ldr	r2, [r1, #16]
   e3e3a:	6923      	ldr	r3, [r4, #16]
   e3e3c:	429a      	cmp	r2, r3
   e3e3e:	bfb8      	it	lt
   e3e40:	460b      	movlt	r3, r1
   e3e42:	4688      	mov	r8, r1
   e3e44:	bfbc      	itt	lt
   e3e46:	46a0      	movlt	r8, r4
   e3e48:	461c      	movlt	r4, r3
   e3e4a:	f8d8 7010 	ldr.w	r7, [r8, #16]
   e3e4e:	f8d4 9010 	ldr.w	r9, [r4, #16]
   e3e52:	f8d8 3008 	ldr.w	r3, [r8, #8]
   e3e56:	f8d8 1004 	ldr.w	r1, [r8, #4]
   e3e5a:	eb07 0609 	add.w	r6, r7, r9
   e3e5e:	429e      	cmp	r6, r3
   e3e60:	bfc8      	it	gt
   e3e62:	3101      	addgt	r1, #1
   e3e64:	f7ff feca 	bl	e3bfc <_Balloc>
   e3e68:	f100 0514 	add.w	r5, r0, #20
   e3e6c:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
   e3e70:	462b      	mov	r3, r5
   e3e72:	2200      	movs	r2, #0
   e3e74:	4563      	cmp	r3, ip
   e3e76:	d202      	bcs.n	e3e7e <__multiply+0x4c>
   e3e78:	f843 2b04 	str.w	r2, [r3], #4
   e3e7c:	e7fa      	b.n	e3e74 <__multiply+0x42>
   e3e7e:	f104 0214 	add.w	r2, r4, #20
   e3e82:	f108 0114 	add.w	r1, r8, #20
   e3e86:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   e3e8a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
   e3e8e:	9300      	str	r3, [sp, #0]
   e3e90:	9b00      	ldr	r3, [sp, #0]
   e3e92:	9201      	str	r2, [sp, #4]
   e3e94:	4293      	cmp	r3, r2
   e3e96:	d957      	bls.n	e3f48 <__multiply+0x116>
   e3e98:	f8b2 b000 	ldrh.w	fp, [r2]
   e3e9c:	f1bb 0f00 	cmp.w	fp, #0
   e3ea0:	d023      	beq.n	e3eea <__multiply+0xb8>
   e3ea2:	4689      	mov	r9, r1
   e3ea4:	46ae      	mov	lr, r5
   e3ea6:	f04f 0800 	mov.w	r8, #0
   e3eaa:	f859 4b04 	ldr.w	r4, [r9], #4
   e3eae:	f8be a000 	ldrh.w	sl, [lr]
   e3eb2:	b2a3      	uxth	r3, r4
   e3eb4:	fb0b a303 	mla	r3, fp, r3, sl
   e3eb8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
   e3ebc:	f8de 4000 	ldr.w	r4, [lr]
   e3ec0:	4443      	add	r3, r8
   e3ec2:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3ec6:	fb0b 840a 	mla	r4, fp, sl, r8
   e3eca:	eb04 4413 	add.w	r4, r4, r3, lsr #16
   e3ece:	46f2      	mov	sl, lr
   e3ed0:	b29b      	uxth	r3, r3
   e3ed2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
   e3ed6:	454f      	cmp	r7, r9
   e3ed8:	ea4f 4814 	mov.w	r8, r4, lsr #16
   e3edc:	f84a 3b04 	str.w	r3, [sl], #4
   e3ee0:	d901      	bls.n	e3ee6 <__multiply+0xb4>
   e3ee2:	46d6      	mov	lr, sl
   e3ee4:	e7e1      	b.n	e3eaa <__multiply+0x78>
   e3ee6:	f8ce 8004 	str.w	r8, [lr, #4]
   e3eea:	9b01      	ldr	r3, [sp, #4]
   e3eec:	f8b3 a002 	ldrh.w	sl, [r3, #2]
   e3ef0:	3204      	adds	r2, #4
   e3ef2:	f1ba 0f00 	cmp.w	sl, #0
   e3ef6:	d021      	beq.n	e3f3c <__multiply+0x10a>
   e3ef8:	682b      	ldr	r3, [r5, #0]
   e3efa:	462c      	mov	r4, r5
   e3efc:	4689      	mov	r9, r1
   e3efe:	f04f 0800 	mov.w	r8, #0
   e3f02:	f8b9 e000 	ldrh.w	lr, [r9]
   e3f06:	f8b4 b002 	ldrh.w	fp, [r4, #2]
   e3f0a:	fb0a be0e 	mla	lr, sl, lr, fp
   e3f0e:	44f0      	add	r8, lr
   e3f10:	46a3      	mov	fp, r4
   e3f12:	b29b      	uxth	r3, r3
   e3f14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   e3f18:	f84b 3b04 	str.w	r3, [fp], #4
   e3f1c:	f859 3b04 	ldr.w	r3, [r9], #4
   e3f20:	f8b4 e004 	ldrh.w	lr, [r4, #4]
   e3f24:	0c1b      	lsrs	r3, r3, #16
   e3f26:	fb0a e303 	mla	r3, sl, r3, lr
   e3f2a:	eb03 4318 	add.w	r3, r3, r8, lsr #16
   e3f2e:	454f      	cmp	r7, r9
   e3f30:	ea4f 4813 	mov.w	r8, r3, lsr #16
   e3f34:	d901      	bls.n	e3f3a <__multiply+0x108>
   e3f36:	465c      	mov	r4, fp
   e3f38:	e7e3      	b.n	e3f02 <__multiply+0xd0>
   e3f3a:	6063      	str	r3, [r4, #4]
   e3f3c:	3504      	adds	r5, #4
   e3f3e:	e7a7      	b.n	e3e90 <__multiply+0x5e>
   e3f40:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
   e3f44:	b913      	cbnz	r3, e3f4c <__multiply+0x11a>
   e3f46:	3e01      	subs	r6, #1
   e3f48:	2e00      	cmp	r6, #0
   e3f4a:	dcf9      	bgt.n	e3f40 <__multiply+0x10e>
   e3f4c:	6106      	str	r6, [r0, #16]
   e3f4e:	b003      	add	sp, #12
   e3f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000e3f54 <__pow5mult>:
   e3f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e3f58:	4615      	mov	r5, r2
   e3f5a:	f012 0203 	ands.w	r2, r2, #3
   e3f5e:	4606      	mov	r6, r0
   e3f60:	460f      	mov	r7, r1
   e3f62:	d007      	beq.n	e3f74 <__pow5mult+0x20>
   e3f64:	3a01      	subs	r2, #1
   e3f66:	4c21      	ldr	r4, [pc, #132]	; (e3fec <__pow5mult+0x98>)
   e3f68:	2300      	movs	r3, #0
   e3f6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   e3f6e:	f7ff fe91 	bl	e3c94 <__multadd>
   e3f72:	4607      	mov	r7, r0
   e3f74:	10ad      	asrs	r5, r5, #2
   e3f76:	d036      	beq.n	e3fe6 <__pow5mult+0x92>
   e3f78:	6a74      	ldr	r4, [r6, #36]	; 0x24
   e3f7a:	b93c      	cbnz	r4, e3f8c <__pow5mult+0x38>
   e3f7c:	2010      	movs	r0, #16
   e3f7e:	f7fb f8cb 	bl	df118 <malloc>
   e3f82:	6270      	str	r0, [r6, #36]	; 0x24
   e3f84:	6044      	str	r4, [r0, #4]
   e3f86:	6084      	str	r4, [r0, #8]
   e3f88:	6004      	str	r4, [r0, #0]
   e3f8a:	60c4      	str	r4, [r0, #12]
   e3f8c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   e3f90:	f8d8 4008 	ldr.w	r4, [r8, #8]
   e3f94:	b94c      	cbnz	r4, e3faa <__pow5mult+0x56>
   e3f96:	f240 2171 	movw	r1, #625	; 0x271
   e3f9a:	4630      	mov	r0, r6
   e3f9c:	f7ff ff40 	bl	e3e20 <__i2b>
   e3fa0:	2300      	movs	r3, #0
   e3fa2:	f8c8 0008 	str.w	r0, [r8, #8]
   e3fa6:	4604      	mov	r4, r0
   e3fa8:	6003      	str	r3, [r0, #0]
   e3faa:	f04f 0800 	mov.w	r8, #0
   e3fae:	07eb      	lsls	r3, r5, #31
   e3fb0:	d50a      	bpl.n	e3fc8 <__pow5mult+0x74>
   e3fb2:	4639      	mov	r1, r7
   e3fb4:	4622      	mov	r2, r4
   e3fb6:	4630      	mov	r0, r6
   e3fb8:	f7ff ff3b 	bl	e3e32 <__multiply>
   e3fbc:	4639      	mov	r1, r7
   e3fbe:	4681      	mov	r9, r0
   e3fc0:	4630      	mov	r0, r6
   e3fc2:	f7ff fe50 	bl	e3c66 <_Bfree>
   e3fc6:	464f      	mov	r7, r9
   e3fc8:	106d      	asrs	r5, r5, #1
   e3fca:	d00c      	beq.n	e3fe6 <__pow5mult+0x92>
   e3fcc:	6820      	ldr	r0, [r4, #0]
   e3fce:	b108      	cbz	r0, e3fd4 <__pow5mult+0x80>
   e3fd0:	4604      	mov	r4, r0
   e3fd2:	e7ec      	b.n	e3fae <__pow5mult+0x5a>
   e3fd4:	4622      	mov	r2, r4
   e3fd6:	4621      	mov	r1, r4
   e3fd8:	4630      	mov	r0, r6
   e3fda:	f7ff ff2a 	bl	e3e32 <__multiply>
   e3fde:	6020      	str	r0, [r4, #0]
   e3fe0:	f8c0 8000 	str.w	r8, [r0]
   e3fe4:	e7f4      	b.n	e3fd0 <__pow5mult+0x7c>
   e3fe6:	4638      	mov	r0, r7
   e3fe8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e3fec:	000e4bf8 	.word	0x000e4bf8

000e3ff0 <__lshift>:
   e3ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   e3ff4:	460c      	mov	r4, r1
   e3ff6:	ea4f 1a62 	mov.w	sl, r2, asr #5
   e3ffa:	6926      	ldr	r6, [r4, #16]
   e3ffc:	6849      	ldr	r1, [r1, #4]
   e3ffe:	68a3      	ldr	r3, [r4, #8]
   e4000:	4456      	add	r6, sl
   e4002:	4607      	mov	r7, r0
   e4004:	4691      	mov	r9, r2
   e4006:	1c75      	adds	r5, r6, #1
   e4008:	42ab      	cmp	r3, r5
   e400a:	da02      	bge.n	e4012 <__lshift+0x22>
   e400c:	3101      	adds	r1, #1
   e400e:	005b      	lsls	r3, r3, #1
   e4010:	e7fa      	b.n	e4008 <__lshift+0x18>
   e4012:	4638      	mov	r0, r7
   e4014:	f7ff fdf2 	bl	e3bfc <_Balloc>
   e4018:	2300      	movs	r3, #0
   e401a:	4680      	mov	r8, r0
   e401c:	f100 0114 	add.w	r1, r0, #20
   e4020:	461a      	mov	r2, r3
   e4022:	4553      	cmp	r3, sl
   e4024:	da03      	bge.n	e402e <__lshift+0x3e>
   e4026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   e402a:	3301      	adds	r3, #1
   e402c:	e7f9      	b.n	e4022 <__lshift+0x32>
   e402e:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
   e4032:	6920      	ldr	r0, [r4, #16]
   e4034:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   e4038:	f019 091f 	ands.w	r9, r9, #31
   e403c:	f104 0114 	add.w	r1, r4, #20
   e4040:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
   e4044:	d014      	beq.n	e4070 <__lshift+0x80>
   e4046:	f1c9 0c20 	rsb	ip, r9, #32
   e404a:	2200      	movs	r2, #0
   e404c:	6808      	ldr	r0, [r1, #0]
   e404e:	fa00 f009 	lsl.w	r0, r0, r9
   e4052:	4302      	orrs	r2, r0
   e4054:	469a      	mov	sl, r3
   e4056:	f843 2b04 	str.w	r2, [r3], #4
   e405a:	f851 2b04 	ldr.w	r2, [r1], #4
   e405e:	458e      	cmp	lr, r1
   e4060:	fa22 f20c 	lsr.w	r2, r2, ip
   e4064:	d8f2      	bhi.n	e404c <__lshift+0x5c>
   e4066:	f8ca 2004 	str.w	r2, [sl, #4]
   e406a:	b142      	cbz	r2, e407e <__lshift+0x8e>
   e406c:	1cb5      	adds	r5, r6, #2
   e406e:	e006      	b.n	e407e <__lshift+0x8e>
   e4070:	3b04      	subs	r3, #4
   e4072:	f851 2b04 	ldr.w	r2, [r1], #4
   e4076:	f843 2f04 	str.w	r2, [r3, #4]!
   e407a:	458e      	cmp	lr, r1
   e407c:	d8f9      	bhi.n	e4072 <__lshift+0x82>
   e407e:	3d01      	subs	r5, #1
   e4080:	4638      	mov	r0, r7
   e4082:	f8c8 5010 	str.w	r5, [r8, #16]
   e4086:	4621      	mov	r1, r4
   e4088:	f7ff fded 	bl	e3c66 <_Bfree>
   e408c:	4640      	mov	r0, r8
   e408e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000e4092 <__mcmp>:
   e4092:	6903      	ldr	r3, [r0, #16]
   e4094:	690a      	ldr	r2, [r1, #16]
   e4096:	1a9b      	subs	r3, r3, r2
   e4098:	b510      	push	{r4, lr}
   e409a:	d111      	bne.n	e40c0 <__mcmp+0x2e>
   e409c:	0092      	lsls	r2, r2, #2
   e409e:	3014      	adds	r0, #20
   e40a0:	3114      	adds	r1, #20
   e40a2:	1883      	adds	r3, r0, r2
   e40a4:	440a      	add	r2, r1
   e40a6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   e40aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   e40ae:	428c      	cmp	r4, r1
   e40b0:	d002      	beq.n	e40b8 <__mcmp+0x26>
   e40b2:	d307      	bcc.n	e40c4 <__mcmp+0x32>
   e40b4:	2001      	movs	r0, #1
   e40b6:	bd10      	pop	{r4, pc}
   e40b8:	4298      	cmp	r0, r3
   e40ba:	d3f4      	bcc.n	e40a6 <__mcmp+0x14>
   e40bc:	2000      	movs	r0, #0
   e40be:	bd10      	pop	{r4, pc}
   e40c0:	4618      	mov	r0, r3
   e40c2:	bd10      	pop	{r4, pc}
   e40c4:	f04f 30ff 	mov.w	r0, #4294967295
   e40c8:	bd10      	pop	{r4, pc}

000e40ca <__mdiff>:
   e40ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   e40ce:	460c      	mov	r4, r1
   e40d0:	4607      	mov	r7, r0
   e40d2:	4611      	mov	r1, r2
   e40d4:	4620      	mov	r0, r4
   e40d6:	4615      	mov	r5, r2
   e40d8:	f7ff ffdb 	bl	e4092 <__mcmp>
   e40dc:	1e06      	subs	r6, r0, #0
   e40de:	d108      	bne.n	e40f2 <__mdiff+0x28>
   e40e0:	4631      	mov	r1, r6
   e40e2:	4638      	mov	r0, r7
   e40e4:	f7ff fd8a 	bl	e3bfc <_Balloc>
   e40e8:	2301      	movs	r3, #1
   e40ea:	6103      	str	r3, [r0, #16]
   e40ec:	6146      	str	r6, [r0, #20]
   e40ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   e40f2:	bfbc      	itt	lt
   e40f4:	4623      	movlt	r3, r4
   e40f6:	462c      	movlt	r4, r5
   e40f8:	4638      	mov	r0, r7
   e40fa:	6861      	ldr	r1, [r4, #4]
   e40fc:	bfba      	itte	lt
   e40fe:	461d      	movlt	r5, r3
   e4100:	2601      	movlt	r6, #1
   e4102:	2600      	movge	r6, #0
   e4104:	f7ff fd7a 	bl	e3bfc <_Balloc>
   e4108:	692b      	ldr	r3, [r5, #16]
   e410a:	60c6      	str	r6, [r0, #12]
   e410c:	6926      	ldr	r6, [r4, #16]
   e410e:	f105 0914 	add.w	r9, r5, #20
   e4112:	3414      	adds	r4, #20
   e4114:	eb04 0786 	add.w	r7, r4, r6, lsl #2
   e4118:	eb09 0883 	add.w	r8, r9, r3, lsl #2
   e411c:	f100 0514 	add.w	r5, r0, #20
   e4120:	f04f 0c00 	mov.w	ip, #0
   e4124:	f854 3b04 	ldr.w	r3, [r4], #4
   e4128:	f859 2b04 	ldr.w	r2, [r9], #4
   e412c:	fa1c f183 	uxtah	r1, ip, r3
   e4130:	fa1f fe82 	uxth.w	lr, r2
   e4134:	0c12      	lsrs	r2, r2, #16
   e4136:	ebce 0101 	rsb	r1, lr, r1
   e413a:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
   e413e:	eb03 4321 	add.w	r3, r3, r1, asr #16
   e4142:	b289      	uxth	r1, r1
   e4144:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e4148:	45c8      	cmp	r8, r9
   e414a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   e414e:	46a6      	mov	lr, r4
   e4150:	f845 3b04 	str.w	r3, [r5], #4
   e4154:	d8e6      	bhi.n	e4124 <__mdiff+0x5a>
   e4156:	45be      	cmp	lr, r7
   e4158:	d20e      	bcs.n	e4178 <__mdiff+0xae>
   e415a:	f85e 1b04 	ldr.w	r1, [lr], #4
   e415e:	fa1c f281 	uxtah	r2, ip, r1
   e4162:	1413      	asrs	r3, r2, #16
   e4164:	eb03 4311 	add.w	r3, r3, r1, lsr #16
   e4168:	b292      	uxth	r2, r2
   e416a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   e416e:	ea4f 4c23 	mov.w	ip, r3, asr #16
   e4172:	f845 2b04 	str.w	r2, [r5], #4
   e4176:	e7ee      	b.n	e4156 <__mdiff+0x8c>
   e4178:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   e417c:	b90b      	cbnz	r3, e4182 <__mdiff+0xb8>
   e417e:	3e01      	subs	r6, #1
   e4180:	e7fa      	b.n	e4178 <__mdiff+0xae>
   e4182:	6106      	str	r6, [r0, #16]
   e4184:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000e4188 <__ulp>:
   e4188:	4b12      	ldr	r3, [pc, #72]	; (e41d4 <__ulp+0x4c>)
   e418a:	ee10 2a90 	vmov	r2, s1
   e418e:	401a      	ands	r2, r3
   e4190:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
   e4194:	2b00      	cmp	r3, #0
   e4196:	dd02      	ble.n	e419e <__ulp+0x16>
   e4198:	2000      	movs	r0, #0
   e419a:	4619      	mov	r1, r3
   e419c:	e017      	b.n	e41ce <__ulp+0x46>
   e419e:	425b      	negs	r3, r3
   e41a0:	151b      	asrs	r3, r3, #20
   e41a2:	2b13      	cmp	r3, #19
   e41a4:	f04f 0000 	mov.w	r0, #0
   e41a8:	f04f 0100 	mov.w	r1, #0
   e41ac:	dc04      	bgt.n	e41b8 <__ulp+0x30>
   e41ae:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   e41b2:	fa42 f103 	asr.w	r1, r2, r3
   e41b6:	e00a      	b.n	e41ce <__ulp+0x46>
   e41b8:	3b14      	subs	r3, #20
   e41ba:	2b1e      	cmp	r3, #30
   e41bc:	f04f 0201 	mov.w	r2, #1
   e41c0:	bfda      	itte	le
   e41c2:	f1c3 031f 	rsble	r3, r3, #31
   e41c6:	fa02 f303 	lslle.w	r3, r2, r3
   e41ca:	4613      	movgt	r3, r2
   e41cc:	4618      	mov	r0, r3
   e41ce:	ec41 0b10 	vmov	d0, r0, r1
   e41d2:	4770      	bx	lr
   e41d4:	7ff00000 	.word	0x7ff00000

000e41d8 <__b2d>:
   e41d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   e41da:	6905      	ldr	r5, [r0, #16]
   e41dc:	f100 0614 	add.w	r6, r0, #20
   e41e0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
   e41e4:	1f2f      	subs	r7, r5, #4
   e41e6:	f855 4c04 	ldr.w	r4, [r5, #-4]
   e41ea:	4620      	mov	r0, r4
   e41ec:	f7ff fdcb 	bl	e3d86 <__hi0bits>
   e41f0:	f1c0 0320 	rsb	r3, r0, #32
   e41f4:	280a      	cmp	r0, #10
   e41f6:	600b      	str	r3, [r1, #0]
   e41f8:	dc14      	bgt.n	e4224 <__b2d+0x4c>
   e41fa:	f1c0 0e0b 	rsb	lr, r0, #11
   e41fe:	fa24 f10e 	lsr.w	r1, r4, lr
   e4202:	42be      	cmp	r6, r7
   e4204:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
   e4208:	bf34      	ite	cc
   e420a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e420e:	2100      	movcs	r1, #0
   e4210:	3015      	adds	r0, #21
   e4212:	fa04 f000 	lsl.w	r0, r4, r0
   e4216:	fa21 f10e 	lsr.w	r1, r1, lr
   e421a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e421e:	ea40 0201 	orr.w	r2, r0, r1
   e4222:	e023      	b.n	e426c <__b2d+0x94>
   e4224:	42be      	cmp	r6, r7
   e4226:	bf3a      	itte	cc
   e4228:	f1a5 0708 	subcc.w	r7, r5, #8
   e422c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   e4230:	2100      	movcs	r1, #0
   e4232:	380b      	subs	r0, #11
   e4234:	d015      	beq.n	e4262 <__b2d+0x8a>
   e4236:	4084      	lsls	r4, r0
   e4238:	f1c0 0520 	rsb	r5, r0, #32
   e423c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
   e4240:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
   e4244:	42b7      	cmp	r7, r6
   e4246:	fa21 fe05 	lsr.w	lr, r1, r5
   e424a:	ea44 030e 	orr.w	r3, r4, lr
   e424e:	bf8c      	ite	hi
   e4250:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
   e4254:	2400      	movls	r4, #0
   e4256:	fa01 f000 	lsl.w	r0, r1, r0
   e425a:	40ec      	lsrs	r4, r5
   e425c:	ea40 0204 	orr.w	r2, r0, r4
   e4260:	e004      	b.n	e426c <__b2d+0x94>
   e4262:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
   e4266:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   e426a:	460a      	mov	r2, r1
   e426c:	ec43 2b10 	vmov	d0, r2, r3
   e4270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000e4272 <__d2b>:
   e4272:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e4276:	460e      	mov	r6, r1
   e4278:	2101      	movs	r1, #1
   e427a:	ec59 8b10 	vmov	r8, r9, d0
   e427e:	4615      	mov	r5, r2
   e4280:	f7ff fcbc 	bl	e3bfc <_Balloc>
   e4284:	f3c9 540a 	ubfx	r4, r9, #20, #11
   e4288:	4607      	mov	r7, r0
   e428a:	f3c9 0313 	ubfx	r3, r9, #0, #20
   e428e:	b10c      	cbz	r4, e4294 <__d2b+0x22>
   e4290:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   e4294:	9301      	str	r3, [sp, #4]
   e4296:	f1b8 0f00 	cmp.w	r8, #0
   e429a:	d019      	beq.n	e42d0 <__d2b+0x5e>
   e429c:	a802      	add	r0, sp, #8
   e429e:	f840 8d08 	str.w	r8, [r0, #-8]!
   e42a2:	f7ff fd90 	bl	e3dc6 <__lo0bits>
   e42a6:	9b00      	ldr	r3, [sp, #0]
   e42a8:	b148      	cbz	r0, e42be <__d2b+0x4c>
   e42aa:	9a01      	ldr	r2, [sp, #4]
   e42ac:	f1c0 0120 	rsb	r1, r0, #32
   e42b0:	fa02 f101 	lsl.w	r1, r2, r1
   e42b4:	430b      	orrs	r3, r1
   e42b6:	40c2      	lsrs	r2, r0
   e42b8:	617b      	str	r3, [r7, #20]
   e42ba:	9201      	str	r2, [sp, #4]
   e42bc:	e000      	b.n	e42c0 <__d2b+0x4e>
   e42be:	617b      	str	r3, [r7, #20]
   e42c0:	9b01      	ldr	r3, [sp, #4]
   e42c2:	61bb      	str	r3, [r7, #24]
   e42c4:	2b00      	cmp	r3, #0
   e42c6:	bf14      	ite	ne
   e42c8:	2102      	movne	r1, #2
   e42ca:	2101      	moveq	r1, #1
   e42cc:	6139      	str	r1, [r7, #16]
   e42ce:	e007      	b.n	e42e0 <__d2b+0x6e>
   e42d0:	a801      	add	r0, sp, #4
   e42d2:	f7ff fd78 	bl	e3dc6 <__lo0bits>
   e42d6:	9b01      	ldr	r3, [sp, #4]
   e42d8:	617b      	str	r3, [r7, #20]
   e42da:	2101      	movs	r1, #1
   e42dc:	6139      	str	r1, [r7, #16]
   e42de:	3020      	adds	r0, #32
   e42e0:	b134      	cbz	r4, e42f0 <__d2b+0x7e>
   e42e2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
   e42e6:	4404      	add	r4, r0
   e42e8:	6034      	str	r4, [r6, #0]
   e42ea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   e42ee:	e009      	b.n	e4304 <__d2b+0x92>
   e42f0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
   e42f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   e42f8:	6030      	str	r0, [r6, #0]
   e42fa:	6918      	ldr	r0, [r3, #16]
   e42fc:	f7ff fd43 	bl	e3d86 <__hi0bits>
   e4300:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   e4304:	6028      	str	r0, [r5, #0]
   e4306:	4638      	mov	r0, r7
   e4308:	b003      	add	sp, #12
   e430a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e430e <__ratio>:
   e430e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   e4312:	4688      	mov	r8, r1
   e4314:	4669      	mov	r1, sp
   e4316:	4681      	mov	r9, r0
   e4318:	f7ff ff5e 	bl	e41d8 <__b2d>
   e431c:	a901      	add	r1, sp, #4
   e431e:	4640      	mov	r0, r8
   e4320:	ec55 4b10 	vmov	r4, r5, d0
   e4324:	f7ff ff58 	bl	e41d8 <__b2d>
   e4328:	f8d9 3010 	ldr.w	r3, [r9, #16]
   e432c:	f8d8 2010 	ldr.w	r2, [r8, #16]
   e4330:	1a9a      	subs	r2, r3, r2
   e4332:	e89d 000a 	ldmia.w	sp, {r1, r3}
   e4336:	1ac9      	subs	r1, r1, r3
   e4338:	ec57 6b10 	vmov	r6, r7, d0
   e433c:	eb01 1342 	add.w	r3, r1, r2, lsl #5
   e4340:	2b00      	cmp	r3, #0
   e4342:	bfcc      	ite	gt
   e4344:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
   e4348:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
   e434c:	4632      	mov	r2, r6
   e434e:	463b      	mov	r3, r7
   e4350:	4620      	mov	r0, r4
   e4352:	4629      	mov	r1, r5
   e4354:	f7fd fbc2 	bl	e1adc <__aeabi_ddiv>
   e4358:	ec41 0b10 	vmov	d0, r0, r1
   e435c:	b003      	add	sp, #12
   e435e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000e4362 <__copybits>:
   e4362:	3901      	subs	r1, #1
   e4364:	b510      	push	{r4, lr}
   e4366:	1149      	asrs	r1, r1, #5
   e4368:	6914      	ldr	r4, [r2, #16]
   e436a:	3101      	adds	r1, #1
   e436c:	f102 0314 	add.w	r3, r2, #20
   e4370:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   e4374:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   e4378:	42a3      	cmp	r3, r4
   e437a:	4602      	mov	r2, r0
   e437c:	d204      	bcs.n	e4388 <__copybits+0x26>
   e437e:	f853 2b04 	ldr.w	r2, [r3], #4
   e4382:	f840 2b04 	str.w	r2, [r0], #4
   e4386:	e7f7      	b.n	e4378 <__copybits+0x16>
   e4388:	2300      	movs	r3, #0
   e438a:	428a      	cmp	r2, r1
   e438c:	d202      	bcs.n	e4394 <__copybits+0x32>
   e438e:	f842 3b04 	str.w	r3, [r2], #4
   e4392:	e7fa      	b.n	e438a <__copybits+0x28>
   e4394:	bd10      	pop	{r4, pc}

000e4396 <__any_on>:
   e4396:	f100 0214 	add.w	r2, r0, #20
   e439a:	6900      	ldr	r0, [r0, #16]
   e439c:	114b      	asrs	r3, r1, #5
   e439e:	4298      	cmp	r0, r3
   e43a0:	b510      	push	{r4, lr}
   e43a2:	db0c      	blt.n	e43be <__any_on+0x28>
   e43a4:	dd0c      	ble.n	e43c0 <__any_on+0x2a>
   e43a6:	f011 011f 	ands.w	r1, r1, #31
   e43aa:	d009      	beq.n	e43c0 <__any_on+0x2a>
   e43ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   e43b0:	fa24 f001 	lsr.w	r0, r4, r1
   e43b4:	fa00 f101 	lsl.w	r1, r0, r1
   e43b8:	428c      	cmp	r4, r1
   e43ba:	d10c      	bne.n	e43d6 <__any_on+0x40>
   e43bc:	e000      	b.n	e43c0 <__any_on+0x2a>
   e43be:	4603      	mov	r3, r0
   e43c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   e43c4:	4293      	cmp	r3, r2
   e43c6:	d904      	bls.n	e43d2 <__any_on+0x3c>
   e43c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   e43cc:	2900      	cmp	r1, #0
   e43ce:	d0f9      	beq.n	e43c4 <__any_on+0x2e>
   e43d0:	e001      	b.n	e43d6 <__any_on+0x40>
   e43d2:	2000      	movs	r0, #0
   e43d4:	bd10      	pop	{r4, pc}
   e43d6:	2001      	movs	r0, #1
   e43d8:	bd10      	pop	{r4, pc}

000e43da <_calloc_r>:
   e43da:	b538      	push	{r3, r4, r5, lr}
   e43dc:	fb02 f401 	mul.w	r4, r2, r1
   e43e0:	4621      	mov	r1, r4
   e43e2:	f7fa fec1 	bl	df168 <_malloc_r>
   e43e6:	4605      	mov	r5, r0
   e43e8:	b118      	cbz	r0, e43f2 <_calloc_r+0x18>
   e43ea:	4622      	mov	r2, r4
   e43ec:	2100      	movs	r1, #0
   e43ee:	f7fd fea5 	bl	e213c <memset>
   e43f2:	4628      	mov	r0, r5
   e43f4:	bd38      	pop	{r3, r4, r5, pc}

000e43f6 <__env_lock>:
   e43f6:	4770      	bx	lr

000e43f8 <__env_unlock>:
   e43f8:	4770      	bx	lr

000e43fa <link_code_end>:
	...

000e43fc <dynalib_user>:
   e43fc:	4021 000d 405d 000d 4089 000d 408d 000d     !@..]@...@...@..
   e440c:	0000 0000 6f6d 6564 0030 6f6d 6564 0031     ....mode0.mode1.
   e441c:	6553 7474 6e69 7367 5700 4669 0069 6953     Settings.WiFi.Si
   e442c:	2067 7453 6772 6874 5400 6d69 2065 6f7a     g Strgth.Time zo
   e443c:	656e 5300 7379 7620 7372 006e 7344 2070     ne.Sys vrsn.Dsp 
   e444c:	7477 7268 4700 7465 4320 324f 4700 7465     wthr.Get CO2.Get
   e445c:	7420 706d 4400 6b72 6320 726c 4d00 6e69      tmp.Drk clr.Min
   e446c:	2069 6c63 006b 4559 0053 4f4e 5200 4445     i clk.YES.NO.RED
   e447c:	4700 4552 4e45 4200 554c 0045 6f68 6b6f     .GREEN.BLUE.hook
   e448c:	722d 7365 6f70 736e 2f65 6557 7461 6568     -response/Weathe
   e449c:	0072 6f68 6b6f 722d 7365 6f70 736e 2f65     r.hook-response/
   e44ac:	6f63 6432 7461 6800 6f6f 2d6b 6572 7073     co2dat.hook-resp
   e44bc:	6e6f 6573 692f 6574 706d 6164 0074 6f68     onse/itempdat.ho
   e44cc:	6b6f 722d 7365 6f70 736e 2f65 6567 5374     ok-response/getS
   e44dc:	6174 6574 7400 676f 6c67 4265 6e74 7000     tate.toggleBtn.p
   e44ec:	6c63 636f 396b 3939 7400 676f 6c67 0065     clock999.toggle.
   e44fc:	7462 706e 6572 7373 3939 0039 6850 746f     btnpress999.Phot
   e450c:	006f 6f43 0032 6e49 6973 6564 5420 6d65     o.Co2.Inside Tem
   e451c:	0070 4545 5250 4d4f 4300 324f 003a 0000     p.EEPROM.CO2:...
   e452c:	c000 4001 1000 4002 2000 4002               ...@...@. .@

000e4538 <CSWTCH.65>:
   e4538:	012c 0000 0018 0000 01f4 0000 012c 0000     ,...........,...
   e4548:	0050 0000                                   P...

000e454c <_ZTVN5spark13EthernetClassE>:
	...
   e4554:	f1d7 000d f1cd 000d f1c3 000d f1b9 000d     ................
   e4564:	f1ad 000d f1a1 000d f195 000d f18d 000d     ................
   e4574:	f183 000d f179 000d 0fa5 000e               ....y.......

000e4580 <_ZTV3UDP>:
	...
   e4588:	f889 000d f8ad 000d f265 000d f38f 000d     ........e.......
   e4598:	f25d 000d f27b 000d f299 000d f2b3 000d     ]...{...........
   e45a8:	f2d7 000d f373 000d f675 000d f415 000d     ....s...u.......
   e45b8:	f595 000d f245 000d f81d 000d f519 000d     ....E...........
   e45c8:	f44d 000d f84b 000d f3b9 000d f253 000d     M...K.......S...
   e45d8:	f3f5 000d f259 000d f2b5 000d fff0 ffff     ....Y...........
   e45e8:	0000 0000 f2cf 000d 6162 6475 5300 7265     ........baud.Ser
   e45f8:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   e4608:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   e4618:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   e4628:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   e4638:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   e4648:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   e4658:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   e4668:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   e4678:	2000 005b 6f63 6564 3d20 0020 6925 6400     . [.code = .%i.d
   e4688:	7465 6961 736c 3d20 0020 0a0d 6c00 006e     etails = ....ln.
   e4698:	6e66 6300 646f 0065 6564 6174 6c69 6e00     fn.code.detail.n
   e46a8:	6e6f 0065 7274 6361 0065 6e69 6f66 7700     one.trace.info.w
   e46b8:	7261 006e 7265 6f72 0072 6170 696e 0063     arn.error.panic.
   e46c8:	6c61 006c 2b25 3330 3a64 3025 7532 2500     all.%+03d:%02u.%
   e46d8:	2d59 6d25 252d 5464 4825 253a 3a4d 5325     Y-%m-%dT%H:%M:%S
   e46e8:	7a25 6100 6373 6974 656d 0000               %z.asctime..

000e46f4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   e46fc:	fd91 000d fd97 000d fddb 000d fda5 000d     ................
   e470c:	fd93 000d                                   ....

000e4710 <_ZTV9IPAddress>:
	...
   e4718:	0329 000e 0319 000e 031b 000e               )...........

000e4724 <_ZTV9USBSerial>:
	...
   e472c:	042d 000e 047d 000e 048b 000e f9d5 000d     -...}...........
   e473c:	0469 000e 042f 000e 0445 000e 0477 000e     i.../...E...w...
   e474c:	045b 000e 0429 000e                         [...)...

000e4754 <_ZTV11USARTSerial>:
	...
   e475c:	055f 000e 05af 000e 05bd 000e f9d5 000d     _...............
   e476c:	0573 000e 0595 000e 0581 000e 05a9 000e     s...............
   e477c:	0561 000e 0565 000e                         a...e...

000e4784 <_ZTV7TwoWire>:
	...
   e478c:	0689 000e 06d3 000e 06ab 000e 068b 000e     ................
   e479c:	06b3 000e 06bb 000e 06c3 000e 06cb 000e     ................

000e47ac <_ZTVN5spark9MeshClassE>:
	...
   e47b4:	0799 000e 078f 000e 0785 000e 077b 000e     ............{...
   e47c4:	076f 000e 0763 000e 0757 000e 074f 000e     o...c...W...O...
   e47d4:	0745 000e 073b 000e 0fa5 000e 6666 3330     E...;.......ff03
   e47e4:	3a3a 3a31 3031 3130 7700 7269 6e69 0067     ::1:1001.wiring.
   e47f4:	6170 7372 2065 6170 6b63 7465 2520 0064     parse packet %d.
   e4804:	6874 0031 656d 6873 7570 0062               th1.meshpub.

000e4810 <_ZTVN5spark9WiFiClassE>:
	...
   e4818:	0e11 000e 0e07 000e 0dfd 000e 0da5 000e     ................
   e4828:	0df1 000e 0de5 000e 0dd9 000e 0dd1 000e     ................
   e4838:	0dc7 000e 0dbd 000e 0fa5 000e               ............

000e4844 <_ZTV10WiFiSignal>:
	...
   e484c:	0d45 000e 0daf 000e 0d47 000e 0e51 000e     E.......G...Q...
   e485c:	0d4d 000e 0e1d 000e 0d79 000e               M.......y...

000e4868 <_ZTVN5spark12NetworkClassE>:
	...
   e4870:	0f3d 000e 0f47 000e 0f51 000e 0f5b 000e     =...G...Q...[...
   e4880:	0f65 000e 0f71 000e 0f7d 000e 0f89 000e     e...q...}.......
   e4890:	0f91 000e 0f9b 000e 0fa5 000e               ............

000e489c <_ZSt7nothrow>:
	...

000e489d <_ctype_>:
   e489d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   e48ad:	2020 2020 2020 2020 2020 2020 2020 2020                     
   e48bd:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   e48cd:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   e48dd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   e48ed:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   e48fd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   e490d:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   e491d:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000e49a0 <__sf_fake_stdin>:
	...

000e49c0 <__sf_fake_stdout>:
	...

000e49e0 <__sf_fake_stderr>:
	...
   e4a00:	0043 4f50 4953 0058 002e 0000               C.POSIX.....

000e4a0c <__month_lengths>:
   e4a0c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   e4a1c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4a2c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   e4a3c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   e4a4c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   e4a5c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000e4a6c <fpi.5344>:
   e4a6c:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   e4a7c:	0000 0000                                   ....

000e4a80 <fpinan.5380>:
   e4a80:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
   e4a90:	0000 0000 666e 6900 696e 7974 6100 006e     ....nf.inity.an.

000e4aa0 <tinytens>:
   e4aa0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   e4ab0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   e4ac0:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   e4ad0:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   e4ae0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   e4af0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   e4b00:	2575 006e 0000 0000                         u%n.....

000e4b08 <__mprec_tens>:
   e4b08:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   e4b18:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   e4b28:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   e4b38:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   e4b48:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   e4b58:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   e4b68:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   e4b78:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   e4b88:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   e4b98:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   e4ba8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   e4bb8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   e4bc8:	9db4 79d9 7843 44ea                         ...yCx.D

000e4bd0 <__mprec_bigtens>:
   e4bd0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   e4be0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   e4bf0:	bf3c 7f73 4fdd 7515                         <.s..O.u

000e4bf8 <p05.5387>:
   e4bf8:	0005 0000 0019 0000 007d 0000               ........}...

000e4c04 <link_const_variable_data_end>:
   e4c04:	000de581 	.word	0x000de581
   e4c08:	000dea69 	.word	0x000dea69
   e4c0c:	000df1e1 	.word	0x000df1e1
   e4c10:	000df211 	.word	0x000df211
   e4c14:	000df9ad 	.word	0x000df9ad
   e4c18:	000dfa6d 	.word	0x000dfa6d
   e4c1c:	000dfbc5 	.word	0x000dfbc5
   e4c20:	000dfc65 	.word	0x000dfc65
   e4c24:	000e0cf5 	.word	0x000e0cf5
   e4c28:	000e0f29 	.word	0x000e0f29
   e4c2c:	000e1071 	.word	0x000e1071
   e4c30:	000e1289 	.word	0x000e1289
   e4c34:	000e130d 	.word	0x000e130d
   e4c38:	000e13d1 	.word	0x000e13d1
   e4c3c:	000e1495 	.word	0x000e1495
